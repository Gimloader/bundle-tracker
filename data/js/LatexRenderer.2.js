function a(a, i, j, b) {
    Object.defineProperty(a, i, {
        get: j,
        set: b,
        enumerable: !0,
        configurable: !0
    });
}
('undefined' != typeof globalThis ? globalThis : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : 'undefined' != typeof global ? global : {}).parcelRequire388b.register('f/Oze', function(i, j) {
    function b(a) {
        return Array.isArray(a);
    }

    function c() {
        return 'window' in globalThis && 'document' in globalThis;
    }

    function d() {
        if (!c())
            throw new Error('<math-field> is an interactive component that needs to run in a browser environment\nIf you are using nextjs, see https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr');
    }

    function e() {
        return !!c() && ('matchMedia' in globalThis ? globalThis.matchMedia('(any-pointer: coarse)').matches : 'ontouchstart' in globalThis || navigator.maxTouchPoints > 0);
    }

    function f() {
        return c() && 'function' == typeof navigator.vibrate;
    }

    function g() {
        var h, i;
        if (!c())
            return 'other';
        const j = null !== (i = null === (h = navigator.userAgentData) || void 0 === h ? void 0 : h.platform) && void 0 !== i ? i : navigator.platform;
        return /^mac/i.test(j) ? 5 === navigator.maxTouchPoints ? 'ios' : 'macos' : /^win/i.test(j) ? 'windows' : /android/i.test(navigator.userAgent) ? 'android' : /iphone|ipod|ipad/i.test(navigator.userAgent) ? 'ios' : /\bcros\b/i.test(navigator.userAgent) ? 'chromeos' : 'other';
    }

    function h() {
        if (!c())
            return !0;
        if (/firefox/i.test(navigator.userAgent)) {
            const i = navigator.userAgent.match(/firefox\/(\d+)/i);
            return !!i && parseInt(i[1]) >= 78;
        }
        if (/trident/i.test(navigator.userAgent))
            return !1;
        if (/edge/i.test(navigator.userAgent)) {
            const i = navigator.userAgent.match(/edg\/(\d+)/i);
            return !!i && parseInt(i[1]) >= 79;
        }
        return !0;
    }
    a(k.exports, 'MathfieldElement', function() {
        return Jh;
    }), a(k.exports, 'renderMathInElement', function() {
        return ei;
    });
    const i = {
        strings: {
            en: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symbols',
                'keyboard.tooltip.greek': 'Greek Letters',
                'keyboard.tooltip.command': 'LaTeX Command Mode',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Roman Letters',
                'tooltip.copy to clipboard': 'Copy to Clipboard',
                'tooltip.redo': 'Redo',
                'tooltip.toggle virtual keyboard': 'Toggle Virtual Keyboard',
                'tooltip.undo': 'Undo',
                'menu.insert matrix': 'Insert Matrix',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Delimiters',
                'menu.array.add row above': 'Add Row After',
                'menu.array.add row below': 'Add Row Before',
                'menu.array.add column after': 'Add Column After',
                'menu.array.add column before': 'Add Column Before',
                'menu.array.delete row': 'Delete Row',
                'menu.array.delete rows': 'Delete Selected Rows',
                'menu.array.delete column': 'Delete Column',
                'menu.array.delete columns': 'Delete Selected Columns',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Insert Table',
                'submenu.table style': 'Table Style'
            },
            ar: {
                'keyboard.tooltip.functions': 'مهام',
                'keyboard.tooltip.symbols': 'حرف او رمز',
                'keyboard.tooltip.greek': 'حروف يونانية',
                'keyboard.tooltip.command': 'حالة تلقي الأوامر اللاتك',
                'keyboard.tooltip.numeric': 'الرقمية',
                'keyboard.tooltip.roman': 'رموز الاحرف الرومانية',
                'tooltip.copy to clipboard': 'نسخ إلى الحافظة',
                'tooltip.redo': 'الإعادة',
                'tooltip.toggle virtual keyboard': 'تبديل لوحة المفاتيح الإفتراضية',
                'tooltip.undo': 'إلغاء',
                'menu.insert matrix': 'أدخل المصفوفة',
                'menu.insert vector': 'أدخل متجه',
                'submenu.array.matrix delimiters': 'محددات المصفوفة',
                'menu.array.add row above': 'أضف صفًا بعد ذلك',
                'menu.array.add row below': 'أضف الصف قبل',
                'menu.array.add column after': 'أضف العمود بعد ذلك',
                'menu.array.add column before': 'أضف العمود قبل',
                'menu.array.delete row': 'احذف صف',
                'menu.array.delete rows': 'حذف الصفوف المحددة',
                'menu.array.delete column': 'حذف العمود',
                'menu.array.delete columns': 'حذف الأعمدة المحددة',
                'submenu.array.insert separator': 'أدخل فاصل',
                'menu.insert table': 'إدراج جدول',
                'submenu.table style': 'نمط الجدول'
            },
            bg: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Гръцки букви',
                'keyboard.tooltip.command': 'Команден режим на латекс',
                'keyboard.tooltip.numeric': 'Числови',
                'keyboard.tooltip.roman': 'Римски букви',
                'tooltip.copy to clipboard': 'Копиране в клипборда',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Превключване на виртуална клавиатура',
                'tooltip.undo': 'Отмяна',
                'menu.insert matrix': 'Вмъкване на матрица',
                'menu.insert vector': 'Вмъкване на вектор',
                'submenu.array.matrix delimiters': 'Матрични разделители',
                'menu.array.add row above': 'Добавяне на ред след',
                'menu.array.add row below': 'Добавяне на ред преди',
                'menu.array.add column after': 'Добавяне на колона след',
                'menu.array.add column before': 'Добавяне на колона преди',
                'menu.array.delete row': 'Изтриване на реда',
                'menu.array.delete rows': 'Изтриване на избраните редове',
                'menu.array.delete column': 'Изтриване на колона',
                'menu.array.delete columns': 'Изтриване на избраните колони',
                'submenu.array.insert separator': 'Поставете разделител',
                'menu.insert table': 'Вмъкване на таблица',
                'submenu.table style': 'Табличен стил'
            },
            bs: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u clipboard',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj red prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši red',
                'menu.array.delete rows': 'Izbriši odabrane redove',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Ubaci tabelu',
                'submenu.table style': 'Stil tabele'
            },
            cs: {
                'keyboard.tooltip.functions': 'Funkce',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Řecké dopisy',
                'keyboard.tooltip.command': 'Příkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Číselné',
                'keyboard.tooltip.roman': 'Římské dopisy',
                'tooltip.copy to clipboard': 'Zkopírovat do schránky',
                'tooltip.redo': 'Předělat',
                'tooltip.toggle virtual keyboard': 'Přepnout virtuální klávesnici',
                'tooltip.undo': 'Vrátit',
                'menu.insert matrix': 'Vložte matici',
                'menu.insert vector': 'Vložit vektor',
                'submenu.array.matrix delimiters': 'Oddělovače matic',
                'menu.array.add row above': 'Přidat řádek za',
                'menu.array.add row below': 'Přidat řádek před',
                'menu.array.add column after': 'Přidat sloupec za',
                'menu.array.add column before': 'Přidat sloupec dříve',
                'menu.array.delete row': 'Odstranit řádek',
                'menu.array.delete rows': 'Odstranit vybrané řádky',
                'menu.array.delete column': 'Odstranit sloupec',
                'menu.array.delete columns': 'Odstranit vybrané sloupce',
                'submenu.array.insert separator': 'Vložte oddělovač',
                'menu.insert table': 'Vložit tabulku',
                'submenu.table style': 'Styl tabulky'
            },
            da: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Græske bogstaver',
                'keyboard.tooltip.command': 'LaTeX kommandotilstand',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske breve',
                'tooltip.copy to clipboard': 'Kopier til udklipsholder',
                'tooltip.redo': 'Gentag igen',
                'tooltip.toggle virtual keyboard': 'Skift virtuelt tastatur',
                'tooltip.undo': 'Fortryd',
                'menu.insert matrix': 'Indsæt matrix',
                'menu.insert vector': 'Indsæt vektor',
                'submenu.array.matrix delimiters': 'Matrixafgrænsere',
                'menu.array.add row above': 'Tilføj række efter',
                'menu.array.add row below': 'Tilføj række før',
                'menu.array.add column after': 'Tilføj kolonne efter',
                'menu.array.add column before': 'Tilføj kolonne før',
                'menu.array.delete row': 'Slet række',
                'menu.array.delete rows': 'Slet valgte rækker',
                'menu.array.delete column': 'Slet kolonne',
                'menu.array.delete columns': 'Slet valgte kolonner',
                'submenu.array.insert separator': 'Indsæt separator',
                'menu.insert table': 'Indsæt tabel',
                'submenu.table style': 'Tabelstil'
            },
            de: {
                'keyboard.tooltip.functions': 'Funktionen',
                'keyboard.tooltip.symbols': 'Symbole',
                'keyboard.tooltip.greek': 'Griechische Buchstaben',
                'keyboard.tooltip.command': 'LaTeX-Befehlsmodus',
                'keyboard.tooltip.numeric': 'Numerisch',
                'keyboard.tooltip.roman': 'Römische Buchstaben',
                'tooltip.copy to clipboard': 'In die Zwischenablage kopieren',
                'tooltip.redo': 'Wiederholen',
                'tooltip.toggle virtual keyboard': 'Virtuelle Tastatur umschalten',
                'tooltip.undo': 'Widerrufen',
                'menu.insert matrix': 'Matrix einfügen',
                'menu.insert vector': 'Vektor einfügen',
                'submenu.array.matrix delimiters': 'Matrixtrennzeichen',
                'menu.array.add row above': 'Zeile hinzufügen nach',
                'menu.array.add row below': 'Zeile hinzufügen vor',
                'menu.array.add column after': 'Spalte hinzufügen nach',
                'menu.array.add column before': 'Spalte hinzufügen vor',
                'menu.array.delete row': 'Zeile löschen',
                'menu.array.delete rows': 'Ausgewählte Zeilen löschen',
                'menu.array.delete column': 'Spalte löschen',
                'menu.array.delete columns': 'Ausgewählte Spalten löschen',
                'submenu.array.insert separator': 'Trennzeichen einfügen',
                'menu.insert table': 'Tabelle einfügen',
                'submenu.table style': 'Tabellenstil'
            },
            el: {
                'keyboard.tooltip.functions': 'συναρτήσεις',
                'keyboard.tooltip.symbols': 'σύμβολα',
                'keyboard.tooltip.greek': 'ελληνικά γράμματα',
                'keyboard.tooltip.command': 'Λειτουργία εντολών LaTeX',
                'keyboard.tooltip.numeric': 'Αριθμητικός',
                'keyboard.tooltip.roman': 'Ρωμαϊκά γράμματα',
                'tooltip.copy to clipboard': 'Αντιγραφή στο πρόχειρο',
                'tooltip.redo': 'Ξανακάνω',
                'tooltip.toggle virtual keyboard': 'Εναλλαγή εικονικού πληκτρολογίου',
                'tooltip.undo': 'Ξεκάνω',
                'menu.insert matrix': 'Εισαγωγή Matrix',
                'menu.insert vector': 'Εισαγωγή διανύσματος',
                'submenu.array.matrix delimiters': 'Οριοθέτες Matrix',
                'menu.array.add row above': 'Προσθήκη σειράς μετά',
                'menu.array.add row below': 'Προσθήκη σειράς πριν',
                'menu.array.add column after': 'Προσθήκη στήλης μετά',
                'menu.array.add column before': 'Προσθήκη στήλης πριν',
                'menu.array.delete row': 'Διαγραφή σειράς',
                'menu.array.delete rows': 'Διαγραφή επιλεγμένων σειρών',
                'menu.array.delete column': 'Διαγραφή στήλης',
                'menu.array.delete columns': 'Διαγραφή επιλεγμένων στηλών',
                'submenu.array.insert separator': 'Εισαγωγή διαχωριστικού',
                'menu.insert table': 'Εισαγωγή πίνακα',
                'submenu.table style': 'Στυλ πίνακα'
            },
            es: {
                'keyboard.tooltip.functions': 'Funciones',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras griegas',
                'keyboard.tooltip.command': 'Modo Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar al portapapeles',
                'tooltip.redo': 'Rehacer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Deshacer',
                'menu.insert matrix': 'Añadir Matriz',
                'menu.insert vector': 'Añadir vector',
                'submenu.array.matrix delimiters': 'Delimitadores de Matriz',
                'menu.array.add row above': 'Añadir Línea Antes',
                'menu.array.add row below': 'Añadir Línea Despues',
                'menu.array.add column after': 'Añadir Columna Despues',
                'menu.array.add column before': 'Añadir Columna Antes',
                'menu.array.delete row': 'Borrar Línea',
                'menu.array.delete rows': 'Borrar Líneas Seleccionadas',
                'menu.array.delete column': 'Borrar Columna',
                'menu.array.delete columns': 'Borrar Columnas Seleccionadas',
                'submenu.array.insert separator': 'Insertar un Separador',
                'menu.insert table': 'Insertar Tabla',
                'submenu.table style': 'Estilo de Tabla'
            },
            et: {
                'keyboard.tooltip.functions': 'Funktsioonid',
                'keyboard.tooltip.symbols': 'Sümbolid',
                'keyboard.tooltip.greek': 'Kreeka kirjad',
                'keyboard.tooltip.command': 'LaTeXi käsurežiim',
                'keyboard.tooltip.numeric': 'Numbriline',
                'keyboard.tooltip.roman': 'Rooma kirjad',
                'tooltip.copy to clipboard': 'Kopeerida lõikelauale',
                'tooltip.redo': 'Tee uuesti',
                'tooltip.toggle virtual keyboard': 'Lülitage sisse virtuaalne klaviatuur',
                'tooltip.undo': 'Võta tagasi',
                'menu.insert matrix': 'Sisesta maatriks',
                'menu.insert vector': 'Sisesta vektor',
                'submenu.array.matrix delimiters': 'Maatriksi eraldajad',
                'menu.array.add row above': 'Lisa rida pärast',
                'menu.array.add row below': 'Lisa rida enne',
                'menu.array.add column after': 'Lisa veerg pärast',
                'menu.array.add column before': 'Lisa veerg enne',
                'menu.array.delete row': 'Kustuta rida',
                'menu.array.delete rows': 'Kustuta valitud read',
                'menu.array.delete column': 'Kustuta veerg',
                'menu.array.delete columns': 'Kustuta valitud veerud',
                'submenu.array.insert separator': 'Sisestage eraldaja',
                'menu.insert table': 'Sisesta tabeli',
                'submenu.table style': 'Tabeli stiilis'
            },
            fa: {
                'keyboard.tooltip.functions': 'توابع',
                'keyboard.tooltip.symbols': 'نمادها',
                'keyboard.tooltip.greek': 'حروف یونانی',
                'keyboard.tooltip.command': 'حالت دستور لاتک',
                'keyboard.tooltip.numeric': 'عددی',
                'keyboard.tooltip.roman': 'حروف رومی',
                'tooltip.copy to clipboard': 'کپی به کلیپبورد',
                'tooltip.redo': 'بازگشت به بعد',
                'tooltip.toggle virtual keyboard': 'نمایش/نهفتن کیبورد مجازی',
                'tooltip.undo': 'بازگشت به قبل',
                'menu.insert matrix': 'ماتریس را وارد کنید',
                'menu.insert vector': 'درج بردار',
                'submenu.array.matrix delimiters': 'مرزهای ماتریس',
                'menu.array.add row above': 'بعد از آن ردیف اضافه کنید',
                'menu.array.add row below': 'ردیف را قبل اضافه کنید',
                'menu.array.add column after': 'اضافه کردن ستون بعد',
                'menu.array.add column before': 'ستون قبل را اضافه کنید',
                'menu.array.delete row': 'ردیف را حذف کنید',
                'menu.array.delete rows': 'ردیف های انتخاب شده را حذف کنید',
                'menu.array.delete column': 'حذف ستون',
                'menu.array.delete columns': 'ستون های انتخاب شده را حذف کنید',
                'submenu.array.insert separator': 'درج جدا کننده',
                'menu.insert table': 'قرار دادن جدول',
                'submenu.table style': 'سبک میز'
            },
            fi: {
                'keyboard.tooltip.functions': 'Toiminnot',
                'keyboard.tooltip.symbols': 'Symbolit',
                'keyboard.tooltip.greek': 'Kreikkalaiset kirjeet',
                'keyboard.tooltip.command': 'LaTeX-komentotila',
                'keyboard.tooltip.numeric': 'Numeerinen',
                'keyboard.tooltip.roman': 'Roomalaiset kirjeet',
                'tooltip.copy to clipboard': 'Kopioi leikepöydälle',
                'tooltip.redo': 'Tee uudelleen',
                'tooltip.toggle virtual keyboard': 'Vaihda virtuaalinäppäimistö',
                'tooltip.undo': 'Kumoa',
                'menu.insert matrix': 'Lisää matriisi',
                'menu.insert vector': 'Lisää vektori',
                'submenu.array.matrix delimiters': 'Matriisin erottimet',
                'menu.array.add row above': 'Lisää rivi jälkeen',
                'menu.array.add row below': 'Lisää rivi ennen',
                'menu.array.add column after': 'Lisää sarake jälkeen',
                'menu.array.add column before': 'Lisää sarake ennen',
                'menu.array.delete row': 'Poista rivi',
                'menu.array.delete rows': 'Poista valitut rivit',
                'menu.array.delete column': 'Poista sarake',
                'menu.array.delete columns': 'Poista valitut sarakkeet',
                'submenu.array.insert separator': 'Aseta erotin',
                'menu.insert table': 'Lisää taulukko',
                'submenu.table style': 'Taulukon tyyli'
            },
            fr: {
                'keyboard.tooltip.functions': 'Fonctions',
                'keyboard.tooltip.symbols': 'Symboles',
                'keyboard.tooltip.greek': 'Lettres grecques',
                'keyboard.tooltip.command': 'Mode de commandes LaTeX',
                'keyboard.tooltip.numeric': 'Numérique',
                'keyboard.tooltip.roman': 'Lettres romaines',
                'tooltip.copy to clipboard': 'Copier dans le presse-papiers',
                'tooltip.redo': 'Rétablir',
                'tooltip.toggle virtual keyboard': 'Afficher/Masquer le clavier virtuel',
                'tooltip.undo': 'Annuler',
                'menu.insert matrix': 'Insérer une Matrice',
                'menu.insert vector': 'Insérer un Vecteur',
                'submenu.array.matrix delimiters': 'Délimiteurs de la Matrice',
                'menu.array.add row above': 'Ajouter une Ligne Avant',
                'menu.array.add row below': 'Ajouter une Ligne Après',
                'menu.array.add column before': 'Ajouter une Colonne Avant',
                'menu.array.add column after': 'Ajouter une Colonne Après',
                'menu.array.delete row': 'Enlever une Ligne',
                'menu.array.delete rows': 'Enlever les Lignes Sélectionées',
                'menu.array.delete column': 'Enlever une Colone',
                'menu.array.delete columns': 'Enlever les Colonnes Sélectionées',
                'submenu.array.insert separator': 'Insérer un Séparateur',
                'menu.insert table': 'Insérer une Table',
                'submenu.table style': 'Style de la  Table'
            },
            ga: {
                'keyboard.tooltip.functions': 'Feidhmeanna',
                'keyboard.tooltip.symbols': 'Siombailí',
                'keyboard.tooltip.greek': 'Litreacha na Gréige',
                'keyboard.tooltip.command': 'Mód Ordú LaTeX',
                'keyboard.tooltip.numeric': 'Uimhriúil',
                'keyboard.tooltip.roman': 'Litreacha Rómhánacha',
                'tooltip.copy to clipboard': 'Cóipeáil chuig an Ghearrthaisce',
                'tooltip.redo': 'Athdhéan',
                'tooltip.toggle virtual keyboard': 'Méarchláir Fíorúil a Fháil',
                'tooltip.undo': 'Cealaigh',
                'menu.insert matrix': 'Cuir isteach Maitrís',
                'menu.insert vector': 'Cuir isteach Veicteoir',
                'submenu.array.matrix delimiters': 'Delimiters Maitrís',
                'menu.array.add row above': 'Cuir Rae Tar éis',
                'menu.array.add row below': 'Cuir Rae Roimh',
                'menu.array.add column after': 'Cuir Colún Tar éis',
                'menu.array.add column before': 'Cuir Colún Roimh',
                'menu.array.delete row': 'Scrios Rae',
                'menu.array.delete rows': 'Scrios Sraitheanna Roghnaithe',
                'menu.array.delete column': 'Scrios Colún',
                'menu.array.delete columns': 'Scrios Colúin Roghnaithe',
                'submenu.array.insert separator': 'Cuir Deighilteoir isteach',
                'menu.insert table': 'Ionsáigh Tábla',
                'submenu.table style': 'Stíl Tábla'
            },
            he: {
                'keyboard.tooltip.functions': 'פונקציות',
                'keyboard.tooltip.symbols': 'סמלים',
                'keyboard.tooltip.greek': 'אותיות יווניות',
                'keyboard.tooltip.command': 'מצב פקודה לטקס',
                'keyboard.tooltip.numeric': 'מספרי',
                'keyboard.tooltip.roman': 'מכתבים רומיים',
                'tooltip.copy to clipboard': 'העתק ללוח',
                'tooltip.redo': 'לַעֲשׂוֹת שׁוּב',
                'tooltip.toggle virtual keyboard': 'החלף את המקלדת הווירטואלית',
                'tooltip.undo': 'לבטל',
                'menu.insert matrix': 'הכנס מטריקס',
                'menu.insert vector': 'הכנס וקטור',
                'submenu.array.matrix delimiters': 'מפרידי מטריקס',
                'menu.array.add row above': 'הוסף שורה אחרי',
                'menu.array.add row below': 'הוסף שורה לפני',
                'menu.array.add column after': 'הוסף עמודה אחרי',
                'menu.array.add column before': 'הוסף עמודה לפני',
                'menu.array.delete row': 'מחק שורה',
                'menu.array.delete rows': 'מחק שורות שנבחרו',
                'menu.array.delete column': 'מחק עמודה',
                'menu.array.delete columns': 'מחק עמודות שנבחרו',
                'submenu.array.insert separator': 'הכנס מפריד',
                'menu.insert table': 'הכנס טבלה',
                'submenu.table style': 'טבלה סִגְנוֹן'
            },
            hr: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u međuspremnik',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj redak prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši redak',
                'menu.array.delete rows': 'Izbriši odabrane retke',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Umetni tablicu',
                'submenu.table style': 'Stil tabele'
            },
            id: {
                'keyboard.tooltip.functions': 'Fungsi',
                'keyboard.tooltip.symbols': 'Simbol',
                'keyboard.tooltip.greek': 'Huruf Yunani',
                'keyboard.tooltip.command': 'Mode Perintah LaTeX',
                'keyboard.tooltip.numeric': 'Numerik',
                'keyboard.tooltip.roman': 'Surat Romawi',
                'tooltip.copy to clipboard': 'Menyalin ke clipboard',
                'tooltip.redo': 'Mengulangi',
                'tooltip.toggle virtual keyboard': 'Alihkan Keyboard Virtual',
                'tooltip.undo': 'Membuka',
                'menu.insert matrix': 'Sisipkan Matriks',
                'menu.insert vector': 'Sisipkan Vektor',
                'submenu.array.matrix delimiters': 'Pembatas Matriks',
                'menu.array.add row above': 'Tambahkan Baris Setelah',
                'menu.array.add row below': 'Tambahkan Baris Sebelumnya',
                'menu.array.add column after': 'Tambahkan Kolom Setelah',
                'menu.array.add column before': 'Tambahkan Kolom Sebelumnya',
                'menu.array.delete row': 'Hapus Baris',
                'menu.array.delete rows': 'Hapus Baris yang Dipilih',
                'menu.array.delete column': 'Hapus Kolom',
                'menu.array.delete columns': 'Hapus Kolom yang Dipilih',
                'submenu.array.insert separator': 'Sisipkan Pemisah',
                'menu.insert table': 'Sisipkan Tabel',
                'submenu.table style': 'Gaya Tabel'
            },
            hi: {
                'keyboard.tooltip.functions': 'कार्यों',
                'keyboard.tooltip.symbols': 'प्रतीक',
                'keyboard.tooltip.greek': 'ग्रीक अक्षर',
                'keyboard.tooltip.command': 'लाटेक्स कमांड मोड',
                'keyboard.tooltip.numeric': 'संख्यात्मक',
                'keyboard.tooltip.roman': 'रोमन पत्र',
                'tooltip.copy to clipboard': 'क्लिपबोर्ड पर कॉपी करें',
                'tooltip.redo': 'फिर से करें',
                'tooltip.toggle virtual keyboard': 'वर्चुअल कीबोर्ड टॉगल करें',
                'tooltip.undo': 'पूर्ववत',
                'menu.insert matrix': 'मैट्रिक्स डालें',
                'menu.insert vector': 'वेक्टर डालें',
                'submenu.array.matrix delimiters': 'मैट्रिक्स सीमांकक',
                'menu.array.add row above': 'बाद में पंक्ति जोड़ें',
                'menu.array.add row below': 'पहले पंक्ति जोड़ें',
                'menu.array.add column after': 'बाद में कॉलम जोड़ें',
                'menu.array.add column before': 'पहले कॉलम जोड़ें',
                'menu.array.delete row': 'पंक्ति को हटाएं',
                'menu.array.delete rows': 'चयनित पंक्तियों को हटाएं',
                'menu.array.delete column': 'कॉलम हटाएं',
                'menu.array.delete columns': 'चयनित कॉलम हटाएं',
                'submenu.array.insert separator': 'विभाजक डालें',
                'menu.insert table': 'टेबल इंसर्ट करें',
                'submenu.table style': 'टेबल स्टाइल'
            },
            hu: {
                'keyboard.tooltip.functions': 'Funkciók',
                'keyboard.tooltip.symbols': 'Szimbólumok',
                'keyboard.tooltip.greek': 'Görög levelek',
                'keyboard.tooltip.command': 'LaTeX Parancs mód',
                'keyboard.tooltip.numeric': 'Numerikus',
                'keyboard.tooltip.roman': 'Római levelek',
                'tooltip.copy to clipboard': 'Másolja a vágólapra',
                'tooltip.redo': 'Újra',
                'tooltip.toggle virtual keyboard': 'Váltás a virtuális billentyűzetre',
                'tooltip.undo': 'Visszavonás',
                'menu.insert matrix': 'Helyezze be a Mátrixot',
                'menu.insert vector': 'Vektor beszúrása',
                'submenu.array.matrix delimiters': 'Mátrixhatárolók',
                'menu.array.add row above': 'Sor hozzáadása után',
                'menu.array.add row below': 'Add Add Sor előtt',
                'menu.array.add column after': 'Oszlop hozzáadása után',
                'menu.array.add column before': 'Add oszlop előtt',
                'menu.array.delete row': 'Sor törlése',
                'menu.array.delete rows': 'Kijelölt sorok törlése',
                'menu.array.delete column': 'Oszlop törlése',
                'menu.array.delete columns': 'A kijelölt oszlopok törlése',
                'submenu.array.insert separator': 'Helyezze be az elválasztót',
                'menu.insert table': 'Helyezze be a táblázatot',
                'submenu.table style': 'Táblázatos stílus'
            },
            it: {
                'keyboard.tooltip.functions': 'Funzioni',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Lettere greche',
                'keyboard.tooltip.command': 'Modalità di comando LaTeX',
                'keyboard.tooltip.numeric': 'Numerico',
                'keyboard.tooltip.roman': 'Lettere romane',
                'tooltip.copy to clipboard': 'Copia negli appunti',
                'tooltip.redo': 'Rifare',
                'tooltip.toggle virtual keyboard': 'Attiva / disattiva la tastiera virtuale',
                'tooltip.undo': 'Disfare',
                'menu.insert matrix': 'Inserisci una Matrice',
                'menu.insert vector': 'Inserisci Vettore',
                'submenu.array.matrix delimiters': 'Delimitatori di Matrice',
                'menu.array.add row above': 'Aggiungi una Riga Prima',
                'menu.array.add row below': 'Aggiungi una Riga Dopo',
                'menu.array.add column before': 'Aggiungi una Colonna Prima',
                'menu.array.add column after': 'Aggiungi una Colonna Dopo',
                'menu.array.delete row': 'Rimuovi una Riga',
                'menu.array.delete rows': 'Rimuovi le Righe Selezionate',
                'menu.array.delete column': 'Rimuovi una Colonna',
                'menu.array.delete columns': 'Rimuovi le Colonne Selezionate',
                'submenu.array.insert separator': 'Inserisci un Separatore',
                'menu.insert table': 'Inserisci Tabella',
                'submenu.table style': 'Stile tabella'
            },
            is: {
                'keyboard.tooltip.functions': 'Aðgerðir',
                'keyboard.tooltip.symbols': 'Tákn',
                'keyboard.tooltip.greek': 'Grísk bréf',
                'keyboard.tooltip.command': 'LaTeX stjórnunarstilling',
                'keyboard.tooltip.numeric': 'Tölulegt',
                'keyboard.tooltip.roman': 'Rómversk bréf',
                'tooltip.copy to clipboard': 'Afritaðu á klemmuspjald',
                'tooltip.redo': 'Endurtaka',
                'tooltip.toggle virtual keyboard': 'Skiptu um sýndarlyklaborð',
                'tooltip.undo': 'Afturkalla',
                'menu.insert matrix': 'Settu fylki inn',
                'menu.insert vector': 'Settu inn Vector',
                'submenu.array.matrix delimiters': 'Matrix afmörkun',
                'menu.array.add row above': 'Bæta við röð á eftir',
                'menu.array.add row below': 'Bæta við röð áður',
                'menu.array.add column after': 'Bæta við dálki á eftir',
                'menu.array.add column before': 'Bæta við dálki áður',
                'menu.array.delete row': 'Eyða röð',
                'menu.array.delete rows': 'Eyða völdum línum',
                'menu.array.delete column': 'Eyða dálki',
                'menu.array.delete columns': 'Eyða völdum dálkum',
                'submenu.array.insert separator': 'Settu skiljuna í',
                'menu.insert table': 'Settu inn töflu',
                'submenu.table style': 'Töflu stíl'
            },
            ja: {
                'keyboard.tooltip.functions': '関数',
                'keyboard.tooltip.symbols': 'シンボル',
                'keyboard.tooltip.greek': 'ギリシャ文字',
                'keyboard.tooltip.command': 'ラテックスコマンドモード',
                'keyboard.tooltip.numeric': '数値',
                'keyboard.tooltip.roman': 'ローマ字',
                'tooltip.copy to clipboard': 'クリップボードにコピー',
                'tooltip.redo': 'やり直し',
                'tooltip.toggle virtual keyboard': '仮想キーボードの切り替え',
                'tooltip.undo': '元に戻す',
                'menu.insert matrix': 'マトリックスを挿入',
                'menu.insert vector': 'ベクトルを挿入',
                'submenu.array.matrix delimiters': '行列区切り文字',
                'menu.array.add row above': '後に行を追加',
                'menu.array.add row below': '前に行を追加',
                'menu.array.add column after': '後に列を追加',
                'menu.array.add column before': '前に列を追加',
                'menu.array.delete row': '行を削除',
                'menu.array.delete rows': '選択した行を削除する',
                'menu.array.delete column': '列を削除',
                'menu.array.delete columns': '選択した列を削除する',
                'submenu.array.insert separator': 'セパレーターを挿入',
                'menu.insert table': 'テーブルを挿入',
                'submenu.table style': 'テーブルスタイル'
            },
            ko: {
                'keyboard.tooltip.functions': '기능',
                'keyboard.tooltip.symbols': '기호',
                'keyboard.tooltip.greek': '그리스 문자',
                'keyboard.tooltip.command': '유액 명령 모드',
                'keyboard.tooltip.numeric': '숫자',
                'keyboard.tooltip.roman': '로마 문자',
                'tooltip.copy to clipboard': '클립 보드에 복사',
                'tooltip.redo': '다시 하다',
                'tooltip.toggle virtual keyboard': '가상 키보드 전환',
                'tooltip.undo': '실행 취소',
                'menu.insert matrix': '매트릭스 삽입',
                'menu.insert vector': '벡터 삽입',
                'submenu.array.matrix delimiters': '행렬 구분 기호',
                'menu.array.add row above': '뒤에 행 추가',
                'menu.array.add row below': '앞에 행 추가',
                'menu.array.add column after': '뒤에 열 추가',
                'menu.array.add column before': '앞에 열 추가',
                'menu.array.delete row': '행 삭제',
                'menu.array.delete rows': '선택한 행 삭제',
                'menu.array.delete column': '열 삭제',
                'menu.array.delete columns': '선택한 열 삭제',
                'submenu.array.insert separator': '구분자 삽입',
                'menu.insert table': '표 삽입',
                'submenu.table style': '테이블 스타일'
            },
            lv: {
                'keyboard.tooltip.functions': 'Funkcijas',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grieķu burti',
                'keyboard.tooltip.command': 'LaTeX komandu režīms',
                'keyboard.tooltip.numeric': 'Ciparu skaitlis',
                'keyboard.tooltip.roman': 'Romiešu vēstules',
                'tooltip.copy to clipboard': 'Kopēt starpliktuvē',
                'tooltip.redo': 'Pārtaisīt',
                'tooltip.toggle virtual keyboard': 'Pārslēgt virtuālo tastatūru',
                'tooltip.undo': 'Atsaukt',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Galda stils'
            },
            lt: {
                'keyboard.tooltip.functions': 'Funkcijos',
                'keyboard.tooltip.symbols': 'Simboliai',
                'keyboard.tooltip.greek': 'Graikiškos raidės',
                'keyboard.tooltip.command': 'LaTeX komandų režimas',
                'keyboard.tooltip.numeric': 'Skaitmeninis',
                'keyboard.tooltip.roman': 'Romos laiškai',
                'tooltip.copy to clipboard': 'Nukopijuoti į iškarpinę',
                'tooltip.redo': 'Perdaryti',
                'tooltip.toggle virtual keyboard': 'Perjungti virtualiąją klaviatūrą',
                'tooltip.undo': 'Atšaukti',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Tabulas stili'
            },
            lu: {
                'keyboard.tooltip.functions': 'Funktiounen',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Griichesch Bréiwer',
                'keyboard.tooltip.command': 'LaTeX Kommando Modus',
                'keyboard.tooltip.numeric': 'Numeresch',
                'keyboard.tooltip.roman': 'Réimesch Bréiwer',
                'tooltip.copy to clipboard': 'Kopéiert op Clipboard',
                'tooltip.redo': 'Nees nei maachen',
                'tooltip.toggle virtual keyboard': 'Wiesselt Virtuell Tastatur',
                'tooltip.undo': 'Undoen',
                'menu.insert matrix': 'Matrix asetzen',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Ofgrenzer',
                'menu.array.add row above': 'Dobäizemaachen Rei No',
                'menu.array.add row below': 'Füügt Rei vir',
                'menu.array.add column after': 'Dobäizemaachen Kolonn No',
                'menu.array.add column before': 'Kolonn derbäi Virun',
                'menu.array.delete row': 'Rad läschen',
                'menu.array.delete rows': 'Läscht Ausgewielte Reien',
                'menu.array.delete column': 'Läscht Kolonn',
                'menu.array.delete columns': 'Läscht Ausgewielte Kolonnen',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Dësch anzeginn',
                'submenu.table style': 'Dësch Style'
            },
            nl: {
                'keyboard.tooltip.functions': 'Functies',
                'keyboard.tooltip.symbols': 'Symbolen',
                'keyboard.tooltip.greek': 'Griekse letters',
                'keyboard.tooltip.command': 'LaTeX commando mode',
                'keyboard.tooltip.numeric': 'Numeriek',
                'keyboard.tooltip.roman': 'Romeinse letters',
                'tooltip.copy to clipboard': 'Kopiëren naar klembord',
                'tooltip.redo': 'Opnieuw',
                'tooltip.toggle virtual keyboard': 'Schakel naar virtueel toetsenbord',
                'tooltip.undo': 'Ongedaan maken',
                'menu.insert matrix': 'Matrix invoegen',
                'menu.insert vector': 'Vector invoegen',
                'submenu.array.matrix delimiters': 'Matrixscheidingstekens',
                'menu.array.add row above': 'Rij toevoegen na',
                'menu.array.add row below': 'Rij toevoegen eerder',
                'menu.array.add column after': 'Kolom toevoegen na',
                'menu.array.add column before': 'Kolom toevoegen voor',
                'menu.array.delete row': 'Verwijder rij',
                'menu.array.delete rows': 'Geselecteerde rijen verwijderen',
                'menu.array.delete column': 'Kolom verwijderen',
                'menu.array.delete columns': 'Geselecteerde kolommen verwijderen',
                'submenu.array.insert separator': 'Scheidingsteken invoegen',
                'menu.insert table': 'Tabel invoegen',
                'submenu.table style': 'Tabelstijl'
            },
            no: {
                'keyboard.tooltip.functions': 'Funksjoner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Greske bokstaver',
                'keyboard.tooltip.command': 'LaTeX kommandomodus',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske bokstaver',
                'tooltip.copy to clipboard': 'Kopiere til utklippstavle',
                'tooltip.redo': 'Gjøre om',
                'tooltip.toggle virtual keyboard': 'Bytt virtuelt tastatur',
                'tooltip.undo': 'Angre',
                'menu.insert matrix': 'Sett inn matrise',
                'menu.insert vector': 'Sett inn vektor',
                'submenu.array.matrix delimiters': 'Matrix avgrensere',
                'menu.array.add row above': 'Legg til rad etter',
                'menu.array.add row below': 'Legg til rad før',
                'menu.array.add column after': 'Legg til kolonne etter',
                'menu.array.add column before': 'Legg til kolonne før',
                'menu.array.delete row': 'Slett rad',
                'menu.array.delete rows': 'Slett valgte rader',
                'menu.array.delete column': 'Slett kolonne',
                'menu.array.delete columns': 'Slett valgte kolonner',
                'submenu.array.insert separator': 'Sett inn skilletegn',
                'menu.insert table': 'Sett inn tabell',
                'submenu.table style': 'Tabellstil'
            },
            mk: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Грчки букви',
                'keyboard.tooltip.command': 'Режим на команда во латекс',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римски писма',
                'tooltip.copy to clipboard': 'Копирајте во клипборд',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Вклучете ја виртуелната тастатура',
                'tooltip.undo': 'Врати',
                'menu.insert matrix': 'Вметнете матрица',
                'menu.insert vector': 'Вметни вектор',
                'submenu.array.matrix delimiters': 'Разграничувачи на матрица',
                'menu.array.add row above': 'Додадете ред после',
                'menu.array.add row below': 'Додади ред пред тоа',
                'menu.array.add column after': 'Додадете колона после',
                'menu.array.add column before': 'Додадете колона пред тоа',
                'menu.array.delete row': 'Избриши го редот',
                'menu.array.delete rows': 'Избришете ги избраните редови',
                'menu.array.delete column': 'Избриши ја колоната',
                'menu.array.delete columns': 'Избриши ја колоната',
                'submenu.array.insert separator': 'Вметнете сепаратор',
                'menu.insert table': 'Вметни табела',
                'submenu.table style': 'Табела стил'
            },
            pl: {
                'keyboard.tooltip.functions': 'Funkcje',
                'keyboard.tooltip.symbols': 'Symbolika',
                'keyboard.tooltip.greek': 'Litery greckie',
                'keyboard.tooltip.command': 'Tryb poleceń LaTeX',
                'keyboard.tooltip.numeric': 'Numeryczne',
                'keyboard.tooltip.roman': 'Litery rzymskie',
                'tooltip.copy to clipboard': 'Kopiuj do Schowka',
                'tooltip.redo': 'Przywróć',
                'tooltip.toggle virtual keyboard': 'Przełącz wirtualną klawiaturę',
                'tooltip.undo': 'Cofnij',
                'menu.insert matrix': 'Wstaw macierz',
                'menu.insert vector': 'Wstaw wektor',
                'submenu.array.matrix delimiters': 'Ograniczniki macierzy',
                'menu.array.add row above': 'Dodaj wiersz po',
                'menu.array.add row below': 'Dodaj wiersz przed',
                'menu.array.add column after': 'Dodaj kolumnę po',
                'menu.array.add column before': 'Dodaj kolumnę przed',
                'menu.array.delete row': 'Usuń wiersz',
                'menu.array.delete rows': 'Usuń wybrane wiersze',
                'menu.array.delete column': 'Usuń kolumnę',
                'menu.array.delete columns': 'Usuń wybrane kolumny',
                'submenu.array.insert separator': 'Wstaw separator',
                'menu.insert table': 'Wypełnij tabelę',
                'submenu.table style': 'Styl tabelę'
            },
            pt: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras gregas',
                'keyboard.tooltip.command': 'Modo de Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar para área de transferência',
                'tooltip.redo': 'Refazer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Desfazer',
                'menu.insert matrix': 'Inserir Matriz',
                'menu.insert vector': 'Inserir vetor',
                'submenu.array.matrix delimiters': 'Delimitadores de matriz',
                'menu.array.add row above': 'Adicionar linha depois',
                'menu.array.add row below': 'Adicionar linha antes',
                'menu.array.add column after': 'Adicionar coluna depois',
                'menu.array.add column before': 'Adicionar coluna antes',
                'menu.array.delete row': 'Excluir linha',
                'menu.array.delete rows': 'Excluir linhas selecionadas',
                'menu.array.delete column': 'Apagar Coluna',
                'menu.array.delete columns': 'Excluir Colunas Selecionadas',
                'submenu.array.insert separator': 'Inserir Separador',
                'menu.insert table': 'Insira a tabela',
                'submenu.table style': 'Estilo tabela'
            },
            ro: {
                'keyboard.tooltip.functions': 'Funcții',
                'keyboard.tooltip.symbols': 'Simboluri',
                'keyboard.tooltip.greek': 'Scrisori grecești',
                'keyboard.tooltip.command': 'Modul de comandă latex',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Scrisori romane',
                'tooltip.copy to clipboard': 'Copiați în clipboard',
                'tooltip.redo': 'A reface',
                'tooltip.toggle virtual keyboard': 'Comutați tastatura virtuală',
                'tooltip.undo': 'Anula',
                'menu.insert matrix': 'Introduceți Matrix',
                'menu.insert vector': 'Inserați Vector',
                'submenu.array.matrix delimiters': 'Delimitatori de matrice',
                'menu.array.add row above': 'Adăugați rândul după',
                'menu.array.add row below': 'Adăugați rândul înainte',
                'menu.array.add column after': 'Adăugați o coloană după',
                'menu.array.add column before': 'Adăugați o coloană înainte',
                'menu.array.delete row': 'Ștergeți rândul',
                'menu.array.delete rows': 'Ștergeți rândurile selectate',
                'menu.array.delete column': 'Ștergeți coloana',
                'menu.array.delete columns': 'Ștergeți coloanele selectate',
                'submenu.array.insert separator': 'Introduceți separatorul',
                'menu.insert table': 'Introduceți tabelul',
                'submenu.table style': 'Table style'
            },
            ru: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символы',
                'keyboard.tooltip.greek': 'Греческие буквы',
                'keyboard.tooltip.command': 'Режим командной строки Латекс',
                'keyboard.tooltip.numeric': 'числовой',
                'keyboard.tooltip.roman': 'Латинские буквы',
                'tooltip.copy to clipboard': 'Скопировать в буфер обмена',
                'tooltip.redo': 'переделывать',
                'tooltip.toggle virtual keyboard': 'Переключить виртуальную клавиатуру',
                'tooltip.undo': 'расстегивать',
                'menu.insert matrix': 'Вставить матрицу',
                'menu.insert vector': 'Вставить вектор',
                'submenu.array.matrix delimiters': 'Матричные разделители',
                'menu.array.add row above': 'Добавить строку после',
                'menu.array.add row below': 'Добавить строку перед',
                'menu.array.add column after': 'Добавить столбец после',
                'menu.array.add column before': 'Добавить столбец перед',
                'menu.array.delete row': 'Удалить строку',
                'menu.array.delete rows': 'Удалить выбранные строки',
                'menu.array.delete column': 'Удалить столбец',
                'menu.array.delete columns': 'Удалить выбранные столбцы',
                'submenu.array.insert separator': 'Вставить разделитель',
                'menu.insert table': 'Вставить таблицу',
                'submenu.table style': 'Табличный стиль'
            },
            sk: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Grécke listy',
                'keyboard.tooltip.command': 'Príkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Numerické',
                'keyboard.tooltip.roman': 'Rímske listy',
                'tooltip.copy to clipboard': 'Skopírovať do schránky',
                'tooltip.redo': 'Znova',
                'tooltip.toggle virtual keyboard': 'Prepnúť virtuálnu klávesnicu',
                'tooltip.undo': 'Vrátenie späť',
                'menu.insert matrix': 'Vložte maticu',
                'menu.insert vector': 'Vložte vektor',
                'submenu.array.matrix delimiters': 'Oddeľovače matíc',
                'menu.array.add row above': 'Pridajte riadok za',
                'menu.array.add row below': 'Pridajte riadok pred',
                'menu.array.add column after': 'Pridať stĺpec za',
                'menu.array.add column before': 'Pridajte stĺpec predtým',
                'menu.array.delete row': 'Odstrániť riadok',
                'menu.array.delete rows': 'Odstrániť vybraté riadky',
                'menu.array.delete column': 'Odstrániť stĺpec',
                'menu.array.delete columns': 'Odstrániť vybraté stĺpce',
                'submenu.array.insert separator': 'Vložte oddeľovač',
                'menu.insert table': 'Vložte tabuľku',
                'submenu.table style': 'Štýl tabuľky'
            },
            sl: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grška pisma',
                'keyboard.tooltip.command': 'Ukazni način LaTeX',
                'keyboard.tooltip.numeric': 'Številsko',
                'keyboard.tooltip.roman': 'Rimska pisma',
                'tooltip.copy to clipboard': 'Kopirati v odložišče',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Preklop navidezne tipkovnice',
                'tooltip.undo': 'Razveljavi',
                'menu.insert matrix': 'Vstavi matrico',
                'menu.insert vector': 'Vstavi vektor',
                'submenu.array.matrix delimiters': 'Matrični ločevalniki',
                'menu.array.add row above': 'Dodaj vrstico po',
                'menu.array.add row below': 'Dodaj vrstico prej',
                'menu.array.add column after': 'Dodaj stolpec po',
                'menu.array.add column before': 'Dodaj stolpec prej',
                'menu.array.delete row': 'Izbriši vrstico',
                'menu.array.delete rows': 'Izbriši izbrane vrstice',
                'menu.array.delete column': 'Izbriši stolpec',
                'menu.array.delete columns': 'Izbriši izbrane stolpce',
                'submenu.array.insert separator': 'Vstavi ločilo',
                'menu.insert table': 'Vstavi tabelo',
                'submenu.table style': 'Tabela slog'
            },
            sq: {
                'keyboard.tooltip.functions': 'Funksione',
                'keyboard.tooltip.symbols': 'Simbolet',
                'keyboard.tooltip.greek': 'Letrat Greke',
                'keyboard.tooltip.command': 'Modaliteti i komandës latex',
                'keyboard.tooltip.numeric': 'Numerike',
                'keyboard.tooltip.roman': 'Letrat romake',
                'tooltip.copy to clipboard': 'Kopjoni në Clipboard',
                'tooltip.redo': 'Riparo',
                'tooltip.toggle virtual keyboard': 'Aktivizo tastierën virtuale',
                'tooltip.undo': 'Zhbëj',
                'menu.insert matrix': 'Vendosni Matricën',
                'menu.insert vector': 'Vendos vektorin',
                'submenu.array.matrix delimiters': 'Përcaktuesit e matricës',
                'menu.array.add row above': 'Shto Rreshtin Pas',
                'menu.array.add row below': 'Shto Rreshtin Para',
                'menu.array.add column after': 'Shto kolonën pas',
                'menu.array.add column before': 'Shto kolonën para',
                'menu.array.delete row': 'Fshi Rreshtin',
                'menu.array.delete rows': 'Fshi rreshtat e zgjedhur',
                'menu.array.delete column': 'Fshi kolonën',
                'menu.array.delete columns': 'Fshi kolonat e zgjedhura',
                'submenu.array.insert separator': 'Vendos Ndarësin',
                'menu.insert table': 'Vendos tabelën',
                'submenu.table style': 'Stili tabelën'
            },
            sr: {
                'keyboard.tooltip.functions': 'Функције',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Греек Леттерс',
                'keyboard.tooltip.command': 'ЛаТеКс командни режим',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римска писма',
                'tooltip.copy to clipboard': 'Копирајте у међуспремник',
                'tooltip.redo': 'Понови',
                'tooltip.toggle virtual keyboard': 'Укључи / искључи виртуелну тастатуру',
                'tooltip.undo': 'Опозови',
                'menu.insert matrix': 'Уметни матрицу',
                'menu.insert vector': 'Уметни вектор',
                'submenu.array.matrix delimiters': 'Матрик Делимитерс',
                'menu.array.add row above': 'Додај ред после',
                'menu.array.add row below': 'Додај ред пре',
                'menu.array.add column after': 'Додај колону после',
                'menu.array.add column before': 'Додај колону пре',
                'menu.array.delete row': 'Избриши ред',
                'menu.array.delete rows': 'Избриши изабране редове',
                'menu.array.delete column': 'Избриши колону',
                'menu.array.delete columns': 'Избриши изабране колоне',
                'submenu.array.insert separator': 'Уметни сепаратор',
                'menu.insert table': 'Убаци табелу',
                'submenu.table style': 'Табеларни стил'
            },
            sv: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Grekiska bokstäver',
                'keyboard.tooltip.command': 'LaTeX kommandoläge',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerska bokstäver',
                'tooltip.copy to clipboard': 'Kopiera till Urklipp',
                'tooltip.redo': 'Göra om',
                'tooltip.toggle virtual keyboard': 'Växla virtuellt tangentbord',
                'tooltip.undo': 'Ångra',
                'menu.insert matrix': 'Sätt in matris',
                'menu.insert vector': 'Infoga vektor',
                'submenu.array.matrix delimiters': 'Matrisavgränsare',
                'menu.array.add row above': 'Lägg till rad efter',
                'menu.array.add row below': 'Lägg till rad före',
                'menu.array.add column after': 'Lägg till kolumn efter',
                'menu.array.add column before': 'Lägg till kolumn före',
                'menu.array.delete row': 'Radera rad',
                'menu.array.delete rows': 'Ta bort valda rader',
                'menu.array.delete column': 'Ta bort kolumn',
                'menu.array.delete columns': 'Ta bort valda kolumner',
                'submenu.array.insert separator': 'Sätt i separator',
                'menu.insert table': 'Infoga tabell',
                'submenu.table style': 'Tabellstil'
            },
            th: {
                'keyboard.tooltip.functions': 'ฟังก์ชั่น',
                'keyboard.tooltip.symbols': 'สัญลักษณ์',
                'keyboard.tooltip.greek': 'อักษรกรีก',
                'keyboard.tooltip.command': 'โหมดคำสั่ง น้ำยาง',
                'keyboard.tooltip.numeric': 'ตัวเลข',
                'keyboard.tooltip.roman': 'อักษรโรมัน',
                'tooltip.copy to clipboard': 'คัดลอกไปที่คลิปบอร์ด',
                'tooltip.redo': 'ทำซ้ำ',
                'tooltip.toggle virtual keyboard': 'สลับแป้นพิมพ์เสมือน',
                'tooltip.undo': 'เลิกทำ',
                'menu.insert matrix': 'แทรกเมทริกซ์',
                'menu.insert vector': 'แทรกเวกเตอร์',
                'submenu.array.matrix delimiters': 'ตัวคั่นเมทริกซ์',
                'menu.array.add row above': 'เพิ่มแถวหลัง',
                'menu.array.add row below': 'เพิ่มแถวก่อน',
                'menu.array.add column after': 'เพิ่มคอลัมน์หลัง',
                'menu.array.add column before': 'เพิ่มคอลัมน์ก่อน',
                'menu.array.delete row': 'ลบแถว',
                'menu.array.delete rows': 'ลบแถวที่เลือก',
                'menu.array.delete column': 'ลบคอลัมน์',
                'menu.array.delete columns': 'ลบคอลัมน์ที่เลือก',
                'submenu.array.insert separator': 'ตัวคั่นแทรก',
                'menu.insert table': 'แทรกตาราง',
                'submenu.table style': 'สไตล์ตาราง'
            },
            tr: {
                'keyboard.tooltip.functions': 'Fonksiyonlar',
                'keyboard.tooltip.symbols': 'Semboller',
                'keyboard.tooltip.greek': 'Yunan harfleri',
                'keyboard.tooltip.command': 'LaTeX Komut Modu',
                'keyboard.tooltip.numeric': 'Sayısal',
                'keyboard.tooltip.roman': 'Roma Harfleri',
                'tooltip.copy to clipboard': 'Panoya kopyala',
                'tooltip.redo': 'Yeniden yap',
                'tooltip.toggle virtual keyboard': 'Sanal Klavyeyi Aç/Kapat',
                'tooltip.undo': 'Geri alma',
                'menu.insert matrix': 'Matris Ekle',
                'menu.insert vector': 'Vektör Ekle',
                'submenu.array.matrix delimiters': 'Matris Sınırlayıcılar',
                'menu.array.add row above': 'Satırdan Sonra Ekle',
                'menu.array.add row below': 'Önce Satır Ekle',
                'menu.array.add column after': 'Sonra Sütun Ekle',
                'menu.array.add column before': 'Önce Sütun Ekle',
                'menu.array.delete row': 'Sırayı sil',
                'menu.array.delete rows': 'Seçili Satırları Sil',
                'menu.array.delete column': 'Sütunu Sil',
                'menu.array.delete columns': 'Seçili Sütunları Sil',
                'submenu.array.insert separator': 'Ayırıcı Ekle',
                'menu.insert table': 'Tablo Ekle',
                'submenu.table style': 'Tablo Stili'
            },
            uk: {
                'keyboard.tooltip.functions': 'Функції',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Грецькі літери',
                'keyboard.tooltip.command': 'Командний режим латексу',
                'keyboard.tooltip.numeric': 'Числовий',
                'keyboard.tooltip.roman': 'Римські літери',
                'tooltip.copy to clipboard': 'Копіювати в буфер обміну',
                'tooltip.redo': 'Повторити',
                'tooltip.toggle virtual keyboard': 'Переключити віртуальну клавіатуру',
                'tooltip.undo': 'Скасувати',
                'menu.insert matrix': 'Вставити матрицю',
                'menu.insert vector': 'Вставити вектор',
                'submenu.array.matrix delimiters': 'Матричні роздільники',
                'menu.array.add row above': 'Додати рядок після',
                'menu.array.add row below': 'Додати рядок до',
                'menu.array.add column after': 'Додати стовпець після',
                'menu.array.add column before': 'Додати стовпець перед',
                'menu.array.delete row': 'Видалити рядок',
                'menu.array.delete rows': 'Видалити вибрані рядки',
                'menu.array.delete column': 'Видалити стовпець',
                'menu.array.delete columns': 'Видалити вибрані стовпці',
                'submenu.array.insert separator': 'Вставте роздільник',
                'menu.insert table': 'Вставити таблицю',
                'submenu.table style': 'Стиль таблиці'
            },
            vi: {
                'keyboard.tooltip.functions': 'Chức năng',
                'keyboard.tooltip.symbols': 'Ký hiệu',
                'keyboard.tooltip.greek': 'Chữ Hy Lạp',
                'keyboard.tooltip.command': 'Chế độ lệnh LaTeX',
                'keyboard.tooltip.numeric': 'Số',
                'keyboard.tooltip.roman': 'Chữ cái La mã',
                'tooltip.copy to clipboard': 'Sao chép vào clipboard',
                'tooltip.redo': 'Làm lại',
                'tooltip.toggle virtual keyboard': 'Chuyển đổi bàn phím ảo',
                'tooltip.undo': 'Hoàn tác',
                'menu.insert matrix': 'Chèn ma trận',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Dấu phân cách ma trận',
                'menu.array.add row above': 'Thêm hàng sau',
                'menu.array.add row below': 'Thêm hàng trước',
                'menu.array.add column after': 'Thêm cột sau',
                'menu.array.add column before': 'Thêm cột trước',
                'menu.array.delete row': 'Xóa hàng',
                'menu.array.delete rows': 'Xóa hàng đã chọn',
                'menu.array.delete column': 'Xóa cột',
                'menu.array.delete columns': 'Xóa các cột đã chọn',
                'submenu.array.insert separator': 'Chèn dấu phân cách',
                'menu.insert table': 'Chèn bảng',
                'submenu.table style': 'Kiểu bảng'
            },
            zh_cn: {
                'keyboard.tooltip.functions': '职能',
                'keyboard.tooltip.symbols': '符号',
                'keyboard.tooltip.greek': '希腊字母',
                'keyboard.tooltip.command': '乳胶 命令模式',
                'keyboard.tooltip.numeric': '数字',
                'keyboard.tooltip.roman': '罗马字母',
                'tooltip.copy to clipboard': '复制到剪贴板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切换虚拟键盘',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩阵',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩阵分隔符',
                'menu.array.add row above': '在后面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在后面添加列r',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '删除行',
                'menu.array.delete rows': '删除选定行',
                'menu.array.delete column': '删除列',
                'menu.array.delete columns': '删除选定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格样式'
            },
            zh_tw: {
                'keyboard.tooltip.functions': '職能',
                'keyboard.tooltip.symbols': '符號',
                'keyboard.tooltip.greek': '希臘字母',
                'keyboard.tooltip.command': '乳膠命令模式',
                'keyboard.tooltip.numeric': '數字',
                'keyboard.tooltip.roman': '羅馬字母',
                'tooltip.copy to clipboard': '複製到剪貼板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切換虛擬鍵盤',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩陣',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩陣分隔符',
                'menu.array.add row above': '在後面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在後面添加列',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '刪除行',
                'menu.array.delete rows': '刪除選定行',
                'menu.array.delete column': '刪除列',
                'menu.array.delete columns': '刪除選定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格樣式'
            }
        },
        _locale: '',
        get locale() {
            return i._locale || (i._locale = c() ? navigator.language.slice(0, 5) : 'en'), i._locale;
        },
        set locale(a) {
            i._locale = a;
        },
        merge(a, k) {
            if (a && k) {
                const j = i._locale;
                i.locale = a, i.strings[a] = {
                    ...i.strings[a],
                    ...k
                }, i.locale = j;
            } else if (a && !k)
                for (const k of Object.keys(a))
                    i.merge(k, a[k]);
        }
    };

    function j(a) {
        if (void 0 === a)
            return;
        const k = i.locale.slice(0, 2);
        let l = '';
        return i.strings[i.locale] && (l = i.strings[i.locale][a]), !l && i.strings[k] && (l = i.strings[k][a]), l || (l = i.strings.en[a]), l || void 0;
    }
    const k = {
            m0: '#3F3D99',
            m1: '#993D71',
            m2: '#998B3D',
            m3: '#3D9956',
            m4: '#3D5A99',
            m5: '#993D90',
            m6: '#996D3D',
            m7: '#43993D',
            m8: '#3D7999',
            m9: '#843D99'
        },
        l = {
            blue: '#0072BD',
            orange: '#D95319',
            yellow: '#EDB120',
            purple: '#7E2F8E',
            green: '#77AC30',
            cyan: '#4DBEEE',
            red: '#A2142F'
        },
        m = {
            red: '#fbbbb6',
            orange: '#ffe0c2',
            yellow: '#fff1c2',
            lime: '#d0e8b9',
            green: '#bceac4',
            teal: '#b9f1f1',
            blue: '#b6d9fb',
            indigo: '#d1c2f0',
            purple: '#e3baf8',
            magenta: '#f9c8e0',
            black: '#353535',
            'dark-grey': '#8C8C8C',
            grey: '#D0D0D0',
            'light-grey': '#F0F0F0',
            white: '#ffffff'
        },
        n = {
            red: '#d7170b',
            orange: '#fe8a2b',
            yellow: '#ffc02b',
            lime: '#63b215',
            green: '#21ba3a',
            teal: '#17cfcf',
            blue: '#0d80f2',
            indigo: '#63c',
            purple: '#a219e6',
            magenta: '#eb4799',
            black: '#000',
            'dark-grey': '#666',
            grey: '#A6A6A6',
            'light-grey': '#d4d5d2',
            white: '#ffffff'
        },
        o = {
            Red: 'red',
            Orange: 'orange',
            Yellow: 'yellow',
            LimeGreen: 'lime',
            Green: 'green',
            TealBlue: 'teal',
            Blue: 'blue',
            Violet: 'indigo',
            Purple: 'purple',
            Magenta: 'magenta',
            Black: 'black',
            Gray: 'grey',
            White: 'white'
        },
        p = {
            Apricot: '#FBB982',
            Aquamarine: '#00B5BE',
            Bittersweet: '#C04F17',
            Black: '#221E1F',
            Blue: '#2D2F92',
            BlueGreen: '#00B3B8',
            BlueViolet: '#473992',
            BrickRed: '#B6321C',
            Brown: '#792500',
            BurntOrange: '#F7921D',
            CadetBlue: '#74729A',
            CarnationPink: '#F282B4',
            Cerulean: '#00A2E3',
            CornflowerBlue: '#41B0E4',
            Cyan: '#00AEEF',
            Dandelion: '#FDBC42',
            DarkOrchid: '#A4538A',
            Emerald: '#00A99D',
            ForestGreen: '#009B55',
            Fuchsia: '#8C368C',
            Goldenrod: '#FFDF42',
            Gray: '#949698',
            Green: '#00A64F',
            GreenYellow: '#DFE674',
            JungleGreen: '#00A99A',
            Lavender: '#F49EC4',
            Limegreen: '#8DC73E',
            Magenta: '#EC008C',
            Mahogany: '#A9341F',
            Maroon: '#AF3235',
            Melon: '#F89E7B',
            MidnightBlue: '#006795',
            Mulberry: '#A93C93',
            NavyBlue: '#006EB8',
            OliveGreen: '#3C8031',
            Orange: '#F58137',
            OrangeRed: '#ED135A',
            Orchid: '#AF72B0',
            Peach: '#F7965A',
            Periwinkle: '#7977B8',
            PineGreen: '#008B72',
            Plum: '#92268F',
            ProcessBlue: '#00B0F0',
            Purple: '#99479B',
            RawSienna: '#974006',
            Red: '#ED1B23',
            RedOrange: '#F26035',
            RedViolet: '#A1246B',
            Rhodamine: '#EF559F',
            RoyalBlue: '#0071BC',
            RoyalPurple: '#613F99',
            RubineRed: '#ED017D',
            Salmon: '#F69289',
            SeaGreen: '#3FBC9D',
            Sepia: '#671800',
            SkyBlue: '#46C5DD',
            SpringGreen: '#C6DC67',
            Tan: '#DA9D76',
            TealBlue: '#00AEB3',
            Thistle: '#D883B7',
            Turquoise: '#00B4CE',
            Violet: '#58429B',
            VioletRed: '#EF58A0',
            White: '#FFFFFF',
            WildStrawberry: '#EE2967',
            Yellow: '#FFF200',
            YellowGreen: '#98CC70',
            YellowOrange: '#FAA21A'
        };

    function q(a) {
        var r, s, t, u, v, w;
        const x = a.split('!');
        let y, z, A, B = 255,
            C = 255,
            D = 255,
            E = -1;
        const F = x.length > 0 && x[0].startsWith('-');
        F && (x[0] = x[0].slice(1));
        for (let G = 0; G < x.length; G++) {
            y = B, z = C, A = D;
            const H = null === (r = x[G].trim().match(/^([A-Za-z\d]+)/)) || void 0 === r ? void 0 : r[1],
                I = null == H ? void 0 : H.toLowerCase(),
                J = H && null !== (w = null !== (v = null !== (u = null !== (t = null !== (s = n[I]) && void 0 !== s ? s : n[o[H]]) && void 0 !== t ? t : l[H]) && void 0 !== u ? u : p[H]) && void 0 !== v ? v : k[H]) && void 0 !== w ? w : x[G].trim();
            let K = J.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);
            if ((null == K ? void 0 : K[1]) && K[2] && K[3])
                B = Math.max(0, Math.min(255, Number.parseInt(K[1], 16))), C = Math.max(0, Math.min(255, Number.parseInt(K[2], 16))), D = Math.max(0, Math.min(255, Number.parseInt(K[3], 16)));
            else if (K = J.match(/^#([\da-f]{3})$/i), null == K ? void 0 : K[1]) {
                const L = Number.parseInt(K[1][0], 16),
                    M = Number.parseInt(K[1][1], 16),
                    N = Number.parseInt(K[1][2], 16);
                B = Math.max(0, Math.min(255, 16 * L + L)), C = Math.max(0, Math.min(255, 16 * M + M)), D = Math.max(0, Math.min(255, 16 * N + N));
            } else {
                if (K = J.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i), !((null == K ? void 0 : K[1]) && K[2] && K[3]))
                    return;
                B = Math.max(0, Math.min(255, Number.parseInt(K[1]))), C = Math.max(0, Math.min(255, Number.parseInt(K[2]))), D = Math.max(0, Math.min(255, Number.parseInt(K[3])));
            }
            E >= 0 && (B = (1 - E) * B + E * y, C = (1 - E) * C + E * z, D = (1 - E) * D + E * A, E = -1), G + 1 < x.length && (E = Math.max(0, Math.min(100, Number.parseInt(x[++G]))) / 100);
        }
        return E >= 0 && (B = E * B + (1 - E) * y, C = E * C + (1 - E) * z, D = E * D + (1 - E) * A), F && (B = 255 - B, C = 255 - C, D = 255 - D), '#' + ('00' + Math.round(B).toString(16)).slice(-2) + ('00' + Math.round(C).toString(16)).slice(-2) + ('00' + Math.round(D).toString(16)).slice(-2);
    }

    function r(a) {
        var s, t;
        return a = a.trim(), null !== (t = null !== (s = m[a.toLowerCase()]) && void 0 !== s ? s : m[o[a]]) && void 0 !== t ? t : q(a);
    }

    function s(a, v, w) {
        return w < 0 && (w += 6), w >= 6 && (w -= 6), w < 1 ? (v - a) * w + a : w < 3 ? v : w < 4 ? (v - a) * (4 - w) + a : a;
    }

    function t(a) {
        return a < 0 ? 0 : a > 255 ? 255 : Math.round(a);
    }

    function u(a) {
        let v = function(a) {
            if (!a)
                return;
            if ('#' !== a[0])
                return;
            let w;
            return (a = a.slice(1)).length <= 4 ? (w = {
                r: parseInt(a[0] + a[0], 16),
                g: parseInt(a[1] + a[1], 16),
                b: parseInt(a[2] + a[2], 16)
            }, 4 === a.length && (w.a = parseInt(a[3] + a[3], 16) / 255)) : (w = {
                r: parseInt(a[0] + a[1], 16),
                g: parseInt(a[2] + a[3], 16),
                b: parseInt(a[4] + a[5], 16)
            }, 8 === a.length && (w.a = parseInt(a[6] + a[7], 16) / 255)), w && void 0 === w.a && (w.a = 1), w;
        }(a);
        if (!v)
            return a;
        let {
            h: w,
            s: x,
            l: y
        } = function(a) {
            let {
                r: z,
                g: A,
                b: B
            } = C;
            z /= 255, A /= 255, B /= 255;
            const D = Math.min(z, A, B),
                E = Math.max(z, A, B),
                F = E - D;
            let G, H;
            E === D ? G = 0 : z === E ? G = (A - B) / F : A === E ? G = 2 + (B - z) / F : B === E && (G = 4 + (z - A) / F), G = Math.min(60 * G, 360), G < 0 && (G += 360);
            const I = (D + E) / 2;
            return H = E === D ? 0 : I <= 0.5 ? F / (E + D) : F / (2 - E - D), {
                h: G,
                s: H,
                l: I
            };
        }(v);
        return x += 0.1, y -= 0.1,
            function(a) {
                const {
                    r: z,
                    g: A,
                    b: B
                } = C;
                let D = (16777216 + (t(z) << 16) + (t(A) << 8) + t(B)).toString(16).slice(1);
                return D[0] === D[1] && D[2] === D[3] && D[4] === D[5] && D[6] === D[7] && (D = D[0] + D[2] + D[4]), '#' + D;
            }(function(a) {
                let [z, A, B] = [
                    a.h,
                    a.s,
                    a.l
                ];
                z = (z + 360) % 360 / 60, B = Math.max(0, Math.min(B, 1)), A = Math.max(0, Math.min(A, 1));
                const C = B <= 0.5 ? B * (A + 1) : B + A - B * A,
                    D = 2 * B - C;
                return {
                    r: Math.round(255 * s(D, C, z + 2)),
                    g: Math.round(255 * s(D, C, z)),
                    b: Math.round(255 * s(D, C, z - 2))
                };
            }({
                h: w,
                s: x,
                l: y
            }));
    }
    const v = {},
        w = {
            60: '\\lt',
            62: '\\gt',
            111: 'o',
            38: '\\&',
            123: '\\lbrace',
            125: '\\rbrace',
            91: '\\lbrack',
            93: '\\rbrack',
            58: '\\colon',
            160: '~',
            172: '\\neg',
            183: '\\cdot',
            188: '\\frac{1}{4}',
            189: '\\frac{1}{2}',
            190: '\\frac{3}{4}',
            8304: '^{0}',
            8305: '^{i}',
            185: '^{1}',
            178: '^{2}',
            179: '^{3}',
            8224: '\\dagger',
            8225: '\\ddagger',
            8230: '\\ldots',
            8308: '^{4}',
            8309: '^{5}',
            8310: '^{6}',
            8311: '^{7}',
            8312: '^{8}',
            8313: '^{9}',
            8314: '^{+}',
            8315: '^{-}',
            8316: '^{=}',
            8319: '^{n}',
            8320: '_{0}',
            8321: '_{1}',
            8322: '_{2}',
            8323: '_{3}',
            8324: '_{4}',
            8325: '_{5}',
            8326: '_{6}',
            8327: '_{7}',
            8328: '_{8}',
            8329: '_{9}',
            8330: '_{+}',
            8331: '_{-}',
            8332: '_{=}',
            8336: '_{a}',
            8337: '_{e}',
            8338: '_{o}',
            8339: '_{x}',
            8242: '\\prime',
            39: '\\prime',
            8592: '\\gets',
            8594: '\\to',
            9651: '\\triangle',
            9661: '\\triangledown',
            8715: '\\owns',
            8727: '\\ast',
            8739: '\\vert',
            8741: '\\Vert',
            8743: '\\land',
            8744: '\\lor',
            8901: '\\cdot',
            8904: '\\bowtie',
            8800: '\\ne',
            8804: '\\le',
            8805: '\\ge',
            8869: '\\bot',
            10231: '\\biconditional',
            10232: '\\impliedby',
            10233: '\\implies',
            10234: '\\iff',
            8450: '\\mathbb{C}',
            8469: '\\mathbb{N}',
            8473: '\\mathbb{P}',
            8474: '\\mathbb{Q}',
            8477: '\\mathbb{R}',
            8484: '\\mathbb{Z}',
            8461: '\\mathbb{H}',
            8476: '\\Re',
            8465: '\\Im',
            42: '\\ast',
            11036: '\\square',
            9633: '\\square',
            8720: '\\coprod',
            8716: '\\not\\ni',
            9671: '\\diamond',
            8846: '\\uplus',
            8851: '\\sqcap',
            8852: '\\sqcup',
            8768: '\\wr',
            8750: '\\oint',
            8226: '\\textbullet',
            8722: '-',
            978: '\\Upsilon'
        },
        x = {},
        y = {},
        z = {
            iff: '\\;\u27FA\\;',
            nicefrac: '^{#1}\\!\\!/\\!_{#2}',
            rd: '\\mathrm{d}',
            rD: '\\mathrm{D}',
            doubleStruckCapitalN: '\\mathbb{N}',
            doubleStruckCapitalR: '\\mathbb{R}',
            doubleStruckCapitalQ: '\\mathbb{Q}',
            doubleStruckCapitalZ: '\\mathbb{Z}',
            doubleStruckCapitalP: '\\mathbb{P}',
            scriptCapitalE: '\\mathscr{E}',
            scriptCapitalH: '\\mathscr{H}',
            scriptCapitalL: '\\mathscr{L}',
            gothicCapitalC: '\\mathfrak{C}',
            gothicCapitalH: '\\mathfrak{H}',
            gothicCapitalI: '\\mathfrak{I}',
            gothicCapitalR: '\\mathfrak{R}',
            imaginaryI: '\\mathrm{i}',
            imaginaryJ: '\\mathrm{j}',
            exponentialE: '\\mathrm{e}',
            differentialD: '\\mathrm{d}',
            capitalDifferentialD: '\\mathrm{D}',
            'braket.sty': {
                package: {
                    bra: '\\mathinner{\\langle{#1}|}',
                    ket: '\\mathinner{|{#1}\\rangle}',
                    braket: '\\mathinner{\\langle{#1}\\rangle}',
                    set: '\\mathinner{\\lbrace #1 \\rbrace}',
                    Bra: '\\left\\langle #1\\right|',
                    Ket: '\\left|#1\\right\\rangle',
                    Braket: '\\left\\langle{#1}\\right\\rangle',
                    Set: '\\left\\lbrace #1 \\right\\rbrace'
                }
            },
            'amsmath.sty': {
                package: {
                    varGamma: '\\mathit{\\Gamma}',
                    varDelta: '\\mathit{\\Delta}',
                    varTheta: '\\mathit{\\Theta}',
                    varLambda: '\\mathit{\\Lambda}',
                    varXi: '\\mathit{\\Xi}',
                    varPi: '\\mathit{\\Pi}',
                    varSigma: '\\mathit{\\Sigma}',
                    varUpsilon: '\\mathit{\\Upsilon}',
                    varPhi: '\\mathit{\\Phi}',
                    varPsi: '\\mathit{\\Psi}',
                    varOmega: '\\mathit{\\Omega}',
                    pmod: {
                        def: '\\quad(\\operatorname{mod}\\ #1)',
                        args: 1,
                        expand: !1
                    },
                    mod: {
                        def: '\\quad\\operatorname{mod}\\,\\,#1',
                        args: 1,
                        expand: !1
                    },
                    bmod: {
                        def: '\\;\\mathbin{\\operatorname{mod }}',
                        expand: !1
                    }
                },
                expand: !1
            },
            'texvc.sty': {
                package: {
                    darr: '\\downarrow',
                    dArr: '\\Downarrow',
                    Darr: '\\Downarrow',
                    lang: '\\langle',
                    rang: '\\rangle',
                    uarr: '\\uparrow',
                    uArr: '\\Uparrow',
                    Uarr: '\\Uparrow',
                    N: '\\mathbb{N}',
                    R: '\\mathbb{R}',
                    Z: '\\mathbb{Z}',
                    alef: '\\aleph',
                    alefsym: '\\aleph',
                    Alpha: '\\mathrm{A}',
                    Beta: '\\mathrm{B}',
                    bull: '\\bullet',
                    Chi: '\\mathrm{X}',
                    clubs: '\\clubsuit',
                    cnums: '\\mathbb{C}',
                    Complex: '\\mathbb{C}',
                    Dagger: '\\ddagger',
                    diamonds: '\\diamondsuit',
                    empty: '\\emptyset',
                    Epsilon: '\\mathrm{E}',
                    Eta: '\\mathrm{H}',
                    exist: '\\exists',
                    harr: '\\leftrightarrow',
                    hArr: '\\Leftrightarrow',
                    Harr: '\\Leftrightarrow',
                    hearts: '\\heartsuit',
                    image: '\\Im',
                    infin: '\\infty',
                    Iota: '\\mathrm{I}',
                    isin: '\\in',
                    Kappa: '\\mathrm{K}',
                    larr: '\\leftarrow',
                    lArr: '\\Leftarrow',
                    Larr: '\\Leftarrow',
                    lrarr: '\\leftrightarrow',
                    lrArr: '\\Leftrightarrow',
                    Lrarr: '\\Leftrightarrow',
                    Mu: '\\mathrm{M}',
                    natnums: '\\mathbb{N}',
                    Nu: '\\mathrm{N}',
                    Omicron: '\\mathrm{O}',
                    plusmn: '\\pm',
                    rarr: '\\rightarrow',
                    rArr: '\\Rightarrow',
                    Rarr: '\\Rightarrow',
                    real: '\\Re',
                    reals: '\\mathbb{R}',
                    Reals: '\\mathbb{R}',
                    Rho: '\\mathrm{P}',
                    sdot: '\\cdot',
                    sect: '\\S',
                    spades: '\\spadesuit',
                    sub: '\\subset',
                    sube: '\\subseteq',
                    supe: '\\supseteq',
                    Tau: '\\mathrm{T}',
                    thetasym: '\\vartheta',
                    weierp: '\\wp',
                    Zeta: '\\mathrm{Z}'
                },
                expand: !1
            }
        },
        A = {
            ' ': 32,
            '\\#': 35,
            '\\&': 38,
            '\\$': 36,
            '\\%': 37,
            '\\_': 95,
            '\\euro': 8364,
            '\\maltese': 10016,
            '\\{': 123,
            '\\}': 125,
            '\\nobreakspace': 160,
            '\\ldots': 8230,
            '\\textellipsis': 8230,
            '\\backslash': 92,
            '`': 8216,
            '\'': 8217,
            '``': 8220,
            '\'\'': 8221,
            '\\degree': 176,
            '\\textasciicircum': 94,
            '\\textasciitilde': 126,
            '\\textasteriskcentered': 42,
            '\\textbackslash': 92,
            '\\textbraceleft': 123,
            '\\textbraceright': 125,
            '\\textbullet': 8226,
            '\\textdollar': 36,
            '\\textsterling': 163,
            '\\textdagger': 8224,
            '\\textdaggerdbl': 8225,
            '\u2013': 8211,
            '\u2014': 8212,
            '\u2018': 8216,
            '\u2019': 8217,
            '\u201C': 8220,
            '\u201D': 8221,
            '"': 8221,
            '\\ss': 223,
            '\\ae': 230,
            '\\oe': 339,
            '\\AE': 198,
            '\\OE': 338,
            '\\O': 216,
            '\\i': 305,
            '\\j': 567,
            '\\aa': 229,
            '\\AA': 197
        },
        B = /[\w!@*()-=+{}[\]\\';:?/.,~<>`|$%#&^" ]/,
        C = h() ? new RegExp('\\p{Letter}', 'u') : /[a-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/,
        D = h() ? new RegExp('[0-9\\p{Letter}]', 'u') : /[\da-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/;

    function E(a, L, F = 'mord', b) {
        void 0 !== L && (v[a] = {
            definitionType: 'symbol',
            type: F,
            variant: b,
            codepoint: L
        }, w[L] || (w[L] = a), A[a] || (A[a] = L));
    }

    function G(a, L, F) {
        if ('string' != typeof a)
            for (const [H, I, J, K] of a)
                E(H, I, null != J ? J : L, null != K ? K : F);
        else
            for (let L = 0; L < a.length; L++) {
                const M = a.charAt(L);
                E(M, M.codePointAt(0));
            }
    }

    function H(a, M) {
        for (let I = J; I <= M; I++)
            E(String.fromCodePoint(I), I);
    }

    function I(a, M) {
        if (void 0 === M)
            return '';
        if ('math' === a && w[M])
            return w[M];
        if ('text' === a) {
            let J = Object.keys(A).find(J => A[J] === M);
            if (!J) {
                const K = M.toString(16);
                J = '^'.repeat(K.length) + K;
            }
            return J;
        }
        return String.fromCodePoint(M);
    }
    const J = {
            119893: 8462,
            119965: 8492,
            119968: 8496,
            119969: 8497,
            119971: 8459,
            119972: 8464,
            119975: 8466,
            119976: 8499,
            119981: 8475,
            119994: 8495,
            119996: 8458,
            120004: 8500,
            120070: 8493,
            120075: 8460,
            120076: 8465,
            120085: 8476,
            120093: 8488,
            120122: 8450,
            120127: 8461,
            120133: 8469,
            120135: 8473,
            120136: 8474,
            120137: 8477,
            120145: 8484
        },
        K = [{
                start: 119808,
                len: 26,
                offset: 65,
                style: 'bold'
            },
            {
                start: 119834,
                len: 26,
                offset: 97,
                style: 'bold'
            },
            {
                start: 119860,
                len: 26,
                offset: 65,
                style: 'italic'
            },
            {
                start: 119886,
                len: 26,
                offset: 97,
                style: 'italic'
            },
            {
                start: 119912,
                len: 26,
                offset: 65,
                style: 'bolditalic'
            },
            {
                start: 119938,
                len: 26,
                offset: 97,
                style: 'bolditalic'
            },
            {
                start: 119964,
                len: 26,
                offset: 65,
                variant: 'script'
            },
            {
                start: 119990,
                len: 26,
                offset: 97,
                variant: 'script'
            },
            {
                start: 120016,
                len: 26,
                offset: 65,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120042,
                len: 26,
                offset: 97,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120068,
                len: 26,
                offset: 65,
                variant: 'fraktur'
            },
            {
                start: 120094,
                len: 26,
                offset: 97,
                variant: 'fraktur'
            },
            {
                start: 120172,
                len: 26,
                offset: 65,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120198,
                len: 26,
                offset: 97,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120120,
                len: 26,
                offset: 65,
                variant: 'double-struck'
            },
            {
                start: 120146,
                len: 26,
                offset: 97,
                variant: 'double-struck'
            },
            {
                start: 120224,
                len: 26,
                offset: 65,
                variant: 'sans-serif'
            },
            {
                start: 120250,
                len: 26,
                offset: 97,
                variant: 'sans-serif'
            },
            {
                start: 120276,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120302,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120328,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120354,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120380,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120406,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120432,
                len: 26,
                offset: 65,
                variant: 'monospace'
            },
            {
                start: 120458,
                len: 26,
                offset: 97,
                variant: 'monospace'
            },
            {
                start: 120488,
                len: 25,
                offset: 913,
                style: 'bold'
            },
            {
                start: 120514,
                len: 25,
                offset: 945,
                style: 'bold'
            },
            {
                start: 120546,
                len: 25,
                offset: 913,
                style: 'italic'
            },
            {
                start: 120572,
                len: 25,
                offset: 945,
                style: 'italic'
            },
            {
                start: 120604,
                len: 25,
                offset: 913,
                style: 'bolditalic'
            },
            {
                start: 120630,
                len: 25,
                offset: 945,
                style: 'bolditalic'
            },
            {
                start: 120662,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120688,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120720,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120746,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120782,
                len: 10,
                offset: 48,
                variant: 'main',
                style: 'bold'
            },
            {
                start: 120792,
                len: 10,
                offset: 48,
                variant: 'double-struck'
            },
            {
                start: 120803,
                len: 10,
                offset: 48,
                variant: 'sans-serif'
            },
            {
                start: 120812,
                len: 10,
                offset: 48,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120822,
                len: 10,
                offset: 48,
                variant: 'monospace'
            }
        ];

    function L(a) {
        let M = 'auto';
        const N = a.match(/:([^=]+)/);
        return N && (M = N[1].trim()), M;
    }

    function M(a) {
        if (!a)
            return [];
        const N = [];
        let O = a.split(']');
        if (O[0].startsWith('[')) {
            N.push({
                isOptional: !0,
                type: L(O[0].slice(1))
            });
            for (let P = 1; P <= O.length; P++)
                N.push(...M(O[P]));
        } else if (O = P.split('}'), O[0].startsWith('{')) {
            N.push({
                isOptional: !1,
                type: L(O[0].slice(1))
            });
            for (let Q = 1; Q <= O.length; Q++)
                N.push(...M(O[Q]));
        }
        return N;
    }

    function N(a) {
        if (!a)
            return '';
        let O = '',
            P = !0;
        for (const Q of a)
            'string' == typeof Q.value ? O += Q.value : P = !1;
        return P ? O : '';
    }

    function O(a, R, F, P = !1) {
        'string' == typeof a && (a = [a]);
        const Q = {
            tabular: P,
            params: M(R),
            createAtom: F
        };
        for (const R of a)
            y[R] = Q;
    }

    function Q(a, V, F) {
        O(a, V, F, !0);
    }

    function R(a, V, F) {
        var S, T;
        F || (F = {});
        const U = {
            definitionType: 'function',
            params: M(V),
            ifMode: F.ifMode,
            isFunction: null !== (S = F.isFunction) && void 0 !== S && S,
            applyMode: F.applyMode,
            infix: null !== (T = F.infix) && void 0 !== T && T,
            createAtom: F.createAtom,
            applyStyle: F.applyStyle
        };
        if ('string' == typeof a)
            x['\\' + a] = U;
        else
            for (const V of a)
                x['\\' + V] = U;
    }
    let S;

    function T(a) {
        return S || (S = V(z)), a ? V({
            ...S,
            ...a
        }) : S;
    }

    function U(a, W) {
        var V, W, X, Y;
        if ('string' == typeof a) {
            let Z = 0;
            const $ = _;
            return /(^|[^\\])#1/.test($) && (Z = 1), /(^|[^\\])#2/.test($) && (Z = 2), /(^|[^\\])#3/.test($) && (Z = 3), /(^|[^\\])#4/.test($) && (Z = 4), /(^|[^\\])#5/.test($) && (Z = 5), /(^|[^\\])#6/.test($) && (Z = 6), /(^|[^\\])#7/.test($) && (Z = 7), /(^|[^\\])#8/.test($) && (Z = 8), /(^|[^\\])#9/.test($) && (Z = 9), {
                expand: null === (V = null == W ? void 0 : W.expand) || void 0 === V || V,
                captureSelection: null === (W = null == W ? void 0 : W.captureSelection) || void 0 === W || W,
                args: Z,
                def: $
            };
        }
        return {
            expand: null === (X = null == W ? void 0 : W.expand) || void 0 === X || X,
            captureSelection: null === (Y = null == W ? void 0 : W.captureSelection) || void 0 === Y || Y,
            args: 0,
            ...a
        };
    }

    function V(a) {
        if (!a)
            return {};
        const W = {};
        for (const X of Object.keys(a)) {
            const Y = a[X];
            if (null == Y)
                delete W[X];
            else if ('object' == typeof Y && 'package' in Y)
                for (const Z of Object.keys(Y.package))
                    W[Z] = U(Y.package[Z], {
                        expand: Y.expand,
                        captureSelection: Y.captureSelection
                    });
            else
                W[X] = U(Y);
        }
        return W;
    }
    const W = [
            0,
            0.69444,
            0,
            0
        ],
        X = [
            0,
            0.61111,
            0,
            0
        ],
        Y = [
            0.25,
            0.75,
            0,
            0
        ],
        Z = [
            0,
            0.44444,
            0,
            0
        ],
        $ = [
            0,
            0.68611,
            0,
            0
        ],
        _ = [
            0.19444,
            0.69444,
            0,
            0
        ],
        ab = [
            0,
            0.68333,
            0,
            0
        ],
        bb = [
            0,
            0.68889,
            0,
            0
        ],
        cb = [
            0,
            0.69141,
            0,
            0
        ],
        db = [
            0,
            0,
            0,
            0
        ],
        eb = [
            0,
            0.64444,
            0,
            0
        ],
        fb = [
            0,
            0.69224,
            0,
            0
        ],
        gb = [
            0.19444,
            0.44444,
            0,
            0
        ],
        hb = [
            0.65002,
            1.15,
            0,
            0
        ],
        ib = [
            0,
            0.55556,
            0,
            0
        ],
        jb = [
            0.35001,
            0.85,
            0,
            0
        ],
        kb = [
            1.25003,
            1.75,
            0,
            0
        ],
        lb = [
            0.95003,
            1.45,
            0,
            0
        ],
        mb = [
            0,
            0.75,
            0,
            0
        ],
        nb = [
            0,
            0.47534,
            0,
            0
        ],
        ob = [
            0.25001,
            0.75,
            0,
            0
        ],
        pb = [
            0.55001,
            1.05,
            0,
            0
        ],
        qb = [
            0.16667,
            0.68889,
            0,
            0
        ],
        rb = [
            0.08167,
            0.58167,
            0,
            0
        ];
    var sb = {
        'AMS-Regular': {
            32: db,
            65: bb,
            66: bb,
            67: bb,
            68: bb,
            69: bb,
            70: bb,
            71: bb,
            72: bb,
            73: bb,
            74: qb,
            75: bb,
            76: bb,
            77: bb,
            78: bb,
            79: qb,
            80: bb,
            81: qb,
            82: bb,
            83: bb,
            84: bb,
            85: bb,
            86: bb,
            87: bb,
            88: bb,
            89: bb,
            90: bb,
            107: bb,
            160: db,
            165: [
                0,
                0.675,
                0.025,
                0
            ],
            174: [
                0.15559,
                0.69224,
                0,
                0
            ],
            240: bb,
            295: bb,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.9,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.9,
                0,
                0
            ],
            989: rb,
            1008: [
                0,
                0.43056,
                0.04028,
                0
            ],
            8245: [
                0,
                0.54986,
                0,
                0
            ],
            8463: bb,
            8487: bb,
            8498: bb,
            8502: bb,
            8503: bb,
            8504: bb,
            8513: bb,
            8592: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8594: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8602: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8603: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8606: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8608: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8610: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8611: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8619: [
                0,
                0.54986,
                0,
                0
            ],
            8620: [
                0,
                0.54986,
                0,
                0
            ],
            8621: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8622: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8624: fb,
            8625: fb,
            8630: [
                0,
                0.43056,
                0,
                0
            ],
            8631: [
                0,
                0.43056,
                0,
                0
            ],
            8634: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8635: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8638: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8639: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8642: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8643: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8644: [
                0.1808,
                0.675,
                0,
                0
            ],
            8646: [
                0.1808,
                0.675,
                0,
                0
            ],
            8647: [
                0.1808,
                0.675,
                0,
                0
            ],
            8648: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8649: [
                0.1808,
                0.675,
                0,
                0
            ],
            8650: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8651: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8652: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8653: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8654: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8655: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8666: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8667: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8669: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8672: [
                -0.064,
                0.437,
                0,
                0
            ],
            8674: [
                -0.064,
                0.437,
                0,
                0
            ],
            8705: [
                0,
                0.825,
                0,
                0
            ],
            8708: bb,
            8709: rb,
            8717: [
                0,
                0.43056,
                0,
                0
            ],
            8722: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8724: [
                0.08198,
                0.69224,
                0,
                0
            ],
            8726: rb,
            8733: fb,
            8736: fb,
            8737: fb,
            8738: [
                0.03517,
                0.52239,
                0,
                0
            ],
            8739: rb,
            8740: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8741: rb,
            8742: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8756: fb,
            8757: fb,
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8765: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8769: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8770: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8774: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8778: rb,
            8782: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8783: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8785: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8786: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8787: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8790: fb,
            8791: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8796: [
                0.08198,
                0.91667,
                0,
                0
            ],
            8806: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8807: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8808: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8809: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8812: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8814: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8815: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8816: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8817: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8818: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8819: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8822: [
                0.1808,
                0.675,
                0,
                0
            ],
            8823: [
                0.1808,
                0.675,
                0,
                0
            ],
            8828: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8829: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8830: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8831: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8832: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8833: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8840: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8841: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8842: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8843: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8847: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8848: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8858: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8859: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8861: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8862: [
                0,
                0.675,
                0,
                0
            ],
            8863: [
                0,
                0.675,
                0,
                0
            ],
            8864: [
                0,
                0.675,
                0,
                0
            ],
            8865: [
                0,
                0.675,
                0,
                0
            ],
            8872: fb,
            8873: fb,
            8874: fb,
            8876: bb,
            8877: bb,
            8878: bb,
            8879: bb,
            8882: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8883: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8884: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8885: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8888: [
                0,
                0.54986,
                0,
                0
            ],
            8890: [
                0.19444,
                0.43056,
                0,
                0
            ],
            8891: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8892: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8901: [
                0,
                0.54986,
                0,
                0
            ],
            8903: rb,
            8905: rb,
            8906: rb,
            8907: fb,
            8908: fb,
            8909: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8910: [
                0,
                0.54986,
                0,
                0
            ],
            8911: [
                0,
                0.54986,
                0,
                0
            ],
            8912: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8913: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8914: [
                0,
                0.54986,
                0,
                0
            ],
            8915: [
                0,
                0.54986,
                0,
                0
            ],
            8916: fb,
            8918: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8919: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8920: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8921: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8922: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8923: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8926: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8927: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8928: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8929: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8934: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8935: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8936: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8937: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8938: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8939: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8940: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8941: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8994: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8995: [
                0.19444,
                0.69224,
                0,
                0
            ],
            9416: [
                0.15559,
                0.69224,
                0,
                0
            ],
            9484: fb,
            9488: fb,
            9492: [
                0,
                0.37788,
                0,
                0
            ],
            9496: [
                0,
                0.37788,
                0,
                0
            ],
            9585: [
                0.19444,
                0.68889,
                0,
                0
            ],
            9586: [
                0.19444,
                0.74111,
                0,
                0
            ],
            9632: [
                0,
                0.675,
                0,
                0
            ],
            9633: [
                0,
                0.675,
                0,
                0
            ],
            9650: [
                0,
                0.54986,
                0,
                0
            ],
            9651: [
                0,
                0.54986,
                0,
                0
            ],
            9654: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9660: [
                0,
                0.54986,
                0,
                0
            ],
            9661: [
                0,
                0.54986,
                0,
                0
            ],
            9664: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9674: [
                0.11111,
                0.69224,
                0,
                0
            ],
            9733: [
                0.19444,
                0.69224,
                0,
                0
            ],
            10003: fb,
            10016: fb,
            10731: [
                0.11111,
                0.69224,
                0,
                0
            ],
            10846: [
                0.19444,
                0.75583,
                0,
                0
            ],
            10877: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10878: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10885: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10886: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10887: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10888: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10889: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10890: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10891: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10892: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10901: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10902: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10933: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10934: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10935: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10936: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10937: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10938: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10949: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10950: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10955: [
                0.28481,
                0.79383,
                0,
                0
            ],
            10956: [
                0.28481,
                0.79383,
                0,
                0
            ],
            57350: rb,
            57351: rb,
            57352: rb,
            57353: [
                0,
                0.43056,
                0.04028,
                0
            ],
            57356: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57357: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57358: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57359: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57360: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57361: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57366: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57367: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57368: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57369: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57370: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57371: [
                0.13597,
                0.63597,
                0,
                0
            ]
        },
        'Caligraphic-Regular': {
            32: db,
            65: [
                0,
                0.68333,
                0,
                0.19445
            ],
            66: [
                0,
                0.68333,
                0.03041,
                0.13889
            ],
            67: [
                0,
                0.68333,
                0.05834,
                0.13889
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            69: [
                0,
                0.68333,
                0.08944,
                0.11111
            ],
            70: [
                0,
                0.68333,
                0.09931,
                0.11111
            ],
            71: [
                0.09722,
                0.68333,
                0.0593,
                0.11111
            ],
            72: [
                0,
                0.68333,
                0.00965,
                0.11111
            ],
            73: [
                0,
                0.68333,
                0.07382,
                0
            ],
            74: [
                0.09722,
                0.68333,
                0.18472,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.01445,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.13889
            ],
            77: [
                0,
                0.68333,
                0,
                0.13889
            ],
            78: [
                0,
                0.68333,
                0.14736,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.11111
            ],
            80: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            81: [
                0.09722,
                0.68333,
                0,
                0.11111
            ],
            82: [
                0,
                0.68333,
                0,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.075,
                0.13889
            ],
            84: [
                0,
                0.68333,
                0.25417,
                0
            ],
            85: [
                0,
                0.68333,
                0.09931,
                0.08334
            ],
            86: [
                0,
                0.68333,
                0.08222,
                0
            ],
            87: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            88: [
                0,
                0.68333,
                0.14643,
                0.13889
            ],
            89: [
                0.09722,
                0.68333,
                0.08222,
                0.08334
            ],
            90: [
                0,
                0.68333,
                0.07944,
                0.13889
            ],
            160: db
        },
        'Fraktur-Regular': {
            32: db,
            33: cb,
            34: cb,
            38: cb,
            39: cb,
            40: [
                0.24982,
                0.74947,
                0,
                0
            ],
            41: [
                0.24982,
                0.74947,
                0,
                0
            ],
            42: [
                0,
                0.62119,
                0,
                0
            ],
            43: [
                0.08319,
                0.58283,
                0,
                0
            ],
            44: [
                0,
                0.10803,
                0,
                0
            ],
            45: [
                0.08319,
                0.58283,
                0,
                0
            ],
            46: [
                0,
                0.10803,
                0,
                0
            ],
            47: [
                0.24982,
                0.74947,
                0,
                0
            ],
            48: nb,
            49: nb,
            50: nb,
            51: [
                0.18906,
                0.47534,
                0,
                0
            ],
            52: [
                0.18906,
                0.47534,
                0,
                0
            ],
            53: [
                0.18906,
                0.47534,
                0,
                0
            ],
            54: cb,
            55: [
                0.18906,
                0.47534,
                0,
                0
            ],
            56: cb,
            57: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58: nb,
            59: [
                0.12604,
                0.47534,
                0,
                0
            ],
            61: [
                -0.13099,
                0.36866,
                0,
                0
            ],
            63: cb,
            65: cb,
            66: cb,
            67: cb,
            68: cb,
            69: cb,
            70: [
                0.12604,
                0.69141,
                0,
                0
            ],
            71: cb,
            72: [
                0.06302,
                0.69141,
                0,
                0
            ],
            73: cb,
            74: [
                0.12604,
                0.69141,
                0,
                0
            ],
            75: cb,
            76: cb,
            77: cb,
            78: cb,
            79: cb,
            80: [
                0.18906,
                0.69141,
                0,
                0
            ],
            81: [
                0.03781,
                0.69141,
                0,
                0
            ],
            82: cb,
            83: cb,
            84: cb,
            85: cb,
            86: cb,
            87: cb,
            88: cb,
            89: [
                0.18906,
                0.69141,
                0,
                0
            ],
            90: [
                0.12604,
                0.69141,
                0,
                0
            ],
            91: [
                0.24982,
                0.74947,
                0,
                0
            ],
            93: [
                0.24982,
                0.74947,
                0,
                0
            ],
            94: cb,
            97: nb,
            98: cb,
            99: nb,
            100: [
                0,
                0.62119,
                0,
                0
            ],
            101: nb,
            102: [
                0.18906,
                0.69141,
                0,
                0
            ],
            103: [
                0.18906,
                0.47534,
                0,
                0
            ],
            104: [
                0.18906,
                0.69141,
                0,
                0
            ],
            105: cb,
            106: cb,
            107: cb,
            108: cb,
            109: nb,
            110: nb,
            111: nb,
            112: [
                0.18906,
                0.52396,
                0,
                0
            ],
            113: [
                0.18906,
                0.47534,
                0,
                0
            ],
            114: nb,
            115: nb,
            116: [
                0,
                0.62119,
                0,
                0
            ],
            117: nb,
            118: [
                0,
                0.52396,
                0,
                0
            ],
            119: [
                0,
                0.52396,
                0,
                0
            ],
            120: [
                0.18906,
                0.47534,
                0,
                0
            ],
            121: [
                0.18906,
                0.47534,
                0,
                0
            ],
            122: [
                0.18906,
                0.47534,
                0,
                0
            ],
            160: db,
            8216: cb,
            8217: cb,
            58112: [
                0,
                0.62119,
                0,
                0
            ],
            58113: [
                0,
                0.62119,
                0,
                0
            ],
            58114: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58115: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58116: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58117: cb,
            58118: [
                0,
                0.62119,
                0,
                0
            ],
            58119: nb
        },
        'Main-Bold': {
            32: db,
            33: W,
            34: W,
            35: _,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: mb,
            43: [
                0.13333,
                0.63333,
                0,
                0
            ],
            44: [
                0.19444,
                0.15556,
                0,
                0
            ],
            45: Z,
            46: [
                0,
                0.15556,
                0,
                0
            ],
            47: Y,
            48: eb,
            49: eb,
            50: eb,
            51: eb,
            52: eb,
            53: eb,
            54: eb,
            55: eb,
            56: eb,
            57: eb,
            58: Z,
            59: gb,
            60: [
                0.08556,
                0.58556,
                0,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            62: [
                0.08556,
                0.58556,
                0,
                0
            ],
            63: W,
            64: W,
            65: $,
            66: $,
            67: $,
            68: $,
            69: $,
            70: $,
            71: $,
            72: $,
            73: $,
            74: $,
            75: $,
            76: $,
            77: $,
            78: $,
            79: $,
            80: $,
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: $,
            83: $,
            84: $,
            85: $,
            86: [
                0,
                0.68611,
                0.01597,
                0
            ],
            87: [
                0,
                0.68611,
                0.01597,
                0
            ],
            88: $,
            89: [
                0,
                0.68611,
                0.02875,
                0
            ],
            90: $,
            91: Y,
            92: Y,
            93: Y,
            94: W,
            95: [
                0.31,
                0.13444,
                0.03194,
                0
            ],
            97: Z,
            98: W,
            99: Z,
            100: W,
            101: Z,
            102: [
                0,
                0.69444,
                0.10903,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            104: W,
            105: W,
            106: _,
            107: W,
            108: W,
            109: Z,
            110: Z,
            111: Z,
            112: gb,
            113: gb,
            114: Z,
            115: Z,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: Z,
            118: [
                0,
                0.44444,
                0.01597,
                0
            ],
            119: [
                0,
                0.44444,
                0.01597,
                0
            ],
            120: Z,
            121: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            122: Z,
            123: Y,
            124: Y,
            125: Y,
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: db,
            163: W,
            168: W,
            172: Z,
            176: W,
            177: [
                0.13333,
                0.63333,
                0,
                0
            ],
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: $,
            215: [
                0.13333,
                0.63333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0,
                0
            ],
            223: W,
            230: Z,
            247: [
                0.13333,
                0.63333,
                0,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0,
                0
            ],
            305: Z,
            338: $,
            339: Z,
            567: gb,
            710: W,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.59611,
                0,
                0
            ],
            714: W,
            715: W,
            728: W,
            729: W,
            730: W,
            732: W,
            733: W,
            915: $,
            916: $,
            920: $,
            923: $,
            926: $,
            928: $,
            931: $,
            933: $,
            934: $,
            936: $,
            937: $,
            8211: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8212: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W,
            8224: _,
            8225: _,
            8242: ib,
            8407: [
                0,
                0.72444,
                0.15486,
                0
            ],
            8463: W,
            8465: W,
            8467: W,
            8472: gb,
            8476: W,
            8501: W,
            8592: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8593: _,
            8594: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8595: _,
            8596: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8597: Y,
            8598: _,
            8599: _,
            8600: _,
            8601: _,
            8636: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8637: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8640: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8641: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8656: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8657: _,
            8658: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8659: _,
            8660: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8661: Y,
            8704: W,
            8706: [
                0,
                0.69444,
                0.06389,
                0
            ],
            8707: W,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: $,
            8712: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8715: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8722: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8723: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8725: Y,
            8726: Y,
            8727: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8728: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8729: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8730: [
                0.18,
                0.82,
                0,
                0
            ],
            8733: Z,
            8734: Z,
            8736: fb,
            8739: Y,
            8741: Y,
            8743: ib,
            8744: ib,
            8745: ib,
            8746: ib,
            8747: [
                0.19444,
                0.69444,
                0.12778,
                0
            ],
            8764: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8768: _,
            8771: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8776: [
                0.02444,
                0.52444,
                0,
                0
            ],
            8781: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8801: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8804: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8805: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8810: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8811: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8826: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8827: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8834: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8835: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8838: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8839: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8846: ib,
            8849: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8850: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8851: ib,
            8852: ib,
            8853: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8854: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8855: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8856: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8857: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8866: W,
            8867: W,
            8868: W,
            8869: W,
            8900: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8901: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8902: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8968: Y,
            8969: Y,
            8970: Y,
            8971: Y,
            8994: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            8995: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            9651: _,
            9657: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9661: _,
            9667: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9711: _,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: mb,
            9838: _,
            9839: _,
            10216: Y,
            10217: Y,
            10815: $,
            10927: [
                0.19667,
                0.69667,
                0,
                0
            ],
            10928: [
                0.19667,
                0.69667,
                0,
                0
            ],
            57376: _
        },
        'Main-BoldItalic': {
            32: db,
            33: [
                0,
                0.69444,
                0.11417,
                0
            ],
            34: [
                0,
                0.69444,
                0.07939,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06833,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.12861,
                0
            ],
            38: [
                0,
                0.69444,
                0.08528,
                0
            ],
            39: [
                0,
                0.69444,
                0.12945,
                0
            ],
            40: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03306,
                0
            ],
            42: [
                0,
                0.75,
                0.14333,
                0
            ],
            43: [
                0.10333,
                0.60333,
                0.03306,
                0
            ],
            44: [
                0.19444,
                0.14722,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.02611,
                0
            ],
            46: [
                0,
                0.14722,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            48: [
                0,
                0.64444,
                0.13167,
                0
            ],
            49: [
                0,
                0.64444,
                0.13167,
                0
            ],
            50: [
                0,
                0.64444,
                0.13167,
                0
            ],
            51: [
                0,
                0.64444,
                0.13167,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            53: [
                0,
                0.64444,
                0.13167,
                0
            ],
            54: [
                0,
                0.64444,
                0.13167,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            56: [
                0,
                0.64444,
                0.13167,
                0
            ],
            57: [
                0,
                0.64444,
                0.13167,
                0
            ],
            58: [
                0,
                0.44444,
                0.06695,
                0
            ],
            59: [
                0.19444,
                0.44444,
                0.06695,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0.06833,
                0
            ],
            63: [
                0,
                0.69444,
                0.11472,
                0
            ],
            64: [
                0,
                0.69444,
                0.09208,
                0
            ],
            65: $,
            66: [
                0,
                0.68611,
                0.0992,
                0
            ],
            67: [
                0,
                0.68611,
                0.14208,
                0
            ],
            68: [
                0,
                0.68611,
                0.09062,
                0
            ],
            69: [
                0,
                0.68611,
                0.11431,
                0
            ],
            70: [
                0,
                0.68611,
                0.12903,
                0
            ],
            71: [
                0,
                0.68611,
                0.07347,
                0
            ],
            72: [
                0,
                0.68611,
                0.17208,
                0
            ],
            73: [
                0,
                0.68611,
                0.15681,
                0
            ],
            74: [
                0,
                0.68611,
                0.145,
                0
            ],
            75: [
                0,
                0.68611,
                0.14208,
                0
            ],
            76: $,
            77: [
                0,
                0.68611,
                0.17208,
                0
            ],
            78: [
                0,
                0.68611,
                0.17208,
                0
            ],
            79: [
                0,
                0.68611,
                0.09062,
                0
            ],
            80: [
                0,
                0.68611,
                0.0992,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0.09062,
                0
            ],
            82: [
                0,
                0.68611,
                0.02559,
                0
            ],
            83: [
                0,
                0.68611,
                0.11264,
                0
            ],
            84: [
                0,
                0.68611,
                0.12903,
                0
            ],
            85: [
                0,
                0.68611,
                0.17208,
                0
            ],
            86: [
                0,
                0.68611,
                0.18625,
                0
            ],
            87: [
                0,
                0.68611,
                0.18625,
                0
            ],
            88: [
                0,
                0.68611,
                0.15681,
                0
            ],
            89: [
                0,
                0.68611,
                0.19803,
                0
            ],
            90: [
                0,
                0.68611,
                0.14208,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.09972,
                0
            ],
            94: [
                0,
                0.69444,
                0.06709,
                0
            ],
            95: [
                0.31,
                0.13444,
                0.09811,
                0
            ],
            97: [
                0,
                0.44444,
                0.09426,
                0
            ],
            98: [
                0,
                0.69444,
                0.07861,
                0
            ],
            99: [
                0,
                0.44444,
                0.05222,
                0
            ],
            100: [
                0,
                0.69444,
                0.10861,
                0
            ],
            101: [
                0,
                0.44444,
                0.085,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21778,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            104: [
                0,
                0.69444,
                0.09426,
                0
            ],
            105: [
                0,
                0.69326,
                0.11387,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.1672,
                0
            ],
            107: [
                0,
                0.69444,
                0.11111,
                0
            ],
            108: [
                0,
                0.69444,
                0.10861,
                0
            ],
            109: [
                0,
                0.44444,
                0.09426,
                0
            ],
            110: [
                0,
                0.44444,
                0.09426,
                0
            ],
            111: [
                0,
                0.44444,
                0.07861,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.07861,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            114: [
                0,
                0.44444,
                0.11111,
                0
            ],
            115: [
                0,
                0.44444,
                0.08167,
                0
            ],
            116: [
                0,
                0.63492,
                0.09639,
                0
            ],
            117: [
                0,
                0.44444,
                0.09426,
                0
            ],
            118: [
                0,
                0.44444,
                0.11111,
                0
            ],
            119: [
                0,
                0.44444,
                0.11111,
                0
            ],
            120: [
                0,
                0.44444,
                0.12583,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            122: [
                0,
                0.44444,
                0.13889,
                0
            ],
            126: [
                0.35,
                0.34444,
                0.11472,
                0
            ],
            160: db,
            168: [
                0,
                0.69444,
                0.11473,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68611,
                0.11431,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0.09062,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.09736,
                0
            ],
            230: [
                0,
                0.44444,
                0.085,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0.09458,
                0
            ],
            305: [
                0,
                0.44444,
                0.09426,
                0
            ],
            338: [
                0,
                0.68611,
                0.11431,
                0
            ],
            339: [
                0,
                0.44444,
                0.085,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04611,
                0
            ],
            710: [
                0,
                0.69444,
                0.06709,
                0
            ],
            711: [
                0,
                0.63194,
                0.08271,
                0
            ],
            713: [
                0,
                0.59444,
                0.10444,
                0
            ],
            714: [
                0,
                0.69444,
                0.08528,
                0
            ],
            715: W,
            728: [
                0,
                0.69444,
                0.10333,
                0
            ],
            729: [
                0,
                0.69444,
                0.12945,
                0
            ],
            730: W,
            732: [
                0,
                0.69444,
                0.11472,
                0
            ],
            733: [
                0,
                0.69444,
                0.11472,
                0
            ],
            915: [
                0,
                0.68611,
                0.12903,
                0
            ],
            916: $,
            920: [
                0,
                0.68611,
                0.09062,
                0
            ],
            923: $,
            926: [
                0,
                0.68611,
                0.15092,
                0
            ],
            928: [
                0,
                0.68611,
                0.17208,
                0
            ],
            931: [
                0,
                0.68611,
                0.11431,
                0
            ],
            933: [
                0,
                0.68611,
                0.10778,
                0
            ],
            934: [
                0,
                0.68611,
                0.05632,
                0
            ],
            936: [
                0,
                0.68611,
                0.10778,
                0
            ],
            937: [
                0,
                0.68611,
                0.0992,
                0
            ],
            8211: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8212: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8220: [
                0,
                0.69444,
                0.16772,
                0
            ],
            8221: [
                0,
                0.69444,
                0.07939,
                0
            ]
        },
        'Main-Italic': {
            32: db,
            33: [
                0,
                0.69444,
                0.12417,
                0
            ],
            34: [
                0,
                0.69444,
                0.06961,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06616,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.13639,
                0
            ],
            38: [
                0,
                0.69444,
                0.09694,
                0
            ],
            39: [
                0,
                0.69444,
                0.12417,
                0
            ],
            40: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03694,
                0
            ],
            42: [
                0,
                0.75,
                0.14917,
                0
            ],
            43: [
                0.05667,
                0.56167,
                0.03694,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0.02826,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            48: [
                0,
                0.64444,
                0.13556,
                0
            ],
            49: [
                0,
                0.64444,
                0.13556,
                0
            ],
            50: [
                0,
                0.64444,
                0.13556,
                0
            ],
            51: [
                0,
                0.64444,
                0.13556,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            53: [
                0,
                0.64444,
                0.13556,
                0
            ],
            54: [
                0,
                0.64444,
                0.13556,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            56: [
                0,
                0.64444,
                0.13556,
                0
            ],
            57: [
                0,
                0.64444,
                0.13556,
                0
            ],
            58: [
                0,
                0.43056,
                0.0582,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0.0582,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0.06616,
                0
            ],
            63: [
                0,
                0.69444,
                0.1225,
                0
            ],
            64: [
                0,
                0.69444,
                0.09597,
                0
            ],
            65: ab,
            66: [
                0,
                0.68333,
                0.10257,
                0
            ],
            67: [
                0,
                0.68333,
                0.14528,
                0
            ],
            68: [
                0,
                0.68333,
                0.09403,
                0
            ],
            69: [
                0,
                0.68333,
                0.12028,
                0
            ],
            70: [
                0,
                0.68333,
                0.13305,
                0
            ],
            71: [
                0,
                0.68333,
                0.08722,
                0
            ],
            72: [
                0,
                0.68333,
                0.16389,
                0
            ],
            73: [
                0,
                0.68333,
                0.15806,
                0
            ],
            74: [
                0,
                0.68333,
                0.14028,
                0
            ],
            75: [
                0,
                0.68333,
                0.14528,
                0
            ],
            76: ab,
            77: [
                0,
                0.68333,
                0.16389,
                0
            ],
            78: [
                0,
                0.68333,
                0.16389,
                0
            ],
            79: [
                0,
                0.68333,
                0.09403,
                0
            ],
            80: [
                0,
                0.68333,
                0.10257,
                0
            ],
            81: [
                0.19444,
                0.68333,
                0.09403,
                0
            ],
            82: [
                0,
                0.68333,
                0.03868,
                0
            ],
            83: [
                0,
                0.68333,
                0.11972,
                0
            ],
            84: [
                0,
                0.68333,
                0.13305,
                0
            ],
            85: [
                0,
                0.68333,
                0.16389,
                0
            ],
            86: [
                0,
                0.68333,
                0.18361,
                0
            ],
            87: [
                0,
                0.68333,
                0.18361,
                0
            ],
            88: [
                0,
                0.68333,
                0.15806,
                0
            ],
            89: [
                0,
                0.68333,
                0.19383,
                0
            ],
            90: [
                0,
                0.68333,
                0.14528,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.10528,
                0
            ],
            94: [
                0,
                0.69444,
                0.06646,
                0
            ],
            95: [
                0.31,
                0.12056,
                0.09208,
                0
            ],
            97: [
                0,
                0.43056,
                0.07671,
                0
            ],
            98: [
                0,
                0.69444,
                0.06312,
                0
            ],
            99: [
                0,
                0.43056,
                0.05653,
                0
            ],
            100: [
                0,
                0.69444,
                0.10333,
                0
            ],
            101: [
                0,
                0.43056,
                0.07514,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21194,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            104: [
                0,
                0.69444,
                0.07671,
                0
            ],
            105: [
                0,
                0.65536,
                0.1019,
                0
            ],
            106: [
                0.19444,
                0.65536,
                0.14467,
                0
            ],
            107: [
                0,
                0.69444,
                0.10764,
                0
            ],
            108: [
                0,
                0.69444,
                0.10333,
                0
            ],
            109: [
                0,
                0.43056,
                0.07671,
                0
            ],
            110: [
                0,
                0.43056,
                0.07671,
                0
            ],
            111: [
                0,
                0.43056,
                0.06312,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0.06312,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            114: [
                0,
                0.43056,
                0.10764,
                0
            ],
            115: [
                0,
                0.43056,
                0.08208,
                0
            ],
            116: [
                0,
                0.61508,
                0.09486,
                0
            ],
            117: [
                0,
                0.43056,
                0.07671,
                0
            ],
            118: [
                0,
                0.43056,
                0.10764,
                0
            ],
            119: [
                0,
                0.43056,
                0.10764,
                0
            ],
            120: [
                0,
                0.43056,
                0.12042,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            122: [
                0,
                0.43056,
                0.12292,
                0
            ],
            126: [
                0.35,
                0.31786,
                0.11585,
                0
            ],
            160: db,
            168: [
                0,
                0.66786,
                0.10474,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68333,
                0.12028,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0.09403,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.10514,
                0
            ],
            230: [
                0,
                0.43056,
                0.07514,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0.09194,
                0
            ],
            338: [
                0,
                0.68333,
                0.12028,
                0
            ],
            339: [
                0,
                0.43056,
                0.07514,
                0
            ],
            710: [
                0,
                0.69444,
                0.06646,
                0
            ],
            711: [
                0,
                0.62847,
                0.08295,
                0
            ],
            713: [
                0,
                0.56167,
                0.10333,
                0
            ],
            714: [
                0,
                0.69444,
                0.09694,
                0
            ],
            715: W,
            728: [
                0,
                0.69444,
                0.10806,
                0
            ],
            729: [
                0,
                0.66786,
                0.11752,
                0
            ],
            730: W,
            732: [
                0,
                0.66786,
                0.11585,
                0
            ],
            733: [
                0,
                0.69444,
                0.1225,
                0
            ],
            915: [
                0,
                0.68333,
                0.13305,
                0
            ],
            916: ab,
            920: [
                0,
                0.68333,
                0.09403,
                0
            ],
            923: ab,
            926: [
                0,
                0.68333,
                0.15294,
                0
            ],
            928: [
                0,
                0.68333,
                0.16389,
                0
            ],
            931: [
                0,
                0.68333,
                0.12028,
                0
            ],
            933: [
                0,
                0.68333,
                0.11111,
                0
            ],
            934: [
                0,
                0.68333,
                0.05986,
                0
            ],
            936: [
                0,
                0.68333,
                0.11111,
                0
            ],
            937: [
                0,
                0.68333,
                0.10257,
                0
            ],
            8211: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8212: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8220: [
                0,
                0.69444,
                0.1685,
                0
            ],
            8221: [
                0,
                0.69444,
                0.06961,
                0
            ],
            8463: bb
        },
        'Main-Regular': {
            32: db,
            33: W,
            34: W,
            35: _,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: mb,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: Y,
            48: eb,
            49: eb,
            50: eb,
            51: eb,
            52: eb,
            53: eb,
            54: eb,
            55: eb,
            56: eb,
            57: eb,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0,
                0
            ],
            60: [
                0.0391,
                0.5391,
                0,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            62: [
                0.0391,
                0.5391,
                0,
                0
            ],
            63: W,
            64: W,
            65: ab,
            66: ab,
            67: ab,
            68: ab,
            69: ab,
            70: ab,
            71: ab,
            72: ab,
            73: ab,
            74: ab,
            75: ab,
            76: ab,
            77: ab,
            78: ab,
            79: ab,
            80: ab,
            81: [
                0.19444,
                0.68333,
                0,
                0
            ],
            82: ab,
            83: ab,
            84: ab,
            85: ab,
            86: [
                0,
                0.68333,
                0.01389,
                0
            ],
            87: [
                0,
                0.68333,
                0.01389,
                0
            ],
            88: ab,
            89: [
                0,
                0.68333,
                0.025,
                0
            ],
            90: ab,
            91: Y,
            92: Y,
            93: Y,
            94: W,
            95: [
                0.31,
                0.12056,
                0.02778,
                0
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: W,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: W,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07778,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            104: W,
            105: [
                0,
                0.66786,
                0,
                0
            ],
            106: [
                0.19444,
                0.66786,
                0,
                0
            ],
            107: W,
            108: W,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.61508,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0.01389,
                0
            ],
            119: [
                0,
                0.43056,
                0.01389,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: Y,
            124: Y,
            125: Y,
            126: [
                0.35,
                0.31786,
                0,
                0
            ],
            160: db,
            163: W,
            167: _,
            168: [
                0,
                0.66786,
                0,
                0
            ],
            172: [
                0,
                0.43056,
                0,
                0
            ],
            176: W,
            177: [
                0.08333,
                0.58333,
                0,
                0
            ],
            182: _,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: ab,
            215: [
                0.08333,
                0.58333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0,
                0
            ],
            223: W,
            230: [
                0,
                0.43056,
                0,
                0
            ],
            247: [
                0.08333,
                0.58333,
                0,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            338: ab,
            339: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.19444,
                0.43056,
                0,
                0
            ],
            710: W,
            711: [
                0,
                0.62847,
                0,
                0
            ],
            713: [
                0,
                0.56778,
                0,
                0
            ],
            714: W,
            715: W,
            728: W,
            729: [
                0,
                0.66786,
                0,
                0
            ],
            730: W,
            732: [
                0,
                0.66786,
                0,
                0
            ],
            733: W,
            915: ab,
            916: ab,
            920: ab,
            923: ab,
            926: ab,
            928: ab,
            931: ab,
            933: ab,
            934: ab,
            936: ab,
            937: ab,
            8211: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8212: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W,
            8224: _,
            8225: _,
            8230: [
                0,
                0.12,
                0,
                0
            ],
            8242: ib,
            8407: [
                0,
                0.71444,
                0.15382,
                0
            ],
            8463: bb,
            8465: W,
            8467: [
                0,
                0.69444,
                0,
                0.11111
            ],
            8472: [
                0.19444,
                0.43056,
                0,
                0.11111
            ],
            8476: W,
            8501: W,
            8592: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8593: _,
            8594: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8595: _,
            8596: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8597: Y,
            8598: _,
            8599: _,
            8600: _,
            8601: _,
            8614: [
                0.011,
                0.511,
                0,
                0
            ],
            8617: [
                0.011,
                0.511,
                0,
                0
            ],
            8618: [
                0.011,
                0.511,
                0,
                0
            ],
            8636: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8637: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8640: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8641: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8652: [
                0.011,
                0.671,
                0,
                0
            ],
            8656: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8657: _,
            8658: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8659: _,
            8660: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8661: Y,
            8704: W,
            8706: [
                0,
                0.69444,
                0.05556,
                0.08334
            ],
            8707: W,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: ab,
            8712: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8715: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8722: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8723: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8725: Y,
            8726: Y,
            8727: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8728: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8729: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8730: [
                0.2,
                0.8,
                0,
                0
            ],
            8733: [
                0,
                0.43056,
                0,
                0
            ],
            8734: [
                0,
                0.43056,
                0,
                0
            ],
            8736: fb,
            8739: Y,
            8741: Y,
            8743: ib,
            8744: ib,
            8745: ib,
            8746: ib,
            8747: [
                0.19444,
                0.69444,
                0.11111,
                0
            ],
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8768: _,
            8771: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8773: [
                -0.022,
                0.589,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8781: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8784: [
                -0.133,
                0.67,
                0,
                0
            ],
            8801: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8804: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8805: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8810: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8811: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8826: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8827: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8834: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8835: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8838: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8839: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8846: ib,
            8849: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8850: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8851: ib,
            8852: ib,
            8853: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8854: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8855: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8856: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8857: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8866: W,
            8867: W,
            8868: W,
            8869: W,
            8872: [
                0.249,
                0.75,
                0,
                0
            ],
            8900: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8901: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8902: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8904: [
                0.005,
                0.505,
                0,
                0
            ],
            8942: [
                0.03,
                0.9,
                0,
                0
            ],
            8943: [
                -0.19,
                0.31,
                0,
                0
            ],
            8945: [
                -0.1,
                0.82,
                0,
                0
            ],
            8968: Y,
            8969: Y,
            8970: Y,
            8971: Y,
            8994: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            8995: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            9136: [
                0.244,
                0.744,
                0,
                0
            ],
            9137: [
                0.244,
                0.744,
                0,
                0
            ],
            9651: _,
            9657: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9661: _,
            9667: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9711: _,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: mb,
            9838: _,
            9839: _,
            10216: Y,
            10217: Y,
            10222: [
                0.244,
                0.744,
                0,
                0
            ],
            10223: [
                0.244,
                0.744,
                0,
                0
            ],
            10229: [
                0.011,
                0.511,
                0,
                0
            ],
            10230: [
                0.011,
                0.511,
                0,
                0
            ],
            10231: [
                0.011,
                0.511,
                0,
                0
            ],
            10232: [
                0.024,
                0.525,
                0,
                0
            ],
            10233: [
                0.024,
                0.525,
                0,
                0
            ],
            10234: [
                0.024,
                0.525,
                0,
                0
            ],
            10236: [
                0.011,
                0.511,
                0,
                0
            ],
            10815: ab,
            10927: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10928: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57376: _
        },
        'Math-BoldItalic': {
            32: db,
            48: Z,
            49: Z,
            50: Z,
            51: gb,
            52: gb,
            53: gb,
            54: eb,
            55: gb,
            56: eb,
            57: gb,
            65: $,
            66: [
                0,
                0.68611,
                0.04835,
                0
            ],
            67: [
                0,
                0.68611,
                0.06979,
                0
            ],
            68: [
                0,
                0.68611,
                0.03194,
                0
            ],
            69: [
                0,
                0.68611,
                0.05451,
                0
            ],
            70: [
                0,
                0.68611,
                0.15972,
                0
            ],
            71: $,
            72: [
                0,
                0.68611,
                0.08229,
                0
            ],
            73: [
                0,
                0.68611,
                0.07778,
                0
            ],
            74: [
                0,
                0.68611,
                0.10069,
                0
            ],
            75: [
                0,
                0.68611,
                0.06979,
                0
            ],
            76: $,
            77: [
                0,
                0.68611,
                0.11424,
                0
            ],
            78: [
                0,
                0.68611,
                0.11424,
                0
            ],
            79: [
                0,
                0.68611,
                0.03194,
                0
            ],
            80: [
                0,
                0.68611,
                0.15972,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: [
                0,
                0.68611,
                0.00421,
                0
            ],
            83: [
                0,
                0.68611,
                0.05382,
                0
            ],
            84: [
                0,
                0.68611,
                0.15972,
                0
            ],
            85: [
                0,
                0.68611,
                0.11424,
                0
            ],
            86: [
                0,
                0.68611,
                0.25555,
                0
            ],
            87: [
                0,
                0.68611,
                0.15972,
                0
            ],
            88: [
                0,
                0.68611,
                0.07778,
                0
            ],
            89: [
                0,
                0.68611,
                0.25555,
                0
            ],
            90: [
                0,
                0.68611,
                0.06979,
                0
            ],
            97: Z,
            98: W,
            99: Z,
            100: W,
            101: Z,
            102: [
                0.19444,
                0.69444,
                0.11042,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            104: W,
            105: [
                0,
                0.69326,
                0,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.0622,
                0
            ],
            107: [
                0,
                0.69444,
                0.01852,
                0
            ],
            108: [
                0,
                0.69444,
                0.0088,
                0
            ],
            109: Z,
            110: Z,
            111: Z,
            112: gb,
            113: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            114: [
                0,
                0.44444,
                0.03194,
                0
            ],
            115: Z,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: Z,
            118: [
                0,
                0.44444,
                0.03704,
                0
            ],
            119: [
                0,
                0.44444,
                0.02778,
                0
            ],
            120: Z,
            121: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            122: [
                0,
                0.44444,
                0.04213,
                0
            ],
            160: db,
            915: [
                0,
                0.68611,
                0.15972,
                0
            ],
            916: $,
            920: [
                0,
                0.68611,
                0.03194,
                0
            ],
            923: $,
            926: [
                0,
                0.68611,
                0.07458,
                0
            ],
            928: [
                0,
                0.68611,
                0.08229,
                0
            ],
            931: [
                0,
                0.68611,
                0.05451,
                0
            ],
            933: [
                0,
                0.68611,
                0.15972,
                0
            ],
            934: $,
            936: [
                0,
                0.68611,
                0.11653,
                0
            ],
            937: [
                0,
                0.68611,
                0.04835,
                0
            ],
            945: Z,
            946: [
                0.19444,
                0.69444,
                0.03403,
                0
            ],
            947: [
                0.19444,
                0.44444,
                0.06389,
                0
            ],
            948: [
                0,
                0.69444,
                0.03819,
                0
            ],
            949: Z,
            950: [
                0.19444,
                0.69444,
                0.06215,
                0
            ],
            951: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            952: [
                0,
                0.69444,
                0.03194,
                0
            ],
            953: Z,
            954: Z,
            955: W,
            956: gb,
            957: [
                0,
                0.44444,
                0.06898,
                0
            ],
            958: [
                0.19444,
                0.69444,
                0.03021,
                0
            ],
            959: Z,
            960: [
                0,
                0.44444,
                0.03704,
                0
            ],
            961: gb,
            962: [
                0.09722,
                0.44444,
                0.07917,
                0
            ],
            963: [
                0,
                0.44444,
                0.03704,
                0
            ],
            964: [
                0,
                0.44444,
                0.13472,
                0
            ],
            965: [
                0,
                0.44444,
                0.03704,
                0
            ],
            966: gb,
            967: gb,
            968: [
                0.19444,
                0.69444,
                0.03704,
                0
            ],
            969: [
                0,
                0.44444,
                0.03704,
                0
            ],
            977: W,
            981: _,
            982: [
                0,
                0.44444,
                0.03194,
                0
            ],
            1009: gb,
            1013: Z,
            57649: Z,
            57911: gb
        },
        'Math-Italic': {
            32: db,
            48: [
                0,
                0.43056,
                0,
                0
            ],
            49: [
                0,
                0.43056,
                0,
                0
            ],
            50: [
                0,
                0.43056,
                0,
                0
            ],
            51: [
                0.19444,
                0.43056,
                0,
                0
            ],
            52: [
                0.19444,
                0.43056,
                0,
                0
            ],
            53: [
                0.19444,
                0.43056,
                0,
                0
            ],
            54: eb,
            55: [
                0.19444,
                0.43056,
                0,
                0
            ],
            56: eb,
            57: [
                0.19444,
                0.43056,
                0,
                0
            ],
            65: [
                0,
                0.68333,
                0,
                0.13889
            ],
            66: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            67: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.05556
            ],
            69: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            70: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            71: [
                0,
                0.68333,
                0,
                0.08334
            ],
            72: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            73: [
                0,
                0.68333,
                0.07847,
                0.11111
            ],
            74: [
                0,
                0.68333,
                0.09618,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.07153,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.02778
            ],
            77: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            78: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            80: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            81: [
                0.19444,
                0.68333,
                0,
                0.08334
            ],
            82: [
                0,
                0.68333,
                0.00773,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            84: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            85: [
                0,
                0.68333,
                0.10903,
                0.02778
            ],
            86: [
                0,
                0.68333,
                0.22222,
                0
            ],
            87: [
                0,
                0.68333,
                0.13889,
                0
            ],
            88: [
                0,
                0.68333,
                0.07847,
                0.08334
            ],
            89: [
                0,
                0.68333,
                0.22222,
                0
            ],
            90: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: W,
            99: [
                0,
                0.43056,
                0,
                0.05556
            ],
            100: [
                0,
                0.69444,
                0,
                0.16667
            ],
            101: [
                0,
                0.43056,
                0,
                0.05556
            ],
            102: [
                0.19444,
                0.69444,
                0.10764,
                0.16667
            ],
            103: [
                0.19444,
                0.43056,
                0.03588,
                0.02778
            ],
            104: W,
            105: [
                0,
                0.65952,
                0,
                0
            ],
            106: [
                0.19444,
                0.65952,
                0.05724,
                0
            ],
            107: [
                0,
                0.69444,
                0.03148,
                0
            ],
            108: [
                0,
                0.69444,
                0.01968,
                0.08334
            ],
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0.05556
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            113: [
                0.19444,
                0.43056,
                0.03588,
                0.08334
            ],
            114: [
                0,
                0.43056,
                0.02778,
                0.05556
            ],
            115: [
                0,
                0.43056,
                0,
                0.05556
            ],
            116: [
                0,
                0.61508,
                0,
                0.08334
            ],
            117: [
                0,
                0.43056,
                0,
                0.02778
            ],
            118: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            119: [
                0,
                0.43056,
                0.02691,
                0.08334
            ],
            120: [
                0,
                0.43056,
                0,
                0.02778
            ],
            121: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            122: [
                0,
                0.43056,
                0.04398,
                0.05556
            ],
            160: db,
            915: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            916: [
                0,
                0.68333,
                0,
                0.16667
            ],
            920: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            923: [
                0,
                0.68333,
                0,
                0.16667
            ],
            926: [
                0,
                0.68333,
                0.07569,
                0.08334
            ],
            928: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            931: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            933: [
                0,
                0.68333,
                0.13889,
                0.05556
            ],
            934: [
                0,
                0.68333,
                0,
                0.08334
            ],
            936: [
                0,
                0.68333,
                0.11,
                0.05556
            ],
            937: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            945: [
                0,
                0.43056,
                0.0037,
                0.02778
            ],
            946: [
                0.19444,
                0.69444,
                0.05278,
                0.08334
            ],
            947: [
                0.19444,
                0.43056,
                0.05556,
                0
            ],
            948: [
                0,
                0.69444,
                0.03785,
                0.05556
            ],
            949: [
                0,
                0.43056,
                0,
                0.08334
            ],
            950: [
                0.19444,
                0.69444,
                0.07378,
                0.08334
            ],
            951: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            952: [
                0,
                0.69444,
                0.02778,
                0.08334
            ],
            953: [
                0,
                0.43056,
                0,
                0.05556
            ],
            954: [
                0,
                0.43056,
                0,
                0
            ],
            955: W,
            956: [
                0.19444,
                0.43056,
                0,
                0.02778
            ],
            957: [
                0,
                0.43056,
                0.06366,
                0.02778
            ],
            958: [
                0.19444,
                0.69444,
                0.04601,
                0.11111
            ],
            959: [
                0,
                0.43056,
                0,
                0.05556
            ],
            960: [
                0,
                0.43056,
                0.03588,
                0
            ],
            961: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            962: [
                0.09722,
                0.43056,
                0.07986,
                0.08334
            ],
            963: [
                0,
                0.43056,
                0.03588,
                0
            ],
            964: [
                0,
                0.43056,
                0.1132,
                0.02778
            ],
            965: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            966: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            967: [
                0.19444,
                0.43056,
                0,
                0.05556
            ],
            968: [
                0.19444,
                0.69444,
                0.03588,
                0.11111
            ],
            969: [
                0,
                0.43056,
                0.03588,
                0
            ],
            977: [
                0,
                0.69444,
                0,
                0.08334
            ],
            981: [
                0.19444,
                0.69444,
                0,
                0.08334
            ],
            982: [
                0,
                0.43056,
                0.02778,
                0
            ],
            1009: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            1013: [
                0,
                0.43056,
                0,
                0.05556
            ],
            57649: [
                0,
                0.43056,
                0,
                0.02778
            ],
            57911: [
                0.19444,
                0.43056,
                0,
                0.08334
            ]
        },
        'SansSerif-Bold': {
            32: db,
            33: W,
            34: W,
            35: _,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: mb,
            43: [
                0.11667,
                0.61667,
                0,
                0
            ],
            44: [
                0.10556,
                0.13056,
                0,
                0
            ],
            45: [
                0,
                0.45833,
                0,
                0
            ],
            46: [
                0,
                0.13056,
                0,
                0
            ],
            47: Y,
            48: W,
            49: W,
            50: W,
            51: W,
            52: W,
            53: W,
            54: W,
            55: W,
            56: W,
            57: W,
            58: [
                0,
                0.45833,
                0,
                0
            ],
            59: [
                0.10556,
                0.45833,
                0,
                0
            ],
            61: [
                -0.09375,
                0.40625,
                0,
                0
            ],
            63: W,
            64: W,
            65: W,
            66: W,
            67: W,
            68: W,
            69: W,
            70: W,
            71: W,
            72: W,
            73: W,
            74: W,
            75: W,
            76: W,
            77: W,
            78: W,
            79: W,
            80: W,
            81: [
                0.10556,
                0.69444,
                0,
                0
            ],
            82: W,
            83: W,
            84: W,
            85: W,
            86: [
                0,
                0.69444,
                0.01528,
                0
            ],
            87: [
                0,
                0.69444,
                0.01528,
                0
            ],
            88: W,
            89: [
                0,
                0.69444,
                0.0275,
                0
            ],
            90: W,
            91: Y,
            93: Y,
            94: W,
            95: [
                0.35,
                0.10833,
                0.03056,
                0
            ],
            97: [
                0,
                0.45833,
                0,
                0
            ],
            98: W,
            99: [
                0,
                0.45833,
                0,
                0
            ],
            100: W,
            101: [
                0,
                0.45833,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07639,
                0
            ],
            103: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            104: W,
            105: W,
            106: _,
            107: W,
            108: W,
            109: [
                0,
                0.45833,
                0,
                0
            ],
            110: [
                0,
                0.45833,
                0,
                0
            ],
            111: [
                0,
                0.45833,
                0,
                0
            ],
            112: [
                0.19444,
                0.45833,
                0,
                0
            ],
            113: [
                0.19444,
                0.45833,
                0,
                0
            ],
            114: [
                0,
                0.45833,
                0.01528,
                0
            ],
            115: [
                0,
                0.45833,
                0,
                0
            ],
            116: [
                0,
                0.58929,
                0,
                0
            ],
            117: [
                0,
                0.45833,
                0,
                0
            ],
            118: [
                0,
                0.45833,
                0.01528,
                0
            ],
            119: [
                0,
                0.45833,
                0.01528,
                0
            ],
            120: [
                0,
                0.45833,
                0,
                0
            ],
            121: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            122: [
                0,
                0.45833,
                0,
                0
            ],
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: db,
            168: W,
            176: W,
            180: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.45833,
                0,
                0
            ],
            567: [
                0.19444,
                0.45833,
                0,
                0
            ],
            710: W,
            711: [
                0,
                0.63542,
                0,
                0
            ],
            713: [
                0,
                0.63778,
                0,
                0
            ],
            728: W,
            729: W,
            730: W,
            732: W,
            733: W,
            915: W,
            916: W,
            920: W,
            923: W,
            926: W,
            928: W,
            931: W,
            933: W,
            934: W,
            936: W,
            937: W,
            8211: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8212: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W
        },
        'SansSerif-Italic': {
            32: db,
            33: [
                0,
                0.69444,
                0.05733,
                0
            ],
            34: [
                0,
                0.69444,
                0.00316,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.05087,
                0
            ],
            36: [
                0.05556,
                0.75,
                0.11156,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.03126,
                0
            ],
            38: [
                0,
                0.69444,
                0.03058,
                0
            ],
            39: [
                0,
                0.69444,
                0.07816,
                0
            ],
            40: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            41: [
                0.25,
                0.75,
                0.02536,
                0
            ],
            42: [
                0,
                0.75,
                0.11775,
                0
            ],
            43: [
                0.08333,
                0.58333,
                0.02536,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.01946,
                0
            ],
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            48: [
                0,
                0.65556,
                0.11156,
                0
            ],
            49: [
                0,
                0.65556,
                0.11156,
                0
            ],
            50: [
                0,
                0.65556,
                0.11156,
                0
            ],
            51: [
                0,
                0.65556,
                0.11156,
                0
            ],
            52: [
                0,
                0.65556,
                0.11156,
                0
            ],
            53: [
                0,
                0.65556,
                0.11156,
                0
            ],
            54: [
                0,
                0.65556,
                0.11156,
                0
            ],
            55: [
                0,
                0.65556,
                0.11156,
                0
            ],
            56: [
                0,
                0.65556,
                0.11156,
                0
            ],
            57: [
                0,
                0.65556,
                0.11156,
                0
            ],
            58: [
                0,
                0.44444,
                0.02502,
                0
            ],
            59: [
                0.125,
                0.44444,
                0.02502,
                0
            ],
            61: [
                -0.13,
                0.37,
                0.05087,
                0
            ],
            63: [
                0,
                0.69444,
                0.11809,
                0
            ],
            64: [
                0,
                0.69444,
                0.07555,
                0
            ],
            65: W,
            66: [
                0,
                0.69444,
                0.08293,
                0
            ],
            67: [
                0,
                0.69444,
                0.11983,
                0
            ],
            68: [
                0,
                0.69444,
                0.07555,
                0
            ],
            69: [
                0,
                0.69444,
                0.11983,
                0
            ],
            70: [
                0,
                0.69444,
                0.13372,
                0
            ],
            71: [
                0,
                0.69444,
                0.11983,
                0
            ],
            72: [
                0,
                0.69444,
                0.08094,
                0
            ],
            73: [
                0,
                0.69444,
                0.13372,
                0
            ],
            74: [
                0,
                0.69444,
                0.08094,
                0
            ],
            75: [
                0,
                0.69444,
                0.11983,
                0
            ],
            76: W,
            77: [
                0,
                0.69444,
                0.08094,
                0
            ],
            78: [
                0,
                0.69444,
                0.08094,
                0
            ],
            79: [
                0,
                0.69444,
                0.07555,
                0
            ],
            80: [
                0,
                0.69444,
                0.08293,
                0
            ],
            81: [
                0.125,
                0.69444,
                0.07555,
                0
            ],
            82: [
                0,
                0.69444,
                0.08293,
                0
            ],
            83: [
                0,
                0.69444,
                0.09205,
                0
            ],
            84: [
                0,
                0.69444,
                0.13372,
                0
            ],
            85: [
                0,
                0.69444,
                0.08094,
                0
            ],
            86: [
                0,
                0.69444,
                0.1615,
                0
            ],
            87: [
                0,
                0.69444,
                0.1615,
                0
            ],
            88: [
                0,
                0.69444,
                0.13372,
                0
            ],
            89: [
                0,
                0.69444,
                0.17261,
                0
            ],
            90: [
                0,
                0.69444,
                0.11983,
                0
            ],
            91: [
                0.25,
                0.75,
                0.15942,
                0
            ],
            93: [
                0.25,
                0.75,
                0.08719,
                0
            ],
            94: [
                0,
                0.69444,
                0.0799,
                0
            ],
            95: [
                0.35,
                0.09444,
                0.08616,
                0
            ],
            97: [
                0,
                0.44444,
                0.00981,
                0
            ],
            98: [
                0,
                0.69444,
                0.03057,
                0
            ],
            99: [
                0,
                0.44444,
                0.08336,
                0
            ],
            100: [
                0,
                0.69444,
                0.09483,
                0
            ],
            101: [
                0,
                0.44444,
                0.06778,
                0
            ],
            102: [
                0,
                0.69444,
                0.21705,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            104: [
                0,
                0.69444,
                0.01778,
                0
            ],
            105: [
                0,
                0.67937,
                0.09718,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0.09162,
                0
            ],
            107: [
                0,
                0.69444,
                0.08336,
                0
            ],
            108: [
                0,
                0.69444,
                0.09483,
                0
            ],
            109: [
                0,
                0.44444,
                0.01778,
                0
            ],
            110: [
                0,
                0.44444,
                0.01778,
                0
            ],
            111: [
                0,
                0.44444,
                0.06613,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.0389,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            114: [
                0,
                0.44444,
                0.10836,
                0
            ],
            115: [
                0,
                0.44444,
                0.0778,
                0
            ],
            116: [
                0,
                0.57143,
                0.07225,
                0
            ],
            117: [
                0,
                0.44444,
                0.04169,
                0
            ],
            118: [
                0,
                0.44444,
                0.10836,
                0
            ],
            119: [
                0,
                0.44444,
                0.10836,
                0
            ],
            120: [
                0,
                0.44444,
                0.09169,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            122: [
                0,
                0.44444,
                0.08752,
                0
            ],
            126: [
                0.35,
                0.32659,
                0.08826,
                0
            ],
            160: db,
            168: [
                0,
                0.67937,
                0.06385,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.44444,
                0.04169,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            710: [
                0,
                0.69444,
                0.0799,
                0
            ],
            711: [
                0,
                0.63194,
                0.08432,
                0
            ],
            713: [
                0,
                0.60889,
                0.08776,
                0
            ],
            714: [
                0,
                0.69444,
                0.09205,
                0
            ],
            715: W,
            728: [
                0,
                0.69444,
                0.09483,
                0
            ],
            729: [
                0,
                0.67937,
                0.07774,
                0
            ],
            730: W,
            732: [
                0,
                0.67659,
                0.08826,
                0
            ],
            733: [
                0,
                0.69444,
                0.09205,
                0
            ],
            915: [
                0,
                0.69444,
                0.13372,
                0
            ],
            916: W,
            920: [
                0,
                0.69444,
                0.07555,
                0
            ],
            923: W,
            926: [
                0,
                0.69444,
                0.12816,
                0
            ],
            928: [
                0,
                0.69444,
                0.08094,
                0
            ],
            931: [
                0,
                0.69444,
                0.11983,
                0
            ],
            933: [
                0,
                0.69444,
                0.09031,
                0
            ],
            934: [
                0,
                0.69444,
                0.04603,
                0
            ],
            936: [
                0,
                0.69444,
                0.09031,
                0
            ],
            937: [
                0,
                0.69444,
                0.08293,
                0
            ],
            8211: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8212: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8216: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8217: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8220: [
                0,
                0.69444,
                0.14205,
                0
            ],
            8221: [
                0,
                0.69444,
                0.00316,
                0
            ]
        },
        'SansSerif-Regular': {
            32: db,
            33: W,
            34: W,
            35: _,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: mb,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: Z,
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: Y,
            48: [
                0,
                0.65556,
                0,
                0
            ],
            49: [
                0,
                0.65556,
                0,
                0
            ],
            50: [
                0,
                0.65556,
                0,
                0
            ],
            51: [
                0,
                0.65556,
                0,
                0
            ],
            52: [
                0,
                0.65556,
                0,
                0
            ],
            53: [
                0,
                0.65556,
                0,
                0
            ],
            54: [
                0,
                0.65556,
                0,
                0
            ],
            55: [
                0,
                0.65556,
                0,
                0
            ],
            56: [
                0,
                0.65556,
                0,
                0
            ],
            57: [
                0,
                0.65556,
                0,
                0
            ],
            58: Z,
            59: [
                0.125,
                0.44444,
                0,
                0
            ],
            61: [
                -0.13,
                0.37,
                0,
                0
            ],
            63: W,
            64: W,
            65: W,
            66: W,
            67: W,
            68: W,
            69: W,
            70: W,
            71: W,
            72: W,
            73: W,
            74: W,
            75: W,
            76: W,
            77: W,
            78: W,
            79: W,
            80: W,
            81: [
                0.125,
                0.69444,
                0,
                0
            ],
            82: W,
            83: W,
            84: W,
            85: W,
            86: [
                0,
                0.69444,
                0.01389,
                0
            ],
            87: [
                0,
                0.69444,
                0.01389,
                0
            ],
            88: W,
            89: [
                0,
                0.69444,
                0.025,
                0
            ],
            90: W,
            91: Y,
            93: Y,
            94: W,
            95: [
                0.35,
                0.09444,
                0.02778,
                0
            ],
            97: Z,
            98: W,
            99: Z,
            100: W,
            101: Z,
            102: [
                0,
                0.69444,
                0.06944,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            104: W,
            105: [
                0,
                0.67937,
                0,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0,
                0
            ],
            107: W,
            108: W,
            109: Z,
            110: Z,
            111: Z,
            112: gb,
            113: gb,
            114: [
                0,
                0.44444,
                0.01389,
                0
            ],
            115: Z,
            116: [
                0,
                0.57143,
                0,
                0
            ],
            117: Z,
            118: [
                0,
                0.44444,
                0.01389,
                0
            ],
            119: [
                0,
                0.44444,
                0.01389,
                0
            ],
            120: Z,
            121: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            122: Z,
            126: [
                0.35,
                0.32659,
                0,
                0
            ],
            160: db,
            168: [
                0,
                0.67937,
                0,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: Z,
            567: gb,
            710: W,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.60889,
                0,
                0
            ],
            714: W,
            715: W,
            728: W,
            729: [
                0,
                0.67937,
                0,
                0
            ],
            730: W,
            732: [
                0,
                0.67659,
                0,
                0
            ],
            733: W,
            915: W,
            916: W,
            920: W,
            923: W,
            926: W,
            928: W,
            931: W,
            933: W,
            934: W,
            936: W,
            937: W,
            8211: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8212: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W
        },
        'Script-Regular': {
            32: db,
            65: [
                0,
                0.7,
                0.22925,
                0
            ],
            66: [
                0,
                0.7,
                0.04087,
                0
            ],
            67: [
                0,
                0.7,
                0.1689,
                0
            ],
            68: [
                0,
                0.7,
                0.09371,
                0
            ],
            69: [
                0,
                0.7,
                0.18583,
                0
            ],
            70: [
                0,
                0.7,
                0.13634,
                0
            ],
            71: [
                0,
                0.7,
                0.17322,
                0
            ],
            72: [
                0,
                0.7,
                0.29694,
                0
            ],
            73: [
                0,
                0.7,
                0.19189,
                0
            ],
            74: [
                0.27778,
                0.7,
                0.19189,
                0
            ],
            75: [
                0,
                0.7,
                0.31259,
                0
            ],
            76: [
                0,
                0.7,
                0.19189,
                0
            ],
            77: [
                0,
                0.7,
                0.15981,
                0
            ],
            78: [
                0,
                0.7,
                0.3525,
                0
            ],
            79: [
                0,
                0.7,
                0.08078,
                0
            ],
            80: [
                0,
                0.7,
                0.08078,
                0
            ],
            81: [
                0,
                0.7,
                0.03305,
                0
            ],
            82: [
                0,
                0.7,
                0.06259,
                0
            ],
            83: [
                0,
                0.7,
                0.19189,
                0
            ],
            84: [
                0,
                0.7,
                0.29087,
                0
            ],
            85: [
                0,
                0.7,
                0.25815,
                0
            ],
            86: [
                0,
                0.7,
                0.27523,
                0
            ],
            87: [
                0,
                0.7,
                0.27523,
                0
            ],
            88: [
                0,
                0.7,
                0.26006,
                0
            ],
            89: [
                0,
                0.7,
                0.2939,
                0
            ],
            90: [
                0,
                0.7,
                0.24037,
                0
            ],
            160: db
        },
        'Size1-Regular': {
            32: db,
            40: jb,
            41: jb,
            47: jb,
            91: jb,
            92: jb,
            93: jb,
            123: jb,
            125: jb,
            160: db,
            710: [
                0,
                0.72222,
                0,
                0
            ],
            732: [
                0,
                0.72222,
                0,
                0
            ],
            770: [
                0,
                0.72222,
                0,
                0
            ],
            771: [
                0,
                0.72222,
                0,
                0
            ],
            8214: [
                -0.00099,
                0.601,
                0,
                0
            ],
            8593: [
                0.00001,
                0.6,
                0,
                0
            ],
            8595: [
                0.00001,
                0.6,
                0,
                0
            ],
            8657: [
                0.00001,
                0.6,
                0,
                0
            ],
            8659: [
                0.00001,
                0.6,
                0,
                0
            ],
            8719: ob,
            8720: ob,
            8721: ob,
            8730: jb,
            8739: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8741: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8747: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8748: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8749: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8750: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8896: ob,
            8897: ob,
            8898: ob,
            8899: ob,
            8968: jb,
            8969: jb,
            8970: jb,
            8971: jb,
            9168: [
                -0.00099,
                0.601,
                0,
                0
            ],
            10216: jb,
            10217: jb,
            10752: ob,
            10753: ob,
            10754: ob,
            10756: ob,
            10758: ob
        },
        'Size2-Regular': {
            32: db,
            40: hb,
            41: hb,
            47: hb,
            91: hb,
            92: hb,
            93: hb,
            123: hb,
            125: hb,
            160: db,
            710: mb,
            732: mb,
            770: mb,
            771: mb,
            8719: pb,
            8720: pb,
            8721: pb,
            8730: hb,
            8747: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8748: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8749: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8750: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8896: pb,
            8897: pb,
            8898: pb,
            8899: pb,
            8968: hb,
            8969: hb,
            8970: hb,
            8971: hb,
            10216: hb,
            10217: hb,
            10752: pb,
            10753: pb,
            10754: pb,
            10756: pb,
            10758: pb
        },
        'Size3-Regular': {
            32: db,
            40: lb,
            41: lb,
            47: lb,
            91: lb,
            92: lb,
            93: lb,
            123: lb,
            125: lb,
            160: db,
            710: mb,
            732: mb,
            770: mb,
            771: mb,
            8730: lb,
            8968: lb,
            8969: lb,
            8970: lb,
            8971: lb,
            10216: lb,
            10217: lb
        },
        'Size4-Regular': {
            32: db,
            40: kb,
            41: kb,
            47: kb,
            91: kb,
            92: kb,
            93: kb,
            123: kb,
            125: kb,
            160: db,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.825,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.825,
                0,
                0
            ],
            8730: kb,
            8968: kb,
            8969: kb,
            8970: kb,
            8971: kb,
            9115: [
                0.64502,
                1.155,
                0,
                0
            ],
            9116: [
                0.00001,
                0.6,
                0,
                0
            ],
            9117: [
                0.64502,
                1.155,
                0,
                0
            ],
            9118: [
                0.64502,
                1.155,
                0,
                0
            ],
            9119: [
                0.00001,
                0.6,
                0,
                0
            ],
            9120: [
                0.64502,
                1.155,
                0,
                0
            ],
            9121: [
                0.64502,
                1.155,
                0,
                0
            ],
            9122: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9123: [
                0.64502,
                1.155,
                0,
                0
            ],
            9124: [
                0.64502,
                1.155,
                0,
                0
            ],
            9125: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9126: [
                0.64502,
                1.155,
                0,
                0
            ],
            9127: [
                0.00001,
                0.9,
                0,
                0
            ],
            9128: hb,
            9129: [
                0.90001,
                0,
                0,
                0
            ],
            9130: [
                0,
                0.3,
                0,
                0
            ],
            9131: [
                0.00001,
                0.9,
                0,
                0
            ],
            9132: hb,
            9133: [
                0.90001,
                0,
                0,
                0
            ],
            9143: [
                0.88502,
                0.915,
                0,
                0
            ],
            10216: kb,
            10217: kb,
            57344: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57345: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57680: [
                0,
                0.12,
                0,
                0
            ],
            57681: [
                0,
                0.12,
                0,
                0
            ],
            57682: [
                0,
                0.12,
                0,
                0
            ],
            57683: [
                0,
                0.12,
                0,
                0
            ]
        },
        'Typewriter-Regular': {
            32: db,
            33: X,
            34: X,
            35: X,
            36: [
                0.08333,
                0.69444,
                0,
                0
            ],
            37: [
                0.08333,
                0.69444,
                0,
                0
            ],
            38: X,
            39: X,
            40: [
                0.08333,
                0.69444,
                0,
                0
            ],
            41: [
                0.08333,
                0.69444,
                0,
                0
            ],
            42: [
                0,
                0.52083,
                0,
                0
            ],
            43: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            44: [
                0.13889,
                0.125,
                0,
                0
            ],
            45: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            46: [
                0,
                0.125,
                0,
                0
            ],
            47: [
                0.08333,
                0.69444,
                0,
                0
            ],
            48: X,
            49: X,
            50: X,
            51: X,
            52: X,
            53: X,
            54: X,
            55: X,
            56: X,
            57: X,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.13889,
                0.43056,
                0,
                0
            ],
            60: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            61: [
                -0.19549,
                0.41562,
                0,
                0
            ],
            62: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            63: X,
            64: X,
            65: X,
            66: X,
            67: X,
            68: X,
            69: X,
            70: X,
            71: X,
            72: X,
            73: X,
            74: X,
            75: X,
            76: X,
            77: X,
            78: X,
            79: X,
            80: X,
            81: [
                0.13889,
                0.61111,
                0,
                0
            ],
            82: X,
            83: X,
            84: X,
            85: X,
            86: X,
            87: X,
            88: X,
            89: X,
            90: X,
            91: [
                0.08333,
                0.69444,
                0,
                0
            ],
            92: [
                0.08333,
                0.69444,
                0,
                0
            ],
            93: [
                0.08333,
                0.69444,
                0,
                0
            ],
            94: X,
            95: [
                0.09514,
                0,
                0,
                0
            ],
            96: X,
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: X,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: X,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: X,
            103: [
                0.22222,
                0.43056,
                0,
                0
            ],
            104: X,
            105: X,
            106: [
                0.22222,
                0.61111,
                0,
                0
            ],
            107: X,
            108: X,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.22222,
                0.43056,
                0,
                0
            ],
            113: [
                0.22222,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.55358,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0,
                0
            ],
            119: [
                0,
                0.43056,
                0,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.22222,
                0.43056,
                0,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: [
                0.08333,
                0.69444,
                0,
                0
            ],
            124: [
                0.08333,
                0.69444,
                0,
                0
            ],
            125: [
                0.08333,
                0.69444,
                0,
                0
            ],
            126: X,
            127: X,
            160: db,
            176: X,
            184: [
                0.19445,
                0,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.22222,
                0.43056,
                0,
                0
            ],
            711: [
                0,
                0.56597,
                0,
                0
            ],
            713: [
                0,
                0.56555,
                0,
                0
            ],
            714: X,
            715: X,
            728: X,
            730: X,
            770: X,
            771: X,
            776: X,
            915: X,
            916: X,
            920: X,
            923: X,
            926: X,
            928: X,
            931: X,
            933: X,
            934: X,
            936: X,
            937: X,
            8216: X,
            8217: X,
            8242: X,
            9251: [
                0.11111,
                0.21944,
                0,
                0
            ]
        }
    };
    const tb = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/,
        ub = {
            slant: [
                0.25,
                0.25,
                0.25
            ],
            space: [
                0,
                0,
                0
            ],
            stretch: [
                0,
                0,
                0
            ],
            shrink: [
                0,
                0,
                0
            ],
            xHeight: [
                0.431,
                0.431,
                0.431
            ],
            quad: [
                1,
                1.171,
                1.472
            ],
            extraSpace: [
                0,
                0,
                0
            ],
            num1: [
                0.677,
                0.732,
                0.925
            ],
            num2: [
                0.394,
                0.384,
                0.387
            ],
            num3: [
                0.444,
                0.471,
                0.504
            ],
            denom1: [
                0.686,
                0.752,
                1.025
            ],
            denom2: [
                0.345,
                0.344,
                0.532
            ],
            sup1: [
                0.413,
                0.503,
                0.504
            ],
            sup2: [
                0.363,
                0.431,
                0.404
            ],
            sup3: [
                0.289,
                0.286,
                0.294
            ],
            sub1: [
                0.15,
                0.143,
                0.2
            ],
            sub2: [
                0.247,
                0.286,
                0.4
            ],
            supDrop: [
                0.386,
                0.353,
                0.494
            ],
            subDrop: [
                0.05,
                0.071,
                0.1
            ],
            delim1: [
                2.39,
                1.7,
                1.98
            ],
            delim2: [
                1.01,
                1.157,
                1.42
            ],
            axisHeight: [
                0.25,
                0.25,
                0.25
            ],
            defaultRuleThickness: [
                0.04,
                0.049,
                0.049
            ],
            bigOpSpacing1: [
                0.111,
                0.111,
                0.111
            ],
            bigOpSpacing2: [
                0.166,
                0.166,
                0.166
            ],
            bigOpSpacing3: [
                0.2,
                0.2,
                0.2
            ],
            bigOpSpacing4: [
                0.6,
                0.611,
                0.611
            ],
            bigOpSpacing5: [
                0.1,
                0.143,
                0.143
            ],
            sqrtRuleThickness: [
                0.04,
                0.04,
                0.04
            ]
        },
        vb = [
            0,
            0.5,
            0.7,
            0.8,
            0.9,
            1,
            1.2,
            1.44,
            1.728,
            2.074,
            2.488
        ],
        wb = {
            '\xA0': ' ',
            '\u200B': ' ',
            'Å': 'A',
            'Ç': 'C',
            'Ð': 'D',
            'Þ': 'o',
            'å': 'a',
            'ç': 'c',
            'ð': 'd',
            'þ': 'o',
            'А': 'A',
            'Б': 'B',
            'В': 'B',
            'Г': 'F',
            'Д': 'A',
            'Е': 'E',
            'Ж': 'K',
            'З': '3',
            'И': 'N',
            'Й': 'N',
            'К': 'K',
            'Л': 'N',
            'М': 'M',
            'Н': 'H',
            'О': 'O',
            'П': 'N',
            'Р': 'P',
            'С': 'C',
            'Т': 'T',
            'У': 'y',
            'Ф': 'O',
            'Х': 'X',
            'Ц': 'U',
            'Ч': 'h',
            'Ш': 'W',
            'Щ': 'W',
            'Ъ': 'B',
            'Ы': 'X',
            'Ь': 'B',
            'Э': '3',
            'Ю': 'X',
            'Я': 'R',
            'а': 'a',
            'б': 'b',
            'в': 'a',
            'г': 'r',
            'д': 'y',
            'е': 'e',
            'ж': 'm',
            'з': 'e',
            'и': 'n',
            'й': 'n',
            'к': 'n',
            'л': 'n',
            'м': 'm',
            'н': 'n',
            'о': 'o',
            'п': 'n',
            'р': 'p',
            'с': 'c',
            'т': 'o',
            'у': 'y',
            'ф': 'b',
            'х': 'x',
            'ц': 'n',
            'ч': 'n',
            'ш': 'w',
            'щ': 'w',
            'ъ': 'a',
            'ы': 'm',
            'ь': 'a',
            'э': 'e',
            'ю': 'm',
            'я': 'r'
        };

    function xb(a, Cb) {
        void 0 === a && (a = 77);
        const yb = sb[Cb][a];
        if (yb)
            return {
                defaultMetrics: !1,
                depth: yb[0],
                height: yb[1],
                italic: yb[2],
                skew: yb[3]
            };
        if (11034 === a)
            return {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.8,
                italic: 0,
                skew: 0
            };
        const zb = String.fromCodePoint(a);
        if (zb in wb)
            a = wb[zb].codePointAt(0);
        else if (tb.test(zb))
            return a = 77, {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.9,
                italic: 0,
                skew: 0
            };
        return {
            defaultMetrics: !0,
            depth: 0.2,
            height: 0.7,
            italic: 0,
            skew: 0
        };
    }
    class yb {
        getFontSize(a) {
            return Math.max(1, a + this.sizeDelta);
        }
        get sup() {
            return zb[[
                0,
                1,
                0,
                1,
                2,
                3,
                2,
                3
            ][this.id]];
        }
        get sub() {
            return zb[[
                0,
                0,
                0,
                0,
                2,
                2,
                2,
                2
            ][this.id]];
        }
        get fracNum() {
            return zb[[
                0,
                1,
                0,
                1,
                2,
                3,
                4,
                5
            ][this.id]];
        }
        get fracDen() {
            return zb[[
                0,
                0,
                0,
                0,
                2,
                2,
                4,
                4
            ][this.id]];
        }
        get cramp() {
            return zb[[
                0,
                0,
                2,
                2,
                4,
                4,
                6,
                6
            ][this.id]];
        }
        get isTight() {
            return this.sizeDelta < 0;
        }
        constructor(a, Cb, F) {
            this.id = a, this.sizeDelta = Cb, this.cramped = F;
            const zb = {
                '-4': 2,
                '-3': 1,
                0: 0
            } [Cb];
            this.metrics = Object.keys(ub).reduce((a, Cb) => ({
                ...a,
                [Cb]: ub[Cb][zb]
            }), {});
        }
    }
    const zb = {
        7: new yb(7, 0, !1),
        6: new yb(6, 0, !0),
        5: new yb(5, 0, !1),
        4: new yb(4, 0, !0),
        3: new yb(3, -3, !1),
        2: new yb(2, -3, !0),
        1: new yb(1, -4, !1),
        0: new yb(0, -4, !0)
    };

    function Ab(a, Cb) {
        return null === a ? 0 : function(a, Cb) {
            var Bb;
            if (!a)
                return 0;
            const Cb = {
                pt: 1,
                mm: 7227 / 2540,
                cm: 7227 / 254,
                ex: 35271 / 8192,
                px: 3 / 4,
                em: 10,
                bp: 1.00375,
                dd: 1238 / 1157,
                pc: 12,
                in: 72.27,
                mu: 10 / 18
            } [null !== (Bb = a.unit) && void 0 !== Bb ? Bb : 'pt'];
            if (Number.isFinite(Cb)) {
                const Db = 10 ** Cb;
                return Math.round(a.dimension / 10 * Cb * Db) / Db;
            }
            return a.dimension * Cb;
        }(a, Cb) / 10;
    }

    function Bb(a) {
        var Cb;
        return `${ a.dimension }${ null !== (Cb = a.unit) && void 0 !== Cb ? Cb : 'pt' }`;
    }
    zb.displaystyle = zb[7], zb.textstyle = zb[5], zb.scriptstyle = zb[3], zb.scriptscriptstyle = zb[1];
    class Cb {
        get mathstyle() {
            let Db = this._mathstyle,
                Eb = this.parent;
            for (; !Db;)
                Db = Eb._mathstyle, Eb = Eb.parent;
            return Db;
        }
        getRegister(a) {
            var Db;
            return (null === (Db = this.registers) || void 0 === Db ? void 0 : Db[a]) ? this.registers[a] : this.parent ? this.parent.getRegister(a) : void 0;
        }
        getRegisterAsGlue(a) {
            var Db;
            if (null === (Db = this.registers) || void 0 === Db ? void 0 : Db[a]) {
                const Eb = this.registers[a];
                return 'object' == typeof Eb && 'glue' in Eb ? Eb : 'object' == typeof Eb && 'dimension' in Eb ? {
                    glue: {
                        dimension: Eb.dimension
                    }
                } : 'number' == typeof Eb ? {
                    glue: {
                        dimension: Eb
                    }
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsGlue(a);
        }
        getRegisterAsEm(a) {
            return Ab(this.getRegisterAsDimension(a));
        }
        getRegisterAsDimension(a) {
            var Db;
            if (null === (Db = this.registers) || void 0 === Db ? void 0 : Db[a]) {
                const Eb = this.registers[a];
                return 'object' == typeof Eb && 'glue' in Eb ? Eb.glue : 'object' == typeof Eb && 'dimension' in Eb ? Eb : 'number' == typeof Eb ? {
                    dimension: Eb
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsDimension(a);
        }
        setRegister(a, Fb) {
            void 0 !== Fb ? this.registers[a] = Fb : delete this.registers[a];
        }
        setGlobalRegister(a, Fb) {
            let Db = this;
            for (; Db.parent;)
                Db.setRegister(a, void 0), Db = Db.parent;
            Db.setRegister(a, Fb);
        }
        get size() {
            let Eb = this._size,
                Fb = this.parent;
            for (; !Eb;)
                Eb = Fb._size, Fb = Fb.parent;
            return Eb;
        }
        makeID() {
            if (!this.atomIdsSettings)
                return;
            if (this.atomIdsSettings.overrideID)
                return this.atomIdsSettings.overrideID;
            if ('number' != typeof this.atomIdsSettings.seed)
                return Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
            const Gb = this.atomIdsSettings.seed.toString(36);
            return this.atomIdsSettings.seed += 1, Gb;
        }
        scale(a) {
            return a * this.effectiveFontSize;
        }
        get scalingFactor() {
            return this.parent ? this.effectiveFontSize / this.parent.effectiveFontSize : 1;
        }
        get isDisplayStyle() {
            return 7 === this.mathstyle.id || 6 === this.mathstyle.id;
        }
        get isCramped() {
            return this.mathstyle.cramped;
        }
        get isTight() {
            return this.mathstyle.isTight;
        }
        get effectiveFontSize() {
            return vb[Math.max(1, this.size + this.mathstyle.sizeDelta)];
        }
        get computedColor() {
            let Db = this.color,
                Eb = this.parent;
            return !Db && Eb && (Db = Eb.color, Eb = Eb.parent), null != Db ? Db : '';
        }
        get computedBackgroundColor() {
            let Fb = this.backgroundColor,
                Gb = this.parent;
            return !Fb && Gb && (Fb = Gb.backgroundColor, Gb = Gb.parent), null != Fb ? Fb : '';
        }
        get metrics() {
            return this.mathstyle.metrics;
        }
        constructor(a, Nb, F) {
            var Db, Eb, Fb, Gb, Hb, Ib;
            a instanceof Cb && (this.parent = a), a instanceof Cb || (this.registers = null !== (Db = a.registers) && void 0 !== Db ? Db : {}), this.isPhantom = null !== (Gb = null !== (Eb = null == Nb ? void 0 : Nb.isPhantom) && void 0 !== Eb ? Eb : null === (Fb = this.parent) || void 0 === Fb ? void 0 : Fb.isPhantom) && void 0 !== Gb && Gb;
            const Jb = {
                ...a
            };
            let Kb;
            if (Nb && (Nb.letterShapeStyle && 'auto' !== Nb.letterShapeStyle && (Jb.letterShapeStyle = Nb.letterShapeStyle), Nb.color && 'none' !== Nb.color && (Jb.color = Nb.color), Nb.backgroundColor && 'none' !== Nb.backgroundColor && (Jb.backgroundColor = Nb.backgroundColor), Nb.fontSize && 'auto' !== Nb.fontSize && Nb.fontSize !== (null === (Hb = this.parent) || void 0 === Hb ? void 0 : Hb._size) && (this._size = Nb.fontSize)), this.letterShapeStyle = null !== (Ib = Jb.letterShapeStyle) && void 0 !== Ib ? Ib : 'tex', this.color = Jb.color, this.backgroundColor = Jb.backgroundColor, 'string' == typeof F) {
                if (a instanceof Cb)
                    switch (F) {
                        case 'cramp':
                            Kb = a.mathstyle.cramp;
                            break;
                        case 'superscript':
                            Kb = a.mathstyle.sup;
                            break;
                        case 'subscript':
                            Kb = a.mathstyle.sub;
                            break;
                        case 'numerator':
                            Kb = a.mathstyle.fracNum;
                            break;
                        case 'denominator':
                            Kb = a.mathstyle.fracDen;
                    }
                switch (F) {
                    case 'textstyle':
                        Kb = zb.textstyle;
                        break;
                    case 'displaystyle':
                        Kb = zb.displaystyle;
                        break;
                    case 'scriptstyle':
                        Kb = zb.scriptstyle;
                        break;
                    case 'scriptscriptstyle':
                        Kb = zb.scriptscriptstyle;
                }
            }
            this._mathstyle = Kb, this.atomIdsSettings = a.atomIdsSettings, this.renderPlaceholder = Jb.renderPlaceholder;
        }
    }
    const Db = {
            overrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            overleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            underrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            underleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            xrightarrow: [
                ['rightarrow'],
                1.469,
                522,
                'xMaxYMin'
            ],
            xleftarrow: [
                ['leftarrow'],
                1.469,
                522,
                'xMinYMin'
            ],
            Overrightarrow: [
                ['doublerightarrow'],
                0.888,
                560,
                'xMaxYMin'
            ],
            xRightarrow: [
                ['doublerightarrow'],
                1.526,
                560,
                'xMaxYMin'
            ],
            xLeftarrow: [
                ['doubleleftarrow'],
                1.526,
                560,
                'xMinYMin'
            ],
            overleftharpoon: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoonup: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoondown: [
                ['leftharpoondown'],
                0.888,
                522,
                'xMinYMin'
            ],
            overrightharpoon: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoonup: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoondown: [
                ['rightharpoondown'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xlongequal: [
                ['longequal'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadleftarrow: [
                ['twoheadleftarrow'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadrightarrow: [
                ['twoheadrightarrow'],
                0.888,
                334,
                'xMaxYMin'
            ],
            overleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            overbrace: [
                [
                    'leftbrace',
                    'midbrace',
                    'rightbrace'
                ],
                1.6,
                548
            ],
            underbrace: [
                [
                    'leftbraceunder',
                    'midbraceunder',
                    'rightbraceunder'
                ],
                1.6,
                548
            ],
            underleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            xleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                1.75,
                522
            ],
            xLeftrightarrow: [
                [
                    'doubleleftarrow',
                    'doublerightarrow'
                ],
                1.75,
                560
            ],
            xrightleftharpoons: [
                [
                    'leftharpoondownplus',
                    'rightharpoonplus'
                ],
                1.75,
                716
            ],
            xleftrightharpoons: [
                [
                    'leftharpoonplus',
                    'rightharpoondownplus'
                ],
                1.75,
                716
            ],
            xhookleftarrow: [
                [
                    'leftarrow',
                    'righthook'
                ],
                1.08,
                522
            ],
            xhookrightarrow: [
                [
                    'lefthook',
                    'rightarrow'
                ],
                1.08,
                522
            ],
            overlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            underlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            overgroup: [
                [
                    'leftgroup',
                    'rightgroup'
                ],
                0.888,
                342
            ],
            undergroup: [
                [
                    'leftgroupunder',
                    'rightgroupunder'
                ],
                0.888,
                342
            ],
            xmapsto: [
                [
                    'leftmapsto',
                    'rightarrow'
                ],
                1.5,
                522
            ],
            xtofrom: [
                [
                    'leftToFrom',
                    'rightToFrom'
                ],
                1.75,
                528
            ],
            xrightleftarrows: [
                [
                    'baraboveleftarrow',
                    'rightarrowabovebar'
                ],
                1.75,
                901
            ],
            xrightequilibrium: [
                [
                    'baraboveshortleftharpoon',
                    'rightharpoonaboveshortbar'
                ],
                1.75,
                716
            ],
            xleftequilibrium: [
                [
                    'shortbaraboveleftharpoon',
                    'shortrightharpoonabovebar'
                ],
                1.75,
                716
            ]
        },
        Eb = {
            widehat1: [
                1062,
                239,
                0.24
            ],
            widehat2: [
                2364,
                300,
                0.3
            ],
            widehat3: [
                2364,
                360,
                0.36
            ],
            widehat4: [
                2364,
                420,
                0.42
            ],
            widecheck1: [
                1062,
                239,
                0.24
            ],
            widecheck2: [
                2364,
                300,
                0.3
            ],
            widecheck3: [
                2364,
                360,
                0.36
            ],
            widecheck4: [
                2364,
                420,
                0.42
            ],
            widetilde1: [
                600,
                260,
                0.26
            ],
            widetilde2: [
                1033,
                286,
                0.286
            ],
            widetilde3: [
                2339,
                306,
                0.306
            ],
            widetilde4: [
                2340,
                312,
                0.34
            ],
            overarc: [
                1061,
                159,
                0.3
            ],
            underarc: [
                1061,
                159,
                0.3
            ]
        },
        Fb = {
            doubleleftarrow: 'M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z',
            doublerightarrow: 'M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z',
            leftarrow: 'M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z',
            leftbrace: 'M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z',
            leftbraceunder: 'M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z',
            overarc: 'M529 0c179 0 524 115 524 115 5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2s-338-93-512-92c-174 0-513 92-513 92h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13 0 0 342-115 520-115z',
            underarc: 'm 529 160\n  c -179 0 -524 -115 -524 -115\n  c -5 -1 -9 -5 -9 -10\n  c 0 -1 1 -2 1 -3\n  l 4 -22\n  c 1 -5 5 -9 11 -9\n  h 2\n  s 338 93 512 92\n  c 174 0 513 -92 513 -92\n  h 2\n  c 5 0 9 4 11 9\n  l 5 22\n  c 1 6 -2 12 -8 13\n  c 0 0 -342 115 -520 115\n  z\n  ',
            leftgroup: 'M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z',
            leftgroupunder: 'M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z',
            leftharpoon: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z',
            leftharpoonplus: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z',
            leftharpoondown: 'M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z',
            leftharpoondownplus: 'M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z',
            lefthook: 'M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z',
            leftlinesegment: 'M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z',
            leftmapsto: 'M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z',
            leftToFrom: 'M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z',
            longequal: 'M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z',
            midbrace: 'M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z',
            midbraceunder: 'M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z',
            oiintSize1: 'M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z',
            oiintSize2: 'M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z',
            oiiintSize1: 'M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z',
            oiiintSize2: 'M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z',
            rightarrow: 'M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z',
            rightbrace: 'M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z',
            rightbraceunder: 'M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z',
            rightgroup: 'M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z',
            rightgroupunder: 'M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z',
            rightharpoon: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z',
            rightharpoonplus: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z',
            rightharpoondown: 'M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z',
            rightharpoondownplus: 'M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z',
            righthook: 'M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z',
            rightlinesegment: 'M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z',
            rightToFrom: 'M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z',
            twoheadleftarrow: 'M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z',
            twoheadrightarrow: 'M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z',
            widetilde1: 'M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z',
            widetilde2: 'M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z',
            widetilde3: 'M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z',
            widetilde4: 'M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z',
            vec: 'M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z',
            widehat1: 'M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z',
            widehat2: 'M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat3: 'M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat4: 'M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widecheck1: 'M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z',
            widecheck2: 'M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck3: 'M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck4: 'M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            baraboveleftarrow: 'M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z',
            rightarrowabovebar: 'M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z',
            baraboveshortleftharpoon: 'M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z',
            rightharpoonaboveshortbar: 'M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z',
            shortbaraboveleftharpoon: 'M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z',
            shortrightharpoonabovebar: 'M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z'
        };
    class Gb {
        static createAtom(a, Nb, F, P) {
            return Gb._registry[a].createAtom(Nb, F, P);
        }
        static serialize(a, Nb) {
            return Gb._registry[a[0].mode].serialize(a, Nb);
        }
        static applyStyle(a, Nb, F) {
            return Gb._registry[a].applyStyle(Nb, F);
        }
        constructor(a) {
            Gb._registry[a] = this;
        }
    }

    function Hb(a, Nb) {
        const Ib = [];
        let Jb, Kb = [];
        for (const Lb of a)
            if ('first' !== Lb.type && Lb.style) {
                let Mb;
                'variant' === Nb ? (Mb = Lb.style.variant, Lb.style.variantStyle && 'up' !== Lb.style.variantStyle && (Mb += '-' + Lb.style.variantStyle)) : 'cssClass' === Nb ? 'group' === Lb.type && (Mb = Lb.customClass) : Mb = Lb.style[Nb], Mb === Jb ? Kb.push(Lb) : (Kb.length > 0 && Ib.push(Kb), Kb = [Lb], Jb = Mb);
            }
        return Kb.length > 0 && Ib.push(Kb), Ib;
    }
    Gb._registry = {};
    const Ib = [
            '',
            'chem',
            'mord',
            'mbin',
            'mop',
            'mrel',
            'mopen',
            'mclose',
            'mpunct',
            'minner',
            'spacing',
            'first',
            'latex',
            'composition',
            'error',
            'placeholder',
            'supsub',
            'none',
            'mathfield'
        ],
        Jb = {
            mord: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mop: {
                mord: 3,
                mop: 3,
                rel: 5,
                minner: 3
            },
            mbin: {
                mord: 4,
                mop: 4,
                mopen: 4,
                minner: 4
            },
            mrel: {
                mord: 5,
                mop: 5,
                mopen: 5,
                minner: 5
            },
            mclose: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mpunct: {
                mord: 3,
                mop: 3,
                mrel: 3,
                mopen: 3,
                mpunct: 3,
                minner: 3
            },
            minner: {
                mord: 3,
                mop: 3,
                mbin: 4,
                mrel: 5,
                mopen: 3,
                mpunct: 3,
                minner: 3
            }
        },
        Kb = {
            mord: {
                mop: 3
            },
            mop: {
                mord: 3,
                mop: 3
            },
            mclose: {
                mop: 3
            },
            minner: {
                mop: 3
            }
        };

    function Lb(a, Nb) {
        if ('string' == typeof a)
            return a;
        if ('number' == typeof a) {
            const Mb = Math.ceil(100 * a) / 100;
            return 0 === Mb ? '0' : Mb.toString() + (null != Nb ? Nb : '');
        }
        return '';
    }
    class Mb {
        set atomID(a) {
            void 0 !== a && 0 !== a.length && (this.attributes || (this.attributes = {}), this.attributes['data-atom-id'] = a);
        }
        selected(a) {
            if (this.isSelected !== a && (this.isSelected = a, this.children))
                for (const Nb of this.children)
                    Nb.selected(a);
        }
        setStyle(a, Nb, F) {
            if (void 0 === Nb)
                return;
            const Nb = Lb(Nb, F);
            Nb.length > 0 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties[a] = Nb);
        }
        setTop(a) {
            Number.isFinite(a) && Math.abs(a) > 0.01 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties.top = Lb(a, 'em'), this.height -= a, this.depth += a);
        }
        get left() {
            var Nb;
            return (null === (Nb = this.cssProperties) || void 0 === Nb ? void 0 : Nb['margin-left']) ? Number.parseFloat(this.cssProperties['margin-left']) : 0;
        }
        set left(a) {
            Number.isFinite(a) && (0 === a ? this.cssProperties && delete this.cssProperties['margin-left'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-left'] = Lb(a, 'em')));
        }
        set right(a) {
            Number.isFinite(a) && (0 === a ? this.cssProperties && delete this.cssProperties['margin-right'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-right'] = Lb(a, 'em')));
        }
        set width(a) {
            Number.isFinite(a) && (0 === a ? this.cssProperties && delete this.cssProperties.width : (this.cssProperties || (this.cssProperties = {}), this.cssProperties.width = Lb(a, 'em')));
        }
        wrap(a, Nb) {
            const Nb = a.parent;
            if (!Nb)
                return this;
            a.isPhantom && this.setStyle('opacity', 0);
            let Ob = a.computedColor;
            Ob === Nb.computedColor && (Ob = ''), this.setStyle('color', Ob);
            const Pb = a.effectiveFontSize === Nb.effectiveFontSize ? void 0 : a.effectiveFontSize;
            let Qb, Rb = a.computedBackgroundColor;
            if (this.isSelected && (Rb = u(Rb)), Rb === Nb.computedBackgroundColor && (Rb = ''), !(Pb || Rb || Nb && (Nb.classes || Nb.type)))
                return this;
            Rb ? (Qb = Tb(this, Nb), Qb.selected(this.isSelected), Qb.setStyle('background-color', Rb), Qb.setStyle('display', 'inline-block')) : Qb = new Mb(this, Nb);
            const Sb = a.scalingFactor;
            return 1 !== Sb && (Qb.setStyle('font-size', 100 * Sb, '%'), Qb.height *= Sb, Qb.depth *= Sb, Qb.italic *= Sb, Qb.skew *= Sb), Qb;
        }
        wrapSelect(a) {
            if (!this.isSelected)
                return this;
            if (!a.parent)
                return this;
            const Nb = u(a.computedBackgroundColor),
                Ob = Tb(this);
            return Ob.selected(!0), Ob.setStyle('background-color', Nb), Ob.setStyle('display', 'inline-block'), Ob;
        }
        toMarkup() {
            var Pb, Qb, Rb;
            let Sb = null !== (Pb = this.value) && void 0 !== Pb ? Pb : '';
            if (this.children)
                for (const Tb of this.children)
                    Sb += Tb.toMarkup();
            const Tb = this.classes.split(' ');
            Tb.push(null !== (Qb = {
                latex: 'ML__latex',
                placeholder: 'ML__placeholder',
                error: 'ML__error'
            } [this.type]) && void 0 !== Qb ? Qb : ''), 'latex' === this.caret && Tb.push('ML__latex-caret');
            const Ub = 1 === Tb.length ? Tb[0] : Tb.filter((Pb, Qb, Rb) => Pb.length > 0 && Rb.indexOf(Pb) === Qb).join(' ');
            let Vb = '';
            if (Sb.length > 0 && '\u200B' !== Sb || Ub.length > 0 || this.cssId || this.htmlData || this.htmlStyle || this.attributes || this.cssProperties || this.svgBody || this.svgOverlay) {
                let Wb = '';
                if (this.cssId && (Wb += ` id=${ this.cssId.replace(/ /g, '-') } `), this.htmlData) {
                    const Xb = this.htmlData.split(',');
                    for (const Yb of Xb) {
                        const Zb = Yb.match(/([^=]+)=(.+$)/);
                        if (Zb) {
                            const $b = Zb[1].trim().replace(/ /g, '-');
                            $b && (Wb += ` data-${ $b }=${ Zb[2] } `);
                        } else {
                            const _b = $b.trim().replace(/ /g, '-');
                            _b && (Wb += ` data-${ _b } `);
                        }
                    }
                }
                if (this.htmlStyle) {
                    const Zb = this.htmlStyle.split(';');
                    let $b = '';
                    for (const _b of Zb) {
                        const ac = _b.match(/([^=]+):(.+$)/);
                        if (ac) {
                            const bc = ac[1].trim().replace(/ /g, '-');
                            bc && ($b += `${ bc }:${ ac[2] };`);
                        }
                    }
                    $b && (_b += ` style="${ $b }"`);
                }
                if (this.attributes && (Wb += ' ' + Object.keys(this.attributes).map(Wb => `${ Wb }="${ this.attributes[Wb] }"`).join(' ')), Ub.length > 0 && (Wb += ` class="${ Ub }"`), this.cssProperties) {
                    const Xb = Object.keys(this.cssProperties).map(Wb => `${ Wb }:${ this.cssProperties[Wb] }`).join(';');
                    Xb.length > 0 && (Wb += ` style="${ Xb }"`);
                }
                let Xb = '';
                this.svgBody ? Xb = function(Wb) {
                    if (Eb[Wb]) {
                        const [Yb, Zb, $b] = Eb[Wb];
                        return `<span style="display:inline-block;height:${ $b / 2 }em;min-width:0"><span class="stretchy" style="height:${ $b }em"><svg width="100%" height="${ $b }em" viewBox="0 0 ${ Yb } ${ Zb }" preserveAspectRatio="none" ><path fill="currentcolor" d="${ Fb[Wb] }"></path></svg></span></span>`;
                    }
                    const [Yb, Zb, $b, _b] = Db[Wb];
                    let ac, bc;
                    const cc = $b / 1000;
                    3 === Yb.length ? (ac = [
                        'slice-1-of-3',
                        'slice-2-of-3',
                        'slice-3-of-3'
                    ], bc = [
                        'xMinYMin',
                        'xMidYMin',
                        'xMaxYMin'
                    ]) : 2 === Yb.length ? (ac = [
                        'slice-1-of-2',
                        'slice-2-of-2'
                    ], bc = [
                        'xMinYMin',
                        'xMaxYMin'
                    ]) : (ac = ['slice-1-of-1'], bc = [_b]);
                    const dc = Yb.map((Wb, Yb) => `<span class="${ ac[Yb] }" style=height:${ cc }em><svg width=400em height=${ cc }em viewBox="0 0 400000 ${ $b }" preserveAspectRatio="${ bc[Yb] } slice"><path fill="currentcolor" d="${ Fb[Wb] }"></path></svg></span>`).join('');
                    return `<span style="display:inline-block;height:${ cc }em;min-width:${ Zb }em;">${ dc }</span>`;
                }(this.svgBody) : this.svgOverlay && (Xb = '<span style="', Xb += 'display: inline-block;', Xb += `height:${ this.height + this.depth }em;`, Xb += `vertical-align:${ this.depth }em;`, Xb += '">', Xb += Sb, Xb += '</span>', Xb += '<svg style="position:absolute;overflow:overlay;', Xb += `height:${ this.height + this.depth }em;`, (null === (Rb = this.cssProperties) || void 0 === Rb ? void 0 : Rb.padding) ? (Xb += `top:${ this.cssProperties.padding }em;`, Xb += `left:${ this.cssProperties.padding }em;`, Xb += `width:calc(100% - 2 * ${ this.cssProperties.padding }em );`) : Xb += 'top:0;left:0;width:100%;', Xb += 'z-index:2;', Xb += '"', this.svgStyle && (Xb += ` style="${ this.svgStyle }"`), Xb += `>${ this.svgOverlay }</svg>`), Vb = `<span${ Wb }>${ Sb }${ Xb }</span>`;
            }
            return 'text' === this.caret ? Vb += '<span class="ML__text-caret"></span>' : 'math' === this.caret && (Vb += '<span class="ML__caret"></span>'), Vb;
        }
        tryCoalesceWith(a) {
            if (this.type !== a.type)
                return !1;
            if (!/ML__text/.test(this.classes) && ![
                    'mord',
                    'mbin',
                    'mrel'
                ].includes(this.type))
                return !1;
            if (this.svgBody || !this.value)
                return !1;
            if (a.svgBody || !a.value)
                return !1;
            const Nb = this.children && this.children.length > 0,
                Ob = a.children && a.children.length > 0;
            if (Nb || Ob)
                return !1;
            const Pb = this.cssProperties ? Object.keys(this.cssProperties).length : 0;
            if (Pb !== (a.cssProperties ? Object.keys(a.cssProperties).length : 0))
                return !1;
            if (Pb > 0)
                for (const Qb of Object.keys(this.cssProperties))
                    if (this.cssProperties[Qb] !== a.cssProperties[Qb])
                        return !1;
            const Qb = this.classes.trim().replace(/\s+/g, ' ').split(' '),
                Rb = a.classes.trim().replace(/\s+/g, ' ').split(' ');
            if (Qb.length !== Rb.length)
                return !1;
            Qb.sort(), Rb.sort();
            for (const [Sb, Tb] of Qb.entries()) {
                if ('vertical-separator' === Tb)
                    return !1;
                if (Tb !== Rb[Sb])
                    return !1;
            }
            return this.value += Sb.value, this.height = Math.max(this.height, Sb.height), this.depth = Math.max(this.depth, Sb.depth), this.maxFontSize = Math.max(this.maxFontSize, Sb.maxFontSize), this.italic = Sb.italic, !0;
        }
        constructor(a, Ub) {
            var Nb, Ob, Pb, Qb, Rb, Sb;
            if ('number' == typeof a ? this.value = String.fromCodePoint(a) : 'string' == typeof a ? this.value = a : P(a) ? this.children = a.filter(a => null !== a) : a && a instanceof Mb && (this.children = [a]), this.type = null !== (Nb = null == Ub ? void 0 : Ub.type) && void 0 !== Nb ? Nb : '', this.isSelected = !1, this.isTight = null !== (Ob = null == Ub ? void 0 : Ub.isTight) && void 0 !== Ob && Ob, this.newList = null !== (Pb = null == Ub ? void 0 : Ub.newList) && void 0 !== Pb && Pb, null == Ub ? void 0 : Ub.properties)
                for (const Tb of Object.keys(Ub.properties))
                    this.setStyle(Tb, Ub.properties[Tb]);
            (null == Ub ? void 0 : Ub.attributes) && (this.attributes = Ub.attributes), this.classes = null !== (Qb = null == Ub ? void 0 : Ub.classes) && void 0 !== Qb ? Qb : '';
            let Tb = (null == Ub ? void 0 : Ub.fontFamily) || 'Main-Regular';
            if ((null == Ub ? void 0 : Ub.style) && this.value && (Tb = Gb.applyStyle(null !== (Rb = Ub.mode) && void 0 !== Rb ? Rb : 'math', this, Ub.style) || 'Main-Regular'), this.height = 0, this.depth = 0, this.skew = 0, this.italic = 0, this.maxFontSize = 0, 'latex' === this.type)
                this.height = 0.8, this.depth = 0.2;
            else if ('number' == typeof a) {
                const Ub = xb(a, Tb);
                this.height = Ub.height, this.depth = Ub.depth, this.skew = Ub.skew, this.italic = Ub.italic;
            } else if (this.value) {
                this.height = -1 / 0, this.depth = -1 / 0, this.skew = -1 / 0, this.italic = -1 / 0;
                for (let Vb = 0; Vb < this.value.length; Vb++) {
                    const Wb = xb(this.value.codePointAt(Vb), Tb || 'Main-Regular');
                    this.height = Math.max(this.height, Wb.height), this.depth = Math.max(this.depth, Wb.depth), this.skew = Wb.skew, this.italic = Wb.italic;
                }
            } else if (this.children && this.children.length > 0)
                if (1 === this.children.length) {
                    const Xb = this.children[0];
                    this.height = Xb.height, this.depth = Xb.depth, this.maxFontSize = Xb.maxFontSize, this.skew = Xb.skew, this.italic = Xb.italic;
                } else {
                    let Yb = -1 / 0,
                        Zb = -1 / 0,
                        $b = 0;
                    for (const _b of this.children)
                        _b.height > Yb && (Yb = _b.height), _b.depth > Zb && (Zb = _b.depth), $b = Math.max($b, null !== (Sb = _b.maxFontSize) && void 0 !== Sb ? Sb : 0);
                    this.height = Yb, this.depth = Zb, this.maxFontSize = $b;
                }
            void 0 !== (null == Ob ? void 0 : Ob.height) && (this.height = Ob.height), void 0 !== (null == Ob ? void 0 : Ob.depth) && (this.depth = Ob.depth), void 0 !== (null == Ob ? void 0 : Ob.maxFontSize) && (this.maxFontSize = Ob.maxFontSize);
        }
    }

    function Nb(a) {
        if (!a || 0 === a.length)
            return [];
        a[0].children = Nb(a[0].children);
        const Ob = [a[0]];
        for (let Pb = 1; Pb < a.length; Pb++)
            Ob[Ob.length - 1].tryCoalesceWith(a[Pb]) || (a[Pb].children = Nb(a[Pb].children), Ob.push(a[Pb]));
        return Ob;
    }

    function Ob(a) {
        return a.children && (a.children = Nb(a.children)), a;
    }

    function Pb(a, Sb, F) {
        Sb.newList && (a = null);
        const Qb = Sb.type;
        if ('first' === Qb)
            return null;
        if ('spacing' === Qb)
            return a;
        if (F(a, Sb), Sb.children) {
            let Rb = null;
            void 0 !== Qb && 0 !== Qb.length || (Rb = a);
            for (const Sb of Sb.children)
                Rb = Pb(Rb, Sb, F);
            void 0 !== Qb && 0 !== Qb.length || (Sb = Rb);
        }
        return 'supsub' !== Qb && void 0 !== Qb && Qb.length > 0 && (a = Sb), a;
    }

    function Qb(a, Sb) {
        a && Pb(null, a, Sb);
    }

    function Rb(a, Sb = 1) {
        return function(a) {
                Qb(a, (a, Sb) => {
                    'mbin' !== Sb.type || a && !/first|none|mbin|mop|mrel|mopen|mpunct/.test(a.type) || (Sb.type = 'mord'), a && 'mbin' === a.type && /mrel|mclose|mpunct|placeholder/.test(Sb.type) && (a.type = 'mord');
                });
            }(a),
            function(a, Sb) {
                Qb(a, (a, F) => {
                    var Tb, Ub, Vb, Wb;
                    const Xb = null !== (Tb = null == a ? void 0 : a.type) && void 0 !== Tb ? Tb : 'none',
                        Yb = F.isTight ? null !== (Ub = Kb[Xb]) && void 0 !== Ub ? Ub : null : null !== (Vb = Jb[Xb]) && void 0 !== Vb ? Vb : null,
                        Zb = Yb && null !== (Wb = Yb[F.type]) && void 0 !== Wb ? Wb : 0;
                    Zb && (F.left += Sb * (Zb / 18));
                });
            }(a, Sb), a;
    }

    function Tb(a, Sb) {
        if (!a)
            return new Mb(null, Sb);
        const Ub = new Mb(null, {
            classes: 'ML__strut'
        });
        Ub.setStyle('height', Math.max(0, a.height), 'em');
        const Vb = [Ub];
        if (0 !== a.depth) {
            const Wb = new Mb(null, {
                classes: 'ML__strut--bottom'
            });
            Wb.setStyle('height', a.height + a.depth, 'em'), Wb.setStyle('vertical-align', -a.depth, 'em'), Vb.push(Wb);
        }
        return Vb.push(a), new Mb(Vb, Sb);
    }

    function Ub(a) {
        const Vb = function(a) {
                return Db[a] ? Db[a][2] / 1000 : Eb[a][2];
            }(a) / 2,
            Wb = new Mb(null, {
                height: Vb + 0.166,
                depth: Vb - 0.166,
                maxFontSize: 0
            });
        return Wb.svgBody = a, Wb;
    }
    class Vb extends Mb {
        constructor(a, Sb) {
            var Wb;
            const [Xb, Yb, Zb] = function(a) {
                var $b;
                const [_b, ac] = function(a) {
                    if ('individualShift' in a) {
                        const bc = a.individualShift;
                        let cc = bc[0];
                        const dc = [cc],
                            ec = -cc.shift - cc.box.depth;
                        let fc = gc;
                        for (let hc = 1; hc < bc.length; hc++) {
                            const ic = bc[hc],
                                jc = -ic.shift - fc - ic.box.depth,
                                kc = jc - (cc.box.height + cc.box.depth);
                            fc += jc, dc.push(kc), dc.push(ic), cc = ic;
                        }
                        return [
                            dc,
                            gc
                        ];
                    }
                    if ('top' in a) {
                        let bc = a.top;
                        for (const cc of a.children)
                            bc -= 'number' == typeof cc ? cc : cc.box.height + cc.box.depth;
                        return [
                            a.children,
                            bc
                        ];
                    }
                    if ('bottom' in a)
                        return [
                            a.children,
                            -a.bottom
                        ];
                    if ('firstBaseline' in a) {
                        const bc = a.firstBaseline[0];
                        if ('number' == typeof bc)
                            throw new Error('First child must be an element.');
                        return [
                            a.firstBaseline,
                            -bc.box.depth
                        ];
                    }
                    if ('shift' in a) {
                        const bc = a.children[0];
                        if ('number' == typeof bc)
                            throw new Error('First child must be an element.');
                        return [
                            a.children,
                            -bc.box.depth - a.shift
                        ];
                    }
                    return [
                        null,
                        0
                    ];
                }(a);
                if (!_b)
                    return [
                        [],
                        0,
                        0
                    ];
                let bc = 0;
                for (const cc of _b)
                    if ('number' != typeof cc) {
                        const dc = cc.box;
                        bc = Math.max(bc, dc.maxFontSize, dc.height);
                    }
                bc += 2;
                const dc = new Mb(null, {
                    classes: 'pstrut'
                });
                dc.setStyle('height', bc, 'em');
                const ec = [];
                let fc = gc,
                    hc = ic,
                    jc = kc;
                for (const lc of _b) {
                    if ('number' == typeof lc)
                        jc += lc;
                    else {
                        const mc = lc.box,
                            nc = null !== ($b = lc.classes) && void 0 !== $b ? $b : [],
                            oc = new Mb([
                                dc,
                                mc
                            ], {
                                classes: nc.join(' '),
                                style: lc.style
                            });
                        oc.setStyle('top', -bc - jc - mc.depth, 'em'), lc.marginLeft && oc.setStyle('margin-left', lc.marginLeft, 'em'), lc.marginRight && oc.setStyle('margin-right', lc.marginRight, 'em'), ec.push(oc), jc += mc.height + mc.depth;
                    }
                    fc = Math.min(fc, jc), hc = Math.max(hc, jc);
                }
                const mc = new Mb(ec, {
                    classes: 'vlist'
                });
                if (mc.setStyle('height', hc, 'em'), fc >= 0)
                    return [
                        [new Mb(mc, {
                            classes: 'vlist-r'
                        })],
                        hc,
                        -fc
                    ];
                const nc = new Mb(new Mb(null), {
                    classes: 'vlist'
                });
                nc.setStyle('height', -fc, 'em');
                const oc = new Mb(8203, {
                    classes: 'vlist-s',
                    maxFontSize: 0,
                    height: 0,
                    depth: 0
                });
                return [
                    [
                        new Mb([
                            mc,
                            oc
                        ], {
                            classes: 'vlist-r'
                        }),
                        new Mb(nc, {
                            classes: 'vlist-r'
                        })
                    ],
                    hc,
                    -fc
                ];
            }(a);
            super(1 === Xb.length ? Xb[0] : Xb, {
                classes: (null !== (Wb = null == Sb ? void 0 : Sb.classes) && void 0 !== Wb ? Wb : '') + ' vlist-t' + (2 === Xb.length ? ' vlist-t2' : ''),
                height: Yb,
                depth: Zb,
                type: null == Sb ? void 0 : Sb.type
            });
        }
    }
    const Wb = [
        [
            8205,
            1
        ],
        [
            65038,
            2
        ],
        [
            127995,
            5
        ],
        [
            129456,
            4
        ],
        [
            917536,
            96
        ]
    ];
    let Xb;
    const Yb = [
        127462,
        127487
    ];

    function Zb(a) {
        var $b;
        if (void 0 === Xb) {
            Xb = {};
            for (const _b of Wb)
                for (let ac = _b[0]; ac <= _b[0] + _b[1] - 1; ac++)
                    Xb[ac] = !0;
        }
        return null !== ($b = Xb[a]) && void 0 !== $b && $b;
    }

    function $b(a) {
        return a >= Yb[0] && a <= Yb[1];
    }

    function _b(a) {
        if (/^[\u0020-\u00FF]*$/.test(a))
            return a;
        const ac = [],
            bc = function(a) {
                const cc = [];
                for (let dc = 0; dc < a.length; dc++) {
                    let ec = a.charCodeAt(dc);
                    if (13 === ec && 10 === a.charCodeAt(dc + 1) && (ec = 10, dc++), 13 !== ec && 12 !== ec || (ec = 10), 0 === ec && (ec = 65533), ec >= 55296 && ec <= 56319) {
                        const fc = a.charCodeAt(dc + 1);
                        fc >= 56320 && fc <= 57343 && (ec = 65536 + 1024 * (ec - 55296) + (fc - 56320), dc++);
                    }
                    cc.push(ec);
                }
                return cc;
            }(a);
        let cc = 0;
        for (; cc < bc.length;) {
            const dc = bc[cc++],
                ec = bc[cc];
            if (8205 === ec) {
                const fc = cc - 1;
                for (cc += 2; 8205 === bc[cc];)
                    cc += 2;
                ac.push(String.fromCodePoint(...bc.slice(fc, cc - fc + 1)));
            } else if (Zb(ec)) {
                const gc = cc - 1;
                for (; Zb(bc[cc]);)
                    cc += 8205 === bc[cc] ? 2 : 1;
                ac.push(String.fromCodePoint(...bc.slice(gc, 2 * cc - gc - 1)));
            } else
                $b(fc) ? (cc += 1, ac.push(String.fromCodePoint(...bc.slice(cc - 2, 2)))) : ac.push(String.fromCodePoint(fc));
        }
        return ac;
    }
    class ac {
        end() {
            return this.pos >= this.s.length;
        }
        get() {
            return this.pos < this.s.length ? this.s[this.pos++] : '';
        }
        peek() {
            return this.s[this.pos];
        }
        match(a) {
            const bc = 'string' == typeof this.s ? a.exec(this.s.slice(this.pos)) : a.exec(this.s.slice(this.pos).join(''));
            return (null == bc ? void 0 : bc[0]) ? (this.pos += bc[0].length, bc[0]) : '';
        }
        next() {
            if (this.end())
                return null;
            if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]+/))
                return '<space>';
            if (this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]/))
                return '<space>';
            const cc = this.get();
            if ('\\' === cc) {
                if (!this.end()) {
                    let dc = this.match(/^[a-zA-Z\*]+/);
                    if (dc)
                        this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]*/);
                    else if (dc = this.get(), ' ' === dc)
                        return '<space>';
                    return '\\' + dc;
                }
            } else {
                if ('{' === cc)
                    return '<{>';
                if ('}' === cc)
                    return '<}>';
                if ('^' === cc) {
                    if ('^' === this.peek()) {
                        this.get();
                        const dc = this.match(/^(\^(\^(\^(\^[\da-f])?[\da-f])?[\da-f])?[\da-f])?[\da-f]{2}/);
                        if (dc)
                            return String.fromCodePoint(Number.parseInt(dc.slice(dc.lastIndexOf('^') + 1), 16));
                    }
                    return cc;
                }
                if ('#' === cc) {
                    if (!this.end()) {
                        let dc = !1;
                        if (/[\d?@]/.test(this.peek()) && (dc = !0, this.pos + 1 < this.s.length)) {
                            const ec = this.s[this.pos + 1];
                            dc = /[^\dA-Za-z]/.test(ec);
                        }
                        return dc ? '#' + this.get() : '#';
                    }
                } else if ('$' === cc)
                    return '$' === this.peek() ? (this.get(), '<$$>') : '<$>';
            }
            return cc;
        }
        constructor(a) {
            this.s = _b(a), this.pos = 0, this.obeyspaces = !1;
        }
    }

    function bc(a, Sb) {
        var cc, dc, ec, fc;
        const gc = [];
        let hc = a.next();
        if (hc)
            if ('\\relax' === hc);
            else if ('\\noexpand' === hc)
            hc = a.next(), hc && gc.push(hc);
        else if ('\\obeyspaces' === hc)
            a.obeyspaces = !0;
        else if ('\\space' === hc || '~' === hc)
            gc.push('<space>');
        else if ('\\bgroup' === hc)
            gc.push('<{>');
        else if ('\\egroup' === hc)
            gc.push('<}>');
        else if ('\\string' === hc) {
            if (hc = a.next(), hc)
                if (hc.startsWith('\\'))
                    for (const ic of hc)
                        gc.push('\\' === ic ? '\\backslash' : ic);
                else
                    '<{>' === hc ? gc.push('\\{') : '<space>' === hc ? gc.push('~') : '<}>' === hc && gc.push('\\}');
        } else if ('\\csname' === hc) {
            for (;
                '<space>' === a.peek();)
                a.next();
            let ic = '',
                jc = !1,
                kc = [];
            do {
                if (0 === kc.length)
                    if (/^#[\d?@]$/.test(a.peek())) {
                        const lc = a.get().slice(1);
                        kc = cc(null !== (dc = null !== (cc = null == Sb ? void 0 : Sb(lc)) && void 0 !== cc ? cc : null == Sb ? void 0 : Sb('?')) && void 0 !== dc ? dc : '\\placeholder{}', Sb), hc = kc[0];
                    } else
                        hc = a.next(), kc = hc ? [hc] : [];
                jc = 0 === kc.length, jc || '\\endcsname' !== hc || (jc = !0, kc.shift()), jc || (jc = '<$>' === hc || '<$$>' === hc || '<{>' === hc || '<}>' === hc || 'string' == typeof hc && hc.length > 1 && hc.startsWith('\\')), jc || (ic += kc.shift());
            } while (!jc);
            ic && gc.push('\\' + ic), gc.push(...kc);
        } else if ('\\endcsname' === hc);
        else if (hc.length > 1 && hc.startsWith('#')) {
            const lc = hc.slice(1);
            gc.push(...cc(null !== (jc = null !== (ic = null == Sb ? void 0 : Sb(lc)) && void 0 !== ic ? ic : null == Sb ? void 0 : Sb('?')) && void 0 !== jc ? jc : '\\placeholder{}', Sb));
        } else
            gc.push(hc);
        return gc;
    }

    function cc(a, dc = null) {
        const ec = [];
        let fc = '';
        for (const gc of a.toString().split(/\r?\n/)) {
            fc && ec.push(fc), fc = ' ';
            const hc = gc.match(/((?:\\%)|[^%])*/);
            null !== hc && ec.push(hc[0]);
        }
        const hc = new ac(ec.join('')),
            ic = [];
        do {
            ic.push(...bc(hc, gc));
        } while (!hc.end());
        return ic;
    }

    function ec(a) {
        let fc = '';
        const gc = [];
        for (const hc of a)
            hc && (/[a-zA-Z\*]/.test(hc[0]) && gc.push(fc), gc.push(hc), /\\[a-zA-Z]+\*?[\"\'][^\ ]+$/.test(hc) && gc.push(' '), fc = /\\[a-zA-Z]+\*?$/.test(hc) ? ' ' : '');
        return gc.join('');
    }

    function fc(a) {
        return ec(a.map(a => {
            var gc;
            return null !== (gc = {
                '<space>': ' ',
                '<$$>': '$$',
                '<$>': '$',
                '<{>': '{',
                '<}>': '}'
            } [a]) && void 0 !== gc ? gc : a;
        }));
    }
    class gc extends Mb {
        toMarkup() {
            const hc = [],
                ic = this.classes.split(' '),
                jc = 1 === ic.length ? ic[0] : ic.filter((hc, ic, jc) => hc.length > 0 && jc.indexOf(hc) === ic).join(' ');
            if (this.cssId && hc.push(`id=${ this.cssId.replace(/ /g, '-') }`), this.htmlData) {
                const kc = this.htmlData.split(',');
                for (const lc of kc) {
                    const mc = lc.match(/([^=]+)=(.+$)/);
                    if (mc) {
                        const nc = mc[1].trim().replace(/ /g, '-');
                        nc && hc.push(`data-${ nc }=${ mc[2] }`);
                    } else {
                        const oc = nc.trim().replace(/ /g, '-');
                        oc && hc.push(`data-${ oc }`);
                    }
                }
            }
            if (this.htmlStyle) {
                const mc = this.htmlStyle.split(';');
                let nc = '';
                for (const oc of mc) {
                    const pc = oc.match(/([^=]+):(.+$)/);
                    if (pc) {
                        const qc = pc[1].trim().replace(/ /g, '-');
                        qc && (nc += `${ qc }:${ pc[2] };`);
                    }
                }
                nc && oc.push(`style="${ nc }"`);
            }
            this.attributes && hc.push(...Object.keys(this.attributes).map(hc => `${ hc }="${ this.attributes[hc] }"`)), jc.length > 0 && hc.push(`class="${ jc }"`);
            const kc = this.mathfield;
            return hc.push(`style="display:inline-block; width:${ kc.clientWidth }px; height:${ kc.clientHeight }px;" `), `<span ${ hc.join(' ') }></span>`;
        }
        constructor(a, dc, F) {
            super(null, F), this.mathfield = dc, this.htmlData = `placeholder-id=${ a } `;
            const hc = function(a) {
                return Tb(Rb(a.model.root.render(new Cb({
                    registers: a.registers
                }, {
                    fontSize: 5,
                    letterShapeStyle: a.options.letterShapeStyle
                }, 'inline-math' === a.options.defaultMode ? 'textstyle' : 'displaystyle')), a.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(dc._mathfield);
            this.height = hc.height, this.depth = hc.depth;
        }
    }
    const hc = [
        'above',
        'body',
        'below',
        'superscript',
        'subscript'
    ];

    function ic(a) {
        return 'string' == typeof a && hc.includes(a);
    }

    function jc(a) {
        return void 0 !== a && Array.isArray(a) && 2 === a.length;
    }
    class kc {
        static createBox(a, dc, F) {
            var lc, mc, nc;
            if (!dc)
                return null;
            const oc = function(a) {
                let pc;
                const qc = [];
                let rc = [];
                for (const sc of a)
                    if (pc || sc.style) {
                        const tc = sc.computedStyle;
                        pc && tc.color === pc.color && tc.backgroundColor === pc.backgroundColor && tc.fontSize === pc.fontSize ? rc.push(sc) : (rc.length > 0 && qc.push(rc), rc = [sc], pc = tc);
                    } else
                        rc.push(sc);
                return rc.length > 0 && qc.push(rc), qc;
            }(dc);
            if (1 === oc.length) {
                const pc = oc[0];
                return pc[0].style ? mc(a, pc, {
                    ...F,
                    style: {
                        color: pc[0].style.color,
                        backgroundColor: pc[0].style.backgroundColor,
                        fontSize: pc[0].style.fontSize
                    }
                }) : mc(a, pc, F);
            }
            const pc = [];
            let qc = null == F ? void 0 : F.newList;
            for (const rc of oc) {
                const sc = mc(new Cb(a, {
                    color: null === (lc = rc[0].style) || void 0 === lc ? void 0 : lc.color,
                    backgroundColor: null === (mc = rc[0].style) || void 0 === mc ? void 0 : mc.backgroundColor,
                    fontSize: null === (nc = rc[0].style) || void 0 === nc ? void 0 : nc.fontSize
                }), rc, {
                    newList: qc
                });
                sc && (qc = !1, pc.push(sc));
            }
            return 0 === pc.length ? null : 1 !== pc.length || (null == F ? void 0 : F.classes) || (null == F ? void 0 : F.type) ? new Mb(pc, {
                classes: null == F ? void 0 : F.classes,
                type: null == F ? void 0 : F.type,
                newList: null == F ? void 0 : F.newList
            }).wrap(a) : pc[0].wrap(a);
        }
        static serialize(a, dc) {
            return P(a) ? lc(a, dc) : 'number' == typeof a || 'boolean' == typeof a ? a.toString() : 'string' == typeof a ? a.replace(/\s/g, '~') : void 0 === a ? '' : dc.expandMacro || 'string' != typeof a.verbatimLatex ? a.command && kc.customSerializer[a.command] ? kc.customSerializer[a.command](a, dc) : a.serialize(dc) : a.verbatimLatex;
        }
        static commonAncestor(a, dc) {
            if (a === dc)
                return a.parent;
            if (a.parent === dc.parent)
                return a.parent;
            const lc = new WeakSet();
            let {
                parent: mc
            } = nc;
            for (; mc;)
                lc.add(mc), mc = mc.parent;
            for (mc = dc.parent; mc;) {
                if (lc.has(mc))
                    return mc;
                mc = mc.parent;
            }
        }
        static fromJson(a, dc) {
            const lc = new kc(a.type, dc, a);
            for (const mc of hc)
                a[mc] && lc.setChildren(a[mc], mc);
            return lc;
        }
        toJson() {
            const nc = {
                type: this.type
            };
            if ('math' !== this.mode && (nc.mode = this.mode), this.command && this.command !== this.value && (nc.command = this.command), void 0 !== this.value && (nc.value = this.value), this.style && Object.keys(this.style).length > 0 && (nc.style = {
                    ...this.style
                }), void 0 !== this.verbatimLatex && (nc.verbatimLatex = this.verbatimLatex), this.subsupPlacement && (nc.subsupPlacement = this.subsupPlacement), this.explicitSubsupPlacement && (nc.explicitSubsupPlacement = !0), this.isFunction && (nc.isFunction = !0), this.displayContainsHighlight && (nc.displayContainsHighlight = !0), this.isExtensibleSymbol && (nc.isExtensibleSymbol = !0), this.skipBoundary && (nc.skipBoundary = !0), this.captureSelection && (nc.captureSelection = !0), this._branches)
                for (const oc of Object.keys(this._branches))
                    this._branches[oc] && (nc[oc] = this._branches[oc].filter(nc => 'first' !== nc.type).map(nc => nc.toJson()));
            return nc;
        }
        get changeCounter() {
            return this._changeCounter;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            if (this._isDirty = a, a) {
                this._changeCounter++, this.verbatimLatex = void 0, this._children = void 0;
                let {
                    parent: lc
                } = this;
                for (; lc;)
                    lc._isDirty = !0, lc._changeCounter++, lc.verbatimLatex = void 0, lc._children = void 0, lc = lc.parent;
            }
        }
        serialize(a) {
            var lc;
            return this.body && this.command ? ec([
                this.command,
                '{',
                this.bodyToLatex(a),
                '}',
                this.supsubToLatex(a)
            ]) : this.body ? ec([
                this.bodyToLatex(a),
                this.supsubToLatex(a)
            ]) : this.value && '\u200B' !== this.value ? null !== (lc = this.command) && void 0 !== lc ? lc : function(a, lc) {
                var mc;
                if ('text' === a)
                    return null !== (mc = I(a, lc.codePointAt(0))) && void 0 !== mc ? mc : lc;
                let nc;
                if (nc = I(a, lc.codePointAt(0)), nc)
                    return nc;
                const oc = function(a) {
                    var pc;
                    if ((a < 119808 || a > 120831) && (a < 8448 || a > 8527))
                        return {
                            char: String.fromCodePoint(a)
                        };
                    for (const qc in J)
                        if (J[qc] === a) {
                            a = null !== (pc = qc.codePointAt(0)) && void 0 !== pc ? pc : 0;
                            break;
                        }
                    for (const rc of K)
                        if (a >= rc.start && a < rc.start + rc.len)
                            return {
                                char: String.fromCodePoint(a - rc.start + rc.offset),
                                variant: rc.variant,
                                style: rc.style
                            };
                    return {
                        char: String.fromCodePoint(a)
                    };
                }(lc.codePointAt(0));
                return oc.style || oc.variant ? (nc = oc.char, oc.variant && (nc = '\\' + oc.variant + '{' + nc + '}'), 'bold' === oc.style ? nc = '\\mathbf{' + nc + '}' : 'italic' === oc.style ? nc = '\\mathit{' + nc + '}' : 'bolditalic' === oc.style && (nc = '\\mathbfit{' + nc + '}'), '\\mathord{' + nc + '}') : '';
            }(this.mode, this.value) : '';
        }
        bodyToLatex(a) {
            return lc(this.body, a);
        }
        aboveToLatex(a) {
            return lc(this.above, a);
        }
        belowToLatex(a) {
            return lc(this.below, a);
        }
        supsubToLatex(a) {
            let lc = '';
            if (void 0 !== this.branch('subscript')) {
                const mc = lc(this.subscript, a);
                0 === mc.length ? lc += '_{}' : 1 === mc.length ? lc += '_' + mc : lc += `_{${ mc }}`;
            }
            if (void 0 !== this.branch('superscript')) {
                const nc = lc(this.superscript, a);
                0 === nc.length ? lc += '^{}' : 1 === nc.length ? lc += '\u2032' === nc ? '^\\prime ' : '\u2033' === nc ? '^\\doubleprime ' : '^' + nc : lc += `^{${ nc }}`;
            }
            return lc;
        }
        get treeDepth() {
            let mc = 1,
                nc = this.parent;
            for (; nc;)
                nc = nc.parent, mc += 1;
            return mc;
        }
        get inCaptureSelection() {
            let oc = !1,
                pc = this;
            for (; pc;) {
                if (pc.captureSelection) {
                    oc = !0;
                    break;
                }
                pc = pc.parent;
            }
            return oc;
        }
        branch(a) {
            if (ic(a) && this._branches)
                return this._branches[a];
        }
        get branches() {
            if (!this._branches)
                return [];
            const lc = [];
            for (const mc of hc)
                this._branches[mc] && lc.push(mc);
            return lc;
        }
        createBranch(a) {
            return ic(a) ? (this._branches ? this._branches[a] || (this._branches[a] = [this.makeFirstAtom(a)]) : this._branches = {
                [a]: [this.makeFirstAtom(a)]
            }, this.isDirty = !0, this._branches[a]) : [];
        }
        get row() {
            return jc(this.treeBranch) ? this.treeBranch[0] : -1;
        }
        get col() {
            return jc(this.treeBranch) ? this.treeBranch[1] : -1;
        }
        get body() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.body;
        }
        set body(a) {
            this.setChildren(a, 'body');
        }
        get superscript() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.superscript;
        }
        set superscript(a) {
            this.setChildren(a, 'superscript');
        }
        get subscript() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.subscript;
        }
        set subscript(a) {
            this.setChildren(a, 'subscript');
        }
        get above() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.above;
        }
        set above(a) {
            this.setChildren(a, 'above');
        }
        get below() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.below;
        }
        set below(a) {
            this.setChildren(a, 'below');
        }
        get computedStyle() {
            var lc;
            if (!this.parent)
                return {
                    ...null !== (lc = this.style) && void 0 !== lc ? lc : {}
                };
            const mc = void 0 !== this.style.verbatimColor,
                nc = void 0 !== this.style.verbatimBackgroundColor,
                oc = {
                    ...this.parent.computedStyle,
                    ...this.style
                };
            return delete oc.variant, delete oc.variantStyle, nc || delete oc.verbatimBackgroundColor, mc || delete oc.verbatimColor, oc;
        }
        applyStyle(a) {
            this.isDirty = !0, this.style = {
                ...this.style,
                ...a
            }, 'none' === this.style.fontFamily && delete this.style.fontFamily, 'auto' === this.style.fontShape && delete this.style.fontShape, 'auto' === this.style.fontSeries && delete this.style.fontSeries, 'none' === this.style.color && (delete this.style.color, delete this.style.verbatimColor), 'none' === this.style.backgroundColor && (delete this.style.backgroundColor, delete this.style.verbatimBackgroundColor), 'auto' === this.style.fontSize && delete this.style.fontSize;
            for (const lc of this.children)
                lc.applyStyle(a);
        }
        getInitialBaseElement() {
            let mc;
            return this.hasEmptyBranch('body') || (mc = this.body[1].getInitialBaseElement()), null != mc ? mc : this;
        }
        getFinalBaseElement() {
            return this.hasEmptyBranch('body') ? this : this.body[this.body.length - 1].getFinalBaseElement();
        }
        isCharacterBox() {
            if ('leftright' === this.type)
                return !1;
            const nc = this.getInitialBaseElement();
            return /mord/.test(nc.type);
        }
        hasEmptyBranch(a) {
            const lc = this.branch(a);
            return !lc || 1 === lc.length;
        }
        setChildren(a, dc) {
            if (!a)
                return;
            if (!ic(dc))
                return;
            const lc = [
                this.makeFirstAtom(dc),
                ...a
            ];
            this._branches ? this._branches[dc] = lc : this._branches = {
                [dc]: lc
            };
            for (const mc of a)
                mc.parent = this, mc.treeBranch = dc;
            this.isDirty = !0;
        }
        makeFirstAtom(a) {
            const lc = new kc('first', this.context, {
                mode: this.mode
            });
            return lc.parent = this, lc.treeBranch = a, lc;
        }
        addChild(a, dc) {
            this.createBranch(dc).push(a), this.isDirty = !0, a.parent = this, a.treeBranch = dc;
        }
        addChildBefore(a, dc) {
            const lc = this.createBranch(dc.treeBranch);
            lc.splice(lc.indexOf(dc), 0, a), this.isDirty = !0, a.parent = this, a.treeBranch = dc.treeBranch;
        }
        addChildAfter(a, dc) {
            const lc = this.createBranch(dc.treeBranch);
            lc.splice(lc.indexOf(dc) + 1, 0, a), this.isDirty = !0, a.parent = this, a.treeBranch = dc.treeBranch;
        }
        addChildren(a, dc) {
            for (const lc of a)
                this.addChild(lc, dc);
        }
        addChildrenAfter(a, dc) {
            const lc = this.createBranch(dc.treeBranch);
            lc.splice(lc.indexOf(dc) + 1, 0, ...a), this.isDirty = !0;
            for (const mc of a)
                mc.parent = this, mc.treeBranch = dc.treeBranch;
            return a[a.length - 1];
        }
        removeBranch(a) {
            const lc = this.branch(a);
            if (ic(a) && (this._branches[a] = void 0), !lc)
                return [];
            for (const mc of lc)
                mc.parent = void 0, mc.treeBranch = void 0;
            return lc.shift(), this.isDirty = !0, lc;
        }
        removeChild(a) {
            if ('first' === a.type)
                return;
            const lc = this.branch(a.treeBranch),
                mc = lc.indexOf(a);
            lc.splice(mc, 1), this.isDirty = !0, a.parent = void 0, a.treeBranch = void 0;
        }
        get siblings() {
            return 'root' === this.type ? [] : this.parent.branch(this.treeBranch);
        }
        get firstSibling() {
            return this.siblings[0];
        }
        get lastSibling() {
            const {
                siblings: nc
            } = this;
            return nc[nc.length - 1];
        }
        get isFirstSibling() {
            return this === this.firstSibling;
        }
        get isLastSibling() {
            return this === this.lastSibling;
        }
        get hasNoSiblings() {
            return 1 === this.siblings.length;
        }
        get leftSibling() {
            const oc = this.parent.branch(this.treeBranch);
            return oc[oc.indexOf(this) - 1];
        }
        get rightSibling() {
            const pc = this.parent.branch(this.treeBranch);
            return pc[pc.indexOf(this) + 1];
        }
        get hasChildren() {
            return Boolean(this._branches && this.children.length > 0);
        }
        get firstChild() {
            return this.children[0];
        }
        get lastChild() {
            const {
                children: qc
            } = this;
            return qc[qc.length - 1];
        }
        get children() {
            if (this._children)
                return this._children;
            if (!this._branches)
                return [];
            const rc = [];
            for (const sc of hc)
                if (this._branches[sc])
                    for (const tc of this._branches[sc])
                        rc.push(...tc.children), rc.push(tc);
            return this._children = rc, rc;
        }
        render(a, dc) {
            if ('first' === this.type && !a.atomIdsSettings)
                return null;
            const lc = new Cb(a, this.style);
            let mc = '';
            'root' === this.type && (mc += ' ML__base'), this.isSelected && (mc += ' ML__selected');
            let nc = this.createBox(lc, {
                classes: mc,
                newList: !0 === (null == dc ? void 0 : dc.newList) || 'first' === this.type
            });
            return nc ? (this.subsupPlacement || !this.superscript && !this.subscript || (nc = this.attachSupsub(lc, {
                base: nc
            })), nc.wrap(lc)) : null;
        }
        attachSupsub(a, dc) {
            var lc, mc;
            const nc = dc.base,
                oc = this.superscript,
                pc = this.subscript;
            if (!oc && !pc)
                return nc;
            let qc = null,
                rc = null;
            const sc = null !== (lc = dc.isCharacterBox) && void 0 !== lc ? lc : this.isCharacterBox();
            let tc = 0;
            if (oc) {
                const uc = new Cb(a, void 0, 'superscript');
                qc = kc.createBox(uc, oc, {
                    newList: !0
                }), sc || (tc = nc.height - a.metrics.supDrop * uc.scalingFactor);
            }
            let uc, vc = 0;
            if (pc) {
                const wc = new Cb(a, void 0, 'subscript');
                rc = kc.createBox(wc, pc, {
                    newList: !0
                }), sc || (vc = nc.depth + a.metrics.subDrop * wc.scalingFactor);
            }
            uc = a.isDisplayStyle ? a.metrics.sup1 : a.isCramped ? a.metrics.sup3 : a.metrics.sup2;
            const wc = 0.05 / a.scalingFactor;
            let xc = null;
            if (rc && qc) {
                tc = Math.max(tc, uc, qc.depth + 0.25 * a.metrics.xHeight), vc = Math.max(vc, a.metrics.sub2);
                const yc = a.metrics.defaultRuleThickness;
                if (tc - qc.depth - (rc.height - vc) < 4 * yc) {
                    vc = 4 * yc - (tc - qc.depth) + rc.height;
                    const zc = 0.8 * a.metrics.xHeight - (tc - qc.depth);
                    zc > 0 && (tc += zc, vc -= zc);
                }
                const zc = this.isExtensibleSymbol && nc.italic ? -nc.italic : 0;
                xc = new Vb({
                    individualShift: [{
                            box: rc,
                            shift: vc,
                            marginLeft: zc
                        },
                        {
                            box: qc,
                            shift: -tc
                        }
                    ]
                }).wrap(a);
            } else
                rc && !qc ? (vc = Math.max(vc, a.metrics.sub1, rc.height - 0.3448), xc = new Vb({
                    shift: vc,
                    children: [{
                        box: rc,
                        marginRight: wc,
                        marginLeft: this.isCharacterBox() ? -(null !== (mc = nc.italic) && void 0 !== mc ? mc : 0) : 0
                    }]
                })) : !rc && qc && (tc = Math.max(tc, uc, qc.depth + 0.10775), xc = new Vb({
                    shift: -tc,
                    children: [{
                        box: qc,
                        marginRight: wc
                    }]
                }), xc.wrap(a));
            const yc = new Mb(xc, {
                classes: 'msubsup' + (this.isSelected ? ' ML__selected' : '')
            });
            return this.caret && (yc.caret = this.caret), new Mb([
                nc,
                yc
            ], {
                type: dc.type
            });
        }
        attachLimits(a, dc) {
            var lc;
            const mc = this.superscript ? kc.createBox(new Cb(a, this.style, 'superscript'), this.superscript, {
                    newList: !0
                }) : null,
                nc = this.subscript ? kc.createBox(new Cb(a, this.style, 'subscript'), this.subscript, {
                    newList: !0
                }) : null;
            return mc || nc ? function(a, dc) {
                var oc, pc, qc, rc, sc;
                const tc = a.metrics,
                    uc = new Mb(dc.base),
                    vc = null !== (oc = dc.baseShift) && void 0 !== oc ? oc : 0,
                    wc = null !== (pc = dc.slant) && void 0 !== pc ? pc : 0;
                let xc = 0,
                    yc = 0;
                dc.above && (xc = null !== (qc = dc.aboveShift) && void 0 !== qc ? qc : Math.max(tc.bigOpSpacing1, tc.bigOpSpacing3 - dc.above.depth)), dc.below && (yc = null !== (rc = dc.belowShift) && void 0 !== rc ? rc : Math.max(tc.bigOpSpacing2, tc.bigOpSpacing4 - dc.below.height));
                let zc = null;
                if (dc.below && dc.above) {
                    const Ac = tc.bigOpSpacing5 + dc.below.height + dc.below.depth + yc + uc.depth + vc;
                    zc = new Vb({
                        bottom: Ac,
                        children: [
                            tc.bigOpSpacing5,
                            {
                                box: dc.below,
                                marginLeft: -wc,
                                classes: ['ML__center']
                            },
                            yc,
                            {
                                box: uc,
                                classes: ['ML__center']
                            },
                            xc,
                            {
                                box: dc.above,
                                marginLeft: wc,
                                classes: ['ML__center']
                            },
                            tc.bigOpSpacing5
                        ]
                    }).wrap(a);
                } else if (dc.below && !dc.above)
                    zc = new Vb({
                        top: uc.height - vc,
                        children: [
                            tc.bigOpSpacing5,
                            {
                                box: dc.below,
                                marginLeft: -wc,
                                classes: ['ML__center']
                            },
                            yc,
                            {
                                box: uc,
                                classes: ['ML__center']
                            }
                        ]
                    }).wrap(a);
                else if (!dc.below && dc.above) {
                    const Bc = uc.depth + vc;
                    zc = new Vb({
                        bottom: Bc,
                        children: [{
                                box: uc,
                                classes: ['ML__center']
                            },
                            xc,
                            {
                                box: dc.above,
                                marginLeft: wc,
                                classes: ['ML__center']
                            },
                            tc.bigOpSpacing5
                        ]
                    }).wrap(a);
                } else {
                    const Cc = uc.depth + vc;
                    zc = new Vb({
                        bottom: Cc,
                        children: [{
                                box: uc
                            },
                            tc.bigOpSpacing5
                        ]
                    }).wrap(a);
                }
                return new Mb(zc, {
                    type: null !== (sc = dc.type) && void 0 !== sc ? sc : 'mop'
                });
            }(a, {
                ...dc,
                above: mc,
                below: nc,
                type: null !== (lc = null == dc ? void 0 : dc.type) && void 0 !== lc ? lc : 'mop'
            }) : dc.base.wrap(a);
        }
        bind(a, dc) {
            if (!dc || a.isPhantom || '\u200B' === this.value)
                return dc;
            let lc = this.parent;
            for (; lc && !lc.captureSelection;)
                lc = lc.parent;
            return (null == lc ? void 0 : lc.captureSelection) || (this.id || (this.id = a.makeID()), dc.atomID = this.id), dc;
        }
        createMathfieldBox(a, dc, F) {
            const lc = new gc(F, dc, {
                type: 'mathfield',
                mode: this.mode,
                maxFontSize: a.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: a.letterShapeStyle,
                    fontSize: Math.max(1, a.size + a.mathstyle.sizeDelta)
                },
                classes: ''
            });
            return a.isTight && (lc.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (lc.italic = 0), lc.right = lc.italic, this.bind(a, lc), Tb(lc, {
                type: 'mord'
            });
        }
        createBox(a, dc) {
            var lc, mc, nc, oc;
            const pc = null !== (lc = this.value) && void 0 !== lc ? lc : this.body,
                qc = function(a) {
                    return Ib.includes(a);
                }(this.type) ? this.type : void 0;
            let rc = null !== (mc = null == dc ? void 0 : dc.classes) && void 0 !== mc ? mc : '';
            'text' === this.mode && (rc += ' ML__text');
            const sc = 'string' == typeof pc || void 0 === pc ? new Mb(null !== (nc = pc) && void 0 !== nc ? nc : null, {
                type: qc,
                mode: this.mode,
                maxFontSize: a.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: a.letterShapeStyle,
                    fontSize: Math.max(1, a.size + a.mathstyle.sizeDelta)
                },
                classes: rc,
                newList: null == dc ? void 0 : dc.newList
            }) : null !== (oc = kc.createBox(a, pc, {
                type: qc,
                mode: this.mode,
                style: this.style,
                classes: rc,
                newList: null == dc ? void 0 : dc.newList
            })) && void 0 !== oc ? oc : new Mb(null);
            return a.isTight && (sc.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (sc.italic = 0), sc.right = sc.italic, this.bind(a, sc), this.caret && (this.superscript || this.subscript || (sc.caret = this.caret)), sc;
        }
        isDigit() {
            var tc;
            return 'mord' === this.type && this.value ? /^[\d,.]$/.test(this.value) : 'group' === this.type && 2 === (null === (tc = this.body) || void 0 === tc ? void 0 : tc.length) && 'first' === this.body[0].type && ',' === this.body[1].value;
        }
        asDigit() {
            var uc;
            return 'mord' === this.type && this.value && /^[\d,.]$/.test(this.value) ? this.value : 'group' === this.type && 2 === (null === (uc = this.body) || void 0 === uc ? void 0 : uc.length) && 'first' === this.body[0].type && ',' === this.body[1].value ? '.' : '';
        }
        constructor(a, dc, F) {
            var lc, mc, nc, oc, pc, qc;
            this.id = void 0, this.verbatimLatex = void 0, this._isDirty = !1, this._changeCounter = 0, this.subsupPlacement = void 0, this.explicitSubsupPlacement = !1, this.skipBoundary = !1, this.captureSelection = !1, this.type = a, this.context = dc, 'string' == typeof(null == F ? void 0 : F.value) && (this.value = F.value), this.command = null !== (mc = null !== (lc = null == F ? void 0 : F.command) && void 0 !== lc ? lc : this.value) && void 0 !== mc ? mc : '', this.mode = null !== (nc = null == F ? void 0 : F.mode) && void 0 !== nc ? nc : 'math', this.isFunction = null !== (oc = null == F ? void 0 : F.isFunction) && void 0 !== oc && oc, this.subsupPlacement = null == F ? void 0 : F.limits, this.style = null !== (pc = null == F ? void 0 : F.style) && void 0 !== pc ? pc : {}, this.displayContainsHighlight = null !== (qc = null == F ? void 0 : F.displayContainsHighlight) && void 0 !== qc && qc, (null == F ? void 0 : F.serialize) && (kc.customSerializer[F.command] = F.serialize);
        }
    }

    function lc(a, dc) {
        if (!a || 0 === a.length)
            return '';
        if ('first' === a[0].type) {
            if (1 === a.length)
                return '';
            a = a.slice(1);
        }
        return 0 === a.length ? '' : ec(Hb(a, 'cssClass').map(a => ec(Hb(a, 'color').map(a => ec(function(a) {
            const mc = [];
            let nc = [],
                oc = 'NONE';
            for (const pc of a)
                'first' !== pc.type && (pc.mode !== oc ? (nc.length > 0 && mc.push(nc), nc = [pc], oc = pc.mode) : nc.push(pc));
            return nc.length > 0 && mc.push(nc), mc;
        }(a).map(a => Gb.serialize(a, dc)))))));
    }

    function mc(a, dc, F) {
        var nc, oc, pc, qc;

        function rc(a) {
            return 'text' === a.mode;
        }
        if (!dc || 0 === dc.length)
            return null;
        const sc = new Cb(a, null == F ? void 0 : F.style),
            tc = !sc.atomIdsSettings || !sc.atomIdsSettings.groupNumbers;
        let uc, vc = [],
            wc = null !== (nc = null == F ? void 0 : F.newList) && void 0 !== nc && nc;
        if (1 === dc.length) {
            const xc = dc[0],
                yc = xc.render(sc, {
                    newList: wc
                });
            yc && (tc && xc.isSelected && yc.selected(!0), vc = [yc]);
        } else {
            let zc = '',
                Ac = !0;
            for (const Bc of dc) {
                (null === (oc = sc.atomIdsSettings) || void 0 === oc ? void 0 : oc.groupNumbers) && zc && (Ac && Bc.isDigit() || !Ac && rc(Bc)) && (sc.atomIdsSettings.overrideID = zc);
                const Cc = Bc.render(sc, {
                    newList: wc
                });
                sc.atomIdsSettings && (sc.atomIdsSettings.overrideID = void 0), Cc && (wc = 'group' === Bc.type && !Bc.boxType, (null === (pc = sc.atomIdsSettings) || void 0 === pc ? void 0 : pc.groupNumbers) && ((Bc.isDigit() || rc(Bc)) && (zc && Ac === Bc.isDigit() || (Ac = Bc.isDigit(), zc = null !== (qc = Bc.id) && void 0 !== qc ? qc : '')), !zc || (Bc.isDigit() || rc(Bc)) && Bc.hasEmptyBranch('superscript') && Bc.hasEmptyBranch('subscript') || (zc = '')), tc && Bc.isSelected && Cc.selected(!0), vc.push(Cc));
            }
        }
        return 0 === vc.length ? null : (F || sc.isTight || vc.length > 1 ? (uc = new Mb(vc, {
            isTight: sc.isTight,
            ...null != F ? F : {}
        }), uc.isSelected = vc.every(a => a.isSelected)) : uc = vc[0], uc.wrap(sc).wrap(a));
    }
    kc.customSerializer = {};
    class nc extends kc {
        static fromJson(a, dc) {
            return new nc(a.command, a.body, dc, {
                accentChar: a.accentChar,
                svgAccent: a.svgAccent,
                style: a.style
            });
        }
        toJson() {
            return {
                ...super.toJson(),
                accentChar: this.accent,
                svgAccent: this.svgAccent
            };
        }
        render(a) {
            var oc;
            const pc = new Cb(a, this.style, 'cramp'),
                qc = null !== (oc = kc.createBox(pc, this.body)) && void 0 !== oc ? oc : new Mb(null);
            let rc = 0;
            !this.hasEmptyBranch('body') && 2 === this.body.length && this.body[1].isCharacterBox() && (rc = qc.skew);
            let sc, tc = Math.min(qc.height, 0.431);
            if (this.svgAccent)
                sc = Ub(this.svgAccent), tc = pc.metrics.bigOpSpacing1 - tc;
            else if (this.accent) {
                const uc = new Mb(this.accent, {
                    fontFamily: 'Main-Regular'
                });
                uc.italic = 0;
                const vc = 8407 === this.accent ? ' ML__accent-vec' : '';
                sc = new Mb(new Mb(uc), {
                    classes: 'ML__accent-body' + vc
                });
            }
            sc = new Vb({
                shift: 0,
                children: [{
                        box: new Mb(qc)
                    },
                    -tc,
                    {
                        box: sc,
                        marginLeft: qc.left + 2 * rc,
                        classes: ['ML__center']
                    }
                ]
            });
            const uc = new Mb(sc, {
                newList: !0,
                type: 'mord'
            });
            return this.caret && (uc.caret = this.caret), this.bind(pc, uc.wrap(pc)), this.attachSupsub(pc, {
                base: uc
            });
        }
        constructor(a, dc, F, P) {
            super('accent', F, {
                command: a,
                style: P.style
            }), P.accentChar ? this.accent = P.accentChar : this.svgAccent = null == P ? void 0 : P.svgAccent, this.body = dc, this.skipBoundary = !0;
        }
    }
    const oc = {
            '(': ')',
            '{': '}',
            '[': ']',
            '|': '|',
            '\\lbrace': '\\rbrace',
            '\\lparen': '\\rparen',
            '\\{': '\\}',
            '\\langle': '\\rangle',
            '\\lfloor': '\\rfloor',
            '\\lceil': '\\rceil',
            '\\vert': '\\vert',
            '\\lvert': '\\rvert',
            '\\Vert': '\\Vert',
            '\\lVert': '\\rVert',
            '\\lbrack': '\\rbrack',
            '\\ulcorner': '\\urcorner',
            '\\llcorner': '\\lrcorner',
            '\\lgroup': '\\rgroup',
            '\\lmoustache': '\\rmoustache'
        },
        pc = Object.fromEntries(Object.entries(oc).map(([qc, rc]) => [
            rc,
            qc
        ]));

    function sc(qc) {
        var tc;
        return null !== (tc = {
            '[': 91,
            ']': 93,
            '(': 40,
            ')': 41,
            '\\mid': 8739,
            '|': 8739,
            '\u2223': 8739,
            '\u2225': 8741,
            '\\|': 8739,
            '\\{': 123,
            '\\}': 125,
            '\\lbrace': 123,
            '\\rbrace': 125,
            '\\lparen': 40,
            '\\rparen': 41,
            '\\lbrack': 91,
            '\\rbrack': 93,
            '\\vert': 8739,
            '\\lvert': 8739,
            '\\mvert': 8739,
            '\\rvert': 8739,
            '\\Vert': 8741,
            '\\lVert': 8741,
            '\\mVert': 8741,
            '\\rVert': 8741,
            '\\parallel': 8741,
            '\\shortparallel': 8741,
            '\\langle': 10216,
            '\\rangle': 10217,
            '\\lfloor': 8970,
            '\\rfloor': 8971,
            '\\lceil': 8968,
            '\\rceil': 8969,
            '\\ulcorner': 9484,
            '\\urcorner': 9488,
            '\\llcorner': 9492,
            '\\lrcorner': 9496,
            '\\lgroup': 10222,
            '\\rgroup': 10223,
            '\\lmoustache': 9136,
            '\\rmoustache': 9137,
            '\\surd': 8730
        } [qc]) && void 0 !== tc ? tc : qc.codePointAt(0);
    }

    function tc(qc, rc, F, P, c) {
        const uc = new Cb(P, null == c ? void 0 : c.style, 'textstyle'),
            vc = new Mb(sc(qc), {
                fontFamily: 'Size' + rc + '-Regular',
                classes: 'ML__delim-size' + rc
            }).wrap(uc);
        return F && vc.setTop(0.25 * (1 - uc.scalingFactor)), vc;
    }

    function uc(qc, rc, F, P, c) {
        var vc;
        let wc, xc, yc, zc;
        wc = yc = zc = sc(qc), xc = null;
        let Ac = 'Size1-Regular';
        '\\vert' === qc || '\\lvert' === qc || '\\rvert' === qc || '\\mvert' === qc || '\\mid' === qc ? yc = wc = zc = 8739 : '\\Vert' === qc || '\\lVert' === qc || '\\rVert' === qc || '\\mVert' === qc || '\\|' === qc ? yc = wc = zc = 8741 : '\\uparrow' === qc ? yc = zc = 9168 : '\\Uparrow' === qc ? yc = zc = 8214 : '\\downarrow' === qc ? wc = yc = 9168 : '\\Downarrow' === qc ? wc = yc = 8214 : '\\updownarrow' === qc ? (wc = 8593, yc = 9168, zc = 8595) : '\\Updownarrow' === qc ? (wc = 8657, yc = 8214, zc = 8659) : '[' === qc || '\\lbrack' === qc ? (wc = 9121, yc = 9122, zc = 9123, Ac = 'Size4-Regular') : ']' === qc || '\\rbrack' === qc ? (wc = 9124, yc = 9125, zc = 9126, Ac = 'Size4-Regular') : '\\lfloor' === qc || '\u230A' === qc ? (yc = wc = 9122, zc = 9123, Ac = 'Size4-Regular') : '\\lceil' === qc || '\u2308' === qc ? (wc = 9121, yc = zc = 9122, Ac = 'Size4-Regular') : '\\rfloor' === qc || '\u230B' === qc ? (yc = wc = 9125, zc = 9126, Ac = 'Size4-Regular') : '\\rceil' === qc || '\u2309' === qc ? (wc = 9124, yc = zc = 9125, Ac = 'Size4-Regular') : '(' === qc || '\\lparen' === qc ? (wc = 9115, yc = 9116, zc = 9117, Ac = 'Size4-Regular') : ')' === qc || '\\rparen' === qc ? (wc = 9118, yc = 9119, zc = 9120, Ac = 'Size4-Regular') : '\\{' === qc || '\\lbrace' === qc ? (wc = 9127, xc = 9128, zc = 9129, yc = 9130, Ac = 'Size4-Regular') : '\\}' === qc || '\\rbrace' === qc ? (wc = 9131, xc = 9132, zc = 9133, yc = 9130, Ac = 'Size4-Regular') : '\\lgroup' === qc || '\u27EE' === qc ? (wc = 9127, zc = 9129, yc = 9130, Ac = 'Size4-Regular') : '\\rgroup' === qc || '\u27EF' === qc ? (wc = 9131, zc = 9133, yc = 9130, Ac = 'Size4-Regular') : '\\lmoustache' === qc || '\u23B0' === qc ? (wc = 9127, zc = 9133, yc = 9130, Ac = 'Size4-Regular') : '\\rmoustache' === qc || '\u23B1' === qc ? (wc = 9131, zc = 9129, yc = 9130, Ac = 'Size4-Regular') : '\\surd' === qc ? (wc = 57345, zc = 9143, yc = 57344, Ac = 'Size4-Regular') : '\\ulcorner' === qc ? (wc = 9484, yc = zc = 32) : '\\urcorner' === qc ? (wc = 9488, yc = zc = 32) : '\\llcorner' === qc ? (zc = 9492, yc = wc = 32) : '\\lrcorner' === qc && (wc = 9496, yc = wc = 32);
        const Bc = xb(wc, Ac),
            Cc = Bc.height + Bc.depth,
            Dc = xb(yc, Ac),
            Ec = Dc.height + Dc.depth,
            Fc = xb(zc, Ac),
            Gc = Fc.height + Fc.depth;
        let Hc = 0,
            Ic = 1;
        if (null !== xc) {
            const Jc = xb(xc, Ac);
            Hc = Jc.height + Jc.depth, Ic = 2;
        }
        const Jc = Cc + Gc + Hc,
            Kc = Math.max(0, Math.ceil((rc - Jc) / (Ic * Ec))),
            Lc = Jc + Kc * Ic * Ec;
        let Mc = 0.25;
        F && (Mc *= P.scalingFactor);
        const Nc = Lc / 2 - Mc,
            Oc = [];
        Oc.push({
            box: new Mb(zc, {
                fontFamily: Ac
            })
        }), Oc.push(-0.008);
        const Pc = new Mb(yc, {
            fontFamily: Ac
        });
        if (null === xc)
            for (let Qc = 0; Qc < Kc; Qc++)
                Oc.push({
                    box: Pc
                });
        else {
            for (let Rc = 0; Rc < Kc; Rc++)
                Oc.push({
                    box: Pc
                });
            Oc.push(-0.008), Oc.push({
                box: new Mb(xc, {
                    fontFamily: Ac
                })
            }), Oc.push(-0.008);
            for (let Sc = 0; Sc < Kc; Sc++)
                Oc.push({
                    box: Pc
                });
        }
        Oc.push(-0.008), Oc.push({
            box: new Mb(wc, {
                fontFamily: Ac
            })
        });
        let Qc = '';
        'Size1-Regular' === Ac ? Qc = ' delim-size1' : 'Size4-Regular' === Ac && (Qc = ' delim-size4');
        const Rc = new Vb({
            bottom: Nc,
            children: Oc
        }, {
            classes: Qc
        });
        return new Mb(Rc, {
            ...null != c ? c : {},
            classes: (null !== (vc = null == c ? void 0 : c.classes) && void 0 !== vc ? vc : '') + ' ML__delim-mult'
        });
    }
    const vc = new Set([
            '(',
            ')',
            '\\lparen',
            '\\rparen',
            '[',
            ']',
            '\\lbrack',
            '\\rbrack',
            '\\{',
            '\\}',
            '\\lbrace',
            '\\rbrace',
            '\\lfloor',
            '\\rfloor',
            '\\lceil',
            '\\rceil',
            '\\surd',
            '\u230A',
            '\u230B',
            '\u2308',
            '\u2309'
        ]),
        wc = new Set([
            '\\uparrow',
            '\\downarrow',
            '\\updownarrow',
            '\\Uparrow',
            '\\Downarrow',
            '\\Updownarrow',
            '|',
            '\\|',
            '\\vert',
            '\\Vert',
            '\\lvert',
            '\\rvert',
            '\\lVert',
            '\\rVert',
            '\\mvert',
            '\\mid',
            '\\lgroup',
            '\\rgroup',
            '\\lmoustache',
            '\\rmoustache',
            '\u27EE',
            '\u27EF',
            '\u23B0',
            '\u23B1'
        ]),
        xc = new Set([
            '<',
            '>',
            '\\langle',
            '\\rangle',
            '/',
            '\\backslash',
            '\\lt',
            '\\gt'
        ]),
        yc = [
            0,
            1.2,
            1.8,
            2.4,
            3
        ],
        zc = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            }
        ],
        Ac = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'stack'
            }
        ],
        Bc = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            },
            {
                type: 'stack'
            }
        ];

    function Cc(qc, rc, F, P, c, d) {
        var Dc;
        if (!rc || 0 === rc.length || '.' === rc)
            return Ec(c, qc, qc);
        let Ec;
        '<' === rc || '\\lt' === rc ? rc = '\\langle' : '>' !== rc && '\\gt' !== rc || (rc = '\\rangle'), Ec = xc.has(rc) ? zc : vc.has(rc) ? Bc : Ac;
        const Fc = function(qc, rc, F, P) {
                for (let Gc = {
                        '-4': 0,
                        '-3': 1,
                        0: 2
                    } [P.mathstyle.sizeDelta]; Gc < F.length && 'stack' !== F[Gc].type; Gc++) {
                    const Hc = xb(qc, 'small' === (c = F[Gc]).type ? 'Main-Regular' : 'large' === c.type ? 'Size' + c.size + '-Regular' : 'Size4-Regular');
                    if (Hc.defaultMetrics)
                        return {
                            type: 'small',
                            mathstyle: 'scriptstyle'
                        };
                    let Ic = Hc.height + Hc.depth;
                    if ('small' === F[Gc].type && ('scriptscriptstyle' === F[Gc].mathstyle ? Ic *= vb[Math.max(1, P.size - 2)] : 'scriptstyle' === F[Gc].mathstyle && (Ic *= vb[Math.max(1, P.size - 1)])), Ic > rc)
                        return F[Gc];
                }
                var Hc;
                return F[F.length - 1];
            }(sc(rc), F, Ec, c),
            Gc = new Cb(c, null == d ? void 0 : d.style, Fc.mathstyle);
        return 'small' === Fc.type ? function(qc, rc, F, P) {
            const Hc = new Mb(sc(qc), {
                fontFamily: 'Main-Regular'
            }).wrap(rc, P);
            return F && Hc.setTop(0.25 * (1 - rc.scalingFactor)), Hc;
        }(rc, Gc, P, {
            type: qc,
            classes: 'ML__small-delim ' + (null !== (Dc = null == d ? void 0 : d.classes) && void 0 !== Dc ? Dc : '')
        }) : 'large' === Fc.type ? tc(rc, Fc.size, P, Gc, {
            ...d,
            type: qc
        }) : uc(rc, F, P, Gc, {
            ...d,
            type: qc
        });
    }

    function Dc(qc, rc, F, P, c, d) {
        if ('.' === rc)
            return Ec(c, qc, null == d ? void 0 : d.classes);
        const Ec = 0.25 * c.scalingFactor,
            Fc = Math.max(F - Ec, P + Ec);
        return Cc(qc, rc, Math.max(Fc / 500 * 901, 2 * Fc - 0.5), !0, c, d);
    }

    function Ec(qc, rc, F) {
        const Fc = new Cb(qc, void 0, 'textstyle');
        return new Mb(null, {
            classes: ' nulldelimiter ' + (null != F ? F : ''),
            type: rc
        }).wrap(Fc);
    }
    class Fc extends kc {
        static fromJson(qc, rc) {
            return new Fc(qc.command, rc, qc);
        }
        toJson() {
            const Gc = {};
            return this.skipBoundary || (Gc.skipBoundary = !1), this.subsupPlacement && (Gc.subsupPlacement = this.subsupPlacement), this.svgAbove && (Gc.svgAbove = this.svgAbove), this.svgBelow && (Gc.svgBelow = this.svgBelow), this.svgBody && (Gc.svgBody = this.svgBody), 'mord' !== this.boxType && (Gc.boxType = this.boxType), this.paddedBody && (Gc.paddedBody = !0), this.paddedLabels && (Gc.paddedLabels = !0), {
                ...super.toJson(),
                ...Gc
            };
        }
        render(qc) {
            let Gc = this.svgBody ? Ub(this.svgBody) : kc.createBox(qc, this.body, {
                newList: !0
            });
            const Hc = new Cb(qc, this.style, 'scriptstyle');
            let Ic = null;
            this.svgAbove ? Ic = Ub(this.svgAbove) : this.above && (Ic = kc.createBox(Hc, this.above, {
                newList: !0
            }));
            let Jc = null;
            this.svgBelow ? Jc = Ub(this.svgBelow) : this.below && (Jc = kc.createBox(Hc, this.below, {
                newList: !0
            })), this.paddedBody && (Gc = new Mb([
                Ec(qc, 'mopen'),
                Gc,
                Ec(qc, 'mclose')
            ], {
                newList: !0
            }));
            let Kc = function(qc, Gc) {
                if (!Gc.base)
                    return null;
                if (!Gc.above && !Gc.below) {
                    const Lc = new Mb(Gc.base, {
                        type: Gc.type
                    });
                    return Lc.setStyle('position', 'relative'), Lc;
                }
                let Lc = 0;
                Gc.above && (Lc = -Gc.above.depth + qc.metrics.bigOpSpacing2);
                let Mc = null;
                const Nc = Gc.base,
                    Oc = ['ML__center'];
                if (Gc.paddedAboveBelow && Oc.push('ML__label_padding'), Gc.below && Gc.above) {
                    const Pc = qc.metrics.bigOpSpacing5 + Gc.below.height + Gc.below.depth + Nc.depth + 0;
                    Mc = new Vb({
                        bottom: Pc,
                        children: [
                            qc.metrics.bigOpSpacing5,
                            {
                                box: Gc.below,
                                classes: Oc
                            },
                            {
                                box: Nc,
                                classes: ['ML__center']
                            },
                            Lc,
                            {
                                box: Gc.above,
                                classes: Oc
                            },
                            qc.metrics.bigOpSpacing5
                        ]
                    });
                } else
                    Gc.below ? Mc = new Vb({
                        top: Nc.height - 0,
                        children: [
                            qc.metrics.bigOpSpacing5,
                            {
                                box: Gc.below,
                                classes: Oc
                            },
                            {
                                box: Nc,
                                classes: ['ML__center']
                            }
                        ]
                    }) : Gc.above && (Mc = new Vb({
                        bottom: Nc.depth + 0,
                        children: [{
                                box: Nc,
                                classes: ['ML__center']
                            },
                            Lc,
                            {
                                box: Gc.above,
                                classes: Oc
                            },
                            qc.metrics.bigOpSpacing5
                        ]
                    }));
                return new Mb(Mc, {
                    type: Gc.type
                });
            }(qc, {
                base: Gc,
                above: Ic,
                below: Jc,
                type: 'mbin' === this.boxType || 'mrel' === this.boxType ? this.boxType : 'mord',
                paddedAboveBelow: this.paddedLabels
            });
            return Kc ? (Kc = 'over-under' === this.subsupPlacement ? this.attachLimits(qc, {
                base: Kc,
                type: Kc.type
            }) : this.attachSupsub(qc, {
                base: Kc
            }), this.caret && (Kc.caret = this.caret), this.bind(qc, Kc)) : null;
        }
        constructor(qc, rc, F) {
            var Gc, Hc, Ic, Jc;
            super('overunder', rc, {
                command: qc,
                serialize: F.serialize,
                style: F.style
            }), this.skipBoundary = null === (Gc = F.skipBoundary) || void 0 === Gc || Gc, this.subsupPlacement = F.supsubPlacement, this.body = F.body, this.svgAbove = F.svgAbove, this.svgBelow = F.svgBelow, this.svgBody = F.svgBody, this.above = F.above, this.below = F.below, this.boxType = null !== (Hc = F.boxType) && void 0 !== Hc ? Hc : 'mord', this.paddedBody = null !== (Ic = F.paddedBody) && void 0 !== Ic && Ic, this.paddedLabels = null !== (Jc = F.paddedLabels) && void 0 !== Jc && Jc;
        }
    }
    class Gc extends kc {
        static fromJson(qc, rc) {
            return new Gc(qc.body, rc, qc);
        }
        toJson() {
            const Hc = {};
            return this.mathstyleName && (Hc.mathstyleName = this.mathstyleName), this.latexOpen && (Hc.latexOpen = this.latexOpen), this.latexClose && (Hc.latexClose = this.latexClose), this.cssId && (Hc.cssId = this.cssId), this.htmlData && (Hc.htmlData = this.htmlData), this.htmlStyle && (Hc.htmlStyle = this.htmlStyle), this.customClass && (Hc.customClass = this.customClass), this.boxType && (Hc.boxType = this.boxType), this.captureSelection && (Hc.captureSelection = !0), this.changeMode && (Hc.changeMode = !0), {
                ...super.toJson(),
                ...Hc
            };
        }
        render(qc) {
            const Hc = new Cb(qc, this.style, this.mathstyleName),
                Ic = kc.createBox(Hc, this.body, {
                    type: this.boxType,
                    classes: this.customClass,
                    mode: this.mode,
                    style: {
                        backgroundColor: this.style.backgroundColor
                    },
                    newList: !this.boxType
                });
            return Ic ? (this.cssId && (Ic.cssId = this.cssId), this.htmlData && (Ic.htmlData = this.htmlData), this.htmlStyle && (Ic.htmlStyle = this.htmlStyle), this.caret && (Ic.caret = this.caret), this.bind(qc, Ic)) : null;
        }
        serialize(qc) {
            let Hc = this.bodyToLatex(qc);
            return 'string' == typeof this.latexOpen && (Hc = this.latexOpen + Hc + this.latexClose), this.htmlData && (Hc = `\\htmlData{${ this.htmlData }}{${ Hc }}`), this.htmlStyle && (Hc = `\\htmlStyle{${ this.htmlStyle }}{${ Hc }}`), this.customClass && (Hc = `\\class{${ this.customClass }}{${ Hc }}`), this.cssId && (Hc = `\\cssId{${ this.cssId }}{${ Hc }}`), Hc;
        }
        constructor(qc, rc, F) {
            var Hc, Ic, Jc;
            super('group', rc, {
                command: null == F ? void 0 : F.command,
                mode: null !== (Hc = null == F ? void 0 : F.mode) && void 0 !== Hc ? Hc : 'math',
                serialize: null == F ? void 0 : F.serialize,
                style: null == F ? void 0 : F.style
            }), this.body = qc, this.mathstyleName = null == F ? void 0 : F.mathstyleName, this.latexOpen = null == F ? void 0 : F.latexOpen, this.latexClose = null == F ? void 0 : F.latexClose, this.cssId = null == F ? void 0 : F.cssId, this.htmlData = null == F ? void 0 : F.htmlData, this.htmlStyle = null == F ? void 0 : F.htmlStyle, this.customClass = null == F ? void 0 : F.customClass, this.boxType = null == F ? void 0 : F.boxType, this.skipBoundary = !0, this.captureSelection = null !== (Ic = null == F ? void 0 : F.captureSelection) && void 0 !== Ic && Ic, this.changeMode = null !== (Jc = null == F ? void 0 : F.changeMode) && void 0 !== Jc && Jc, this.displayContainsHighlight = !1, qc && 1 === qc.length && ',' === qc[0].command && (this.captureSelection = !0);
        }
    }
    class Hc extends kc {
        static fromJson(qc, rc) {
            return new Hc(qc.command, qc.style, rc, qc.width);
        }
        toJson() {
            const Ic = {};
            return this.width && (Ic.width = this.width), {
                ...super.toJson(),
                ...Ic
            };
        }
        render(qc) {
            var Ic;
            let Jc;
            if (this.width)
                Jc = new Mb(null, {
                    classes: 'mspace'
                }), Jc.left = Ab(this.width.glue);
            else {
                const Kc = null !== (Ic = {
                    '\\qquad': 'qquad',
                    '\\quad': 'quad',
                    '\\enspace': 'enspace',
                    '\\;': 'thickspace',
                    '\\:': 'mediumspace',
                    '\\,': 'thinspace',
                    '\\!': 'negativethinspace'
                } [this.command]) && void 0 !== Ic ? Ic : 'mediumspace';
                Jc = new Mb(null, {
                    classes: Kc
                });
            }
            return Jc = this.bind(qc, Jc), this.caret && (Jc.caret = this.caret), Jc;
        }
        serialize(qc) {
            var Ic;
            let Jc = null !== (Ic = this.command) && void 0 !== Ic ? Ic : '';
            return '\\hspace' === this.command || '\\hspace*' === this.command ? Number.isFinite(this.width) ? Jc += `{${ this.width }em'}` : Jc += '{0pt}' : Number.isFinite(this.width) && (Jc += ` ${ this.width }em`), Jc;
        }
        constructor(qc, rc, F, P) {
            super('spacing', F, {
                command: qc,
                style: rc
            }), this.width = P;
        }
    }
    class Ic extends kc {
        static fromJson(qc, rc) {
            var Jc;
            return new Ic(null !== (Jc = qc.variant) && void 0 !== Jc ? Jc : '', qc.body, rc, qc);
        }
        toJson() {
            const Kc = super.toJson();
            return this.variant && (Kc.variant = this.variant), this.leftDelim && (Kc.leftDelim = this.leftDelim), this.rightDelim && (Kc.rightDelim = this.rightDelim), Kc;
        }
        serialize(qc) {
            var Jc, Kc;
            const Lc = this.matchingRightDelim();
            return 'left...right' === this.variant ? ec([
                '\\left' + (null !== (Jc = this.leftDelim) && void 0 !== Jc ? Jc : '.'),
                this.bodyToLatex(qc),
                '\\right' + Lc
            ]) : 'mleft...mright' === this.variant ? ec([
                '\\mleft' + (null !== (Kc = this.leftDelim) && void 0 !== Kc ? Kc : '.'),
                this.bodyToLatex(qc),
                '\\mright' + Lc
            ]) : ec([
                this.leftDelim && '.' !== this.leftDelim ? this.leftDelim : '',
                this.bodyToLatex(qc),
                Lc
            ]);
        }
        matchingRightDelim() {
            var Mc, Nc;
            if (this.rightDelim && '?' !== this.rightDelim)
                return this.rightDelim;
            const Oc = null !== (Mc = this.leftDelim) && void 0 !== Mc ? Mc : '.';
            return null !== (Nc = oc[Oc]) && void 0 !== Nc ? Nc : Oc;
        }
        render(qc) {
            var Jc, Kc, Lc;
            const Mc = new Cb(qc, this.style),
                Nc = new Cb(qc, this.style, 'textstyle'),
                Oc = null !== (Jc = kc.createBox(Mc, this.body, {
                    newList: !0
                })) && void 0 !== Jc ? Jc : new Mb(null, {
                    newList: !0
                }),
                Pc = Oc.height / Nc.scalingFactor,
                Qc = Oc.depth / Nc.scalingFactor,
                Rc = [];
            if (this.leftDelim && Rc.push(this.bind(Nc, Dc('mopen', this.leftDelim, Pc, Qc, Nc, {
                    classes: 'ML__open' + (this.containsCaret ? ' ML__contains-caret' : ''),
                    mode: this.mode,
                    style: this.style
                }))), Oc) {
                if (Oc.children)
                    for (let Sc = 0; Sc < Oc.children.length; Sc++) {
                        const Tc = Oc.children[Sc];
                        if (Tc.delim) {
                            const Uc = Tc.caret;
                            Oc.children[Sc] = this.bind(Mc, Dc('minner', Tc.delim, Pc, Qc, Mc)), Oc.children[Sc].caret = Uc;
                        }
                    }
                Rc.push(Oc);
            }
            if (this.rightDelim) {
                let Sc = this.containsCaret ? ' ML__contains-caret' : '',
                    Tc = this.rightDelim;
                '?' === Tc && (this.context.smartFence ? (Tc = this.matchingRightDelim(), Sc += ' ML__smart-fence__close') : Tc = '.'), Rc.push(this.bind(Nc, Dc('mclose', Tc, Pc, Qc, Nc, {
                    classes: Sc + ' ML__close',
                    mode: this.mode,
                    style: this.style
                })));
            }
            const Sc = null !== (Lc = 'mleft...mright' === this.variant || (null === (Kc = this.leftSibling) || void 0 === Kc ? void 0 : Kc.isFunction)) && void 0 !== Lc && Lc,
                Tc = new Mb(Rc, {
                    type: Sc ? 'mclose' : 'minner',
                    classes: 'left-right'
                });
            return this.caret && (Tc.caret = this.caret), this.bind(Mc, Tc.wrap(Mc));
        }
        constructor(qc, rc, F, P) {
            super('leftright', F, {
                style: P.style,
                displayContainsHighlight: !0
            }), this.variant = qc, this.body = rc, this.leftDelim = P.leftDelim, this.rightDelim = P.rightDelim;
        }
    }
    class Jc extends kc {
        static fromJson(qc, rc) {
            const Kc = new Jc(rc, qc);
            for (const Lc of hc)
                qc[Lc] && Kc.setChildren(qc[Lc], Lc);
            return Kc;
        }
        toJson() {
            return super.toJson();
        }
        render(qc) {
            var Kc;
            const Lc = this.leftSibling,
                Mc = new Cb(qc, {
                    isPhantom: !0
                }),
                Nc = null !== (Kc = Lc.render(Mc)) && void 0 !== Kc ? Kc : new Mb(null),
                Oc = new Mb(null, {
                    height: Nc.height,
                    depth: Nc.depth
                });
            return this.attachSupsub(qc, {
                base: Oc,
                isCharacterBox: Lc.isCharacterBox(),
                type: 'supsub'
            });
        }
        serialize(qc) {
            return this.supsubToLatex(qc);
        }
        constructor(qc, rc) {
            super('msubsup', qc, {
                style: null == rc ? void 0 : rc.style
            });
        }
    }
    class Kc extends kc {
        static fromJson(qc, rc) {
            return new Kc(rc, qc);
        }
        toJson() {
            const Lc = super.toJson();
            return this.placeholderId && (Lc.placeholderId = this.placeholderId), this.value === this.context.placeholderSymbol && delete Lc.value, this.defaultValue && (Lc.defaultValue = this.defaultValue.map(Lc => Lc.toJson())), Lc;
        }
        render(qc) {
            if ('function' == typeof qc.renderPlaceholder)
                return qc.renderPlaceholder(qc, this);
            let Lc = '';
            return this.caret && (Lc += 'ML__placeholder-selected '), this.isSelected && (Lc += ' ML__selected '), this.createBox(qc, {
                classes: Lc
            });
        }
        serialize(qc) {
            var Lc;
            let Mc = null !== (Lc = this.value) && void 0 !== Lc ? Lc : '';
            return Mc === this.context.placeholderSymbol && (Mc = ''), `\\placeholder${ this.placeholderId ? `[${ this.placeholderId }]` : '' }${ this.defaultValue ? `[${ kc.serialize(this.defaultValue, qc) }]` : '' }{${ Mc }}`;
        }
        constructor(qc, rc) {
            var Lc;
            const Mc = (null == rc ? void 0 : rc.value) || qc.placeholderSymbol;
            super('placeholder', qc, {
                mode: null !== (Lc = null == rc ? void 0 : rc.mode) && void 0 !== Lc ? Lc : 'math',
                style: null == rc ? void 0 : rc.style,
                value: Mc,
                command: '\\placeholder'
            }), this.captureSelection = !0, this.placeholderId = null == rc ? void 0 : rc.placeholderId, (null == rc ? void 0 : rc.default) && (this.defaultValue = null == rc ? void 0 : rc.default);
        }
    }
    class Lc extends kc {
        static fromJson(qc, rc) {
            return new Lc(qc.command, rc);
        }
        toJson() {
            return super.toJson();
        }
        render(qc) {
            const Mc = this.createBox(qc, {
                classes: 'ML__error'
            });
            return this.caret && (Mc.caret = this.caret), Mc;
        }
        constructor(qc, rc) {
            super('error', rc, {
                value: qc,
                command: qc,
                mode: 'math'
            }), this.verbatimLatex = qc;
        }
    }
    class Mc extends kc {
        static fromJson(qc, rc) {
            return new Mc(qc.command, rc, qc);
        }
        toJson() {
            const Nc = super.toJson();
            return this.expand && (Nc.expand = !0), void 0 !== this.captureSelection && (Nc.captureSelection = this.captureSelection), this.macroArgs && (Nc.args = this.macroArgs), Nc;
        }
        serialize(qc) {
            return qc.expandMacro && this.expand ? this.bodyToLatex(qc) : this.command + this.macroArgs;
        }
        render(qc) {
            const Nc = kc.createBox(qc, this.body);
            return Nc ? (this.caret && (Nc.caret = this.caret), this.bind(qc, Nc)) : null;
        }
        constructor(qc, rc, F) {
            var Nc, Oc;
            super('macro', rc, {
                command: qc
            }), this.body = F.body, void 0 === F.captureSelection ? F.args ? this.captureSelection = !1 : this.captureSelection = !0 : this.captureSelection = F.captureSelection, this.macroArgs = null !== (Nc = F.args) && void 0 !== Nc ? Nc : '', this.expand = null !== (Oc = F.expand) && void 0 !== Oc && Oc;
        }
    }
    class Nc extends kc {
        static fromJson(qc, rc) {
            return new Nc(qc.command, qc.value, qc.style, rc);
        }
        toJson() {
            return super.toJson();
        }
        render(qc) {
            const Oc = this.createBox(qc);
            return this.caret && (Oc.caret = this.caret), Oc;
        }
        serialize(qc) {
            var Oc;
            return null !== (Oc = this.verbatimLatex) && void 0 !== Oc ? Oc : I('text', this.value.codePointAt(0));
        }
        constructor(qc, rc, F, P) {
            super('text', P, {
                command: qc,
                mode: 'text',
                displayContainsHighlight: !0
            }), this.value = rc, this.verbatimLatex = rc, this.applyStyle(F);
        }
    }

    function Oc(qc) {
        return !/^<({|}|\$|\$\$|space)>$/.test(qc);
    }
    class Pc {
        get currentContext() {
            return this._currentParsingContext;
        }
        get rootContext() {
            let Qc = this._currentParsingContext;
            for (; Qc.parent;)
                Qc = Qc.parent;
            return Qc;
        }
        beginContext(qc) {
            var Qc, Rc, Sc;
            const Tc = {
                parent: this.currentContext,
                mathlist: [],
                style: {
                    ...this.currentContext.style
                },
                parseMode: null !== (Qc = null == qc ? void 0 : qc.mode) && void 0 !== Qc ? Qc : this.currentContext.parseMode,
                mathstyle: null !== (Rc = null == qc ? void 0 : qc.mathstyle) && void 0 !== Rc ? Rc : this.currentContext.mathstyle,
                registers: null,
                tabular: null !== (Sc = null == qc ? void 0 : qc.tabular) && void 0 !== Sc && Sc
            };
            this._currentParsingContext = Tc;
        }
        endContext() {
            this._currentParsingContext = this._currentParsingContext.parent;
        }
        onError(qc) {
            this.errors.push({
                before: fc(this.tokens.slice(this.index, this.index + 10)),
                after: fc(this.tokens.slice(Math.max(0, this.index - 10), this.index)),
                ...qc
            });
        }
        get mathlist() {
            return this.currentContext.mathlist;
        }
        set mathlist(qc) {
            this.currentContext.mathlist = qc;
        }
        get parseMode() {
            return this.currentContext.parseMode;
        }
        set parseMode(qc) {
            this.currentContext.parseMode = qc;
        }
        get tabularMode() {
            return this.currentContext.tabular;
        }
        get style() {
            let Qc = this.currentContext;
            for (; Qc;) {
                if (Qc.style)
                    return Qc.style;
                Qc = Qc.parent;
            }
            return {};
        }
        set style(qc) {
            this.currentContext.style = qc;
        }
        getRegister(qc) {
            var Qc, Rc, Sc;
            if (qc.startsWith('global '))
                return null !== (Rc = null === (Qc = this.rootContext.registers) || void 0 === Qc ? void 0 : Qc[qc.slice(7)]) && void 0 !== Rc ? Rc : 0;
            let Tc = this.currentContext;
            for (; Tc;) {
                if (null === (Sc = Tc.registers) || void 0 === Sc ? void 0 : Sc[qc])
                    return Tc.registers[qc];
                Tc = Tc.parent;
            }
            return 0;
        }
        setRegister(qc, rc) {
            var Qc;
            if (qc.startsWith('global ')) {
                qc = qc.slice(7);
                let Rc = this.currentContext;
                for (; Rc;)
                    (null === (Qc = Rc.registers) || void 0 === Qc ? void 0 : Qc[qc]) && delete Rc.registers[qc], Rc = Rc.parent;
                this.rootContext.registers[qc] = rc;
            } else
                this.currentContext.registers || (this.currentContext.registers = {}), this.currentContext.registers[qc] = rc;
        }
        end() {
            return this.endCount++, this.index >= this.tokens.length || this.endCount > 1000;
        }
        get() {
            return this.endCount = 0, this.index < this.tokens.length ? this.tokens[this.index++] : '';
        }
        peek() {
            return this.tokens[this.index];
        }
        match(qc) {
            return this.tokens[this.index] === qc && (this.index++, !0);
        }
        lastSubsupAtom() {
            let Qc;
            if (this.mathlist.length > 0) {
                if (Qc = this.mathlist[this.mathlist.length - 1], 'msubsup' === Qc.type)
                    return Qc;
                if (void 0 !== Qc.subsupPlacement)
                    return Qc;
            }
            return Qc = new Jc(this.context, {
                style: this.style
            }), this.mathlist.push(Qc), Qc;
        }
        hasPattern(qc) {
            return qc.test(this.tokens[this.index]);
        }
        hasInfixCommand() {
            var Qc;
            const {
                index: Rc
            } = this;
            if (Rc < this.tokens.length && this.tokens[Rc].startsWith('\\')) {
                const Sc = this.context.getDefinition(this.tokens[Rc], this.parseMode);
                return !(!Sc || 'symbol' === Sc.definitionType) && !(Sc.ifMode && !Sc.ifMode.includes(this.parseMode)) && null !== (Qc = Sc.infix) && void 0 !== Qc && Qc;
            }
            return !1;
        }
        matchColumnSeparator() {
            const {
                index: Sc
            } = this;
            return !(!this.tabularMode || '&' !== this.tokens[Sc] || (this.index++, 0));
        }
        matchRowSeparator() {
            const {
                index: Tc
            } = this;
            return !(!this.tabularMode || '\\\\' !== this.tokens[Tc] && '\\cr' !== this.tokens[Tc] || (this.index++, 0));
        }
        placeholder() {
            var Uc;
            const Vc = null === (Uc = this.args) || void 0 === Uc ? void 0 : Uc.call(this, '?');
            return Vc ? Rc(Vc, this.context, {
                parseMode: this.parseMode,
                mathstyle: 'textstyle'
            }) : [new Kc(this.context, {
                mode: this.parseMode,
                style: this.style
            })];
        }
        matchWhitespace() {
            let Wc = !1;
            for (; this.match('<space>');)
                Wc = !0;
            return Wc;
        }
        skipUntilToken(qc) {
            let Qc = this.tokens[this.index];
            for (; Qc && Qc !== qc;)
                Qc = this.tokens[++this.index];
            Qc === qc && this.index++;
        }
        skipFiller() {
            let Rc = !1;
            do {
                const Sc = this.matchWhitespace(),
                    Tc = this.match('\\relax');
                Rc = !Sc && !Tc;
            } while (!Rc);
        }
        matchKeyword(qc) {
            const Qc = this.index;
            let Rc = this.end(),
                Sc = '';
            for (; !Rc;) {
                const Tc = this.get();
                Oc(Tc) ? (Sc += Tc, Rc = this.end() || Sc.length >= qc.length) : Rc = !0;
            }
            const Tc = qc.toUpperCase() === Sc.toUpperCase();
            return Tc || (this.index = Qc), Tc;
        }
        scanString() {
            let Uc = '';
            for (; !this.end();)
                if (this.match('<space>'))
                    Uc += ' ';
                else {
                    const Vc = this.peek();
                    if (']' === Vc)
                        break;
                    if (Oc(Vc))
                        Uc += this.get();
                    else {
                        if (!Vc.startsWith('\\'))
                            break;
                        this.onError({
                            code: 'unbalanced-braces'
                        }), Uc += this.get();
                    }
                }
            return Uc;
        }
        scanBalancedString() {
            let Vc = '',
                Wc = this.end(),
                Xc = 1;
            for (; !Wc;) {
                if (this.match('<space>'))
                    Vc += ' ';
                else {
                    const Yc = this.get();
                    '<{>' === Yc ? (Vc += '{', Xc += 1) : '<}>' === Yc ? (Xc -= 1, Xc > 0 ? Vc += '}' : this.index -= 1) : Vc += '<$>' === Yc ? '$' : '<$$>' === Yc ? '$$' : Yc;
                }
                Wc = 0 === Xc || this.end();
            }
            return Vc;
        }
        matchLiteralArg() {
            var Yc;
            let Zc = '';
            if (this.match('<{>')) {
                let $c = 1;
                for (; $c > 0 && !this.end();) {
                    const _c = this.get();
                    '<}>' === _c ? ($c -= 1, $c > 0 && (Zc += '}')) : '<{>' === _c ? ($c += 1, Zc += '{') : Zc += null !== (Yc = {
                        '<space>': ' ',
                        '<$$>': '$$',
                        '<$>': '$'
                    } [_c]) && void 0 !== Yc ? Yc : _c;
                }
            }
            return Zc;
        }
        scanNumber(Qc = !0) {
            var Rc, Sc;
            let Tc = !1,
                Uc = this.peek();
            for (;
                '<space>' === Uc || '+' === Uc || '-' === Uc;)
                this.get(), '-' === Uc && (Tc = !Tc), Uc = this.peek();
            Qc = Boolean(Qc);
            let Vc = 10,
                Wc = /\d/;
            if (this.match('\''))
                Vc = 8, Wc = /[0-7]/, Qc = !0;
            else if (this.match('"') || this.match('x'))
                Vc = 16, Wc = /[\dA-F]/, Qc = !0;
            else if (this.match('`'))
                return Uc = this.get(), Uc ? Uc.startsWith('\\') && 2 === Uc.length ? (Tc ? -1 : 1) * (null !== (Rc = Uc.codePointAt(1)) && void 0 !== Rc ? Rc : 0) : (Tc ? -1 : 1) * (null !== (Sc = Uc.codePointAt(0)) && void 0 !== Sc ? Sc : 0) : null;
            let Xc = '';
            for (; this.hasPattern(Wc);)
                Xc += this.get();
            if (!Qc && (this.match('.') || this.match(',')))
                for (Xc += '.'; this.hasPattern(Wc);)
                    Xc += this.get();
            const Yc = Qc ? Number.parseInt(Xc, Vc) : Number.parseFloat(Xc);
            return Number.isNaN(Yc) ? null : Tc ? -Yc : Yc;
        }
        scanDimen() {
            var Zc, $c, _c;
            let ad, bd = this.scanNumber(!1);
            if (null === bd) {
                if (!(null === (Zc = this.peek()) || void 0 === Zc ? void 0 : Zc.startsWith('\\')))
                    return null;
                bd = 1;
            }
            return this.matchWhitespace(), this.matchKeyword('pt') ? ad = {
                dimension: bd,
                unit: 'pt'
            } : this.matchKeyword('mm') ? ad = {
                dimension: bd,
                unit: 'mm'
            } : this.matchKeyword('cm') ? ad = {
                dimension: bd,
                unit: 'cm'
            } : this.matchKeyword('ex') ? ad = {
                dimension: bd,
                unit: 'ex'
            } : this.matchKeyword('px') ? ad = {
                dimension: bd,
                unit: 'px'
            } : this.matchKeyword('em') ? ad = {
                dimension: bd,
                unit: 'em'
            } : this.matchKeyword('bp') ? ad = {
                dimension: bd,
                unit: 'bp'
            } : this.matchKeyword('dd') ? ad = {
                dimension: bd,
                unit: 'dd'
            } : this.matchKeyword('pc') ? ad = {
                dimension: bd,
                unit: 'pc'
            } : this.matchKeyword('in') ? ad = {
                dimension: bd,
                unit: 'in'
            } : this.matchKeyword('mu') ? ad = {
                dimension: bd,
                unit: 'mu'
            } : (null === ($c = this.peek()) || void 0 === $c ? void 0 : $c.startsWith('\\')) ? (ad = null !== (_c = Uc(this.getRegister(this.get().slice(1)), this.context)) && void 0 !== _c ? _c : {
                dimension: 0
            }, ad.dimension *= bd) : (this.match('\\relax') || this.onError({
                code: 'missing-unit'
            }), ad = {
                dimension: bd,
                unit: 'pt'
            }), ad;
        }
        scanGlue() {
            const cd = this.scanDimen();
            if (null === cd)
                return null;
            const dd = {
                glue: cd
            };
            return this.matchWhitespace(), this.match('\\relax') || (this.matchKeyword('plus') && this.scanDimen(), this.matchWhitespace(), this.match('\\relax') || (this.matchWhitespace(), this.matchKeyword('minus') && this.scanDimen())), dd;
        }
        scanColspec() {
            this.matchWhitespace();
            const ed = [];
            for (; !this.end() && '<}>' !== this.peek() && ']' !== this.peek();) {
                const fd = this.get();
                'c' === fd || 'r' === fd || 'l' === fd ? ed.push({
                    align: fd
                }) : '|' === fd ? ed.push({
                    separator: 'solid'
                }) : ':' === fd ? ed.push({
                    separator: 'dashed'
                }) : '@' === fd && (this.match('<{>') && (this.beginContext({
                    mode: 'math'
                }), ed.push({
                    gap: this.parse(ed => '<}>' === ed)
                }), this.endContext()), this.match('<}>') || this.onError({
                    code: 'unbalanced-braces'
                }));
            }
            return ed;
        }
        parseModeSet() {
            let fd = '';
            if (this.match('\\(') && (fd = '\\)'), !fd && this.match('\\[') && (fd = '\\]'), !fd)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: '\\)' === fd ? 'textstyle' : 'displaystyle'
            });
            const gd = new Gc(this.parse(gd => gd === fd), this.context, {
                mathstyleName: '\\)' === fd ? 'textstyle' : 'displaystyle',
                latexOpen: '\\]' === fd ? '\\[' : '\\(',
                latexClose: fd,
                boxType: 'mord'
            });
            return this.match(fd) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), gd.hasEmptyBranch('body') ? null : gd;
        }
        parseModeShift() {
            let hd = '';
            if (this.match('<$>') && (hd = '<$>'), !hd && this.match('<$$>') && (hd = '<$$>'), !hd)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: 'textstyle'
            });
            const id = new Gc(this.parse(id => id === hd), this.context, {
                mathstyleName: '<$>' === hd ? 'textstyle' : 'displaystyle',
                latexOpen: '<$>' === hd ? '$ ' : '$$ ',
                latexClose: '<$>' === hd ? ' $' : ' $$'
            });
            return this.match(hd) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), id.hasEmptyBranch('body') ? null : id;
        }
        parseEnvironment() {
            if (!this.match('\\begin'))
                return null;
            const jd = this.parseArgument('string');
            if (!jd)
                return null;
            const kd = function(jd) {
                var ld;
                return null !== (ld = y[jd]) && void 0 !== ld ? ld : null;
            }(jd);
            if (!kd)
                return this.onError({
                    code: 'unknown-environment',
                    arg: jd
                }), null;
            const ld = [];
            if (kd.params)
                for (const md of kd.params)
                    if (md.isOptional)
                        ld.push(this.parseOptionalArgument(md.type));
                    else {
                        const nd = this.parseArgument(md.type);
                        nd || this.onError({
                            code: 'missing-argument',
                            arg: jd
                        }), ld.push(nd);
                    }
            this.beginContext({
                tabular: kd.tabular
            });
            const md = [],
                nd = [];
            let od = [],
                pd = !1;
            do {
                if (this.end() && (this.onError({
                        code: 'unbalanced-environment',
                        arg: jd
                    }), pd = !0), !pd && this.match('\\end') && (this.parseArgument('string') !== jd && this.onError({
                        code: 'unbalanced-environment',
                        arg: jd
                    }), pd = !0), !pd)
                    if (this.matchColumnSeparator())
                        od.push(this.mathlist), this.mathlist = [];
                    else if (this.matchRowSeparator()) {
                    od.push(this.mathlist), this.mathlist = [];
                    let qd = null;
                    this.matchWhitespace(), this.match('[') && (qd = this.scanDimen(), this.matchWhitespace(), this.match(']')), nd.push(null != qd ? qd : {
                        dimension: 0
                    }), md.push(od), od = [];
                } else
                    this.mathlist.push(...this.parse(jd => '<}>' === jd || '&' === jd || '\\end' === jd || '\\cr' === jd || '\\\\' === jd));
            } while (!pd);
            return od.push(this.mathlist), od.length > 0 && md.push(od), this.endContext(), kd.createAtom(this.context, jd, md, nd, ld);
        }
        parse(Qc) {
            this.beginContext(), Qc || (Qc = Qc => '<}>' === Qc);
            let Rc = '',
                Sc = null,
                Tc = [],
                Uc = null;
            const Vc = this.mathlist;
            for (this.mathlist = []; !this.end() && !Qc(this.peek());)
                this.hasInfixCommand() && !Rc ? (Rc = this.get(), Sc = this.context.getDefinition(Rc, 'math'), Sc && (Tc = this.parseArguments(Sc)[1]), Uc = this.mathlist, this.mathlist = []) : this.parseToken();
            let Wc;
            return Rc ? (Tc.unshift(this.mathlist), this.mathlist = Vc, Uc && Tc.unshift(Uc), Wc = [Sc.createAtom(Rc, Tc, this.style, this.context)]) : (Wc = this.mathlist, this.mathlist = Vc), this.endContext(), Wc;
        }
        parseGroup() {
            if (!this.match('<{>'))
                return null;
            const Xc = new Gc(this.parse(Xc => '<}>' === Xc), this.context, {
                mode: this.parseMode,
                latexOpen: '{',
                latexClose: '}'
            });
            return this.match('<}>') || this.onError({
                code: 'unbalanced-braces'
            }), Xc;
        }
        scanSmartFence() {
            if (this.matchWhitespace(), !this.match('('))
                return null;
            this.beginContext();
            let Yc = 1;
            for (; !this.end() && 0 !== Yc;)
                this.match('(') && (Yc += 1), this.match(')') && (Yc -= 1), 0 !== Yc && this.parseToken();
            0 === Yc && this.match(')');
            const Zc = new Ic('', this.mathlist, this.context, {
                leftDelim: '(',
                rightDelim: 0 === Yc ? ')' : '?'
            });
            return this.endContext(), Zc;
        }
        scanDelim() {
            this.matchWhitespace();
            const $c = this.get();
            if (!$c)
                return this.onError({
                    code: 'unexpected-end-of-string'
                }), null;
            let _c = '.';
            ($c.startsWith('\\') || Oc($c)) && (_c = $c);
            const ad = this.context.getDefinition(_c, 'math');
            return ad ? 'function' === ad.definitionType && ad.ifMode && !ad.ifMode.includes(this.parseMode) ? (this.onError({
                code: 'unexpected-delimiter',
                arg: _c
            }), null) : 'symbol' !== ad.definitionType || 'mopen' !== ad.type && 'mclose' !== ad.type ? /^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(_c) ? _c : (this.onError({
                code: 'unexpected-delimiter',
                arg: _c
            }), null) : _c : (this.onError({
                code: 'unknown-command',
                arg: _c
            }), null);
        }
        parseLeftRight() {
            var bd;
            if (this.match('\\right') || this.match('\\mright'))
                return this.onError({
                    code: 'unbalanced-braces'
                }), null;
            let cd = '\\right';
            if (!this.match('\\left')) {
                if (!this.match('\\mleft'))
                    return null;
                cd = '\\mright';
            }
            const dd = this.scanDelim();
            if (!dd)
                return null;
            for (this.beginContext(); !this.end() && !this.match(cd);)
                this.parseToken();
            const ed = this.mathlist;
            this.endContext();
            const fd = null !== (bd = this.scanDelim()) && void 0 !== bd ? bd : '.';
            return new Ic('\\right' === cd ? 'left...right' : 'mleft...mright', ed, this.context, {
                leftDelim: dd,
                rightDelim: fd,
                style: this.style
            });
        }
        parseSupSub() {
            if ('math' !== this.parseMode)
                return !1;
            let gd = this.peek();
            if ('^' !== gd && '_' !== gd && '\'' !== gd)
                return !1;
            for (;
                '^' === gd || '_' === gd || '\'' === gd;) {
                if (this.match('\''))
                    this.match('\'') ? this.lastSubsupAtom().addChild(new kc('mord', this.context, {
                        command: '\\doubleprime',
                        mode: 'math',
                        value: '\u2032\u2032'
                    }), 'superscript') : this.lastSubsupAtom().addChild(new kc('mord', this.context, {
                        command: '\\prime',
                        mode: 'math',
                        value: '\u2032'
                    }), 'superscript');
                else if (this.match('^') || this.match('_')) {
                    const hd = this.parseArgument('math');
                    hd ? this.lastSubsupAtom().addChildren(hd, '_' === gd ? 'subscript' : 'superscript') : this.lastSubsupAtom().createBranch('_' === gd ? 'subscript' : 'superscript');
                }
                gd = this.peek();
            }
            return !0;
        }
        parseLimits() {
            const hd = this.match('\\limits'),
                id = !hd && this.match('\\nolimits'),
                jd = !id && !hd && this.match('\\displaylimits');
            if (!hd && !id && !jd)
                return !1;
            const kd = this.mathlist.length > 0 ? this.mathlist[this.mathlist.length - 1] : null;
            return !(null === kd || 'mop' !== kd.type || (hd ? (kd.subsupPlacement = 'over-under', kd.explicitSubsupPlacement = !0, 0) : id ? (kd.subsupPlacement = 'adjacent', kd.explicitSubsupPlacement = !0, 0) : !jd || (kd.subsupPlacement = 'auto', kd.explicitSubsupPlacement = !0, 0)));
        }
        parseArguments(Qc) {
            if (!(null == Qc ? void 0 : Qc.params))
                return [
                    void 0,
                    []
                ];
            let Rc;
            const Sc = [];
            let Tc = Qc.infix ? 2 : 0;
            for (; Tc < Qc.params.length;) {
                const Uc = Qc.params[Tc];
                if ('rest' === Uc.type)
                    Sc.push(this.parse(Qc => '<}>' === Qc || '&' === Qc || '\\end' === Qc || '\\cr' === Qc || '\\\\' === Qc));
                else if (Uc.isOptional)
                    Sc.push(this.parseOptionalArgument(Uc.type));
                else if (Uc.type.endsWith('*'))
                    Rc = Uc.type.slice(0, -1);
                else {
                    const Vc = this.parseArgument(Uc.type);
                    if (null !== Vc)
                        Sc.push(Vc);
                    else
                        switch (this.onError({
                                code: 'missing-argument'
                            }), Uc.type) {
                            case 'number':
                                Sc.push(0);
                                break;
                            case 'dimen':
                                Sc.push({
                                    dimension: 0,
                                    unit: 'pt'
                                });
                                break;
                            case 'glue':
                                Sc.push({
                                    glue: {
                                        dimension: 0,
                                        unit: 'pt'
                                    }
                                });
                                break;
                            case 'string':
                            case 'balanced-string':
                                Sc.push('');
                                break;
                            case 'delim':
                                Sc.push('.');
                                break;
                            case 'colspec':
                                Sc.push('llllllllll');
                                break;
                            default:
                                Sc.push(this.placeholder());
                        }
                }
                Tc += 1;
            }
            return [
                Rc,
                Sc
            ];
        }
        parseArgument(Qc) {
            var Rc, Sc;
            this.skipFiller(), 'auto' === Qc && (Qc = this.parseMode);
            let Tc = null;
            const Uc = '<{>' === this.peek();
            if (!Uc) {
                if ('delim' === Qc)
                    return null !== (Rc = this.scanDelim()) && void 0 !== Rc ? Rc : '.';
                if ('text' === Qc || 'math' === Qc) {
                    this.beginContext();
                    const Vc = this.parseSimpleToken();
                    return this.endContext(), Vc;
                }
            }
            if (Uc && this.get(), 'text' === Qc || 'math' === Qc) {
                this.beginContext({
                    mode: Qc
                });
                do {
                    this.mathlist.push(...this.parse());
                } while (!this.match('<}>') && !this.end());
            } else if (this.beginContext(), 'string' === Qc ? Tc = this.scanString() : 'balanced-string' === Qc ? Tc = this.scanBalancedString() : 'number' === Qc ? Tc = this.scanNumber() : 'colspec' === Qc ? Tc = this.scanColspec() : 'dimen' === Qc ? Tc = this.scanDimen() : 'glue' === Qc ? Tc = this.scanGlue() : 'delim' === Qc && (Tc = null !== (Sc = this.scanDelim()) && void 0 !== Sc ? Sc : '.'), Uc && this.skipUntilToken('<}>'), null === Tc)
                return this.endContext(), null;
            const Vc = this.mathlist;
            return this.endContext(), null != Tc ? Tc : Vc;
        }
        parseOptionalArgument(Qc) {
            var Rc, Sc;
            if (Qc = 'auto' === Qc ? this.parseMode : Qc, this.matchWhitespace(), !this.match('['))
                return null;
            let Tc = null;
            for (; !this.end() && !this.match(']');)
                if ('string' === Qc)
                    Tc = this.scanString();
                else if ('number' === Qc)
                Tc = this.scanNumber();
            else if ('dimen' === Qc)
                Tc = this.scanDimen();
            else if ('glue' === Qc)
                Tc = this.scanGlue();
            else if ('colspec' === Qc)
                Tc = this.scanColspec();
            else if ('bbox' === Qc) {
                const Uc = this.scanString().toLowerCase().trim().split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/),
                    Vc = {};
                for (const Wc of Uc) {
                    const Xc = null === (Sc = (Rc = this.context).backgroundColorMap) || void 0 === Sc ? void 0 : Sc.call(Rc, Wc);
                    if (Xc)
                        Vc.backgroundcolor = Xc;
                    else {
                        const Yc = Wc.match(/^\s*([\d.]+)\s*([a-z]{2})/);
                        if (Yc)
                            Vc.padding = Yc[0];
                        else {
                            const Zc = Wc.match(/^\s*border\s*:\s*(.*)/);
                            Zc && (Vc.border = Zc[1]);
                        }
                    }
                }
                Wc = Vc;
            } else
                'math' === Qc && (this.beginContext({
                    mode: 'math'
                }), Tc = this.mathlist.concat(this.parse(Qc => ']' === Qc)), this.endContext());
            return Tc;
        }
        parseCommand(Qc) {
            var Rc, Sc, Tc, Uc, Vc, Wc, Xc;
            if ('\\placeholder' === Qc) {
                const Yc = this.parseOptionalArgument('string'),
                    Zc = this.parseOptionalArgument('math'),
                    $c = null !== (Rc = this.parseArgument('string')) && void 0 !== Rc ? Rc : void 0;
                return [new Kc(this.context, {
                    mode: this.parseMode,
                    placeholderId: Yc,
                    value: $c,
                    default: Zc,
                    style: this.style
                })];
            }
            let Yc = null;
            if ('\\char' === Qc) {
                const Zc = this.index;
                let $c = Math.floor(null !== (Sc = this.scanNumber(!0)) && void 0 !== Sc ? Sc : Number.NaN);
                (!Number.isFinite($c) || $c < 0 || $c > 1114111) && ($c = 10067);
                const _c = '\\char' + fc(this.tokens.slice(Zc, this.index));
                return Yc = new kc('math' === this.parseMode ? 'mord' : 'text', this.context, {
                    command: '\\char',
                    mode: this.parseMode,
                    value: String.fromCodePoint($c),
                    serialize: () => _c
                }), Yc.verbatimLatex = _c, [Yc];
            }
            if ('\\hskip' === Qc || '\\kern' === Qc) {
                const Zc = this.scanGlue();
                return Zc ? [new Hc(Qc, this.style, this.context, Zc)] : null;
            }
            if (Yc = this.scanMacro(Qc), Yc)
                return [Yc];
            const Zc = this.context.getDefinition(Qc, this.parseMode);
            if (!Zc)
                return this.onError({
                    code: 'unknown-command',
                    arg: Qc
                }), [new Lc(Qc, this.context)];
            const $c = this.index;
            if ('symbol' === Zc.definitionType) {
                const _c = {
                    ...this.style
                };
                Zc.variant && (_c.variant = Zc.variant), Yc = new kc(null !== (Tc = Zc.type) && void 0 !== Tc ? Tc : 'mop', this.context, {
                    command: Qc,
                    style: _c,
                    value: String.fromCodePoint(Zc.codepoint),
                    mode: this.parseMode
                });
            } else {
                if (Zc.ifMode && !Zc.ifMode.includes(this.parseMode))
                    return [];
                const ad = this.parseMode;
                Zc.applyMode && (this.parseMode = Zc.applyMode);
                const [bd, cd] = this.parseArguments(Zc);
                if (this.parseMode = ad, !cd)
                    return null;
                if (Zc.applyMode && !Zc.applyStyle && !Zc.createAtom)
                    return cd[0];
                if (Zc.infix)
                    return this.onError({
                        code: 'too-many-infix-commands',
                        arg: Qc
                    }), null;
                if ('function' == typeof Zc.createAtom)
                    Yc = Zc.createAtom(Qc, cd, this.style, this.context), bd && (Yc.body = null !== (Uc = this.parseArgument(bd)) && void 0 !== Uc ? Uc : void 0);
                else if ('function' == typeof Zc.applyStyle) {
                    const dd = Zc.applyStyle(Qc, cd, this.context),
                        ed = this.parseMode;
                    if (Zc.applyMode && (this.parseMode = Zc.applyMode), bd) {
                        const fd = this.style;
                        this.style = {
                            ...this.style,
                            ...dd
                        };
                        const gd = this.parseArgument(bd);
                        return this.style = fd, this.parseMode = ed, gd;
                    }
                    this.style = {
                        ...this.style,
                        ...dd
                    }, this.parseMode = ed;
                } else
                    Yc = new kc('mop', this.context, {
                        command: null !== (Vc = Zc.command) && void 0 !== Vc ? Vc : Qc,
                        style: {
                            ...this.style
                        },
                        value: Qc,
                        mode: null !== (Wc = Zc.applyMode) && void 0 !== Wc ? Wc : this.parseMode
                    });
            }
            if (Yc instanceof kc && void 0 === Yc.verbatimLatex && !/^\\(llap|rlap|class|cssId|htmlData)$/.test(Qc) && (Yc.verbatimLatex = (null !== (Xc = Yc.command) && void 0 !== Xc ? Xc : '') + fc(this.tokens.slice($c, this.index)), 0 === Yc.verbatimLatex.length && (Yc.verbatimLatex = void 0), Yc.isFunction && this.smartFence)) {
                const _c = this.scanSmartFence();
                if (_c)
                    return [
                        Yc,
                        _c
                    ];
            }
            return Yc ? [Yc] : null;
        }
        parseLiteral(Qc) {
            const Rc = Gb.createAtom(this.parseMode, Qc, this.context, {
                ...this.style
            });
            if (!Rc)
                return null;
            if (Rc.isFunction && this.smartFence) {
                const Sc = this.scanSmartFence();
                if (Sc)
                    return [
                        Rc,
                        Sc
                    ];
            }
            return [Rc];
        }
        parseSimpleToken() {
            const Sc = this.get();
            return Sc ? '<space>' === Sc ? 'text' === this.parseMode ? [new Nc(' ', ' ', this.style, this.context)] : null : Sc.startsWith('\\') ? this.parseCommand(Sc) : Oc(Sc) ? this.parseLiteral(Sc) : ('<}>' === Sc ? this.onError({
                latex: '',
                code: 'unbalanced-braces'
            }) : this.onError({
                latex: '',
                code: 'unexpected-token',
                arg: Sc
            }), null) : null;
        }
        scanMacro(Qc) {
            var Rc;
            const Sc = this.context.getMacro(Qc);
            if (!Sc)
                return null;
            const Tc = this.index,
                Uc = Sc.args,
                Vc = {
                    '?': null === (Rc = this.args) || void 0 === Rc ? void 0 : Rc.call(this, '?')
                };
            for (let Wc = 1; Wc <= Uc; Wc++)
                Vc[Wc] = this.matchLiteralArg();
            return new Mc(Wc, this.context, {
                expand: Sc.expand,
                captureSelection: Sc.captureSelection,
                args: fc(this.tokens.slice(Tc, this.index)),
                body: Rc(Sc.def, this.context, {
                    parseMode: this.parseMode,
                    args: Wc => Vc[Wc],
                    mathstyle: this.currentContext.mathstyle
                })
            });
        }
        parseToken() {
            var Xc, Yc, Zc, $c;
            let _c = null !== ($c = null !== (Zc = null !== (Yc = null !== (Xc = this.parseEnvironment()) && void 0 !== Xc ? Xc : this.parseModeShift()) && void 0 !== Yc ? Yc : this.parseModeSet()) && void 0 !== Zc ? Zc : this.parseGroup()) && void 0 !== $c ? $c : this.parseLeftRight();
            if (null === _c) {
                if (this.parseSupSub())
                    return !0;
                if (this.parseLimits())
                    return !0;
                _c = this.parseSimpleToken();
            }
            return Tc(_c) ? this.mathlist.push(..._c) : _c && this.mathlist.push(_c), null !== _c;
        }
        constructor(Qc, rc, F) {
            var Rc, Sc, Tc, Uc, Vc, Wc;
            this.index = 0, this.endCount = 0, this.tokens = Qc, this.context = rc, this.errors = [], this.args = null !== (Rc = F.args) && void 0 !== Rc ? Rc : null, this.smartFence = null !== (Sc = F.smartFence) && void 0 !== Sc ? Sc : rc.smartFence, this._currentParsingContext = {
                parent: void 0,
                mathlist: [],
                style: null !== (Tc = F.style) && void 0 !== Tc ? Tc : {},
                parseMode: null !== (Uc = F.parseMode) && void 0 !== Uc ? Uc : 'math',
                mathstyle: null !== (Vc = F.mathstyle) && void 0 !== Vc ? Vc : 'displaystyle',
                registers: null !== (Wc = F.registers) && void 0 !== Wc ? Wc : rc.registers,
                tabular: !1
            };
        }
    }

    function Rc(Qc, rc, F) {
        var Sc, Tc, Uc;
        const Vc = null !== (Sc = null == F ? void 0 : F.args) && void 0 !== Sc ? Sc : null,
            Wc = new Pc(cc(Qc, Vc), rc, {
                args: Vc,
                mathstyle: null !== (Tc = null == F ? void 0 : F.mathstyle) && void 0 !== Tc ? Tc : 'displaystyle',
                parseMode: null !== (Uc = null == F ? void 0 : F.parseMode) && void 0 !== Uc ? Uc : 'math'
            }),
            Xc = [];
        for (; !Wc.end();)
            Xc.push(...Wc.parse());
        return Xc;
    }

    function Sc(Qc, rc, F) {
        var Tc;
        const Uc = new Pc(cc(Qc, null), rc, {
            args: null,
            mathstyle: 'displaystyle',
            parseMode: null !== (Tc = null == F ? void 0 : F.parseMode) && void 0 !== Tc ? Tc : 'math'
        });
        for (; !Uc.end();)
            Uc.parse();
        return Uc.errors;
    }

    function Tc(Qc, rc, F) {
        return 'object' == typeof Qc && 'glue' in Qc ? Qc : 'object' == typeof Qc && 'dimension' in Qc ? {
            glue: Qc
        } : 'number' == typeof Qc ? {
            glue: {
                dimension: Qc
            }
        } : new Pc(cc(Qc), rc, {
            registers: F
        }).scanGlue();
    }

    function Uc(Qc, rc, F) {
        return 'number' == typeof Qc ? {
            dimension: Qc,
            unit: 'pt'
        } : ('object' == typeof Qc && 'glue' in Qc && (Qc = Qc.glue), 'object' == typeof Qc && 'dimension' in Qc ? Qc : new Pc(cc(Qc), rc, {
            registers: F
        }).scanDimen());
    }
    class Vc extends kc {
        static fromJson(Qc, rc) {
            return new Vc(Qc.command, Qc.body, rc, Qc);
        }
        toJson() {
            return {
                ...super.toJson(),
                framecolor: this.framecolor,
                verbatimFramecolor: this.verbatimFramecolor,
                backgroundcolor: this.backgroundcolor,
                verbatimBackgroundcolor: this.verbatimBackgroundcolor,
                padding: this.padding,
                border: this.border
            };
        }
        render(Qc) {
            const Wc = new Cb(Qc, this.style),
                Xc = Ab(Wc.getRegisterAsDimension('fboxsep')),
                Yc = void 0 === this.padding ? Xc : Ab(Uc(this.padding, {
                    ...this.context,
                    registers: Qc.registers
                })),
                Zc = kc.createBox(Qc, this.body);
            if (!Zc)
                return null;
            Zc.setStyle('vertical-align', -Zc.height, 'em');
            const $c = new Mb(Zc, {
                    type: 'mord'
                }),
                _c = new Mb(null, {
                    classes: 'ML__box'
                });
            _c.height = $c.height + Yc, _c.depth = $c.depth + Yc, _c.setStyle('box-sizing', 'border-box'), _c.setStyle('position', 'absolute'), _c.setStyle('height', $c.height + $c.depth + 2 * Yc, 'em'), 0 === Yc ? _c.setStyle('width', '100%') : (_c.setStyle('width', `calc(100% + ${ 2 * Yc }em)`), _c.setStyle('top', Xc, 'em'), _c.setStyle('left', -Yc, 'em')), _c.setStyle('z-index', '-1'), this.backgroundcolor && _c.setStyle('background-color', this.backgroundcolor), this.framecolor && _c.setStyle('border', `${ Ab(Wc.getRegisterAsDimension('fboxrule')) }em solid ${ this.framecolor }`), this.border && _c.setStyle('border', this.border), $c.setStyle('display', 'inline-block'), $c.setStyle('height', Zc.height + Zc.depth, 'em'), $c.setStyle('vertical-align', -Yc, 'em');
            const ad = new Mb([
                _c,
                $c
            ]);
            return ad.setStyle('position', 'relative'), ad.setStyle('display', 'inline-block'), ad.setStyle('line-height', 0), ad.height = $c.height + Yc, ad.depth = $c.depth + Yc, ad.left = Yc, ad.right = Yc, ad.setStyle('height', $c.height + Yc, 'em'), ad.setStyle('top', $c.depth - $c.height, 'em'), ad.setStyle('vertical-align', $c.depth + Yc, 'em'), this.caret && (ad.caret = this.caret), this.attachSupsub(Qc, {
                base: ad
            });
        }
        constructor(Qc, rc, F, P) {
            super('box', F, {
                command: Qc,
                serialize: P.serialize,
                style: P.style
            }), this.body = rc, this.framecolor = P.framecolor, this.verbatimFramecolor = P.verbatimBackgroundcolor, this.backgroundcolor = P.backgroundcolor, this.verbatimBackgroundcolor = P.verbatimBackgroundcolor, this.padding = P.padding, this.border = P.border;
        }
    }
    class Wc extends kc {
        static fromJson(Qc, rc) {
            return new Wc(rc, Qc.environmentName, Qc.array, Qc.rowGaps, Qc);
        }
        toJson() {
            const Xc = {
                ...super.toJson(),
                environmentName: this.environmentName,
                array: this.array.map(Xc => Xc.map(Xc => Xc.map(Xc => Xc.toJson()))),
                rowGaps: this.rowGaps,
                columns: this.colFormat,
                colSeparationType: this.colSeparationType
            };
            return 1 !== this.arraystretch && (Xc.arraystretch = this.arraystretch), this.arraycolsep && (Xc.arraycolsep = this.arraycolsep), this.leftDelim && (Xc.leftDelim = this.leftDelim), this.rightDelim && (Xc.rightDelim = this.rightDelim), void 0 !== this.jot && (Xc.jot = this.jot), Xc;
        }
        branch(Qc) {
            var Xc;
            if (jc(Qc))
                return null !== (Xc = this.array[Qc[0]][Qc[1]]) && void 0 !== Xc ? Xc : void 0;
        }
        get branches() {
            const Yc = super.branches;
            return this.array.forEach((Xc, F) => {
                this.array[F].forEach((Xc, P) => {
                    this.array[F][P] && Yc.push([
                        F,
                        P
                    ]);
                });
            }), Yc;
        }
        createBranch(Qc) {
            var Xc;
            return jc(Qc) ? (this.isDirty = !0, null !== (Xc = this.branch(Qc)) && void 0 !== Xc ? Xc : []) : [];
        }
        get rowCount() {
            return this.array.length;
        }
        get colCount() {
            return this.array[0].length;
        }
        get maxColumns() {
            return this.colFormat.filter(Qc => Boolean(Qc.align)).length;
        }
        removeBranch(Qc) {
            if (ic(Qc))
                return super.removeBranch(Qc);
            const Xc = this.branch(Qc);
            return this.array[Qc[0]][Qc[1]] = void 0, Xc.forEach(Qc => {
                Qc.parent = void 0, Qc.treeBranch = void 0;
            }), Xc.shift(), this.isDirty = !0, Xc;
        }
        get hasChildren() {
            return this.children.length > 0;
        }
        get children() {
            const Yc = [];
            for (const Zc of this.array)
                for (const $c of Zc)
                    if ($c)
                        for (const _c of $c)
                            Yc.push(..._c.children), Yc.push(_c);
            return [
                ...Yc,
                ...super.children
            ];
        }
        render(Qc) {
            var Xc, Yc, Zc, $c, _c;
            const ad = new Cb(Qc, this.style, this.mathstyleName),
                bd = ad.getRegisterAsEm('arrayrulewidth'),
                cd = ad.getRegisterAsEm('arraycolsep'),
                dd = ad.getRegisterAsEm('doublerulesep'),
                ed = null !== (Xc = this.arraystretch) && void 0 !== Xc ? Xc : 1;
            let fd = 'number' == typeof this.arraycolsep ? this.arraycolsep : cd;
            'small' === this.colSeparationType && (fd = new Cb(Qc, void 0, 'scriptstyle').scalingFactor / Qc.scalingFactor * 0.2778);
            const gd = 1.2 * ed,
                hd = 0.7 * gd,
                id = 0.3 * gd;
            let jd = 0;
            const kd = [];
            let ld = 0;
            const md = this.array.length;
            for (let nd = 0; nd < md; ++nd) {
                const od = this.array[nd];
                ld = Math.max(ld, od.length);
                const pd = new Cb(ad, this.style, this.mathstyleName);
                let qd = hd / pd.scalingFactor,
                    rd = id / pd.scalingFactor;
                const sd = {
                    cells: [],
                    height: 0,
                    depth: 0,
                    pos: 0
                };
                for (const td of od) {
                    const ud = null !== (Yc = kc.createBox(pd, td, {
                        newList: !0
                    })) && void 0 !== Yc ? Yc : new Mb(null, {
                        newList: !0
                    });
                    rd = Math.max(rd, ud.depth), qd = Math.max(qd, ud.height), sd.cells.push(ud);
                }
                let ud = null !== (Zc = Ab(this.rowGaps[td])) && void 0 !== Zc ? Zc : 0;
                ud > 0 && (ud += id, rd = Math.max(rd, ud), ud = 0), void 0 !== this.jot && (rd += this.jot), sd.height = qd, sd.depth = rd, jd += qd, sd.pos = jd, jd += rd + ud, kd.push(sd);
            }
            const od = jd / 2 + 0.25,
                pd = [];
            for (let qd = 0; qd < ld; qd++) {
                const rd = [];
                for (const sd of kd) {
                    const td = sd.cells[qd];
                    td.depth = sd.depth, td.height = sd.height, rd.push({
                        box: td,
                        shift: sd.pos - od
                    });
                }
                rd.length > 0 && pd.push(new Vb({
                    individualShift: rd
                }));
            }
            const rd = [];
            let sd = !1,
                td = !1,
                ud = 0,
                vd = !this.leftDelim;
            const {
                colFormat: wd
            } = this;
            for (const xd of wd) {
                if ('align' in xd && ud >= pd.length)
                    break;
                if ('align' in xd)
                    sd ? rd.push(Zc(2 * fd)) : (td || vd) && rd.push(Zc(fd)), rd.push(new Mb(pd[ud], {
                        classes: 'col-align-' + xd.align
                    })), ud++, sd = !0, td = !1, vd = !1;
                else if ('gap' in xd) {
                    if ('number' == typeof xd.gap)
                        rd.push(Zc(xd.gap));
                    else {
                        const yd = $c(qd, kd, od, xd.gap);
                        yd && rd.push(yd);
                    }
                    sd = !1, td = !1, vd = !1;
                } else if ('separator' in xd) {
                    const yd = new Mb(null, {
                        classes: 'vertical-separator'
                    });
                    yd.setStyle('height', jd, 'em'), yd.setStyle('border-right', `${ bd }em ${ xd.separator } currentColor`), yd.setStyle('vertical-align', -(jd - od), 'em');
                    let zd = 0;
                    td ? zd = dd - bd : sd && (zd = fd - bd), yd.left = zd, rd.push(yd), sd = !1, td = !0, vd = !1;
                }
            }
            sd && !this.rightDelim && rd.push(Zc(fd));
            const yd = new Mb(rd, {
                classes: 'mtable'
            });
            if (!(this.leftDelim && '.' !== this.leftDelim || this.rightDelim && '.' !== this.rightDelim))
                return this.caret && (yd.caret = this.caret), yd;
            const zd = yd.height,
                Ad = yd.depth,
                Bd = this.bind(qd, new Mb([
                    this.bind(qd, Dc('mopen', null !== ($c = this.leftDelim) && void 0 !== $c ? $c : '.', zd, Ad, ad)),
                    yd,
                    this.bind(qd, Dc('mclose', null !== (_c = this.rightDelim) && void 0 !== _c ? _c : '.', zd, Ad, ad))
                ], {
                    type: 'mord'
                }));
            return Bd ? (this.caret && (Bd.caret = this.caret), this.attachSupsub(qd, {
                base: Bd
            })) : null;
        }
        serialize(Qc) {
            let Xc = '\\begin{' + this.environmentName + '}';
            if ('array' === this.environmentName) {
                if (Xc += '{', void 0 !== this.colFormat)
                    for (const Yc of this.colFormat)
                        'align' in Yc ? Xc += Yc.align : 'separator' in Yc && 'solid' === Yc.separator ? Xc += '|' : 'separator' in Yc && 'dashed' === Yc.separator && (Xc += ':');
                Xc += '}';
            }
            for (let Yc = 0; Yc < this.array.length; Yc++) {
                for (let Zc = 0; Zc < this.array[Yc].length; Zc++)
                    Zc > 0 && (Xc += ' & '), Xc = ec([
                        Xc,
                        kc.serialize(this.array[Yc][Zc], Qc)
                    ]);
                Yc < this.array.length - 1 && (Xc += ' \\\\ ');
            }
            return Xc += '\\end{' + this.environmentName + '}', Xc;
        }
        getCell(Qc, rc) {
            return this.array[Qc][rc];
        }
        setCell(Qc, rc, F) {
            for (const Xc of this.array[Qc][rc])
                Xc.parent = void 0, Xc.treeBranch = void 0;
            let Yc = Zc;
            0 !== Zc.length && 'first' === Zc[0].type || (Yc = [
                new kc('first', this.context, {
                    mode: this.mode
                }),
                ...Zc
            ]), this.array[Qc][rc] = Yc;
            for (const $c of Yc)
                $c.parent = this, $c.treeBranch = [
                    Qc,
                    rc
                ];
            this.isDirty = !0;
        }
        addRowBefore(Qc) {
            const Xc = [];
            for (let Yc = 0; Yc < this.colCount; Yc++)
                Xc.push(Yc(this));
            this.array.splice(Yc, 0, Xc);
            for (let Zc = $c; Zc < this.rowCount; Zc++)
                for (let _c = 0; _c < this.colCount; _c++) {
                    const ad = this.array[Zc][_c];
                    if (ad)
                        for (const bd of ad)
                            bd.treeBranch = [
                                Zc,
                                _c
                            ];
                }
            this.isDirty = !0;
        }
        addRowAfter(Qc) {
            const Xc = [];
            for (let Yc = 0; Yc < this.colCount; Yc++)
                Xc.push(Yc(this));
            this.array.splice(Yc + 1, 0, Xc);
            for (let Zc = Yc + 1; Zc < this.rowCount; Zc++)
                for (let $c = 0; $c < this.colCount; $c++) {
                    const _c = this.array[Zc][$c];
                    if (_c)
                        for (const ad of _c)
                            ad.treeBranch = [
                                Zc,
                                $c
                            ];
                }
            this.isDirty = !0;
        }
        removeRow(Qc) {
            const Xc = this.array.splice(Qc, 1);
            for (const Yc of Xc)
                for (const Zc of Yc)
                    if (Zc)
                        for (const $c of Zc)
                            $c.parent = void 0, $c.treeBranch = void 0;
            for (let $c = _c; $c < this.rowCount; $c++)
                for (let ad = 0; ad < this.colCount; ad++) {
                    const bd = this.array[$c][ad];
                    if (bd)
                        for (const cd of bd)
                            cd.treeBranch = [
                                $c,
                                ad
                            ];
                }
            this.isDirty = !0;
        }
        addColumnBefore(Qc) {
            for (const Xc of this.array)
                Xc.splice(Qc, 0, Yc(this));
            for (let Yc = 0; Yc < this.rowCount; Yc++)
                for (let Zc = $c; Zc < this.colCount; Zc++) {
                    const _c = this.array[Yc][Zc];
                    if (_c)
                        for (const ad of _c)
                            ad.treeBranch = [
                                Yc,
                                Zc
                            ];
                }
            this.isDirty = !0;
        }
        addColumnAfter(Qc) {
            for (const Xc of this.array)
                Xc.splice(Qc + 1, 0, Yc(this));
            for (let Yc = 0; Yc < this.rowCount; Yc++)
                for (let Zc = Qc + 1; Zc < this.colCount; Zc++) {
                    const $c = this.array[Yc][Zc];
                    if ($c)
                        for (const _c of $c)
                            _c.treeBranch = [
                                Yc,
                                Zc
                            ];
                }
            this.isDirty = !0;
        }
        addColumn() {
            this.addColumnAfter(this.colCount - 1);
        }
        removeColumn(Qc) {
            for (const Xc of this.array) {
                const Yc = Xc.splice(Qc, 1);
                for (const Zc of Yc)
                    if (Zc)
                        for (const $c of Zc)
                            $c.parent = void 0, $c.treeBranch = void 0;
            }
            for (let Yc = 0; Yc < this.rowCount; Yc++)
                for (let Zc = $c; Zc < this.colCount; Zc++) {
                    const _c = this.array[Yc][Zc];
                    if (_c)
                        for (const ad of _c)
                            ad.treeBranch = [
                                Yc,
                                Zc
                            ];
                }
            this.isDirty = !0;
        }
        get cells() {
            const _c = [];
            for (const ad of this.array)
                for (const bd of ad)
                    bd && _c.push(bd);
            return _c;
        }
        constructor(Qc, rc, F, P, Xc = {}) {
            var Yc, Zc;
            super('array', Qc), this.environmentName = rc, this.rowGaps = P, Xc.mathstyleName && (this.mathstyleName = Xc.mathstyleName), Xc.columns && (0 === Xc.columns.length ? this.colFormat = [{
                align: 'l'
            }] : this.colFormat = Xc.columns), this.colFormat || (this.colFormat = [{
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                }
            ]), this.array = function(Qc, rc, F, P) {
                let $c = 0;
                for (const _c of P)
                    'align' in _c && ($c += 1);
                let ad = 0;
                const bd = [];
                for (const cd of F) {
                    let dd = 0;
                    for (ad = Math.max(ad, Math.min(cd.length, $c)); dd < cd.length;) {
                        const ed = [],
                            fd = Math.min(cd.length, dd + $c);
                        for (; dd < fd;)
                            0 === cd[dd].length ? ed.push([new kc('first', _c, {
                                mode: rc.mode
                            })]) : 'first' !== cd[dd][0].type ? ed.push([
                                new kc('first', _c, {
                                    mode: rc.mode
                                }),
                                ...cd[dd]
                            ]) : ed.push(cd[dd]), dd += 1;
                        bd.push(ed);
                    }
                }
                1 === bd[bd.length - 1].length && 0 === bd[bd.length - 1][0].length && bd.pop();
                const dd = [];
                for (const ed of bd) {
                    if (ed.length !== ad)
                        for (let fd = ed.length; fd < ad; fd++)
                            ed.push([
                                new kc('first', _c, {
                                    mode: rc.mode
                                }),
                                new Kc(_c)
                            ]);
                    dd.push(ed);
                }
                let fd = 0,
                    gd = 0;
                for (const hd of dd) {
                    gd = 0;
                    for (const id of hd) {
                        for (const jd of id)
                            jd.parent = rc, jd.treeBranch = [
                                fd,
                                gd
                            ];
                        gd += 1;
                    }
                    fd += 1;
                }
                return rc.isDirty = !0, dd;
            }(Qc, this, F, this.colFormat), Xc.leftDelim && (this.leftDelim = Xc.leftDelim), Xc.rightDelim && (this.rightDelim = Xc.rightDelim), void 0 !== Xc.jot && (this.jot = Xc.jot), Xc.arraycolsep && (this.arraycolsep = Xc.arraycolsep), this.colSeparationType = Xc.colSeparationType, this.arraystretch = null !== (Yc = Xc.arraystretch) && void 0 !== Yc ? Yc : 1, this.minColumns = null !== (Zc = Xc.minColumns) && void 0 !== Zc ? Zc : 1;
        }
    }

    function Yc(Qc) {
        const Zc = new kc('first', Qc.context, {
            mode: Qc.mode
        });
        Zc.parent = Qc;
        const $c = new Kc(Qc.context, {
            mode: Qc.mode
        });
        return $c.parent = Qc, [
            Zc,
            $c
        ];
    }

    function Zc(Qc) {
        const $c = new Mb(null, {
            classes: 'arraycolsep'
        });
        return $c.width = Qc, $c;
    }

    function $c(Qc, rc, F, P) {
        if (!P)
            return null;
        const _c = [];
        for (const ad of rc) {
            const bd = kc.createBox(Qc, P, {
                newList: !0
            });
            bd && (bd.depth = ad.depth, bd.height = ad.height, _c.push({
                box: bd,
                shift: ad.pos - F
            }));
        }
        return new Vb({
            individualShift: _c
        }).wrap(Qc);
    }
    class _c extends kc {
        static fromJson(Qc, rc) {
            return new _c(Qc.value, rc, Qc);
        }
        toJson() {
            return super.toJson();
        }
        get computedStyle() {
            return {};
        }
        render(Qc) {
            const ad = new Mb(this.value, {
                classes: 'ML__composition',
                type: 'composition'
            });
            return this.bind(Qc, ad), this.caret && (ad.caret = this.caret), ad;
        }
        serialize(Qc) {
            return '';
        }
        constructor(Qc, rc, F) {
            var ad;
            super('composition', rc, {
                mode: null !== (ad = null == F ? void 0 : F.mode) && void 0 !== ad ? ad : 'math',
                value: Qc
            });
        }
    }
    class ad extends kc {
        static fromJson(Qc, rc) {
            return new ad(Qc.command, Qc.arg, rc);
        }
        toJson() {
            return {
                ...super.toJson(),
                arg: this.arg
            };
        }
        render(Qc) {
            const bd = kc.createBox(Qc, this.body, {
                type: 'chem',
                newList: !0
            });
            return this.caret && (bd.caret = this.caret), this.bind(Qc, bd);
        }
        serialize(Qc) {
            return this.verbatimLatex;
        }
        constructor(Qc, rc, F) {
            super('chem', F, {
                command: Qc,
                mode: 'math'
            });
            const bd = cd.go(bd.go(rc, '\\pu' === Qc ? 'pu' : 'ce'), !1);
            this.body = Rc(bd, F), this.verbatimLatex = Qc + '{' + rc + '}', this.arg = rc, this.captureSelection = !0;
        }
    }
    R([
        'ce',
        'pu'
    ], '{chemformula:balanced-string}', {
        createAtom: (Qc, rc, F, P) => new ad(Qc, rc[0], P)
    });
    var bd = {
        go: function(Qc, rc) {
            if (!Qc)
                return [];
            void 0 === rc && (rc = 'ce');
            var cd, dd = '0',
                ed = {
                    parenthesisLevel: 0
                };
            Qc = (Qc = (Qc = Qc.replace(/\n/g, ' ')).replace(/[\u2212\u2013\u2014\u2010]/g, '-')).replace(/[\u2026]/g, '...');
            for (var fd = 10, gd = [];;) {
                cd !== Qc ? (fd = 10, cd = Qc) : fd--;
                var hd = bd.stateMachines[rc],
                    id = hd.transitions[dd] || hd.transitions['*'];
                e:
                    for (var jd = 0; jd < id.length; jd++) {
                        var kd = bd.patterns.match_(id[jd].pattern, Qc);
                        if (kd) {
                            for (var ld = id[jd].task, md = 0; md < ld.action_.length; md++) {
                                var nd;
                                if (hd.actions[ld.action_[md].type_])
                                    nd = hd.actions[ld.action_[md].type_](ed, kd.match_, ld.action_[md].option);
                                else {
                                    if (!bd.actions[ld.action_[md].type_])
                                        throw [
                                            'MhchemBugA',
                                            'mhchem bug A. Please report. (' + ld.action_[md].type_ + ')'
                                        ];
                                    nd = bd.actions[ld.action_[md].type_](ed, kd.match_, ld.action_[md].option);
                                }
                                bd.concatArray(gd, nd);
                            }
                            if (dd = ld.nextState || dd, !(Qc.length > 0))
                                return gd;
                            if (ld.revisit || (Qc = kd.remainder), !ld.toContinue)
                                break e;
                        }
                    }
                if (fd <= 0)
                    throw [
                        'MhchemBugU',
                        'mhchem bug U. Please report.'
                    ];
            }
        },
        concatArray: function(Qc, rc) {
            if (rc)
                if (Array.isArray(rc))
                    for (var cd = 0; cd < rc.length; cd++)
                        Qc.push(rc[cd]);
                else
                    Qc.push(rc);
        },
        patterns: {
            patterns: {
                empty: /^$/,
                else: /^./,
                else2: /^./,
                space: /^\s/,
                'space A': /^\s(?=[A-Z\\$])/,
                space$: /^\s$/,
                'a-z': /^[a-z]/,
                x: /^x/,
                x$: /^x$/,
                i$: /^i$/,
                letters: /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
                '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
                'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
                '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
                'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
                digits: /^[0-9]+/,
                '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
                '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
                '(-)(9.,9)(e)(99)': function(Qc) {
                    var cd = Qc.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
                    return cd && cd[0] ? {
                        match_: cd.splice(1),
                        remainder: Qc.substr(cd[0].length)
                    } : null;
                },
                '(-)(9)^(-9)': function(Qc) {
                    var cd = Qc.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);
                    return cd && cd[0] ? {
                        match_: cd.splice(1),
                        remainder: Qc.substr(cd[0].length)
                    } : null;
                },
                'state of aggregation $': function(Qc) {
                    var cd = bd.patterns.findObserveGroups(Qc, '', /^\([a-z]{1,3}(?=[\),])/, ')', '');
                    if (cd && cd.remainder.match(/^($|[\s,;\)\]\}])/))
                        return cd;
                    var dd = Qc.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);
                    return dd ? {
                        match_: dd[0],
                        remainder: Qc.substr(dd[0].length)
                    } : null;
                },
                '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
                '{[(': /^(?:\\\{|\[|\()/,
                ')]}': /^(?:\)|\]|\\\})/,
                ', ': /^[,;]\s*/,
                ',': /^[,;]/,
                '.': /^[.]/,
                '. ': /^([.\u22C5\u00B7\u2022])\s*/,
                '...': /^\.\.\.(?=$|[^.])/,
                '* ': /^([*])\s*/,
                '^{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '^{', '', '', '}');
                },
                '^($...$)': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '^', '$', '$', '');
                },
                '^a': /^\^([0-9]+|[^\\_])/,
                '^\\x{}{}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '^', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '^\\x{}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '^', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
                '^(-1)': /^\^(-?\d+)/,
                '\'': /^'/,
                '_{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '_{', '', '', '}');
                },
                '_($...$)': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '_', '$', '$', '');
                },
                _9: /^_([+\-]?[0-9]+|[^\\])/,
                '_\\x{}{}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '_', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '_\\x{}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '_', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '_\\x': /^_(\\[a-zA-Z]+)\s*/,
                '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
                '{}': /^\{\}/,
                '{...}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '', '{', '}', '');
                },
                '{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '{', '', '', '}');
                },
                '$...$': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '', '$', '$', '');
                },
                '${(...)}$': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '${', '', '', '}$');
                },
                '$(...)$': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '$', '', '', '$');
                },
                '=<>': /^[=<>]/,
                '#': /^[#\u2261]/,
                '+': /^\+/,
                '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
                '-9': /^-(?=[0-9])/,
                '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
                '-': /^-/,
                'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
                operator: /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
                arrowUpDown: /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
                '\\bond{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\bond{', '', '', '}');
                },
                '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
                CMT: /^[CMT](?=\[)/,
                '[(...)]': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '[', '', '', ']');
                },
                '1st-level escape': /^(&|\\\\|\\hline)\s*/,
                '\\,': /^(?:\\[,\ ;:])/,
                '\\x{}{}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '\\x{}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
                '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
                orbital: /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
                others: /^[\/~|]/,
                '\\frac{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\frac{', '', '', '}', '{', '', '', '}');
                },
                '\\overset{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\overset{', '', '', '}', '{', '', '', '}');
                },
                '\\underset{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\underset{', '', '', '}', '{', '', '', '}');
                },
                '\\underbrace{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\underbrace{', '', '', '}_', '{', '', '', '}');
                },
                '\\color{(...)}0': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\color{', '', '', '}');
                },
                '\\color{(...)}{(...)}1': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\color{', '', '', '}', '{', '', '', '}');
                },
                '\\color(...){(...)}2': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\color', '\\', '', /^(?=\{)/, '{', '', '', '}');
                },
                '\\ce{(...)}': function(Qc) {
                    return bd.patterns.findObserveGroups(Qc, '\\ce{', '', '', '}');
                },
                oxidation$: /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'd-oxidation$': /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'roman numeral': /^[IVX]+/,
                '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
                amount: function(Qc) {
                    var cd;
                    if (cd = Qc.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/))
                        return {
                            match_: cd[0],
                            remainder: Qc.substr(cd[0].length)
                        };
                    var dd = bd.patterns.findObserveGroups(Qc, '', '$', '$', '');
                    return dd && (cd = dd.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/)) ? {
                        match_: cd[0],
                        remainder: Qc.substr(cd[0].length)
                    } : null;
                },
                amount2: function(Qc) {
                    return this.amount(Qc);
                },
                '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
                formula$: function(Qc) {
                    if (Qc.match(/^\([a-z]+\)$/))
                        return null;
                    var cd = Qc.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
                    return cd ? {
                        match_: cd[0],
                        remainder: Qc.substr(cd[0].length)
                    } : null;
                },
                uprightEntities: /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
                '/': /^\s*(\/)\s*/,
                '//': /^\s*(\/\/)\s*/,
                '*': /^\s*[*.]\s*/
            },
            findObserveGroups: function(Qc, rc, F, P, Xc, d, e, f, g, h) {
                var cd = function(Qc, rc) {
                        if ('string' == typeof rc)
                            return 0 !== Qc.indexOf(rc) ? null : rc;
                        var dd = Qc.match(rc);
                        return dd ? dd[0] : null;
                    },
                    dd = cd(Qc, rc);
                if (null === dd)
                    return null;
                if (Qc = Qc.substr(dd.length), null === (dd = cd(Qc, F)))
                    return null;
                var ed = function(Qc, rc, F) {
                    for (var fd = 0; rc < Qc.length;) {
                        var gd = Qc.charAt(rc),
                            hd = cd(Qc.substr(rc), F);
                        if (null !== hd && 0 === fd)
                            return {
                                endMatchBegin: rc,
                                endMatchEnd: rc + hd.length
                            };
                        if ('{' === gd)
                            fd++;
                        else if ('}' === gd) {
                            if (0 === fd)
                                throw [
                                    'ExtraCloseMissingOpen',
                                    'Extra close brace or missing open brace'
                                ];
                            fd--;
                        }
                        rc++;
                    }
                    return null;
                }(Qc, dd.length, P || Xc);
                if (null === ed)
                    return null;
                var fd = Qc.substring(0, P ? ed.endMatchEnd : ed.endMatchBegin);
                if (d || e) {
                    var gd = this.findObserveGroups(Qc.substr(ed.endMatchEnd), d, e, f, g);
                    if (null === gd)
                        return null;
                    var hd = [
                        fd,
                        gd.match_
                    ];
                    return {
                        match_: h ? hd.join('') : hd,
                        remainder: gd.remainder
                    };
                }
                return {
                    match_: fd,
                    remainder: Qc.substr(ed.endMatchEnd)
                };
            },
            match_: function(Qc, rc) {
                var cd = bd.patterns.patterns[Qc];
                if (void 0 === cd)
                    throw [
                        'MhchemBugP',
                        'mhchem bug P. Please report. (' + Qc + ')'
                    ];
                if ('function' == typeof cd)
                    return bd.patterns.patterns[Qc](rc);
                var dd = rc.match(cd);
                return dd ? {
                    match_: dd[2] ? [
                        dd[1],
                        dd[2]
                    ] : dd[1] ? dd[1] : dd[0],
                    remainder: rc.substr(dd[0].length)
                } : null;
            }
        },
        actions: {
            'a=': function(Qc, rc) {
                Qc.a = (Qc.a || '') + rc;
            },
            'b=': function(Qc, rc) {
                Qc.b = (Qc.b || '') + rc;
            },
            'p=': function(Qc, rc) {
                Qc.p = (Qc.p || '') + rc;
            },
            'o=': function(Qc, rc) {
                Qc.o = (Qc.o || '') + rc;
            },
            'q=': function(Qc, rc) {
                Qc.q = (Qc.q || '') + rc;
            },
            'd=': function(Qc, rc) {
                Qc.d = (Qc.d || '') + rc;
            },
            'rm=': function(Qc, rc) {
                Qc.rm = (Qc.rm || '') + rc;
            },
            'text=': function(Qc, rc) {
                Qc.text_ = (Qc.text_ || '') + rc;
            },
            insert: function(Qc, rc, F) {
                return {
                    type_: F
                };
            },
            'insert+p1': function(Qc, rc, F) {
                return {
                    type_: F,
                    p1: rc
                };
            },
            'insert+p1+p2': function(Qc, rc, F) {
                return {
                    type_: F,
                    p1: rc[0],
                    p2: rc[1]
                };
            },
            copy: function(Qc, rc) {
                return rc;
            },
            rm: function(Qc, rc) {
                return {
                    type_: 'rm',
                    p1: rc || ''
                };
            },
            text: function(Qc, rc) {
                return bd.go(rc, 'text');
            },
            '{text}': function(Qc, rc) {
                var cd = ['{'];
                return bd.concatArray(cd, bd.go(rc, 'text')), cd.push('}'), cd;
            },
            'tex-math': function(Qc, rc) {
                return bd.go(rc, 'tex-math');
            },
            'tex-math tight': function(Qc, rc) {
                return bd.go(rc, 'tex-math tight');
            },
            bond: function(Qc, rc, F) {
                return {
                    type_: 'bond',
                    kind_: F || rc
                };
            },
            'color0-output': function(Qc, rc) {
                return {
                    type_: 'color0',
                    color: rc[0]
                };
            },
            ce: function(Qc, rc) {
                return bd.go(rc);
            },
            '1/2': function(Qc, rc) {
                var cd = [];
                rc.match(/^[+\-]/) && (cd.push(rc.substr(0, 1)), rc = rc.substr(1));
                var dd = rc.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
                return dd[1] = dd[1].replace(/\$/g, ''), cd.push({
                    type_: 'frac',
                    p1: dd[1],
                    p2: dd[2]
                }), dd[3] && (dd[3] = dd[3].replace(/\$/g, ''), cd.push({
                    type_: 'tex-math',
                    p1: dd[3]
                })), cd;
            },
            '9,9': function(Qc, rc) {
                return bd.go(rc, '9,9');
            }
        },
        createTransitions: function(Qc) {
            var cd, dd, ed, fd, gd = {};
            for (cd in Qc)
                for (dd in Qc[cd])
                    for (ed = dd.split('|'), Qc[cd][dd].stateArray = ed, fd = 0; fd < ed.length; fd++)
                        gd[ed[fd]] = [];
            for (cd in Qc)
                for (dd in Qc[cd])
                    for (ed = Qc[cd][dd].stateArray || [], fd = 0; fd < ed.length; fd++) {
                        var hd = Qc[cd][dd];
                        if (hd.action_) {
                            hd.action_ = [].concat(hd.action_);
                            for (var id = 0; id < hd.action_.length; id++)
                                'string' == typeof hd.action_[id] && (hd.action_[id] = {
                                    type_: hd.action_[id]
                                });
                        } else
                            hd.action_ = [];
                        for (var id = cd.split('|'), jd = 0; jd < id.length; jd++)
                            if ('*' === ed[fd])
                                for (var kd in gd)
                                    gd[kd].push({
                                        pattern: id[jd],
                                        task: hd
                                    });
                            else
                                gd[ed[fd]].push({
                                    pattern: id[jd],
                                    task: hd
                                });
                    }
            return gd;
        },
        stateMachines: {}
    };
    bd.stateMachines = {
        ce: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                else: {
                    '0|1|2': {
                        action_: 'beginsWithBond=false',
                        revisit: !0,
                        toContinue: !0
                    }
                },
                oxidation$: {
                    0: {
                        action_: 'oxidation-output'
                    }
                },
                CMT: {
                    r: {
                        action_: 'rdt=',
                        nextState: 'rt'
                    },
                    rd: {
                        action_: 'rqt=',
                        nextState: 'rdt'
                    }
                },
                arrowUpDown: {
                    '0|1|2|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '1'
                    }
                },
                uprightEntities: {
                    '0|1|2': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '1'
                    }
                },
                orbital: {
                    '0|1|2|3': {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                '->': {
                    '0|1|2|3': {
                        action_: 'r=',
                        nextState: 'r'
                    },
                    'a|as': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    },
                    '*': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    }
                },
                '+': {
                    o: {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    'd|D': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qd|qD': {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    3: {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                amount: {
                    '0|2': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                'pm-operator': {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            {
                                type_: 'operator',
                                option: '\\pm'
                            }
                        ],
                        nextState: '0'
                    }
                },
                operator: {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                '-$': {
                    'o|q': {
                        action_: [
                            'charge or bond',
                            'output'
                        ],
                        nextState: 'qd'
                    },
                    d: {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    D: {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    qd: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qD|dq': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '-9': {
                    '3|o': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '- orbital overlap': {
                    o: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    d: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    }
                },
                '-': {
                    '0|1|2': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'beginsWithBond=true',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    3: {
                        action_: {
                            type_: 'bond',
                            option: '-'
                        }
                    },
                    a: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    as: {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    b: {
                        action_: 'b='
                    },
                    o: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    q: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    'd|qd|dq': {
                        action_: {
                            type_: '- after o/d',
                            option: !0
                        },
                        nextState: '2'
                    },
                    'D|qD|p': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                amount2: {
                    '1|3': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                letters: {
                    '0|1|2|3|a|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'q|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    'd|D|qd|qD': {
                        action_: 'o after d',
                        nextState: 'o'
                    }
                },
                digits: {
                    o: {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    q: {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    a: {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                'space A': {
                    'b|p|bp': {}
                },
                space: {
                    a: {
                        nextState: 'as'
                    },
                    0: {
                        action_: 'sb=false'
                    },
                    '1|2': {
                        action_: 'sb=true'
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: 'output',
                        nextState: '0'
                    },
                    '*': {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1'
                    }
                },
                '1st-level escape': {
                    '1|2': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ]
                    },
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ],
                        nextState: '0'
                    }
                },
                '[(...)]': {
                    'r|rt': {
                        action_: 'rd=',
                        nextState: 'rd'
                    },
                    'rd|rdt': {
                        action_: 'rq=',
                        nextState: 'rdq'
                    }
                },
                '...': {
                    'o|d|D|dq|qd|qD': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '...'
                            }
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            {
                                type_: 'insert',
                                option: 'ellipsis'
                            }
                        ],
                        nextState: '1'
                    }
                },
                '. |* ': {
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'addition compound'
                            }
                        ],
                        nextState: '1'
                    }
                },
                'state of aggregation $': {
                    '*': {
                        action_: [
                            'output',
                            'state of aggregation'
                        ],
                        nextState: '1'
                    }
                },
                '{[(': {
                    'a|as|o': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '0|1|2|3': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    }
                },
                ')]}': {
                    '0|1|2|3|b|p|bp|o': {
                        action_: [
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    },
                    'a|as|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    }
                },
                ', ': {
                    '*': {
                        action_: [
                            'output',
                            'comma'
                        ],
                        nextState: '0'
                    }
                },
                '^_': {
                    '*': {}
                },
                '^{(...)}|^($...$)': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'D'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qD'
                    },
                    'd|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'D'
                    }
                },
                '^a|^\\x{}{}|^\\x{}|^\\x|\'': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'd|qd|D|qD': {
                        action_: 'd='
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    }
                },
                '_{(state of aggregation)}$': {
                    'd|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
                    '0|1|2|as': {
                        action_: 'p=',
                        nextState: 'p'
                    },
                    b: {
                        action_: 'p=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    'q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '=<>': {
                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '#': {
                    '0|1|2|3|a|as|o': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '#'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '{}': {
                    '*': {
                        action_: {
                            type_: 'output',
                            option: 1
                        },
                        nextState: '1'
                    }
                },
                '{...}': {
                    '0|1|2|3|a|as|b|p|bp': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'o|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '$...$': {
                    a: {
                        action_: 'a='
                    },
                    '0|1|2|3|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'as|o': {
                        action_: 'o='
                    },
                    'q|d|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '\\bond{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '\\frac{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'frac-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\overset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'overset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underbrace{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underbrace-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color0-output'
                        ]
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'ce'
                        ],
                        nextState: '3'
                    }
                },
                '\\,': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '1'
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '0|1|2|3|a|as|b|p|bp|o|c0': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    }
                },
                others: {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '3'
                    }
                },
                else2: {
                    a: {
                        action_: 'a to o',
                        nextState: 'o',
                        revisit: !0
                    },
                    as: {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1',
                        revisit: !0
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: ['output'],
                        nextState: '0',
                        revisit: !0
                    },
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ],
                        nextState: '3'
                    }
                }
            }),
            actions: {
                'o after d': function(Qc, rc) {
                    var cd;
                    if ((Qc.d || '').match(/^[0-9]+$/)) {
                        var dd = Qc.d;
                        Qc.d = void 0, cd = this.output(Qc), Qc.b = dd;
                    } else
                        cd = this.output(Qc);
                    return bd.actions['o='](Qc, rc), cd;
                },
                'd= kv': function(Qc, rc) {
                    Qc.d = rc, Qc.dType = 'kv';
                },
                'charge or bond': function(Qc, rc) {
                    if (Qc.beginsWithBond) {
                        var cd = [];
                        return bd.concatArray(cd, this.output(Qc)), bd.concatArray(cd, bd.actions.bond(Qc, rc, '-')), cd;
                    }
                    Qc.d = rc;
                },
                '- after o/d': function(Qc, rc, F) {
                    var cd = bd.patterns.match_('orbital', Qc.o || ''),
                        dd = bd.patterns.match_('one lowercase greek letter $', Qc.o || ''),
                        ed = bd.patterns.match_('one lowercase latin letter $', Qc.o || ''),
                        fd = bd.patterns.match_('$one lowercase latin letter$ $', Qc.o || ''),
                        gd = '-' === rc && (cd && '' === cd.remainder || dd || ed || fd);
                    !gd || Qc.a || Qc.b || Qc.p || Qc.d || Qc.q || cd || !ed || (Qc.o = '$' + Qc.o + '$');
                    var hd = [];
                    return gd ? (bd.concatArray(hd, this.output(Qc)), hd.push({
                        type_: 'hyphen'
                    })) : (cd = bd.patterns.match_('digits', Qc.d || ''), F && cd && '' === cd.remainder ? (bd.concatArray(hd, bd.actions['d='](Qc, rc)), bd.concatArray(hd, this.output(Qc))) : (bd.concatArray(hd, this.output(Qc)), bd.concatArray(hd, bd.actions.bond(Qc, rc, '-')))), hd;
                },
                'a to o': function(Qc) {
                    Qc.o = Qc.a, Qc.a = void 0;
                },
                'sb=true': function(Qc) {
                    Qc.sb = !0;
                },
                'sb=false': function(Qc) {
                    Qc.sb = !1;
                },
                'beginsWithBond=true': function(Qc) {
                    Qc.beginsWithBond = !0;
                },
                'beginsWithBond=false': function(Qc) {
                    Qc.beginsWithBond = !1;
                },
                'parenthesisLevel++': function(Qc) {
                    Qc.parenthesisLevel++;
                },
                'parenthesisLevel--': function(Qc) {
                    Qc.parenthesisLevel--;
                },
                'state of aggregation': function(Qc, rc) {
                    return {
                        type_: 'state of aggregation',
                        p1: bd.go(rc, 'o')
                    };
                },
                comma: function(Qc, rc) {
                    var cd = rc.replace(/\s*$/, '');
                    return cd !== rc && 0 === Qc.parenthesisLevel ? {
                        type_: 'comma enumeration L',
                        p1: cd
                    } : {
                        type_: 'comma enumeration M',
                        p1: cd
                    };
                },
                output: function(Qc, rc, F) {
                    var cd, dd, ed;
                    for (var fd in (Qc.r ? (dd = 'M' === Qc.rdt ? bd.go(Qc.rd, 'tex-math') : 'T' === Qc.rdt ? [{
                            type_: 'text',
                            p1: Qc.rd || ''
                        }] : bd.go(Qc.rd), ed = 'M' === Qc.rqt ? bd.go(Qc.rq, 'tex-math') : 'T' === Qc.rqt ? [{
                            type_: 'text',
                            p1: Qc.rq || ''
                        }] : bd.go(Qc.rq), cd = {
                            type_: 'arrow',
                            r: Qc.r,
                            rd: dd,
                            rq: ed
                        }) : (cd = [], (Qc.a || Qc.b || Qc.p || Qc.o || Qc.q || Qc.d || F) && (Qc.sb && cd.push({
                            type_: 'entitySkip'
                        }), Qc.o || Qc.q || Qc.d || Qc.b || Qc.p || 2 === F ? Qc.o || Qc.q || Qc.d || !Qc.b && !Qc.p ? Qc.o && 'kv' === Qc.dType && bd.patterns.match_('d-oxidation$', Qc.d || '') ? Qc.dType = 'oxidation' : Qc.o && 'kv' === Qc.dType && !Qc.q && (Qc.dType = void 0) : (Qc.o = Qc.a, Qc.d = Qc.b, Qc.q = Qc.p, Qc.a = Qc.b = Qc.p = void 0) : (Qc.o = Qc.a, Qc.a = void 0), cd.push({
                            type_: 'chemfive',
                            a: bd.go(Qc.a, 'a'),
                            b: bd.go(Qc.b, 'bd'),
                            p: bd.go(Qc.p, 'pq'),
                            o: bd.go(Qc.o, 'o'),
                            q: bd.go(Qc.q, 'pq'),
                            d: bd.go(Qc.d, 'oxidation' === Qc.dType ? 'oxidation' : 'bd'),
                            dType: Qc.dType
                        }))), Qc))
                        'parenthesisLevel' !== fd && 'beginsWithBond' !== fd && delete Qc[fd];
                    return cd;
                },
                'oxidation-output': function(Qc, rc) {
                    var cd = ['{'];
                    return bd.concatArray(cd, bd.go(rc, 'oxidation')), cd.push('}'), cd;
                },
                'frac-output': function(Qc, rc) {
                    return {
                        type_: 'frac-ce',
                        p1: bd.go(rc[0]),
                        p2: bd.go(rc[1])
                    };
                },
                'overset-output': function(Qc, rc) {
                    return {
                        type_: 'overset',
                        p1: bd.go(rc[0]),
                        p2: bd.go(rc[1])
                    };
                },
                'underset-output': function(Qc, rc) {
                    return {
                        type_: 'underset',
                        p1: bd.go(rc[0]),
                        p2: bd.go(rc[1])
                    };
                },
                'underbrace-output': function(Qc, rc) {
                    return {
                        type_: 'underbrace',
                        p1: bd.go(rc[0]),
                        p2: bd.go(rc[1])
                    };
                },
                'color-output': function(Qc, rc) {
                    return {
                        type_: 'color',
                        color1: rc[0],
                        color2: bd.go(rc[1])
                    };
                },
                'r=': function(Qc, rc) {
                    Qc.r = rc;
                },
                'rdt=': function(Qc, rc) {
                    Qc.rdt = rc;
                },
                'rd=': function(Qc, rc) {
                    Qc.rd = rc;
                },
                'rqt=': function(Qc, rc) {
                    Qc.rqt = rc;
                },
                'rq=': function(Qc, rc) {
                    Qc.rq = rc;
                },
                operator: function(Qc, rc, F) {
                    return {
                        type_: 'operator',
                        kind_: F || rc
                    };
                }
            }
        },
        a: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                '$(...)$': {
                    '*': {
                        action_: 'tex-math tight',
                        nextState: '1'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'commaDecimal'
                        }
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        o: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\\ca': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'circa'
                        }
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: '{text}'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        text: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '{...}': {
                    '*': {
                        action_: 'text='
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '\\greek': {
                    '*': {
                        action_: [
                            'output',
                            'rm'
                        ]
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ]
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                output: function(Qc) {
                    if (Qc.text_) {
                        var cd = {
                            type_: 'text',
                            p1: Qc.text_
                        };
                        for (var dd in Qc)
                            delete Qc[dd];
                        return cd;
                    }
                }
            }
        },
        pq: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {}
                },
                'state of aggregation $': {
                    '*': {
                        action_: 'state of aggregation'
                    }
                },
                i$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '(KV letters),': {
                    0: {
                        action_: 'rm',
                        nextState: '0'
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '-9.,9': {
                    '*': {
                        action_: '9,9'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert+p1',
                            option: 'comma enumeration S'
                        }
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'state of aggregation': function(Qc, rc) {
                    return {
                        type_: 'state of aggregation subscript',
                        p1: bd.go(rc, 'o')
                    };
                },
                'color-output': function(Qc, rc) {
                    return {
                        type_: 'color',
                        color1: rc[0],
                        color2: bd.go(rc[1], 'pq')
                    };
                }
            }
        },
        bd: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {}
                },
                x$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '-9.,9 no missing 0': {
                    '*': {
                        action_: '9,9'
                    }
                },
                '.': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'electron dot'
                        }
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                x: {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'KV x'
                        }
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\'': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'prime'
                        }
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'color-output': function(Qc, rc) {
                    return {
                        type_: 'color',
                        color1: rc[0],
                        color2: bd.go(rc[1], 'bd')
                    };
                }
            }
        },
        oxidation: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {}
                },
                'roman numeral': {
                    '*': {
                        action_: 'roman-numeral'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'roman-numeral': function(Qc, rc) {
                    return {
                        type_: 'roman numeral',
                        p1: rc || ''
                    };
                }
            }
        },
        'tex-math': {
            transitions: bd.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                output: function(Qc) {
                    if (Qc.o) {
                        var cd = {
                            type_: 'tex-math',
                            p1: Qc.o
                        };
                        for (var dd in Qc)
                            delete Qc[dd];
                        return cd;
                    }
                }
            }
        },
        'tex-math tight': {
            transitions: bd.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                '-|+': {
                    '*': {
                        action_: 'tight operator'
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                'tight operator': function(Qc, rc) {
                    Qc.o = (Qc.o || '') + '{' + rc + '}';
                },
                output: function(Qc) {
                    if (Qc.o) {
                        var cd = {
                            type_: 'tex-math',
                            p1: Qc.o
                        };
                        for (var dd in Qc)
                            delete Qc[dd];
                        return cd;
                    }
                }
            }
        },
        '9,9': {
            transitions: bd.createTransitions({
                empty: {
                    '*': {}
                },
                ',': {
                    '*': {
                        action_: 'comma'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                }
            }
        },
        pu: {
            transitions: bd.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                space$: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ]
                    }
                },
                '{[(|)]}': {
                    '0|a': {
                        action_: 'copy'
                    }
                },
                '(-)(9)^(-9)': {
                    0: {
                        action_: 'number^',
                        nextState: 'a'
                    }
                },
                '(-)(9.,9)(e)(99)': {
                    0: {
                        action_: 'enumber',
                        nextState: 'a'
                    }
                },
                space: {
                    '0|a': {}
                },
                'pm-operator': {
                    '0|a': {
                        action_: {
                            type_: 'operator',
                            option: '\\pm'
                        },
                        nextState: '0'
                    }
                },
                operator: {
                    '0|a': {
                        action_: 'copy',
                        nextState: '0'
                    }
                },
                '//': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '/': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '{...}|else': {
                    '0|d': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    a: {
                        action_: [
                            'space',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    '/|q': {
                        action_: 'q=',
                        nextState: 'q'
                    }
                }
            }),
            actions: {
                enumber: function(Qc, rc) {
                    var cd = [];
                    return '+-' === rc[0] || '+/-' === rc[0] ? cd.push('\\pm ') : rc[0] && cd.push(rc[0]), rc[1] && (bd.concatArray(cd, bd.go(rc[1], 'pu-9,9')), rc[2] && (rc[2].match(/[,.]/) ? bd.concatArray(cd, bd.go(rc[2], 'pu-9,9')) : cd.push(rc[2])), rc[3] = rc[4] || rc[3], rc[3] && (rc[3] = rc[3].trim(), 'e' === rc[3] || '*' === rc[3].substr(0, 1) ? cd.push({
                        type_: 'cdot'
                    }) : cd.push({
                        type_: 'times'
                    }))), rc[3] && cd.push('10^{' + rc[5] + '}'), cd;
                },
                'number^': function(Qc, rc) {
                    var cd = [];
                    return '+-' === rc[0] || '+/-' === rc[0] ? cd.push('\\pm ') : rc[0] && cd.push(rc[0]), bd.concatArray(cd, bd.go(rc[1], 'pu-9,9')), cd.push('^{' + rc[2] + '}'), cd;
                },
                operator: function(Qc, rc, F) {
                    return {
                        type_: 'operator',
                        kind_: F || rc
                    };
                },
                space: function() {
                    return {
                        type_: 'pu-space-1'
                    };
                },
                output: function(Qc) {
                    var cd, dd = bd.patterns.match_('{(...)}', Qc.d || '');
                    dd && '' === dd.remainder && (Qc.d = dd.match_);
                    var ed = bd.patterns.match_('{(...)}', Qc.q || '');
                    if (ed && '' === ed.remainder && (Qc.q = ed.match_), Qc.d && (Qc.d = Qc.d.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), Qc.d = Qc.d.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F')), Qc.q) {
                        Qc.q = Qc.q.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), Qc.q = Qc.q.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F');
                        var fd = {
                            d: bd.go(Qc.d, 'pu'),
                            q: bd.go(Qc.q, 'pu')
                        };
                        '//' === Qc.o ? cd = {
                            type_: 'pu-frac',
                            p1: fd.d,
                            p2: fd.q
                        } : (cd = fd.d, fd.d.length > 1 || fd.q.length > 1 ? cd.push({
                            type_: ' / '
                        }) : cd.push({
                            type_: '/'
                        }), bd.concatArray(cd, fd.q));
                    } else
                        cd = bd.go(Qc.d, 'pu-2');
                    for (var fd in Qc)
                        delete Qc[fd];
                    return cd;
                }
            }
        },
        'pu-2': {
            transitions: bd.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '*': {
                    '*': {
                        action_: [
                            'output',
                            'cdot'
                        ],
                        nextState: '0'
                    }
                },
                '\\x': {
                    '*': {
                        action_: 'rm='
                    }
                },
                space: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ],
                        nextState: '0'
                    }
                },
                '^{(...)}|^(-1)': {
                    1: {
                        action_: '^(-1)'
                    }
                },
                '-9.,9': {
                    0: {
                        action_: 'rm=',
                        nextState: '0'
                    },
                    1: {
                        action_: '^(-1)',
                        nextState: '0'
                    }
                },
                '{...}|else': {
                    '*': {
                        action_: 'rm=',
                        nextState: '1'
                    }
                }
            }),
            actions: {
                cdot: function() {
                    return {
                        type_: 'tight cdot'
                    };
                },
                '^(-1)': function(Qc, rc) {
                    Qc.rm += '^{' + rc + '}';
                },
                space: function() {
                    return {
                        type_: 'pu-space-2'
                    };
                },
                output: function(Qc) {
                    var cd = [];
                    if (Qc.rm) {
                        var dd = bd.patterns.match_('{(...)}', Qc.rm || '');
                        cd = dd && '' === dd.remainder ? bd.go(dd.match_, 'pu') : {
                            type_: 'rm',
                            p1: Qc.rm
                        };
                    }
                    for (var dd in Qc)
                        delete Qc[dd];
                    return cd;
                }
            }
        },
        'pu-9,9': {
            transitions: bd.createTransitions({
                empty: {
                    0: {
                        action_: 'output-0'
                    },
                    o: {
                        action_: 'output-o'
                    }
                },
                ',': {
                    0: {
                        action_: [
                            'output-0',
                            'comma'
                        ],
                        nextState: 'o'
                    }
                },
                '.': {
                    0: {
                        action_: [
                            'output-0',
                            'copy'
                        ],
                        nextState: 'o'
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                },
                'output-0': function(Qc) {
                    var cd = [];
                    if (Qc.text_ = Qc.text_ || '', Qc.text_.length > 4) {
                        var dd = Qc.text_.length % 3;
                        0 === dd && (dd = 3);
                        for (var ed = Qc.text_.length - 3; ed > 0; ed -= 3)
                            cd.push(Qc.text_.substr(ed, 3)), cd.push({
                                type_: '1000 separator'
                            });
                        cd.push(Qc.text_.substr(0, dd)), cd.reverse();
                    } else
                        cd.push(Qc.text_);
                    for (var dd in Qc)
                        delete Qc[dd];
                    return cd;
                },
                'output-o': function(Qc) {
                    var cd = [];
                    if (Qc.text_ = Qc.text_ || '', Qc.text_.length > 4) {
                        for (var dd = Qc.text_.length - 3, ed = 0; ed < dd; ed += 3)
                            cd.push(Qc.text_.substr(ed, 3)), cd.push({
                                type_: '1000 separator'
                            });
                        cd.push(Qc.text_.substr(ed));
                    } else
                        cd.push(Qc.text_);
                    for (var dd in Qc)
                        delete Qc[dd];
                    return cd;
                }
            }
        }
    };
    var cd = {
        go: function(Qc, rc) {
            if (!Qc)
                return '';
            for (var dd = '', ed = !1, fd = 0; fd < Qc.length; fd++) {
                var gd = Qc[fd];
                'string' == typeof gd ? dd += gd : (dd += cd._go2(gd), '1st-level escape' === gd.type_ && (ed = !0));
            }
            return rc || ed || !dd || (dd = '{' + dd + '}'), dd;
        },
        _goInner: function(Qc) {
            return Qc ? cd.go(Qc, !0) : Qc;
        },
        _go2: function(Qc) {
            var dd;
            switch (Qc.type_) {
                case 'chemfive':
                    dd = '';
                    var ed = {
                        a: cd._goInner(Qc.a),
                        b: cd._goInner(Qc.b),
                        p: cd._goInner(Qc.p),
                        o: cd._goInner(Qc.o),
                        q: cd._goInner(Qc.q),
                        d: cd._goInner(Qc.d)
                    };
                    ed.a && (ed.a.match(/^[+\-]/) && (ed.a = '{' + ed.a + '}'), dd += ed.a + '\\,'), (ed.b || ed.p) && (dd += '{\\vphantom{X}}', dd += '^{\\hphantom{' + (ed.b || '') + '}}_{\\hphantom{' + (ed.p || '') + '}}', dd += '{\\vphantom{X}}', dd += '^{\\smash[t]{\\vphantom{2}}\\mathllap{' + (ed.b || '') + '}}', dd += '_{\\vphantom{2}\\mathllap{\\smash[t]{' + (ed.p || '') + '}}}'), ed.o && (ed.o.match(/^[+\-]/) && (ed.o = '{' + ed.o + '}'), dd += ed.o), 'kv' === Qc.dType ? ((ed.d || ed.q) && (dd += '{\\vphantom{X}}'), ed.d && (dd += '^{' + ed.d + '}'), ed.q && (dd += '_{\\smash[t]{' + ed.q + '}}')) : 'oxidation' === Qc.dType ? (ed.d && (dd += '{\\vphantom{X}}', dd += '^{' + ed.d + '}'), ed.q && (dd += '{\\vphantom{X}}', dd += '_{\\smash[t]{' + ed.q + '}}')) : (ed.q && (dd += '{\\vphantom{X}}', dd += '_{\\smash[t]{' + ed.q + '}}'), ed.d && (dd += '{\\vphantom{X}}', dd += '^{' + ed.d + '}'));
                    break;
                case 'rm':
                case 'roman numeral':
                    dd = '\\mathrm{' + Qc.p1 + '}';
                    break;
                case 'text':
                    Qc.p1.match(/[\^_]/) ? (Qc.p1 = Qc.p1.replace(' ', '~').replace('-', '\\text{-}'), dd = '\\mathrm{' + Qc.p1 + '}') : dd = '\\text{' + Qc.p1 + '}';
                    break;
                case 'state of aggregation':
                    dd = '\\mskip2mu ' + cd._goInner(Qc.p1);
                    break;
                case 'state of aggregation subscript':
                    dd = '\\mskip1mu ' + cd._goInner(Qc.p1);
                    break;
                case 'bond':
                    if (!(dd = cd._getBond(Qc.kind_)))
                        throw [
                            'MhchemErrorBond',
                            'mhchem Error. Unknown bond type (' + Qc.kind_ + ')'
                        ];
                    break;
                case 'frac':
                    var fd = '\\frac{' + Qc.p1 + '}{' + Qc.p2 + '}';
                    dd = '\\mathchoice{\\textstyle' + fd + '}{' + fd + '}{' + fd + '}{' + fd + '}';
                    break;
                case 'pu-frac':
                    var gd = '\\frac{' + cd._goInner(Qc.p1) + '}{' + cd._goInner(Qc.p2) + '}';
                    dd = '\\mathchoice{\\textstyle' + gd + '}{' + gd + '}{' + gd + '}{' + gd + '}';
                    break;
                case 'tex-math':
                case '1st-level escape':
                    dd = Qc.p1 + ' ';
                    break;
                case 'frac-ce':
                    dd = '\\frac{' + cd._goInner(Qc.p1) + '}{' + cd._goInner(Qc.p2) + '}';
                    break;
                case 'overset':
                    dd = '\\overset{' + cd._goInner(Qc.p1) + '}{' + cd._goInner(Qc.p2) + '}';
                    break;
                case 'underset':
                    dd = '\\underset{' + cd._goInner(Qc.p1) + '}{' + cd._goInner(Qc.p2) + '}';
                    break;
                case 'underbrace':
                    dd = '\\underbrace{' + cd._goInner(Qc.p1) + '}_{' + cd._goInner(Qc.p2) + '}';
                    break;
                case 'color':
                    dd = '{\\color{' + Qc.color1 + '}{' + cd._goInner(Qc.color2) + '}}';
                    break;
                case 'color0':
                    dd = '\\color{' + Qc.color + '}';
                    break;
                case 'arrow':
                    var hd = {
                            rd: cd._goInner(Qc.rd),
                            rq: cd._goInner(Qc.rq)
                        },
                        id = '\\x' + cd._getArrow(Qc.r);
                    hd.rq && (id += '[{' + hd.rq + '}]'), dd = id += hd.rd ? '{' + hd.rd + '}' : '{}';
                    break;
                case 'operator':
                    dd = cd._getOperator(Qc.kind_);
                    break;
                case 'space':
                    dd = ' ';
                    break;
                case 'entitySkip':
                case 'pu-space-1':
                    dd = '~';
                    break;
                case 'pu-space-2':
                    dd = '\\mkern3mu ';
                    break;
                case '1000 separator':
                    dd = '\\mkern2mu ';
                    break;
                case 'commaDecimal':
                    dd = '{,}';
                    break;
                case 'comma enumeration L':
                    dd = '{' + Qc.p1 + '}\\mkern6mu ';
                    break;
                case 'comma enumeration M':
                    dd = '{' + Qc.p1 + '}\\mkern3mu ';
                    break;
                case 'comma enumeration S':
                    dd = '{' + Qc.p1 + '}\\mkern1mu ';
                    break;
                case 'hyphen':
                    dd = '\\text{-}';
                    break;
                case 'addition compound':
                    dd = '\\,{\\cdot}\\,';
                    break;
                case 'electron dot':
                    dd = '\\mkern1mu \\bullet\\mkern1mu ';
                    break;
                case 'KV x':
                    dd = '{\\times}';
                    break;
                case 'prime':
                    dd = '\\prime ';
                    break;
                case 'cdot':
                    dd = '\\cdot ';
                    break;
                case 'tight cdot':
                    dd = '\\mkern1mu{\\cdot}\\mkern1mu ';
                    break;
                case 'times':
                    dd = '\\times ';
                    break;
                case 'circa':
                    dd = '{\\sim}';
                    break;
                case '^':
                    dd = 'uparrow';
                    break;
                case 'v':
                    dd = 'downarrow';
                    break;
                case 'ellipsis':
                    dd = '\\ldots ';
                    break;
                case '/':
                    dd = '/';
                    break;
                case ' / ':
                    dd = '\\,/\\,';
                    break;
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
            return dd;
        },
        _getArrow: function(Qc) {
            switch (Qc) {
                case '->':
                case '\u2192':
                case '\u27F6':
                    return 'rightarrow';
                case '<-':
                    return 'leftarrow';
                case '<->':
                    return 'leftrightarrow';
                case '<-->':
                    return 'rightleftarrows';
                case '<=>':
                case '\u21CC':
                    return 'rightleftharpoons';
                case '<=>>':
                    return 'rightequilibrium';
                case '<<=>':
                    return 'leftequilibrium';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getBond: function(Qc) {
            switch (Qc) {
                case '-':
                case '1':
                    return '{-}';
                case '=':
                case '2':
                    return '{=}';
                case '#':
                case '3':
                    return '{\\equiv}';
                case '~':
                    return '{\\tripledash}';
                case '~-':
                    return '{\\mathrlap{\\raisebox{-.1em}{$-$}}\\raisebox{.1em}{$\\tripledash$}}';
                case '~=':
                case '~--':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$\\tripledash$}}-}';
                case '-~-':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$-$}}\\tripledash}';
                case '...':
                    return '{{\\cdot}{\\cdot}{\\cdot}}';
                case '....':
                    return '{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}';
                case '->':
                    return '{\\rightarrow}';
                case '<-':
                    return '{\\leftarrow}';
                case '<':
                    return '{<}';
                case '>':
                    return '{>}';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getOperator: function(Qc) {
            switch (Qc) {
                case '+':
                    return ' {}+{} ';
                case '-':
                    return ' {}-{} ';
                case '=':
                    return ' {}={} ';
                case '<':
                    return ' {}<{} ';
                case '>':
                    return ' {}>{} ';
                case '<<':
                    return ' {}\\ll{} ';
                case '>>':
                    return ' {}\\gg{} ';
                case '\\pm':
                    return ' {}\\pm{} ';
                case '\\approx':
                case '$\\approx$':
                    return ' {}\\approx{} ';
                case 'v':
                case '(v)':
                    return ' \\downarrow{} ';
                case '^':
                case '(^)':
                    return ' \\uparrow{} ';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        }
    };
    class dd extends kc {
        static fromJson(Qc, rc) {
            return new dd(Qc.command, Qc.delim, rc, Qc);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size
            };
        }
        render(Qc) {
            const ed = new Mb(null);
            return ed.delim = this.value, ed;
        }
        serialize(Qc) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(Qc, rc, F, P) {
            super('delim', F, {
                command: Qc,
                style: null == P ? void 0 : P.style
            }), this.value = rc, this.size = null == P ? void 0 : P.size;
        }
    }
    class ed extends kc {
        static fromJson(Qc, rc) {
            return new ed(Qc.command, Qc.delim, rc, Qc);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size,
                delimClass: this.delimClass
            };
        }
        render(Qc) {
            let fd = function(Qc, fd, F, P) {
                var gd;
                return void 0 === Qc || '.' === Qc ? Ec(F, null !== (gd = P.type) && void 0 !== gd ? gd : 'minner', P.classes) : ('<' === Qc || '\\lt' === Qc || '\u27E8' === Qc ? Qc = '\\langle' : '>' !== Qc && '\\gt' !== Qc && '\u27E9' !== Qc || (Qc = '\\rangle'), vc.has(Qc) || xc.has(Qc) ? tc(Qc, fd, !1, F, P) : wc.has(Qc) ? uc(Qc, yc[fd], !1, F, P) : null);
            }(this.value, this.size, Qc, {
                classes: this.delimClass
            });
            return fd ? (fd = this.bind(Qc, fd), this.caret && (fd.caret = this.caret), fd) : null;
        }
        serialize(Qc) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(Qc, rc, F, P) {
            super('sizeddelim', F, {
                command: Qc,
                style: P.style
            }), this.value = rc, this.delimClass = P.delimClass, this.size = P.size;
        }
    }
    class fd extends kc {
        static fromJson(Qc, rc) {
            return new fd(Qc.command, Qc.body, Qc.notation, rc, Qc);
        }
        toJson() {
            const gd = {};
            return this.notation.downdiagonalstrike && (gd.downdiagonalstrike = !0), this.notation.updiagonalstrike && (gd.downdiagonalstrike = !0), this.notation.verticalstrike && (gd.downdiagonalstrike = !0), this.notation.horizontalstrike && (gd.downdiagonalstrike = !0), this.notation.updiagonalarrow && (gd.downdiagonalstrike = !0), this.notation.right && (gd.downdiagonalstrike = !0), this.notation.bottom && (gd.downdiagonalstrike = !0), this.notation.left && (gd.downdiagonalstrike = !0), this.notation.top && (gd.downdiagonalstrike = !0), this.notation.circle && (gd.downdiagonalstrike = !0), this.notation.roundedbox && (gd.downdiagonalstrike = !0), this.notation.madruwb && (gd.downdiagonalstrike = !0), this.notation.actuarial && (gd.downdiagonalstrike = !0), this.notation.box && (gd.downdiagonalstrike = !0), {
                ...super.toJson(),
                notation: gd,
                shadow: this.shadow,
                strokeWidth: this.strokeWidth,
                strokeStyle: this.strokeStyle,
                svgStrokeStyle: this.svgStrokeStyle,
                strokeColor: this.strokeColor,
                borderStyle: this.borderStyle,
                padding: this.padding
            };
        }
        serialize(Qc) {
            var gd;
            let hd = null !== (gd = this.command) && void 0 !== gd ? gd : '';
            if ('\\enclose' === this.command) {
                hd += '{' + Object.keys(this.notation).join(' ') + '}';
                let id = '',
                    jd = '';
                this.backgroundcolor && 'transparent' !== this.backgroundcolor && (id += jd + 'mathbackground="' + this.backgroundcolor + '"', jd = ','), this.shadow && 'auto' !== this.shadow && (id += jd + 'shadow="' + this.shadow + '"', jd = ','), this.strokeWidth || 'solid' !== this.strokeStyle ? (id += jd + this.borderStyle, jd = ',') : this.strokeColor && 'currentColor' !== this.strokeColor && (id += jd + 'mathcolor="' + this.strokeColor + '"', jd = ','), id && (hd += `[${ id }]`);
            }
            return hd += `{${ this.bodyToLatex(Qc) }}`, hd;
        }
        render(Qc) {
            var gd;
            const hd = new Cb(Qc, this.style),
                id = kc.createBox(hd, this.body);
            if (!id)
                return null;
            const jd = null !== (gd = Ab(this.padding && 'auto' !== this.padding ? Uc(this.padding, {
                    ...this.context,
                    registers: Qc.registers
                }) : hd.getRegisterAsDimension('fboxsep'))) && void 0 !== gd ? gd : 0,
                kd = function(Qc) {
                    if (!Qc)
                        return '1px';
                    const ld = Qc.match(/([0-9][a-zA-Z\%]+)/);
                    return null === ld ? '1px' : ld[1];
                }(this.borderStyle),
                ld = new Mb(null, {
                    classes: 'ML__notation'
                });
            ld.setStyle('position', 'absolute'), ld.setStyle('z-index', '-1'), ld.setStyle('box-sizing', 'border-box'), ld.setStyle('top', `calc(-${ kd } / 2 - ${ jd }em)`), ld.setStyle('left', `calc(-${ kd } / 2 - ${ jd }em)`), ld.setStyle('height', `calc(100% + ${ 2 * jd }em + 2 * ${ kd })`), ld.height = id.height + jd, ld.depth = id.depth + jd, ld.setStyle('width', `calc(100% + ${ 2 * jd }em + 2 * ${ kd })`), this.backgroundcolor && ld.setStyle('background-color', this.backgroundcolor), this.notation.box && ld.setStyle('border', this.borderStyle), this.notation.actuarial && (ld.setStyle('border-top', this.borderStyle), ld.setStyle('border-right', this.borderStyle)), this.notation.madruwb && (ld.setStyle('border-bottom', this.borderStyle), ld.setStyle('border-right', this.borderStyle)), this.notation.roundedbox && (ld.setStyle('border-radius', '8px'), ld.setStyle('border', this.borderStyle)), this.notation.circle && (ld.setStyle('border-radius', '50%'), ld.setStyle('border', this.borderStyle)), this.notation.top && ld.setStyle('border-top', this.borderStyle), this.notation.left && ld.setStyle('border-left', this.borderStyle), this.notation.right && ld.setStyle('border-right', this.borderStyle), this.notation.bottom && ld.setStyle('border-bottom', this.borderStyle);
            let md = '';
            if (this.notation.horizontalstrike && (md += '<line x1="3%"  y1="50%" x2="97%" y2="50%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), this.notation.verticalstrike && (md += '<line x1="50%"  y1="3%" x2="50%" y2="97%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), this.notation.updiagonalstrike && (md += '<line x1="3%"  y1="97%" x2="97%" y2="3%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), this.notation.downdiagonalstrike && (md += '<line x1="3%"  y1="3%" x2="97%" y2="97%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), md) {
                let nd;
                'none' !== this.shadow && (nd = 'auto' === this.shadow ? 'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)' : 'filter: drop-shadow(' + this.shadow + ')'),
                    function(nd, gd, hd) {
                        nd.svgOverlay = gd, nd.svgStyle = hd;
                    }(ld, md, nd);
            }
            const nd = new Mb([
                ld,
                id
            ]);
            return nd.setStyle('position', 'relative'), nd.setStyle('display', 'inline'), nd.height = id.height + jd, nd.depth = id.depth + jd, nd.left = jd, nd.right = jd, this.caret && (nd.caret = this.caret), nd.wrap(hd);
        }
        constructor(Qc, rc, F, P, Xc) {
            super('enclose', P, {
                command: Qc,
                style: Xc.style
            }), this.body = rc, this.backgroundcolor = Xc.backgroundcolor, F.updiagonalarrow && (F.updiagonalstrike = !1), F.box && (F.left = !1, F.right = !1, F.bottom = !1, F.top = !1), this.notation = F, this.shadow = Xc.shadow, this.strokeWidth = Xc.strokeWidth, this.strokeStyle = Xc.strokeStyle, this.svgStrokeStyle = Xc.svgStrokeStyle, this.strokeColor = Xc.strokeColor, this.borderStyle = Xc.borderStyle, this.padding = Xc.padding, this.captureSelection = !0;
        }
    }
    class gd extends kc {
        static fromJson(Qc, rc) {
            return new gd(Qc.command, Qc.above, Qc.below, rc, Qc);
        }
        toJson() {
            const hd = {};
            return this.continuousFraction && (hd.continuousFraction = !0), this.numerPrefix && (hd.numerPrefix = this.numerPrefix), this.denomPrefix && (hd.denomPrefix = this.denomPrefix), this.leftDelim && (hd.leftDelim = this.leftDelim), this.rightDelim && (hd.rightDelim = this.rightDelim), this.hasBarLine || (hd.hasBarLine = !1), this.mathstyleName && (hd.mathstyleName = this.mathstyleName), {
                ...super.toJson(),
                ...hd
            };
        }
        serialize(Qc) {
            return this.command + `{${ this.aboveToLatex(Qc) }}` + `{${ this.belowToLatex(Qc) }}`;
        }
        get children() {
            if (this._children)
                return this._children;
            const hd = [];
            if ('numerator-denominator' === this.context.fractionNavigationOrder) {
                for (const id of this.above)
                    hd.push(...id.children), hd.push(id);
                for (const jd of this.below)
                    hd.push(...jd.children), hd.push(jd);
            } else {
                for (const kd of this.below)
                    hd.push(...kd.children), hd.push(kd);
                for (const ld of this.above)
                    hd.push(...ld.children), hd.push(ld);
            }
            return this._children = hd, hd;
        }
        render(Qc) {
            var hd, id;
            const jd = new Cb(Qc, this.style, this.mathstyleName),
                kd = jd.metrics,
                ld = new Cb(jd, this.style, this.continuousFraction ? '' : 'numerator'),
                md = this.numerPrefix ? new Mb([
                    new Mb(this.numerPrefix),
                    kc.createBox(ld, this.above)
                ], {
                    isTight: ld.isTight,
                    newList: !0
                }) : null !== (hd = kc.createBox(ld, this.above, {
                    newList: !0
                })) && void 0 !== hd ? hd : new Mb(null, {
                    newList: !0
                }),
                nd = new Cb(jd, this.style, this.continuousFraction ? '' : 'denominator'),
                od = this.denomPrefix ? new Mb([
                    new Mb(this.denomPrefix),
                    kc.createBox(nd, this.below, {
                        newList: !0
                    })
                ]) : null !== (id = kc.createBox(nd, this.below, {
                    newList: !0
                })) && void 0 !== id ? id : new Mb(null, {
                    newList: !0
                }),
                pd = this.hasBarLine ? kd.defaultRuleThickness : 0;
            let qd, rd, sd = 0;
            jd.isDisplayStyle ? (qd = kd.num1, sd = pd > 0 ? 3 * pd : 7 * pd, rd = kd.denom1) : (pd > 0 ? (qd = kd.num2, sd = pd) : (qd = kd.num3, sd = 3 * pd), rd = kd.denom2);
            const td = [];
            this.isSelected && td.push('ML__selected');
            const ud = md.depth,
                vd = od.height;
            let wd;
            if (pd <= 0) {
                const xd = qd - ud - (vd - rd);
                xd < sd && (qd += (sd - xd) / 2, rd += (sd - xd) / 2), wd = new Vb({
                    individualShift: [{
                            box: md,
                            shift: -qd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        },
                        {
                            box: od,
                            shift: rd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(jd);
            } else {
                const yd = 0.25 + pd / 2,
                    zd = 0.25 - pd / 2;
                qd < sd + ud + yd && (qd = sd + ud + yd), rd < sd + vd - zd && (rd = sd + vd - zd);
                const Ad = new Mb(null, {
                    classes: 'ML__frac-line',
                    mode: this.mode,
                    style: this.style
                });
                Ad.height = pd / 2, Ad.depth = pd / 2, wd = new Vb({
                    individualShift: [{
                            box: od,
                            shift: rd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        },
                        {
                            box: Ad,
                            shift: pd / 2 - zd,
                            classes: td
                        },
                        {
                            box: md,
                            shift: -qd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(jd);
            }
            const xd = jd.isDisplayStyle ? kd.delim1 : kd.delim2,
                yd = this.isSelected ? ' ML__selected' : '',
                zd = this.leftDelim ? this.bind(Qc, Cc('mopen', this.leftDelim, xd, !0, Qc, {
                    style: this.style,
                    mode: this.mode,
                    classes: yd
                })) : Ec(jd, 'mopen');
            let Ad = null;
            Ad = this.continuousFraction ? new Mb(null, {
                type: 'mclose'
            }) : this.rightDelim ? this.bind(Qc, Cc('mclose', this.rightDelim, xd, !0, Qc, {
                style: this.style,
                mode: this.mode,
                classes: yd
            })) : Ec(jd, 'mclose');
            const Bd = this.bind(Qc, new Mb([
                zd,
                wd,
                Ad
            ], {
                isTight: jd.isTight,
                type: 'mord',
                classes: 'mfrac'
            }));
            return Bd ? (this.caret && (Bd.caret = this.caret), this.attachSupsub(Qc, {
                base: Bd
            })) : null;
        }
        constructor(Qc, rc, F, P, Xc) {
            var hd, id;
            super('genfrac', P, {
                style: Xc.style,
                command: Qc,
                serialize: Xc.serialize,
                displayContainsHighlight: !0
            }), this.above = rc, this.below = F, this.hasBarLine = null === (hd = null == Xc ? void 0 : Xc.hasBarLine) || void 0 === hd || hd, this.continuousFraction = null !== (id = null == Xc ? void 0 : Xc.continuousFraction) && void 0 !== id && id, this.numerPrefix = null == Xc ? void 0 : Xc.numerPrefix, this.denomPrefix = null == Xc ? void 0 : Xc.denomPrefix, this.mathstyleName = null == Xc ? void 0 : Xc.mathstyleName, this.leftDelim = null == Xc ? void 0 : Xc.leftDelim, this.rightDelim = null == Xc ? void 0 : Xc.rightDelim;
        }
    }
    class hd extends kc {
        static fromJson(Qc, rc) {
            const id = new hd(Qc.command, rc);
            return Qc.isSuggestion && (id.isSuggestion = !0), Qc.isError && (id.isError = !0), id;
        }
        toJson() {
            const jd = {};
            return this.isSuggestion && (jd.isSuggestion = !0), this.isError && (jd.isError = !0), {
                ...super.toJson(),
                ...jd
            };
        }
        get computedStyle() {
            return {};
        }
        render(Qc) {
            const id = new Mb(this.value, {
                classes: this.isSuggestion ? 'ML__suggestion' : this.isError ? 'ML__error' : '',
                type: 'latex',
                maxFontSize: 1
            });
            return id ? (this.caret && (id.caret = this.caret), this.bind(Qc, id)) : null;
        }
        constructor(Qc, rc, F) {
            var id;
            super('latex', rc, {
                value: Qc,
                mode: 'latex'
            }), this.isSuggestion = null !== (id = null == F ? void 0 : F.isSuggestion) && void 0 !== id && id, this.isError = !1, this.verbatimLatex = Qc;
        }
    }
    class id extends kc {
        static fromJson(Qc, rc) {
            return new id('', rc);
        }
        toJson() {
            return super.toJson();
        }
        render(Qc) {
            const jd = kc.createBox(Qc, this.body, {
                newList: !0
            });
            return jd ? (this.caret && (jd.caret = this.caret), this.bind(Qc, jd)) : null;
        }
        serialize(Qc) {
            var jd, kd;
            return null !== (kd = null === (jd = this.body) || void 0 === jd ? void 0 : jd.map(Qc => Qc.value).join('')) && void 0 !== kd ? kd : '';
        }
        constructor(Qc, rc) {
            super('latexgroup', rc, {
                mode: 'latex'
            }), this.body = [...Qc].map(Qc => new hd(Qc, rc)), this.skipBoundary = !1;
        }
    }
    class jd extends kc {
        static fromJson(Qc, rc) {
            return new jd(Qc.command, Qc.body, rc, Qc);
        }
        toJson() {
            return {
                ...super.toJson(),
                position: this.position
            };
        }
        render(Qc) {
            const kd = new Cb(Qc, this.style, 'cramp'),
                ld = kc.createBox(kd, this.body);
            if (!ld)
                return null;
            const md = kd.metrics.defaultRuleThickness / kd.scalingFactor,
                nd = new Mb(null, {
                    classes: this.position + '-line'
                });
            let od;
            return nd.height = md, nd.maxFontSize = 1.125 * md * kd.scalingFactor, od = 'overline' === this.position ? new Vb({
                shift: 0,
                children: [{
                        box: ld
                    },
                    3 * md,
                    {
                        box: nd
                    },
                    md
                ]
            }) : new Vb({
                top: ld.height,
                children: [
                    md,
                    {
                        box: nd
                    },
                    3 * md,
                    {
                        box: ld
                    }
                ]
            }), this.caret && (od.caret = this.caret), new Mb(od, {
                classes: this.position,
                type: 'mord'
            });
        }
        constructor(Qc, rc, F, P) {
            super('line', F, {
                command: Qc,
                style: P.style
            }), this.skipBoundary = !0, this.body = rc, this.position = P.position;
        }
    }
    class kd extends kc {
        static fromJson(Qc, rc) {
            return new kd(Qc.command, Qc.body ? Qc.body : Qc.value, rc, Qc);
        }
        toJson() {
            const ld = super.toJson();
            return this.hasArgument && (ld.hasArgument = !0), this.variant && (ld.variant = this.variant), this.variantStyle && (ld.variantStyle = this.variantStyle), this.subsupPlacement && (ld.limits = this.subsupPlacement), this.isExtensibleSymbol && (ld.isExtensibleSymbol = !0), this.value && (ld.symbol = this.value), ld;
        }
        render(Qc) {
            var ld;
            let md, nd = 0,
                od = 0;
            if (this.isExtensibleSymbol) {
                const pd = Qc.isDisplayStyle && '\\smallint' !== this.value;
                if (md = new Mb(this.value, {
                        fontFamily: pd ? 'Size2-Regular' : 'Size1-Regular',
                        classes: 'op-symbol ' + (pd ? 'large-op' : 'small-op'),
                        type: 'mop',
                        maxFontSize: Qc.scalingFactor
                    }), !md)
                    return null;
                md.right = md.italic, nd = (md.height - md.depth) / 2 - 0.25 * Qc.scalingFactor, od = md.italic, md.setStyle('color', this.style.color), md.setStyle('background-color', this.style.backgroundColor);
            } else if (this.body) {
                if (md = kc.createBox(Qc, this.body, {
                        newList: !0
                    }), !md)
                    return null;
                md.setStyle('color', this.style.color), md.setStyle('background-color', this.style.backgroundColor);
            } else
                md = new Mb(this.value, {
                    type: 'mop',
                    mode: 'math',
                    maxFontSize: Qc.scalingFactor,
                    style: {
                        color: this.style.color,
                        backgroundColor: this.style.backgroundColor,
                        letterShapeStyle: Qc.letterShapeStyle,
                        variant: this.variant,
                        variantStyle: this.variantStyle
                    }
                });
            this.isExtensibleSymbol && md.setTop(nd);
            let pd = qd;
            if (this.superscript || this.subscript) {
                const rd = null !== (ld = this.subsupPlacement) && void 0 !== ld ? ld : 'auto';
                pd = 'over-under' === rd || 'auto' === rd && Qc.isDisplayStyle ? this.attachLimits(Qc, {
                    base: qd,
                    baseShift: nd,
                    slant: od
                }) : this.attachSupsub(Qc, {
                    base: qd
                });
            }
            return this.caret && (pd.caret = this.caret), new Mb(this.bind(Qc, pd), {
                type: 'mop',
                classes: 'op-group' + (this.isSelected ? ' ML__selected' : '')
            });
        }
        serialize(Qc) {
            if ('\u200B' === this.value)
                return this.supsubToLatex(Qc);
            const ld = [];
            return ld.push(this.command), this.hasArgument && ld.push(`{${ this.bodyToLatex(Qc) }}`), this.explicitSubsupPlacement && ('over-under' === this.subsupPlacement && ld.push('\\limits'), 'adjacent' === this.subsupPlacement && ld.push('\\nolimits'), 'auto' === this.subsupPlacement && ld.push('\\displaylimits')), ld.push(this.supsubToLatex(Qc)), ec(ld);
        }
        constructor(Qc, rc, F, P) {
            var ld, md, nd, od;
            super(null !== (ld = P.type) && void 0 !== ld ? ld : 'mop', F, {
                command: Qc,
                style: P.style,
                isFunction: null == P ? void 0 : P.isFunction
            }), 'string' == typeof rc ? this.value = rc : this.body = rc, this.captureSelection = null !== (md = P.captureSelection) && void 0 !== md && md, this.hasArgument = null !== (nd = P.hasArgument) && void 0 !== nd && nd, this.variant = null == P ? void 0 : P.variant, this.variantStyle = null == P ? void 0 : P.variantStyle, this.subsupPlacement = null == P ? void 0 : P.limits, this.isExtensibleSymbol = null !== (od = null == P ? void 0 : P.isExtensibleSymbol) && void 0 !== od && od;
        }
    }
    class ld extends kc {
        static fromJson(Qc, rc) {
            return new ld(Qc.command, Qc.body, rc, Qc);
        }
        toJson() {
            const md = {};
            return this.align && (md.align = this.align), this.boxType && (md.boxType = this.boxType), {
                ...super.toJson(),
                ...md
            };
        }
        render(Qc) {
            const md = kc.createBox(Qc, this.body, {
                classes: 'inner'
            });
            return md ? (this.caret && (md.caret = this.caret), this.bind(Qc, new Mb([
                md,
                new Mb(null, {
                    classes: 'fix'
                })
            ], {
                classes: 'left' === this.align ? 'llap' : 'rlap',
                type: this.boxType
            }))) : null;
        }
        constructor(Qc, rc, F, P) {
            var md, nd;
            super('overlap', F, {
                command: Qc,
                style: null == P ? void 0 : P.style
            }), this.skipBoundary = !0, this.body = 'string' == typeof rc ? [new kc('mord', F, {
                value: rc
            })] : rc, this.align = null !== (md = null == P ? void 0 : P.align) && void 0 !== md ? md : 'left', this.boxType = null !== (nd = null == P ? void 0 : P.boxType) && void 0 !== nd ? nd : 'mord';
        }
    }
    class md extends kc {
        static fromJson(Qc, rc) {
            return new md(Qc.command, Qc.body, rc, Qc);
        }
        toJson() {
            const nd = {};
            return this.isInvisible && (nd.isInvisible = !0), this.smashDepth && (nd.smashDepth = !0), this.smashHeight && (nd.smashHeight = !0), this.smashWidth && (nd.smashWidth = !0), {
                ...super.toJson(),
                ...nd
            };
        }
        render(Qc) {
            const nd = new Cb(Qc, {
                isPhantom: !0
            });
            if (!this.smashDepth && !this.smashHeight && !this.smashWidth)
                return kc.createBox(nd, this.body, {
                    classes: 'inner'
                });
            const od = kc.createBox(this.isInvisible ? nd : Qc, this.body);
            if (!od)
                return null;
            if (this.smashWidth) {
                const pd = new Mb(null, {
                    classes: 'fix'
                });
                return new Mb([
                    od,
                    pd
                ], {
                    classes: 'rlap'
                }).wrap(Qc);
            }
            if (!this.smashHeight && !this.smashDepth)
                return od;
            if (this.smashHeight && (od.height = 0), this.smashDepth && (od.depth = 0), od.children)
                for (const pd of od.children)
                    this.smashHeight && (pd.height = 0), this.smashDepth && (pd.depth = 0);
            return new Vb({
                firstBaseline: [{
                    box: od
                }]
            }, {
                type: 'mord'
            }).wrap(Qc);
        }
        constructor(Qc, rc, F, P) {
            var nd, od, pd, qd;
            super('phantom', F, {
                command: Qc,
                style: P.style
            }), this.captureSelection = !0, this.body = rc, this.isInvisible = null !== (nd = P.isInvisible) && void 0 !== nd && nd, this.smashDepth = null !== (od = P.smashDepth) && void 0 !== od && od, this.smashHeight = null !== (pd = P.smashHeight) && void 0 !== pd && pd, this.smashWidth = null !== (qd = P.smashWidth) && void 0 !== qd && qd;
        }
    }
    class nd extends kc {
        static fromJson(Qc, rc) {
            return new nd(Qc.command, rc, Qc);
        }
        toJson() {
            const od = {
                height: this.height,
                width: this.width
            };
            return this.shift && (od.shift = this.shift), {
                ...super.toJson(),
                ...od
            };
        }
        render(Qc) {
            const od = new Cb(Qc, this.style, 'textstyle'),
                pd = Ab(this.shift),
                qd = Ab(this.width),
                rd = Ab(this.height),
                sd = new Mb(null, {
                    classes: 'rule',
                    type: 'mord'
                });
            return sd.setStyle('border-right-width', qd, 'em'), sd.setStyle('border-top-width', rd, 'em'), sd.setStyle('border-color', this.style.color), sd.setStyle('vertical-align', pd, 'em'), this.isSelected && sd.setStyle('opacity', '50%'), sd.width = qd, sd.height = rd + pd, sd.depth = -pd, this.bind(Qc, sd), this.caret && (sd.caret = this.caret), sd.wrap(od);
        }
        serialize(Qc) {
            var od;
            let pd = null !== (od = this.command) && void 0 !== od ? od : '';
            return this.shift && (pd += `[${ Bb(this.shift) }]`), pd += `{${ Bb(this.width) }}{${ Bb(this.height) }}`, pd;
        }
        constructor(Qc, rc, F) {
            var od;
            super('rule', rc, {
                command: Qc,
                style: F.style
            }), this.shift = null !== (od = F.shift) && void 0 !== od ? od : {
                dimension: 0
            }, this.height = F.height, this.width = F.width;
        }
    }
    class od extends kc {
        static fromJson(Qc, rc) {
            return new od(Qc.command, rc, {
                ...Qc,
                index: Qc.above
            });
        }
        toJson() {
            return super.toJson();
        }
        serialize(Qc) {
            let pd = '';
            return this.above && (pd += `[${ this.aboveToLatex(Qc) }]`), pd += `{${ this.bodyToLatex(Qc) }}`, this.command + pd;
        }
        render(Qc) {
            var pd;
            const qd = new Cb(Qc, this.style, 'cramp'),
                rd = null !== (pd = kc.createBox(qd, this.body, {
                    style: this.style,
                    newList: !0
                })) && void 0 !== pd ? pd : new Mb(null),
                sd = qd.scalingFactor,
                td = qd.metrics.defaultRuleThickness / sd,
                ud = Qc.isDisplayStyle ? 0.431 : td,
                vd = new Mb(null, {
                    classes: 'ML__sqrt-line',
                    style: this.style,
                    height: td
                });
            let wd = sd * (td + ud / 4);
            const xd = Math.max(2 * sd * ud, rd.height + rd.depth) + wd + td,
                yd = new Cb(Qc, this.style),
                zd = this.isSelected ? ' ML__selected' : '',
                Ad = this.bind(yd, new Mb(Cc('', '\\surd', xd, !1, yd, {
                    classes: zd
                }), {
                    classes: 'ML__sqrt-sign' + zd,
                    style: this.style
                }));
            if (!Ad)
                return null;
            const Bd = Ad.height + Ad.depth - td;
            Bd > rd.height + rd.depth + wd && (wd = (wd + Bd - (rd.height + rd.depth)) / 2), Ad.setTop(Ad.height - rd.height - wd);
            const Cd = this.bind(Qc, new Vb({
                    firstBaseline: [{
                            box: new Mb(rd)
                        },
                        wd - 2 * td,
                        {
                            box: vd
                        },
                        td
                    ]
                }).wrap(Qc)),
                Dd = kc.createBox(new Cb(Qc, this.style, 'scriptscriptstyle'), this.above, {
                    style: this.style,
                    newList: !0
                });
            if (!Dd) {
                const Ed = new Mb([
                    Ad,
                    Cd
                ], {
                    classes: this.containsCaret ? 'ML__contains-caret' : '',
                    type: 'mord'
                });
                return this.caret && (Ed.caret = this.caret), this.bind(Qc, Ed.wrap(Qc));
            }
            const Ed = new Vb({
                    shift: -0.6 * (Math.max(Ad.height, Cd.height) - Math.max(Ad.depth, Cd.depth)),
                    children: [{
                        box: Dd
                    }]
                }),
                Fd = new Mb([
                    new Mb(Ed, {
                        classes: 'ML__sqrt-index'
                    }),
                    Ad,
                    Cd
                ], {
                    type: 'mord',
                    classes: this.containsCaret ? 'ML__contains-caret' : ''
                });
            return Fd.height = Ad.height, Fd.depth = Ad.depth, this.caret && (Fd.caret = this.caret), this.bind(Qc, Fd.wrap(Qc));
        }
        constructor(Qc, rc, F) {
            var pd;
            super('surd', rc, {
                command: Qc,
                mode: null !== (pd = F.mode) && void 0 !== pd ? pd : 'math',
                style: F.style,
                displayContainsHighlight: !0
            }), this.body = F.body, this.above = F.index;
        }
    }
    const pd = {
            'p@': '1pt ',
            'z@': '0pt',
            maxdimen: '16383.99999pt',
            hfuzz: '0.1pt',
            vfuzz: '0.1pt',
            overfullrule: '5pt',
            hsize: '6.5in',
            vsize: '8.9in',
            parindent: '20pt',
            maxdepth: '4pt',
            splitmaxdepth: '\\maxdimen',
            boxmaxdepth: '\\maxdimen',
            delimitershortfall: '5pt',
            nulldelimiterspace: '1.2pt',
            scriptspace: '0.5pt',
            topskip: '10pt',
            splittopskip: '10pt',
            normalbaselineskip: '12pt',
            normallineskip: '1pt',
            normallineskiplimit: '0pt',
            jot: '3pt',
            doublerulesep: '2pt',
            arrayrulewidth: '0.4pt',
            arraycolsep: '5pt',
            fboxsep: '3pt',
            fboxrule: '0.4pt'
        },
        qd = {
            'z@skip': '0pt plust0pt minus0pt',
            hideskip: '-1000pt plust 1fill',
            '@flushglue': '0pt plust 1fill',
            parskip: '0pt plus 1pt',
            abovedisplayskip: '12pt plus 3pt minus 9pt',
            abovedisplayshortskip: '0pt plus 3pt',
            belowdisplayskip: '12pt plus 3pt minus 9pt',
            belowdisplayshortskip: '7pt plus 3pt minus 4pt',
            parfillskip: '0pt plus 1fil',
            thinmuskip: '3mu',
            medmuskip: '4mu plus 2mu minus 4mu',
            thickmuskip: '5mu plus 5mu',
            smallskipamount: '3pt plus1pt minus1pt',
            medskipamount: '6pt plus2pt minus2pt',
            bigskipamount: '12pt plus4pt minus4pt'
        },
        rd = {
            pretolerance: 100,
            tolerance: 200,
            hbadness: 1000,
            vbadness: 1000,
            linepenalty: 10,
            hyphenpenalty: 50,
            exhyphenpenalty: 50,
            binoppenalty: 700,
            relpenalty: 500,
            clubpenalty: 150,
            widowpenalty: 150,
            displaywidowpenalty: 50,
            brokenpenalty: 100,
            predisplaypenalty: 10000,
            doublehyphendemerits: 10000,
            finalhyphendemerits: 5000,
            adjdemerits: 10000,
            tracinglostchars: 1,
            uchyph: 1,
            delimiterfactor: 901,
            defaulthyphenchar: '\\-',
            defaultskewchar: -1,
            newlinechar: -1,
            showboxbreadth: 5,
            showboxdepth: 3,
            errorcontextlines: 5,
            interdisplaylinepenalty: 100,
            interfootnotelinepenalty: 100,
            baselineSkip: 1.2,
            arraystretch: '',
            month: new Date().getMonth() + 1,
            day: new Date().getDate(),
            year: new Date().getFullYear()
        };
    let sd;

    function td(Qc) {
        var ud, vd;
        if (sd)
            return sd;
        sd = {
            ...rd
        };
        for (const wd of Object.keys(pd))
            sd[wd] = null !== (ud = Uc(pd[wd], Qc, sd)) && void 0 !== ud ? ud : 0;
        for (const xd of Object.keys(qd))
            sd[xd] = null !== (wd = Tc(qd[xd], Qc, sd)) && void 0 !== wd ? wd : 0;
        return sd;
    }

    function ud() {
        const vd = {
            registers: {},
            smartFence: !1,
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            letterShapeStyle: i.locale.startsWith('fr') ? 'french' : 'tex',
            colorMap: q,
            backgroundColorMap: r,
            getDefinition: vd,
            getMacro: vd => xd(vd, T())
        };
        return {
            ...vd,
            registers: td(vd)
        };
    }

    function vd(Qc, wd = 'math') {
        if (!Qc || 0 === Qc.length)
            return null;
        let xd = null;
        if (Qc.startsWith('\\')) {
            if (xd = x[Qc], xd)
                return xd;
            'math' === wd ? xd = v[Qc] : A[Qc] && (xd = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: A[Qc]
            });
        } else if ('math' === wd) {
            if (xd = v[Qc], !xd && 1 === Qc.length) {
                const yd = I('math', Qc.codePointAt(0));
                return yd.startsWith('\\') ? {
                    ...vd(yd, 'math'),
                    command: yd
                } : null;
            }
        } else
            A[Qc] ? xd = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: A[Qc]
            } : 'text' === wd && (xd = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: Qc.codePointAt(0)
            });
        return !xd || 'symbol' !== xd.definitionType || 'mord' !== xd.type || 102 !== xd.codepoint && 103 !== xd.codepoint && 104 !== xd.codepoint || (xd.isFunction = !0), null != xd ? xd : null;
    }

    function xd(Qc, wd) {
        return Qc.startsWith('\\') ? wd[Qc.slice(1)] : null;
    }
    class yd extends kc {
        static fromJson(Qc, wd) {
            return new yd(Qc.body, zd(Qc.tooltip, wd), wd, Qc);
        }
        toJson() {
            var zd;
            const Ad = null === (zd = this.tooltip.body) || void 0 === zd ? void 0 : zd.filter(zd => 'first' !== zd.type).map(zd => zd.toJson());
            return {
                ...super.toJson(),
                tooltip: Ad
            };
        }
        render(Qc) {
            const zd = kc.createBox(Qc, this.body, {
                style: this.style
            });
            if (!zd)
                return null;
            const Ad = Ob(Rb(new Mb(this.tooltip.render(new Cb({
                    registers: Qc.registers
                }, {
                    fontSize: 5
                }, 'displaystyle')), {
                    classes: 'ML__tooltip-content'
                }))),
                Bd = new Mb([
                    Ad,
                    zd
                ], {
                    classes: 'ML__tooltip-container'
                });
            return this.caret && (Bd.caret = this.caret), this.bind(Qc, Bd);
        }
        serialize(Qc) {
            return `${ this.command }{${ this.bodyToLatex(Qc) }}{${ kc.serialize(this.tooltip.body, Qc) }}`;
        }
        constructor(Qc, wd, F, P) {
            super('tooltip', F, {
                command: null == P ? void 0 : P.command,
                mode: 'math',
                serialize: null == P ? void 0 : P.serialize,
                style: null == P ? void 0 : P.style,
                displayContainsHighlight: !0
            }), this.body = Qc;
            const zd = ud();
            this.tooltip = new kc('root', zd, {
                style: {}
            }), this.tooltip.body = wd, this.skipBoundary = !0, this.captureSelection = !1;
        }
    }

    function zd(Qc, wd) {
        if (P(Qc))
            return Qc.map(Qc => zd(Qc, wd));
        Qc = {
            ...Qc
        };
        for (const Ad of hc)
            Qc[Ad] && (Qc[Ad] = zd(Qc[Ad], wd));
        Qc.array && (Qc.array = zd(Qc.array, wd));
        const Bd = Qc.type;
        let Cd;
        'accent' === Bd && (Cd = nc.fromJson(Qc, wd)), 'array' === Bd && (Cd = Wc.fromJson(Qc, wd)), 'box' === Bd && (Cd = Vc.fromJson(Qc, wd)), 'composition' === Bd && (Cd = _c.fromJson(Qc, wd)), 'chem' === Bd && (Cd = ad.fromJson(Qc, wd)), 'choice' === Bd && (Cd = Ad.fromJson(Qc, wd)), 'delim' === Bd && (Cd = dd.fromJson(Qc, wd)), 'enclose' === Bd && (Cd = fd.fromJson(Qc, wd)), 'error' === Bd && (Cd = Lc.fromJson(Qc, wd)), 'genfrac' === Bd && (Cd = gd.fromJson(Qc, wd)), 'group' === Bd && (Cd = Gc.fromJson(Qc, wd)), 'latex' === Bd && (Cd = hd.fromJson(Qc, wd)), 'latexgroup' === Bd && (Cd = id.fromJson(Qc, wd)), 'leftright' === Bd && (Cd = Ic.fromJson(Qc, wd)), 'line' === Bd && (Cd = jd.fromJson(Qc, wd)), 'macro' === Bd && (Cd = Mc.fromJson(Qc, wd)), 'msubsup' === Bd && (Cd = Jc.fromJson(Qc, wd)), 'overlap' === Bd && (Cd = ld.fromJson(Qc, wd)), 'overunder' === Bd && (Cd = Fc.fromJson(Qc, wd)), 'placeholder' === Bd && (Qc.defaultValue && (Qc.defaultValue = zd(Qc.defaultValue, wd)), Cd = Kc.fromJson(Qc, wd)), 'phantom' === Bd && (Cd = md.fromJson(Qc, wd)), 'rule' === Bd && (Cd = nd.fromJson(Qc, wd)), 'sizeddelim' === Bd && (Cd = ed.fromJson(Qc, wd)), 'spacing' === Bd && (Cd = Hc.fromJson(Qc, wd)), 'surd' === Bd && (Cd = od.fromJson(Qc, wd)), 'text' === Bd && (Cd = Nc.fromJson(Qc, wd)), 'tooltip' === Bd && (Cd = yd.fromJson(Qc, wd)), 'mop' === Bd && (Cd = kd.fromJson(Qc, wd)), Cd || (Cd = kc.fromJson(Qc, wd));
        for (const Dd of hc)
            Qc[Dd] && Cd.setChildren(Qc[Dd], Dd);
        return void 0 !== Qc.verbatimLatex && (Cd.verbatimLatex = Qc.verbatimLatex), Qc.subsupPlacement && (Cd.subsupPlacement = Qc.subsupPlacement), Qc.explicitSubsupPlacement && (Cd.explicitSubsupPlacement = !0), Qc.isFunction && (Cd.isFunction = !0), Qc.isExtensibleSymbol && (Cd.isExtensibleSymbol = !0), Qc.skipBoundary && (Cd.skipBoundary = !0), Qc.captureSelection && (Cd.captureSelection = !0), Cd;
    }
    class Ad extends kc {
        static fromJson(Qc, wd) {
            return new Ad([
                zd(Qc.choices[0], wd),
                zd(Qc.choices[1], wd),
                zd(Qc.choices[2], wd),
                zd(Qc.choices[3], wd)
            ], wd);
        }
        toJson() {
            const Bd = [];
            for (const Cd of this.choices)
                Bd.push(Cd.filter(Bd => 'first' !== Bd.type).map(Bd => Bd.toJson()));
            return {
                ...super.toJson(),
                choices: Bd
            };
        }
        render(Qc) {
            const Bd = kc.createBox(Qc, this.choices[Math.floor(Qc.mathstyle.id / 2)]);
            return Bd ? (this.caret && (Bd.caret = this.caret), this.bind(Qc, Bd)) : null;
        }
        serialize(Qc) {
            return `\\mathchoice{${ kc.serialize(this.choices[0], Qc) }}{${ kc.serialize(this.choices[1], Qc) }}{${ kc.serialize(this.choices[2], Qc) }}{${ kc.serialize(this.choices[3], Qc) }}`;
        }
        constructor(Qc, wd) {
            super('choice', wd), this.choices = Qc, this.skipBoundary = !0;
        }
    }
    R('mathtip', '{:math}{:math}', {
        createAtom: (Qc, wd, F, P) => new yd(wd[0], wd[1], P, {
            command: Qc,
            content: 'math',
            style: F
        })
    }), R('texttip', '{:math}{:text}', {
        createAtom: (Qc, wd, F, P) => new yd(wd[0], wd[1], P, {
            command: Qc,
            content: 'text',
            style: F
        })
    }), R('error', '{:math}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            mode: 'math',
            command: '\\error',
            customClass: 'ML__error',
            style: F,
            serialize: (Qc, wd) => `\\error{${ Qc.bodyToLatex(wd) }}`
        })
    }), R('ensuremath', '{:math}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            mode: 'math',
            latexOpen: '\\ensuremath{',
            latexClose: '}',
            style: F
        })
    }), R('color', '{:string}', {
        applyStyle: (Qc, wd, F) => {
            var Bd, Cd;
            const Dd = wd[0];
            return {
                verbatimColor: wd[0],
                color: null !== (Cd = null === (Bd = F.colorMap) || void 0 === Bd ? void 0 : Bd.call(F, Dd)) && void 0 !== Cd ? Cd : Dd
            };
        }
    }), R('textcolor', '{:string}{content:auto*}', {
        applyStyle: (Qc, wd, F) => {
            var Bd, Cd;
            const Dd = wd[0];
            return {
                verbatimColor: Dd,
                color: null !== (Cd = null === (Bd = F.colorMap) || void 0 === Bd ? void 0 : Bd.call(F, Dd)) && void 0 !== Cd ? Cd : Dd
            };
        }
    }), R('boxed', '{content:math}', {
        createAtom: (Qc, wd, F, P) => new Vc(Qc, wd[0], P, {
            framecolor: 'black',
            style: F
        })
    }), R('colorbox', '{:string}{content:auto*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd, F) => {
            var Bd, Cd;
            const Dd = wd[0];
            return {
                verbatimBackgroundColor: wd[0],
                backgroundColor: null !== (Cd = null === (Bd = F.backgroundColorMap) || void 0 === Bd ? void 0 : Bd.call(F, Dd)) && void 0 !== Cd ? Cd : Dd
            };
        }
    }), R('fcolorbox', '{frame-color:string}{background-color:string}{content:auto}', {
        applyMode: 'text',
        createAtom: (Qc, wd, F, P) => {
            var Bd, Cd, Dd, Ed;
            const Fd = wd[0],
                Gd = wd[1];
            return new Vc(Qc, wd[2], P, {
                verbatimFramecolor: Fd,
                framecolor: null !== (Cd = null === (Bd = P.colorMap) || void 0 === Bd ? void 0 : Bd.call(P, Fd)) && void 0 !== Cd ? Cd : Fd,
                verbatimBackgroundcolor: wd[1],
                backgroundcolor: null !== (Ed = null === (Dd = P.backgroundColorMap) || void 0 === Dd ? void 0 : Dd.call(P, Gd)) && void 0 !== Ed ? Ed : Gd,
                style: F,
                serialize: (Qc, wd) => {
                    var Hd, Id;
                    return `${ Qc.command }{${ null !== (Hd = Qc.verbatimFramecolor) && void 0 !== Hd ? Hd : Qc.framecolor }{${ null !== (Id = Qc.verbatimBackgroundcolor) && void 0 !== Id ? Id : Qc.backgroundcolor }}{${ Qc.bodyToLatex(wd) }}`;
                }
            });
        }
    }), R('bbox', '[:bbox]{body:auto}', {
        createAtom: (Qc, wd, F, P) => {
            if (wd[0]) {
                const Bd = wd[0];
                return new Vc(Qc, wd[1], P, {
                    padding: Bd.padding,
                    border: Bd.border,
                    backgroundcolor: Bd.backgroundcolor,
                    style: F,
                    serialize: (wd, F) => {
                        var Cd;
                        let Dd = Ed;
                        if (Number.isFinite(wd.padding) || void 0 !== wd.border || void 0 !== wd.backgroundcolor) {
                            const Fd = [];
                            wd.padding && Fd.push(wd.padding), wd.border && Fd.push(`border: ${ wd.border }`), (wd.verbatimBackgroundcolor || wd.backgroundcolor) && Fd.push(null !== (Cd = wd.verbatimBackgroundcolor) && void 0 !== Cd ? Cd : wd.backgroundcolor), Dd += `[${ Fd.join(',') }]`;
                        }
                        return Dd + `{${ wd.bodyToLatex(F) }}`;
                    }
                });
            }
            return new Vc(Qc, wd[1], P, {
                style: F
            });
        }
    }), R([
        'displaystyle',
        'textstyle',
        'scriptstyle',
        'scriptscriptstyle'
    ], '{:rest}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            latexOpen: `{${ Qc } `,
            latexClose: '}',
            style: F,
            mathstyleName: Qc.slice(1)
        })
    }), R([
        'tiny',
        'scriptsize',
        'footnotesize',
        'small',
        'normalsize',
        'large',
        'Large',
        'LARGE',
        'huge',
        'Huge'
    ], '', {
        applyStyle: (Qc, wd) => ({
            fontSize: {
                '\\tiny': 1,
                '\\scriptsize': 2,
                '\\footnotesize': 3,
                '\\small': 4,
                '\\normalsize': 5,
                '\\large': 6,
                '\\Large': 7,
                '\\LARGE': 8,
                '\\huge': 9,
                '\\Huge': 10
            } [Qc]
        })
    }), R('fontseries', '{:string}', {
        ifMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontSeries: wd[0]
        })
    }), R('fontshape', '{:string}', {
        ifMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: wd[0]
        })
    }), R('fontfamily', '{:string}', {
        ifMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontFamily: wd[0]
        })
    }), R('selectfont', '', {
        ifMode: 'text',
        applyStyle: (Qc, wd) => ({})
    }), R('bf', '', {
        applyStyle: (Qc, wd) => ({
            fontSeries: 'b',
            fontShape: 'n',
            fontFamily: 'cmr'
        })
    }), R([
        'boldsymbol',
        'bm'
    ], '{:math*}', {
        applyMode: 'math',
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            latexOpen: `${ Qc }{`,
            latexClose: '}',
            style: F,
            customClass: 'ML__boldsymbol'
        })
    }), R('bold', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variantStyle: 'bold'
        })
    }), R('bfseries', '', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontSeries: 'b'
        })
    }), R('mdseries', '', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontSeries: 'm'
        })
    }), R('upshape', '', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'n'
        })
    }), R('slshape', '', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'sl'
        })
    }), R('scshape', '', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'sc'
        })
    }), R('textbf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontSeries: 'b'
        })
    }), R('textmd', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontSeries: 'm'
        })
    }), R('textup', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'n'
        })
    }), R('textnormal', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'n',
            fontSeries: 'm'
        })
    }), R('textsl', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'sl'
        })
    }), R('textit', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'it'
        })
    }), R('textsc', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontShape: 'sc'
        })
    }), R('textrm', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontFamily: 'roman'
        })
    }), R('textsf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontFamily: 'sans-serif'
        })
    }), R('texttt', '{:text*}', {
        applyMode: 'text',
        applyStyle: (Qc, wd) => ({
            fontFamily: 'monospace'
        })
    }), R('mathbf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'normal',
            variantStyle: 'bold'
        })
    }), R('mathit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'main',
            variantStyle: 'italic'
        })
    }), R('mathnormal', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'normal',
            variantStyle: 'italic'
        })
    }), R('mathbfit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'main',
            variantStyle: 'bolditalic'
        })
    }), R('mathrm', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'normal',
            variantStyle: 'up'
        })
    }), R('mathsf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'sans-serif',
            variantStyle: 'up'
        })
    }), R('mathtt', '{:math*}', {
        applyMode: 'math',
        applyStyle: (Qc, wd) => ({
            variant: 'monospace',
            variantStyle: 'up'
        })
    }), R('it', '', {
        applyStyle: (Qc, wd) => ({
            fontSeries: 'm',
            fontShape: 'it',
            fontFamily: 'cmr',
            variantStyle: 'italic'
        })
    }), R('rmfamily', '', {
        applyStyle: (Qc, wd) => ({
            fontFamily: 'roman'
        })
    }), R('sffamily', '', {
        applyStyle: (Qc, wd) => ({
            fontFamily: 'sans-serif'
        })
    }), R('ttfamily', '', {
        applyStyle: (Qc, wd) => ({
            fontFamily: 'monospace'
        })
    }), R([
        'Bbb',
        'mathbb'
    ], '{:math*}', {
        applyStyle: (Qc, wd) => ({
            variant: 'double-struck',
            variantStyle: 'up'
        })
    }), R([
        'frak',
        'mathfrak'
    ], '{:math*}', {
        applyStyle: (Qc, wd) => ({
            variant: 'fraktur',
            variantStyle: 'up'
        })
    }), R('mathcal', '{:math*}', {
        applyStyle: (Qc, wd) => ({
            variant: 'calligraphic',
            variantStyle: 'up'
        })
    }), R('mathscr', '{:math*}', {
        applyStyle: (Qc, wd) => ({
            variant: 'script',
            variantStyle: 'up'
        })
    }), R('mbox', '{:text}', {
        ifMode: 'math',
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            changeMode: !0,
            style: F,
            mode: 'text',
            command: Qc,
            serialize: (Qc, wd) => `\\mbox{${ Qc.bodyToLatex({
                ...wd,
                skipModeCommand: !0
            }) }}`
        })
    }), R('text', '{:text}', {
        ifMode: 'math',
        applyMode: 'text'
    }), R('class', '{name:string}{content:auto*}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[1], P, {
            customClass: wd[0],
            style: F
        })
    }), R('cssId', '{id:string}{content:auto}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[1], P, {
            cssId: wd[0],
            style: F
        })
    }), R('htmlData', '{data:string}{content:auto}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[1], P, {
            htmlData: wd[0],
            style: F
        })
    }), R('htmlStyle', '{data:string}{content:auto}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[1], P, {
            htmlStyle: wd[0],
            style: F
        })
    }), R('em', '{:auto*}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            latexOpen: '\\em',
            latexClose: '',
            customClass: 'ML__emph',
            style: F
        })
    }), R('emph', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new Gc(wd[0], P, {
            latexOpen: '\\emph{',
            latexClose: '}',
            customClass: 'ML__emph',
            style: F
        })
    });
    const Bd = {
        '\\bigl': {
            mclass: 'mopen',
            size: 1
        },
        '\\Bigl': {
            mclass: 'mopen',
            size: 2
        },
        '\\biggl': {
            mclass: 'mopen',
            size: 3
        },
        '\\Biggl': {
            mclass: 'mopen',
            size: 4
        },
        '\\bigr': {
            mclass: 'mclose',
            size: 1
        },
        '\\Bigr': {
            mclass: 'mclose',
            size: 2
        },
        '\\biggr': {
            mclass: 'mclose',
            size: 3
        },
        '\\Biggr': {
            mclass: 'mclose',
            size: 4
        },
        '\\bigm': {
            mclass: 'mrel',
            size: 1
        },
        '\\Bigm': {
            mclass: 'mrel',
            size: 2
        },
        '\\biggm': {
            mclass: 'mrel',
            size: 3
        },
        '\\Biggm': {
            mclass: 'mrel',
            size: 4
        },
        '\\big': {
            mclass: 'mord',
            size: 1
        },
        '\\Big': {
            mclass: 'mord',
            size: 2
        },
        '\\bigg': {
            mclass: 'mord',
            size: 3
        },
        '\\Bigg': {
            mclass: 'mord',
            size: 4
        }
    };
    R([
        'bigl',
        'Bigl',
        'biggl',
        'Biggl',
        'bigr',
        'Bigr',
        'biggr',
        'Biggr',
        'bigm',
        'Bigm',
        'biggm',
        'Biggm',
        'big',
        'Big',
        'bigg',
        'Bigg'
    ], '{:delim}', {
        createAtom: (Qc, wd, F, P) => new ed(Qc, wd[0], P, {
            size: Bd[Qc].size,
            delimClass: Bd[Qc].mclass,
            style: F
        })
    }), R([
        'hspace',
        'hspace*'
    ], '{width:glue}', {
        createAtom: (Qc, wd, F, P) => {
            var Cd;
            return new Hc(Qc, F, P, null !== (Cd = wd[0]) && void 0 !== Cd ? Cd : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), R([
        'mkern',
        'kern'
    ], '{width:glue}', {
        createAtom: (Qc, wd, F, P) => {
            var Cd;
            return new Hc(Qc, F, P, null !== (Cd = wd[0]) && void 0 !== Cd ? Cd : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), R('mspace', '{width:glue}', {
        createAtom: (Qc, wd, F, P) => {
            var Cd;
            return new Hc(Qc, F, P, null !== (Cd = wd[0]) && void 0 !== Cd ? Cd : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), R('mathop', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, wd[0], P, {
            type: 'mop',
            captureSelection: !0,
            limits: 'over-under',
            isFunction: !0,
            hasArgument: !0,
            style: F
        })
    }), R('mathchoice', '{:math}{:math}{:math}{:math}', {
        createAtom: (Qc, wd, F, P) => new Ad(wd, P)
    }), R([
        'mathbin',
        'mathrel',
        'mathopen',
        'mathclose',
        'mathpunct',
        'mathord',
        'mathinner'
    ], '{:auto}', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, wd[0], P, {
            type: {
                '\\mathbin': 'mbin',
                '\\mathrel': 'mrel',
                '\\mathopen': 'mopen',
                '\\mathclose': 'mclose',
                '\\mathpunct': 'mpunct',
                '\\mathord': 'mord',
                '\\mathinner': 'minner'
            } [Qc],
            captureSelection: !0,
            hasArgument: !0,
            style: F
        })
    }), R([
        'operatorname',
        'operatorname*'
    ], '{operator:math}', {
        createAtom: (Qc, wd, F, P) => {
            const Cd = new kd(Qc, wd[0], P, {
                isFunction: !0,
                hasArgument: !0,
                limits: '\\operatorname' === Qc ? 'adjacent' : 'over-under',
                style: F
            });
            return Cd.captureSelection = !0, Cd.body && Cd.body.forEach(Qc => {
                var Dd;
                'first' !== Qc.type && (Qc.type = 'mord', Qc.value = null !== (Dd = {
                    '\u2217': '*',
                    '\u2212': '-'
                } [Qc.value]) && void 0 !== Dd ? Dd : Qc.value, Qc.isFunction = !1, Qc.style.variant || Qc.style.variantStyle || (Qc.style.variant = 'main', Qc.style.variantStyle = 'up'));
            }), Cd;
        }
    });
    class Cd extends kc {
        serialize(Qc) {
            return '\\unicode"' + ('000000' + this.codepoint.toString(16)).toUpperCase().slice(-6);
        }
        constructor(Qc, wd, F) {
            let Dd = Number.parseInt(Qc);
            Number.isFinite(Dd) || (Dd = 10067), super('mord', F, {
                value: String.fromCodePoint(Dd),
                style: wd
            }), this.codepoint = Dd;
        }
    }

    function Dd(Qc) {
        if (1 === Qc.length) {
            const Ed = Qc[0];
            if ('mbin' === Ed.type)
                return 'mbin';
            if ('mrel' === Ed.type)
                return 'mrel';
        }
        return 'mord';
    }
    R('unicode', '{charcode:number}', {
        createAtom: (Qc, wd, F, P) => new Cd(wd[0], F, P)
    }), R('rule', '[raise:dimen]{width:dimen}{thickness:dimen}', {
        createAtom: (Qc, wd, F, P) => new nd(Qc, P, {
            shift: wd[0],
            width: wd[1],
            height: wd[2],
            style: F
        })
    }), R('overline', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new jd(Qc, wd[0], P, {
            position: 'overline',
            style: F
        })
    }), R('underline', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new jd(Qc, wd[0], P, {
            position: 'underline',
            style: F
        })
    }), R('overset', '{above:auto}{base:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            above: wd[0],
            body: wd[1],
            skipBoundary: !1,
            style: F,
            boxType: Dd(wd[1]),
            serialize: (Qc, wd) => `${ Qc.command }{${ Qc.aboveToLatex(wd) }}{${ Qc.bodyToLatex(wd) }}`
        })
    }), R('underset', '{below:auto}{base:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            below: wd[0],
            body: wd[1],
            skipBoundary: !1,
            style: F,
            boxType: Dd(wd[1]),
            serialize: (wd, F) => `${ Qc }{${ wd.belowToLatex(F) }}{${ wd.bodyToLatex(F) }}`
        })
    }), R('overunderset', '{above:auto}{below:auto}{base:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            above: wd[0],
            below: wd[1],
            body: wd[2],
            skipBoundary: !1,
            style: F,
            boxType: Dd(wd[2]),
            serialize: (Qc, wd) => `${ Qc.command }{${ Qc.aboveToLatex(wd) }}{${ Qc.bodyToLatex(wd) }}`
        })
    }), R([
        'stackrel',
        'stackbin'
    ], '[below:auto]{above:auto}{base:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            body: wd[2],
            above: wd[1],
            below: wd[0],
            skipBoundary: !1,
            style: F,
            boxType: '\\stackrel' === Qc ? 'mrel' : 'mbin',
            serialize: (Qc, wd) => `${ Qc.command }{${ Qc.aboveToLatex(wd) }}{${ Qc.bodyToLatex(wd) }}`
        })
    }), R('smash', '[:string]{:auto}', {
        createAtom: (Qc, wd, F, P) => wd[0] ? new md(Qc, wd[1], P, {
            smashHeight: wd[0].includes('t'),
            smashDepth: wd[0].includes('b'),
            style: F
        }) : new md(Qc, wd[1], P, {
            smashHeight: !0,
            smashDepth: !0,
            style: F
        })
    }), R(['vphantom'], '{:auto*}', {
        createAtom: (Qc, wd, F, P) => new md(Qc, wd[1], P, {
            isInvisible: !0,
            smashWidth: !0,
            style: F
        })
    }), R(['hphantom'], '{:auto*}', {
        createAtom: (Qc, wd, F, P) => new md(Qc, wd[1], P, {
            isInvisible: !0,
            smashHeight: !0,
            smashDepth: !0,
            style: F
        })
    }), R(['phantom'], '{:auto*}', {
        createAtom: (Qc, wd, F, P) => new md(Qc, wd[1], P, {
            isInvisible: !0,
            style: F
        })
    }), R('not', '{:math}', {
        createAtom: (Qc, wd, F, P) => {
            if (wd.length < 1 || null === wd[0])
                return new kc('mrel', P, {
                    command: Qc,
                    style: F,
                    value: '\uE020'
                });
            const Ed = wd[0];
            return new Gc([
                new ld(Qc, '\uE020', P, {
                    align: 'right',
                    style: F,
                    boxType: 'mrel'
                }),
                ...Ed
            ], P, {
                boxType: 'mrel',
                captureSelection: !0,
                command: '\\not',
                serialize: (Qc, wd) => {
                    const Fd = kc.serialize(Ed, wd);
                    return 1 !== Fd.length || /[a-zA-Z]/.test(Fd) ? `\\not{${ Fd }}` : '\\not' + Fd;
                }
            });
        }
    }), R([
        'ne',
        'neq'
    ], '', {
        createAtom: (Qc, wd, F, P) => new Gc([
            new ld(Qc, '\uE020', P, {
                align: 'right',
                style: F,
                boxType: 'mrel'
            }),
            new kc('mrel', P, {
                style: F,
                value: '='
            })
        ], P, {
            boxType: 'mrel',
            captureSelection: !0,
            serialize: () => Qc,
            command: Qc
        })
    }), R('rlap', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new ld(Qc, wd[0], P, {
            align: 'right',
            style: F
        })
    }), R('llap', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new ld(Qc, wd[0], P, {
            style: F
        })
    }), R('mathllap', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new ld(Qc, wd[0], P, {
            style: F
        })
    }), R('mathrlap', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new ld(Qc, wd[0], P, {
            align: 'right',
            style: F
        })
    });
    const Ed = {
        acute: 714,
        grave: 715,
        dot: 729,
        ddot: 168,
        mathring: 730,
        tilde: 126,
        bar: 713,
        breve: 728,
        check: 711,
        hat: 94,
        vec: 8407
    };

    function Fd(Qc) {
        for (const Gd of Qc)
            for (const Hd of Gd)
                if (Hd.length > 0)
                    return !1;
        return !0;
    }
    R(Object.keys(Ed), '{body:auto}', {
        createAtom: (Qc, wd, F, P) => new nc(Qc, wd[0], P, {
            accentChar: Ed[Qc.slice(1)],
            style: F
        })
    }), R([
        'widehat',
        'widecheck',
        'widetilde'
    ], '{body:auto}', {
        createAtom: (Qc, wd, F, P) => {
            const Gd = N(wd[0]);
            return new nc(Qc, wd[0], P, {
                style: F,
                svgAccent: Qc.slice(1) + (Gd.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][Gd.length])
            });
        }
    }), R([
        'overarc',
        'overparen',
        'wideparen'
    ], '{body:auto}', {
        createAtom: (Qc, wd, F, P) => new nc(Qc, wd[0], P, {
            style: F,
            svgAccent: 'overarc'
        })
    }), R([
        'underarc',
        'underparen'
    ], '{body:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            body: wd[0],
            style: F,
            svgBelow: 'underarc'
        })
    }), R('utilde', '{body:auto}', {
        createAtom: (Qc, wd, F, P) => {
            const Gd = N(wd[0]),
                Hd = 'widetilde' + (Gd.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][Gd.length]);
            return new Fc(Qc, P, {
                body: wd[0],
                svgBelow: Hd,
                style: F,
                boxType: Dd(wd[0])
            });
        }
    }), R('^', '{:string}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd;
            return new kc('mord', P, {
                command: Qc,
                isFunction: !1,
                limits: 'adjacent',
                style: F,
                value: wd[0] && null !== (Gd = {
                    a: 'â',
                    e: 'ê',
                    i: 'î',
                    o: 'ô',
                    u: 'û',
                    A: 'Â',
                    E: 'Ê',
                    I: 'Î',
                    O: 'Ô',
                    U: 'Û'
                } [wd[0]]) && void 0 !== Gd ? Gd : '^'
            });
        }
    }), R('`', '{:string}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd;
            return new kc('mord', P, {
                command: Qc,
                isFunction: !1,
                limits: 'adjacent',
                style: F,
                value: wd[0] && null !== (Gd = {
                    a: 'à',
                    e: 'è',
                    i: 'ì',
                    o: 'ò',
                    u: 'ù',
                    A: 'À',
                    E: 'È',
                    I: 'Ì',
                    O: 'Ò',
                    U: 'Ù'
                } [wd[0]]) && void 0 !== Gd ? Gd : '`'
            });
        }
    }), R('\'', '{:string}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd;
            return new kc('mord', P, {
                command: Qc,
                isFunction: !1,
                limits: 'adjacent',
                style: F,
                value: wd[0] && null !== (Gd = {
                    a: 'á',
                    e: 'é',
                    i: 'í',
                    o: 'ó',
                    u: 'ú',
                    A: 'Á',
                    E: 'É',
                    I: 'Í',
                    O: 'Ó',
                    U: 'Ú'
                } [wd[0]]) && void 0 !== Gd ? Gd : '^'
            });
        }
    }), R('~', '{:string}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd;
            return new kc('mord', P, {
                command: Qc,
                isFunction: !1,
                limits: 'adjacent',
                style: F,
                value: wd[0] && null !== (Gd = {
                    n: 'ñ',
                    N: 'Ñ',
                    a: 'ã',
                    o: 'õ',
                    A: 'Ã',
                    O: 'Õ'
                } [wd[0]]) && void 0 !== Gd ? Gd : '\xB4'
            });
        }
    }), R('c', '{:string}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd;
            return new kc('mord', P, {
                command: Qc,
                isFunction: !1,
                limits: 'adjacent',
                style: F,
                value: wd[0] && null !== (Gd = {
                    c: 'ç',
                    C: 'Ç'
                } [wd[0]]) && void 0 !== Gd ? Gd : ''
            });
        }
    }), R('enclose', '{notation:string}[style:string]{body:auto}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd;
            const Hd = {
                strokeColor: 'currentColor',
                strokeWidth: '',
                strokeStyle: 'solid',
                backgroundcolor: 'transparent',
                padding: 'auto',
                shadow: 'auto',
                svgStrokeStyle: void 0,
                borderStyle: void 0,
                style: F
            };
            if (wd[1]) {
                const Id = wd[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
                for (const Jd of Id) {
                    const Kd = Jd.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                    if (Kd)
                        Hd.strokeWidth = Kd[1], Hd.strokeStyle = Kd[2], Hd.strokeColor = Kd[3];
                    else {
                        const Ld = Jd.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                        Ld && ('mathbackground' === Ld[1] ? Hd.backgroundcolor = Ld[2] : 'mathcolor' === Ld[1] ? Hd.strokeColor = Ld[2] : 'padding' === Ld[1] ? Hd.padding = Ld[2] : 'shadow' === Ld[1] && (Hd.shadow = Ld[2]));
                    }
                }
                'dashed' === Hd.strokeStyle ? Hd.svgStrokeStyle = '5,5' : 'dotted' === Hd.strokeStyle && (Hd.svgStrokeStyle = '1,5');
            }
            Hd.borderStyle = `${ Hd.strokeWidth } ${ Hd.strokeStyle } ${ Hd.strokeColor }`;
            const Id = {};
            return (null !== (Gd = wd[0]) && void 0 !== Gd ? Gd : '').split(/[, ]/).filter(Qc => Qc.length > 0).forEach(Qc => {
                Id[Qc.toLowerCase()] = !0;
            }), new fd(Qc, wd[2], Id, P, Hd);
        }
    }), R('cancel', '{body:auto}', {
        createAtom: (Qc, wd, F, P) => new fd(Qc, wd[0], {
            updiagonalstrike: !0
        }, P, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: F
        })
    }), R('bcancel', '{body:auto}', {
        createAtom: (Qc, wd, F, P) => new fd(Qc, wd[0], {
            downdiagonalstrike: !0
        }, P, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: F
        })
    }), R('xcancel', '{body:auto}', {
        createAtom: (Qc, wd, F, P) => new fd(Qc, wd[0], {
            updiagonalstrike: !0,
            downdiagonalstrike: !0
        }, P, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: F
        })
    }), O('math', '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        mathstyleName: 'textstyle'
    }))), O('displaymath', '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        mathstyleName: 'textstyle'
    }))), Q('array', '{columns:colspec}', (Qc, wd, F, P, Xc) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        columns: Xc[0],
        mathstyleName: 'textstyle'
    }))), Q([
        'equation',
        'equation*',
        'subequations'
    ], '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        columns: [{
            align: 'c'
        }]
    }))), Q('multline', '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        columns: [{
            align: 'm'
        }]
    }))), Q([
        'align',
        'align*',
        'aligned',
        'eqnarray'
    ], '', (Qc, wd, F, P) => {
        let Gd = 0;
        Fd(F) && (F = [
            [
                [
                    new kc('first', Qc),
                    new Kc(Qc)
                ],
                [
                    new kc('first', Qc),
                    new Kc(Qc)
                ]
            ]
        ]);
        for (const Hd of F)
            Gd = Math.max(Gd, Hd.length);
        const Id = [{
                gap: 0
            },
            {
                align: 'r'
            },
            {
                gap: 0.25
            },
            {
                align: 'l'
            }
        ];
        let Jd = 2;
        for (; Jd < Gd;)
            Id.push({
                gap: 1
            }), Id.push({
                align: 'r'
            }), Id.push({
                gap: 0.25
            }), Id.push({
                align: 'l'
            }), Jd += 2;
        return Id.push({
            gap: 0
        }), new Wc(Hd, wd, F, P, {
            arraycolsep: 0,
            columns: Id,
            colSeparationType: 'align',
            jot: 0.3,
            minColumns: 2
        });
    }), Q('split', '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ],
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        columns: [{
                align: 'r'
            },
            {
                align: 'l'
            }
        ],
        minColumns: 2
    }))), Q([
        'gather',
        'gathered'
    ], '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        columns: [{
                gap: 0.25
            },
            {
                align: 'c'
            },
            {
                gap: 0
            }
        ],
        colSeparationType: 'gather'
    }))), Q([
        'matrix',
        'pmatrix',
        'bmatrix',
        'Bmatrix',
        'vmatrix',
        'Vmatrix',
        'matrix*',
        'pmatrix*',
        'bmatrix*',
        'Bmatrix*',
        'vmatrix*',
        'Vmatrix*'
    ], '[columns:colspec]', (Qc, wd, F, P, Xc) => {
        var Gd;
        Fd(F) && (F = [
            [
                [
                    new kc('first', Qc),
                    new Kc(Qc)
                ]
            ]
        ]);
        let Hd = '.',
            Id = '.';
        switch (wd) {
            case 'pmatrix':
            case 'pmatrix*':
                Hd = '(', Id = ')';
                break;
            case 'bmatrix':
            case 'bmatrix*':
                Hd = '[', Id = ']';
                break;
            case 'Bmatrix':
            case 'Bmatrix*':
                Hd = '\\lbrace', Id = '\\rbrace';
                break;
            case 'vmatrix':
            case 'vmatrix*':
                Hd = '\\vert', Id = '\\vert';
                break;
            case 'Vmatrix':
            case 'Vmatrix*':
                Hd = '\\Vert', Id = '\\Vert';
                break;
            case 'matrix':
            case 'matrix*':
                Hd = '.', Id = '.';
        }
        return new Wc(Qc, wd, F, P, {
            mathstyleName: 'textstyle',
            leftDelim: Hd,
            rightDelim: Id,
            columns: null !== (Gd = Xc[0]) && void 0 !== Gd ? Gd : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ]
        });
    }), Q([
        'smallmatrix',
        'smallmatrix*'
    ], '[columns:colspec]', (Qc, wd, F, P, Xc) => {
        var Gd;
        return Fd(F) && (F = [
            [
                [
                    new kc('first', Qc),
                    new Kc(Qc)
                ]
            ]
        ]), new Wc(Qc, wd, F, P, {
            mathstyleName: 'scriptstyle',
            columns: null !== (Gd = Xc[0]) && void 0 !== Gd ? Gd : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ],
            colSeparationType: 'small',
            arraystretch: 0.5
        });
    }), Q([
        'cases',
        'dcases'
    ], '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        mathstyleName: 'dcases' === wd ? 'displaystyle' : 'textstyle',
        arraystretch: 1.2,
        leftDelim: '\\lbrace',
        rightDelim: '.',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), Q('rcases', '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        arraystretch: 1.2,
        leftDelim: '.',
        rightDelim: '\\rbrace',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), O('center', '', (Qc, wd, F, P) => (Fd(F) && (F = [
        [
            [
                new kc('first', Qc),
                new Kc(Qc)
            ]
        ]
    ]), new Wc(Qc, wd, F, P, {
        columns: [{
            align: 'c'
        }]
    }))), R([
        'overrightarrow',
        'overleftarrow',
        'Overrightarrow',
        'overleftharpoon',
        'overrightharpoon',
        'overleftrightarrow',
        'overlinesegment',
        'overgroup'
    ], '{:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            body: wd[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: F,
            svgAbove: Qc.slice(1)
        })
    }), R('overbrace', '{:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            body: wd[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: F,
            svgAbove: Qc.slice(1)
        })
    }), R([
        'underrightarrow',
        'underleftarrow',
        'underleftrightarrow',
        'underlinesegment',
        'undergroup'
    ], '{:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            body: wd[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: F,
            svgBelow: Qc.slice(1)
        })
    }), R(['underbrace'], '{:auto}', {
        createAtom: (Qc, wd, F, P) => new Fc(Qc, P, {
            body: wd[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: F,
            svgBelow: Qc.slice(1)
        })
    }), R([
        'xrightarrow',
        'xleftarrow',
        'xRightarrow',
        'xLeftarrow',
        'xleftharpoonup',
        'xleftharpoondown',
        'xrightharpoonup',
        'xrightharpoondown',
        'xlongequal',
        'xtwoheadleftarrow',
        'xtwoheadrightarrow',
        'xleftrightarrow',
        'xLeftrightarrow',
        'xrightleftharpoons',
        'xleftrightharpoons',
        'xhookleftarrow',
        'xhookrightarrow',
        'xmapsto',
        'xtofrom',
        'xrightleftarrows',
        'xrightequilibrium',
        'xleftequilibrium'
    ], '[:auto]{:auto}', {
        createAtom: (Qc, wd, F, P) => {
            var Gd, Hd;
            return new Fc(Qc, P, {
                style: F,
                svgBody: Qc.slice(1),
                above: 0 === (null === (Gd = wd[1]) || void 0 === Gd ? void 0 : Gd.length) ? void 0 : wd[1],
                below: null !== (Hd = wd[0]) && void 0 !== Hd ? Hd : null,
                skipBoundary: !1,
                supsubPlacement: 'over-under',
                paddedBody: !0,
                paddedLabels: !0,
                boxType: 'mrel',
                serialize: (wd, F) => Qc + (wd.hasEmptyBranch('below') ? '' : `[${ wd.belowToLatex(F) }]`) + `{${ wd.aboveToLatex(F) }}${ wd.supsubToLatex(F) }`
            });
        }
    }), R([
        'arccos',
        'arcsin',
        'arctan',
        'arctg',
        'arcctg',
        'arg',
        'ch',
        'cos',
        'cosh',
        'cot',
        'cotg',
        'coth',
        'ctg',
        'cth',
        'csc',
        'cosec',
        'dim',
        'exp',
        'hom',
        'inf',
        'ker',
        'lb',
        'lg',
        'ln',
        'log',
        'Pr',
        'sec',
        'sh',
        'sin',
        'sinh',
        'sup',
        'tan',
        'tanh',
        'tg',
        'th',
        'arcsec',
        'arccsc',
        'arsinh',
        'arcosh',
        'artanh',
        'arcsech',
        'arccsch'
    ], '', {
        isFunction: !0,
        createAtom: (Qc, wd, F, P) => new kd(Qc, Qc.slice(1), P, {
            limits: 'adjacent',
            isFunction: !0,
            variant: 'main',
            variantStyle: 'up',
            style: F
        })
    }), R([
        'liminf',
        'limsup'
    ], '', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, {
            '\\liminf': 'lim inf',
            '\\limsup': 'lim sup'
        } [Qc], P, {
            limits: 'over-under',
            variant: 'main',
            style: F
        })
    }), R([
        'lim',
        'mod'
    ], '', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, Qc.slice(1), P, {
            limits: 'over-under',
            variant: 'main',
            style: F
        })
    }), R([
        'det',
        'max',
        'min'
    ], '', {
        isFunction: !0,
        createAtom: (Qc, wd, F, P) => new kd(Qc, Qc.slice(1), P, {
            limits: 'over-under',
            isFunction: !0,
            variant: 'main',
            style: F
        })
    }), R(['ang'], '{:math}', {
        isFunction: !0,
        createAtom: (Qc, wd, F, P) => new Gc([
            ...wd[0],
            new kc('mord', P, {
                value: '\xB0',
                style: F
            })
        ], P, {
            mode: 'math',
            latexOpen: '\\ang{',
            latexClose: '}',
            style: F
        })
    }), R('sqrt', '[index:auto]{radicand:auto}', {
        createAtom: (Qc, wd, F, P) => new od(Qc, P, {
            body: wd[1],
            index: wd[0],
            style: F
        })
    }), R([
        'frac',
        'dfrac',
        'tfrac',
        'cfrac',
        'binom',
        'dbinom',
        'tbinom'
    ], '{numerator}{denominator}', {
        createAtom: (Qc, wd, F, P) => {
            const Gd = {
                style: F
            };
            switch (Qc) {
                case '\\dfrac':
                case '\\frac':
                case '\\tfrac':
                    Gd.hasBarLine = !0;
                    break;
                case '\\atopfrac':
                    Gd.hasBarLine = !1;
                    break;
                case '\\dbinom':
                case '\\binom':
                case '\\tbinom':
                    Gd.hasBarLine = !1, Gd.leftDelim = '(', Gd.rightDelim = ')';
            }
            switch (Qc) {
                case '\\dfrac':
                case '\\dbinom':
                    Gd.mathstyleName = 'displaystyle';
                    break;
                case '\\tfrac':
                case '\\tbinom':
                    Gd.mathstyleName = 'textstyle';
                    break;
                case '\\cfrac':
                    Gd.hasBarLine = !0, Gd.continuousFraction = !0;
            }
            return new gd(Qc, wd[0], wd[1], P, Gd);
        }
    }), R([
        'brace',
        'brack'
    ], '', {
        infix: !0,
        createAtom: (Qc, wd, F, P) => new gd(Qc, wd[0], wd[1], P, {
            hasBarLine: !1,
            leftDelim: '\\brace' === Qc ? '\\lbrace' : '\\lbrack',
            rightDelim: '\\brace' === Qc ? '\\rbrace' : '\\rbrack',
            style: F,
            serialize: (Qc, wd) => ec([
                Qc.aboveToLatex(wd),
                Qc.command,
                Qc.belowToLatex(wd)
            ])
        })
    }), R([
        'over',
        'atop',
        'choose'
    ], '', {
        infix: !0,
        createAtom: (Qc, wd, F, P) => {
            let Gd, Hd;
            return '\\choose' === Qc && (Gd = '(', Hd = ')'), new gd(Qc, wd[0], wd[1], P, {
                hasBarLine: '\\over' === Qc,
                leftDelim: Gd,
                rightDelim: Hd,
                style: F,
                serialize: (Qc, wd) => ec([
                    Qc.aboveToLatex(wd),
                    Qc.command,
                    Qc.belowToLatex(wd)
                ])
            });
        }
    }), R([
        'overwithdelims',
        'atopwithdelims'
    ], '{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}', {
        infix: !0,
        createAtom: (Qc, wd, F, P) => new gd(Qc, wd[0], wd[1], P, {
            leftDelim: wd[2],
            rightDelim: wd[3],
            hasBarLine: !1,
            style: F,
            serialize: (Qc, wd) => `${ Qc.aboveToLatex(wd) } ${ Qc.command }${ Qc.leftDelim }${ Qc.rightDelim }${ Qc.belowToLatex(wd) }`
        })
    }), R('pdiff', '{numerator}{denominator}', {
        createAtom: (Qc, wd, F, P) => new gd(Qc, wd[0], wd[1], P, {
            hasBarLine: !0,
            numerPrefix: '\u2202',
            denomPrefix: '\u2202',
            style: F
        })
    }), R([
        'sum',
        'prod',
        'bigcup',
        'bigcap',
        'coprod',
        'bigvee',
        'bigwedge',
        'biguplus',
        'bigotimes',
        'bigoplus',
        'bigodot',
        'bigsqcup',
        'smallint',
        'intop'
    ], '', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, {
            coprod: '\u2210',
            bigvee: '\u22C1',
            bigwedge: '\u22C0',
            biguplus: '\u2A04',
            bigcap: '\u22C2',
            bigcup: '\u22C3',
            intop: '\u222B',
            prod: '\u220F',
            sum: '\u2211',
            bigotimes: '\u2A02',
            bigoplus: '\u2A01',
            bigodot: '\u2A00',
            bigsqcup: '\u2A06',
            smallint: '\u222B'
        } [Qc.slice(1)], P, {
            isExtensibleSymbol: !0,
            limits: 'auto',
            variant: 'main',
            style: F
        })
    });
    const Gd = {
        int: '\u222B',
        iint: '\u222C',
        iiint: '\u222D',
        oint: '\u222E',
        oiint: '\u222F',
        oiiint: '\u2230',
        intclockwise: '\u2231',
        varointclockwise: '\u2232',
        ointctrclockwise: '\u2233',
        intctrclockwise: '\u2A11',
        sqcup: '\u2294',
        sqcap: '\u2293',
        uplus: '\u228E',
        wr: '\u2240',
        amalg: '\u2A3F',
        Cap: '\u22D2',
        Cup: '\u22D3',
        doublecap: '\u22D2',
        doublecup: '\u22D3'
    };

    function Hd(Qc, wd) {
        return Qc[0] === wd[0] && Qc[1] === wd[1] ? 'equal' : 'different';
    }

    function Id(Qc) {
        let Jd = 1 / 0,
            Kd = -1 / 0;
        for (const Ld of Qc.ranges)
            Jd = Math.min(Jd, Ld[0], Ld[1]), Kd = Math.max(Kd, Ld[0], Ld[1]);
        return [
            Jd,
            Kd
        ];
    }

    function Jd(Qc, wd, F) {
        return F ? function(Qc, wd) {
            if (!wd)
                return '';
            if ('string' == typeof wd)
                return wd;
            if (!Qc || void 0 === wd.after)
                return wd.value;
            let Kd = !1,
                Ld = !1,
                Md = !1,
                Nd = !1,
                Od = !1,
                Pd = !1,
                Qd = !1,
                Rd = !1,
                Sd = !1,
                Td = !1,
                Ud = !1,
                Vd = !1,
                Wd = !1,
                Xd = !1,
                Yd = !1,
                Zd = Qc[0],
                $d = 0;
            for (; Zd && /msubsup|placeholder/.test(Zd.type);)
                $d += 1, Zd = Qc[$d];
            return Kd = !Zd || 'first' === Zd.type, Zd && (Xd = 'text' === Zd.mode, Ld = !Xd && 'mord' === Zd.type && C.test(Zd.value), Md = !Xd && 'mord' === Zd.type && /\d+$/.test(Zd.value), Nd = !Xd && Zd.isFunction, Od = 'genfrac' === Zd.type, Pd = 'surd' === Zd.type, Qd = 'mbin' === Zd.type, Rd = 'mrel' === Zd.type, Sd = 'mop' === Zd.type, Td = 'mpunct' === Zd.type || 'minner' === Zd.type, Ud = 'array' === Zd.type, Vd = 'mopen' === Zd.type, Wd = 'mclose' === Zd.type || 'leftright' === Zd.type, Yd = 'space' === Zd.type), wd.after.includes('nothing') && Kd || wd.after.includes('letter') && Ld || wd.after.includes('digit') && Md || wd.after.includes('function') && Nd || wd.after.includes('frac') && Od || wd.after.includes('surd') && Pd || wd.after.includes('binop') && Qd || wd.after.includes('relop') && Rd || wd.after.includes('operator') && Sd || wd.after.includes('punct') && Td || wd.after.includes('array') && Ud || wd.after.includes('openfence') && Vd || wd.after.includes('closefence') && Wd || wd.after.includes('text') && Xd || wd.after.includes('space') && Yd ? wd.value : '';
        }(Qc, F[wd]) : '';
    }
    R(Object.keys(Gd), '', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, Gd[Qc.slice(1)], P, {
            limits: 'adjacent',
            isExtensibleSymbol: !0,
            style: F,
            variant: {
                '\u22D2': 'ams',
                '\u22D3': 'ams'
            } [Gd[Qc.slice(1)]]
        })
    }), R([
        'Re',
        'Im'
    ], '', {
        createAtom: (Qc, wd, F, P) => new kd(Qc, {
            '\\Re': 'ℜ',
            '\\Im': 'ℑ'
        } [Qc], P, {
            limits: 'adjacent',
            style: F,
            isFunction: !0,
            variant: 'fraktur'
        })
    }), R('middle', '{:delim}', {
        createAtom: (Qc, wd, F, P) => new dd(Qc, wd[0], P, {
            size: 1,
            style: F
        })
    }), G('0123456789/@.?!'), H(65, 90), H(97, 122), G([
        [
            '\\forall',
            8704
        ],
        [
            '\\exists',
            8707
        ],
        [
            '\\nexists',
            8708,
            'mord',
            'ams'
        ],
        [
            '\\mid',
            8739,
            'mrel'
        ],
        [
            '\\top',
            8868
        ],
        [
            '\\bot',
            8869
        ]
    ]), G([
        [
            '\\sharp',
            9839
        ],
        [
            '\\flat',
            9837
        ],
        [
            '\\natural',
            9838
        ],
        [
            '\\#',
            35
        ],
        [
            '\\&',
            38
        ],
        [
            '\\clubsuit',
            9827
        ],
        [
            '\\heartsuit',
            9825
        ],
        [
            '\\spadesuit',
            9824
        ],
        [
            '\\diamondsuit',
            9826
        ],
        [
            '\\parallelogram',
            9649
        ]
    ]), G([
        [
            '\\backslash',
            92
        ],
        [
            '\\nabla',
            8711
        ],
        [
            '\\partial',
            8706
        ],
        [
            '\\ell',
            8467
        ],
        [
            '\\hbar',
            8463
        ],
        [
            '\\Q',
            81,
            'mord',
            'double-struck'
        ],
        [
            '\\C',
            67,
            'mord',
            'double-struck'
        ],
        [
            '\\P',
            80,
            'mord',
            'double-struck'
        ],
        [
            '\\pounds',
            163
        ],
        [
            '\\euro',
            8364
        ]
    ]), G([
        [
            '\\rightarrow',
            8594
        ],
        [
            '\\to',
            8594
        ],
        [
            '\\leftarrow',
            8592
        ],
        [
            '\\gets',
            8592
        ],
        [
            '\\Rightarrow',
            8658
        ],
        [
            '\\Leftarrow',
            8656
        ],
        [
            '\\longrightarrow',
            10230
        ],
        [
            '\\longleftarrow',
            10229
        ],
        [
            '\\Longrightarrow',
            10233
        ],
        [
            '\\implies',
            10233
        ],
        [
            '\\Longleftarrow',
            10232
        ],
        [
            '\\impliedby',
            10232
        ],
        [
            '\\longleftrightarrow',
            10231
        ],
        [
            '\\biconditional',
            10231
        ],
        [
            '\\Longleftrightarrow',
            10234
        ],
        [
            '\\mapsto',
            8614
        ],
        [
            '\\longmapsto',
            10236
        ],
        [
            '\\uparrow',
            8593
        ],
        [
            '\\downarrow',
            8595
        ],
        [
            '\\Uparrow',
            8657
        ],
        [
            '\\Downarrow',
            8659
        ],
        [
            '\\updownarrow',
            8597
        ],
        [
            '\\Updownarrow',
            8661
        ],
        [
            '\\hookrightarrow',
            8618
        ],
        [
            '\\hookleftarrow',
            8617
        ],
        [
            '\\rightharpoonup',
            8640
        ],
        [
            '\\leftharpoonup',
            8636
        ],
        [
            '\\rightharpoondown',
            8641
        ],
        [
            '\\leftharpoondown',
            8637
        ],
        [
            '\\searrow',
            8600
        ],
        [
            '\\nearrow',
            8599
        ],
        [
            '\\swarrow',
            8601
        ],
        [
            '\\nwarrow',
            8598
        ],
        [
            '\\originalof',
            8886
        ],
        [
            '\\laplace',
            8886
        ],
        [
            '\\imageof',
            8887
        ],
        [
            '\\Laplace',
            8887
        ]
    ], 'mrel'), G([
        [
            '\\lbrace',
            123,
            'mopen'
        ],
        [
            '\\rbrace',
            125,
            'mclose'
        ],
        [
            '\\lparen',
            40,
            'mopen'
        ],
        [
            '\\rparen',
            41,
            'mclose'
        ],
        [
            '\\langle',
            10216,
            'mopen'
        ],
        [
            '\\rangle',
            10217,
            'mclose'
        ],
        [
            '\\lfloor',
            8970,
            'mopen'
        ],
        [
            '\\rfloor',
            8971,
            'mclose'
        ],
        [
            '\\lceil',
            8968,
            'mopen'
        ],
        [
            '\\rceil',
            8969,
            'mclose'
        ],
        [
            '\\vert',
            8739
        ],
        [
            '\\lvert',
            8739,
            'mopen'
        ],
        [
            '\\rvert',
            8739,
            'mclose'
        ],
        [
            '\\|',
            8741
        ],
        [
            '\\Vert',
            8741
        ],
        [
            '\\mVert',
            8741
        ],
        [
            '\\lVert',
            8741,
            'mopen'
        ],
        [
            '\\rVert',
            8741,
            'mclose'
        ],
        [
            '\\lbrack',
            91,
            'mopen'
        ],
        [
            '\\rbrack',
            93,
            'mclose'
        ],
        [
            '\\{',
            123,
            'mopen'
        ],
        [
            '\\}',
            125,
            'mclose'
        ],
        [
            '(',
            40,
            'mopen'
        ],
        [
            ')',
            41,
            'mclose'
        ],
        [
            '[',
            91,
            'mopen'
        ],
        [
            ']',
            93,
            'mclose'
        ],
        [
            '\\ulcorner',
            9484,
            'mopen',
            'ams'
        ],
        [
            '\\urcorner',
            9488,
            'mclose',
            'ams'
        ],
        [
            '\\llcorner',
            9492,
            'mopen',
            'ams'
        ],
        [
            '\\lrcorner',
            9496,
            'mclose',
            'ams'
        ],
        [
            '\\lgroup',
            10222,
            'mopen'
        ],
        [
            '\\rgroup',
            10223,
            'mclose'
        ],
        [
            '\\lmoustache',
            9136,
            'mopen'
        ],
        [
            '\\rmoustache',
            9137,
            'mclose'
        ]
    ]), G([
        [
            '\\dashrightarrow',
            8674
        ],
        [
            '\\dashleftarrow',
            8672
        ],
        [
            '\\Rrightarrow',
            8667
        ],
        [
            '\\Lleftarrow',
            8666
        ],
        [
            '\\leftrightarrows',
            8646
        ],
        [
            '\\rightleftarrows',
            8644
        ],
        [
            '\\curvearrowright',
            8631
        ],
        [
            '\\curvearrowleft',
            8630
        ],
        [
            '\\rightrightarrows',
            8649
        ],
        [
            '\\leftleftarrows',
            8647
        ],
        [
            '\\upuparrows',
            8648
        ],
        [
            '\\downdownarrows',
            8650
        ],
        [
            '\\vartriangle',
            9651
        ],
        [
            '\\triangleq',
            8796
        ],
        [
            '\\vartriangleleft',
            8882
        ],
        [
            '\\trianglelefteq',
            8884
        ],
        [
            '\\ntriangleleft',
            8938
        ],
        [
            '\\ntrianglelefteq',
            8940
        ],
        [
            '\\vartriangleright',
            8883
        ],
        [
            '\\trianglerighteq',
            8885
        ],
        [
            '\\ntriangleright',
            8939
        ],
        [
            '\\ntrianglerighteq',
            8941
        ],
        [
            '\\blacktriangleleft',
            9664
        ],
        [
            '\\blacktriangleright',
            9654
        ],
        [
            '\\leftarrowtail',
            8610
        ],
        [
            '\\rightarrowtail',
            8611
        ],
        [
            '\\looparrowright',
            8620
        ],
        [
            '\\looparrowleft',
            8619
        ],
        [
            '\\twoheadleftarrow',
            8606
        ],
        [
            '\\twoheadrightarrow',
            8608
        ],
        [
            '\\rightleftharpoons',
            8652
        ],
        [
            '\\leftrightharpoons',
            8651
        ],
        [
            '\\Rsh',
            8625
        ],
        [
            '\\Lsh',
            8624
        ],
        [
            '\\circlearrowright',
            8635
        ],
        [
            '\\circlearrowleft',
            8634
        ],
        [
            '\\restriction',
            8638
        ],
        [
            '\\upharpoonright',
            8638
        ],
        [
            '\\upharpoonleft',
            8639
        ],
        [
            '\\downharpoonright',
            8642
        ],
        [
            '\\downharpoonleft',
            8643
        ],
        [
            '\\rightsquigarrow',
            8669
        ],
        [
            '\\leadsto',
            8669
        ],
        [
            '\\leftrightsquigarrow',
            8621
        ],
        [
            '\\multimap',
            8888
        ],
        [
            '\\nrightarrow',
            8603
        ],
        [
            '\\nleftarrow',
            8602
        ],
        [
            '\\nRightarrow',
            8655
        ],
        [
            '\\nLeftarrow',
            8653
        ],
        [
            '\\nleftrightarrow',
            8622
        ],
        [
            '\\nLeftrightarrow',
            8654
        ],
        [
            '\\shortparallel',
            8741
        ],
        [
            '\\nless',
            8814
        ],
        [
            '\\nleqslant',
            57360
        ],
        [
            '\\lneq',
            10887
        ],
        [
            '\\lneqq',
            8808
        ],
        [
            '\\nleqq',
            57361
        ],
        [
            '\\lvertneqq',
            57356
        ],
        [
            '\\lnsim',
            8934
        ],
        [
            '\\lnapprox',
            10889
        ],
        [
            '\\nprec',
            8832
        ],
        [
            '\\npreceq',
            8928
        ],
        [
            '\\precnsim',
            8936
        ],
        [
            '\\precnapprox',
            10937
        ],
        [
            '\\nsim',
            8769
        ],
        [
            '\\nshortmid',
            57350
        ],
        [
            '\\nmid',
            8740
        ],
        [
            '\\nvdash',
            8876
        ],
        [
            '\\nvDash',
            8877
        ],
        [
            '\\ngtr',
            8815
        ],
        [
            '\\ngeqslant',
            57359
        ],
        [
            '\\ngeqq',
            57358
        ],
        [
            '\\gneq',
            10888
        ],
        [
            '\\gneqq',
            8809
        ],
        [
            '\\gvertneqq',
            57357
        ],
        [
            '\\gnsim',
            8935
        ],
        [
            '\\gnapprox',
            10890
        ],
        [
            '\\nsucc',
            8833
        ],
        [
            '\\nsucceq',
            8929
        ],
        [
            '\\succnsim',
            8937
        ],
        [
            '\\succnapprox',
            10938
        ],
        [
            '\\ncong',
            8774
        ],
        [
            '\\nshortparallel',
            57351
        ],
        [
            '\\nparallel',
            8742
        ],
        [
            '\\nVDash',
            8879
        ],
        [
            '\\nsupseteqq',
            57368
        ],
        [
            '\\supsetneq',
            8843
        ],
        [
            '\\varsupsetneq',
            57371
        ],
        [
            '\\supsetneqq',
            10956
        ],
        [
            '\\varsupsetneqq',
            57369
        ],
        [
            '\\nVdash',
            8878
        ],
        [
            '\\precneqq',
            10933
        ],
        [
            '\\succneqq',
            10934
        ],
        [
            '\\nsubseteqq',
            57366
        ],
        [
            '\\leqslant',
            10877
        ],
        [
            '\\geqslant',
            10878
        ],
        [
            '\\gtrsim',
            8819
        ],
        [
            '\\approxeq',
            8778
        ],
        [
            '\\thickapprox',
            8776
        ],
        [
            '\\lessapprox',
            10885
        ],
        [
            '\\gtrapprox',
            10886
        ],
        [
            '\\precapprox',
            10935
        ],
        [
            '\\succapprox',
            10936
        ],
        [
            '\\thicksim',
            8764
        ],
        [
            '\\succsim',
            8831
        ],
        [
            '\\precsim',
            8830
        ],
        [
            '\\backsim',
            8765
        ],
        [
            '\\eqsim',
            8770
        ],
        [
            '\\backsimeq',
            8909
        ],
        [
            '\\lesssim',
            8818
        ],
        [
            '\\nleq',
            8816
        ],
        [
            '\\ngeq',
            8817
        ],
        [
            '\\smallsmile',
            8995
        ],
        [
            '\\smallfrown',
            8994
        ],
        [
            '\\leqq',
            8806
        ],
        [
            '\\eqslantless',
            10901
        ],
        [
            '\\lll',
            8920
        ],
        [
            '\\lessgtr',
            8822
        ],
        [
            '\\lesseqgtr',
            8922
        ],
        [
            '\\lesseqqgtr',
            10891
        ],
        [
            '\\risingdotseq',
            8787
        ],
        [
            '\\fallingdotseq',
            8786
        ],
        [
            '\\subseteqq',
            10949
        ],
        [
            '\\Subset',
            8912
        ],
        [
            '\\sqsubset',
            8847
        ],
        [
            '\\preccurlyeq',
            8828
        ],
        [
            '\\curlyeqprec',
            8926
        ],
        [
            '\\vDash',
            8872
        ],
        [
            '\\Vvdash',
            8874
        ],
        [
            '\\bumpeq',
            8783
        ],
        [
            '\\Bumpeq',
            8782
        ],
        [
            '\\geqq',
            8807
        ],
        [
            '\\eqslantgtr',
            10902
        ],
        [
            '\\ggg',
            8921
        ],
        [
            '\\gtrless',
            8823
        ],
        [
            '\\gtreqless',
            8923
        ],
        [
            '\\gtreqqless',
            10892
        ],
        [
            '\\supseteqq',
            10950
        ],
        [
            '\\Supset',
            8913
        ],
        [
            '\\sqsupset',
            8848
        ],
        [
            '\\succcurlyeq',
            8829
        ],
        [
            '\\curlyeqsucc',
            8927
        ],
        [
            '\\Vdash',
            8873
        ],
        [
            '\\shortmid',
            8739
        ],
        [
            '\\between',
            8812
        ],
        [
            '\\pitchfork',
            8916
        ],
        [
            '\\varpropto',
            8733
        ],
        [
            '\\backepsilon',
            8717
        ],
        [
            '\\llless',
            8920
        ],
        [
            '\\gggtr',
            8921
        ],
        [
            '\\doteqdot',
            8785
        ],
        [
            '\\Doteq',
            8785
        ],
        [
            '\\eqcirc',
            8790
        ],
        [
            '\\circeq',
            8791
        ],
        [
            '\\therefore',
            8756
        ],
        [
            '\\because',
            8757
        ]
    ], 'mrel', 'ams'), G([
        [
            '+',
            43
        ],
        [
            '-',
            8722
        ],
        [
            '\u2212',
            8722
        ],
        [
            '\\pm',
            177
        ],
        [
            '\\mp',
            8723
        ],
        [
            '*',
            8727
        ],
        [
            '\\times',
            215
        ],
        [
            '\\div',
            247
        ],
        [
            '\\divides',
            8739
        ],
        [
            '\\cdot',
            8901
        ],
        [
            '\\cap',
            8745
        ],
        [
            '\\cup',
            8746
        ],
        [
            '\\setminus',
            8726
        ],
        [
            '\\land',
            8743
        ],
        [
            '\\wedge',
            8743
        ],
        [
            '\\lor',
            8744
        ],
        [
            '\\vee',
            8744
        ],
        [
            '\\circ',
            8728
        ],
        [
            '\\bigcirc',
            9711
        ],
        [
            '\\bullet',
            8729
        ],
        [
            '\\oplus',
            8853
        ],
        [
            '\\ominus',
            8854
        ],
        [
            '\\otimes',
            8855
        ],
        [
            '\\odot',
            8857
        ],
        [
            '\\oslash',
            8856
        ],
        [
            '\\bigtriangleup',
            9651
        ],
        [
            '\\bigtriangledown',
            9661
        ],
        [
            '\\triangleleft',
            9667
        ],
        [
            '\\triangleright',
            9657
        ],
        [
            '\\And',
            38
        ],
        [
            '\\dagger',
            8224
        ],
        [
            '\\dag',
            8224
        ],
        [
            '\\ddag',
            8225
        ],
        [
            '\\ddagger',
            8225
        ],
        [
            '\\ast',
            8727
        ],
        [
            '\\star',
            8902
        ],
        [
            '\\bigstar',
            9733
        ],
        [
            '\\diamond',
            8900
        ]
    ], 'mbin'), G([
        [
            '\\lhd',
            8882
        ],
        [
            '\\rhd',
            8883
        ],
        [
            '\\lessdot',
            8918
        ],
        [
            '\\gtrdot',
            8919
        ],
        [
            '\\ltimes',
            8905
        ],
        [
            '\\rtimes',
            8906
        ],
        [
            '\\leftthreetimes',
            8907
        ],
        [
            '\\rightthreetimes',
            8908
        ],
        [
            '\\intercal',
            8890
        ],
        [
            '\\dotplus',
            8724
        ],
        [
            '\\doublebarwedge',
            10846
        ],
        [
            '\\divideontimes',
            8903
        ],
        [
            '\\centerdot',
            8901
        ],
        [
            '\\smallsetminus',
            8726
        ],
        [
            '\\barwedge',
            8892
        ],
        [
            '\\veebar',
            8891
        ],
        [
            '\\nor',
            8891
        ],
        [
            '\\curlywedge',
            8911
        ],
        [
            '\\curlyvee',
            8910
        ],
        [
            '\\boxminus',
            8863
        ],
        [
            '\\boxplus',
            8862
        ],
        [
            '\\boxtimes',
            8864
        ],
        [
            '\\boxdot',
            8865
        ],
        [
            '\\circleddash',
            8861
        ],
        [
            '\\circledast',
            8859
        ],
        [
            '\\circledcirc',
            8858
        ],
        [
            '\\unlhd',
            8884
        ],
        [
            '\\unrhd',
            8885
        ]
    ], 'mbin', 'ams'), G([
        [
            '\\surd',
            8730
        ],
        [
            '\\infty',
            8734
        ],
        [
            '\\prime',
            8242
        ],
        [
            '\\doubleprime',
            8243
        ],
        [
            '\\angle',
            8736
        ],
        [
            '`',
            8216
        ],
        [
            '\\$',
            36
        ],
        [
            '\\%',
            37
        ],
        [
            '\\_',
            95
        ],
        [
            '\\alpha',
            945
        ],
        [
            '\\beta',
            946
        ],
        [
            '\\gamma',
            947
        ],
        [
            '\\delta',
            948
        ],
        [
            '\\epsilon',
            1013
        ],
        [
            '\\varepsilon',
            949
        ],
        [
            '\\zeta',
            950
        ],
        [
            '\\eta',
            951
        ],
        [
            '\\theta',
            952
        ],
        [
            '\\vartheta',
            977
        ],
        [
            '\\iota',
            953
        ],
        [
            '\\kappa',
            954
        ],
        [
            '\\varkappa',
            1008,
            'mord',
            'ams'
        ],
        [
            '\\lambda',
            955
        ],
        [
            '\\mu',
            956
        ],
        [
            '\\nu',
            957
        ],
        [
            '\\xi',
            958
        ],
        [
            '\\omicron',
            111
        ],
        [
            '\\pi',
            960
        ],
        [
            '\\varpi',
            982
        ],
        [
            '\\rho',
            961
        ],
        [
            '\\varrho',
            1009
        ],
        [
            '\\sigma',
            963
        ],
        [
            '\\varsigma',
            962
        ],
        [
            '\\tau',
            964
        ],
        [
            '\\phi',
            981
        ],
        [
            '\\varphi',
            966
        ],
        [
            '\\upsilon',
            965
        ],
        [
            '\\chi',
            967
        ],
        [
            '\\psi',
            968
        ],
        [
            '\\omega',
            969
        ],
        [
            '\\Gamma',
            915
        ],
        [
            '\\Delta',
            916
        ],
        [
            '\\Theta',
            920
        ],
        [
            '\\Lambda',
            923
        ],
        [
            '\\Xi',
            926
        ],
        [
            '\\Pi',
            928
        ],
        [
            '\\Sigma',
            931
        ],
        [
            '\\Upsilon',
            933
        ],
        [
            '\\Phi',
            934
        ],
        [
            '\\Psi',
            936
        ],
        [
            '\\Omega',
            937
        ],
        [
            '\\digamma',
            989,
            'mord',
            'ams'
        ],
        [
            '\\emptyset',
            8709
        ]
    ]), G([
        [
            '=',
            61
        ],
        [
            '<',
            60
        ],
        [
            '\\lt',
            60
        ],
        [
            '>',
            62
        ],
        [
            '\\gt',
            62
        ],
        [
            '\\le',
            8804
        ],
        [
            '\\leq',
            8804
        ],
        [
            '\\ge',
            8805
        ],
        [
            '\\geq',
            8805
        ],
        [
            '\\ll',
            8810
        ],
        [
            '\\gg',
            8811
        ],
        [
            '\\coloneq',
            8788
        ],
        [
            '\\measeq',
            8797
        ],
        [
            '\\eqdef',
            8798
        ],
        [
            '\\questeq',
            8799
        ],
        [
            ':',
            58
        ],
        [
            '\\cong',
            8773
        ],
        [
            '\\equiv',
            8801
        ],
        [
            '\\prec',
            8826
        ],
        [
            '\\preceq',
            10927
        ],
        [
            '\\succ',
            8827
        ],
        [
            '\\succeq',
            10928
        ],
        [
            '\\perp',
            8869
        ],
        [
            '\\propto',
            8733
        ],
        [
            '\\Colon',
            8759
        ],
        [
            '\\smile',
            8995
        ],
        [
            '\\frown',
            8994
        ],
        [
            '\\sim',
            8764
        ],
        [
            '\\doteq',
            8784
        ],
        [
            '\\bowtie',
            8904
        ],
        [
            '\\Join',
            8904
        ],
        [
            '\\asymp',
            8781
        ],
        [
            '\\sqsubseteq',
            8849
        ],
        [
            '\\sqsupseteq',
            8850
        ],
        [
            '\\approx',
            8776
        ],
        [
            '\\~',
            126
        ],
        [
            '\\leftrightarrow',
            8596
        ],
        [
            '\\Leftrightarrow',
            8660
        ],
        [
            '\\models',
            8872
        ],
        [
            '\\vdash',
            8866
        ],
        [
            '\\dashv',
            8867
        ],
        [
            '\\roundimplies',
            10608
        ],
        [
            '\\in',
            8712
        ],
        [
            '\\notin',
            8713
        ],
        [
            '\\ni',
            8715
        ],
        [
            '\\owns',
            8715
        ],
        [
            '\\subset',
            8834
        ],
        [
            '\\supset',
            8835
        ],
        [
            '\\subseteq',
            8838
        ],
        [
            '\\supseteq',
            8839
        ],
        [
            '\\differencedelta',
            8710
        ],
        [
            '\\mvert',
            8739
        ],
        [
            '\\parallel',
            8741
        ],
        [
            '\\simeq',
            8771
        ]
    ], 'mrel'), G([
        [
            '\\lnot',
            172
        ],
        [
            '\\neg',
            172
        ],
        [
            '\\triangle',
            9651
        ],
        [
            '\\subsetneq',
            8842
        ],
        [
            '\\varsubsetneq',
            57370
        ],
        [
            '\\subsetneqq',
            10955
        ],
        [
            '\\varsubsetneqq',
            57367
        ],
        [
            '\\nsubset',
            8836
        ],
        [
            '\\nsupset',
            8837
        ],
        [
            '\\nsubseteq',
            8840
        ],
        [
            '\\nsupseteq',
            8841
        ]
    ], 'mrel', 'ams'), G([
        [
            '\\wp',
            8472
        ],
        [
            '\\aleph',
            8501
        ]
    ]), G([
        [
            '\\blacktriangle',
            9650
        ],
        [
            '\\hslash',
            8463
        ],
        [
            '\\Finv',
            8498
        ],
        [
            '\\Game',
            8513
        ],
        [
            '\\eth',
            240
        ],
        [
            '\\mho',
            8487
        ],
        [
            '\\Bbbk',
            107
        ],
        [
            '\\yen',
            165
        ],
        [
            '\\square',
            9633
        ],
        [
            '\\Box',
            9633
        ],
        [
            '\\blacksquare',
            9632
        ],
        [
            '\\circledS',
            9416
        ],
        [
            '\\circledR',
            174
        ],
        [
            '\\triangledown',
            9661
        ],
        [
            '\\blacktriangledown',
            9660
        ],
        [
            '\\checkmark',
            10003
        ],
        [
            '\\diagup',
            9585
        ],
        [
            '\\measuredangle',
            8737
        ],
        [
            '\\sphericalangle',
            8738
        ],
        [
            '\\backprime',
            8245
        ],
        [
            '\\backdoubleprime',
            8246
        ],
        [
            '\\Diamond',
            9674
        ],
        [
            '\\lozenge',
            9674
        ],
        [
            '\\blacklozenge',
            10731
        ],
        [
            '\\varnothing',
            8709
        ],
        [
            '\\complement',
            8705
        ],
        [
            '\\maltese',
            10016
        ],
        [
            '\\beth',
            8502
        ],
        [
            '\\daleth',
            8504
        ],
        [
            '\\gimel',
            8503
        ]
    ], 'mord', 'ams'), G([
        [
            '\\ ',
            160
        ],
        [
            '~',
            160
        ],
        [
            '\\space',
            160
        ]
    ], 'space'), R([
        '!',
        ',',
        ':',
        ';',
        'enskip',
        'enspace',
        'quad',
        'qquad'
    ], '', {
        createAtom: (Qc, wd, F, P) => new Hc(Qc, F, P)
    }), G([
        [
            '\\colon',
            58
        ],
        [
            '\\cdotp',
            8901
        ],
        [
            '\\vdots',
            8942,
            'mord'
        ],
        [
            '\\ldotp',
            46
        ],
        [
            ',',
            44
        ],
        [
            ';',
            59
        ]
    ], 'mpunct'), G([
        [
            '\\cdots',
            8943
        ],
        [
            '\\ddots',
            8945
        ],
        [
            '\\ldots',
            8230
        ],
        [
            '\\mathellipsis',
            8230
        ]
    ], 'minner'), G([
        [
            '\\/',
            47
        ],
        [
            '|',
            8739,
            'mord'
        ],
        [
            '\\imath',
            305
        ],
        [
            '\\jmath',
            567
        ],
        [
            '\\degree',
            176
        ],
        [
            '\'',
            8242
        ],
        [
            '"',
            8221
        ]
    ]);
    const Kd = {
        '&': '\\&',
        '%': '\\%',
        '\'\'': '^{\\doubleprime}',
        alpha: '\\alpha',
        delta: '\\delta',
        Delta: '\\Delta',
        pi: '\\pi',
        Pi: '\\Pi',
        theta: '\\theta',
        Theta: '\\Theta',
        ii: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryI'
        },
        jj: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryJ'
        },
        ee: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\exponentialE'
        },
        nabla: '\\nabla',
        grad: '\\nabla',
        del: '\\partial',
        deg: {
            after: 'digit+space',
            value: '\\degree'
        },
        infty: '\\infty',
        '\u221E': '\\infty',
        oo: {
            after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\infty'
        },
        '\u2211': '\\sum',
        sum: '\\sum_{#?}^{#?}',
        int: '\\int_{#?}^{#?}',
        prod: '\\prod_{#?}^{#?}',
        sqrt: '\\sqrt{#?}',
        '\u2206': '\\differentialD',
        '\u2202': '\\differentialD',
        arcsin: '\\arcsin',
        arccos: '\\arccos',
        arctan: '\\arctan',
        arcsec: '\\arcsec',
        arccsc: '\\arccsc',
        arsinh: '\\arsinh',
        arcosh: '\\arcosh',
        artanh: '\\artanh',
        arcsech: '\\arcsech',
        arccsch: '\\arccsch',
        arg: '\\arg',
        ch: '\\ch',
        cosec: '\\cosec',
        cosh: '\\cosh',
        cot: '\\cot',
        cotg: '\\cotg',
        coth: '\\coth',
        csc: '\\csc',
        ctg: '\\ctg',
        cth: '\\cth',
        sec: '\\sec',
        sinh: '\\sinh',
        sh: '\\sh',
        tanh: '\\tanh',
        tg: '\\tg',
        th: '\\th',
        sin: '\\sin',
        cos: '\\cos',
        tan: '\\tan',
        lg: '\\lg',
        lb: '\\lb',
        log: '\\log',
        ln: '\\ln',
        exp: '\\exp',
        lim: '\\lim_{#?}',
        dx: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD x'
        },
        dy: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD y'
        },
        dt: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD t'
        },
        AA: '\\forall',
        EE: '\\exists',
        '!EE': '\\nexists',
        '&&': '\\land',
        xin: {
            after: 'nothing+text+relop+punct+openfence+space',
            value: 'x \\in'
        },
        in: {
            after: 'nothing+letter+closefence',
            value: '\\in'
        },
        '!in': '\\notin',
        NN: '\\mathbb{N}',
        ZZ: '\\Z',
        QQ: '\\Q',
        RR: '\\R',
        CC: '\\C',
        xx: '\\times',
        '+-': '\\pm',
        '\u2260': '\\ne',
        '!=': '\\ne',
        '\u2265': '\\ge',
        '>=': '\\ge',
        '\u2264': '\\le',
        '<=': '\\le',
        '<<': '\\ll',
        '>>': '\\gg',
        '~~': '\\approx',
        '\u2248': '\\approx',
        '?=': '\\questeq',
        '\xF7': '\\div',
        '\xAC': '\\neg',
        ':=': '\\coloneq',
        '::': '\\Colon',
        '(:': '\\langle',
        ':)': '\\rangle',
        beta: '\\beta',
        chi: '\\chi',
        epsilon: '\\epsilon',
        varepsilon: '\\varepsilon',
        eta: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\eta'
        },
        gamma: '\\gamma',
        Gamma: '\\Gamma',
        iota: '\\iota',
        kappa: '\\kappa',
        lambda: '\\lambda',
        Lambda: '\\Lambda',
        mu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\mu'
        },
        nu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\nu'
        },
        'µ': '\\mu',
        phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\phi'
        },
        Phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Phi'
        },
        varphi: '\\varphi',
        psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\psi'
        },
        Psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Psi'
        },
        rho: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\rho'
        },
        sigma: '\\sigma',
        Sigma: '\\Sigma',
        tau: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\tau'
        },
        vartheta: '\\vartheta',
        upsilon: '\\upsilon',
        xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\xi'
        },
        Xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Xi'
        },
        zeta: '\\zeta',
        omega: '\\omega',
        Omega: '\\Omega',
        'Ω': '\\omega',
        forall: '\\forall',
        exists: '\\exists',
        '!exists': '\\nexists',
        ':.': '\\therefore',
        liminf: '\\liminf_{#?}',
        limsup: '\\limsup_{#?}',
        argmin: '\\operatorname*{arg~min}_{#?}',
        argmax: '\\operatorname*{arg~max}_{#?}',
        det: '\\det',
        mod: '\\mod',
        max: '\\max',
        min: '\\min',
        erf: '\\operatorname{erf}',
        erfc: '\\operatorname{erfc}',
        bessel: '\\operatorname{bessel}',
        mean: '\\operatorname{mean}',
        median: '\\operatorname{median}',
        fft: '\\operatorname{fft}',
        lcm: '\\operatorname{lcm}',
        gcd: '\\operatorname{gcd}',
        randomReal: '\\operatorname{randomReal}',
        randomInteger: '\\operatorname{randomInteger}',
        Re: '\\operatorname{Re}',
        Im: '\\operatorname{Im}',
        mm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{mm}'
        },
        cm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{cm}'
        },
        km: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{km}'
        },
        kg: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{kg}'
        },
        '...': '\\ldots',
        '+...': '+\\cdots',
        '-...': '-\\cdots',
        '->...': '\\to\\cdots',
        '->': '\\to',
        '|->': '\\mapsto',
        '-->': '\\longrightarrow',
        '<--': '\\longleftarrow',
        '=>': '\\Rightarrow',
        '==>': '\\Longrightarrow',
        '<=>': '\\Leftrightarrow',
        '<->': '\\leftrightarrow',
        '(.)': '\\odot',
        '(+)': '\\oplus',
        '(/)': '\\oslash',
        '(*)': '\\otimes',
        '(-)': '\\ominus',
        '||': '\\Vert',
        '{': '\\{',
        '}': '\\}',
        '*': '\\cdot'
    };

    function Ld(Qc, wd) {
        var Md;
        let Nd = null !== (Md = null == wd ? void 0 : wd.format) && void 0 !== Md ? Md : 'auto';
        return 'auto' === Nd && ([Od, Pd] = function(Pd) {
            if ((Pd = Pd.trim()).length <= 1)
                return [
                    'latex',
                    Pd
                ];
            let Qd;
            return [Rd, Sd] = Qd(Sd), Rd ? [
                'latex',
                Sd
            ] : Sd.startsWith('`') && Sd.endsWith('`') ? [
                'ascii-math',
                Sd = Sd.substring(1, Sd.length - 1)
            ] : Sd.includes('\\') ? [
                'latex',
                Sd
            ] : /\$.+\$/.test(Sd) ? [
                'latex',
                `\\text{${ Sd }}`
            ] : [
                void 0,
                Sd
            ];
        }(Pd)), 'ascii-math' === Od ? [
            'ascii-math',
            Md(Pd = (Pd = (Pd = (Pd = (Pd = (Pd = Pd.replace(/\u2061/gu, '')).replace(/\u3016/gu, '{')).replace(/\u3017/gu, '}')).replace(/([^\\])sinx/g, '$1\\sin x')).replace(/([^\\])cosx/g, '$1\\cos x ')).replace(/\u2013/g, '-'), {
                inlineShortcuts: null == wd ? void 0 : wd.inlineShortcuts
            })
        ] : [
            'latex',
            Pd
        ];
    }

    function Md(Qc, wd) {
        var Nd, Od, Pd;
        if (!Qc)
            return '';
        let Qd, Rd = !1;
        const Sd = null !== (Nd = wd.inlineShortcuts) && void 0 !== Nd ? Nd : Kd;
        if (Rd || !Qc.startsWith('^') && !Qc.startsWith('_') || (Qd = Nd(Qc.slice(1), {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Qc = Qc[0] + '{' + Qd.match + '}', Qc += Md(Qd.rest, wd), Rd = !0), !Rd && (Qd = Qc.match(/^(sqrt|\u221A)(.*)/), Qd) && (Qd = Nd(Qd[2], {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Qc = '\\sqrt{' + (null !== (Od = Qd.match) && void 0 !== Od ? Od : '\\placeholder{}') + '}', Qc += Md(Qd.rest, wd), Rd = !0), !Rd && (Qd = Qc.match(/^(\\cbrt|\u221B)(.*)/), Qd) && (Qd = Nd(Qd[2], {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Qc = '\\sqrt[3]{' + (null !== (Pd = Qd.match) && void 0 !== Pd ? Pd : '\\placeholder{}') + '}', Qc += Md(Qd.rest, wd), Rd = !0), Rd || (Qd = Qc.match(/^abs(.*)/), Qd && (Qd = Nd(Qd[1], {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Qc = '\\left|' + Qd.match + '\\right|', Qc += Md(Qd.rest, wd), Rd = !0)), Rd || (Qd = Qc.match(/^["\u201d\u201c](.*?)["\u201d\u201c](.*)/), Qd && (Qc = '\\text{' + Qd[1] + '}', Qc += Md(Qd[2], wd), Rd = !0)), Rd || (Qd = Qc.match(/^([^a-zA-Z\(\{\[\_\^\\\s"]+)(.*)/), Qd && (Qc = Od(Qd[1], Sd), Qc += Md(Qd[2], wd), Rd = !0)), !Rd && /^([fgh])[^a-zA-Z]/.test(Qc) && (Qd = Nd(Qc.slice(1), {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Qc = '(' === Qc[1] ? Qc[0] + '\\left(' + Qd.match + '\\right)' : Qc[0] + Qd.match, Qc += Md(Qd.rest, wd), Rd = !0), Rd || (Qd = Qc.match(/^([a-zA-Z]+)(.*)/), Qd && (Qc = Od(Qd[1], Sd), Qc += Md(Qd[2], wd), Rd = !0)), !Rd)
            if (Qd = Nd(Qc, {
                    inlineShortcuts: Sd,
                    noWrap: !0
                }), Qd.match && '/' === Qd.rest[0]) {
                const Td = Nd(Qd.rest.slice(1), {
                    inlineShortcuts: Sd,
                    noWrap: !0
                });
                Td.match && (Qc = '\\frac{' + Qd.match + '}{' + Td.match + '}' + Md(Td.rest, wd)), Rd = !0;
            } else
                Qd.match && (Qc = Qc.startsWith('(') ? '\\left(' + Qd.match + '\\right)' + Md(Qd.rest, wd) : Qd.match + Md(Qd.rest, wd), Rd = !0);
        return Rd || (Qd = Qc.match(/^(\s+)(.*)$/), Qd && (Qc = ' ' + Md(Qd[2], wd), Rd = !0)), Qc;
    }

    function Nd(Qc, wd) {
        let Od = '',
            Pd = Qc = Qc.trim(),
            Qd = Qc.charAt(0),
            Rd = {
                '(': ')',
                '{': '}',
                '[': ']'
            } [Qd];
        if (Rd) {
            let Sd = 1,
                Td = 1;
            for (; Td < Qc.length && Sd > 0;)
                Qc[Td] === Qd && Sd++, Qc[Td] === Rd && Sd--, Td++;
            0 === Sd ? (wd.noWrap && '(' === Qd ? Od = Md(Qc.substring(1, Td - 1), wd) : ('{' === Qd && '}' === Rd && (Qd = '\\{', Rd = '\\}'), Od = '\\left' + Qd + Md(Qc.substring(1, Td - 1), wd) + '\\right' + Rd), Pd = Qc.slice(Math.max(0, Td))) : (Od = Qc.substring(1, Td), Pd = '');
        } else {
            let Ud = Qc.match(/^([a-zA-Z]+)/);
            if (Ud) {
                let Vd = Jd(null, Qc, wd.inlineShortcuts);
                if (Vd)
                    return Vd = Vd.replace('_{#?}', ''), Vd = Vd.replace('^{#?}', ''), {
                        match: Vd,
                        rest: Qc.slice(Vd.length)
                    };
            }
            if (Ud = Qc.match(/^([a-zA-Z])/), Ud)
                return {
                    match: Ud[1],
                    rest: Qc.slice(1)
                };
            if (Ud = Qc.match(/^(-)?\d+(\.\d*)?/), Ud)
                return {
                    match: Ud[0],
                    rest: Qc.slice(Ud[0].length)
                };
            /^\\(left|right)/.test(Qc) || (Ud = Qc.match(/^(\\[a-zA-Z]+)/), Ud && (Pd = Qc.slice(Ud[1].length), Od = Ud[1]));
        }
        return {
            match: Od,
            rest: Pd
        };
    }

    function Od(Qc, wd) {
        let Pd = Jd(null, Qc, wd);
        return Pd ? (Pd = Pd.replace('_{#?}', ''), Pd = Pd.replace('^{#?}', ''), Pd += ' ') : Pd = Qc, Pd;
    }
    const Pd = [
        [
            '\\[',
            '\\]'
        ],
        [
            '\\(',
            '\\)'
        ],
        [
            '$$',
            '$$'
        ],
        [
            '$',
            '$'
        ],
        [
            '\\begin{math}',
            '\\end{math}'
        ],
        [
            '\\begin{displaymath}',
            '\\end{displaymath}'
        ],
        [
            '\\begin{equation}',
            '\\end{equation}'
        ],
        [
            '\\begin{equation*}',
            '\\end{equation*}'
        ]
    ];

    function Qd(Qc) {
        const Rd = Qc.trim();
        for (const Sd of Pd)
            if (Rd.startsWith(Sd[0]) && Rd.endsWith(Sd[1]))
                return [
                    !0,
                    Rd.substring(Sd[0].length, Rd.length - Sd[1].length)
                ];
        return [
            !1,
            Sd
        ];
    }
    const Rd = (Qc, wd, F) => (Pd.some(Qc => wd.startsWith(Qc[0]) && wd.endsWith(Qc[1])) || (wd = `$$ ${ wd } $$`), wd);
    class Sd {
        static onPaste(Qc, wd, F) {
            var Td;
            const Ud = new ClipboardEvent('paste', {
                clipboardData: F.clipboardData,
                cancelable: !0
            });
            return !!(null === (Td = wd.host) || void 0 === Td ? void 0 : Td.dispatchEvent(Ud)) && Sd._registry[Qc].onPaste(wd, F);
        }
        static onCopy(Qc, wd) {
            if (!wd.clipboardData)
                return;
            const Td = Qc.model,
                Ud = Td.selectionIsCollapsed ? [
                    0,
                    Td.lastOffset
                ] : Id(Td.selection);
            let Vd = Td.getAtoms(Ud);
            if (Vd.every(Qc => 'text' === Qc.mode || !Qc.mode))
                wd.clipboardData.setData('text/plain', Vd.filter(Qc => Qc instanceof Nc).map(Qc => Qc.value).join(''));
            else if (Vd.every(Qc => 'latex' === Qc.mode))
                wd.clipboardData.setData('text/plain', Td.getAtoms(Ud, {
                    includeChildren: !0
                }).map(Qc => {
                    var Wd;
                    return null !== (Wd = Qc.value) && void 0 !== Wd ? Wd : '';
                }).join(''));
            else {
                let Xd;
                Xd = 1 === Vd.length && void 0 !== Vd[0].verbatimLatex ? Vd[0].verbatimLatex : Td.getValue(Ud, 'latex-expanded'), Wd.clipboardData.setData('application/x-latex', Xd);
                try {
                    Wd.clipboardData.setData('text/plain', Qc.options.onExport(Qc, Xd, Ud));
                } catch {}
                1 !== Vd.length || 'root' !== Vd[0].type && 'group' !== Vd[0].type || (Vd = Vd[0].body.filter(Qc => 'first' !== Qc.type));
                try {
                    Wd.clipboardData.setData('application/json+mathlive', JSON.stringify(Vd.map(Qc => Qc.toJson())));
                } catch {}
                const Yd = Qc.computeEngine;
                if (Yd)
                    try {
                        Yd.jsonSerializationOptions = {
                            metadata: ['latex']
                        };
                        const Zd = Yd.parse(Xd),
                            $d = JSON.stringify(Zd.json);
                        $d && Wd.clipboardData.setData('application/json', $d);
                    } catch {}
            }
            wd.preventDefault();
        }
        static insert(Qc, wd, F, Td = {}) {
            return Sd._registry[Qc].insert(wd, F, Td);
        }
        onPaste(Qc, wd) {
            return !1;
        }
        insert(Qc, wd, F) {
            return !1;
        }
        constructor(Qc) {
            Sd._registry[Qc] = this;
        }
    }
    Sd._registry = {};
    const Ud = {
        '\\ne': '<mo>&ne;</mo>',
        '\\neq': '<mo>&neq;</mo>',
        '\\pm': '&#177;',
        '\\times': '&#215;',
        '\\colon': ':',
        '\\vert': '|',
        '\\Vert': '\u2225',
        '\\mid': '\u2223',
        '\\lbrace': '{',
        '\\rbrace': '}',
        '\\lparen': '(',
        '\\rparen': ')',
        '\\langle': '\u27E8',
        '\\rangle': '\u27E9',
        '\\lfloor': '\u230A',
        '\\rfloor': '\u230B',
        '\\lceil': '\u2308',
        '\\rceil': '\u2309',
        '\\vec': '&#x20d7;',
        '\\acute': '&#x00b4;',
        '\\grave': '&#x0060;',
        '\\dot': '&#x02d9;',
        '\\ddot': '&#x00a8;',
        '\\tilde': '&#x007e;',
        '\\bar': '&#x00af;',
        '\\breve': '&#x02d8;',
        '\\check': '&#x02c7;',
        '\\hat': '&#x005e;'
    };

    function Vd(Qc) {
        return Qc.replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function Wd(Qc, wd) {
        return Qc && wd.generateID ? ` extid="${ Qc }"` : '';
    }

    function Xd(Qc, wd, F) {
        let Yd = !1;
        wd = null != wd ? wd : Qc.atoms.length;
        let Zd = '',
            $d = '';
        const _d = Qc.atoms[Qc.index];
        return Qc.index < wd && ('mord' === _d.type || 'macro' === _d.type) && !_d.isDigit() && ($d = fe(_d, F), Qc.index += 1), $d.length > 0 && (Yd = !0, Zd = $d, 'mi' !== Qc.lastType && 'mn' !== Qc.lastType && 'mtext' !== Qc.lastType && 'fence' !== Qc.lastType || /^<mo>(.*)<\/mo>$/.test(Zd) || (Zd = `<mo>&#8290;</mo>${ Zd }`), $d.endsWith('>f</mi>') || $d.endsWith('>g</mi>') ? (Zd += '<mo>&#x2061;</mo>', Qc.lastType = 'applyfunction') : Qc.lastType = /^<mo>(.*)<\/mo>$/.test(Zd) ? 'mo' : 'mi', Zd($d, Qc, F) || (Qc.mathML += Zd)), Yd;
    }

    function Yd(Qc) {
        return Qc.index < Qc.atoms.length && Qc.atoms[Qc.index].superscript && 'msubsup' === Qc.atoms[Qc.index].type;
    }

    function Zd(Qc, wd, F) {
        let $d = wd.atoms[wd.index - 1];
        if (!$d)
            return !1;
        if ($d.superscript || $d.subscript || (Yd(wd) || function(Qc) {
                return Qc.index < Qc.atoms.length && Qc.atoms[Qc.index].subscript && 'msubsup' === Qc.atoms[Qc.index].type;
            }(wd)) && ($d = wd.atoms[wd.index], wd.index += 1), !$d)
            return !1;
        const _d = ce($d.superscript, F),
            ae = ce($d.subscript, F);
        if (!_d && !ae)
            return !1;
        let be = '';
        return _d && ae ? be = `<msubsup>${ Qc }${ ae }${ _d }</msubsup>` : _d ? be = `<msup>${ Qc }${ _d }</msup>` : ae && (be = `<msub>${ Qc }${ ae }</msub>`), wd.mathML += be, wd.lastType = '', !0;
    }

    function $d(Qc, wd, F) {
        wd = null != wd ? wd : Qc.atoms.length;
        const _d = Qc.index;
        let ae = '';
        for (; Qc.index < wd && 'text' === Qc.atoms[Qc.index].mode;)
            ae += Qc.atoms[Qc.index].value ? Qc.atoms[Qc.index].value : ' ', Qc.index += 1;
        return ae.length > 0 && (Qc.mathML += `<mtext ${ Wd(Qc.atoms[_d].id, F) }\n      >${ ae }</mtext>`, Qc.lastType = 'mtext', !0);
    }

    function _d(Qc, wd, F) {
        wd = null != wd ? wd : Qc.atoms.length;
        const ae = Qc.index;
        let be = '',
            ce = function(Qc) {
                let de = -1,
                    ee = Qc.index,
                    fe = !1,
                    ge = !1;
                for (; ee < Qc.atoms.length && !fe && !ge;) {
                    const he = Qc.atoms[ee];
                    fe = !he.isDigit(), ge = !fe && void 0 !== he.superscript, ee++;
                }
                return ge && (de = ee - 1), de;
            }(Qc);
        for (ce >= 0 && ce < wd && (wd = ce); Qc.index < wd && Qc.atoms[Qc.index].isDigit();)
            be += Qc.atoms[Qc.index].asDigit(), Qc.index += 1;
        return !(be.length <= 0 || (be = '<mn' + Wd(Qc.atoms[ae].id, F) + '>' + be + '</mn>', ce < 0 && Yd(Qc) && (ce = Qc.index, Qc.index += 1), Zd(be, Qc, F) || (Qc.mathML += be, Qc.lastType = 'mn'), 0));
    }

    function ae(Qc, wd, F) {
        let be = !1;
        wd = null != wd ? wd : Qc.atoms.length;
        let ce = '',
            de = '';
        if (Qc.index < wd && 'mopen' === Qc.atoms[Qc.index].type) {
            let ee = !1,
                fe = 0;
            const ge = Qc.index;
            let he = -1,
                ie = ge + 1;
            for (; ie < wd && !ee;)
                'mopen' === Qc.atoms[ie].type ? fe += 1 : 'mclose' === Qc.atoms[ie].type && (fe -= 1), -1 === fe && (ee = !0, he = ie), ie += 1;
            ee && (ce = '<mrow>', ce += de(Qc.atoms[ge], F), ce += ce(Qc.atoms, F, ge + 1, he), ce += de(Qc.atoms[he], F), ce += '</mrow>', 'mi' !== Qc.lastType && 'mn' !== Qc.lastType && 'mfrac' !== Qc.lastType && 'fence' !== Qc.lastType || (ce = `<mo>&#8290;</mo>${ ce }`), Qc.index = he + 1, Zd(ce, Qc, F) && (be = !0, Qc.lastType = '', ce = ''), de = 'fence');
        }
        return ce.length > 0 && (be = !0, Qc.mathML += ce, Qc.lastType = de), be;
    }

    function be(Qc, wd, F) {
        let ce = !1;
        wd = null != wd ? wd : Qc.atoms.length;
        let de = '',
            ee = '';
        const fe = Qc.atoms[Qc.index];
        if (Qc.index < wd && ('mbin' === fe.type || 'mrel' === fe.type))
            de += fe(Qc.atoms[Qc.index], F), Qc.index += 1, ee = 'mo';
        else if (Qc.index < wd && 'mop' === fe.type) {
            if ('over-under' === fe.subsupPlacement && (fe.superscript || fe.subscript)) {
                const ge = de(fe, F);
                fe.superscript && fe.subscript ? (de += '<munderover>' + ge, de += ce(fe.subscript, F), de += ce(fe.superscript, F), de += '</munderover>') : fe.superscript ? (de += '<mover>' + ge, de += ce(fe.superscript, F), de += '</mover>') : fe.subscript && (de += '<munder>' + ge, de += ce(fe.subscript, F), de += '</munder>'), ee = 'mo';
            } else {
                const he = ge.atoms[ge.index],
                    ie = '\\operatorname' === he.value,
                    je = ie ? '<mi class="MathML-Unit"' + Wd(he.id, F) + '>' + ee(he.value) + '</mi>' : de(he, F);
                de += je, ie || /^<mo>(.*)<\/mo>$/.test(je) ? ee = ie ? 'mi' : 'mo' : (de += '<mo>&#x2061;</mo>', ee = 'applyfunction');
            }
            'mi' !== Qc.lastType && 'mn' !== Qc.lastType || /^<mo>(.*)<\/mo>$/.test(de) || (de = `<mo>&#8290;</mo>${ de }`), Qc.index += 1;
        }
        return Zd(de, Qc, F) || de.length > 0 && (ce = !0, Qc.mathML += de, Qc.lastType = ee), ce;
    }

    function ce(Qc, wd, F, Td) {
        const de = {
            atoms: [],
            index: null != F ? F : 0,
            mathML: '',
            lastType: ''
        };
        if ('number' == typeof Qc || 'boolean' == typeof Qc)
            de.mathML = Qc.toString();
        else if ('string' == typeof Qc)
            de.mathML = Qc;
        else if (Qc instanceof kc)
            de.mathML = fe(Qc, wd);
        else if (Array.isArray(Qc)) {
            de.atoms = Qc;
            let ee = 0;
            for (Td = Td || (Qc ? Qc.length : 0); de.index < Td;)
                if ($d(de, Td, wd) || _d(de, Td, wd) || Xd(de, Td, wd) || be(de, Td, wd) || ae(de, Td, wd))
                    ee += 1;
                else if (de.index < Td) {
                let fe = fe(de.atoms[de.index], wd);
                'mn' === de.lastType && fe.length > 0 && 'genfrac' === de.atoms[de.index].type && (fe = '<mo>&#x2064;</mo>' + fe), 'genfrac' === de.atoms[de.index].type ? de.lastType = 'mfrac' : de.lastType = '', de.index += 1, Zd(fe, de, wd) ? ee += 2 : fe.length > 0 && (de.mathML += fe, ee += 1);
            }
            ee > 1 && (de.mathML = '<mrow>' + de.mathML + '</mrow>');
        }
        return de.mathML;
    }

    function de(Qc, wd) {
        let ee = '';
        const fe = ee(Qc.value);
        return fe && (ee = '<mo' + Wd(Qc.id, wd) + '>' + fe + '</mo>'), ee;
    }

    function ee(Qc) {
        if (!Qc)
            return '';
        if ('string' == typeof Qc)
            return Vd(Qc);
        if (!Array.isArray(Qc) && 'string' == typeof Qc.body)
            return Vd(Qc.body);
        let fe = '';
        for (const ge of Qc)
            'string' == typeof ge.value && (fe += ge.value);
        return Vd(fe);
    }

    function fe(Qc, wd) {
        var ge, he, ie, je, ke, le, me, ne, oe, pe, qe, re, se, te, ue, ve, we, xe, ye, ze, Ae, Be, Ce, De, Ee;
        const Fe = {
                widehat: '^',
                widecheck: 'ˇ',
                widetilde: '~',
                utilde: '~',
                overleftarrow: '\u2190',
                underleftarrow: '\u2190',
                xleftarrow: '\u2190',
                overrightarrow: '\u2192',
                underrightarrow: '\u2192',
                xrightarrow: '\u2192',
                underbrace: '\u23DF',
                overbrace: '\u23DE',
                overgroup: '\u23E0',
                undergroup: '\u23E1',
                overleftrightarrow: '\u2194',
                underleftrightarrow: '\u2194',
                xleftrightarrow: '\u2194',
                Overrightarrow: '\u21D2',
                xRightarrow: '\u21D2',
                overleftharpoon: '\u21BC',
                xleftharpoonup: '\u21BC',
                overrightharpoon: '\u21C0',
                xrightharpoonup: '\u21C0',
                xLeftarrow: '\u21D0',
                xLeftrightarrow: '\u21D4',
                xhookleftarrow: '\u21A9',
                xhookrightarrow: '\u21AA',
                xmapsto: '\u21A6',
                xrightharpoondown: '\u21C1',
                xleftharpoondown: '\u21BD',
                xrightleftharpoons: '\u21CC',
                xleftrightharpoons: '\u21CB',
                xtwoheadleftarrow: '\u219E',
                xtwoheadrightarrow: '\u21A0',
                xlongequal: '=',
                xtofrom: '\u21C4',
                xrightleftarrows: '\u21C4',
                xrightequilibrium: '\u21CC',
                xleftequilibrium: '\u21CB'
            },
            Ge = {
                '\\exponentialE': '&#x02147;',
                '\\imaginaryI': '&#x2148;',
                '\\differentialD': '&#x2146;',
                '\\capitalDifferentialD': '&#x2145;',
                '\\alpha': '&#x03b1;',
                '\\pi': '&#x03c0;',
                '\\infty': '&#x221e;',
                '\\forall': '&#x2200;',
                '\\nexists': '&#x2204;',
                '\\exists': '&#x2203;',
                '\\hbar': 'ℏ',
                '\\cdotp': '\u22C5',
                '\\ldots': '\u2026',
                '\\cdots': '\u22EF',
                '\\ddots': '\u22F1',
                '\\vdots': '\u22EE',
                '\\ldotp': '.'
            },
            He = {
                '\\!': -3 / 18,
                '\\ ': 6 / 18,
                '\\,': 3 / 18,
                '\\:': 4 / 18,
                '\\;': 5 / 18,
                '\\enspace': 0.5,
                '\\quad': 1,
                '\\qquad': 2,
                '\\enskip': 0.5
            };
        let Ie, Je, Ke, Le, Me, Ne, Oe = '',
            Pe = '',
            Qe = null !== (he = {
                cal: 'script',
                frak: 'fraktur',
                bb: 'double-struck',
                scr: 'script',
                cmtt: 'monospace',
                cmss: 'sans-serif'
            } [null !== (ge = Qc.fontFamily) && void 0 !== ge ? ge : Qc.font]) && void 0 !== he ? he : '';
        Qe && (Qe = ` mathvariant="${ Qe }"`);
        const {
            command: Re
        } = Se;
        if ('text' === Se.mode)
            Oe = `<mi${ Wd(Se.id, wd) }>${ Se.value }</mi>`;
        else
            switch (Se.type) {
                case 'first':
                case 'line':
                case 'overlap':
                case 'msubsup':
                case 'phantom':
                case 'composition':
                case 'rule':
                case 'chem':
                case 'error':
                    break;
                case 'group':
                case 'root':
                    Oe = Ud[Se.command] ? Ud[Se.command] : ce(Se.body, wd);
                    break;
                case 'array':
                    if ((Se.leftDelim && '.' !== Se.leftDelim || Se.rightDelim && '.' !== Se.rightDelim) && (Oe += '<mrow>', Se.leftDelim && '.' !== Se.leftDelim && (Oe += '<mo>' + (Ud[Se.leftDelim] || Se.leftDelim) + '</mo>')), Oe += '<mtable', Se.colFormat) {
                        for (Oe += ' columnalign="', Ke = 0; Ke < Se.colFormat.length; Ke++)
                            Se.colFormat[Ke].align && (Oe += {
                                l: 'left',
                                c: 'center',
                                r: 'right'
                            } [Se.colFormat[Ke].align] + ' ');
                        Oe += '"';
                    }
                    for (Oe += '>', Je = 0; Je < Se.array.length; Je++) {
                        for (Oe += '<mtr>', Ie = 0; Ie < Se.array[Je].length; Ie++)
                            Oe += '<mtd>' + ce(Se.array[Je][Ie], wd) + '</mtd>';
                        Oe += '</mtr>';
                    }
                    Oe += '</mtable>', (Se.leftDelim && '.' !== Se.leftDelim || Se.rightDelim && '.' !== Se.rightDelim) && (Se.rightDelim && '.' !== Se.rightDelim && (Oe += '<mo>' + (Ud[Se.leftDelim] || Se.rightDelim) + '</mo>'), Oe += '</mrow>');
                    break;
                case 'genfrac':
                    (Se.leftDelim || Se.rightDelim) && (Oe += '<mrow>'), Se.leftDelim && '.' !== Se.leftDelim && (Oe += '<mo' + Wd(Se.id, wd) + '>' + (Ud[Se.leftDelim] || Se.leftDelim) + '</mo>'), Se.hasBarLine ? (Oe += '<mfrac>', Oe += ce(Se.above, wd) || '<mi>&nbsp;</mi>', Oe += ce(Se.below, wd) || '<mi>&nbsp;</mi>', Oe += '</mfrac>') : (Oe += '<mtable' + Wd(Se.id, wd) + '>', Oe += '<mtr>' + ce(Se.above, wd) + '</mtr>', Oe += '<mtr>' + ce(Se.below, wd) + '</mtr>', Oe += '</mtable>'), Se.rightDelim && '.' !== Se.rightDelim && (Oe += '<mo' + Wd(Se.id, wd) + '>' + (Ud[Se.rightDelim] || Se.rightDelim) + '</mo>'), (Se.leftDelim || Se.rightDelim) && (Oe += '</mrow>');
                    break;
                case 'surd':
                    Se.hasEmptyBranch('above') ? (Oe += '<msqrt' + Wd(Se.id, wd) + '>', Oe += ce(Se.body, wd), Oe += '</msqrt>') : (Oe += '<mroot' + Wd(Se.id, wd) + '>', Oe += ce(Se.body, wd), Oe += ce(Se.above, wd), Oe += '</mroot>');
                    break;
                case 'leftright':
                    Oe = '<mrow>', Se.leftDelim && '.' !== Se.leftDelim && (Oe += '<mo' + Wd(Se.id, wd) + '>' + (null !== (ie = Ud[Se.leftDelim]) && void 0 !== ie ? ie : Se.leftDelim) + '</mo>'), Se.body && (Oe += ce(Se.body, wd)), Se.rightDelim && '.' !== Se.rightDelim && (Oe += '<mo' + Wd(Se.id, wd) + '>' + (null !== (je = Ud[Se.rightDelim]) && void 0 !== je ? je : Se.rightDelim) + '</mo>'), Oe += '</mrow>';
                    break;
                case 'sizeddelim':
                case 'delim':
                    Oe += '<mo separator="true"' + Wd(Se.id, wd) + '>' + (Ud[Se.delim] || Se.delim) + '</mo>';
                    break;
                case 'accent':
                    Oe += '<mover accent="true"' + Wd(Se.id, wd) + '>', Oe += ce(Se.body, wd), Oe += '<mo>' + (Ud[Re] || Se.accent) + '</mo>', Oe += '</mover>';
                    break;
                case 'overunder':
                    Me = Se.above, Le = Se.below, (Se.svgAbove || Me) && (Se.svgBelow || Le) ? Ne = Se.body : Me && Me.length > 0 ? (Ne = Se.body, (null === (le = null === (ke = Se.body) || void 0 === ke ? void 0 : ke[0]) || void 0 === le ? void 0 : le.below) ? (Le = Se.body[0].below, Ne = Se.body[0].body) : 'first' === (null === (ne = null === (me = Se.body) || void 0 === me ? void 0 : me[0]) || void 0 === ne ? void 0 : ne.type) && (null === (pe = null === (oe = Se.body) || void 0 === oe ? void 0 : oe[1]) || void 0 === pe ? void 0 : pe.below) && (Le = Se.body[1].below, Ne = Se.body[1].body)) : Le && Le.length > 0 && (Ne = Se.body, (null === (re = null === (qe = Se.body) || void 0 === qe ? void 0 : qe[0]) || void 0 === re ? void 0 : re.above) ? (Me = Se.body[0].above, Ne = Se.body[0].body) : 'first' === (null === (te = null === (se = Se.body) || void 0 === se ? void 0 : se[0]) || void 0 === te ? void 0 : te.type) && (null === (ve = null === (ue = Se.body) || void 0 === ue ? void 0 : ue[1]) || void 0 === ve ? void 0 : ve.above) && (Me = Se.body[1].overscript, Ne = Se.body[1].body)), (Se.svgAbove || Me) && (Se.svgBelow || Le) ? (Oe += `<munderover ${ Qe } ${ Wd(Se.id, wd) }>`, Oe += null !== (we = Fe[Se.svgBody]) && void 0 !== we ? we : ce(Ne, wd), Oe += null !== (xe = Fe[Se.svgBelow]) && void 0 !== xe ? xe : ce(Le, wd), Oe += null !== (ye = Fe[Se.svgAbove]) && void 0 !== ye ? ye : ce(Me, wd), Oe += '</munderover>') : Se.svgAbove || Me ? (Oe += `<mover ${ Qe } ${ Wd(Se.id, wd) }>` + (null !== (ze = Fe[Se.svgBody]) && void 0 !== ze ? ze : ce(Ne, wd)), Oe += null !== (Ae = Fe[Se.svgAbove]) && void 0 !== Ae ? Ae : ce(Me, wd), Oe += '</mover>') : (Se.svgBelow || Le) && (Oe += `<munder ${ Qe } ${ Wd(Se.id, wd) }>` + (null !== (Be = Fe[Se.svgBody]) && void 0 !== Be ? Be : ce(Ne, wd)), Oe += null !== (Ce = Fe[Se.svgBelow]) && void 0 !== Ce ? Ce : ce(Le, wd), Oe += '</munder>');
                    break;
                case 'placeholder':
                case 'mord': {
                    Oe = Ge[Re] || Re || ('string' == typeof Se.value ? Se.value : '');
                    const Te = Re ? Re.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null;
                    Te ? Oe = '&#x' + Te[1] + ';' : Oe.length > 0 && Oe.startsWith('\\') && (Oe = 'string' == typeof Se.value && Se.value.charCodeAt(0) > 255 ? '&#x' + ('000000' + Se.value.charCodeAt(0).toString(16)).slice(-4) + ';' : 'string' == typeof Se.value ? Se.value.charAt(0) : '');
                    const Ue = /\d/.test(Oe) ? 'mn' : 'mi';
                    Oe = `<${ Ue }${ Qe }${ Wd(Se.id, wd) }>${ Vd(Oe) }</${ Ue }>`;
                    break;
                }
                case 'mbin':
                case 'mrel':
                case 'minner':
                    Oe = Re && Ge[Re] ? '<mi' + Wd(Se.id, wd) + '>' + Ge[Re] + '</mi>' : Re && Ud[Re] ? '<mo' + Wd(Se.id, wd) + '>' + Ud[Re] + '</mo>' : de(Se, wd);
                    break;
                case 'mpunct':
                    Oe = '<mo separator="true"' + Wd(Se.id, wd) + '>' + (null !== (De = Ud[Re]) && void 0 !== De ? De : Re) + '</mo>';
                    break;
                case 'mop':
                    '\u200B' !== Se.body && (Oe = '<mo' + Wd(Se.id, wd) + '>', Oe += '\\operatorname' === Re ? Se.body : Re || Se.body, Oe += '</mo>');
                    break;
                case 'box':
                    Oe = '<menclose notation="box"', Se.backgroundcolor && (Oe += ' mathbackground="' + Se.backgroundcolor + '"'), Oe += Wd(Se.id, wd) + '>' + ce(Se.body, wd) + '</menclose>';
                    break;
                case 'spacing':
                    Oe += '<mspace width="' + (null !== (Ee = He[Re]) && void 0 !== Ee ? Ee : 0) + 'em"/>';
                    break;
                case 'enclose':
                    Oe = '<menclose notation="';
                    for (const Te in Se.notation)
                        Object.prototype.hasOwnProperty.call(Se.notation, Te) && Se.notation[Te] && (Oe += Pe + Te, Pe = ' ');
                    Oe += Wd(Se.id, Te) + '">' + ce(Se.body, Te) + '</menclose>';
                    break;
                case 'space':
                    Oe += '&nbsp;';
                    break;
                case 'mopen':
                case 'mclose':
                    Oe += de(Se, Te);
                    break;
                case 'macro': {
                    const Ue = Se.command + ee(Se.macroArgs);
                    Ue && (Oe += `<mo ${ Wd(Se.id, Te) }>${ Ue }</mo>`);
                }
                break;
                case 'latexgroup':
                case 'tooltip':
                    Oe += ce(Se.body, Te);
                    break;
                case 'latex':
                    Oe += '<mtext' + Wd(Se.id, Te) + '>' + Se.value + '</mtext>';
            }
        return Oe;
    }
    const ge = {
        '\\alpha': 'alpha ',
        '\\mu': 'mew ',
        '\\sigma': 'sigma ',
        '\\pi': 'pie ',
        '\\imaginaryI': 'eye ',
        '\\sum': 'Summation ',
        '\\prod': 'Product ',
        a: '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
        A: 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
        '+': 'plus ',
        '-': 'minus ',
        ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
        ',': '<break time="150ms"/> comma  <break time="150ms"/>',
        '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
        '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
        ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
        '=': 'equals ',
        '<': 'is less than ',
        '\\lt': 'is less than ',
        '<=': 'is less than or equal to ',
        '\\le': 'is less than or equal to ',
        '\\gt': 'is greater than ',
        '>': 'is greater than ',
        '\\ge': 'is greater than or equal to ',
        '\\geq': 'is greater than or equal to ',
        '\\leq': 'is less than or equal to ',
        '!': 'factorial ',
        '\\sin': 'sine ',
        '\\cos': 'cosine ',
        '\u200B': '',
        '\u2212': 'minus ',
        ':': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\hbar': 'etch bar ',
        '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\land': 'and ',
        '\\lor': 'or ',
        '\\neg': 'not ',
        '\\div': 'divided by ',
        '\\forall': 'for all ',
        '\\exists': 'there exists ',
        '\\nexists': 'there does not exists ',
        '\\in': 'element of ',
        '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
        '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
        '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
        '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
        '\\infty': 'infinity ',
        '\\nabla': 'nabla ',
        '\\partial': 'partial derivative of ',
        '\\cdot': 'times ',
        '\\cdots': 'dot dot dot ',
        '\\Rightarrow': 'implies ',
        '\\lparen': '<break time="150ms"/>open paren<break time="150ms"/>',
        '\\rparen': '<break time="150ms"/>close paren<break time="150ms"/>',
        '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
        '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
        '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
        '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
        '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
        '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
        '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
        '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
        '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
        '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
        '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
        '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
        mm: 'millimeters',
        cm: 'centimeters',
        km: 'kilometers',
        kg: 'kilograms'
    };

    function he(Qc) {
        let ie = 0;
        if (Td(Qc))
            for (const je of Qc)
                'first' !== je.type && (ie += 1);
        return 1 === ie;
    }

    function ie(Qc) {
        let je = '';
        if (Td(Qc))
            for (const ke of Qc)
                'first' !== ke.type && 'string' == typeof ke.value && (je += ke.value);
        return je;
    }

    function je(Qc, wd, F) {
        var ke, le, me, ne;

        function oe(Qc) {
            return '<emphasis>' + Qc + '</emphasis>';
        }
        if (!wd)
            return '';
        let pe = '';
        if (Td(wd)) {
            let qe = !1,
                re = !1;
            for (let se = 0; se < wd.length; se++)
                'text' !== wd[se].mode && (re = !1), se < wd.length - 2 && 'mopen' === wd[se].type && 'mclose' === wd[se + 2].type && 'mord' === wd[se + 1].type ? (pe += ' of ', pe += oe(je(Qc, wd[se + 1], F)), se += 2) : 'text' === wd[se].mode ? re ? pe += null !== (ke = wd[se].value) && void 0 !== ke ? ke : ' ' : (re = !0, pe += je('text', wd[se], F)) : wd[se].isDigit() ? qe ? pe += wd[se].asDigit() : (qe = !0, pe += je(Qc, wd[se], F)) : (qe = !1, pe += je(Qc, wd[se], F));
        } else if ('text' === wd.mode)
            wd.id && 'math' === Qc && (pe += '<mark name="' + wd.id.toString() + '"/>'), pe += wd.value;
        else {
            wd.id && 'math' === Qc && (pe += '<mark name="' + wd.id.toString() + '"/>');
            let te = '',
                ue = '',
                ve = '',
                we = !1;
            switch (wd.type) {
                case 'group':
                case 'root':
                    pe += je('math', wd.body, F);
                    break;
                case 'genfrac':
                    if (te = je('math', wd.above, F), ue = je('math', wd.below, F), he(wd.above) && he(wd.below)) {
                        const xe = {
                            '1/2': ' half ',
                            '1/3': ' one third ',
                            '2/3': ' two third',
                            '1/4': ' one quarter ',
                            '3/4': ' three quarter ',
                            '1/5': ' one fifth ',
                            '2/5': ' two fifths ',
                            '3/5': ' three fifths ',
                            '4/5': ' four fifths ',
                            '1/6': ' one sixth ',
                            '5/6': ' five sixths ',
                            '1/8': ' one eight ',
                            '3/8': ' three eights ',
                            '5/8': ' five eights ',
                            '7/8': ' seven eights ',
                            '1/9': ' one ninth ',
                            '2/9': ' two ninths ',
                            '4/9': ' four ninths ',
                            '5/9': ' five ninths ',
                            '7/9': ' seven ninths ',
                            '8/9': ' eight ninths '
                        } [ie(wd.above) + '/' + ie(wd.below)];
                        xe ? pe = xe : pe += te + ' over ' + ue;
                    } else
                        pe += ' the fraction <break time="150ms"/>' + te + ', over <break time="150ms"/>' + ue + '.<break time="150ms"/> End fraction.<break time="150ms"/>';
                    break;
                case 'surd':
                    if (ve = je('math', wd.body, F), wd.hasEmptyBranch('above'))
                        pe += he(wd.body) ? ' the square root of ' + ve + ' , ' : ' the square root of <break time="200ms"/>' + ve + '. <break time="200ms"/> End square root';
                    else {
                        let xe = je('math', wd.above, F);
                        xe = xe.trim();
                        const ye = xe.replace(/<mark([^/]*)\/>/g, '');
                        pe += '3' === ye ? ' the cube root of <break time="200ms"/>' + ve + '. <break time="200ms"/> End cube root' : 'n' === ye ? ' the nth root of <break time="200ms"/>' + ve + '. <break time="200ms"/> End root' : ' the root with index: <break time="200ms"/>' + xe + ', of <break time="200ms"/>' + ve + '. <break time="200ms"/> End root';
                    }
                    break;
                case 'leftright': {
                    const xe = ye;
                    pe += null !== (re = xe.leftDelim ? ge[xe.leftDelim] : void 0) && void 0 !== re ? re : xe.leftDelim, pe += je('math', ye.body, F), pe += null !== (se = xe.rightDelim ? ge[xe.rightDelim] : void 0) && void 0 !== se ? se : xe.rightDelim;
                }
                break;
                case 'rule':
                case 'overunder':
                case 'overlap':
                    break;
                case 'placeholder':
                    pe += 'placeholder ';
                    break;
                case 'delim':
                case 'sizeddelim':
                case 'mord':
                case 'minner':
                case 'mbin':
                case 'mrel':
                case 'mpunct':
                case 'mopen':
                case 'mclose': {
                    const {
                        command: xe
                    } = ye;
                    if ('\\mathbin' === xe || '\\mathrel' === xe || '\\mathopen' === xe || '\\mathclose' === xe || '\\mathpunct' === xe || '\\mathord' === xe || '\\mathinner' === xe) {
                        pe = je(Qc, ye.body, F);
                        break;
                    }
                    let ze = ye.isDigit() ? ye.asDigit() : ye.value,
                        Ae = ye.command;
                    if ('delim' !== ye.type && 'sizeddelim' !== ye.type || (Ae = ye.value, ze = Ae), 'text' === Qc)
                        pe += ze;
                    else {
                        if ('mbin' === ye.type && (pe += '<break time="150ms"/>'), ze) {
                            const Be = ge[ze] || (Ae ? ge[Ae.trim()] : '');
                            if (Be)
                                pe += ' ' + Be;
                            else {
                                const Ce = Ae ? function(Ce) {
                                    let De = '';
                                    return Ce.startsWith('\\') && (De = ' ' + Ce.replace('\\', '') + ' '), De;
                                }(Ae.trim()) : '';
                                pe += Ce || (j = ze, F.textToSpeechMarkup ? /[a-z]/.test(j) ? ` <say-as interpret-as="character">${ j }</say-as>` : /[A-Z]/.test(j) ? `capital <say-as interpret-as="character">${ j.toLowerCase() }</say-as>` : j : /[a-z]/.test(j) ? ' \'' + j.toUpperCase() + '\'' : /[A-Z]/.test(j) ? ' \'capital ' + j.toUpperCase() + '\'' : j);
                            }
                        } else
                            pe += je('math', ye.body, F);
                        'mbin' === ye.type && (pe += '<break time="150ms"/>');
                    }
                    break;
                }
                case 'mop':
                    if ('\u200B' !== ye.value) {
                        const Be = ye.command;
                        if ('\\sum' === Be)
                            if (ye.hasEmptyBranch('superscript') || ye.hasEmptyBranch('subscript'))
                                if (ye.hasEmptyBranch('subscript'))
                                    pe += ' the summation of';
                                else {
                                    let Ce = je('math', ye.subscript, F);
                                    Ce = Ce.trim(), pe += ' the summation from <break time="200ms"/>' + Ce + '<break time="200ms"/> of <break time="150ms"/>', we = !0;
                                }
                        else {
                            let Ce = je('math', ye.superscript, F);
                            Ce = Ce.trim();
                            let De = je('math', ye.subscript, F);
                            De = De.trim(), pe += ' the summation from <break time="200ms"/>' + De + '<break time="200ms"/> to  <break time="200ms"/>' + Ce + '<break time="200ms"/> of <break time="150ms"/>', we = !0;
                        } else if ('\\prod' === Be)
                            if (ye.hasEmptyBranch('superscript') || ye.hasEmptyBranch('subscript'))
                                if (ye.hasEmptyBranch('subscript'))
                                    pe += ' the product  of ';
                                else {
                                    let Ce = je('math', ye.subscript, F);
                                    Ce = Ce.trim(), pe += ' the product from <break time="200ms"/>' + Ce + '<break time="200ms"/> of <break time="150ms"/>', we = !0;
                                }
                        else {
                            let Ce = je('math', ye.superscript, F);
                            Ce = Ce.trim();
                            let De = je('math', ye.subscript, F);
                            De = De.trim(), pe += ' the product from <break time="200ms"/>' + De + '<break time="200ms"/> to <break time="200ms"/>' + Ce + '<break time="200ms"/> of <break time="150ms"/>', we = !0;
                        } else if ('\\int' === Be)
                            if (ye.hasEmptyBranch('superscript') || ye.hasEmptyBranch('subscript'))
                                pe += ' the integral of <break time="200ms"/> ';
                            else {
                                let Ce = je('math', ye.superscript, F);
                                Ce = Ce.trim();
                                let De = je('math', ye.subscript, F);
                                De = De.trim(), pe += ' the integral from <break time="200ms"/>' + oe(De) + '<break time="200ms"/> to <break time="200ms"/>' + oe(Ce) + ' <break time="200ms"/> of ', we = !0;
                            }
                        else
                            'string' == typeof ye.value ? pe += (null !== (ne = ge[ye.value]) && void 0 !== ne ? ne : ye.command ? ge[ye.command] : void 0) || ' ' + ye.value : ye.command && ('\\mathop' === ye.command ? pe += je('math', ye.body, F) : '\\operatorname' === ye.command ? pe += (i = ye.body) ? i.map(Be => Be.value).join('') : '' : pe += ye.command.startsWith('\\') ? ' ' + ye.command.slice(1) : ' ' + ye.command);
                    }
                    break;
                case 'enclose':
                    ve = je('math', wd.body, F), pe += ' crossed out ' + ve + '. End crossed out.';
            }
            if (!we && !wd.hasEmptyBranch('superscript')) {
                let xe = je(Qc, wd.superscript, F);
                xe = xe.trim();
                const ye = xe.replace(/<[^>]*>/g, '');
                if (he(wd.superscript)) {
                    if ('math' === Qc) {
                        const ze = function(ze) {
                            if (qe(ze))
                                for (const Ae of ze)
                                    if ('first' !== Ae.type && Ae.id)
                                        return Ae.id.toString();
                            return '';
                        }(wd.superscript);
                        ze && (pe += '<mark name="' + ze + '"/>');
                    }
                    '\u2032' === ye ? pe += ' prime ' : '2' === ye ? pe += ' squared ' : '3' === ye ? pe += ' cubed ' : Number.isNaN(Number.parseInt(ye)) ? pe += ' to the ' + xe + '; ' : pe += ' to the <say-as interpret-as="ordinal">' + ye + '</say-as> power; ';
                } else
                    Number.isNaN(Number.parseInt(ye)) ? pe += ' raised to the ' + xe + '; ' : pe += ' raised to the <say-as interpret-as="ordinal">' + ye + '</say-as> power; ';
            }
            if (!we && !wd.hasEmptyBranch('subscript')) {
                let xe = je('math', wd.subscript, F);
                xe = xe.trim(), pe += he(wd.subscript) ? ' sub ' + xe : ' subscript ' + xe + '. End subscript. ';
            }
        }
        var qe, re;
        return pe;
    }

    function ke(Qc, wd) {
        var le;
        const me = {
            ...wd,
            textToSpeechRulesOptions: {
                ...wd.textToSpeechRulesOptions
            }
        };
        if ('sre' === me.textToSpeechRules && 'sre' in globalThis) {
            const ne = ce(Qc, me);
            return ne ? (me.textToSpeechMarkup && (me.textToSpeechRulesOptions = null !== (le = me.textToSpeechRulesOptions) && void 0 !== le ? le : {}, me.textToSpeechRulesOptions.markup = me.textToSpeechMarkup, 'ssml' === me.textToSpeechRulesOptions.markup && (me.textToSpeechRulesOptions.markup = 'ssml_step'), me.textToSpeechRulesOptions.rate = me.speechEngineRate), me.textToSpeechRulesOptions && globalThis.sre.System.getInstance().setupEngine(me.textToSpeechRulesOptions), globalThis.sre.System.getInstance().toSpeech(ne)) : '';
        }
        let ne = je('math', Qc, me);
        if ('ssml' === me.textToSpeechMarkup) {
            let oe = '';
            me.speechEngineRate && (oe = '<prosody rate="' + me.speechEngineRate + '">'), ne = '<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US"><amazon:auto-breaths>' + oe + '<p><s>' + ne + '</s></p>' + (oe ? '</prosody>' : '') + '</amazon:auto-breaths></speak>';
        } else
            ne = 'mac' === me.textToSpeechMarkup && 'macos' === g() ? ne.replace(/<mark([^/]*)\/>/g, '').replace(/<emphasis>/g, '[[emph+]]').replace(/<\/emphasis>/g, '').replace(/<break time="(\d*)ms"\/>/g, '[[slc $1]]').replace(/<say-as[^>]*>/g, '').replace(/<\/say-as>/g, '') : ne.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
        return ne;
    }

    function le(Qc, wd, F, Td) {
        const me = wd.split(' ');
        for (const ne of me) {
            const oe = ne.match(/(.*):(.*)/);
            if (oe) {
                const pe = null != Td ? Td : {};
                'active' === oe[2] ? pe.passive = !1 : pe[oe[2]] = !0, Qc.addEventListener(oe[1], F, pe);
            } else
                Qc.addEventListener(ne, F, Td);
        }
    }

    function me(Qc, wd, F, Td) {
        const ne = wd.split(' ');
        for (const oe of ne) {
            const pe = oe.match(/(.*):(.*)/);
            if (pe) {
                const qe = null != Td ? Td : {};
                'active' === pe[2] ? qe.passive = !1 : qe[pe[2]] = !0, Qc.removeEventListener(pe[1], F, qe);
            } else
                Qc.removeEventListener(oe, F, Td);
        }
    }

    function ne(Qc) {
        var oe;
        d();
        let pe = document.getElementById(Qc);
        return pe ? pe.dataset.refcount = Number(Number.parseInt(null !== (oe = pe.getAttribute('data-refcount')) && void 0 !== oe ? oe : '0') + 1).toString() : (pe = document.createElement('div'), pe.setAttribute('aria-hidden', 'true'), pe.dataset.refcount = '1', pe.id = Qc, document.body.append(pe)), pe;
    }

    function oe(Qc) {
        var pe;
        if (!Qc)
            return;
        const qe = Number.parseInt(null !== (pe = Qc.getAttribute('data-refcount')) && void 0 !== pe ? pe : '0');
        qe <= 1 ? Qc.remove() : Qc.dataset.refcount = Number(qe - 1).toString();
    }

    function pe(Qc) {
        var qe;
        return (null === (qe = Qc.element) || void 0 === qe ? void 0 : qe.mathfield) === Qc;
    }

    function qe(Qc) {
        const re = function(Qc) {
            var se, te;
            return null !== (te = null !== (se = Qc.querySelector('.ML__caret')) && void 0 !== se ? se : Qc.querySelector('.ML__text-caret')) && void 0 !== te ? te : Qc.querySelector('.ML__latex-caret');
        }(Qc);
        if (!re)
            return null;
        const se = re.getBoundingClientRect();
        return {
            x: se.right,
            y: se.bottom,
            height: se.height
        };
    }

    function re(Qc) {
        var se;
        if (!Qc.parent)
            return 'root';
        let te = null !== (se = Qc.parent.id) && void 0 !== se ? se : '';
        return te += 'string' == typeof Qc.treeBranch ? '-' + Qc.treeBranch : `-${ Qc.treeBranch[0] }/${ Qc.treeBranch[0] }`, te;
    }

    function se(Qc, wd) {
        if (!wd)
            return null;
        const te = Qc.field.getBoundingClientRect(),
            ue = wd.right - wd.left,
            ve = wd.bottom - wd.top,
            we = Math.ceil(wd.left - te.left + Qc.field.scrollLeft),
            xe = Math.ceil(wd.top - te.top);
        return {
            left: we,
            right: we + ue,
            top: xe,
            bottom: xe + ve
        };
    }

    function te(Qc) {
        const ue = Qc.getBoundingClientRect(),
            ve = parseInt(getComputedStyle(Qc).marginRight),
            we = {
                top: ue.top - 1,
                bottom: ue.bottom,
                left: ue.left,
                right: ue.right - 1 + ve
            };
        if (0 === Qc.children.length || 'SVG' === Qc.tagName.toUpperCase())
            return we;
        for (const xe of Qc.children)
            if (1 === xe.nodeType && 'atomId' in xe.dataset && !xe.classList.contains('pstrut')) {
                const ye = te(xe);
                we.left = Math.min(we.left, ye.left), we.right = Math.max(we.right, ye.right), we.top = Math.min(we.top, ye.top), we.bottom = Math.max(we.bottom, ye.bottom);
            }
        return we;
    }

    function ue(Qc, wd) {
        var ve, we;
        if (!wd.id)
            return null;
        let xe = null !== (we = null === (ve = Qc.atomBoundsCache) || void 0 === ve ? void 0 : ve.get(wd.id)) && void 0 !== we ? we : null;
        if (null !== xe)
            return xe;
        const ye = Qc.field.querySelector(`[data-atom-id="${ wd.id }"]`);
        return xe = ye ? te(ye) : null, Qc.atomBoundsCache && (xe ? Qc.atomBoundsCache.set(wd.id, xe) : Qc.atomBoundsCache.delete(wd.id)), null != xe ? xe : null;
    }

    function ve(Qc, wd) {
        return Qc.model.selection.ranges.reduce((F, Td) => F.concat(... function(Qc, wd, F) {
            const we = new Map();
            for (const xe of Qc.model.getAtoms(wd, {
                    includeChildren: !0
                })) {
                if ((null == F ? void 0 : F.excludeAtomsWithBackground) && xe.style.backgroundColor)
                    break;
                const ye = se(Qc, ue(Qc, xe));
                if (ye) {
                    const ze = re(xe);
                    if (we.has(ze)) {
                        const Ae = we.get(ze);
                        we.set(ze, {
                            left: Math.min(Ae.left, ye.left),
                            right: Math.max(Ae.right, ye.right),
                            top: Math.min(Ae.top, ye.top),
                            bottom: Math.max(Ae.bottom, ye.bottom)
                        });
                    } else
                        we.set(ze, ye);
                }
            }
            return [...we.values()];
        }(Qc, Td, wd)), []);
    }

    function we(Qc, wd) {
        return '*' === Qc || 'none' === wd || ('same-origin' === wd ? !globalThis.origin || Qc === globalThis.origin : 'function' == typeof wd && wd(Qc));
    }

    function xe(Qc) {
        let ye = 0,
            ze = 0;
        const Ae = Qc.offsetWidth,
            Be = Qc.offsetHeight;
        for (; Qc instanceof HTMLElement;)
            ye += Qc.offsetTop, ze += Qc.offsetLeft, Qc = Qc.offsetParent;
        return new DOMRect(ze, ye, Ae, Be);
    }
    const ye = {
            main: [
                'Main-Regular',
                'ML__cmr'
            ],
            'main-italic': [
                'Main-Italic',
                'ML__cmr ML__it'
            ],
            'main-bold': [
                'Main-Bold',
                'ML__cmr ML__bold'
            ],
            'main-bolditalic': [
                'Main-BoldItalic',
                'ML__cmr ML__bold ML__it'
            ],
            normal: [
                'Main-Regular',
                'ML__cmr'
            ],
            'normal-bold': [
                'Main-Bold',
                'ML__mathbf'
            ],
            'normal-italic': [
                'Math-Italic',
                'ML__mathit'
            ],
            'normal-bolditalic': [
                'Math-BoldItalic',
                'ML__mathbfit'
            ],
            ams: [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bold': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-italic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bolditalic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'sans-serif': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bold': [
                'SansSerif-Regular',
                'ML__sans ML__bold'
            ],
            'sans-serif-italic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bolditalic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            calligraphic: [
                'Caligraphic-Regular',
                'ML__cal'
            ],
            'calligraphic-bold': [
                'Caligraphic-Regular',
                'ML__cal ML__bold'
            ],
            'calligraphic-italic': [
                'Caligraphic-Regular',
                'ML__cal ML__it'
            ],
            'calligraphic-bolditalic': [
                'Caligraphic-Regular',
                'ML__cal ML__bold ML__it'
            ],
            script: [
                'Script-Regular',
                'ML__script'
            ],
            'script-bold': [
                'Script-Regular',
                'ML__script ML__bold'
            ],
            'script-italic': [
                'Script-Regular',
                'ML__script ML__it'
            ],
            'script-bolditalic': [
                'Script-Regular',
                'ML__script ML__bold ML__it'
            ],
            fraktur: [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bold': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-italic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bolditalic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            monospace: [
                'Typewriter-Regular',
                'ML__tt'
            ],
            'monospace-bold': [
                'Typewriter-Regular',
                'ML__tt ML__bold'
            ],
            'monospace-italic': [
                'Typewriter-Regular',
                'ML__tt ML__it'
            ],
            'monospace-bolditalic': [
                'Typewriter-Regular',
                'ML__tt ML__bold ML__it'
            ],
            'double-struck': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bold': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-italic': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bolditalic': [
                'AMS-Regular',
                'ML__bb'
            ]
        },
        ze = {
            'double-struck': /^[A-Z ]$/,
            script: /^[A-Z ]$/,
            calligraphic: /^[\dA-Z ]$/,
            fraktur: /^[\dA-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^\u2019\u2018]$/,
            monospace: /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
            'sans-serif': /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/
        },
        Ae = /^[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5]$/,
        Be = [
            /^[a-z]$/,
            /^[A-Z]$/,
            Ae,
            /^[\u0393|\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A6\u03A8\u03A9]$/
        ],
        Ce = {
            iso: [
                'it',
                'it',
                'it',
                'it'
            ],
            tex: [
                'it',
                'it',
                'it',
                'up'
            ],
            french: [
                'it',
                'up',
                'up',
                'up'
            ],
            upright: [
                'up',
                'up',
                'up',
                'up'
            ]
        };

    function De(Qc) {
        if (!Qc)
            return '';
        const {
            style: Ee
        } = Fe;
        if (void 0 === Ee.variant)
            return '';
        let Ge = Ee.variant;
        return Ee.variantStyle && 'up' !== Ee.variantStyle && (Ge += '-' + Ee.variantStyle), Ge;
    }

    function Ee(Qc) {
        return [
            ec(Qc.map(Qc => Qc[0])),
            Qc.map(Qc => Qc[1]).some(Qc => !0 === Qc)
        ];
    }
    new class extends Gb {
        createAtom(Qc, wd, F) {
            var Fe, Ge, He, Ie, Je;
            const Ke = wd.getDefinition(Qc, 'math');
            if (null === Ke)
                return new kc('mord', wd, {
                    mode: 'math',
                    command: Qc,
                    value: Qc,
                    style: F
                });
            if ('symbol' === Ke.definitionType) {
                const Le = new kc(null !== (Fe = Ke.type) && void 0 !== Fe ? Fe : 'mord', wd, {
                    mode: 'math',
                    command: null !== (Ge = Ke.command) && void 0 !== Ge ? Ge : Qc,
                    value: String.fromCodePoint(Ke.codepoint),
                    style: F
                });
                return null !== (He = Ke.isFunction) && void 0 !== He && He && (Le.isFunction = !0), Qc.startsWith('\\') && (Le.verbatimLatex = Qc), Le;
            }
            const Le = new kc('mord', wd, {
                mode: 'math',
                command: null !== (Ie = Ke.command) && void 0 !== Ie ? Ie : Qc,
                value: Qc,
                style: F
            });
            return null !== (Je = Ke.isFunction) && void 0 !== Je && Je && (Le.isFunction = !0), Qc.startsWith('\\') && (Le.verbatimLatex = Qc), Le;
        }
        serialize(Qc, wd) {
            const {
                parent: Fe
            } = Qc[0], Ge = null == Fe ? void 0 : Fe.computedStyle.fontSize;
            return ec(Hb(Qc, 'fontSize').map(Qc => {
                const He = function(Qc, wd) {
                        const {
                            parent: Ie
                        } = Qc[0], Je = null == Ie ? void 0 : Ie.computedStyle.backgroundColor;
                        return ec(Hb(Qc, 'backgroundColor').map(Qc => {
                            var Ke, Le;
                            let Me = function(Qc, wd) {
                                const {
                                    parent: Ne
                                } = Qc[0], Oe = null == Ne ? void 0 : Ne.computedStyle.color;
                                return ec(Hb(Qc, 'color').map(Qc => {
                                    var Pe, Qe;
                                    const Re = function(Qc, wd) {
                                            var Se;
                                            const {
                                                parent: Te
                                            } = Qc[0], Ue = De(Te), Ve = null !== (Se = null == Te ? void 0 : Te.mode) && void 0 !== Se ? Se : 'math';
                                            return ec(Hb(Qc, 'variant').map(Qc => {
                                                const We = De(Qc[0]);
                                                if (Qc.every(Qc => {
                                                        const Xe = Qc.context.getDefinition(Qc.command, Ve);
                                                        return !(!Xe || 'function' === Xe.definitionType || !Xe.variant) && De(Qc) === We;
                                                    }))
                                                    return ec(Qc.map(Qc => kc.serialize(Qc, wd)));
                                                let Xe = '';
                                                return We && We !== Ue && (Xe = {
                                                    calligraphic: '\\mathcal{',
                                                    fraktur: '\\mathfrak{',
                                                    'double-struck': '\\mathbb{',
                                                    script: '\\mathscr{',
                                                    monospace: '\\mathtt{',
                                                    'sans-serif': '\\mathsf{',
                                                    normal: '\\mathrm{',
                                                    'normal-italic': '\\mathnormal{',
                                                    'normal-bold': '\\mathbf{',
                                                    'normal-bolditalic': '\\mathbfit{',
                                                    ams: '',
                                                    'ams-italic': '\\mathit{',
                                                    'ams-bold': '\\mathbf{',
                                                    'ams-bolditalic': '\\mathbfit{',
                                                    main: '',
                                                    'main-italic': '\\mathit{',
                                                    'main-bold': '\\mathbf{',
                                                    'main-bolditalic': '\\mathbfit{'
                                                } [We]), Xe ? Xe + ec(Qc.map(Qc => kc.serialize(Qc, wd))) + '}' : ec(Qc.map(Qc => kc.serialize(Qc, wd)));
                                            }));
                                        }(Qc, wd),
                                        Se = Qc[0].computedStyle;
                                    return null !== (Pe = wd.skipStyles) && void 0 !== Pe && Pe || !Se.color || Ne && Oe === Se.color ? Re : '\\textcolor{' + (null !== (Qe = Se.verbatimColor) && void 0 !== Qe ? Qe : Se.color) + '}{' + Re + '}';
                                }));
                            }(Qc, wd);
                            const Ne = Qc[0].computedStyle;
                            return null !== (Ke = wd.skipStyles) && void 0 !== Ke && Ke || !Me.trim() || !Ne.backgroundColor || Ie && Je === Ne.backgroundColor || !(Qc.length > 0) && Qc[0] instanceof Vc || (Me = `\\ensuremath{${ Me }}`, Me = `\\colorbox{${ null !== (Le = Ne.verbatimBackgroundColor) && void 0 !== Le ? Le : Ne.backgroundColor }}{${ Me }}`), Me;
                        }));
                    }(Qc, wd),
                    Ie = Qc[0].computedStyle.fontSize;
                return !Ie || Fe && Ge === Ie ? He : '\\' + [
                    '',
                    'tiny',
                    'scriptsize',
                    'footnotesize',
                    'small',
                    'normalsize',
                    'large',
                    'Large',
                    'LARGE',
                    'huge',
                    'Huge'
                ][Ie] + ' ' + He;
            }));
        }
        applyStyle(Qc, wd) {
            if (void 0 === wd.variant)
                return '';
            const Fe = 'auto' !== wd.letterShapeStyle && wd.letterShapeStyle ? wd.letterShapeStyle : 'tex';
            let {
                variant: Ge
            } = He, {
                variantStyle: Ie
            } = Je;
            'normal' === Ge && !Ie && /[\u00A3\u0131\u0237]/.test(Qc.value) && (Ge = 'main', Ie = 'italic'), 'normal' !== Ge || Ie || 1 !== Qc.value.length || Be.forEach((Je, Ge) => {
                Je.test(Qc.value) && 'it' === Ce[Fe][Ge] && (Ie = 'italic');
            }), 'up' === Ie && (Ie = void 0);
            const Ke = Ie ? Ge + '-' + Ie : Ge,
                [Le, Me] = ye[Ke];
            return ze[Ge] && !ze[Ge].test(Qc.value) ? (Qc.value = function(Qc, Je, Fe) {
                if (!/[A-Za-z\d]/.test(Qc))
                    return Qc;
                if (!Je && !Fe)
                    return Qc;
                const Ne = Qc.codePointAt(0);
                if (void 0 === Ne)
                    return Qc;
                for (const Oe of K)
                    if ((!Je || Oe.variant === Je) && (!Fe || Oe.style === Fe) && Ne >= Oe.offset && Ne < Oe.offset + Oe.len) {
                        const Pe = Oe.start + Ne - Oe.offset;
                        return String.fromCodePoint(J[Pe] || Pe);
                    }
                return Oe;
            }(Qc.value, Ge, Ie), null) : (Ae.test(Qc.value) && (Qc.classes += ' lcGreek'), Me && (Qc.classes += ' ' + Me), Le);
        }
        constructor() {
            super('math');
        }
    }();
    const Fe = {
        roman: '',
        'sans-serif': 'ML__sans',
        monospace: 'ML__tt'
    };

    function Ge(Qc) {
        let He = 0;
        for (let Ie = 0; Ie < Qc.length; Ie++)
            He = Math.imul(31, He) + Qc.charCodeAt(Ie) | 0;
        return Math.abs(He);
    }

    function He(Qc, wd, F) {
        var Ie, Je;
        if (d(), !wd)
            return null;
        let Ke = null !== (Ie = null == Qc ? void 0 : Qc.getRootNode()) && void 0 !== Ie ? Ie : null === document || void 0 === document ? void 0 : document.head;
        if (!Ke)
            return null;
        Ke === document && (Ke = document.head);
        const Le = Ke.querySelector(`style[data-id="${ F }"]`);
        if (Le) {
            const Me = Number.parseFloat(null !== (Je = Le.getAttribute('data-refcount')) && void 0 !== Je ? Je : '0');
            Le.dataset.refcount = Number(Me + 1).toString();
        } else {
            const Ne = document.createElement('style');
            Ne.dataset.id = F, Ne.dataset.refcount = '1', Ne.append(document.createTextNode(wd)), Ke.appendChild(Ne);
        }
        return {
            release: () => {
                var Me;
                const Ne = document.head.querySelector(`style[data-id="${ F }"]`);
                if (Ne) {
                    const Oe = Number.parseFloat(null !== (Me = Ne.getAttribute('data-refcount')) && void 0 !== Me ? Me : '0');
                    1 === Oe ? Ne.remove() : Ne.dataset.refcount = Number(Oe - 1).toString();
                }
            }
        };
    }

    function Ie(Qc) {
        const Je = Qc.split('+'),
            Ke = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: Je.pop()
            };
        return Je.includes('shift') && (Ke.shift = !0), Je.includes('alt') && (Ke.alt = !0), Je.includes('ctrl') && (Ke.ctrl = !0), Je.includes('cmd') && (Ke.cmd = !0), Je.includes('win') && (Ke.win = !0), Je.includes('meta') && (Ke.meta = !0), Ke;
    }

    function Je(Qc) {
        let Ke = '';
        return Qc.shift && (Ke += 'shift+'), Qc.alt && (Ke += 'alt+'), Qc.ctrl && (Ke += 'ctrl+'), Qc.cmd && (Ke += 'cmd+'), Qc.win && (Ke += 'win+'), Qc.meta && (Ke += 'meta+'), Ke + Qc.key;
    }
    new class extends Gb {
        createAtom(Qc, wd, F) {
            const Ke = wd.getDefinition(Qc, 'text');
            return Ke && 'symbol' === Ke.definitionType ? new Nc(Qc, String.fromCodePoint(Ke.codepoint), null != F ? F : {}, wd) : null;
        }
        serialize(Qc, wd) {
            var Ke;
            let [Le, Me] = function(Qc, wd) {
                return Ee(Hb(Qc, 'backgroundColor').map(Qc => {
                    var Ne, Oe;
                    const [Pe, Qe] = function(Qc, wd) {
                        var Re;
                        if (!Qc || 0 === Qc.length)
                            return [
                                '',
                                !1
                            ];
                        const Se = null === (Re = Qc[0].parent) || void 0 === Re ? void 0 : Re.style.color;
                        return Ee(Hb(Qc, 'color').map(Qc => {
                            var Te, Ue;
                            const [Ve, We] = function(Qc, wd) {
                                return function(Qc, wd) {
                                    return Ee(Hb(Qc, 'fontFamily').map(Qc => {
                                        var Xe, Ye;
                                        const [Ze, $e] = function(Qc, wd) {
                                            return Ee(Hb(Qc, 'fontSize').map(Qc => {
                                                var _e, af;
                                                const [bf, cf] = function(Qc, wd) {
                                                    return Ee(Hb(Qc, 'fontSeries').map(Qc => {
                                                        const [df, ef] = function(Qc, wd) {
                                                            return Ee(Hb(Qc, 'fontShape').map(Qc => {
                                                                const [ff, gf] = function(Qc, wd) {
                                                                    return [
                                                                        ec(Qc.map(Qc => kc.serialize(Qc, wd))),
                                                                        !0
                                                                    ];
                                                                }(Qc, wd), {
                                                                    fontShape: hf
                                                                } = Qc[0].style;
                                                                return 'it' === hf ? [
                                                                    '\\textit{' + ff + '}',
                                                                    !1
                                                                ] : 'sl' === hf ? [
                                                                    '\\textsl{' + ff + '}',
                                                                    !1
                                                                ] : 'sc' === hf ? [
                                                                    '\\textsc{' + ff + '}',
                                                                    !1
                                                                ] : 'n' === hf ? [
                                                                    '\\textup{' + ff + '}',
                                                                    !1
                                                                ] : hf ? [
                                                                    `{\\fontshape{${ Qc[0].style.fontShape }}${ ff }`,
                                                                    !1
                                                                ] : [
                                                                    ff,
                                                                    gf
                                                                ];
                                                            }));
                                                        }(Qc, wd), {
                                                            fontSeries: ff
                                                        } = Qc[0].style;
                                                        return 'b' === ff ? [
                                                            `\\textbf{${ df }}`,
                                                            !1
                                                        ] : 'l' === ff ? [
                                                            `\\textlf{${ df }}`,
                                                            !1
                                                        ] : 'm' === ff ? [
                                                            `\\textmd{${ df }}`,
                                                            !1
                                                        ] : ff ? [
                                                            `\\fontseries{${ ff }}${ df }`,
                                                            !1
                                                        ] : [
                                                            df,
                                                            ef
                                                        ];
                                                    }));
                                                }(Qc, wd), df = null !== (af = [
                                                    '',
                                                    'tiny',
                                                    'scriptsize',
                                                    'footnotesize',
                                                    'small',
                                                    'normalsize',
                                                    'large',
                                                    'Large',
                                                    'LARGE',
                                                    'huge',
                                                    'Huge'
                                                ][null !== (_e = Qc[0].style.fontSize) && void 0 !== _e ? _e : '']) && void 0 !== af ? af : '';
                                                return df ? [
                                                    `{\\${ df } ${ bf }}`,
                                                    cf
                                                ] : [
                                                    bf,
                                                    cf
                                                ];
                                            }));
                                        }(Qc, wd), _e = null !== (Ye = {
                                            roman: 'textrm',
                                            monospace: 'texttt',
                                            'sans-serif': 'textsf'
                                        } [null !== (Xe = Qc[0].style.fontFamily) && void 0 !== Xe ? Xe : '']) && void 0 !== Ye ? Ye : '';
                                        return _e ? [
                                            `\\${ _e }{${ Ze }}`,
                                            !1
                                        ] : Qc[0].style.fontFamily ? [
                                            `\\fontfamily{${ Qc[0].style.fontFamily }}${ Ze }`,
                                            $e
                                        ] : [
                                            Ze,
                                            $e
                                        ];
                                    }));
                                }(Qc, wd);
                            }(Qc, wd);
                            return null !== (Te = wd.skipStyles) && void 0 !== Te && Te || !Qc[0].style.color || 'none' === Qc[0].style.color || Se === Qc[0].style.color ? [
                                Ve,
                                We
                            ] : [
                                `\\textcolor{${ null !== (Ue = Qc[0].style.verbatimColor) && void 0 !== Ue ? Ue : Qc[0].style.color }}{${ Ve }}`,
                                !1
                            ];
                        }));
                    }(Qc, wd), Re = Qc[0].computedStyle;
                    return null !== (Ne = wd.skipStyles) && void 0 !== Ne && Ne || !Re.backgroundColor || 'none' === Re.backgroundColor ? [
                        Pe,
                        Qe
                    ] : [
                        `\\colorbox{${ null !== (Oe = Re.verbatimBackgroundColor) && void 0 !== Oe ? Oe : Re.backgroundColor }}{${ Pe }}`,
                        !1
                    ];
                }));
            }(Qc, wd);
            return !0 === (null !== (Ke = wd.skipModeCommand) && void 0 !== Ke && Ke) && (Me = !1), Me && (Le = `\\text{${ Le }}`), Le;
        }
        applyStyle(Qc, wd) {
            var Ke, Le, Me, Ne, Oe, Pe;
            const {
                fontFamily: Qe
            } = Re;
            if (Fe[Qe] ? Qc.classes += void 0 !== (Ke = ' ' + Fe[Qe]) ? Ke : '' : Qe && Qc.setStyle('font-family', Qe), Re.fontShape && (Qc.classes += ' ', Qc.classes += null !== (Le = {
                    it: 'ML__it',
                    sl: 'ML__shape_sl',
                    sc: 'ML__shape_sc',
                    ol: 'ML__shape_ol'
                } [Re.fontShape]) && void 0 !== Le ? Le : ''), Re.fontSeries) {
                const Se = Re.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
                Se && (Qc.classes += ' ', Qc.classes += null !== (Ne = {
                    ul: 'ML__series_ul',
                    el: 'ML__series_el',
                    l: 'ML__series_l',
                    sl: 'ML__series_sl',
                    m: '',
                    sb: 'ML__series_sb',
                    b: 'ML__bold',
                    eb: 'ML__series_eb',
                    ub: 'ML__series_ub'
                } [null !== (Me = Se[1]) && void 0 !== Me ? Me : '']) && void 0 !== Ne ? Ne : '', Qc.classes += ' ', Qc.classes += null !== (Pe = {
                    uc: 'ML__series_uc',
                    ec: 'ML__series_ec',
                    c: 'ML__series_c',
                    sc: 'ML__series_sc',
                    n: '',
                    sx: 'ML__series_sx',
                    x: 'ML__series_x',
                    ex: 'ML__series_ex',
                    ux: 'ML__series_ux'
                } [null !== (Oe = Se[2]) && void 0 !== Oe ? Oe : '']) && void 0 !== Pe ? Pe : '');
            }
            return 'Main-Regular';
        }
        constructor() {
            super('text');
        }
    }(), new class extends Gb {
        createAtom(Qc, wd, F) {
            return new hd(Qc, wd);
        }
        serialize(Qc, wd) {
            return Qc.filter(Qc => Qc instanceof hd && !Qc.isSuggestion).map(Qc => Qc.value).join('');
        }
        applyStyle() {
            return null;
        }
        constructor() {
            super('latex');
        }
    }();
    const Ke = 'apple' === Ne() ? {
            id: 'apple.en-intl',
            displayName: 'English (international)',
            virtualLayout: 'qwerty',
            platform: 'apple',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'å',
                    'Å'
                ],
                KeyB: [
                    'b',
                    'B',
                    '\u222B',
                    'ı'
                ],
                KeyC: [
                    'c',
                    'C',
                    'ç',
                    'Ç'
                ],
                KeyD: [
                    'd',
                    'D',
                    '\u2202',
                    'Î'
                ],
                KeyE: [
                    'e',
                    'E',
                    '\xB4',
                    '\xB4'
                ],
                KeyF: [
                    'f',
                    'F',
                    'ƒ',
                    'Ï'
                ],
                KeyG: [
                    'g',
                    'G',
                    '\xA9',
                    '\u02DD'
                ],
                KeyH: [
                    'h',
                    'H',
                    '\u02D9',
                    'Ó'
                ],
                KeyI: [
                    'i',
                    'I',
                    'ˆ',
                    'ˆ'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '\u2206',
                    'Ô'
                ],
                KeyK: [
                    'k',
                    'K',
                    '\u02DA',
                    '\uF8FF'
                ],
                KeyL: [
                    'l',
                    'L',
                    '\xAC',
                    'Ò'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    'Â'
                ],
                KeyN: [
                    'n',
                    'N',
                    '\u02DC',
                    '\u02DC'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ø',
                    'Ø'
                ],
                KeyP: [
                    'p',
                    'P',
                    'π',
                    '\u220F'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'œ',
                    'Œ'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    '\u2030'
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    'Í'
                ],
                KeyT: [
                    't',
                    'T',
                    '\u2020',
                    'ˇ'
                ],
                KeyU: [
                    'u',
                    'U',
                    '\xA8',
                    '\xA8'
                ],
                KeyV: [
                    'v',
                    'V',
                    '\u221A',
                    '\u25CA'
                ],
                KeyW: [
                    'w',
                    'W',
                    '\u2211',
                    '\u201E'
                ],
                KeyX: [
                    'x',
                    'X',
                    '\u2248',
                    '\u02DB'
                ],
                KeyY: [
                    'y',
                    'Y',
                    '\xA5',
                    'Á'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'Ω',
                    '\xB8'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\u2044'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\u2122',
                    '\u20AC'
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xA3',
                    '\u2039'
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA2',
                    '\u203A'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u221E',
                    'ﬁ'
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xA7',
                    'ﬂ'
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xB6',
                    '\u2021'
                ],
                Digit8: [
                    '8',
                    '*',
                    '\u2022',
                    '\xB0'
                ],
                Digit9: [
                    '9',
                    '(',
                    'ª',
                    '\xB7'
                ],
                Digit0: [
                    '0',
                    ')',
                    'º',
                    '\u201A'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '\u2013',
                    '\u2014'
                ],
                Equal: [
                    '=',
                    '+',
                    '\u2260',
                    '\xB1'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\u201C',
                    '\u201D'
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\u2018',
                    '\u2019'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAB',
                    '\xBB'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\u2026',
                    'Ú'
                ],
                Quote: [
                    '\'',
                    '"',
                    'æ',
                    'Æ'
                ],
                Backquote: [
                    '`',
                    '\u02DC',
                    '`',
                    '`'
                ],
                Comma: [
                    ',',
                    '<',
                    '\u2264',
                    '\xAF'
                ],
                Period: [
                    '.',
                    '>',
                    '\u2265',
                    '\u02D8'
                ],
                Slash: [
                    '/',
                    '?',
                    '\xF7',
                    '\xBF'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                IntlBackslash: [
                    '\xA7',
                    '\xB1',
                    '\xA7',
                    '\xB1'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                AudioVolumeUp: [
                    '',
                    '=',
                    '',
                    '='
                ]
            }
        } : 'windows' === Ne() ? {
            id: 'windows.en-intl',
            displayName: 'English (international)',
            platform: 'windows',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'á',
                    'Á'
                ],
                KeyB: [
                    'b',
                    'B',
                    '',
                    ''
                ],
                KeyC: [
                    'c',
                    'C',
                    '\xA9',
                    '\xA2'
                ],
                KeyD: [
                    'd',
                    'D',
                    'ð',
                    'Ð'
                ],
                KeyE: [
                    'e',
                    'E',
                    'é',
                    'É'
                ],
                KeyF: [
                    'f',
                    'F',
                    '',
                    ''
                ],
                KeyG: [
                    'g',
                    'G',
                    '',
                    ''
                ],
                KeyH: [
                    'h',
                    'H',
                    '',
                    ''
                ],
                KeyI: [
                    'i',
                    'I',
                    'í',
                    'Í'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '',
                    ''
                ],
                KeyK: [
                    'k',
                    'K',
                    '',
                    ''
                ],
                KeyL: [
                    'l',
                    'L',
                    'ø',
                    'Ø'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    ''
                ],
                KeyN: [
                    'n',
                    'N',
                    'ñ',
                    'Ñ'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ó',
                    'Ó'
                ],
                KeyP: [
                    'p',
                    'P',
                    'ö',
                    'Ö'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'ä',
                    'Ä'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    ''
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    '\xA7'
                ],
                KeyT: [
                    't',
                    'T',
                    'þ',
                    'Þ'
                ],
                KeyU: [
                    'u',
                    'U',
                    'ú',
                    'Ú'
                ],
                KeyV: [
                    'v',
                    'V',
                    '',
                    ''
                ],
                KeyW: [
                    'w',
                    'W',
                    'å',
                    'Å'
                ],
                KeyX: [
                    'x',
                    'X',
                    '',
                    ''
                ],
                KeyY: [
                    'y',
                    'Y',
                    'ü',
                    'Ü'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'æ',
                    'Æ'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\xB9'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\xB2',
                    ''
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xB3',
                    ''
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA4',
                    '\xA3'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u20AC',
                    ''
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xBC',
                    ''
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xBD',
                    ''
                ],
                Digit8: [
                    '8',
                    '*',
                    '\xBE',
                    ''
                ],
                Digit9: [
                    '9',
                    '(',
                    '\u2018',
                    ''
                ],
                Digit0: [
                    '0',
                    ')',
                    '\u2019',
                    ''
                ],
                Space: [
                    ' ',
                    ' ',
                    '',
                    ''
                ],
                Minus: [
                    '-',
                    '_',
                    '\xA5',
                    ''
                ],
                Equal: [
                    '=',
                    '+',
                    '\xD7',
                    '\xF7'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\xAB',
                    ''
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\xBB',
                    ''
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAC',
                    '\xA6'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\xB6',
                    '\xB0'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\xB4',
                    '\xA8'
                ],
                Backquote: [
                    '`',
                    '~',
                    '',
                    ''
                ],
                Comma: [
                    ',',
                    '<',
                    'ç',
                    'Ç'
                ],
                Period: [
                    '.',
                    '>',
                    '',
                    ''
                ],
                Slash: [
                    '/',
                    '?',
                    '\xBF',
                    ''
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '',
                    ''
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '',
                    ''
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '',
                    ''
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '',
                    ''
                ],
                IntlBackslash: [
                    '\\',
                    '|',
                    '',
                    ''
                ]
            }
        } : {
            id: 'linux.en',
            displayName: 'English',
            platform: 'linux',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'a',
                    'A'
                ],
                KeyB: [
                    'b',
                    'B',
                    'b',
                    'B'
                ],
                KeyC: [
                    'c',
                    'C',
                    'c',
                    'C'
                ],
                KeyD: [
                    'd',
                    'D',
                    'd',
                    'D'
                ],
                KeyE: [
                    'e',
                    'E',
                    'e',
                    'E'
                ],
                KeyF: [
                    'f',
                    'F',
                    'f',
                    'F'
                ],
                KeyG: [
                    'g',
                    'G',
                    'g',
                    'G'
                ],
                KeyH: [
                    'h',
                    'H',
                    'h',
                    'H'
                ],
                KeyI: [
                    'i',
                    'I',
                    'i',
                    'I'
                ],
                KeyJ: [
                    'j',
                    'J',
                    'j',
                    'J'
                ],
                KeyK: [
                    'k',
                    'K',
                    'k',
                    'K'
                ],
                KeyL: [
                    'l',
                    'L',
                    'l',
                    'L'
                ],
                KeyM: [
                    'm',
                    'M',
                    'm',
                    'M'
                ],
                KeyN: [
                    'n',
                    'N',
                    'n',
                    'N'
                ],
                KeyO: [
                    'o',
                    'O',
                    'o',
                    'O'
                ],
                KeyP: [
                    'p',
                    'P',
                    'p',
                    'P'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'q',
                    'Q'
                ],
                KeyR: [
                    'r',
                    'R',
                    'r',
                    'R'
                ],
                KeyS: [
                    's',
                    'S',
                    's',
                    'S'
                ],
                KeyT: [
                    't',
                    'T',
                    't',
                    'T'
                ],
                KeyU: [
                    'u',
                    'U',
                    'u',
                    'U'
                ],
                KeyV: [
                    'v',
                    'V',
                    'v',
                    'V'
                ],
                KeyW: [
                    'w',
                    'W',
                    'w',
                    'W'
                ],
                KeyX: [
                    'x',
                    'X',
                    'x',
                    'X'
                ],
                KeyY: [
                    'y',
                    'Y',
                    'y',
                    'Y'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'z',
                    'Z'
                ],
                Digit1: [
                    '1',
                    '!',
                    '1',
                    '!'
                ],
                Digit2: [
                    '2',
                    '@',
                    '2',
                    '@'
                ],
                Digit3: [
                    '3',
                    '#',
                    '3',
                    '#'
                ],
                Digit4: [
                    '4',
                    '$',
                    '4',
                    '$'
                ],
                Digit5: [
                    '5',
                    '%',
                    '5',
                    '%'
                ],
                Digit6: [
                    '6',
                    '^',
                    '6',
                    '^'
                ],
                Digit7: [
                    '7',
                    '&',
                    '7',
                    '&'
                ],
                Digit8: [
                    '8',
                    '*',
                    '8',
                    '*'
                ],
                Digit9: [
                    '9',
                    '(',
                    '9',
                    '('
                ],
                Digit0: [
                    '0',
                    ')',
                    '0',
                    ')'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '-',
                    '_'
                ],
                Equal: [
                    '=',
                    '+',
                    '=',
                    '+'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '[',
                    '{'
                ],
                BracketRight: [
                    ']',
                    '}',
                    ']',
                    '}'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\\',
                    '|'
                ],
                Semicolon: [
                    ';',
                    ':',
                    ';',
                    ':'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\'',
                    '"'
                ],
                Backquote: [
                    '`',
                    '~',
                    '`',
                    '~'
                ],
                Comma: [
                    ',',
                    '<',
                    ',',
                    '<'
                ],
                Period: [
                    '.',
                    '>',
                    '.',
                    '>'
                ],
                Slash: [
                    '/',
                    '?',
                    '/',
                    '?'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '',
                    '.',
                    '',
                    '.'
                ],
                IntlBackslash: [
                    '<',
                    '>',
                    '|',
                    '\xA6'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                NumpadComma: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                NumpadParenLeft: [
                    '(',
                    '(',
                    '(',
                    '('
                ],
                NumpadParenRight: [
                    ')',
                    ')',
                    ')',
                    ')'
                ]
            }
        },
        Le = {
            enter: '[Enter]',
            escape: '[Escape]',
            backspace: '[Backspace]',
            tab: '[Tab]',
            space: '[Space]',
            pausebreak: '[Pause]',
            insert: '[Insert]',
            home: '[Home]',
            pageup: '[PageUp]',
            delete: '[Delete]',
            end: '[End]',
            pagedown: '[PageDown]',
            right: '[ArrowRight]',
            left: '[ArrowLeft]',
            down: '[ArrowDown]',
            up: '[ArrowUp]',
            numpad0: '[Numpad0]',
            numpad1: '[Numpad1]',
            numpad2: '[Numpad2]',
            numpad3: '[Numpad3]',
            numpad4: '[Numpad4]',
            numpad5: '[Numpad5]',
            numpad6: '[Numpad6]',
            numpad7: '[Numpad7]',
            numpad8: '[Numpad8]',
            numpad9: '[Numpad9]',
            numpad_divide: '[NumpadDivide]',
            numpad_multiply: '[NumpadMultiply]',
            numpad_subtract: '[NumpadSubtract]',
            numpad_add: '[NumpadAdd]',
            numpad_decimal: '[NumpadDecimal]',
            numpad_separator: '[NumpadComma]',
            capslock: '[Capslock]',
            f1: '[F1]',
            f2: '[F2]',
            f3: '[F3]',
            f4: '[F4]',
            f5: '[F5]',
            f6: '[F6]',
            f7: '[F7]',
            f8: '[F8]',
            f9: '[F9]',
            f10: '[F10]',
            f11: '[F11]',
            f12: '[F12]',
            f13: '[F13]',
            f14: '[F14]',
            f15: '[F15]',
            f16: '[F16]',
            f17: '[F17]',
            f18: '[F18]',
            f19: '[F19]'
        },
        Me = [];

    function Ne() {
        switch (g()) {
            case 'macos':
            case 'ios':
                return 'apple';
            case 'windows':
                return 'windows';
        }
        return 'linux';
    }

    function Oe(Qc) {
        Qc.platform && Qc.platform !== Ne() || Me.push(Qc);
    }

    function Pe() {
        return Me[0];
    }
    Oe(Ke), Oe({
        id: 'apple.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'apple',
        virtualLayout: 'azerty',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '\u2021',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                '\u222B'
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                '\xA2'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                'ê',
                'Ê'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                '\xB7'
            ],
            KeyG: [
                'g',
                'G',
                'ﬁ',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                'Ì',
                'Î'
            ],
            KeyI: [
                'i',
                'I',
                'î',
                'ï'
            ],
            KeyJ: [
                'j',
                'J',
                'Ï',
                'Í'
            ],
            KeyK: [
                'k',
                'K',
                'È',
                'Ë'
            ],
            KeyL: [
                'l',
                'L',
                '\xAC',
                '|'
            ],
            KeyM: [
                ',',
                '?',
                '\u221E',
                '\xBF'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                'ı'
            ],
            KeyO: [
                'o',
                'O',
                'œ',
                'Œ'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\u201A'
            ],
            KeyS: [
                's',
                'S',
                'Ò',
                '\u2211'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2122'
            ],
            KeyU: [
                'u',
                'U',
                'º',
                'ª'
            ],
            KeyV: [
                'v',
                'V',
                '\u25CA',
                '\u221A'
            ],
            KeyW: [
                'z',
                'Z',
                'Â',
                'Å'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                '\u2044'
            ],
            KeyY: [
                'y',
                'Y',
                'Ú',
                'Ÿ'
            ],
            KeyZ: [
                'w',
                'W',
                '\u2039',
                '\u203A'
            ],
            Digit1: [
                '&',
                '1',
                '\uF8FF',
                '\xB4'
            ],
            Digit2: [
                'é',
                '2',
                'ë',
                '\u201E'
            ],
            Digit3: [
                '"',
                '3',
                '\u201C',
                '\u201D'
            ],
            Digit4: [
                '\'',
                '4',
                '\u2018',
                '\u2019'
            ],
            Digit5: [
                '(',
                '5',
                '{',
                '['
            ],
            Digit6: [
                '\xA7',
                '6',
                '\xB6',
                'å'
            ],
            Digit7: [
                'è',
                '7',
                '\xAB',
                '\xBB'
            ],
            Digit8: [
                '!',
                '8',
                '\xA1',
                'Û'
            ],
            Digit9: [
                'ç',
                '9',
                'Ç',
                'Á'
            ],
            Digit0: [
                'à',
                '0',
                'ø',
                'Ø'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                '}',
                ']'
            ],
            Equal: [
                '-',
                '_',
                '\u2014',
                '\u2013'
            ],
            BracketLeft: [
                '^',
                '\xA8',
                'ô',
                'Ô'
            ],
            BracketRight: [
                '$',
                '*',
                '\u20AC',
                '\xA5'
            ],
            Backslash: [
                '`',
                '\xA3',
                '@',
                '#'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'Ó'
            ],
            Quote: [
                'ù',
                '%',
                'Ù',
                '\u2030'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ';',
                '.',
                '\u2026',
                '\u2022'
            ],
            Period: [
                ':',
                '/',
                '\xF7',
                '\\'
            ],
            Slash: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                '.',
                ',',
                '.'
            ],
            IntlBackslash: [
                '@',
                '#',
                '\u2022',
                'Ÿ'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Oe({
        id: 'apple.spanish',
        locale: 'es',
        displayName: 'Spanish ISO',
        platform: 'apple',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                ' '
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u20AC'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'ﬁ'
            ],
            KeyG: [
                'g',
                'G',
                '\uF8FF',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                '\u2122',
                ' '
            ],
            KeyI: [
                'i',
                'I',
                ' ',
                ' '
            ],
            KeyJ: [
                'j',
                'J',
                '\xB6',
                '\xAF'
            ],
            KeyK: [
                'k',
                'K',
                '\xA7',
                'ˇ'
            ],
            KeyL: [
                'l',
                'L',
                ' ',
                '\u02D8'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02DA'
            ],
            KeyN: [
                'n',
                'N',
                ' ',
                '\u02D9'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                ' '
            ],
            KeyS: [
                's',
                'S',
                '\u222B',
                ' '
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2021'
            ],
            KeyU: [
                'u',
                'U',
                ' ',
                ' '
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                'æ',
                'Æ'
            ],
            KeyX: [
                'x',
                'X',
                '\u2211',
                '\u203A'
            ],
            KeyY: [
                'y',
                'Y',
                '\xA5',
                ' '
            ],
            KeyZ: [
                'z',
                'Z',
                'Ω',
                '\u2039'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                'ı'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u02DD'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\u2022'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                '\u2030'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ' '
            ],
            Digit7: [
                '7',
                '/',
                '\xF7',
                '\u2044'
            ],
            Digit8: [
                '8',
                '(',
                '\u201C',
                '\u2018'
            ],
            Digit9: [
                '9',
                ')',
                '\u201D',
                '\u2019'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\u2248'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\xB4',
                '\xB8'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '\u201A',
                '\u02DB'
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                'ˆ'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '\xB1'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '\xBB'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '\u02DC'
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                '\xAB'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u201E',
                ''
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\u2026'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                ',',
                ',',
                ',',
                ','
            ],
            IntlBackslash: [
                'º',
                'ª',
                '\\',
                '\xB0'
            ]
        }
    }), Oe({
        id: 'windows.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'windows',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'z',
                'Z',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '|',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '@',
                ''
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '~',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '\u20AC',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '',
                ''
            ],
            Digit9: [
                '9',
                ')',
                '',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                '\'',
                '?',
                '',
                ''
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '',
                ''
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                ''
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                ''
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '',
                ''
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                ''
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Oe({
        id: 'linux.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'linux',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'º'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                '\xA1'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u215B'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\xA3'
            ],
            Digit4: [
                '4',
                '$',
                '~',
                '$'
            ],
            Digit5: [
                '5',
                '%',
                '\xBD',
                '\u215C'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                '\u215D'
            ],
            Digit7: [
                '7',
                '/',
                '{',
                '\u215E'
            ],
            Digit8: [
                '8',
                '(',
                '[',
                '\u2122'
            ],
            Digit9: [
                '9',
                ')',
                ']',
                '\xB1'
            ],
            Digit0: [
                '0',
                '=',
                '}',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\\',
                '\xBF'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '̃',
                '~'
            ],
            BracketLeft: [
                '̀',
                '̂',
                '[',
                '̊'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '̄'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '̆'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '̋'
            ],
            Quote: [
                '́',
                '̈',
                '{',
                '{'
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                '\\'
            ],
            Comma: [
                ',',
                ';',
                '\u2500',
                '\xD7'
            ],
            Period: [
                '.',
                ':',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '̣',
                '̇'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadEnter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Numpad1: [
                '',
                '1',
                '',
                '1'
            ],
            Numpad2: [
                '',
                '2',
                '',
                '2'
            ],
            Numpad3: [
                '',
                '3',
                '',
                '3'
            ],
            Numpad4: [
                '',
                '4',
                '',
                '4'
            ],
            Numpad5: [
                '',
                '5',
                '',
                '5'
            ],
            Numpad6: [
                '',
                '6',
                '',
                '6'
            ],
            Numpad7: [
                '',
                '7',
                '',
                '7'
            ],
            Numpad8: [
                '',
                '8',
                '',
                '8'
            ],
            Numpad9: [
                '',
                '9',
                '',
                '9'
            ],
            Numpad0: [
                '',
                '0',
                '',
                '0'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            NumpadComma: [
                '.',
                '.',
                '.',
                '.'
            ],
            NumpadParenLeft: [
                '(',
                '(',
                '(',
                '('
            ],
            NumpadParenRight: [
                ')',
                ')',
                ')',
                ')'
            ]
        }
    }), Oe({
        id: 'linux.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'linux',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                ',',
                '?',
                '́',
                '̋'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            Digit1: [
                '&',
                '1',
                '\xB9',
                '\xA1'
            ],
            Digit2: [
                'é',
                '2',
                '~',
                '\u215B'
            ],
            Digit3: [
                '"',
                '3',
                '#',
                '\xA3'
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                '$'
            ],
            Digit5: [
                '(',
                '5',
                '[',
                '\u215C'
            ],
            Digit6: [
                '-',
                '6',
                '|',
                '\u215D'
            ],
            Digit7: [
                'è',
                '7',
                '`',
                '\u215E'
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                '\u2122'
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                '\xB1'
            ],
            Digit0: [
                'à',
                '0',
                '@',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                '\xBF'
            ],
            Equal: [
                '=',
                '+',
                '}',
                '̨'
            ],
            BracketLeft: [
                '̂',
                '̈',
                '̈',
                '̊'
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                '̄'
            ],
            Backslash: [
                '*',
                'µ',
                '̀',
                '̆'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'º'
            ],
            Quote: [
                'ù',
                '%',
                '̂',
                '̌'
            ],
            Backquote: [
                '\xB2',
                '~',
                '\xAC',
                '\xAC'
            ],
            Comma: [
                ';',
                '.',
                '\u2500',
                '\xD7'
            ],
            Period: [
                ':',
                '/',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '!',
                '\xA7',
                '̣',
                '̇'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ]
        }
    }), Oe({
        id: 'windows.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                ',',
                '?',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'a',
                'A',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'w',
                'W',
                '',
                ''
            ],
            Digit1: [
                '&',
                '1',
                '',
                ''
            ],
            Digit2: [
                'é',
                '2',
                '~',
                ''
            ],
            Digit3: [
                '"',
                '3',
                '#',
                ''
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                ''
            ],
            Digit5: [
                '(',
                '5',
                '[',
                ''
            ],
            Digit6: [
                '-',
                '6',
                '|',
                ''
            ],
            Digit7: [
                'è',
                '7',
                '`',
                ''
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                ''
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                ''
            ],
            Digit0: [
                'à',
                '0',
                '@',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                ''
            ],
            Equal: [
                '=',
                '+',
                '}',
                ''
            ],
            BracketLeft: [
                '^',
                '\xA8',
                '',
                ''
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                ''
            ],
            Backslash: [
                '*',
                'µ',
                '',
                ''
            ],
            Semicolon: [
                'm',
                'M',
                '',
                ''
            ],
            Quote: [
                'ù',
                '%',
                '',
                ''
            ],
            Backquote: [
                '\xB2',
                '',
                '',
                ''
            ],
            Comma: [
                ';',
                '.',
                '',
                ''
            ],
            Period: [
                ':',
                '/',
                '',
                ''
            ],
            Slash: [
                '!',
                '\xA7',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Oe({
        id: 'windows.german',
        locale: 'de',
        displayName: 'German',
        platform: 'windows',
        virtualLayout: 'qwertz',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyZ: [
                'y',
                'Y',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '\xB2',
                ''
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB3',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '{',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '[',
                ''
            ],
            Digit9: [
                '9',
                ')',
                ']',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '}',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                'ß',
                '?',
                '\\',
                'ẞ'
            ],
            Equal: [
                '\xB4',
                '`',
                '',
                ''
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                '~',
                ''
            ],
            Backslash: [
                '#',
                '\'',
                '',
                ''
            ],
            Semicolon: [
                'ö',
                'Ö',
                '',
                ''
            ],
            Quote: [
                'ä',
                'Ä',
                '',
                ''
            ],
            Backquote: [
                '^',
                '\xB0',
                '',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                ''
            ]
        }
    }), Oe({
        id: 'apple.german',
        locale: 'de',
        displayName: 'German',
        virtualLayout: 'qwertz',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                '\u222B',
                '\u2039'
            ],
            KeyC: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2122'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u2030'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyG: [
                'g',
                'G',
                '\xA9',
                'Ì'
            ],
            KeyH: [
                'h',
                'H',
                'ª',
                'Ó'
            ],
            KeyI: [
                'i',
                'I',
                '\u2044',
                'Û'
            ],
            KeyJ: [
                'j',
                'J',
                'º',
                'ı'
            ],
            KeyK: [
                'k',
                'K',
                '\u2206',
                'ˆ'
            ],
            KeyL: [
                'l',
                'L',
                '@',
                'ﬂ'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02D8'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                '\u203A'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                '\xAB',
                '\xBB'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\xB8'
            ],
            KeyS: [
                's',
                'S',
                '\u201A',
                'Í'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u02DD'
            ],
            KeyU: [
                'u',
                'U',
                '\xA8',
                'Á'
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                'Ù'
            ],
            KeyY: [
                'z',
                'Z',
                'Ω',
                'ˇ'
            ],
            KeyZ: [
                'y',
                'Y',
                '\xA5',
                '\u2021'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\xAC'
            ],
            Digit2: [
                '2',
                '"',
                '\u201C',
                '\u201D'
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB6',
                '#'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '[',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '&',
                ']',
                '^'
            ],
            Digit7: [
                '7',
                '/',
                '|',
                '\\'
            ],
            Digit8: [
                '8',
                '(',
                '{',
                '\u02DC'
            ],
            Digit9: [
                '9',
                ')',
                '}',
                '\xB7'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\xAF'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                'ß',
                '?',
                '\xBF',
                '\u02D9'
            ],
            Equal: [
                '\xB4',
                '`',
                '\'',
                '\u02DA'
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '\u2022',
                '\xB0'
            ],
            BracketRight: [
                '+',
                '*',
                '\xB1',
                '\uF8FF'
            ],
            Backslash: [
                '#',
                '\'',
                '\u2018',
                '\u2019'
            ],
            Semicolon: [
                'ö',
                'Ö',
                'œ',
                'Œ'
            ],
            Quote: [
                'ä',
                'Ä',
                'æ',
                'Æ'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u221E',
                '\u02DB'
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                ',',
                '.',
                '.'
            ],
            IntlBackslash: [
                '^',
                '\xB0',
                '\u201E',
                '\u201C'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Oe({
        id: 'dvorak',
        locale: 'en',
        displayName: 'Dvorak',
        virtualLayout: 'dvorak',
        platform: '',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'x',
                'X',
                '\u2248',
                '\u02DB'
            ],
            KeyC: [
                'j',
                'J',
                '\u2206',
                'Ô'
            ],
            KeyD: [
                'e',
                'E',
                '\xB4',
                '\xB4'
            ],
            KeyE: [
                '.',
                '>',
                '\u2265',
                '\u02D8'
            ],
            KeyF: [
                'u',
                'U',
                '\xA8',
                '\xA8'
            ],
            KeyG: [
                'i',
                'I',
                'ˆ',
                'ˆ'
            ],
            KeyH: [
                'd',
                'D',
                '\u2202',
                'Î'
            ],
            KeyI: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyJ: [
                'h',
                'H',
                '\u02D9',
                'Ó'
            ],
            KeyK: [
                't',
                'T',
                '\u2020',
                'ˇ'
            ],
            KeyL: [
                'n',
                'N',
                '\u02DC',
                '\u02DC'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'Â'
            ],
            KeyN: [
                'b',
                'B',
                '\u222B',
                'ı'
            ],
            KeyO: [
                'r',
                'R',
                '\xAE',
                '\u2030'
            ],
            KeyP: [
                'l',
                'L',
                '\xAC',
                'Ò'
            ],
            KeyQ: [
                '\'',
                '"',
                'æ',
                'Æ'
            ],
            KeyR: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyS: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyT: [
                'y',
                'Y',
                '\xA5',
                'Á'
            ],
            KeyU: [
                'g',
                'G',
                '\xA9',
                '\u02DD'
            ],
            KeyV: [
                'k',
                'K',
                '\u02DA',
                '\uF8FF'
            ],
            KeyW: [
                ',',
                '<',
                '\u2264',
                '\xAF'
            ],
            KeyX: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyY: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyZ: [
                ';',
                ':',
                '\u2026',
                'Ú'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\u2044'
            ],
            Digit2: [
                '2',
                '@',
                '\u2122',
                '\u20AC'
            ],
            Digit3: [
                '3',
                '#',
                '\xA3',
                '\u2039'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\u203A'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '^',
                '\xA7',
                'ﬂ'
            ],
            Digit7: [
                '7',
                '&',
                '\xB6',
                '\u2021'
            ],
            Digit8: [
                '8',
                '*',
                '\u2022',
                '\xB0'
            ],
            Digit9: [
                '9',
                '(',
                'ª',
                '\xB7'
            ],
            Digit0: [
                '0',
                ')',
                'º',
                '\u201A'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '[',
                '{',
                '\u201C',
                '\u201D'
            ],
            Equal: [
                ']',
                '}',
                '\u2018',
                '\u2019'
            ],
            BracketLeft: [
                '/',
                '?',
                '\xF7',
                '\xBF'
            ],
            BracketRight: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            Backslash: [
                '\\',
                '|',
                '\xAB',
                '\xBB'
            ],
            Semicolon: [
                's',
                'S',
                'ß',
                'Í'
            ],
            Quote: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            Backquote: [
                '`',
                '~',
                '`',
                '`'
            ],
            Comma: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            Period: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            Slash: [
                'z',
                'Z',
                'Ω',
                '\xB8'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                '.',
                '.',
                '.',
                '.'
            ],
            IntlBackslash: [
                '\xA7',
                '\xB1',
                '\xA7',
                '\xB1'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            AudioVolumeUp: [
                '',
                '=',
                '',
                '='
            ]
        }
    });
    const Qe = [{
                key: 'left',
                command: 'moveToPreviousChar'
            },
            {
                key: 'right',
                command: 'moveToNextChar'
            },
            {
                key: 'up',
                command: 'moveUp'
            },
            {
                key: 'down',
                command: 'moveDown'
            },
            {
                key: 'shift+[ArrowLeft]',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+[ArrowRight]',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+[ArrowUp]',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+[ArrowDown]',
                command: 'extendSelectionDownward'
            },
            {
                key: '[Backspace]',
                command: 'deleteBackward'
            },
            {
                key: 'alt+[Delete]',
                command: 'deleteBackward'
            },
            {
                key: '[Delete]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[Backspace]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[ArrowLeft]',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+[ArrowRight]',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+[ArrowLeft]',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+[ArrowRight]',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+[ArrowLeft]',
                command: 'moveToGroupStart'
            },
            {
                key: 'ctrl+[ArrowRight]',
                command: 'moveToGroupEnd'
            },
            {
                key: 'shift+ctrl+[ArrowLeft]',
                command: 'extendToGroupStart'
            },
            {
                key: 'shift+ctrl+[ArrowRight]',
                command: 'extendToGroupEnd'
            },
            {
                key: '[Space]',
                ifMode: 'math',
                command: 'moveAfterParent'
            },
            {
                key: 'shift+[Space]',
                ifMode: 'math',
                command: 'moveBeforeParent'
            },
            {
                key: '[Home]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'cmd+[ArrowLeft]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'shift+[Home]',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+cmd+[ArrowLeft]',
                command: 'extendToMathFieldStart'
            },
            {
                key: '[End]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'cmd+[ArrowRight]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+[End]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'shift+cmd+[ArrowRight]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: '[Pageup]',
                command: 'moveToGroupStart'
            },
            {
                key: '[Pagedown]',
                command: 'moveToGroupEnd'
            },
            {
                key: '[Tab]',
                ifMode: 'math',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'math',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Tab]',
                ifMode: 'text',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'text',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Escape]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'text',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '\\',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[IntlBackslash]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'complete',
                    {
                        selectItem: 'true'
                    }
                ]
            },
            {
                key: '[Tab]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'accept-suggestion'
                ]
            },
            {
                key: '[Return]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: '[Enter]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: 'shift+[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'reject'
                ]
            },
            {
                key: '[ArrowDown]',
                ifMode: 'latex',
                command: 'nextSuggestion'
            },
            {
                key: '[ArrowUp]',
                ifMode: 'latex',
                command: 'previousSuggestion'
            },
            {
                key: 'ctrl+a',
                ifPlatform: '!macos',
                command: 'selectAll'
            },
            {
                key: 'cmd+a',
                command: 'selectAll'
            },
            {
                key: '[Cut]',
                command: 'cutToClipboard'
            },
            {
                key: '[Copy]',
                command: 'copyToClipboard'
            },
            {
                key: '[Paste]',
                command: 'pasteFromClipboard'
            },
            {
                key: '[Clear]',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+z',
                ifPlatform: '!macos',
                command: 'undo'
            },
            {
                key: 'cmd+z',
                command: 'undo'
            },
            {
                key: '[Undo]',
                command: 'undo'
            },
            {
                key: 'ctrl+y',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+y',
                command: 'redo'
            },
            {
                key: 'shift+ctrl+z',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+z',
                command: 'redo'
            },
            {
                key: '[Redo]',
                command: 'redo'
            },
            {
                key: '[EraseEof]',
                command: 'deleteToGroupEnd'
            },
            {
                key: 'ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousChar'
            },
            {
                key: 'ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextChar'
            },
            {
                key: 'ctrl+p',
                ifPlatform: 'macos',
                command: 'moveUp'
            },
            {
                key: 'ctrl+n',
                ifPlatform: 'macos',
                command: 'moveDown'
            },
            {
                key: 'ctrl+a',
                ifPlatform: 'macos',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'ctrl+e',
                ifPlatform: 'macos',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+ctrl+p',
                ifPlatform: 'macos',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+ctrl+n',
                ifPlatform: 'macos',
                command: 'extendSelectionDownward'
            },
            {
                key: 'shift+ctrl+a',
                ifPlatform: 'macos',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+ctrl+e',
                ifPlatform: 'macos',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+h',
                ifPlatform: 'macos',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+d',
                ifPlatform: 'macos',
                command: 'deleteForward'
            },
            {
                key: 'ctrl+l',
                ifPlatform: 'macos',
                command: 'scrollIntoView'
            },
            {
                key: 'ctrl+[Digit2]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'ctrl+[Digit5]',
                ifMode: 'math',
                command: 'moveToOpposite'
            },
            {
                key: 'ctrl+[Digit6]',
                ifMode: 'math',
                command: 'moveToSuperscript'
            },
            {
                key: 'ctrl+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'ctrl+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\pi'
                ]
            },
            {
                key: 'alt+v',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'alt+w',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sum_{i=#?}^{#?}'
                ]
            },
            {
                key: 'alt+b',
                command: [
                    'insert',
                    '\\int_{#?}^{#?}'
                ]
            },
            {
                key: 'alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cup'
                ]
            },
            {
                key: 'alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cap'
                ]
            },
            {
                key: 'alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\emptyset'
                ]
            },
            {
                key: 'alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\differentialD'
                ]
            },
            {
                key: 'shift+alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\varnothing'
                ]
            },
            {
                key: 'shift+alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\partial'
                ]
            },
            {
                key: 'shift+alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\prod_{i=#?}^{#?}'
                ]
            },
            {
                key: 'shift+alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcup'
                ]
            },
            {
                key: 'shift+alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcap'
                ]
            },
            {
                key: 'shift+alt+a',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\forall'
                ]
            },
            {
                key: 'shift+alt+e',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\exists'
                ]
            },
            {
                key: 'alt+[Backslash]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\backslash'
                ]
            },
            {
                key: '[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#?}{#@}'
                ]
            },
            {
                key: 'shift+alt+k',
                command: 'toggleKeystrokeCaption'
            },
            {
                key: 'alt+[Space]',
                command: 'toggleVirtualKeyboard'
            },
            {
                key: 'alt+ctrl+[ArrowUp]',
                command: [
                    'speak',
                    'all',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+ctrl+[ArrowDown]',
                command: [
                    'speak',
                    'selection',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'applyStyle',
                    {
                        mode: 'text'
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'applyStyle',
                    {
                        mode: 'math'
                    }
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'switchMode',
                    'text',
                    '',
                    ''
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'switchMode',
                    'math',
                    '',
                    ''
                ]
            },
            {
                key: '/',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+/',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\/'
                ]
            },
            {
                key: 'alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrack #0 \\right\\rbrack'
                ]
            },
            {
                key: 'ctrl+[Minus]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'moveToSubscript'
            },
            {
                key: 'shift+alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrace #0 \\right\\rbrace'
                ]
            },
            {
                key: 'ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'shift+ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'shift+cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'ctrl+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'cmd+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'shift+ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+[Backspace]',
                ifMode: 'math',
                command: 'removeColumn'
            },
            {
                key: 'alt+[Digit5]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '$\\infty'
                ]
            },
            {
                key: 'alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\wedge'
                ]
            },
            {
                key: 'shift+alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\vee'
                ]
            },
            {
                key: 'alt+[Digit9]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '('
                ]
            },
            {
                key: 'alt+[Digit0]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    ')'
                ]
            },
            {
                key: 'alt+|',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '|'
                ]
            },
            {
                key: 'shift+[Backquote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\~'
                ]
            },
            {
                key: '[Backquote]',
                ifLayout: [
                    'windows.french',
                    'linux.french'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '^2'
                ]
            }
        ],
        Re = {
            '\\theta': 'alt+q',
            '\\sqrt': [
                'alt+v',
                'ctrl+[Digit2]'
            ],
            '\\pi': 'alt+p',
            '\\prod': 'shift+alt+p',
            '\\sum': 'alt+w',
            '\\int': 'alt+b',
            '\\cup': 'alt+u',
            '\\cap': 'alt+n',
            '\\bigcup': 'shift+alt+u',
            '\\bigcap': 'shift+alt+n',
            '\\forall': 'shift+alt+a',
            '\\exists': 'shift+alt+e',
            '\\infty': 'alt+[Digit5]',
            '\\wedge': 'alt+[Digit6]',
            '\\vee': 'shift+alt+[Digit6]',
            '\\differentialD': 'alt+d',
            '\\partial': 'shift+alt+d',
            '\\frac': 'Slash',
            '\\emptyset': 'alt+o',
            '\\varnothing': 'shift+alt+o',
            '\\~': '~'
        };

    function Se(Qc) {
        let Te = Ue;
        return Td(Te) && (Te = Te.length > 0 ? Te[0] + '(' + Te.slice(1).join('') + ')' : ''), Te;
    }

    function Te(Qc, wd) {
        let Ue = [];
        if ('string' == typeof wd) {
            const Ve = Re[wd];
            Td(Ve) ? Ue = Ve.slice() : Ve && Ue.push(Ve);
        }
        const Ve = Se(wd),
            We = new RegExp('^' + Ve.replace('\\', '\\\\').replace('|', '\\|').replace('*', '\\*').replace('$', '\\$').replace('^', '\\^') + '([^*a-zA-Z]|$)');
        for (const Xe of Qc)
            We.test(Se(Xe.command)) && Ue.push(Xe.key);
        return Ue.map(Ue);
    }

    function Ue(Qc) {
        var Ve;
        const We = /macos|ios|/.test(g()),
            Xe = Qc.split('+');
        let Ye = '';
        for (const Ze of Xe)
            !We && Ye && (Ye += '<span class="ML__shortcut-join">+</span>'), Ze.startsWith('[Key') ? Ye += Ze.slice(4, 5) : Ze.startsWith('Key') ? Ye += Ze.slice(3, 4) : Ze.startsWith('[Digit') ? Ye += Ze.slice(6, 7) : Ze.startsWith('Digit') ? Ye += Ze.slice(5, 6) : Ye += null !== (Ve = {
                cmd: '\u2318',
                meta: We ? '\u2318' : 'command',
                shift: We ? '\u21E7' : 'shift',
                alt: We ? '\u2325' : 'alt',
                ctrl: We ? '\u2303' : 'control',
                '\n': We ? '\u23CE' : 'return',
                '[return]': We ? '\u23CE' : 'return',
                '[enter]': We ? '\u2324' : 'enter',
                '[tab]': We ? '\u21E5' : 'tab',
                '[escape]': 'esc',
                '[backspace]': We ? '\u232B' : 'backspace',
                '[delete]': We ? '\u2326' : 'del',
                '[pageup]': We ? '\u21DE' : 'page up',
                '[pagedown]': We ? '\u21DF' : 'page down',
                '[home]': We ? '\u2912' : 'home',
                '[end]': We ? '\u2913' : 'end',
                '[space]': 'space',
                '[equal]': '=',
                '[minus]': '-',
                '[comma]': ',',
                '[slash]': '/',
                '[backslash]': '\\',
                '[bracketleft]': '[',
                '[bracketright]': ']',
                semicolon: ';',
                period: '.',
                comma: ',',
                minus: '-',
                equal: '=',
                quote: '\'',
                bracketLeft: '[',
                bracketRight: ']',
                backslash: '\\',
                intlbackslash: '\\',
                backquote: '`',
                slash: '/',
                numpadmultiply: '* &#128290;',
                numpaddivide: '/ &#128290;',
                numpadsubtract: '- &#128290;',
                numpadadd: '+ &#128290;',
                numpaddecimal: '. &#128290;',
                numpadcomma: ', &#128290;',
                help: 'help',
                left: '\u21E0',
                up: '\u21E1',
                right: '\u21E2',
                down: '\u21E3',
                '[arrowleft]': '\u21E0',
                '[arrowup]': '\u21E1',
                '[arrowright]': '\u21E2',
                '[arrowdown]': '\u21E3',
                '[digit0]': '0',
                '[digit1]': '1',
                '[digit2]': '2',
                '[digit3]': '3',
                '[digit4]': '4',
                '[digit5]': '5',
                '[digit6]': '6',
                '[digit7]': '7',
                '[digit8]': '8',
                '[digit9]': '9'
            } [Ze.toLowerCase()]) && void 0 !== Ve ? Ve : Ze.toUpperCase();
        return Ye;
    }

    function Ve(Qc, wd) {
        if (Qc.ifPlatform && !/^!?(macos|windows|android|ios|chromeos|other)$/.test(Qc.ifPlatform))
            throw new Error(`Unexpected platform "${ Qc.ifPlatform }" for keybinding ${ Qc.key }`);
        if (void 0 !== Qc.ifLayout && (0 === wd.score || !Qc.ifLayout.includes(wd.id)))
            return;
        const We = Ie(Qc.key);
        let Xe = Qc.ifPlatform;
        if (We.cmd) {
            if (Xe && 'macos' !== Xe && 'ios' !== Xe)
                throw new Error('Unexpected "cmd" modifier with platform "' + Xe + '"\n"cmd" modifier can only be used with macOS or iOS platform.');
            Xe || (Xe = 'ios' === g() ? 'ios' : 'macos'), We.win = !1, We.cmd = !1, We.meta = !0;
        }
        if (We.win) {
            if (Xe && 'windows' !== Xe)
                throw new Error('Unexpected "win" modifier with platform "' + Xe + '"\n"win" modifier can only be used with Windows platform.');
            Xe = 'windows', We.win = !1, We.cmd = !1, We.meta = !0;
        }
        if (Xe && ! function(Qc) {
                if (Xc()) {
                    const Ye = g(),
                        Ze = Qc.startsWith('!'),
                        $e = Qc.endsWith(Ye);
                    if (Ze && !$e)
                        return !0;
                    if (!Ze && $e)
                        return !0;
                }
                return '!other' !== Qc && 'other' === Qc;
            }(Xe))
            return;
        if (/^\[.+\]$/.test(We.key))
            return {
                ...Qc,
                ifPlatform: Xe,
                key: Je(We)
            };
        const Ye = function(Qc, wd) {
            var Ze;
            const $e = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: ''
            };
            if (!Qc)
                return $e;
            for (const [_e, af] of Object.entries(wd.mapping)) {
                if (af[0] === Qc)
                    return $e.key = `[${ _e }]`, $e;
                if (af[1] === Qc)
                    return $e.shift = !0, $e.key = `[${ _e }]`, $e;
                if (af[2] === Qc)
                    return $e.alt = !0, $e.key = `[${ _e }]`, $e;
                if (af[3] === Qc)
                    return $e.shift = !0, $e.alt = !0, $e.key = `[${ _e }]`, $e;
            }
            return $e.key = null !== (_e = Le[Qc]) && void 0 !== _e ? _e : '', $e;
        }(We.key, wd);
        if (!Ye)
            throw new Error('Invalid keybinding key "' + Qc.key + '"');
        if (Ye.shift && We.shift || Ye.alt && We.alt)
            throw new Error(`The keybinding ${ Qc.key } (${ We(Qc.command) }) is conflicting with the key combination ${ Je(Ye) } using the ${ wd.displayName } keyboard layout`);
        return Ye.shift = Ye.shift || We.shift, Ye.alt = Ye.alt || We.alt, Ye.meta = We.meta, Ye.ctrl = We.ctrl, {
            ...Qc,
            ifPlatform: Xe,
            key: Je(Ye)
        };
    }

    function We(Qc) {
        if (Array.isArray(Qc)) {
            const Xe = [...Qc];
            return Xe.shift() + '(' + Xe.map(Qc => 'string' == typeof Qc ? `"${ Qc }"` : Qc.toString()).join(', ') + ')';
        }
        return Qc;
    }
    var Xe = '#mathlive-popover-panel{background-color:rgba(97,97,97,.95);border-radius:8px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);color:#fff;display:flex;flex-direction:column;justify-content:center;position:fixed;text-align:center;transition:all .2s cubic-bezier(.64,.09,.08,1);visibility:hidden;z-index:1}#mathlive-popover-panel:after{border-bottom:5px solid rgba(97,97,97,.9);border-left:5px solid transparent;border-right:5px solid transparent;content:"";font-size:1rem;height:0;left:calc(50% - 3px);position:absolute;top:-5px;width:0}#mathlive-popover-panel.is-visible{animation:ML__fade-in .15s cubic-bezier(0,0,.2,1);visibility:inherit}@keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}#mathlive-popover-panel ul{align-items:flex-start;display:flex;flex-flow:column;justify-content:center;list-style:none;margin:0;padding:0}#mathlive-popover-panel li{border-radius:8px;column-gap:1em;cursor:pointer;display:flex;flex-direction:row;justify-content:space-between;margin:8px;padding:8px;width:calc(100% - 32px)}#mathlive-popover-panel li a{color:#5ea6fd;display:block;margin-top:.4em;padding-top:.3em}#mathlive-popover-panel li a:hover{color:#5ea6fd;text-decoration:underline}#mathlive-popover-panel li.is-active,#mathlive-popover-panel li.is-pressed,#mathlive-popover-panel li:hover{background:hsla(0,0%,100%,.1)}.ML__popover__command{font-family:KaTeX_Main;font-size:1.6rem}.ML__popover__latex{align-self:center;font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace}.ML__popover__keybinding{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:.8em;opacity:.7}.ML__shortcut-join{opacity:.5}',
        Ye = '.ML__sr-only{clip:rect(0,0,0,0);border:0;-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.ML__base,.ML__isInline{display:inline-block}.ML__base{border:0;box-sizing:content-box;cursor:text;font-family:inherit;font-style:inherit;font-weight:inherit;margin:0;outline:0;padding:0;position:relative;text-decoration:none;vertical-align:baseline;visibility:inherit;width:min-content}body.ML__fonts-loading .ML__base{visibility:hidden}.ML__strut,.ML__strut--bottom{display:inline-block;min-height:.5em}.ML__small-delim{font-family:KaTeX_Main}.ML__text{font-family:var(--text-font-family,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif);white-space:pre}.ML__cmr{font-family:KaTeX_Main;font-style:normal}.ML__mathit{font-family:KaTeX_Math;font-style:italic}.ML__mathbf{font-family:KaTeX_Main;font-weight:700}.lcGreek.ML__mathbf{font-family:KaTeX_Math;font-weight:400}.ML__mathbfit{font-family:KaTeX_Math;font-style:italic;font-weight:700}.ML__ams,.ML__bb{font-family:KaTeX_AMS}.ML__cal{font-family:KaTeX_Caligraphic}.ML__frak{font-family:KaTeX_Fraktur}.ML__tt{font-family:KaTeX_Typewriter}.ML__script{font-family:KaTeX_Script}.ML__sans{font-family:KaTeX_SansSerif}.ML__series_el,.ML__series_ul{font-weight:100}.ML__series_l{font-weight:200}.ML__series_sl{font-weight:300}.ML__series_sb{font-weight:500}.ML__bold,.ML__boldsymbol{font-weight:700}.ML__series_eb{font-weight:800}.ML__series_ub{font-weight:900}.ML__series_uc{font-stretch:ultra-condensed}.ML__series_ec{font-stretch:extra-condensed}.ML__series_c{font-stretch:condensed}.ML__series_sc{font-stretch:semi-condensed}.ML__series_sx{font-stretch:semi-expanded}.ML__series_x{font-stretch:expanded}.ML__series_ex{font-stretch:extra-expanded}.ML__series_ux{font-stretch:ultra-expanded}.ML__it{font-style:italic}.ML__shape_ol{-webkit-text-stroke:1px #000;text-stroke:1px #000;color:transparent}.ML__shape_sc{font-variant:small-caps}.ML__shape_sl{font-style:oblique}.ML__emph{color:#bc2612}.ML__emph .ML__emph{color:#0c7f99}.ML__highlight{background:#edd1b0;color:#007cb2}.ML__center{text-align:center}.ML__label_padding{padding:0 .5em}.ML__frac-line{min-height:1px;width:100%}.ML__frac-line:after{background:currentColor;box-sizing:content-box;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt,.ML__sqrt-sign{display:inline-block}.ML__sqrt-sign{font-family:KaTeX_Main;position:relative}.ML__sqrt-line{display:inline-block;height:.04em;width:100%}.ML__sqrt-line:before{background:currentColor;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt-line:after{border-bottom-width:1px;content:" ";display:block;margin-top:-.1em}.ML__sqrt-index{margin-left:.27777778em;margin-right:-.55555556em}.ML__delim-size1{font-family:KaTeX_Size1}.ML__delim-size2{font-family:KaTeX_Size2}.ML__delim-size3{font-family:KaTeX_Size3}.ML__delim-size4{font-family:KaTeX_Size4}.ML__delim-mult .delim-size1>span{font-family:KaTeX_Size1}.ML__delim-mult .delim-size4>span{font-family:KaTeX_Size4}.ML__accent-body>span{font-family:KaTeX_Main;width:0}.ML__accent-vec>span{left:.24em;position:relative}.ML__mathlive{word-wrap:normal;direction:ltr;display:inline-block;font-family:KaTeX_Main,Times New Roman,serif;font-size-adjust:none;font-stretch:normal;font-style:normal;font-variant-caps:normal;letter-spacing:normal;line-height:1.2;text-align:left;text-indent:0;text-rendering:auto;text-shadow:none;-webkit-user-select:none;user-select:none;white-space:nowrap;width:min-content;word-spacing:normal}.ML__mathlive .style-wrap{position:relative}.ML__mathlive .left-right,.ML__mathlive .mfrac{display:inline-block}.ML__mathlive .vlist-t{border-collapse:collapse;display:inline-table;table-layout:fixed}.ML__mathlive .vlist-r{display:table-row}.ML__mathlive .vlist{display:table-cell;position:relative;vertical-align:bottom}.ML__mathlive .vlist>span{display:block;height:0;position:relative}.ML__mathlive .vlist>span>span{display:inline-block}.ML__mathlive .vlist>span>.pstrut{overflow:hidden;width:0}.ML__mathlive .vlist-t2{margin-right:-2px}.ML__mathlive .vlist-s{display:table-cell;font-size:1px;min-width:2px;vertical-align:bottom;width:2px}.ML__mathlive .msubsup{text-align:left}.ML__mathlive .negativethinspace{display:inline-block;height:.71em;margin-left:-.16667em}.ML__mathlive .thinspace{display:inline-block;height:.71em;width:.16667em}.ML__mathlive .mediumspace{display:inline-block;height:.71em;width:.22222em}.ML__mathlive .thickspace{display:inline-block;height:.71em;width:.27778em}.ML__mathlive .enspace{display:inline-block;height:.71em;width:.5em}.ML__mathlive .quad{display:inline-block;height:.71em;width:1em}.ML__mathlive .qquad{display:inline-block;height:.71em;width:2em}.ML__mathlive .llap,.ML__mathlive .rlap{display:inline-block;position:relative;width:0}.ML__mathlive .llap>.inner,.ML__mathlive .rlap>.inner{position:absolute}.ML__mathlive .llap>.fix,.ML__mathlive .rlap>.fix{display:inline-block}.ML__mathlive .llap>.inner{right:0}.ML__mathlive .rlap>.inner{left:0}.ML__mathlive .rule{border:0 solid;box-sizing:border-box;display:inline-block;position:relative}.ML__mathlive .overline .overline-line,.ML__mathlive .underline .underline-line{width:100%}.ML__mathlive .overline .overline-line:before,.ML__mathlive .underline .underline-line:before{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block}.ML__mathlive .overline .overline-line:after,.ML__mathlive .underline .underline-line:after{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block;margin-top:-1px;min-height:thin}.ML__mathlive .stretchy{display:block;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .stretchy:after,.ML__mathlive .stretchy:before{content:""}.ML__mathlive .stretchy svg{fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;display:block;height:inherit;position:absolute;width:100%}.ML__mathlive .slice-1-of-2{left:0}.ML__mathlive .slice-1-of-2,.ML__mathlive .slice-2-of-2{display:inline-flex;overflow:hidden;position:absolute;width:50.2%}.ML__mathlive .slice-2-of-2{right:0}.ML__mathlive .slice-1-of-3{display:inline-flex;left:0;overflow:hidden;position:absolute;width:25.1%}.ML__mathlive .slice-2-of-3{display:inline-flex;left:25%;overflow:hidden;position:absolute;width:50%}.ML__mathlive .slice-3-of-3{display:inline-flex;overflow:hidden;position:absolute;right:0;width:25.1%}.ML__mathlive .slice-1-of-1{display:inline-flex;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .nulldelimiter{display:inline-block;width:.12em}.ML__mathlive .op-group{display:inline-block}.ML__mathlive .op-symbol{position:relative}.ML__mathlive .op-symbol.small-op{font-family:KaTeX_Size1}.ML__mathlive .op-symbol.large-op{font-family:KaTeX_Size2}.ML__mathlive .accent>.vlist>span{text-align:center}.ML__mathlive .mtable .vertical-separator{box-sizing:border-box;display:inline-block;min-width:1px}.ML__mathlive .mtable .arraycolsep{display:inline-block}.ML__mathlive .mtable .col-align-m>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-c>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-l>.vlist-t{text-align:left}.ML__mathlive .mtable .col-align-r>.vlist-t{text-align:right}.ML__error{background-color:rgba(204,0,65,.1);background-image:radial-gradient(ellipse at center,#cc0041,transparent 70%);background-position:0 100%;background-repeat:repeat-x;background-size:3px 3px;display:inline-block;padding-bottom:3px}.ML__error>.ML__error{background:transparent;padding:0}.ML__composition{background:#fff1c2;color:#000;-webkit-text-decoration:underline var(--caret-color-computed,var(--ML__caret-color));text-decoration:underline var(--caret-color-computed,var(--ML__caret-color))}@media (prefers-color-scheme:dark){.ML__composition{background:#69571c;color:#fff}}.ML__placeholder{color:var(--placeholder-color,var(--ML__placeholder-color));font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;opacity:var(--placeholder-opacity,.4);padding-left:.4ex;padding-right:.4ex}.ML__placeholdercontainer{display:none}.ML__placeholdercontainer math-field{border:1px solid var(--editable-border);border-radius:4px;display:inline-block;min-width:32px;padding-left:4px;padding-right:4px;position:absolute;z-index:1001}.ML__isReadOnly .ML__placeholdercontainer{display:block}.ML__container{min-height:auto!important}';

    function Ze(Qc) {
        var $e;
        'function' != typeof(null === ($e = Qc.listeners) || void 0 === $e ? void 0 : $e.onSelectionDidChange) || Qc.suppressChangeNotifications || (Qc.suppressChangeNotifications = !0, Qc.listeners.onSelectionDidChange(Qc), Qc.suppressChangeNotifications = !1);
    }

    function $e(Qc, _e = {}) {
        if (Qc.suppressChangeNotifications || !Qc.mathfield.host)
            return !0;
        Qc.suppressChangeNotifications = !0;
        const af = Qc.mathfield.host.dispatchEvent(new InputEvent('beforeinput', {
            ..._e,
            cancelable: !0,
            bubbles: !0,
            composed: !0
        }));
        return Qc.suppressChangeNotifications = !1, af;
    }

    function af(Qc, _e) {
        !Qc.suppressChangeNotifications && Qc.mathfield.host && (Qc.suppressChangeNotifications = !0, Qc.mathfield.host.dispatchEvent(new InputEvent('input', {
            ..._e,
            bubbles: !0,
            composed: !0
        })), Qc.suppressChangeNotifications = !1);
    }

    function bf(Qc) {
        var cf, df;
        const ef = Qc.atoms.find(Qc => Qc instanceof id);
        return ef && null !== (df = null === (cf = ef.body) || void 0 === cf ? void 0 : cf.filter(Qc => Qc instanceof hd)) && void 0 !== df ? df : [];
    }

    function cf(Qc, _e) {
        var df;
        let ef = 0,
            ff = !1;
        const gf = Number.isFinite(null == _e ? void 0 : _e.before) ? null !== (df = null == _e ? void 0 : _e.before) && void 0 !== df ? df : 0 : Qc.lastOffset;
        for (; ef <= gf && !ff;) {
            const hf = Qc.at(ef);
            ff = hf instanceof hd && hf.isSuggestion, ff || ef++;
        }
        if (!ff)
            return [
                void 0,
                void 0
            ];
        let hf = jf,
            kf = !1;
        for (; hf <= gf && !kf;) {
            const lf = Qc.at(hf);
            kf = !(lf instanceof hd && lf.isSuggestion), kf || hf++;
        }
        return [
            jf - 1,
            hf - 1
        ];
    }

    function df(Qc) {
        const ef = bf(Qc.model).filter(Qc => Qc.isSuggestion);
        if (0 !== ef.length) {
            Qc.model.position = Qc.model.offsetOf(ef[0].leftSibling);
            for (const ff of ef)
                ff.parent.removeChild(ff);
        }
    }

    function ef(Qc, _e) {
        var ff;
        const {
            model: gf
        } = hf;
        df(hf);
        for (const jf of bf(gf))
            jf.isError = !1;
        if (!gf.selectionIsCollapsed)
            return void qf(jf);
        const kf = [];
        let lf = gf.at(gf.position);
        for (; lf && lf instanceof hd && /^[a-zA-Z\*]$/.test(lf.value);)
            lf = lf.leftSibling;
        if (lf && lf instanceof hd && '\\' === lf.value)
            for (kf.push(lf), lf = lf.rightSibling; lf && lf instanceof hd && /^[a-zA-Z\*]$/.test(lf.value);)
                kf.push(lf), lf = lf.rightSibling;
        const mf = kf.map(jf => jf.value).join(''),
            nf = mf ? function(jf, _e) {
                var pf, qf;
                if ('\\' === _e)
                    return [];
                if (!_e.startsWith('\\'))
                    return [];
                const rf = [];
                for (const sf in x)
                    sf.startsWith(_e) && !x[sf].infix && rf.push({
                        match: sf,
                        frequency: null !== (pf = x[sf].frequency) && void 0 !== pf ? pf : 0
                    });
                for (const tf in v)
                    tf.startsWith(_e) && rf.push({
                        match: tf,
                        frequency: null !== (qf = v[tf].frequency) && void 0 !== qf ? qf : 0
                    });
                const uf = _e.substring(1);
                for (const vf of Object.keys(tf.options.macros))
                    vf.startsWith(uf) && rf.push({
                        match: '\\' + vf,
                        frequency: 0
                    });
                return rf.sort((tf, vf) => {
                    var wf, xf;
                    return tf.frequency === vf.frequency ? tf.match.length === vf.match.length ? tf.match < vf.match ? -1 : 1 : tf.match.length - vf.match.length : (null !== (wf = vf.frequency) && void 0 !== wf ? wf : 0) - (null !== (xf = tf.frequency) && void 0 !== xf ? xf : 0);
                }), rf.map(tf => tf.match);
            }(jf, mf) : [];
        if (0 === nf.length)
            return /^\\[a-zA-Z\*]+$/.test(mf) && kf.forEach(jf => {
                jf.isError = !0;
            }), void qf(jf);
        jf.suggestionIndex = null !== (ff = null == _e ? void 0 : _e.atIndex) && void 0 !== ff ? ff : 0, jf.suggestionIndex < 0 && (jf.suggestionIndex = nf.length - 1);
        const pf = nf[jf.suggestionIndex % nf.length];
        if (pf !== mf) {
            const qf = kf[kf.length - 1];
            qf.parent.addChildrenAfter([...pf.slice(mf.length - pf.length)].map(qf => new hd(qf, jf, {
                isSuggestion: !0
            })), qf), sf(jf);
        }! function(jf, _e) {
            if (0 === _e.length || !1 === jf.options.enablePopover)
                return void qf(jf);
            _e = _e.slice(0, 10);
            let qf = '<ul>';
            for (const rf of _e) {
                const sf = tf,
                    uf = mf(jf, tf),
                    vf = Te(jf.keybindings, sf).join('<br>');
                qf += `<li role="button" data-command="${ sf }"><span class="ML__popover__latex">${ sf }</span><span class="ML__popover__command">${ uf }</span>`, vf && (qf += `<span class="ML__popover__keybinding">${ vf }</span>`), qf += '</li>';
            }
            qf += '</ul>', jf.popover = function(jf, _e) {
                return jf.popover ? (jf.popover.innerHTML = jf.options.createHTML(_e), jf.popover) : (jf.popover = ne('mathlive-popover-panel'), void 0 === jf && (jf = Ge(Xe).toString(36)), kf = He(null, Xe, jf), lf = He(null, Ye, Ge(Ye).toString(36)), jf.popover.innerHTML = jf.options.createHTML(_e), jf.popover);
            }(jf, qf);
            const sf = jf.popover.querySelectorAll('ul li');
            for (const tf of sf)
                tf.addEventListener('pointerdown', jf => {
                    jf.preventDefault();
                }), tf.addEventListener('click', qf => {
                    gf(jf, 'reject'), Sd.insert('math', jf.model, tf.dataset.command, {
                        selectionMode: 'placeholder',
                        format: 'latex'
                    }), jf.dirty = !0, jf.scrollIntoView(), jf.focus();
                });
            setTimeout(() => {
                const uf = qe(jf.field);
                uf && pf(jf, uf), jf.popover && (jf.popover.classList.add('is-visible'), jf.popoverVisible = !0);
            }, 32);
        }(jf, nf);
    }

    function ff(Qc) {
        const [gf, hf] = cf(Qc, {
            before: Qc.position
        });
        if (void 0 === gf || void 0 === hf)
            return !1;
        let jf = !1;
        return Qc.getAtoms([
            gf,
            hf
        ]).forEach(Qc => {
            Qc.isSuggestion && (Qc.isSuggestion = !1, jf = !0);
        }), jf;
    }

    function gf(Qc, hf = 'accept', F) {
        var jf, kf;
        qf(Qc);
        const lf = Qc.model.atoms.find(Qc => Qc instanceof id);
        if (!lf)
            return !1;
        if ('accept-suggestion' === hf) {
            const mf = bf(Qc.model).filter(Qc => Qc.isSuggestion);
            if (0 === mf.length)
                return !1;
            for (const nf of mf)
                nf.isSuggestion = !1;
            return nf.model.position = nf.model.offsetOf(mf[mf.length - 1]), !0;
        }
        const mf = bf(Qc.model).filter(Qc => !Qc.isSuggestion).map(Qc => Qc.value).join(''),
            nf = lf.leftSibling;
        return lf.parent.removeChild(lf), Qc.model.position = Qc.model.offsetOf(nf), Qc.mode = null !== (jf = null == F ? void 0 : F.mode) && void 0 !== jf ? jf : 'math', 'reject' === hf || (Sd.insert('math', Qc.model, mf, {
            selectionMode: null !== (kf = null == F ? void 0 : F.selectItem) && void 0 !== kf && kf ? 'item' : 'placeholder',
            format: 'latex'
        }), Qc.snapshot(), Qc.model.announce('replacement')), !0;
    }
    let jf;
    new class extends Sd {
        createAtom(Qc, hf, F) {
            return new hd(Qc, hf);
        }
        onPaste(Qc, hf) {
            if (!hf.clipboardData)
                return !1;
            let kf = hf.clipboardData.getData('text/x-latex');
            return kf || (kf = hf.clipboardData.getData('text/plain')), !(!kf || !$e(Qc.model, {
                inputType: 'insertFromPaste',
                data: kf
            }) || (Qc.snapshot(), this.insert(Qc.model, kf) && (af(Qc.model, {
                inputType: 'insertFromPaste'
            }), sf(Qc)), hf.preventDefault(), hf.stopPropagation(), 0));
        }
        insert(Qc, hf, F) {
            if (!$e(Qc, {
                    data: hf,
                    inputType: 'insertText'
                }))
                return !1;
            F || (F = {}), F.insertionMode || (F.insertionMode = 'replaceSelection'), F.selectionMode || (F.selectionMode = 'placeholder');
            const {
                suppressChangeNotifications: kf
            } = lf;
            F.suppressChangeNotifications && (lf.suppressChangeNotifications = !0);
            const mf = lf.suppressChangeNotifications;
            lf.suppressChangeNotifications = !0, 'replaceSelection' !== F.insertionMode || lf.selectionIsCollapsed ? 'replaceAll' === F.insertionMode ? (lf.root.setChildren([], 'body'), lf.position = 0) : 'insertBefore' === F.insertionMode ? lf.collapseSelection('backward') : 'insertAfter' === F.insertionMode && lf.collapseSelection('forward') : lf.deleteAtoms(Id(lf.selection));
            const nf = [];
            for (const pf of hf)
                B.test(pf) && nf.push(new hd(pf, lf.mathfield));
            let qf = lf.at(lf.position);
            if (qf instanceof id && (qf = qf.lastChild), !(qf.parent instanceof id)) {
                const rf = new id('', lf.mathfield);
                qf.parent.addChildAfter(rf, qf), qf = rf.firstChild;
            }
            const rf = qf.parent.addChildrenAfter(nf, qf);
            return lf.suppressChangeNotifications = mf, 'before' === pf.selectionMode || ('item' === pf.selectionMode ? lf.setSelection(lf.anchor, lf.offsetOf(rf)) : rf && (lf.position = lf.offsetOf(rf))), af(lf, {
                data: hf,
                inputType: 'insertText'
            }), lf.suppressChangeNotifications = kf, !0;
        }
        constructor() {
            super('latex');
        }
    }();
    let kf = null,
        lf = null;

    function mf(Qc, hf) {
        const nf = pf,
            qf = new kc('root', nf);
        return qf.body = Rc(hf, nf, {
            parseMode: 'math'
        }), Tb(Ob(Rb(new Mb(qf.render(new Cb({
            registers: nf.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function nf(Qc, hf) {
        var pf;
        if (Qc.element && Qc.element.mathfield === Qc && Qc.popover && Qc.popoverVisible)
            if (null == hf ? void 0 : hf.deferred)
                setTimeout(() => nf(Qc), 100);
            else if ('latex' !== (null === (pf = Qc.model.at(Qc.model.position)) || void 0 === pf ? void 0 : pf.type))
            qf(Qc);
        else {
            const qf = qe(Qc.field);
            qf && pf(Qc, qf);
        }
    }

    function pf(Qc, hf) {
        if (d(), !Qc.popover || !Qc.popoverVisible)
            return;
        const qf = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
            rf = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
            sf = window.innerWidth - document.documentElement.clientWidth,
            tf = window.innerHeight - document.documentElement.clientHeight,
            uf = Qc.virtualKeyboard.height;
        hf.x + Qc.popover.offsetWidth / 2 > rf - sf ? Qc.popover.style.left = rf - Qc.popover.offsetWidth - sf + 'px' : hf.x - Qc.popover.offsetWidth / 2 < 0 ? Qc.popover.style.left = '0' : Qc.popover.style.left = hf.x - Qc.popover.offsetWidth / 2 + 'px', hf.y + Qc.popover.offsetHeight + 5 > qf - tf - uf ? (Qc.popover.classList.add('ML__popover--reverse-direction'), Qc.popover.style.top = hf.y - hf.height - Qc.popover.offsetHeight - 5 + 'px') : (Qc.popover.classList.remove('ML__popover--reverse-direction'), Qc.popover.style.top = `${ hf.y + 5 }px`);
    }

    function qf(Qc) {
        Qc.suggestionIndex = 0, Qc.popoverVisible = !1, Qc.popover && (Qc.popover.classList.remove('is-visible'), Qc.popover.innerHTML = '');
    }

    function rf(Qc) {
        let sf = 0;
        for (let tf = 0; tf < Qc.length; tf++)
            sf = 31 * sf + Qc.charCodeAt(tf), sf |= 0;
        return Math.abs(sf);
    }

    function sf(Qc, hf) {
        Qc.dirty || (Qc.dirty = !0, requestAnimationFrame(() => {
            pe(Qc) && Qc.dirty && (Qc.atomBoundsCache = new Map(), tf(Qc, hf), Qc.atomBoundsCache = void 0);
        }));
    }

    function tf(Qc, hf) {
        var uf;
        if (d(), !pe(Qc))
            return;
        hf = null != hf ? hf : {};
        const {
            model: vf
        } = wf;
        vf.root.caret = '', vf.root.isSelected = !1, vf.root.containsCaret = !0;
        for (const xf of vf.atoms)
            xf.caret = '', xf.isSelected = !1, xf.containsCaret = !1;
        const yf = !xf.options.readOnly && xf.hasFocus();
        if (vf.selectionIsCollapsed)
            vf.at(vf.position).caret = yf ? xf.mode : '';
        else {
            const zf = vf.getAtoms(vf.selection, {
                includeChildren: !0
            });
            for (const Af of zf)
                Af.isSelected = !0;
        }
        if (yf) {
            let zf = vf.at(vf.position).parent;
            for (; zf;)
                zf.containsCaret = !0, zf = zf.parent;
        }
        const zf = function(xf, hf) {
                var Af;
                return hf = null != hf ? hf : {}, Tb(Rb(xf.model.root.render(new Cb({
                    registers: xf.registers,
                    atomIdsSettings: {
                        seed: hf.forHighlighting ? rf(kc.serialize(xf.model.root, {
                            expandMacro: !1,
                            defaultMode: xf.options.defaultMode
                        })) : 'random',
                        groupNumbers: null !== (Af = hf.forHighlighting) && void 0 !== Af && Af
                    },
                    renderPlaceholder: xf.options.readOnly ? (hf, Af) => {
                        if (Af.placeholderId) {
                            const Bf = xf.getPlaceholderField(Af.placeholderId);
                            return Af.createMathfieldBox(hf, Bf, Af.placeholderId);
                        }
                        return Af.createBox(hf);
                    } : void 0
                }, {
                    fontSize: 5,
                    letterShapeStyle: xf.options.letterShapeStyle
                }, 'inline-math' === xf.options.defaultMode ? 'textstyle' : 'displaystyle')), xf.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(xf, hf),
            Af = xf.field,
            Bf = Af.classList.contains('ML__focused');
        Bf && !yf ? Af.classList.remove('ML__focused') : !Bf && yf && Af.classList.add('ML__focused'), Af.innerHTML = xf.options.createHTML(zf.toMarkup()), xf.fieldContent = Af.querySelector('.ML__mathlive'), xf.accessibleNode.innerHTML = xf.options.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' + ce(vf.root, xf.options) + '</math>'), uf(xf), xf.options.readOnly && xf.attachNestedMathfield(), null !== (uf = hf.interactive) && void 0 !== uf && uf || setTimeout(() => uf(xf), 32), xf.dirty = !1;
    }

    function uf(Qc) {
        d();
        const vf = Qc.field;
        if (!vf)
            return;
        for (const wf of vf.querySelectorAll('.ML__selection, .ML__contains-highlight'))
            wf.remove();
        if (!wf.hasFocus())
            return;
        const xf = wf.model,
            yf = parseFloat(getComputedStyle(vf).width);
        let zf = vf.getBoundingClientRect().width / yf;
        if (zf = isNaN(zf) ? 1 : zf, xf.selectionIsCollapsed) {
            setTimeout(() => nf(wf), 32);
            let Af = xf.at(xf.position);
            for (; Af && (!Af.containsCaret || !Af.displayContainsHighlight);)
                Af = Af.parent;
            if ((null == Af ? void 0 : Af.containsCaret) && Af.displayContainsHighlight) {
                const Bf = se(wf, ue(wf, Af));
                if (Bf) {
                    Bf.left /= zf, Bf.right /= zf, Bf.top /= zf, Bf.bottom /= zf;
                    const Cf = document.createElement('div');
                    Cf.classList.add('ML__contains-highlight'), Cf.style.position = 'absolute', Cf.style.left = `${ Bf.left }px`, Cf.style.top = `${ Bf.top }px`, Cf.style.width = `${ Math.ceil(Bf.right - Bf.left) }px`, Cf.style.height = `${ Math.ceil(Bf.bottom - Bf.top - 1) }px`, vf.insertBefore(Cf, vf.childNodes[0]);
                }
            }
        } else
            for (const Af of function(wf) {
                    let Bf = [];
                    for (const Cf of wf) {
                        let Df = !1;
                        for (const Ef of Bf)
                            if (Cf.left === Ef.left && Cf.right === Ef.right && Cf.top === Ef.top && Cf.bottom === Ef.bottom) {
                                Df = !0;
                                break;
                            }
                        Df || Bf.push(Cf);
                    }
                    wf = Bf, Bf = [];
                    for (const Df of wf) {
                        let Ef = 0;
                        for (const Ff of wf)
                            if (Df.left >= Ff.left && Df.right <= Ff.right && Df.top >= Ff.top && Df.bottom <= Ff.bottom && (Ef += 1, Ef > 1))
                                break;
                        1 === Ef && Ff.push(Df);
                    }
                    return Bf;
                }(ve(wf, {
                    excludeAtomsWithBackground: !0
                }))) {
                Af.left /= zf, Af.right /= zf, Af.top /= zf, Af.bottom /= zf;
                const Bf = document.createElement('div');
                Bf.classList.add('ML__selection'), Bf.style.position = 'absolute', Bf.style.left = `${ Af.left }px`, Bf.style.top = `${ Af.top }px`, Bf.style.width = `${ Math.ceil(Af.right - Af.left) }px`, Bf.style.height = `${ Math.ceil(Af.bottom - Af.top - 1) }px`, vf.insertBefore(Bf, vf.childNodes[0]);
            }
    }
    const vf = {};

    function wf(Qc, hf) {
        hf = null != hf ? hf : {
            target: 'mathfield',
            canUndo: !1
        };
        for (const xf of Object.keys(Qc))
            vf[xf] = {
                ...hf,
                fn: Qc[xf]
            };
    }

    function xf(Qc) {
        var yf;
        let zf;
        return zf = Td(Qc) ? Qc[0] : Qc, zf = zf.replace(/-\w/g, Qc => Qc[1].toUpperCase()), null === (yf = vf[zf]) || void 0 === yf ? void 0 : yf.target;
    }

    function yf(Qc, hf, F) {
        return hf + ke(F, {
            ...Qc,
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {
                ...Qc.textToSpeechRulesOptions,
                markup: 'none'
            }
        });
    }

    function zf(Qc, hf) {
        var Af, Bf, Cf;
        if (Xc() && (null != hf || (hf = null !== (Af = Yh().config) && void 0 !== Af ? Af : {}), hf))
            if (hf.speechEngine && 'local' !== hf.speechEngine)
                if ('amazon' === hf.speechEngine) {
                    if ('AWS' in window) {
                        const Df = new globalThis.AWS.Polly({
                                apiVersion: '2016-06-10'
                            }),
                            Ef = {
                                OutputFormat: 'mp3',
                                VoiceId: null !== (Bf = hf.speechEngineVoice) && void 0 !== Bf ? Bf : 'Joanna',
                                Engine: [
                                    'Amy',
                                    'Emma',
                                    'Brian',
                                    'Ivy',
                                    'Joanna',
                                    'Kendra',
                                    'Kimberly',
                                    'Salli',
                                    'Joey',
                                    'Justin',
                                    'Matthew'
                                ].includes(null !== (Cf = hf.speechEngineVoice) && void 0 !== Cf ? Cf : 'Joanna') ? 'neural' : 'standard',
                                Text: Qc,
                                TextType: 'ssml'
                            };
                        Df.synthesizeSpeech(Ef, (Qc, hf) => {
                            if (Qc);
                            else if (null == hf ? void 0 : hf.AudioStream) {
                                const Ff = new Uint8Array(hf.AudioStream),
                                    Gf = new Blob([Ff.buffer], {
                                        type: 'audio/mpeg'
                                    }),
                                    Hf = URL.createObjectURL(Gf);
                                new Audio(Hf).play().catch(Ff => {});
                            }
                        });
                    }
                } else
                    hf.speechEngine;
        else {
            const Df = new SpeechSynthesisUtterance(Qc);
            window.speechSynthesis.speak(Df);
        }
    }

    function Af(Qc) {
        if (Qc && (Qc.classList.remove('ML__highlight'), Qc.children))
            for (const Bf of Qc.children)
                Af(Bf);
    }

    function Bf(Qc, hf) {
        var Cf;
        Qc && (hf && (null === (Cf = Qc.dataset) || void 0 === Cf ? void 0 : Cf.atomId) !== hf ? (Qc.classList.remove('ML__highlight'), Qc.children && Qc.children.length > 0 && [...Qc.children].forEach(Qc => {
            Qc instanceof HTMLElement && Bf(Qc, hf);
        })) : (Qc.classList.add('ML__highlight'), Qc.children && Qc.children.length > 0 && [...Qc.children].forEach(Qc => {
            Qc instanceof HTMLElement && Bf(Qc);
        })));
    }

    function Cf(Qc, hf, F) {
        var Df;
        if (!Xc())
            return;
        if (null != F || (F = Yh().config), 'amazon' !== F.speechEngine)
            return void(F.speakHook && F.speakHook(hf, F));
        if (!globalThis.AWS)
            return;
        const Ef = new globalThis.AWS.Polly({
                apiVersion: '2016-06-10'
            }),
            Ff = {
                OutputFormat: 'json',
                VoiceId: null !== (Df = F.speechEngineVoice) && void 0 !== Df ? Df : 'Joanna',
                Engine: 'standard',
                Text: hf,
                TextType: 'ssml',
                SpeechMarkTypes: ['ssml']
            };
        Yh().readAloudElement = Qc, Ef.synthesizeSpeech(Ff, (Qc, hf) => {
            if (Qc)
                return;
            if (!(null == hf ? void 0 : hf.AudioStream))
                return;
            const Gf = new TextDecoder('utf-8').decode(new Uint8Array(hf.AudioStream));
            Yh().readAloudMarks = Gf.split('\n').map(Qc => Qc ? JSON.parse(Qc) : {}), Yh().readAloudTokens = [];
            for (const Hf of Yh().readAloudMarks)
                Hf.value && Yh().readAloudTokens.push(Hf.value);
            Yh().readAloudCurrentMark = '', Ff.OutputFormat = 'mp3', Ff.SpeechMarkTypes = [], Ef.synthesizeSpeech(Ff, (Hf, hf) => {
                if (Hf)
                    return;
                if (!(null == hf ? void 0 : hf.AudioStream))
                    return;
                const If = new Uint8Array(hf.AudioStream),
                    Jf = new Blob([If.buffer], {
                        type: 'audio/mpeg'
                    }),
                    Kf = URL.createObjectURL(Jf),
                    Lf = Yh();
                Lf.readAloudAudio ? Lf.readAloudAudio.pause() : (Lf.readAloudAudio = new Audio(), Lf.readAloudAudio.addEventListener('ended', () => {
                    const Mf = Lf.readAloudMathField;
                    Lf.readAloudStatus = 'ended', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                        bubbles: !0,
                        composed: !0
                    })), Mf ? (tf(Mf), Lf.readAloudElement = null, Lf.readAloudMathField = null, Lf.readAloudTokens = [], Lf.readAloudMarks = [], Lf.readAloudCurrentMark = '') : Af(Lf.readAloudElement);
                }), Lf.readAloudAudio.addEventListener('timeupdate', () => {
                    let Mf = '';
                    const Nf = 1000 * Lf.readAloudAudio.currentTime + 100;
                    for (const Of of Lf.readAloudMarks)
                        Of.time < Nf && (Mf = Of.value);
                    Lf.readAloudCurrentMark !== Mf && (Lf.readAloudCurrentToken = Mf, Mf && Mf === Lf.readAloudFinalToken ? Lf.readAloudAudio.pause() : (Lf.readAloudCurrentMark = Mf, Bf(Lf.readAloudElement, Lf.readAloudCurrentMark)));
                })), Lf.readAloudAudio.src = Kf, Lf.readAloudStatus = 'playing', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                    bubbles: !0,
                    composed: !0
                })), Lf.readAloudAudio.play();
            });
        });
    }

    function Df(Qc, hf) {
        var Ef, Ff, Gf;
        const Hf = Ef(Qc, Object.keys(Qc));
        for (const If of Object.keys(hf))
            switch (If) {
                case 'scriptDepth':
                    if (Td(hf.scriptDepth))
                        Hf.scriptDepth = [
                            hf.scriptDepth[0],
                            hf.scriptDepth[1]
                        ];
                    else {
                        if ('number' != typeof hf.scriptDepth)
                            throw new TypeError('Unexpected value for scriptDepth');
                        Hf.scriptDepth = [
                            hf.scriptDepth,
                            hf.scriptDepth
                        ];
                    }
                    break;
                case 'locale':
                    'auto' === hf.locale ? Hf.locale = Xc() ? navigator.language.slice(0, 5) : 'en' : Hf.locale = hf.locale, i.locale = Hf.locale;
                    break;
                case 'strings':
                    i.merge(hf.strings), Hf.strings = i.strings;
                    break;
                case 'virtualKeyboardLayout':
                    Hf.virtualKeyboardLayout = hf.virtualKeyboardLayout;
                    break;
                case 'virtualKeyboardMode':
                    const Jf = hf.virtualKeyboardMode.toLowerCase();
                    Hf.virtualKeyboardMode = 'auto' === Jf ? e() ? 'onfocus' : 'off' : Jf;
                    break;
                case 'customVirtualKeyboardLayers':
                    Hf.customVirtualKeyboardLayers = {
                        ...Hf.customVirtualKeyboardLayers,
                        ...hf.customVirtualKeyboardLayers
                    };
                    break;
                case 'customVirtualKeyboards':
                    Hf.customVirtualKeyboards = {
                        ...Hf.customVirtualKeyboards,
                        ...hf.customVirtualKeyboards
                    };
                    break;
                case 'letterShapeStyle':
                    'auto' === hf.letterShapeStyle ? i.locale.startsWith('fr') ? Hf.letterShapeStyle = 'french' : Hf.letterShapeStyle = 'tex' : Hf.letterShapeStyle = hf.letterShapeStyle;
                    break;
                case 'plonkSound':
                    void 0 !== hf.plonkSound && (Hf.plonkSound = hf.plonkSound);
                    break;
                case 'keypressSound':
                    null === hf.keypressSound ? Hf.keypressSound = {
                        default: null,
                        delete: null,
                        return: null,
                        spacebar: null
                    } : 'string' == typeof hf.keypressSound ? Hf.keypressSound = {
                        delete: hf.keypressSound,
                        return: hf.keypressSound,
                        spacebar: hf.keypressSound,
                        default: hf.keypressSound
                    } : 'object' == typeof hf.keypressSound && 'default' in hf.keypressSound && (Hf.keypressSound = {
                        ...hf.keypressSound
                    }, Hf.keypressSound.delete = null !== (Ef = Hf.keypressSound.delete) && void 0 !== Ef ? Ef : hf.keypressSound.default, Hf.keypressSound.return = null !== (Ff = Hf.keypressSound.return) && void 0 !== Ff ? Ff : hf.keypressSound.default, Hf.keypressSound.spacebar = null !== (Gf = Hf.keypressSound.spacebar) && void 0 !== Gf ? Gf : hf.keypressSound.default);
                    break;
                case 'computeEngine':
                    Hf.computeEngine = hf.computeEngine;
                    break;
                case 'virtualKeyboardContainer':
                    Hf.virtualKeyboardContainer = hf.virtualKeyboardContainer;
                    break;
                case 'macros':
                    Hf.macros = V(hf.macros);
                    break;
                default:
                    Td(hf[If]) ? Hf[If] = [...hf[If]] : 'object' == typeof hf[If] ? Hf[If] = {
                        ...hf[If]
                    } : Hf[If] = hf[If];
            }
        return Hf;
    }

    function Ef(Qc, hf) {
        let Ff;
        Ff = 'string' == typeof hf ? [hf] : void 0 === hf ? Object.keys(Qc) : hf;
        const Gf = {};
        for (const Hf of Ff)
            null === Qc[Hf] ? Gf[Hf] = null : Td(Qc[Hf]) ? Gf[Hf] = [...Qc[Hf]] : 'object' != typeof Qc[Hf] || Qc[Hf] instanceof Element || 'computeEngine' === Hf ? Gf[Hf] = Qc[Hf] : Gf[Hf] = {
                ...Qc[Hf]
            };
        return 'string' == typeof Hf ? Gf[Hf] : Gf;
    }
    wf({
        performWithFeedback: (Qc, hf) => function(Qc, hf) {
            Qc.focus(), Qc.options.keypressVibration && f() && navigator.vibrate(3), 'moveToNextPlaceholder' === (hf = hf.replace(/-\w/g, Qc => Qc[1].toUpperCase())) || 'moveToPreviousPlaceholder' === hf || 'complete' === hf ? Qc.playSound('return') : 'deleteBackward' === hf || 'deleteForward' === hf || 'deletePreviousWord' === hf || 'deleteNextWord' === hf || 'deleteToGroupStart' === hf || 'deleteToGroupEnd' === hf || 'deleteToMathFieldStart' === hf || 'deleteToMathFieldEnd' === hf ? Qc.playSound('delete') : Qc.playSound('keypress');
            const Ff = Qc.executeCommand(hf);
            return Qc.scrollIntoView(), Ff;
        }(Qc, hf)
    }), wf({
        complete: gf,
        nextSuggestion: function(Qc) {
            return ef(Qc, {
                atIndex: Qc.suggestionIndex + 1
            }), !1;
        },
        previousSuggestion: function(Qc) {
            return ef(Qc, {
                atIndex: Qc.suggestionIndex - 1
            }), !1;
        }
    }, {
        target: 'mathfield',
        category: 'autocomplete'
    }), wf({
        speak: (Qc, hf, F) => function(Qc, hf, F) {
            var Ff, Gf;
            F = null != F ? F : {
                withHighlighting: !1
            };
            const {
                model: Hf
            } = If, Jf = function(If) {
                let Kf = null;
                switch (If) {
                    case 'all':
                    default:
                        Kf = Hf.root;
                        break;
                    case 'selection':
                        Kf = Hf.getAtoms(Hf.selection);
                        break;
                    case 'left':
                        Kf = Hf.getAtoms(Hf.offsetOf(Hf.at(Hf.position).leftSibling), Hf.position);
                        break;
                    case 'right':
                        Kf = Hf.getAtoms(Hf.position, Hf.offsetOf(Hf.at(Hf.position).rightSibling));
                        break;
                    case 'group':
                        Kf = Hf.getAtoms(Hf.getSiblingsRange(Hf.position));
                        break;
                    case 'parent': {
                        const {
                            parent: Lf
                        } = Hf.at(Hf.position);
                        Kf = Lf && 'root' !== Lf.type ? Lf : Hf.root;
                        break;
                    }
                }
                return Kf;
            }(hf);
            if (null === Jf)
                return null === (Gf = (Ff = If.options).speakHook) || void 0 === Gf || Gf.call(Ff, function(If) {
                    let Kf = '';
                    switch (If) {
                        case 'all':
                        case 'group':
                        default:
                            break;
                        case 'selection':
                            Kf = 'no selection';
                            break;
                        case 'left':
                            Kf = 'at start';
                            break;
                        case 'right':
                            Kf = 'at end';
                            break;
                        case 'parent':
                            Kf = 'no parent';
                    }
                    return Kf;
                }(hf), If.options), !1;
            const Kf = {
                ...If.options
            };
            (F.withHighlighting || 'amazon' === Kf.speechEngine) && (Kf.textToSpeechMarkup = globalThis.sre && 'sre' === Kf.textToSpeechRules ? 'ssml_step' : 'ssml'), Kf.textToSpeechMarkup || /firefox/i.test(navigator.userAgent) || (Kf.textToSpeechMarkup = 'ssml');
            const Lf = ke(Jf, Kf);
            return Xc() && F.withHighlighting ? (Yh().readAloudMathField = If, tf(If, {
                forHighlighting: !0
            }), If.options.readAloudHook && If.options.readAloudHook(If.field, Lf, If.options)) : If.options.speakHook && If.options.speakHook(Lf, Kf), !1;
        }(Qc, hf, F)
    }, {
        target: 'mathfield',
        category: 'speech'
    });
    const Ff = '<span style="width: 21px; margin-top: 4px;"><svg style="width: 21px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>';

    function Gf() {
        var Hf, If, Jf;
        return {
            readOnly: !1,
            createHTML: Hf => Hf,
            fontsDirectory: './fonts',
            soundsDirectory: './sounds',
            computeEngine: void 0,
            defaultMode: 'math',
            macros: T(),
            registers: {},
            colorMap: q,
            backgroundColorMap: r,
            horizontalSpacingScale: 1,
            letterShapeStyle: i.locale.startsWith('fr') ? 'french' : 'tex',
            smartMode: !1,
            smartFence: !0,
            smartSuperscript: !0,
            scriptDepth: [
                1 / 0,
                1 / 0
            ],
            removeExtraneousParentheses: !0,
            mathModeSpace: '',
            decimalSeparator: '.',
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            enablePopover: !0,
            locale: i.locale,
            strings: i.strings,
            keybindings: Qe,
            inlineShortcuts: Kd,
            inlineShortcutTimeout: 0,
            virtualKeyboardToggleGlyph: Ff,
            virtualKeyboardMode: 'auto',
            virtualKeyboards: 'all',
            virtualKeyboardLayout: 'auto',
            customVirtualKeyboardLayers: {},
            customVirtualKeyboards: {},
            virtualKeyboardTheme: Xc() && /android|cros/i.test(navigator.userAgent) ? 'material' : 'apple',
            keypressVibration: !0,
            keypressSound: null,
            plonkSound: null,
            virtualKeyboardToolbar: 'default',
            virtualKeyboardContainer: null !== (If = null === (Hf = globalThis.document) || void 0 === Hf ? void 0 : Hf.body) && void 0 !== If ? If : null,
            useSharedVirtualKeyboard: !1,
            sharedVirtualKeyboardTargetOrigin: null === (Jf = globalThis.window) || void 0 === Jf ? void 0 : Jf.origin,
            originValidator: 'same-origin',
            textToSpeechRules: 'mathlive',
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {},
            speechEngine: 'local',
            speechEngineVoice: 'Joanna',
            speechEngineRate: '100%',
            speakHook: zf,
            readAloudHook: Cf,
            onInlineShortcut: () => '',
            onExport: Rd,
            value: ''
        };
    }

    function Hf(Qc) {
        return 'inline-math' === Qc.defaultMode ? 'math' : Qc.defaultMode;
    }
    var If, Jf, Kf = '@keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}.ML__caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:2px;border-right:2px solid var(--caret-color,var(--ML__caret-color));content:"";left:-1px;margin-right:-2px;position:relative}.ML__text-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:1px;border-right:1px solid var(--caret-color,var(--ML__caret-color));content:"";left:0;margin-right:-1px;position:relative}.ML__latex-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;color:var(--caret-color,var(--ML__caret-color));content:"_";margin-right:calc(-1ex - 2px);position:relative}.ML__container{--ML__selection-background-color:hsl(var(--hue,212),97%,85%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.1);--ML__contains-highlight-background-color:hsl(var(--hue,212),40%,95%);--ML__selection-color:currentColor;--ML__caret-color:hsl(var(--hue,212),40%,49%);--ML__smart-fence-color:currentColor;--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),40%,49%);align-items:flex-end;display:flex;flex-flow:row;isolation:isolate;justify-content:space-between;min-height:39px;touch-action:none;width:100%}@media (prefers-color-scheme:dark){.ML__container{--ML__selection-background-color:hsl(var(--hue,212),25%,45%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.2);--ML__contains-highlight-background-color:hsl(var(--hue,212),5%,34%);--ML__caret-color:hsl(var(--hue,212),60%,69%);--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),60%,69%)}}.ML__content{align-items:center;align-self:center;display:flex;overflow:hidden;padding:2px 0 2px 1px;position:relative;width:100%}.ML__virtual-keyboard-toggle{box-sizing:border-box;display:none}.ML__virtual-keyboard-toggle>span{align-items:center;align-self:center;display:flex}.ML__virtual-keyboard-toggle.is-visible{fill:currentColor;align-items:center;align-self:center;background:transparent;border:1px solid transparent;border-radius:8px;color:var(--primary,hsl(var(--hue,212),40%,50%));cursor:pointer;display:flex;flex-direction:column;flex-shrink:0;height:34px;justify-content:center;margin-right:4px;padding:0;transition:background .2s cubic-bezier(.64,.09,.08,1);width:34px}.ML__virtual-keyboard-toggle.is-visible:hover{fill:currentColor;background:hsla(0,0%,70%,.5);border-radius:8px;color:#333}.ML__textarea__textarea{clip:rect(0 0 0 0);border:none;display:inline-block;font-family:KaTeX_Main;font-size:1em;height:1px;outline:none;position:absolute;resize:none;transform:scale(0);width:1px}.ML__focused .ML__text{background:var(--highlight-text,var(--ML__text-highlight-background-color))}.ML__smart-fence__close{color:var(--smart-fence-color,var(--ML__smart-fence-color));opacity:var(--smart-fence-opacity,.5)}.ML__focused .ML__selection{background:var(--selection-background-color-focused,var(--selection-background-color,var(--ML__selection-background-color)))!important}.ML__focused .ML__selected,.ML__focused .ML__selected .ML__contains-caret,.ML__focused .ML__selected .ML__placeholder,.ML__focused .ML__selected .ML__smart-fence__close{color:var(--selection-color-focused,var(--selection-color,var(--ML__selection-color)))!important}.ML__selection{background:var(--selection-background-color,var(--ML__selection-background-color))!important;box-sizing:border-box}.ML__selected,.ML__selected .ML__contains-caret,.ML__selected .ML__placeholder,.ML__selected .ML__smart-fence__close{color:var(--selection-color,var(--ML__selection-color));opacity:1}.ML__contains-caret .ML__sqrt-line,.ML__contains-caret .ML__sqrt-sign,.ML__contains-caret.ML__close,.ML__contains-caret.ML__open,.ML__contains-caret>.ML__close,.ML__contains-caret>.ML__open{color:var(--caret-color,var(--ML__caret-color))}.ML__contains-highlight{background:var(--contains-highlight-backround-color,var(--ML__contains-highlight));box-sizing:border-box}.ML__latex{color:var(--latex-color,var(--ML__latex-color));font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace;font-weight:400}.ML__suggestion{opacity:.5}.ML__virtual-keyboard-toggle.is-visible.is-pressed:hover{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__virtual-keyboard-toggle:focus{border:2px solid var(--primary,hsl(var(--hue,212),40%,50%));border-radius:8px;outline:none}.ML__virtual-keyboard-toggle.is-active,.ML__virtual-keyboard-toggle.is-active:hover,.ML__virtual-keyboard-toggle.is-pressed{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__tooltip-container{position:relative;transform:scale(0)}.ML__tooltip-container .ML__tooltip-content{background:#616161;border-radius:8px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;display:inline-table;max-width:400px;opacity:0;padding:12px;position:fixed;transition:opacity .15s cubic-bezier(.4,0,1,1);visibility:hidden;width:max-content;z-index:2}.ML__tooltip-container .ML__tooltip-content .ML__text{white-space:normal}.ML__tooltip-container .ML__tooltip-content .ML__base{display:contents}.ML__tooltip-container:hover .ML__tooltip-content{font-size:.75em;opacity:1;transform:scale(1) translateY(3em);visibility:visible}[data-ML__tooltip]{position:relative}[data-ML__tooltip][data-placement=top]:after{bottom:100%;top:inherit}[data-ML__tooltip]:after{background:#616161;border-radius:2px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-ML__tooltip);display:none;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;right:110%;text-align:center;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1);width:max-content;z-index:2}@media only screen and (max-width:767px){[data-ML__tooltip]:after{font-size:16px;padding:8px 16px}}:not(.tracking) [data-ML__tooltip]:hover{position:relative}:not(.tracking) [data-ML__tooltip]:hover:after{display:inline-table;opacity:1;transform:scale(1);visibility:visible}[data-ML__tooltip][data-delay]:after{transition-delay:0s}[data-ML__tooltip][data-delay]:hover:after{transition-delay:1s}';
    let Lf = null;

    function Mf(Qc) {
        if (/^(?:[a-z+]+:)?\/\//i.test(Qc))
            return new URL(Qc).href;
        if (null === Lf)
            try {
                const Nf = new XMLHttpRequest();
                Nf.open('HEAD', Nf, !1), Nf.send(null), 200 === Nf.status && (Lf = Nf.responseURL);
            } catch (Qc) {}
        return Lf ? new URL(Qc, Lf).href : '';
    }
    const Nf = (null === (Jf = null === (If = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === If ? void 0 : If.currentScript) || void 0 === Jf ? void 0 : Jf.src) || function() {
        const Of = String(new Error().stack).replace(/^Error.*\n/, '').split('\n');
        if (0 === Of.length)
            return '';
        let Pf = Of[1],
            Qf = Pf.match(/http.*\.ts[\?:]/);
        return Qf && (Pf = Of[2]), Qf = Pf.match(/(https?:.*):[0-9]+:[0-9]+/), Qf || (Qf = Pf.match(/at (.*(\.ts))[\?:]/), Qf || (Qf = Pf.match(/at (.*(\.mjs|\.js))[\?:]/))), Qf ? Qf[1] : '';
    }();
    async function Of(Qc) {
        var Pf;
        if (Xc() && !document.body.classList.contains('ML__fonts-loading') && (null === (Pf = getComputedStyle(document.documentElement).getPropertyValue('--ML__static-fonts')) || void 0 === Pf || !Pf) && (document.body.classList.remove('ML__fonts-did-not-load'), 'fonts' in document)) {
            const Qf = [
                    'KaTeX_Main',
                    'KaTeX_Math',
                    'KaTeX_AMS',
                    'KaTeX_Caligraphic',
                    'KaTeX_Fraktur',
                    'KaTeX_SansSerif',
                    'KaTeX_Script',
                    'KaTeX_Typewriter',
                    'KaTeX_Size1',
                    'KaTeX_Size2',
                    'KaTeX_Size3',
                    'KaTeX_Size4'
                ],
                Rf = Array.from(document.fonts).map(Qc => Qc.family);
            if (Qf.every(Qc => Rf.includes(Qc)))
                return;
            const Sf = Mf(null != Qc ? Qc : './fonts');
            if (!Sf)
                return;
            document.body.classList.add('ML__fonts-loading');
            const Tf = [
                ['KaTeX_Main-Regular'],
                [
                    'KaTeX_Main-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                ['KaTeX_AMS-Regular'],
                ['KaTeX_Caligraphic-Regular'],
                [
                    'KaTeX_Caligraphic-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                ['KaTeX_Fraktur-Regular'],
                [
                    'KaTeX_Fraktur-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Regular',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_SansSerif-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Italic',
                    {
                        style: 'italic'
                    }
                ],
                ['KaTeX_Script-Regular'],
                ['KaTeX_Typewriter-Regular'],
                ['KaTeX_Size1-Regular'],
                ['KaTeX_Size2-Regular'],
                ['KaTeX_Size3-Regular'],
                ['KaTeX_Size4-Regular']
            ].map(Qc => function(Qc, Qf, Uf = {}) {
                return new FontFace(Qc, `url(${ Qf }.woff2) format('woff2')`, Uf);
            }(Qc[0].replace(/-[a-zA-Z]+$/, ''), Sf + '/' + Qc[0], Qc[1]));
            try {
                (await Promise.all(Tf.map(Qc => {
                    try {
                        return Qc.load();
                    } catch {}
                }))).forEach(Qc => document.fonts.add(Qc));
            } catch (Qc) {
                document.body.classList.add('ML__fonts-did-not-load');
            }
            document.body.classList.remove('ML__fonts-loading');
        }
    }

    function Pf(Qc) {
        return 'number' == typeof Qc && !Number.isNaN(Qc);
    }

    function Qf(Qc) {
        return Array.isArray(Qc) && 2 === Qc.length;
    }

    function Rf(Qc) {
        return null != Qc && 'object' == typeof Qc && 'ranges' in Qc && Array.isArray(Qc.ranges);
    }
    const Sf = {
            '\\ne': '\u2260',
            '\\neq': '\u2260',
            '\u2212': '-',
            '-': '-',
            '\\alpha': 'alpha',
            '\\beta': 'beta',
            '\\gamma': 'gamma',
            '\\delta': 'delta',
            '\\epsilon': 'epsilon',
            '\\varepsilon': 'varepsilon',
            '\\zeta': 'zeta',
            '\\eta': 'eta',
            '\\theta': 'theta',
            '\\vartheta': 'vartheta',
            '\\iota': 'iota',
            '\\kappa': 'kappa',
            '\\lambda': 'lambda',
            '\\mu': 'mu',
            '\\nu': 'nu',
            '\\xi': 'xi',
            '\\pi': 'pi',
            '\\rho': 'rho',
            '\\sigma': 'sigma',
            '\\tau': 'tau',
            '\\upsilon': 'upsilon',
            '\\phi': 'phi',
            '\\varphi': 'varphi',
            '\\chi': 'chi',
            '\\psi': 'psi',
            '\\omega': 'omega',
            '\\Gamma': 'Gamma',
            '\\Delta': 'Delta',
            '\\Theta': 'Theta',
            '\\Lambda': 'Lambda',
            '\\Xi': 'Xi',
            '\\Pi': 'Pi',
            '\\Sigma': 'Sigma',
            '\\Phi': 'Phi',
            '\\Psi': 'Psi',
            '\\Omega': 'Omega',
            '\\exponentialE': 'e',
            '\\imaginaryI': 'i',
            '\\imaginaryJ': 'j',
            '\\!': ' ',
            '\\,': ' ',
            '\\:': ' ',
            '\\;': ' ',
            '\\enskip': ' ',
            '\\enspace': ' ',
            '\\qquad': ' ',
            '\\quad': ' '
        },
        Tf = {
            '\\pm': '+-',
            '\\times': 'xx',
            '\\colon': ':',
            '\\vert': '|',
            '\\Vert': '||',
            '\\mid': '|',
            '\\lbrace': '{',
            '\\rbrace': '}',
            '\\lparen': '(',
            '\\rparen': ')',
            '\\langle': '(:',
            '\\rangle': ':)'
        };

    function Uf(Qc) {
        var Vf, Wf, Xf, Yf, Zf, $f, _f, ag, bg, cg, dg, eg, fg;
        if (!Qc)
            return '';
        if (Td(Qc)) {
            if (0 === Qc.length)
                return '';
            if ('first' === Qc[0].type && (Qc = Qc.slice(1)), 0 === Qc.length)
                return '';
            let gg = '';
            if ('latex' === Qc[0].mode)
                for (const hg of Qc)
                    gg += Uf(hg);
            else if ('text' === Qc[0].mode) {
                let ig = 0;
                for (gg = '"';
                    'text' === (null === (hg = Qc[ig]) || void 0 === hg ? void 0 : hg.mode);)
                    gg += Qc[ig].body ? Uf(Qc[ig].body) : Qc[ig].value, ig++;
                gg += '"' + Uf(Qc.slice(ig));
            } else if ('math' === Qc[0].mode) {
                let jg = 0;
                for (; Qc[jg] && 'math' === Qc[jg].mode;)
                    gg += Uf(Qc[jg]), jg++;
                gg += Uf(Qc.slice(jg));
            }
            return gg.trim();
        }
        if ('text' === Qc.mode)
            return '"' + Qc.value + '"';
        let gg = '';
        const {
            command: hg
        } = ig;
        let jg;
        switch (ig.type) {
            case 'first':
                return '';
            case 'group':
            case 'root':
                gg = null !== (Wf = Sf[hg]) && void 0 !== Wf ? Wf : Uf(ig.body);
                break;
            case 'genfrac': {
                const kg = lg;
                (kg.leftDelim || kg.rightDelim) && (gg += '.' !== kg.leftDelim && kg.leftDelim ? kg.leftDelim : '{:'), kg.hasBarLine ? (gg += '(', gg += Uf(kg.above), gg += ')/(', gg += Uf(kg.below), gg += ')') : (gg += '(' + Uf(kg.above) + '),', gg += '(' + Uf(kg.below) + ')'), (kg.leftDelim || kg.rightDelim) && (gg += '.' !== kg.rightDelim && kg.rightDelim ? kg.rightDelim : '{:');
            }
            break;
            case 'surd':
                gg += ig.hasEmptyBranch('above') ? 'sqrt(' + Uf(ig.body) + ')' : 'root(' + Uf(ig.above) + ')(' + Uf(ig.body) + ')';
                break;
            case 'latex':
                gg = ig.value;
                break;
            case 'leftright': {
                const kg = lg;
                gg += '.' !== kg.leftDelim && kg.leftDelim ? kg.leftDelim : '{:', gg += Uf(kg.body), gg += '.' !== kg.rightDelim && kg.rightDelim ? kg.rightDelim : ':}';
            }
            break;
            case 'sizeddelim':
            case 'delim':
            case 'overlap':
            case 'overunder':
            case 'box':
                break;
            case 'mord':
                gg = null !== (Yf = null !== (Xf = Sf[hg]) && void 0 !== Xf ? Xf : hg) && void 0 !== Yf ? Yf : 'string' == typeof ig.value ? ig.value : '', gg.startsWith('\\') && (gg += ' '), jg = hg ? hg.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null, jg ? gg = String.fromCodePoint(Number.parseInt('0x' + jg[1])) : gg.length > 0 && gg.startsWith('\\') && (gg = 'string' == typeof ig.value ? ig.value.charAt(0) : ig.command);
                break;
            case 'mbin':
            case 'mrel':
            case 'minner':
                gg = null !== ($f = null !== (Zf = Sf[hg]) && void 0 !== Zf ? Zf : Tf[hg]) && void 0 !== $f ? $f : ig.value;
                break;
            case 'mopen':
            case 'mclose':
                gg += ig.value;
                break;
            case 'mpunct':
                gg = null !== (_f = Tf[hg]) && void 0 !== _f ? _f : hg;
                break;
            case 'mop':
                '\u200B' !== ig.value && (gg = '', gg += '\\operatorname' === hg ? Uf(ig.body) : null !== (ag = ig.value) && void 0 !== ag ? ag : hg, gg += ' ');
                break;
            case 'array':
                const kg = ig.array,
                    lg = ig.environmentName,
                    mg = null !== (bg = {
                        bmatrix: [
                            '[',
                            ']'
                        ],
                        'bmatrix*': [
                            '[',
                            ']'
                        ]
                    } [lg]) && void 0 !== bg ? bg : [
                        '(',
                        ')'
                    ],
                    ng = [];
                for (const og of kg) {
                    const pg = [];
                    for (const qg of og)
                        pg.push(mg[0] + Uf(qg) + mg[1]);
                    ng.push(pg.join(','));
                }
                const pg = null !== (cg = {
                    bmatrix: [
                        '[',
                        ']'
                    ],
                    'bmatrix*': [
                        '[',
                        ']'
                    ],
                    cases: [
                        '{',
                        ':}'
                    ]
                } [lg]) && void 0 !== cg ? cg : [
                    '(',
                    ')'
                ];
                gg = pg[0] + ng.join(',') + pg[1];
                break;
            case 'spacing':
                gg = null !== (dg = Sf[hg]) && void 0 !== dg ? dg : ' ';
                break;
            case 'enclose':
                gg = '(' + Uf(og.body) + ')';
                break;
            case 'space':
                gg = ' ';
                break;
            case 'msubsup':
                gg = '';
                break;
            case 'macro':
                gg = null !== (fg = null !== (eg = Sf[hg]) && void 0 !== eg ? eg : Tf[hg]) && void 0 !== fg ? fg : Uf(og.body);
        }
        if (!og.hasEmptyBranch('subscript')) {
            gg += '_';
            const qg = Uf(og.subscript);
            gg += qg.length > 1 ? '(' + qg + ')' : qg;
        }
        if (!og.hasEmptyBranch('superscript')) {
            gg += '^';
            const qg = Uf(og.superscript);
            gg += qg.length > 1 ? '(' + qg + ')' : qg;
        }
        return gg;
    }

    function Vf(Qc) {
        let Wf;
        if ('body' === Qc.treeBranch)
            Wf = {
                enclose: 'cross out',
                leftright: 'delimiter',
                surd: 'square root',
                root: 'math field',
                mop: 'operator'
            } [Qc.type];
        else if ('genfrac' === Qc.parent.type) {
            if ('above' === Qc.treeBranch)
                return 'numerator';
            if ('below' === Qc.treeBranch)
                return 'denominator';
        } else
            'surd' === Qc.parent.type ? 'above' === Qc.treeBranch && (Wf = 'index') : 'superscript' === Qc.treeBranch ? Wf = 'superscript' : 'subscript' === Qc.treeBranch && (Wf = 'subscript');
        return null != Wf ? Wf : 'parent';
    }
    class Wf {
        get atoms() {
            return this.root.children;
        }
        get selection() {
            return this._selection;
        }
        set selection(Qc) {
            this.setSelection(Qc);
        }
        setSelection(Qc, hf) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Xf = this.normalizeSelection(Qc, hf);
                if (void 0 === Xf)
                    throw new TypeError('Invalid selection');
                if (1 === Xf.ranges.length && Xf.ranges[0][0] === Xf.ranges[0][1]) {
                    const Yf = Xf.ranges[0][0];
                    this._position = Yf, this._anchor = Yf, this._selection = Xf;
                } else {
                    const Zf = Id(Xf);
                    'backward' === Xf.direction ? [this._position, this._anchor] = Zf : [this._anchor, this._position] = Zf;
                    const $f = this.at(Zf[0] + 1),
                        _f = this.at(Zf[1]),
                        ag = kc.commonAncestor($f, _f);
                    'array' === (null == ag ? void 0 : ag.type) && $f.parent === ag && _f.parent, this._selection = {
                        ranges: [Zf],
                        direction: Xf.direction
                    };
                }
            });
        }
        setPositionHandlingPlaceholder(Qc) {
            var Xf, Yf, Zf;
            'placeholder' === (null === (Xf = this.at(Qc)) || void 0 === Xf ? void 0 : Xf.type) ? this.setSelection(Qc - 1, Qc): 'placeholder' === (null === (Zf = null === (Yf = this.at(Qc)) || void 0 === Yf ? void 0 : Yf.rightSibling) || void 0 === Zf ? void 0 : Zf.type) ? this.setSelection(Qc, Qc + 1) : this.position = Qc;
        }
        getState() {
            return {
                content: this.root.toJson(),
                selection: this.selection
            };
        }
        setState(Qc, hf) {
            var Xf;
            const Yf = this.suppressChangeNotifications;
            this.suppressChangeNotifications = null === (Xf = null == hf ? void 0 : hf.suppressChangeNotifications) || void 0 === Xf || Xf;
            let Zf = {};
            'undo' === (null == hf ? void 0 : hf.type) && (Zf = {
                inputType: 'historyUndo'
            }), 'redo' === (null == hf ? void 0 : hf.type) && (Zf = {
                inputType: 'historyRedo'
            }), $e(this, Zf) && (this.root = zd(Qc.content, this.mathfield), this.selection = Qc.selection, af(this, Zf)), this.suppressChangeNotifications = Yf;
        }
        get position() {
            return this._position;
        }
        set position(Qc) {
            this.setSelection(Qc, Qc);
        }
        get anchor() {
            return this._anchor;
        }
        get selectionIsCollapsed() {
            return this._anchor === this._position;
        }
        get selectionIsPlaceholder() {
            return 1 === Math.abs(this._anchor - this._position) && 'placeholder' === this.at(Math.max(this._anchor, this._position)).type;
        }
        collapseSelection(Xf = 'forward') {
            return this._anchor !== this._position && (this.position = 'backward' === Xf ? Math.min(this._anchor, this._position) : Math.max(this._anchor, this._position), !0);
        }
        get lastOffset() {
            return this.atoms.length - 1;
        }
        at(Xf) {
            return this.atoms[Xf];
        }
        offsetOf(Xf) {
            return this.atoms.indexOf(Xf);
        }
        getSiblingsRange(Xf) {
            const Yf = this.at(Xf),
                {
                    parent: Zf
                } = $f;
            if (!Zf)
                return [
                    0,
                    this.lastOffset
                ];
            const _f = $f.parent.branch($f.treeBranch);
            return [
                this.offsetOf(_f[0]),
                this.offsetOf(_f[_f.length - 1])
            ];
        }
        getBranchRange(Xf, hf) {
            const Yf = this.at(Xf).branch(hf);
            return [
                this.offsetOf(Yf[0]),
                this.offsetOf(Yf[Yf.length - 1])
            ];
        }
        getAtoms(Xf, hf, F) {
            var Yf, Zf;
            let $f, _f, ag = null != F ? F : {};
            if (Rf(Xf)) {
                if (ag = null !== (Yf = hf) && void 0 !== Yf ? Yf : {}, Xf.ranges.length > 1)
                    return Xf.ranges.reduce((Xf, hf) => [
                        ...Xf,
                        ...this.getAtoms(hf, ag)
                    ], []);
                Xf = Xf.ranges[0];
            }
            if (Pf(Xf)) {
                if ($f = Xf, !Pf(hf))
                    return [];
                _f = hf;
            } else
                [bg, cg] = Xf, ag = null !== (Zf = hf) && void 0 !== Zf ? Zf : {};
            if (!Number.isFinite(bg))
                return [];
            void 0 === ag.includeChildren && (ag.includeChildren = !1), $f < 0 && ($f = this.lastOffset - $f + 1), _f < 0 && (_f = this.lastOffset - _f + 1);
            const bg = Math.min($f, _f) + 1,
                cg = Math.max($f, _f);
            if (1 === bg && cg === this.lastOffset)
                return [this.root];
            let dg = [];
            for (let eg = fg; eg <= cg; eg++) {
                const gg = this.atoms[eg];
                Zf(this, gg, fg, cg) && dg.push(gg);
            }
            return ag.includeChildren || (dg = dg.filter(eg => {
                let gg = !1,
                    {
                        parent: hg
                    } = ig;
                for (; hg && !gg;)
                    gg = Zf(this, hg, fg, cg), hg = hg.parent;
                return !gg;
            })), dg;
        }
        getAllAtoms(Xf) {
            const Yf = [],
                Zf = this.lastOffset;
            for (let $f = _f; $f <= Zf; $f++)
                Yf.push(this.atoms[$f]);
            for (let ag = 0; ag < _f; ag++)
                Yf.push(this.atoms[ag]);
            return Yf;
        }
        extractAtoms(Xf) {
            let Yf = this.getAtoms(Xf);
            1 === Yf.length && 'root' === Yf[0].type && (Yf = Yf[0].children);
            for (const Zf of Yf)
                Zf.parent.removeChild(Zf);
            return Yf;
        }
        deleteAtoms(Xf) {
            this.extractAtoms(Xf), this.position = Xf[0];
        }
        atomToString(Xf, hf) {
            const Yf = null != hf ? hf : 'latex';
            if (Yf.startsWith('latex'))
                return Gb.serialize([Xf], {
                    expandMacro: 'latex-expanded' === Yf,
                    skipStyles: 'latex-unstyled' === Yf,
                    defaultMode: this.mathfield.options.defaultMode
                });
            if ('math-ml' === Yf)
                return ce(Xf, this.mathfield.options);
            if ('spoken' === Yf)
                return ke(Xf, this.mathfield.options);
            if ('spoken-text' === Yf) {
                const Zf = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = '';
                const $f = ke(Xf, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Zf, $f;
            }
            if ('spoken-ssml' === Yf || 'spoken-ssml-with-highlighting' === Yf) {
                const Zf = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = 'ssml';
                const $f = ke(Xf, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Zf, $f;
            }
            if ('math-json' === Yf) {
                if (!this.mathfield.computeEngine)
                    return '';
                try {
                    const Zf = this.mathfield.computeEngine.parse(kc.serialize(Xf, {
                        expandMacro: !1,
                        defaultMode: 'math'
                    }));
                    return JSON.stringify(Zf.json);
                } catch (Xf) {
                    return JSON.stringify([
                        'Error',
                        'Nothing',
                        `'${ Xf.toString() }'`
                    ]);
                }
            }
            return 'ascii-math' === Yf ? Uf(Xf) : '';
        }
        getValue(Xf, hf, F) {
            if (void 0 === Xf)
                return this.atomToString(this.root, 'latex');
            if ('string' == typeof Xf)
                return this.atomToString(this.root, Xf);
            let Yf, Zf;
            if (Pf(Xf) && Pf(hf) ? (Yf = [this.normalizeRange([
                    Xf,
                    hf
                ])], Zf = null != F ? F : 'latex') : Qf(Xf) ? (Yf = [this.normalizeRange(Xf)], Zf = hf) : Rf(Xf) ? (Yf = Xf.ranges, Zf = hf) : (Yf = [], Zf = 'latex'), Zf.startsWith('latex')) {
                const $f = {
                    expandMacro: 'latex-expanded' === Zf,
                    skipStyles: 'latex-unstyled' === Zf,
                    defaultMode: this.mathfield.options.defaultMode
                };
                return ec(Yf.map(hf => kc.serialize(this.getAtoms(hf), $f)));
            }
            return Yf.map(Xf => this.getAtoms(Xf).map(Xf => this.atomToString(Xf, Zf)).join('')).join('');
        }
        extendSelection(Xf) {
            let Yf = this._anchor;
            if ('forward' === Xf) {
                let Zf = this._position;
                do {
                    let $f = this.at(Zf + 1);
                    if (null == $f ? void 0 : $f.inCaptureSelection) {
                        for (; !$f.captureSelection;)
                            $f = $f.parent;
                        Zf = this.offsetOf(null == $f ? void 0 : $f.lastChild) + 1;
                    } else
                        Zf += 1;
                } while (Zf <= this.lastOffset && this.at(Zf).isFirstSibling);
                return Zf === Yf - 1 && 'first' === this.at(Yf).type && (Zf = Yf), this.extendSelectionTo(Yf, Zf);
            }
            let Zf = this._position - 1;
            if (Zf < 0)
                return !1;
            for (; Zf >= 0 && this.at(Zf).isLastSibling;) {
                let $f = this.at(Zf);
                if (null == $f ? void 0 : $f.inCaptureSelection) {
                    for (; !$f.captureSelection;)
                        $f = $f.parent;
                    Zf = this.offsetOf($f.firstChild) - 1;
                } else
                    Zf -= 1;
            }
            return Zf < 0 && (Zf = 0), Zf === Yf + 1 && 'first' === this.at(Zf).type && (Yf = Zf), this.extendSelectionTo(Yf, Zf);
        }
        extendSelectionTo(Xf, hf) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Yf = this.normalizeRange([
                    Xf,
                    hf
                ]);
                let [Zf, $f] = _f, {
                    parent: ag
                } = this.at($f);
                if (ag && ('genfrac' === ag.type || 'msubsup' === ag.type))
                    for (; ag !== this.root && $f(this, ag, [
                            Zf,
                            $f
                        ]);)
                        $f = this.offsetOf(ag), ag = ag.parent;
                for (ag = this.at(Zf).parent; ag !== this.root && $f(this, ag, [
                        Zf,
                        $f
                    ]);)
                    Zf = this.offsetOf(ag.leftSibling), ag = ag.parent;
                if (ag = this.at($f).parent, 'genfrac' === (null == ag ? void 0 : ag.type))
                    for (; ag !== this.root && $f(this, ag, [
                            Zf,
                            $f
                        ]);)
                        $f = this.offsetOf(ag), ag = ag.parent;
                this._position = this.normalizeOffset(hf), this._selection = {
                    ranges: [
                        [
                            Zf,
                            $f
                        ]
                    ],
                    direction: 'none'
                };
            });
        }
        setListeners(Xf) {
            this.listeners = Xf;
        }
        announce(Xf, hf, Yf = []) {
            var Zf, $f;
            null === ($f = null === (Zf = this.mathfield.host) || void 0 === Zf ? void 0 : Zf.dispatchEvent(new CustomEvent('announce', {
                detail: {
                    command: Xf,
                    previousPosition: hf,
                    atoms: Yf
                },
                cancelable: !0,
                bubbles: !0,
                composed: !0
            }))) || void 0 === $f || $f || function(Xf, hf, Yf, Zf) {
                let _f = '';
                'plonk' === hf ? (Xf.playSound('plonk'), Xf.flushInlineShortcutBuffer()) : 'delete' === hf ? _f = yf(Xf.options, 'deleted: ', Zf) : 'focus' === hf || hf.includes('move') ? _f = function(Xf, hf) {
                    if (Number.isNaN(hf))
                        return '';
                    const ag = Xf.at(hf);
                    if (!ag)
                        return '';
                    if (ag.treeDepth <= Xf.at(Xf.position).treeDepth)
                        return '';
                    let bg = '',
                        cg = ag.parent;
                    const dg = Xf.at(Xf.position).parent;
                    for (; cg !== Xf.root && cg !== dg;)
                        bg += `out of ${ Vf(cg) };`, cg = cg.parent;
                    return bg;
                }(Xf.model, Yf) + (Xf.model.selectionIsCollapsed ? '' : 'selected: ') + function(Xf, hf) {
                    if (!Xf.selectionIsCollapsed)
                        return yf(hf, '', Xf.getAtoms(Xf.selection));
                    let ag = '';
                    const bg = Xf.at(Xf.position),
                        cg = Vf(bg);
                    return bg.isFirstSibling && (ag = (cg ? 'start of ' + cg : 'unknown') + ': '), bg.isLastSibling ? bg.isFirstSibling || (ag += cg ? 'end of ' + cg : 'unknown') : ag += yf(hf, '', bg), ag;
                }(Xf.model, Xf.options) : 'replacement' === hf ? _f = yf(Xf.options, '', Xf.model.at(Xf.model.position)) : 'line' === hf ? (_f = yf(Xf.options, '', Xf.model.root), Xf.keyboardDelegate.setAriaLabel('after: ' + _f)) : _f = Zf ? yf(Xf.options, hf + ' ', Zf) : hf;
                const ag = Xf.ariaLiveText.textContent.includes('\xA0') ? ' \u202F ' : ' \xA0 ';
                Xf.ariaLiveText.textContent = _f + ag;
            }(this.mathfield, Xf, hf, Yf);
        }
        deferNotifications(Xf, hf) {
            const Zf = this._selection,
                $f = this._anchor,
                _f = this._position,
                ag = this.suppressChangeNotifications;
            this.suppressChangeNotifications = !0;
            const bg = this.root.changeCounter;
            hf();
            const cg = this.root.changeCounter !== bg,
                dg = $f !== this._anchor || _f !== this._position || 'different' === function(Xf, hf) {
                    if (Xf.direction === hf.direction) {
                        const eg = Xf.ranges.length;
                        if (hf.ranges.length === eg) {
                            let fg = 0;
                            for (; fg < eg && 'equal' === Hd(Xf.ranges[fg], hf.ranges[fg]);)
                                fg++;
                            return fg === eg ? 'equal' : 'different';
                        }
                    }
                    return 'different';
                }(this._selection, Zf);
            return this.suppressChangeNotifications = ag, Xf.content && cg && af(this, {
                data: Xf.data,
                inputType: Xf.type
            }), Xf.selection && dg && Ze(this), cg || dg;
        }
        normalizeOffset(Xf) {
            return Xf > 0 ? Xf = Math.min(Xf, this.lastOffset) : Xf < 0 && (Xf = this.lastOffset + Xf + 1), Xf;
        }
        normalizeRange(Xf) {
            let [Zf, $f] = _f;
            return Zf = this.normalizeOffset(Zf), $f = this.normalizeOffset($f), Zf < $f ? [
                Zf,
                $f
            ] : [
                $f,
                Zf
            ];
        }
        normalizeSelection(Xf, hf) {
            var Zf;
            let $f;
            if (Pf(Xf)) {
                const _f = this.normalizeOffset(Xf);
                if (Pf(hf)) {
                    const ag = this.normalizeOffset(hf);
                    $f = _f <= ag ? {
                        ranges: [
                            [
                                _f,
                                ag
                            ]
                        ],
                        direction: 'none'
                    } : {
                        ranges: [
                            [
                                ag,
                                _f
                            ]
                        ],
                        direction: 'backward'
                    };
                } else
                    $f = {
                        ranges: [
                            [
                                _f,
                                _f
                            ]
                        ],
                        direction: 'none'
                    };
            } else if (Qf(Xf)) {
                const ag = this.normalizeOffset(Xf[0]),
                    bg = this.normalizeOffset(Xf[1]);
                $f = ag <= bg ? {
                    ranges: [
                        [
                            ag,
                            bg
                        ]
                    ],
                    direction: 'none'
                } : {
                    ranges: [
                        [
                            bg,
                            ag
                        ]
                    ],
                    direction: 'backward'
                };
            } else
                Rf(Xf) && ($f = {
                    ranges: Xf.ranges.map(Xf => this.normalizeRange(Xf)),
                    direction: null !== (_f = Xf.direction) && void 0 !== _f ? _f : 'none'
                });
            return $f;
        }
        constructor(Xf, hf, Yf) {
            this.options = Xf, this._selection = {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'none'
            }, this._anchor = 0, this._position = 0, this.mathfield = Yf, this.suppressChangeNotifications = !1, this.root = new kc('root', Yf, {
                mode: Xf.mode
            }), this.root.body = [], this.setListeners(hf);
        }
    }

    function Zf(Xf, hf, Yf, Td) {
        const $f = Xf.offsetOf(hf);
        if ($f < Yf || $f > Td)
            return !1;
        if (!hf.hasChildren)
            return !0;
        const _f = Xf.offsetOf(hf.firstChild);
        if (_f >= Yf && _f <= Td) {
            const ag = Xf.offsetOf(hf.lastChild);
            if (ag >= Yf && ag <= Td)
                return !0;
        }
        return !1;
    }

    function $f(Xf, hf, Yf) {
        if (!(null == hf ? void 0 : hf.hasChildren))
            return !1;
        const [_f, ag] = bg, cg = Xf.offsetOf(hf.firstChild), dg = Xf.offsetOf(hf.lastChild);
        return cg >= _f && cg <= ag && dg >= cg && dg <= ag;
    }

    function _f(Xf, hf) {
        let ag = Xf.at(Xf.position);
        for (; ag && !(Array.isArray(ag.treeBranch) && ag.parent instanceof Wc);)
            ag = ag.parent;
        if (Array.isArray(null == ag ? void 0 : ag.treeBranch) && (null == ag ? void 0 : ag.parent) instanceof Wc) {
            const bg = ag.parent;
            let cg;
            switch (hf) {
                case 'after row':
                    bg.addRowAfter(ag.treeBranch[0]), cg = Xf.offsetOf(bg.getCell(ag.treeBranch[0] + 1, 0)[0]);
                    break;
                case 'after column':
                    if (bg.maxColumns <= bg.colCount)
                        return void Xf.announce('plonk');
                    bg.addColumnAfter(ag.treeBranch[1]), cg = Xf.offsetOf(bg.getCell(ag.treeBranch[0], ag.treeBranch[1] + 1)[0]);
                    break;
                case 'before row':
                    bg.addRowBefore(ag.treeBranch[0]), cg = Xf.offsetOf(bg.getCell(ag.treeBranch[0] - 1, 0)[0]);
                    break;
                case 'before column':
                    if (bg.maxColumns <= bg.colCount)
                        return void Xf.announce('plonk');
                    bg.addColumnBefore(ag.treeBranch[1]), cg = Xf.offsetOf(bg.getCell(ag.treeBranch[0], ag.treeBranch[1] - 1)[0]);
            }
            Xf.setSelection(cg, cg + 1);
        }
    }

    function ag(Xf) {
        return !!$e(Xf, {
            inputType: 'insertText'
        }) && (_f(Xf, 'after row'), af(Xf, {
            inputType: 'insertText'
        }), !0);
    }

    function bg(Xf) {
        return !!$e(Xf, {
            inputType: 'insertText'
        }) && (_f(Xf, 'after column'), af(Xf, {
            inputType: 'insertText'
        }), !0);
    }

    function cg(Xf, hf) {
        let dg = Xf.at(Xf.position);
        for (; dg && !(Array.isArray(dg.treeBranch) && dg.parent instanceof Wc);)
            dg = dg.parent;
        if (Array.isArray(null == dg ? void 0 : dg.treeBranch) && (null == dg ? void 0 : dg.parent) instanceof Wc) {
            const eg = dg.parent,
                fg = dg.treeBranch;
            let gg;
            switch (hf) {
                case 'row':
                    if (eg.rowCount > 1) {
                        eg.removeRow(fg[0]);
                        const hg = eg.getCell(Math.max(0, fg[0] - 1), fg[1]);
                        gg = Xf.offsetOf(hg[hg.length - 1]);
                    }
                    break;
                case 'column':
                    if (eg.colCount > eg.minColumns) {
                        eg.removeColumn(fg[1]);
                        const hg = eg.getCell(fg[0], Math.max(0, fg[1] - 1));
                        gg = Xf.offsetOf(hg[hg.length - 1]);
                    }
            }
            gg && Xf.setPositionHandlingPlaceholder(gg);
        }
    }

    function dg(Xf, hf, Yf, Td) {
        var eg, fg, gg, hg, ig, jg;
        const kg = Yf.parent;
        if (Yf instanceof Ic) {
            const lg = !Td && 'forward' === hf || 'body' === Td && 'backward' === hf;
            let mg = lg ? Xf.offsetOf(Yf.firstChild) : Xf.offsetOf(Yf.lastChild);
            return lg ? '?' !== Yf.rightDelim && '.' !== Yf.rightDelim ? (Yf.leftDelim = '.', Yf.isDirty = !0) : (kg.addChildrenAfter(Yf.removeBranch('body'), Yf), kg.removeChild(Yf), mg--) : '?' !== Yf.leftDelim && '.' !== Yf.leftDelim ? (Yf.rightDelim = '.', Yf.isDirty = !0) : (kg.addChildrenAfter(Yf.removeBranch('body'), Yf), kg.removeChild(Yf), mg--), Xf.position = mg, !0;
        }
        if ('surd' === Yf.type) {
            if ('forward' === hf && !Td || 'backward' === hf && 'body' === Td) {
                const lg = Yf.leftSibling;
                Yf.hasChildren && kg.addChildrenAfter(Yf.removeBranch('body'), Yf), kg.removeChild(Yf), Xf.position = Xf.offsetOf(lg);
            } else
                'forward' === hf && 'body' === Td ? Xf.position = Xf.offsetOf(Yf) : Td || 'backward' !== hf ? 'above' === Td && (Yf.hasEmptyBranch('above') && Yf.removeBranch('above'), Xf.position = 'backward' === hf ? Xf.offsetOf(Yf.leftSibling) : Xf.offsetOf(Yf.body[0])) : Yf.hasChildren ? Xf.position = Xf.offsetOf(Yf.lastChild) : (Xf.position = Math.max(0, Xf.offsetOf(Yf) - 1), kg.removeChild(Yf));
            return !0;
        }
        if ('box' === Yf.type || 'enclose' === Yf.type) {
            const lg = Td && 'backward' === hf || !Td && 'forward' === hf ? Yf.leftSibling : Yf.lastChild;
            return kg.addChildrenAfter(Yf.removeBranch('body'), Yf), kg.removeChild(Yf), Xf.position = Xf.offsetOf(lg), !0;
        }
        if ('genfrac' === Yf.type || 'overunder' === Yf.type) {
            if (!Td)
                return !('overunder' === Yf.type && Yf.hasEmptyBranch('body') || 'genfrac' === Yf.type && Yf.hasEmptyBranch('below') && Yf.hasEmptyBranch('above') || (Xf.position = Xf.offsetOf('forward' === hf ? Yf.firstChild : Yf.lastChild), 0));
            const lg = 'numerator-denominator' === Yf.context.fractionNavigationOrder ? 'above' : 'below',
                mg = 'above' === lg ? 'below' : 'above';
            if ('forward' === hf && Td === lg || 'backward' === hf && Td === mg) {
                const ng = Yf.removeBranch(lg),
                    og = Yf.removeBranch(mg);
                return kg.addChildrenAfter([
                    ...ng,
                    ...og
                ], Yf), kg.removeChild(Yf), Xf.position = Xf.offsetOf(ng.length > 0 ? ng[ng.length - 1] : og[0]), !0;
            }
            return 'backward' === hf ? (Xf.position = Xf.offsetOf(Yf.leftSibling), !0) : (Xf.position = Xf.offsetOf(Yf), !0);
        }
        if (Yf.isExtensibleSymbol || 'msubsup' === Yf.type) {
            if (!Td && 'forward' === hf)
                return !1;
            if (!Td) {
                if (Yf.subscript || Yf.superscript) {
                    const lg = 'forward' === hf ? null !== (fg = null === (eg = Yf.superscript) || void 0 === eg ? void 0 : eg[0]) && void 0 !== fg ? fg : null === (gg = Yf.subscript) || void 0 === gg ? void 0 : gg[0] : null !== (ig = null === (hg = Yf.subscript) || void 0 === hg ? void 0 : hg[0].lastSibling) && void 0 !== ig ? ig : null === (jg = Yf.superscript) || void 0 === jg ? void 0 : jg[0].lastSibling;
                    return lg && (Xf.position = Xf.offsetOf(lg)), !0;
                }
                return !1;
            }
            if (Td && Yf.hasEmptyBranch(Td) && Yf.removeBranch(Td), !Yf.hasChildren) {
                const lg = 'forward' === hf ? Xf.offsetOf(Yf) : Math.max(0, Xf.offsetOf(Yf) - 1);
                return Yf.parent.removeChild(Yf), Xf.position = lg, !0;
            }
            if ('superscript' === Td)
                if ('backward' === hf) {
                    const lg = Xf.offsetOf(Yf.firstChild) - 1;
                    Xf.position = lg;
                } else
                    Yf.subscript ? Xf.position = Xf.offsetOf(Yf.subscript[0]) : Xf.position = Xf.offsetOf(Yf);
            else
                'subscript' === Td && ('backward' === hf && Yf.superscript ? Xf.position = Xf.offsetOf(Yf.superscript[0].lastSibling) : Xf.position = 'backward' === hf ? Xf.offsetOf(Yf.firstChild) - 1 : Xf.offsetOf(Yf));
            return !0;
        }
        return !1;
    }

    function eg(Xf, hf, Yf) {
        const fg = Xf.getAtoms(hf);
        if (fg.length > 0 && fg[0].parent) {
            let gg = fg[0].parent.firstChild;
            'first' === gg.type && (gg = gg.rightSibling);
            const hg = fg[fg.length - 1].parent.lastChild;
            let ig = fg[0];
            'first' === ig.type && (ig = ig.rightSibling);
            const jg = fg[fg.length - 1];
            if (ig === gg && jg === hg) {
                const kg = fg[0].parent;
                'root' !== kg.type && (hf = [
                    Xf.offsetOf(kg.leftSibling),
                    Xf.offsetOf(kg.rightSibling)
                ]);
            }
        }
        return Xf.deferNotifications({
            content: !0,
            selection: !0,
            type: Yf
        }, () => Xf.deleteAtoms(hf));
    }

    function fg(Xf, hf) {
        const gg = Xf.at(hf);
        let hg;
        if (gg) {
            hg = gg.mode;
            let ig = gg.parent;
            for (; !hg && ig;)
                ig && (hg = ig.mode), ig = ig.parent;
        }
        return hg;
    }

    function gg(Xf, hf) {
        Xf && hf && (Td(Xf) ? Xf.forEach(Xf => gg(Xf, hf)) : 'object' == typeof Xf && (Xf.style.color || Xf.style.backgroundColor || Xf.style.fontFamily || Xf.style.fontShape || Xf.style.fontSeries || Xf.style.fontSize || Xf.style.variant || Xf.style.variantStyle || (Xf.applyStyle(hf), gg(Xf.body, hf), gg(Xf.above, hf), gg(Xf.below, hf), gg(Xf.subscript, hf), gg(Xf.superscript, hf))));
    }

    function hg(Xf, hf, Yf, Td) {
        function ig(Xf, hf) {
            for (const jg of d)
                if (jg.style[Xf] !== hf)
                    return !1;
            return !0;
        }
        if ((hf = Xf.normalizeRange(hf))[0] === hf[1])
            return !1;
        const jg = Xf.getAtoms(hf, {
            includeChildren: !0
        });
        'toggle' === Td.operation && (Yf.color && ig('color', Yf.color) && (Yf.color = 'none', Yf.verbatimColor = void 0), Yf.backgroundColor && ig('backgroundColor', Yf.backgroundColor) && (Yf.backgroundColor = 'none', Yf.verbatimBackgroundColor = void 0), Yf.fontFamily && ig('fontFamily', Yf.fontFamily) && (Yf.fontFamily = 'none'), Yf.fontSeries && ig('fontSeries', Yf.fontSeries) && (Yf.fontSeries = 'auto'), Yf.fontShape && ig('fontShape', Yf.fontShape) && (Yf.fontShape = 'auto'), Yf.fontSize && ig('fontSize', Yf.fontSize) && (Yf.fontSize = 5));
        for (const kg of jg)
            kg.applyStyle(Yf);
        return !0;
    }

    function ig(Xf, hf, Yf) {
        if ('text' !== Xf.at(hf).mode)
            return hf;
        const jg = 'backward' === Yf ? -1 : 1;
        let kg;
        if (D.test(Xf.at(hf).value)) {
            let lg, mg = ng;
            do {
                lg = 'text' === Xf.at(mg).mode && D.test(Xf.at(mg).value), mg += jg;
            } while (Xf.at(mg) && lg);
            kg = Xf.at(mg) ? mg - 2 * jg : mg - jg;
        } else if (/\s/.test(Xf.at(ng).value)) {
            let og = pg;
            for (; Xf.at(og) && 'text' === Xf.at(og).mode && /\s/.test(Xf.at(og).value);)
                og += jg;
            if (Xf.at(og)) {
                let qg = !0;
                do {
                    qg = 'text' === Xf.at(og).mode && !/\s/.test(Xf.at(og).value), og += jg;
                } while (Xf.at(og) && qg);
                kg = Xf.at(og) ? og - 2 * jg : og - jg;
            } else
                kg = og - jg;
        } else {
            let qg = rg;
            for (; Xf.at(qg) && 'text' === Xf.at(qg).mode && !/\s/.test(Xf.at(qg).value);)
                qg += jg;
            kg = Xf.at(qg) ? qg : qg - jg;
            let sg = !0;
            for (; Xf.at(qg) && sg;)
                sg = 'text' === Xf.at(qg).mode && /\s/.test(Xf.at(qg).value), sg && (kg = qg), qg += jg;
            kg = Xf.at(qg) ? qg - 2 * jg : qg - jg;
        }
        return kg - (jg > 0 ? 0 : 1);
    }

    function jg(Xf, hf, Yf) {
        var kg, lg, mg, ng, og, pg, qg;
        const rg = Xf.position;
        null !== (kg = null == Yf ? void 0 : Yf.extend) && void 0 !== kg && kg || Xf.collapseSelection(hf);
        let sg = Xf.at(Xf.position);
        if ('forward' === hf && ('msubsup' === sg.type ? (sg = sg.rightSibling, sg || (sg = Xf.at(Xf.position + 1))) : sg = Xf.at(Xf.position + 1)), !sg)
            return Xf.announce('plonk'), !1;
        let tg = Xf.offsetOf(sg);
        if (sg instanceof Nc)
            tg = ig(Xf, tg, hf);
        else if (sg instanceof hd)
            if (sg.isSuggestion)
                for (; sg && sg instanceof hd;)
                    sg.isSuggestion = !1, tg = Xf.offsetOf(sg), sg = sg.rightSibling;
            else if ('forward' === hf) {
            if (sg = sg.rightSibling, !(sg && sg instanceof hd))
                return Xf.announce('plonk'), !1;
            for (; sg && sg instanceof hd && /[a-zA-Z\*]/.test(sg.value);)
                tg = Xf.offsetOf(sg), sg = sg.rightSibling;
        } else {
            if (sg = sg.leftSibling, !(sg && sg instanceof hd))
                return Xf.announce('plonk'), !1;
            for (; sg && sg instanceof hd && /[a-zA-Z\*]/.test(sg.value);)
                tg = Xf.offsetOf(sg), sg = sg.leftSibling;
        } else if ('forward' === hf && 'mopen' === sg.type) {
            let ug = 0;
            do {
                'mopen' === sg.type ? ug += 1 : 'mclose' === sg.type && (ug -= 1), sg = sg.rightSibling;
            } while (!sg.isLastSibling && 0 !== ug);
            tg = Xf.offsetOf(sg.leftSibling);
        } else if ('backward' === ug && 'mclose' === sg.type) {
            let vg = 0;
            do {
                'mopen' === sg.type ? vg += 1 : 'mclose' === sg.type && (vg -= 1), sg = sg.leftSibling;
            } while (!sg.isFirstSibling && 0 !== vg);
            tg = Xf.offsetOf(sg);
        } else if ('backward' === vg)
            if ('first' === sg.type)
                for (; tg > 0 && 'first' === sg.type;)
                    tg -= 1, sg = Xf.at(tg);
            else {
                const wg = sg.type;
                'msubsup' === sg.type && (tg = Xf.offsetOf(Xf.at(tg).leftSibling)), tg -= 1;
                let xg = null === (lg = Xf.at(tg)) || void 0 === lg ? void 0 : lg.type;
                for (; tg >= 0 && xg === wg;)
                    'msubsup' === (null === (mg = Xf.at(tg)) || void 0 === mg ? void 0 : mg.type) ? tg = Xf.offsetOf(Xf.at(tg).leftSibling) : tg -= 1, xg = Xf.at(tg).type;
            }
        else {
            const {
                type: wg
            } = xg;
            let yg = null === (ng = Xf.at(tg)) || void 0 === ng ? void 0 : ng.type;
            const {
                lastOffset: zg
            } = Ag;
            for (; tg <= zg && (yg === wg || 'msubsup' === yg);) {
                for (;
                    'msubsup' === (null === (og = Ag.at(tg).rightSibling) || void 0 === og ? void 0 : og.type);)
                    tg = Ag.offsetOf(Ag.at(tg).rightSibling);
                tg += 1, yg = null === (pg = Ag.at(tg)) || void 0 === pg ? void 0 : pg.type;
            }
            tg -= 1;
        }
        if (null !== (qg = null == Yf ? void 0 : Yf.extend) && void 0 !== qg && qg) {
            if (!Xf.setSelection(Xf.anchor, tg))
                return Xf.announce('plonk'), !1;
        } else {
            if (tg === Xf.position)
                return Xf.announce('plonk'), !1;
            Xf.position = tg;
        }
        return Xf.announce('move', rg), !0;
    }

    function kg(Xf, hf, Yf) {
        var lg, mg, ng, og, pg, qg, rg, sg;
        if (Yf = null != Yf ? Yf : {
                extend: !1
            }, 'forward' !== hf) {
            const [tg, ug] = cf(Xf);
            void 0 !== tg && void 0 !== ug && Xf.deleteAtoms([
                tg,
                ug
            ]);
        }
        if ('upward' === hf)
            return function(Xf, hf) {
                var tg, ug, vg, wg;
                const xg = null !== (tg = null == hf ? void 0 : hf.extend) && void 0 !== tg && tg;
                xg || Xf.collapseSelection('backward');
                const yg = Xf.at(Xf.position);
                let zg = Ag;
                for (; zg && 'below' !== zg.treeBranch && !(Array.isArray(zg.treeBranch) && zg.parent instanceof Wc);)
                    zg = zg.parent;
                if (Array.isArray(null == zg ? void 0 : zg.treeBranch) && zg.parent instanceof Wc) {
                    const Bg = zg.parent,
                        Cg = Math.max(0, zg.treeBranch[0] - 1);
                    lg(Xf, Ag, Bg.array[Cg][zg.treeBranch[1]], xg, 'up');
                } else {
                    if (!zg) {
                        let Dg = !0;
                        return Xf.suppressChangeNotifications || (Dg = null === (wg = null === (vg = Xf.mathfield.host) || void 0 === vg ? void 0 : vg.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'upward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === wg || wg), Xf.announce(Dg ? 'plonk' : 'line'), Dg;
                    }
                    lg(Xf, Ag, null !== (ug = zg.parent.branch('above')) && void 0 !== ug ? ug : zg.parent.createBranch('above'), xg, 'up');
                }
                return !0;
            }(Xf, Yf);
        if ('downward' === hf)
            return function(Xf, hf) {
                var tg, ug, vg, wg;
                const xg = null !== (tg = null == hf ? void 0 : hf.extend) && void 0 !== tg && tg;
                xg || Xf.collapseSelection('forward');
                const yg = Xf.at(Xf.position);
                let zg = Ag;
                for (; zg && 'above' !== zg.treeBranch && !(Array.isArray(zg.treeBranch) && zg.parent instanceof Wc);)
                    zg = zg.parent;
                if (Array.isArray(null == zg ? void 0 : zg.treeBranch) && zg.parent instanceof Wc) {
                    const Bg = zg.parent,
                        Cg = Math.min(Bg.array.length - 1, zg.treeBranch[0] + 1);
                    lg(Xf, Ag, Bg.array[Cg][zg.treeBranch[1]], xg, 'down');
                } else {
                    if (!zg) {
                        let Dg = !0;
                        return Xf.suppressChangeNotifications || (Dg = null === (wg = null === (vg = Xf.mathfield.host) || void 0 === vg ? void 0 : vg.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'downward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === wg || wg), Xf.announce(Dg ? 'plonk' : 'line'), Dg;
                    }
                    lg(Xf, Ag, null !== (ug = zg.parent.branch('below')) && void 0 !== ug ? ug : zg.parent.createBranch('below'), xg, 'down');
                }
                return !0;
            }(Xf, Yf);
        const tg = Xf.position;
        if (Yf.extend)
            return Xf.extendSelection(hf);
        if (Xf.selectionIsPlaceholder)
            return Xf.collapseSelection(hf), kg(Xf, hf);
        if (!Xf.collapseSelection(hf)) {
            let ug = Xf.position + ('forward' === hf ? 1 : -1),
                vg = Xf.at(ug);
            if (ug >= 0 && ug <= Xf.lastOffset)
                if ('forward' === hf)
                    if (vg.inCaptureSelection) {
                        for (; !vg.captureSelection;)
                            vg = vg.parent;
                        ug = Xf.offsetOf(vg);
                    } else if (!vg.isFirstSibling && vg.isLastSibling && (null === (lg = vg.parent) || void 0 === lg ? void 0 : lg.skipBoundary)) {
                if (ug + 1 !== Xf.lastOffset)
                    return Xf.position = ug, kg(Xf, 'forward', Yf);
                ug += 1;
            } else
                (null === (mg = vg.parent) || void 0 === mg ? void 0 : mg.skipBoundary) && (null === (ng = vg.rightSibling) || void 0 === ng ? void 0 : ng.isLastSibling) ? ug += 2 : (null === (og = vg.parent) || void 0 === og ? void 0 : og.skipBoundary) && 'first' === vg.type ? ug += 1 : vg instanceof hd && vg.isSuggestion && (vg.isSuggestion = !1);
            else if ('backward' === hf)
                if (null === (pg = vg.parent) || void 0 === pg ? void 0 : pg.inCaptureSelection) {
                    for (; !vg.captureSelection;)
                        vg = vg.parent;
                    ug = Math.max(0, Xf.offsetOf(vg.leftSibling));
                } else
                    (vg.skipBoundary || (null === (qg = vg.parent) || void 0 === qg ? void 0 : qg.skipBoundary) && 'first' === vg.type) && (ug = Math.max(0, Xf.position - 2));
            if (ug < 0 || ug > Xf.lastOffset) {
                let wg = !0;
                return Xf.suppressChangeNotifications || (wg = null === (sg = null === (rg = Xf.mathfield.host) || void 0 === rg ? void 0 : rg.dispatchEvent(new CustomEvent('move-out', {
                    detail: {
                        direction: hf
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) || void 0 === sg || sg), wg && Xf.announce('plonk'), wg;
            }
            Xf.setPositionHandlingPlaceholder(ug);
        }
        return Xf.announce('move', tg), !0;
    }

    function lg(Xf, hf, Yf, Td, Xc) {
        const mg = xe(Xf.mathfield.getHTMLElement(hf)).right,
            ng = Xf.offsetOf(function(Xf, hf, Yf) {
                let og = 1 / 0,
                    pg = 0;
                for (; pg < hf.length; pg++) {
                    const qg = xe(Xf.getHTMLElement(hf[pg])).right,
                        rg = Math.abs(Yf - qg);
                    if (!(rg <= og))
                        break;
                    og = rg;
                }
                return hf[pg - 1];
            }(Xf.mathfield, Yf, mg));
        if (Td) {
            const [og, pg] = Xf.selection.ranges[0];
            let qg;
            qg = ng < ('up' === Xc ? og : pg) ? {
                ranges: [
                    [
                        ng,
                        pg
                    ]
                ],
                direction: 'backward'
            } : {
                ranges: [
                    [
                        og,
                        ng
                    ]
                ],
                direction: 'forward'
            }, Xf.setSelection(qg);
        } else
            Xf.setPositionHandlingPlaceholder(ng);
        Xf.announce(`move ${ Xc }`);
    }

    function mg(Xf) {
        const ng = Xf.position,
            og = Xf.at(ng).parent;
        return og && 'root' !== og.type ? (Xf.position = Xf.offsetOf(og), Xf.announce('move', ng), !0) : (Xf.announce('plonk'), !1);
    }

    function ng(Xf) {
        var og;
        if (Xf.collapseSelection(), function(Xf) {
                let pg = 0,
                    qg = Xf.at(Xf.position),
                    rg = !1;
                for (; qg;)
                    qg.hasEmptyBranch('superscript') && qg.hasEmptyBranch('subscript') || (pg += 1), qg.hasEmptyBranch('superscript') ? qg.hasEmptyBranch('subscript') || (rg = !1) : rg = !0, qg = qg.parent;
                return rg ? pg : 0;
            }(Xf) >= Xf.mathfield.options.scriptDepth[1])
            return Xf.announce('plonk'), !1;
        let pg = Xf.at(Xf.position);
        return void 0 === pg.subsupPlacement && ('msubsup' !== (null === (og = pg.rightSibling) || void 0 === og ? void 0 : og.type) && pg.parent.addChildAfter(new Jc(Xf.mathfield, {
            style: pg.computedStyle
        }), pg), pg = pg.rightSibling), pg.createBranch('superscript'), Xf.setSelection(Xf.getSiblingsRange(Xf.offsetOf(pg.superscript[0]))), !0;
    }

    function og(Xf) {
        var pg;
        if (Xf.collapseSelection(), function(Xf) {
                let qg = 0,
                    rg = Xf.at(Xf.position),
                    sg = !1;
                for (; rg;)
                    rg.hasEmptyBranch('superscript') && rg.hasEmptyBranch('subscript') || (qg += 1), rg.hasEmptyBranch('superscript') ? rg.hasEmptyBranch('subscript') || (sg = !0) : sg = !1, rg = rg.parent;
                return sg ? qg : 0;
            }(Xf) >= Xf.mathfield.options.scriptDepth[0])
            return Xf.announce('plonk'), !1;
        let qg = Xf.at(Xf.position);
        return void 0 === qg.subsupPlacement && ('msubsup' !== (null === (pg = Xf.at(Xf.position + 1)) || void 0 === pg ? void 0 : pg.type) && qg.parent.addChildAfter(new Jc(Xf.mathfield, {
            style: Xf.at(Xf.position).computedStyle
        }), qg), qg = Xf.at(Xf.position + 1)), qg.createBranch('subscript'), Xf.setSelection(Xf.getSiblingsRange(Xf.offsetOf(qg.subscript[0]))), !0;
    }

    function pg(Xf, hf, qg = !0) {
        var rg, sg;
        const tg = 'forward' === hf ? 1 : -1;
        'placeholder' === Xf.at(Xf.anchor).type && kg(Xf, hf);
        const ug = Xf.getAllAtoms(Math.max(Xf.position + tg, 0));
        'backward' === hf && ug.reverse();
        const vg = ug.filter(Xf => 'placeholder' === Xf.type || Xf.treeDepth > 2 && Xf.isFirstSibling && Xf.isLastSibling);
        if (0 === vg.length) {
            if (!qg || null !== (sg = null === (rg = Xf.mathfield.host) || void 0 === rg ? void 0 : rg.dispatchEvent(new CustomEvent('focus-out', {
                    detail: {
                        direction: hf
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) && void 0 !== sg && !sg)
                return Xf.announce('plonk'), !1;
            const wg = function() {
                function xg(xg) {
                    var yg;
                    return !((yg = xg).disabled || 'hidden' === yg.type && 'INPUT' === yg.tagName.toUpperCase() || function(xg) {
                        if (!Xc() || xg === document.activeElement || xg.contains(document.activeElement))
                            return !1;
                        if ('hidden' === getComputedStyle(xg).visibility)
                            return !0;
                        const zg = xg.getBoundingClientRect();
                        if (0 === zg.width || 0 === zg.height)
                            return !0;
                        for (; xg;) {
                            if ('none' === getComputedStyle(xg).display)
                                return !0;
                            xg = xg.parentElement;
                        }
                        return !1;
                    }(yg) || function(xg) {
                        return 'INPUT' === xg.tagName.toUpperCase() && 'radio' === xg.type && ! function(xg) {
                            var zg;
                            if (!xg.name)
                                return !0;
                            const Ag = function(xg, zg) {
                                for (const Bg of xg)
                                    if (Bg.checked && Bg.form === zg)
                                        return Bg;
                                return null;
                            }((null !== (zg = xg.form) && void 0 !== zg ? zg : xg.ownerDocument).querySelectorAll('input[type="radio"][name="' + xg.name + '"]'), xg.form);
                            return !Ag || Ag === xg;
                        }(xg);
                    }(xg) || hf(xg) < 0);
                }

                function yg(xg) {
                    var zg;
                    const Ag = Number.parseInt(null !== (zg = xg.getAttribute('tabindex')) && void 0 !== zg ? zg : 'NaN', 10);
                    return Number.isNaN(Ag) ? 'true' === xg.contentEditable ? 0 : 'AUDIO' !== xg.nodeName && 'VIDEO' !== xg.nodeName || null !== xg.getAttribute('tabindex') ? xg.tabIndex : 0 : Ag;
                }
                return Xc() ? function(qg) {
                    const zg = [],
                        Ag = [];
                    return [...qg.querySelectorAll('input, select, textarea, a[href], button,\n        [tabindex], audio[controls], video[controls],\n        [contenteditable]:not([contenteditable="false"]), details>summary')].filter(xg).forEach((xg, qg) => {
                        const Bg = yg(xg);
                        0 === Bg ? zg.push(xg) : Ag.push({
                            documentOrder: qg,
                            tabIndex: Bg,
                            node: xg
                        });
                    }), Ag.sort((xg, yg) => xg.tabIndex === yg.tabIndex ? xg.documentOrder - yg.documentOrder : xg.tabIndex - yg.tabIndex).map(xg => xg.node).concat(zg);
                }(document.body) : [];
            }();
            if (!document.activeElement || 1 === wg.length)
                return xg.announce('plonk'), !1;
            let xg = wg.indexOf(document.activeElement) + tg;
            return !!(document.activeElement instanceof Jh && h(document.activeElement, hf, tg)) || (xg < 0 && (xg = wg.length - 1), xg >= wg.length && (xg = 0), !!(wg[xg] instanceof Jh && h(wg[xg], hf, tg)) || (wg[xg].focus(), 0 !== xg || (Xf.announce('plonk'), !1)));
        }

        function wg(Xf, hf, qg) {
            var xg, yg, zg;
            const Ag = [...null !== (yg = null === (xg = Xf.shadowRoot) || void 0 === xg ? void 0 : xg.querySelectorAll('math-field')) && void 0 !== yg ? yg : []];
            if (Ag.length) {
                const Bg = null === (zg = Xf.shadowRoot) || void 0 === zg ? void 0 : zg.activeElement,
                    Cg = Ag.indexOf(Bg);
                let Dg = Cg + qg;
                if (Cg < 0 && 'backward' === hf && (Dg = Ag.length - 1), Dg >= 0 && Dg < Ag.length)
                    return Ag[Dg].focus(), !0;
            }
            return !1;
        }
        const xg = Xf.position,
            yg = Xf.offsetOf(vg[0]);
        return 'placeholder' === vg[0].type ? Xf.setSelection(yg - 1, yg) : Xf.position = yg, Xf.announce('move', xg), !0;
    }

    function rg(Xf) {
        var sg, tg, ug, vg, wg, xg;
        if ('text' === fg(Xf, Xf.position)) {
            let yg = Math.min(Xf.anchor, Xf.position),
                zg = Math.max(Xf.anchor, Xf.position),
                Ag = !1;
            for (; !Ag && yg > 0;) {
                const Bg = Xf.at(yg);
                'text' === Bg.mode && D.test(Bg.value) ? yg -= 1 : Ag = !0;
            }
            for (Ag = !1; !Ag && zg <= Xf.lastOffset;) {
                const Bg = Xf.at(zg);
                'text' === Bg.mode && D.test(Bg.value) ? zg += 1 : Ag = !0;
            }
            if (Ag && (zg -= 1), Bg >= zg)
                return Xf.setSelection(zg - 1, zg), !0;
            Xf.setSelection(yg, zg);
        } else {
            const Bg = Xf.at(Xf.position);
            if (Bg.isDigit()) {
                let Cg = Math.min(Xf.anchor, Xf.position),
                    Dg = Math.max(Xf.anchor, Xf.position);
                for (; null === (yg = Xf.at(Cg)) || void 0 === yg ? void 0 : yg.isDigit();)
                    Cg -= 1;
                for (; null === (zg = Xf.at(Dg)) || void 0 === zg ? void 0 : zg.isDigit();)
                    Dg += 1;
                Xf.setSelection(Cg, Dg - 1);
            } else if (Bg.style.variant || Bg.style.variantStyle) {
                let Eg = Math.min(Xf.anchor, Xf.position),
                    Fg = Math.max(Xf.anchor, Xf.position),
                    Gg = null === (Cg = Xf.at(Eg)) || void 0 === Cg ? void 0 : Cg.style;
                for (; Gg && Gg.variant === Bg.style.variant && Gg.variantStyle === Bg.style.variantStyle;)
                    Eg -= 1, Gg = null === (Dg = Xf.at(Eg)) || void 0 === Dg ? void 0 : Dg.style;
                for (Gg = null === (wg = Xf.at(Fg)) || void 0 === wg ? void 0 : wg.style; Gg && Gg.variant === Bg.style.variant && Gg.variantStyle === Bg.style.variantStyle;)
                    Fg += 1, Gg = null === (xg = Xf.at(Fg)) || void 0 === xg ? void 0 : xg.style;
                Xf.setSelection(Eg, Fg - 1);
            } else
                Xf.setSelection(Xf.offsetOf(Bg.firstSibling), Xf.offsetOf(Bg.lastSibling));
        }
        return !0;
    }
    wf({
        addRowAfter: ag,
        addColumnAfter: bg,
        addRowBefore: function(Xf) {
            return !!$e(Xf, {
                inputType: 'insertText'
            }) && (_f(Xf, 'before row'), af(Xf, {
                inputType: 'insertText'
            }), !0);
        },
        addColumnBefore: function(Xf) {
            return !!$e(Xf, {
                inputType: 'insertText'
            }) && (_f(Xf, 'before column'), af(Xf, {
                inputType: 'insertText'
            }), !0);
        },
        removeRow: function(Xf) {
            return !!$e(Xf, {
                inputType: 'deleteContent'
            }) && (cg(Xf, 'row'), af(Xf, {
                inputType: 'deleteContent'
            }), !0);
        },
        removeColumn: function(Xf) {
            return !!$e(Xf, {
                inputType: 'deleteContent'
            }) && (cg(Xf, 'column'), af(Xf, {
                inputType: 'deleteContent'
            }), !0);
        }
    }, {
        target: 'model',
        category: 'array-edit'
    }), wf({
        deleteAll: Xf => $e(Xf, {
            inputType: 'deleteContent'
        }) && eg(Xf, [
            0,
            -1
        ], 'deleteContent'),
        deleteForward: Xf => function(Xf) {
            return !!$e(Xf, {
                inputType: 'deleteContentForward'
            }) && (Xf.selectionIsCollapsed ? Xf.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentForward'
            }, () => {
                var sg, tg;
                let ug = Xf.at(Xf.position).rightSibling;
                if (ug && dg(Xf, 'forward', ug))
                    return;
                if (ug) {
                    if (Xf.at(Xf.position).isLastSibling && dg(Xf, 'forward', ug.parent, ug.treeBranch))
                        return;
                } else {
                    if (ug = Xf.at(Xf.position), ug.isLastSibling && dg(Xf, 'forward', ug.parent, ug.treeBranch))
                        return;
                    ug = null;
                }
                if (Xf.position === Xf.lastOffset || !ug)
                    return void Xf.announce('plonk');
                ug.parent.removeChild(ug);
                let vg = null === (sg = Xf.at(Xf.position)) || void 0 === sg ? void 0 : sg.rightSibling;
                for (;
                    'msubsup' === (null == vg ? void 0 : vg.type);)
                    vg.parent.removeChild(vg), vg = null === (tg = Xf.at(Xf.position)) || void 0 === tg ? void 0 : tg.rightSibling;
                Xf.announce('delete', void 0, [ug]);
            }) : eg(Xf, Id(Xf.selection), 'deleteContentForward'));
        }(Xf),
        deleteBackward: Xf => function(Xf) {
            return !!$e(Xf, {
                inputType: 'deleteContentBackward'
            }) && (Xf.selectionIsCollapsed ? Xf.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentBackward'
            }, () => {
                let sg = Xf.at(Xf.position);
                if (!sg || !dg(Xf, 'backward', sg)) {
                    if (null == sg ? void 0 : sg.isFirstSibling) {
                        if (dg(Xf, 'backward', sg.parent, sg.treeBranch))
                            return;
                        sg = null;
                    }
                    sg ? (Xf.position = Xf.offsetOf(sg.leftSibling), sg.parent.removeChild(sg), Xf.announce('delete', void 0, [sg])) : Xf.announce('plonk');
                }
            }) : eg(Xf, Id(Xf.selection), 'deleteContentBackward'));
        }(Xf),
        deleteNextWord: Xf => $e(Xf, {
            inputType: 'deleteWordForward'
        }) && eg(Xf, [
            Xf.anchor,
            ig(Xf, Xf.position, 'forward')
        ], 'deleteWordForward'),
        deletePreviousWord: Xf => $e(Xf, {
            inputType: 'deleteWordBackward'
        }) && eg(Xf, [
            Xf.anchor,
            ig(Xf, Xf.position, 'backward')
        ], 'deleteWordBackward'),
        deleteToGroupStart: Xf => $e(Xf, {
            inputType: 'deleteSoftLineBackward'
        }) && eg(Xf, [
            Xf.anchor,
            Xf.offsetOf(Xf.at(Xf.position).firstSibling)
        ], 'deleteSoftLineBackward'),
        deleteToGroupEnd: Xf => $e(Xf, {
            inputType: 'deleteSoftLineForward'
        }) && eg(Xf, [
            Xf.anchor,
            Xf.offsetOf(Xf.at(Xf.position).lastSibling)
        ], 'deleteSoftLineForward'),
        deleteToMathFieldStart: Xf => $e(Xf, {
            inputType: 'deleteHardLineBackward'
        }) && eg(Xf, [
            Xf.anchor,
            0
        ], 'deleteHardLineBackward'),
        deleteToMathFieldEnd: Xf => $e(Xf, {
            inputType: 'deleteHardLineForward'
        }) && eg(Xf, [
            Xf.anchor,
            -1
        ], 'deleteHardLineForward')
    }, {
        target: 'model',
        category: 'delete'
    }), wf({
        moveToOpposite: Xf => {
            const sg = Xf.at(Xf.position),
                {
                    parent: tg
                } = ug;
            if (!tg)
                return Xf.announce('plonk'), !1;
            const vg = ug.treeBranch;
            let wg;
            return 'string' == typeof vg && (wg = {
                superscript: 'subscript',
                subscript: 'superscript',
                above: 'below',
                below: 'above'
            } [vg]), wg ? (tg.branch(wg) || tg.createBranch(wg), Xf.setSelection(Xf.getBranchRange(Xf.offsetOf(tg), wg))) : ug.subsupPlacement ? og(Xf) : ng(Xf);
        },
        moveBeforeParent: Xf => {
            const {
                parent: sg
            } = Xf.at(Xf.position);
            return sg ? (Xf.position = Xf.offsetOf(sg), !0) : (Xf.announce('plonk'), !1);
        },
        moveAfterParent: Xf => mg(Xf),
        moveToNextPlaceholder: Xf => pg(Xf, 'forward'),
        moveToPreviousPlaceholder: Xf => pg(Xf, 'backward'),
        moveToNextChar: Xf => kg(Xf, 'forward'),
        moveToPreviousChar: Xf => kg(Xf, 'backward'),
        moveUp: Xf => kg(Xf, 'upward'),
        moveDown: Xf => kg(Xf, 'downward'),
        moveToNextWord: Xf => jg(Xf, 'forward'),
        moveToPreviousWord: Xf => jg(Xf, 'backward'),
        moveToGroupStart: Xf => {
            const sg = Xf.offsetOf(Xf.at(Xf.position).firstSibling);
            return sg === Xf.position ? (Xf.announce('plonk'), !1) : (Xf.position = sg, !0);
        },
        moveToGroupEnd: Xf => {
            const sg = Xf.offsetOf(Xf.at(Xf.position).lastSibling);
            return sg === Xf.position ? (Xf.announce('plonk'), !1) : (Xf.position = sg, !0);
        },
        moveToMathFieldStart: Xf => 0 === Xf.position ? (Xf.announce('plonk'), !1) : (Xf.position = 0, !0),
        moveToMathFieldEnd: Xf => Xf.position === Xf.lastOffset ? (Xf.announce('plonk'), !1) : (Xf.position = Xf.lastOffset, !0),
        moveToSuperscript: Xf => ng(Xf),
        moveToSubscript: Xf => og(Xf)
    }, {
        target: 'model',
        category: 'selection-anchor'
    }), wf({
        selectGroup: Xf => {
            const sg = rg(Xf);
            return sg || Xf.announce('plonk'), sg;
        },
        selectAll: Xf => Xf.setSelection(0, Xf.lastOffset),
        extendSelectionForward: Xf => {
            const sg = Xf.extendSelection('forward');
            return sg || Xf.announce('plonk'), sg;
        },
        extendSelectionBackward: Xf => {
            const sg = Xf.extendSelection('backward');
            return sg || Xf.announce('plonk'), sg;
        },
        extendToNextWord: Xf => jg(Xf, 'forward', {
            extend: !0
        }),
        extendToPreviousWord: Xf => jg(Xf, 'backward', {
            extend: !0
        }),
        extendSelectionUpward: Xf => kg(Xf, 'upward', {
            extend: !0
        }),
        extendSelectionDownward: Xf => kg(Xf, 'downward', {
            extend: !0
        }),
        extendToNextBoundary: Xf => jg(Xf, 'forward', {
            extend: !0
        }),
        extendToPreviousBoundary: Xf => jg(Xf, 'backward', {
            extend: !0
        }),
        extendToGroupStart: Xf => {
            const sg = Xf.setSelection(Xf.anchor, Xf.offsetOf(Xf.at(Xf.position).firstSibling));
            return sg || Xf.announce('plonk'), sg;
        },
        extendToGroupEnd: Xf => {
            const sg = Xf.setSelection(Xf.anchor, Xf.offsetOf(Xf.at(Xf.position).lastSibling));
            return sg || Xf.announce('plonk'), sg;
        },
        extendToMathFieldStart: Xf => {
            const sg = Xf.setSelection(Xf.anchor, 0);
            return sg || Xf.announce('plonk'), sg;
        },
        extendToMathFieldEnd: Xf => {
            const sg = Xf.setSelection(Xf.anchor, Xf.lastOffset);
            return sg || Xf.announce('plonk'), sg;
        }
    }, {
        target: 'model',
        category: 'selection-extend'
    });
    class sg {
        get element() {
            if (this._element)
                return this._element;
            const tg = document.createElement('div');
            return tg.setAttribute('role', 'presentation'), tg.style.position = 'fixed', tg.style.contain = 'content', tg.style.top = '0', tg.style.left = '0', tg.style.right = '0', tg.style.bottom = '0', tg.style.zIndex = 'var(--scrim-zindex, 10099)', tg.style.outline = 'none', this.translucent ? (tg.style.background = 'rgba(255, 255, 255, .2)', tg.style.backdropFilter = 'contrast(40%)') : tg.style.background = 'transparent', this._element = tg, tg;
        }
        open(Xf) {
            var tg;
            if ('closed' !== this.state)
                return;
            this.state = 'opening', this.savedActiveElement = tg();
            const {
                element: ug
            } = this;
            (null !== (tg = null == Xf ? void 0 : Xf.root) && void 0 !== tg ? tg : document.body).appendChild(ug), ug.addEventListener('click', this), document.addEventListener('touchmove', this, !1), document.addEventListener('scroll', this, !1);
            const vg = window.innerWidth - document.documentElement.clientWidth;
            this.savedMarginRight = document.body.style.marginRight, this.savedOverflow = document.body.style.overflow, document.body.style.overflow = 'hidden';
            const wg = Number.parseFloat(getComputedStyle(document.body).marginRight);
            document.body.style.marginRight = `${ wg + vg }px`, (null == Xf ? void 0 : Xf.child) && ug.append(Xf.child), this.state = 'open';
        }
        close() {
            var xg, yg, zg, Ag;
            if ('open' !== this.state)
                return;
            this.state = 'closing', 'function' == typeof this.onClose && this.onClose();
            const {
                element: Bg
            } = this;
            Bg.removeEventListener('click', this), document.removeEventListener('touchmove', this, !1), document.removeEventListener('scroll', this, !1), Bg.remove(), document.body.style.overflow = null !== (xg = this.savedOverflow) && void 0 !== xg ? xg : '', document.body.style.marginRight = null !== (yg = this.savedMarginRight) && void 0 !== yg ? yg : '', tg() !== this.savedActiveElement && (null === (Ag = null === (zg = this.savedActiveElement) || void 0 === zg ? void 0 : zg.focus) || void 0 === Ag || Ag.call(zg)), Bg.innerHTML = '', this.state = 'closed';
        }
        handleEvent(Xf) {
            this.preventOverlayClose || (Xf.target === this._element && 'click' === Xf.type ? (this.close(), Xf.preventDefault(), Xf.stopPropagation()) : Xf.target !== document || 'touchmove' !== Xf.type && 'scroll' !== Xf.type || (this.close(), Xf.preventDefault(), Xf.stopPropagation()));
        }
        constructor(Xf) {
            var tg, ug;
            this.preventOverlayClose = null !== (tg = null == Xf ? void 0 : Xf.preventOverlayClose) && void 0 !== tg && tg, this.translucent = null !== (ug = null == Xf ? void 0 : Xf.translucent) && void 0 !== ug && ug, this.state = 'closed';
        }
    }

    function tg() {
        var ug;
        let vg = document.activeElement;
        for (; null === (ug = null == vg ? void 0 : vg.shadowRoot) || void 0 === ug ? void 0 : ug.activeElement;)
            vg = vg.shadowRoot.activeElement;
        return vg;
    }
    const ug = new Set([
        'Backquote',
        'Digit0',
        'Digit1',
        'Digit2',
        'Digit3',
        'Digit4',
        'Digit5',
        'Digit6',
        'Digit7',
        'Digit8',
        'Digit9',
        'Minus',
        'Equal',
        'IntlYen',
        'KeyQ',
        'KeyW',
        'KeyE',
        'KeyR',
        'KeyT',
        'KeyY',
        'KeyU',
        'KeyI',
        'KeyO',
        'KeyP',
        'BracketLeft',
        'BracketRight',
        'Backslash',
        'KeyA',
        'KeyS',
        'KeyD',
        'KeyF',
        'KeyG',
        'KeyH',
        'KeyJ',
        'KeyK',
        'KeyL',
        'Semicolon',
        'Quote',
        'IntlBackslash',
        'KeyZ',
        'KeyX',
        'KeyC',
        'KeyV',
        'KeyB',
        'KeyN',
        'KeyM',
        'Comma',
        'Period',
        'Slash',
        'IntlRo',
        'Space',
        'Numpad0',
        'Numpad1',
        'Numpad2',
        'Numpad3',
        'Numpad4',
        'Numpad5',
        'Numpad6',
        'Numpad7',
        'Numpad8',
        'Numpad9',
        'NumpadAdd',
        'NumpadComma',
        'NumpadDecimal',
        'NumpadDivide',
        'NumpadEqual',
        'NumpadHash',
        'NumpadMultiply',
        'NumpadParenLeft',
        'NumpadParenRight',
        'NumpadStar',
        'NumpadSubstract'
    ]);

    function vg(Xf) {
        return !Xf.ctrlKey && !Xf.metaKey && 'Dead' !== Xf.key && ('' === Xf.code || ug.has(Xf.code));
    }

    function wg(Xf) {
        const xg = [];
        return (Xf = function(Xf) {
            if (Xf.code)
                return Xf;
            const yg = Object.entries(Pe().mapping);
            let zg = !1,
                Ag = !1,
                Bg = '';
            for (let Cg = 0; Cg < 4; Cg++) {
                for (const [Dg, Eg] of yg)
                    if (Eg[Cg] === Xf.key) {
                        Bg = Dg, 3 === Cg ? (zg = !0, Ag = !0) : 2 === Cg ? zg = !0 : 1 === Cg && (Ag = !0);
                        break;
                    }
                if (Bg)
                    break;
            }
            return new KeyboardEvent(Xf.type, {
                ...Xf,
                altKey: zg,
                shiftKey: Ag,
                code: Bg
            });
        }(Xf)).ctrlKey && xg.push('ctrl'), Xf.metaKey && xg.push('meta'), Xf.altKey && xg.push('alt'), Xf.shiftKey && xg.push('shift'), 0 === xg.length ? '[' + Xf.code + ']' : (xg.push('[' + Xf.code + ']'), xg.join('+'));
    }

    function xg() {
        var yg;
        if (!Xc())
            return null;
        let zg = document.activeElement;
        for (; null === (yg = null == zg ? void 0 : zg.shadowRoot) || void 0 === yg ? void 0 : yg.activeElement;)
            zg = zg.shadowRoot.activeElement;
        return zg;
    }

    function yg(Xf) {
        var zg;
        if (!Xf)
            return '';
        let Ag;
        return 'Unidentified' === Xf.key && Xf.target && (Ag = Xf.target.value), Ag = null !== (zg = null != Ag ? Ag : Xf.key) && void 0 !== zg ? zg : Xf.code, /^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(Ag) && (Ag = ''), Ag;
    }
    class zg {
        get maximumDepth() {
            return 1000;
        }
        reset() {
            this.stack = [], this.index = -1;
        }
        startRecording() {
            this.recording = !0;
        }
        canUndo() {
            return this.index > 0;
        }
        canRedo() {
            return this.index !== this.stack.length - 1;
        }
        undo() {
            return !!this.canUndo() && (this.model.setState(this.stack[this.index - 1], {
                suppressChangeNotifications: !1,
                type: 'undo'
            }), this.index -= 1, this.canCoalesce = !1, !0);
        }
        redo() {
            return !!this.canRedo() && (this.index += 1, this.model.setState(this.stack[this.index], {
                suppressChangeNotifications: !1,
                type: 'redo'
            }), this.canCoalesce = !1, !0);
        }
        pop() {
            this.canUndo() && (this.index -= 1, this.stack.pop());
        }
        snapshot() {
            return !!this.recording && (this.stack.splice(this.index + 1, this.stack.length - this.index - 1), this.stack.push(this.model.getState()), this.index++, this.stack.length > this.maximumDepth && this.stack.shift(), this.canCoalesce = !1, !0);
        }
        snapshotAndCoalesce() {
            if (!this.recording)
                return !1;
            this.canCoalesce && this.pop();
            const Ag = this.snapshot();
            return this.canCoalesce = !0, Ag;
        }
        constructor(Xf) {
            this.recording = !1, this.canCoalesce = !1, this.model = Xf, this.reset();
        }
    }
    var Ag = '.ML__keyboard{--hue:206;--keyboard-background:rgba(209,213,217,.97);--keyboard-text:#000;--keyboard-text-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-background-border:#ddd;--keycap-background:#fff;--keycap-background-active:#e5e5e5;--keycap-background-border:#e5e6e9;--keycap-background-border-bottom:#8d8f92;--keycap-text:#000;--keycap-text-active:#fff;--keycap-secondary-text:#000;--keycap-modifier-background:#b9bdc7;--keycap-modifier-border:#c5c9d0;--keycap-modifier-border-bottom:#989da6;--keyboard-alternate-background:#fff;--keyboard-alternate-background-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-alternate-text:var(--keycap-text,#000);--keyboard-alternate-text-active:#fff;--keyboard-alternate-key-length:70px;--keyboard-alternate-key-font-size:30px;--keyboard-alternate-key-aside-font-size:12px;--keyboard-height:276px;--keycap-height:52px;--keycap-font-size:20px;--keycap-small-font-size:calc(var(--keycap-font-size)*0.8);--keycap-extra-small-font-size:calc(var(--keycap-font-size)/1.42);--keycap-tt-font-size:calc(var(--keycap-font-size)*1.5);height:100%;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:var(--keyboard-zindex,105)}.ML__keyboard.is-visible .ML__keyboard--plate{opacity:1;transform:translateY(calc(var(--keyboard-height, 276px)*-1));transition-timing-function:cubic-bezier(.4,0,1,1);visibility:visible}.ML__keyboard.alternate-keys{align-content:center;background-color:var(--keyboard-alternate-background);border-radius:6px;bottom:auto;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);box-sizing:content-box;display:flex;flex-direction:row;justify-content:center;max-width:286px;position:fixed;text-align:center;top:0;transform:none;transition:none;visibility:hidden;z-index:calc(var(--keyboard-zindex, 105) + 1)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys{max-width:320px}}.ML__keyboard.alternate-keys.is-visible{visibility:visible}.ML__keyboard.alternate-keys.compact{--keyboard-alternate-key-length:50px;--keyboard-alternate-key-font-size:24px;--keyboard-alternate-key-aside-font-size:10px}.ML__keyboard.alternate-keys ul{display:flex;flex-flow:row wrap-reverse;justify-content:center;list-style:none;margin:3px;padding:0}.ML__keyboard.alternate-keys ul>li{fill:currentColor;align-items:center;background:transparent;border:1px solid transparent;border-radius:5px;box-sizing:border-box;color:var(--keyboard-alternate-text);display:flex;flex-flow:column;font-size:var(--keyboard-alternate-key-font-size);height:var(--keyboard-alternate-key-length);justify-content:center;margin:0;pointer-events:all;width:var(--keyboard-alternate-key-length)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys ul>li{font-size:24px;height:50px;width:50px}}.ML__keyboard.alternate-keys ul>li.is-active,.ML__keyboard.alternate-keys ul>li.is-pressed,.ML__keyboard.alternate-keys ul>li:hover{background:var(--keyboard-alternate-background-active);color:var(--keyboard-alternate-text-active)}.ML__keyboard.alternate-keys ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard.alternate-keys ul>li.small-button{background:#fbfbfb;height:42px;margin:2px;width:42px}.ML__keyboard.alternate-keys ul>li.small-button:hover{background:var(--keyboard-alternate-background-active)}.ML__keyboard.alternate-keys ul>li.box>div,.ML__keyboard.alternate-keys ul>li.box>span{border:1px dashed rgba(0,0,0,.24)}.ML__keyboard.alternate-keys ul>li .warning{align-items:center;background:#cd0030;border-radius:5px;color:#fff;display:flex;justify-content:center;min-height:60px;min-width:60px;padding:5px}.ML__keyboard.alternate-keys ul>li .warning.is-active,.ML__keyboard.alternate-keys ul>li .warning.is-pressed,.ML__keyboard.alternate-keys ul>li .warning:hover{background:red}.ML__keyboard.alternate-keys ul>li .warning svg.svg-glyph{height:50px;width:50px}.ML__keyboard.alternate-keys ul>li aside{font-size:var(--keyboard-alternate-key-aside-font-size);line-height:12px;opacity:.78;padding-top:2px}.ML__keyboard .ML__keyboard--plate{-webkit-backdrop-filter:grayscale(50%);backdrop-filter:grayscale(50%);background-color:var(--keyboard-background);border:1px solid var(--keyboard-background-border);bottom:calc(var(--keyboard-height, 276px)*-1);box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);box-sizing:border-box;cursor:pointer;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:16px;font-weight:400;left:0;margin:0;opacity:0;padding-top:5px;pointer-events:all;position:absolute;text-shadow:none;touch-action:none;transform:translate(0);transition:.28s cubic-bezier(0,0,.2,1);transition-property:transform,opacity;-webkit-user-select:none;user-select:none;visibility:hidden;width:100%}.ML__keyboard .ML__keyboard--plate .tex{font-family:KaTeX_Math,KaTeX_Main,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tex-math{font-family:KaTeX_Math,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tt{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace!important;font-size:var(--keycap-tt-font-size,30px);font-weight:400}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer{display:none;outline:none}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer.is-visible{display:flex;flex-flow:column}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{align-self:center;display:flex;flex-flow:row;justify-content:space-between;min-width:736px}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{min-width:556px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{max-width:100vw;min-width:365px;width:365px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:20px;width:20px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:13px;width:17px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.left{display:flex;flex-flow:row;justify-content:flex-start;position:relative}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.right{display:flex;flex-flow:row;justify-content:flex-end}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{fill:currentColor;align-items:baseline;background:0;border:none;border-bottom:2px solid transparent;box-shadow:none;color:var(--keyboard-text);cursor:pointer;display:flex;font-size:110%;justify-content:center;margin:7px 4px 6px;min-height:0;padding:4px 10px}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled.is-pressed svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled:hover svg{color:var(--keyboard-text);opacity:.2}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:100%;padding:0 6px 0 0}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:90%;padding-left:4px;padding-right:4px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-pressed,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:hover{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.selected{border-bottom:2px solid var(--keyboard-text-active);color:var(--keyboard-text-active);margin-bottom:8px;padding-bottom:0}.ML__keyboard .ML__keyboard--plate [data-tooltip]{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{background:#616161;border-radius:2px;bottom:100%;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-tooltip);display:inline-table;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;text-align:center;top:inherit;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1) 1s;width:max-content;z-index:2}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{font-size:16px;padding:8px 16px}}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover:after{opacity:1;transform:scale(1)}.ML__keyboard .ML__keyboard--plate div .rows{align-items:center;border:0;border-collapse:separate;clear:both;display:flex;flex-flow:column;margin:auto}.ML__keyboard .ML__keyboard--plate div .rows>ul{height:40px;list-style:none;margin:0 0 3px;padding:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{fill:currentColor;-webkit-tap-highlight-color:transparent;align-items:center;background:var(--keycap-background);border:1px solid var(--keycap-background-border);border-bottom-color:var(--keycap-background-border-bottom);border-radius:5px;box-sizing:border-box;color:var(--keycap-text);display:flex;flex-flow:column;float:left;font-size:var(--keycap-font-size,20px);height:40px;justify-content:center;margin-right:2px;overflow:hidden;padding:8px 0;position:relative;text-align:center;-webkit-user-select:none;user-select:none;vertical-align:top;width:34px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li:last-child{margin-right:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tt{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bottom{justify-content:flex-end}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.left{align-items:flex-start;padding-left:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.right{align-items:flex-end;padding-right:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li svg.svg-glyph{height:20px;width:20px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{align-items:center;background:#cd0030;border-radius:100%;color:#fff;display:flex;height:25px;justify-content:center;margin-bottom:-2px;min-height:25px;min-width:25px;padding:5px;width:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:16px;width:16px}@media only screen and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{height:16px;min-height:16px;min-width:16px;width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:14px;width:14px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w0{width:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w5{width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w15{width:52px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w20{width:70px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w50{width:178px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.separator{background:transparent;border:none;pointer-events:none}@media only screen and (max-width:560px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.if-wide{display:none}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tex-math{font-size:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li:hover{background:var(--keycap-background-active);color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap:active{color:var(--keyboard-text-active);transform:translateY(calc(var(--keycap-height, 52px)*-.2)) scale(1.4);z-index:calc(var(--keyboard-zindex, 105) - 5)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier:active{background:var(--keyboard-text-active);color:var(--keycap-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:18px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:16px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.fnbutton{font-size:12px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:var(--keycap-extra-small-font-size,14px)}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:calc(var(--keycap-extra-small-font-size, 14px)/1.55)}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier{background-color:var(--keycap-modifier-background);border-color:var(--keycap-modifier-border);border-bottom-color:var(--keycap-modifier-border-bottom);font-size:65%;font-weight:100}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:hover,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:hover{color:#fff}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.w50{font-size:80%;font-weight:100;padding-top:10px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{color:#555}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{font-size:9px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{color:#666;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:10px;line-height:10px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{display:none}}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:2px;width:calc(10vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:calc(5vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:calc(15vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:calc(20vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:calc(50vw - 2px)}}@media only screen and (min-width:415px) and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:3px;width:37px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:17px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:57px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:77px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:197px}}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:4px;width:51px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:23.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:78.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:106px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:271px}}@media only screen and (min-width:1025px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:6px;width:66px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>.modifier{font-size:80%}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:30px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:102px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:138px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:354px}}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keyboard{--hue:206;--keyboard-background:#4e6373;--keyboard-background:#4e6073;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}}body[theme=dark] .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}div.ML__keyboard.material{--keyboard-background:rgba(209,213,217,.9);--keyboard-background-border:#ddd;--keycap-background:transparent;--keycap-background-active:#cccfd1;--keycap-background-border:transparent;--keyboard-alternate-background:#efefef;--keyboard-alternate-text:#000;font-family:Roboto,sans-serif}div.ML__keyboard.material.alternate-keys{background:var(--keyboard-alternate-background);border:1px solid transparent;border-radius:5px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}div.ML__keyboard.material.alternate-keys ul li.is-active,div.ML__keyboard.material.alternate-keys ul li.is-pressed,div.ML__keyboard.material.alternate-keys ul li:active,div.ML__keyboard.material.alternate-keys ul li:hover{fill:currentColor;background:#5f97fc;border:1px solid transparent;color:#fff}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>div{font-size:16px}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:hover,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-pressed{fill:currentColor;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>.selected{fill:currentColor;border-bottom:2px solid #5f97fc;color:#5f97fc;margin-bottom:8px;padding-bottom:0}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap{fill:currentColor;background:transparent;border:1px solid transparent;border-radius:5px;color:var(--keycap-text);transition:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap.tt{color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]{background:#e0e0e0;height:20px;margin-bottom:10px;margin-top:10px}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:hover{background:#d0d0d0;box-shadow:none;transform:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):hover{background:var(--keycap-background-active);border:1px solid transparent;box-shadow:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{background:var(--keyboard-alternate-background);box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);color:var(--keyboard-alternate-text)}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);font-size:10px;justify-content:flex-start;margin-left:10px;margin-right:10px;padding:2px 0 0;transform:translateY(-10px) scale(2);transition:none;vertical-align:top;width:19.5px;z-index:calc(var(--ML_keyboard-zindex, 105) - 5)}}@media only screen and (max-width:414px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{width:16.5px}}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child.is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child:active{margin-left:14px;margin-right:0}}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier{fill:currentColor;background:transparent;border:0;color:#869096;font-size:16px;transition:none}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.selected{border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:hover{background:var(--keycap-background-active);border:0;box-shadow:none;color:var(--keycap-text)}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton{background:transparent;border:0}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.selected{fill:currentColor;border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:hover{fill:currentColor;background:var(--keycap-background-active);border:0;box-shadow:none;color:#5f97fc}@media (prefers-color-scheme:dark){body:not([theme=light]) div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}';

    function Bg(Xf, hf, qg) {
        var Cg;
        let Dg, Eg, Fg, Gg, Hg;
        'object' == typeof(Cg = qg) && ('default' in Cg || 'pressed' in Cg) ? (qg.default && (hf.dataset.command = JSON.stringify(qg.default)), qg.alt && (hf.dataset.commandAlt = JSON.stringify(qg.alt)), qg.altshift && (hf.dataset.commandAltshift = JSON.stringify(qg.altshift)), qg.shift && (hf.dataset.commandShift = JSON.stringify(qg.shift)), qg.pressed && (hf.dataset.commandPressed = JSON.stringify(qg.pressed)), qg.pressAndHoldStart && (hf.dataset.commandPressAndHoldStart = JSON.stringify(qg.pressAndHoldStart)), qg.pressAndHoldEnd && (hf.dataset.commandPressAndHoldEnd = JSON.stringify(qg.pressAndHoldEnd))) : hf.dataset.command = JSON.stringify(qg), le(hf, 'mousedown touchstart:passive', qg => {
            if ('mousedown' !== qg.type || 1 === qg.buttons) {
                qg.stopPropagation(), 'touchstart' !== qg.type && qg.preventDefault(), document.body.style['-webkit-user-select'] = 'none', hf.classList.add('is-pressed'), Dg = Date.now(), 'touchstart' === qg.type && (Fg = qg.changedTouches[0].identifier);
                const Ig = hf.getAttribute('data-command-pressed');
                Ig && Xf(JSON.parse(Ig));
                const Jg = hf.getAttribute('data-command-press-and-hold-start');
                Jg && (Eg = hf, Hg && clearTimeout(Hg), Hg = setTimeout(() => {
                    hf.classList.contains('is-pressed') && Xf(JSON.parse(Jg));
                }, 300));
            }
        }), le(hf, 'mouseleave touchcancel', () => {
            hf.classList.remove('is-pressed');
        }), le(hf, 'touchmove:passive', Xf => {
            for (let Ig = 0; Ig < Xf.changedTouches.length; Ig++)
                if (Xf.changedTouches[Ig].identifier === Fg) {
                    const Jg = document.elementsFromPoint(Xf.changedTouches[Ig].clientX, Xf.changedTouches[Ig].clientY),
                        Kg = Jg[Jg.length - 1];
                    Kg !== Gg && Gg && (Gg.dispatchEvent(new MouseEvent('mouseleave'), {
                        bubbles: !0
                    }), Gg = null), Kg && (Gg = Kg, Kg.dispatchEvent(new MouseEvent('mouseenter', {
                        bubbles: !0,
                        buttons: 1
                    })));
                }
        }), le(hf, 'mouseenter', Xf => {
            1 === Xf.buttons && hf.classList.add('is-pressed');
        }), le(hf, 'mouseup touchend click', qg => {
            if (document.body.style['-webkit-user-select'] = '', Gg) {
                qg.stopPropagation(), qg.preventDefault();
                const Ig = Jg;
                return Jg = null, void Ig.dispatchEvent(new MouseEvent('mouseup', {
                    bubbles: !0
                }));
            }
            if (hf.classList.remove('is-pressed'), hf.classList.add('is-active'), 'click' === qg.type && 0 !== qg.detail)
                return qg.stopPropagation(), void qg.preventDefault();
            setTimeout(() => hf.classList.remove('is-active'), 150);
            let Ig = hf.getAttribute('data-command-press-and-hold-end');
            const Jg = Date.now();
            (hf !== Eg || Jg < Dg + 300) && (Ig = null), !Ig && qg.altKey && qg.shiftKey && (Ig = hf.getAttribute('data-command-altshift')), !Ig && qg.altKey && (Ig = hf.getAttribute('data-command-alt')), !Ig && qg.shiftKey && (Ig = hf.getAttribute('data-command-shift')), Ig || (Ig = hf.getAttribute('data-command')), Ig && Xf(JSON.parse(Ig)), qg.stopPropagation(), qg.preventDefault();
        });
    }
    let Cg;

    function Dg() {
        var Eg;
        d();
        const Fg = document.querySelector('#mathlive-alternate-keys-panel');
        return Fg && (Fg.classList.remove('is-visible'), Fg.innerHTML = ''), null === (Eg = sg.scrim) || void 0 === Eg || Eg.close(), !1;
    }
    class Eg {
        setOptions(Xf) {
            var Fg, Gg;
            let Hg = '';
            if (this._element) {
                const Ig = this._element.querySelector('div.keyboard-layer.is-visible');
                Ig && (Hg = null !== (Fg = Ig.getAttribute('data-layer')) && void 0 !== Fg ? Fg : ''), this._element.remove(), this._element = void 0;
            }
            if (this.options = Xf, this.visible) {
                this.buildAndAttachElement(Xf.virtualKeyboardTheme);
                const Ig = this.element.querySelector(`.keyboard-layer[data-layer="${ Hg }"]`);
                Ig && (null === (Gg = this.element.querySelector('.keyboard-layer.is-visible')) || void 0 === Gg || Gg.classList.remove('is-visible'), Ig.classList.add('is-visible')), this.element.classList.add('is-visible');
            }
        }
        get element() {
            return this._element;
        }
        set element(Xf) {
            var Fg;
            this._element !== Xf && (null === (Fg = this._element) || void 0 === Fg || Fg.remove(), this._element = Xf);
        }
        get visible() {
            return this._visible;
        }
        set visible(Xf) {
            this._visible = Xf;
        }
        get height() {
            var Fg, Gg;
            return null !== (Gg = null === (Fg = this.element) || void 0 === Fg ? void 0 : Fg.offsetHeight) && void 0 !== Gg ? Gg : 0;
        }
        buildAndAttachElement(Xf) {
            var Fg;
            this.element = function(Xf, Fg) {
                var Gg, Hg, Ig, Jg;
                d();
                let Kg = '<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\n    <symbol id="svg-delete-backward" viewBox="0 0 576 512">\n      <path d="M432.1 208.1L385.9 256L432.1 303C442.3 312.4 442.3 327.6 432.1 336.1C423.6 346.3 408.4 346.3 399 336.1L352 289.9L304.1 336.1C295.6 346.3 280.4 346.3 271 336.1C261.7 327.6 261.7 312.4 271 303L318.1 256L271 208.1C261.7 199.6 261.7 184.4 271 175C280.4 165.7 295.6 165.7 304.1 175L352 222.1L399 175C408.4 165.7 423.6 165.7 432.1 175C442.3 184.4 442.3 199.6 432.1 208.1V208.1zM512 64C547.3 64 576 92.65 576 128V384C576 419.3 547.3 448 512 448H205.3C188.3 448 172 441.3 160 429.3L9.372 278.6C3.371 272.6 0 264.5 0 256C0 247.5 3.372 239.4 9.372 233.4L160 82.75C172 70.74 188.3 64 205.3 64L512 64zM528 128C528 119.2 520.8 112 512 112H205.3C201 112 196.9 113.7 193.9 116.7L54.63 256L193.9 395.3C196.9 398.3 201 400 205.3 400H512C520.8 400 528 392.8 528 384V128z"/>\n    </symbol>\n\n    <symbol id="svg-shift" viewBox="0 0 384 512">\n      <path d="M2.438 252.3C7.391 264.2 19.06 272 32 272h80v160c0 26.51 21.49 48 48 48h64C250.5 480 272 458.5 272 432v-160H352c12.94 0 24.61-7.797 29.56-19.75c4.953-11.97 2.219-25.72-6.938-34.88l-160-176C208.4 35.13 200.2 32 192 32S175.6 35.13 169.4 41.38l-160 176C.2188 226.5-2.516 240.3 2.438 252.3zM192 86.63L313.4 224H224v208H160V224H70.63L192 86.63z"/>\n    </symbol>\n\n    <symbol id="svg-commit" viewBox="0 0 512 512">\n      <path d="M135 432.1l-128-128C2.344 300.3 0 294.2 0 288s2.344-12.28 7.031-16.97l128-128c9.375-9.375 24.56-9.375 33.94 0s9.375 24.56 0 33.94L81.94 264H464v-208C464 42.75 474.8 32 488 32S512 42.75 512 56V288c0 13.25-10.75 24-24 24H81.94l87.03 87.03c9.375 9.375 9.375 24.56 0 33.94S144.4 442.3 135 432.1z"/>\n    </symbol>\n\n    <symbol id="svg-command" viewBox="0 0 640 512">\n      <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>\n    </symbol>\n\n    <symbol id="svg-undo" viewBox="0 0 512 512">\n      <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>\n    </symbol>\n    <symbol id="svg-redo" viewBox="0 0 512 512">\n      <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-arrow-left" viewBox="0 0 320 512">\n      <path d="M206.7 464.6l-183.1-191.1C18.22 267.1 16 261.1 16 256s2.219-11.97 6.688-16.59l183.1-191.1c9.152-9.594 24.34-9.906 33.9-.7187c9.625 9.125 9.938 24.37 .7187 33.91L73.24 256l168 175.4c9.219 9.5 8.906 24.78-.7187 33.91C231 474.5 215.8 474.2 206.7 464.6z"/>\n    </symbol>\n    <symbol id="svg-arrow-right" viewBox="0 0 320 512">\n      <path d="M113.3 47.41l183.1 191.1c4.469 4.625 6.688 10.62 6.688 16.59s-2.219 11.97-6.688 16.59l-183.1 191.1c-9.152 9.594-24.34 9.906-33.9 .7187c-9.625-9.125-9.938-24.38-.7187-33.91l168-175.4L78.71 80.6c-9.219-9.5-8.906-24.78 .7187-33.91C88.99 37.5 104.2 37.82 113.3 47.41z"/>\n    </symbol>\n    <symbol id="svg-tab" viewBox="0 0 448 512">\n      <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-copy" viewBox="0 0 448 512">\n      <path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z"/>\n    </symbol>\n    <symbol id="svg-angle-double-right" viewBox="0 0 320 512">\n      <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z"/>\n    </symbol>\n    <symbol id="svg-angle-double-left" viewBox="0 0 320 512">\n      <path d="M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z"/>\n    </symbol>\n    <symbol id="svg-trash" viewBox="0 0 448 512">\n      <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>\n    </symbol>\n</svg>\n        ';
                Xf.create(), Hg['foreground-color'] = [];
                for (const Lg of Object.keys(n))
                    Hg['foreground-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' + n[Lg] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                color: Lg
                            }
                        ]
                    });
                Hg['background-color'] = [];
                for (const Mg of Object.keys(m))
                    Hg['background-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; background:' + m[Mg] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                backgroundColor: Mg
                            }
                        ]
                    });
                Ig = {
                    ...Hg
                };
                for (const Ng of Object.keys(Ig))
                    Ig[Ng] = Ig[Ng].slice();
                for (let Og = 0; Og < 26; Og++) {
                    const Pg = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' [Og];
                    Ig[Pg] || (Ig[Pg] = []), Ig[Pg].unshift({
                        latex: '\\mathbb{' + Pg + '}',
                        aside: 'blackboard',
                        insert: '\\mathbb{' + Pg + '}'
                    }), Ig[Pg].unshift({
                        latex: '\\mathbf{' + Pg + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Pg + '}'
                    }), Ig[Pg].unshift({
                        latex: '\\mathsf{' + Pg + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Pg + '}'
                    }), Ig[Pg].unshift({
                        latex: '\\mathtt{' + Pg + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Pg + '}'
                    }), Ig[Pg].unshift({
                        latex: '\\mathcal{' + Pg + '}',
                        aside: 'calligraphy',
                        insert: '\\mathcal{' + Pg + '}'
                    }), Ig[Pg].unshift({
                        latex: '\\mathfrak{' + Pg + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Pg + '}'
                    });
                }
                for (let Pg = 0; Pg <= 26; Pg++) {
                    const Qg = 'abcdefghijklmnopqrstuvwxyz' [Pg];
                    Ig[Qg] || (Ig[Qg] = []), Ig[Qg].unshift({
                        latex: '\\mathsf{' + Qg + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Qg + '}'
                    }), Ig[Qg].unshift({
                        latex: '\\mathbf{' + Qg + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Qg + '}'
                    }), Ig[Qg].unshift({
                        latex: '\\mathtt{' + Qg + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Qg + '}'
                    }), Ig[Qg].unshift({
                        latex: '\\mathfrak{' + Qg + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Qg + '}'
                    });
                }
                for (let Qg = 0; Qg < 10; Qg++) {
                    const Rg = '0123456789' [Qg];
                    Ig[Rg] || (Ig[Rg] = []), Ig[Rg].unshift({
                        latex: '\\mathbf{' + Rg + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Rg + '}'
                    }), Ig[Rg].unshift({
                        latex: '\\mathsf{' + Rg + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Rg + '}'
                    }), Ig[Rg].unshift({
                        latex: '\\mathtt{' + Rg + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Rg + '}'
                    }), Ig[Rg].unshift({
                        latex: '\\mathcal{' + Rg + '}',
                        aside: 'script',
                        insert: '\\mathcal{' + Rg + '}'
                    }), Ig[Rg].unshift({
                        latex: '\\mathfrak{' + Rg + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Rg + '}'
                    });
                }
                let Rg = Qg.options.virtualKeyboards;
                Rg || (Rg = 'all'), Rg = Rg.replace(/\ball\b/i, 'numeric functions symbols roman  greek');
                const Sg = {
                        ...Jg,
                        ...null !== (Gg = Qg.options.customVirtualKeyboardLayers) && void 0 !== Gg ? Gg : {}
                    },
                    Tg = {
                        ...Fg,
                        ...null !== (Hg = Qg.options.customVirtualKeyboards) && void 0 !== Hg ? Hg : {}
                    },
                    Ug = Rg.replace(/\s+/g, ' ').split(' ');
                for (const Vg of Ug) {
                    if (!Tg[Vg])
                        continue;
                    let Wg = null !== (Ig = Tg[Vg].layers) && void 0 !== Ig ? Ig : [];
                    Tg[Vg].layer && Wg.push(Tg[Vg].layer), Wg = [...new Set(Wg)];
                    for (const Xg of Wg) {
                        if (!Sg[Xg])
                            break;
                        if ('object' == typeof Sg[Xg]) {
                            const Yg = Sg[Xg];
                            let Zg = '';
                            if ('string' == typeof Yg.styles ? Zg += `<style>${ Yg.styles }</style>` : 'object' == typeof Yg.styles && (Zg += `<style>${ Pg(Yg.styles) }</style>`), Yg.backdrop && (Zg += `<div class='${ Yg.backdrop }'>`), Yg.container && (Zg += `<div class='${ Yg.container }'>`), Yg.rows) {
                                Zg += '<div class=\'rows\'>';
                                for (const $g of Yg.rows) {
                                    Zg += '<ul>';
                                    for (const _g of $g) {
                                        if (Zg += '<li', _g.class) {
                                            let ah = _g.class;
                                            _g.layer && !/layer-switch/.test(ah) && (ah += ' layer-switch'), /separator/.test(ah) || (ah += ' keycap'), Zg += ` class="${ ah }"`;
                                        } else
                                            Zg += ' class="keycap"';
                                        if (_g.key && (Zg += ` data-key="${ _g.key }"`), _g.command && ('string' == typeof _g.command ? Zg += ` data-command='"${ _g.command }"'` : (Zg += ' data-command=\'', Zg += JSON.stringify(_g.command), Zg += '\'')), _g.insert && (Zg += ` data-insert="${ _g.insert }"`), _g.latex && (Zg += ` data-latex="${ _g.latex }"`), _g.aside && (Zg += ` data-aside="${ _g.aside }"`), _g.variants) {
                                            const ah = Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                                            Ig[ah] = _g.variants, Zg += ` data-alt-keys="${ ah }"`;
                                        }
                                        _g.shifted && (Zg += ` data-shifted="${ _g.shifted }"`), _g.shiftedCommand && (Zg += ` data-shifted-command="${ _g.shiftedCommand }"`), _g.layer && (Zg += ` data-layer="${ _g.layer }"`), Zg += `>${ _g.label ? _g.label : '' }</li>`;
                                    }
                                    Zg += '</ul>';
                                }
                                Zg += '</div>';
                            }
                            Yg.container && (Zg += '</div>'), Yg.backdrop && (Zg += '</div>'), Sg[Xg] = Zg;
                        }
                        Kg += `<div tabindex="-1" class='keyboard-layer' data-layer='${ Xg }'>`, Kg += Lg(Qg.options, Rg, Vg);
                        const Yg = Sg[Xg];
                        'string' == typeof Yg && (Kg += Ng(Qg.options, Yg)), Kg += '</div>';
                    }
                }
                const Wg = document.createElement('div');
                Wg.className = 'ML__keyboard', Vg ? Wg.classList.add(Vg) : Qg.options.virtualKeyboardTheme && Wg.classList.add(Qg.options.virtualKeyboardTheme);
                const Xg = document.createElement('div');
                Xg.className = 'ML__keyboard--plate', Xg.innerHTML = Qg.options.createHTML(Kg), Wg.appendChild(Xg);
                const Yg = Wg.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton');
                for (const Zg of Yg)
                    Zg.id = 'ML__k' + Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                Mg(Zg, [...Yg]);
                const $g = Wg.querySelectorAll('.layer-switch');
                for (const _g of $g)
                    _g.classList.contains('shift') ? Bg(_g => Zg.executeCommand(_g), _g, {
                        pressed: 'shiftKeyboardLayer',
                        default: [
                            'switchKeyboardLayer',
                            _g.getAttribute('data-layer')
                        ],
                        pressAndHoldEnd: 'unshiftKeyboardLayer'
                    }) : Bg(_g => Zg.executeCommand(_g), _g, {
                        default: [
                            'switchKeyboardLayer',
                            _g.getAttribute('data-layer')
                        ]
                    });
                const ah = Wg.querySelectorAll('.keyboard-layer');
                for (const bh of ah)
                    bh.addEventListener('mousedown', bh => {
                        bh.preventDefault(), bh.stopPropagation();
                    }), bh.addEventListener('touchstart', bh => {
                        bh.preventDefault(), bh.stopPropagation();
                    }, {
                        passive: !1
                    });
                return null === (Jg = ah[0]) || void 0 === Jg || Jg.classList.add('is-visible'), Wg;
            }(this, null != Xf ? Xf : ''), le(this.element, 'touchstart:passive mousedown', () => this.focusMathfield()), null === (Fg = this.options.virtualKeyboardContainer) || void 0 === Fg || Fg.appendChild(this.element);
        }
        handleEvent(Xf) {
            if (this.element)
                switch (Xf.type) {
                    case 'mouseup':
                    case 'blur':
                    case 'touchend':
                    case 'touchcancel':
                        document.body.style.userSelect = '', Og(this);
                }
        }
        focusMathfield() {
            var Fg, Gg;
            null === (Gg = null === (Fg = this._mathfield) || void 0 === Fg ? void 0 : Fg.focus) || void 0 === Gg || Gg.call(Fg);
        }
        blurMathfield() {
            var Hg, Ig;
            null === (Ig = null === (Hg = this._mathfield) || void 0 === Hg ? void 0 : Hg.blur) || void 0 === Ig || Ig.call(Hg);
        }
        stateChanged() {
            var Jg, Kg;
            null === (Kg = null === (Jg = this._mathfield) || void 0 === Jg ? void 0 : Jg.element) || void 0 === Kg || Kg.dispatchEvent(new Event('virtual-keyboard-toggle', {
                bubbles: !0,
                cancelable: !1,
                composed: !0
            }));
        }
        executeCommand(Xf) {
            var Fg, Gg, Hg;
            let Ig, Jg = [];
            return Td(Xf) ? (Ig = Xf[0], Jg = Xf.slice(1)) : Ig = Xf, Ig = Ig.replace(/-\w/g, Xf => Xf[1].toUpperCase()), 'virtual-keyboard' === (null === (Fg = vf[Ig]) || void 0 === Fg ? void 0 : Fg.target) ? vf[Ig].fn(this, ...Jg) : null !== (Hg = null === (Gg = this._mathfield) || void 0 === Gg ? void 0 : Gg.executeCommand(Xf)) && void 0 !== Hg && Hg;
        }
        create() {
            this.virtualKeyboardStylesheet || (Cg || (Cg = Ge(Ag).toString(36)), this.virtualKeyboardStylesheet = He(null, Ag, Cg)), this.coreStylesheet || (this.coreStylesheet = He(null, Ye, Ge(Ye).toString(36))), null !== this.options.fontsDirectory && Of(this.options.fontsDirectory);
        }
        enable() {
            Hg() && (window.addEventListener('mouseup', this), window.addEventListener('blur', this), window.addEventListener('touchend', this), window.addEventListener('touchcancel', this));
        }
        disable() {
            Hg() && (window.removeEventListener('mouseup', this), window.removeEventListener('blur', this), window.removeEventListener('touchend', this), window.removeEventListener('touchcancel', this));
        }
        dispose() {}
        constructor(Xf, hf) {
            this.originalContainerBottomPadding = null, this.options = Xf, this.visible = !1, this._mathfield = hf, this.coreStylesheet = null, this.virtualKeyboardStylesheet = null;
        }
    }
    const Fg = {
            numeric: {
                tooltip: 'keyboard.tooltip.numeric',
                layer: 'math',
                label: '123',
                layers: ['math']
            },
            roman: {
                tooltip: 'keyboard.tooltip.roman',
                layer: 'lower-roman',
                label: 'ABC',
                layers: [
                    'lower-roman',
                    'upper-roman'
                ]
            },
            greek: {
                tooltip: 'keyboard.tooltip.greek',
                layer: 'lower-greek',
                label: '&alpha;&beta;&gamma;',
                classes: 'tex-math',
                layers: [
                    'lower-greek',
                    'upper-greek'
                ]
            },
            functions: {
                tooltip: 'keyboard.tooltip.functions',
                layer: 'functions',
                label: '<i>f</i>&thinsp;()',
                classes: 'tex',
                layers: ['functions']
            },
            symbols: {
                tooltip: 'keyboard.tooltip.symbols',
                layer: 'symbols',
                label: '&infin;\u2260\u2208',
                classes: 'tex',
                layers: ['symbols']
            },
            latex: {
                tooltip: 'keyboard.tooltip.command',
                command: [
                    'switchMode',
                    'latex'
                ],
                label: '<svg class="svg-glyph"><use xlink:href=\'#svg-command\' /></svg>',
                layers: [
                    'latex-lower',
                    'latex-upper',
                    'latex-symbols'
                ]
            },
            style: {
                tooltip: 'keyboard.tooltip.style',
                layer: 'style',
                label: '<b>b</b><i>i</i>\uD835\uDD39'
            }
        },
        Gg = {
            '\\varphi ': [
                '&Phi;',
                '\\Phi '
            ],
            '\\varsigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\epsilon ': [
                '&#x0190;',
                '\\char"0190'
            ],
            '\\rho ': [
                '&#x3A1',
                '\\char"3A1'
            ],
            '\\tau ': [
                '&#x3A4;',
                '\\char"3A4'
            ],
            '\\upsilon ': [
                '&Upsilon;',
                '\\Upsilon '
            ],
            '\\theta ': [
                '&Theta;',
                '\\Theta '
            ],
            '\\iota ': [
                '&Iota;',
                '\\char"399'
            ],
            '\\omicron ': [
                '&#x039F;',
                '\\char"39F'
            ],
            '\\pi ': [
                '&Pi;',
                '\\Pi '
            ],
            '\\alpha ': [
                '&Alpha;',
                '\\char"391'
            ],
            '\\sigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\delta ': [
                '&Delta;',
                '\\Delta '
            ],
            '\\phi ': [
                '&#x03a6;',
                '\\Phi '
            ],
            '\\gamma ': [
                '&Gamma;',
                '\\Gamma '
            ],
            '\\eta ': [
                '&Eta;',
                '\\char"397'
            ],
            '\\xi ': [
                '&Xi;',
                '\\Xi '
            ],
            '\\kappa ': [
                '&Kappa;',
                '\\char"39A'
            ],
            '\\lambda ': [
                '&Lambda;',
                '\\Lambda '
            ],
            '\\zeta ': [
                '&Zeta;',
                '\\char"396'
            ],
            '\\chi ': [
                '&Chi;',
                '\\char"3A7'
            ],
            '\\psi ': [
                '&Psi;',
                '\\Psi '
            ],
            '\\omega ': [
                '&Omega;',
                '\\Omega '
            ],
            '\\beta ': [
                '&Beta;',
                '\\char"392'
            ],
            '\\nu ': [
                '&Nu;',
                '\\char"39D'
            ],
            '\\mu ': [
                '&Mu;',
                '\\char"39C'
            ]
        },
        Hg = {
            0: [
                '\\emptyset',
                '\\varnothing',
                '\\infty',
                {
                    latex: '#?_0',
                    insert: '#@_0'
                },
                '\\circ',
                '\\bigcirc',
                '\\bullet'
            ],
            2: [
                '\\frac{1}{2}',
                {
                    latex: '#?^2',
                    insert: '#@^2'
                }
            ],
            3: [
                '\\frac{1}{3}',
                {
                    latex: '#?^3',
                    insert: '#@^3'
                }
            ],
            '.': [
                '.',
                ',',
                ';',
                '\\colon',
                {
                    latex: ':',
                    aside: 'ratio'
                },
                {
                    latex: '\\cdotp',
                    aside: 'center dot',
                    class: 'box'
                },
                {
                    latex: '\\cdots',
                    aside: 'center ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\ldotp',
                    aside: 'low dot',
                    class: 'box'
                },
                {
                    latex: '\\ldots',
                    aside: 'low ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\vdots',
                    aside: '',
                    class: 'box'
                },
                {
                    latex: '\\ddots',
                    aside: '',
                    class: 'box'
                },
                '\\odot',
                '\\oslash',
                '\\circledcirc'
            ],
            '*': [
                '\\cdot',
                '\\ast',
                '\\star',
                '\\bigstar',
                '\\ltimes',
                '\\rtimes',
                '\\rightthreetimes',
                '\\leftthreetimes',
                '\\intercal',
                '\\prod',
                {
                    latex: '\\prod_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                }
            ],
            '+': [
                '\\pm',
                '\\mp',
                '\\sum',
                {
                    latex: '\\sum_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                },
                '\\dotplus',
                '\\oplus'
            ],
            '-': [
                '\\pm',
                '\\mp',
                '\\ominus',
                '\\vert #0  \\vert'
            ],
            '/': [
                '\\divideontimes',
                '/',
                '\\div',
                '\\%'
            ],
            '(': [
                '\\left( #0\\right)',
                '\\left[ #0\\right]',
                '\\left\\{ #0\\right\\}',
                '\\left\\langle #0\\right\\rangle',
                '\\lfloor',
                '\\llcorner',
                '(',
                '\\lbrack',
                '\\lvert',
                '\\lVert',
                '\\lgroup',
                '\\langle',
                '\\lceil',
                '\\ulcorner',
                '\\lmoustache',
                '\\lbrace'
            ],
            ')': [
                '\\rfloor',
                '\\lrcorner',
                ')',
                '\\rbrack',
                '\\rvert',
                '\\rVert',
                '\\rgroup',
                '\\rangle',
                '\\rceil',
                '\\urcorner',
                '\\rmoustache',
                '\\rbrace'
            ],
            '=': [
                '\\cong',
                '\\asymp',
                '\\equiv',
                '\\differencedelta',
                '\\varpropto',
                '\\thickapprox',
                '\\approxeq',
                '\\thicksim',
                '\\backsim',
                '\\eqsim',
                '\\simeq',
                '\\Bumpeq',
                '\\bumpeq',
                '\\doteq',
                '\\Doteq',
                '\\fallingdotseq',
                '\\risingdotseq',
                '\\coloneq',
                '\\eqcirc',
                '\\circeq',
                '\\triangleq',
                '\\between'
            ],
            '!=': [
                '\\neq',
                '\\ncong',
                '',
                '\\nsim'
            ],
            '<': [
                '\\leq',
                '\\leqq',
                '\\lneqq',
                '\\ll',
                '\\lessgtr',
                '\\nless',
                '\\nleq',
                '\\lesssim',
                '\\precsim',
                '\\prec',
                '\\nprec',
                '\\preccurlyeq',
                '\\lessdot'
            ],
            '>': [
                '\\geq',
                '\\geqq',
                '\\gneqq',
                '\\gg',
                '\\gtrless',
                '\\ngtr',
                '\\ngeq',
                '\\gtrsim',
                '\\succsim',
                '\\succ',
                '\\nsucc',
                '\\succcurlyeq',
                '\\gtrdot'
            ],
            in: ['\\owns'],
            '!in': ['\\backepsilon'],
            subset: [
                '\\subseteq',
                '\\nsubset',
                '\\nsubseteq'
            ],
            superset: [
                '\\supseteq',
                '\\nsupset',
                '\\nsupseteq'
            ],
            infinity: [
                '\\aleph_0',
                '\\aleph_1',
                '\\omega',
                '\\mathfrak{m}'
            ],
            'numeric-pi': [
                '\\prod',
                '\\theta',
                '\\rho',
                '\\sin',
                '\\cos',
                '\\tan'
            ],
            ee: [
                '\\times 10^{#?}',
                '\\ln',
                '\\ln_{10}',
                '\\log'
            ],
            '^': ['_{#?}'],
            int: [{
                    latex: '\\int_{#?}^{#?}',
                    class: 'small'
                },
                {
                    latex: '\\int',
                    class: 'small'
                },
                {
                    latex: '\\smallint',
                    class: 'small'
                },
                {
                    latex: '\\iint',
                    class: 'small'
                },
                {
                    latex: '\\iiint',
                    class: 'small'
                },
                {
                    latex: '\\oint',
                    class: 'small'
                },
                {
                    latex: '\\dfrac{\\rd}{\\rd x}',
                    class: 'small'
                },
                {
                    latex: '\\frac{\\partial}{\\partial x}',
                    class: 'small'
                },
                '\\capitalDifferentialD',
                '\\rd',
                '\\partial'
            ],
            nabla: [
                '\\nabla\\times',
                '\\nabla\\cdot',
                '\\nabla^{2}'
            ],
            '!': [
                '!!',
                '\\Gamma',
                '\\Pi'
            ],
            accents: [
                '\\bar{#@}',
                '\\vec{#@}',
                '\\hat{#@}',
                '\\check{#@}',
                '\\dot{#@}',
                '\\ddot{#@}',
                '\\mathring{#@}',
                '\\breve{#@}',
                '\\acute{#@}',
                '\\tilde{#@}',
                '\\grave{#@}'
            ],
            underline: [
                '\\underbrace{#@}',
                '\\underlinesegment{#@}',
                '\\underleftrightarrow{#@}',
                '\\underrightarrow{#@}',
                '\\underleftarrow{#@}',
                '\\undergroup{#@}'
            ],
            overline: [
                '\\overbrace{#@}',
                '\\overlinesegment{#@}',
                '\\overleftrightarrow{#@}',
                '\\overrightarrow{#@}',
                '\\overleftarrow{#@}',
                '\\overgroup{#@}'
            ],
            xleftarrows: [
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xLeftarrow{#@}',
                '\\xleftharpoonup{#@}',
                '\\xleftharpoondown{#@}',
                '\\xtwoheadleftarrow{#@}',
                '\\xhookleftarrow{#@}',
                '\\xtofrom{#@}',
                '\\xleftequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            xrightarrows: [
                '\\xrightarrow{#@}',
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xRightarrow{#@}',
                '\\xrightharpoonup{#@}',
                '\\xrightharpoondown{#@}',
                '\\xtwoheadrightarrow{#@}',
                '\\xrightleftharpoons{#@}',
                '\\xhookrightarrow{#@}',
                '\\xmapsto{#@}',
                '\\xrightequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            A: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            a: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            b: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            B: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            c: [{
                latex: '\\C',
                aside: 'set of complex numbers'
            }],
            d: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            D: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            e: [{
                    latex: '\\exponentialE',
                    aside: 'exponential e'
                },
                {
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                }
            ],
            g: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            G: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            h: [{
                    latex: '\\hbar',
                    aside: 'h bar'
                },
                {
                    latex: '\\hslash',
                    aside: 'h slash'
                }
            ],
            i: [{
                latex: '\\imaginaryI',
                aside: 'imaginary i'
            }],
            j: [{
                latex: '\\imaginaryJ',
                aside: 'imaginary j'
            }],
            l: [{
                latex: '\\ell',
                aside: 'ell'
            }],
            n: [{
                latex: '\\mathbb{N}',
                aside: 'set of natural numbers'
            }],
            p: [{
                latex: '\\mathbb{P}',
                aside: 'set of primes'
            }],
            q: [{
                latex: '\\mathbb{Q}',
                aside: 'set of rational numbers'
            }],
            r: [{
                latex: '\\mathbb{R}',
                aside: 'set of real numbers'
            }],
            z: [{
                latex: '\\mathbb{Z}',
                aside: 'set of integers'
            }],
            'x-var': [
                'y',
                'z',
                't',
                'r',
                {
                    latex: 'f(#?)',
                    class: 'small'
                },
                {
                    latex: 'g(#?)',
                    class: 'small'
                },
                'x^2',
                'x^n',
                'x_n',
                'x_{n+1}',
                'x_i',
                'x_{i+1}'
            ],
            'n-var': [
                'i',
                'j',
                'p',
                'k',
                'a',
                'u'
            ],
            ii: [
                '\\Re',
                '\\Im',
                '\\imaginaryJ',
                '\\Vert #0 \\Vert'
            ],
            logic: [{
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                },
                {
                    latex: '\\ni',
                    aside: 'such that'
                },
                {
                    latex: '\\Colon',
                    aside: 'such that'
                },
                {
                    latex: '\\implies',
                    aside: 'implies'
                },
                {
                    latex: '\\impliedby',
                    aside: 'implied by'
                },
                {
                    latex: '\\iff',
                    aside: 'if and only if'
                },
                {
                    latex: '\\land',
                    aside: 'and'
                },
                {
                    latex: '\\lor',
                    aside: 'or'
                },
                {
                    latex: '\\oplus',
                    aside: 'xor'
                },
                {
                    latex: '\\lnot',
                    aside: 'not'
                },
                {
                    latex: '\\downarrow',
                    aside: 'nor'
                },
                {
                    latex: '\\uparrow',
                    aside: 'nand'
                },
                {
                    latex: '\\curlywedge',
                    aside: 'nor'
                },
                {
                    latex: '\\bar\\curlywedge',
                    aside: 'nand'
                },
                {
                    latex: '\\therefore',
                    aside: 'therefore'
                },
                {
                    latex: '\\because',
                    aside: 'because'
                },
                {
                    latex: '^\\biconditional',
                    aside: 'biconditional'
                },
                '\\leftrightarrow',
                '\\Leftrightarrow',
                '\\to',
                '\\models',
                '\\vdash',
                '\\gets',
                '\\dashv',
                '\\roundimplies'
            ],
            'set-operators': [
                '\\cap',
                '\\cup',
                '\\setminus',
                '\\smallsetminus',
                '\\complement'
            ],
            'set-relations': [
                '\\in',
                '\\notin',
                '\\ni',
                '\\owns',
                '\\subset',
                '\\supset',
                '\\subseteq',
                '\\supseteq',
                '\\subsetneq',
                '\\supsetneq',
                '\\varsubsetneq',
                '\\subsetneqq',
                '\\nsubset',
                '\\nsupset',
                '\\nsubseteq',
                '\\nsupseteq'
            ],
            space: [{
                    latex: '\\char"203A\\!\\char"2039',
                    insert: '\\!',
                    aside: 'negative thin space<br>\u207B\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\,\\unicode{"2039}',
                    insert: '\\,',
                    aside: 'thin space<br>\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\:\\unicode{"2039}',
                    insert: '\\:',
                    aside: 'medium space<br>\u2074\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\;\\unicode{"2039}',
                    insert: '\\;',
                    aside: 'thick space<br>\u2075\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\ \\unicode{"2039}',
                    insert: '\\ ',
                    aside: '\u2153 em'
                },
                {
                    latex: '\\unicode{"203A}\\enspace\\unicode{"2039}',
                    insert: '\\enspace',
                    aside: '\xBD em'
                },
                {
                    latex: '\\unicode{"203A}\\quad\\unicode{"2039}',
                    insert: '\\quad',
                    aside: '1 em'
                },
                {
                    latex: '\\unicode{"203A}\\qquad\\unicode{"2039}',
                    insert: '\\qquad',
                    aside: '2 em'
                }
            ],
            delete: [{
                label: '<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>',
                command: 'deleteAll'
            }],
            '->|': []
        };
    let Ig = {};
    const Jg = {
        math: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'x-var\'><i>x</i></li>\n                <li class=\'keycap tex\' data-alt-keys=\'n-var\'><i>n</i></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-1\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'\\exponentialE\' data-alt-keys=\'ee\'>e</li>\n                <li class=\'keycap tex\' data-latex=\'\\imaginaryI\' data-alt-keys=\'ii\'>i</li>\n                <li class=\'keycap tex\' data-latex=\'\\pi\' data-alt-keys=\'numeric-pi\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-key=\'<\' data-alt-keys=\'<\'>&lt;</li>\n                <li class=\'keycap tex\' data-key=\'>\' data-alt-keys=\'>\'>&gt;</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-2\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'#@^{2}\' data-latex=\'x^2\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'^\' data-insert=\'#@^{#?}\' data-latex=\'x^\\placeholder\'></li>\n                <li class=\'keycap tex small\' data-insert=\'\\sqrt{#0}\' data-latex=\'\\sqrt{#0}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' >(</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' >)</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-3\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap small\' data-alt-keys=\'int\' data-latex=\'\\int_0^\\infty\'></li>\n                <li class=\'keycap\' data-latex=\'\\forall\' data-alt-keys=\'logic\' ></li>\n                <li class=\'action font-glyph bottom right\' data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box\'></span></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-4\'/>\n                <li class=\'separator w5\'></li>\n                <arrows/>\n            </ul>\n        </div>\n    ',
        'lower-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'lower-1\' shift-layer=\'upper-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'lower-2\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'lower-3\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' >,</li>\n                <li class=\'keycap w50\' data-key=\' \' data-alt-keys=\'space\'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'upper-1\'  shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'upper-2\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'upper-3\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' data-alt-keys=\'.\'>;</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        symbols: '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrace \'>{</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrace \'>}</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xleftarrows\' data-latex=\'\\leftarrow\' ></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xrightarrows\' data-latex=\'\\rightarrow\' ></li>\n                <li class=\'keycap tex\' data-alt-keys=\'overline\' data-latex=\'\\overline{#@}\' data-aside=\'overline\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'underline\' data-latex=\'\\underline{#@}\' data-aside=\'underline\'></li>\n                <li class=\'keycap w15\' data-insert=\'\\ulcorner#0\\urcorner \'><span><sup>&#x250c;</sup><span><span style=\'color:#ddd\'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'nabla\' data-insert=\'\\nabla \'>&#x2207;<aside>nabla</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'infinity\' data-insert=\'\\infty \'>&#x221e;</li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrack \'>[</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrack \'>]</li>\n                <li class=\'separator w5\'></li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'in\' data-insert=\'\\in \'>&#x2208;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'!in\' data-insert=\'\\notin \'>&#x2209;</li>\n                <li class=\'keycap tex\' data-insert=\'\\Re \'>&#x211c;<aside>Real</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Im \'>&#x2111;<aside>Imaginary</aside></li>\n                <li class=\'keycap w15\' data-insert=\'\\llcorner#0\\lrcorner \'><span><sub>&#x2514;</sub><span style=\'color:#ddd\'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>\n\n                <li class=\'keycap tex\' data-insert=\'\\partial \'>&#x2202;<aside>partial<br>derivative</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\emptyset \'>&#x2205;<aside>empty set</aside></li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\langle \'>&#x27e8;</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rangle \'>&#x27e9;</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'subset\' data-insert=\'\\subset \'>&#x2282;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'superset\' data-insert=\'\\supset \'>&#x2283;</li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'accents\' data-insert=\'\\vec{#@}\' data-latex=\'\\vec{#?}\' data-aside=\'vector\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'absnorm\' data-insert=\'\\left| #0 \\right|\' data-latex=\'\\left| #? \\right|\' data-aside=\'abs\'></li>\n\n                <li class=\'keycap tex\' data-key=\'!\' data-alt-keys=\'!\'>!<aside>factorial</aside></li>\n                <li class=\'keycap\' data-latex=\'^{\\prime} \'><span><sup><span><span style=\'color:#ddd\'>o</span>&#x2032</sup></span><aside>prime</aside></li>\n\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-insert=\',\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\cdot \'>&#x22c5;<aside>centered dot</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\colon \'>:<aside>colon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\circ \'>&#x2218;<aside>circle</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\approx \'>&#x2248;<aside>approx.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\ne \'>&#x2260;</li>\n                <li class=\'keycap tex\' data-insert=\'\\pm \'>&#x00b1;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'lower-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\varphi \'><i>&#x03c6;</i><aside>phi var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varsigma \'><i>&#x03c2;</i><aside>sigma var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\epsilon \'><i>&#x03f5;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\rho \'><i>&rho;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\tau \'><i>&tau;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\upsilon \'><i>&upsilon;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\theta \'><i>&theta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\iota \'><i>&iota;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omicron \'>&omicron;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\pi \'><i>&pi;</i></li>\n            </ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\alpha \' data-shifted=\'&Alpha;\' data-shifted-command=\'["insert","\\\\char\\"391"]\'><i>&alpha;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\sigma \'><i>&sigma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\delta \'><i>&delta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\phi \'><i>&#x03d5;</i></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\gamma \'><i>&gamma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\eta \'><i>&eta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\xi \'><i>&xi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\kappa \'><i>&kappa;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\lambda \'><i>&lambda;</i></li>\n            </ul>\n            <ul><li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'upper-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\zeta \'><i>&zeta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\chi \'><i>&chi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\psi \'><i>&psi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omega \'><i>&omega;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\beta \'><i>&beta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\nu \'><i>&nu;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\mu \'><i>&mu;</i></li>\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'keycap \' data-key=\' \'>&nbsp;</li>\n                <li class=\'keycap\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\varepsilon \'><i>&#x03b5;</i><aside>epsilon var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\vartheta \'><i>&#x03d1;</i><aside>theta var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varkappa \'><i>&#x3f0;</i><aside>kappa var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varpi \'><i>&#x03d6;<aside>pi var.</aside></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\varrho \'><i>&#x03f1;</i><aside>rho var.</aside></li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\Phi \'>&Phi;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"0190\'>&#x0190;<aside>epsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A1\'>&#x3A1;<aside>rho</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A4\'>&#x3A4;<aside>tau</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Upsilon \'>&Upsilon;<aside>upsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Theta \'>&Theta;<aside>theta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"399\'>&Iota;<aside>iota</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39F\'>&#x039F;<aside>omicron</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Pi \'>&Pi;<aside>pi</aside></li></ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\char"391\'>&#x391;<aside>alpha</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Delta \'>&Delta;<aside>delta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Phi \'>&#x03a6;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Gamma \'>&Gamma;<aside>gamma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"397\'>&Eta;<aside>eta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Xi \'>&Xi;<aside>xi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39A\'>&Kappa;<aside>kappa</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Lambda \'>&Lambda;<aside>lambda</aside></li></ul>\n            <ul><li class=\'shift modifier font-glyph bottom left selected w15 layer-switch\' data-layer=\'lower-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"396\'>&Zeta;<aside>zeta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A7\'>&Chi;<aside>chi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Psi \'>&Psi;<aside>psi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Omega \'>&Omega;<aside>omega</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"392\'>&Beta;<aside>beta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39D\'>&Nu;<aside>nu</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39C\'>&Mu;<aside>mu</aside></li>\n                <li class=\'action font-glyph bottom right w15\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul>\n                <li class=\'separator w10\'>&nbsp;</li>\n                <li class=\'keycap\'>.</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-lower': '\n        <div class=\'rows\'>\n            <ul><row name=\'lower-1\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-2\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-3\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'>01#</li>\n                <li class=\'keycap tt\' data-shifted=\'[\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "["]\'>{</li>\n                <li class=\'keycap tt\' data-shifted=\']\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "]"]\'>}</li>\n                <li class=\'keycap tt\' data-shifted=\'(\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "("]\'>^</li>\n                <li class=\'keycap tt\' data-shifted=\')\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", ")"]\'>_</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-upper': '\n        <div class=\'rows\'>\n            <ul><row name=\'upper-1\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-2\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-3\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'01#</li>\n                <li class=\'keycap tt\'>[</li>\n                <li class=\'keycap tt\'>]</li>\n                <li class=\'keycap tt\'>(</li>\n                <li class=\'keycap tt\'>)</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-symbols': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tt\'>1</li><li class=\'keycap tt\'>2</li><li class=\'keycap tt\'>3</li><li class=\'keycap tt\'>4</li><li class=\'keycap tt\'>5</li><li class=\'keycap tt\'>6</li><li class=\'keycap tt\'>7</li><li class=\'keycap tt\'>8</li><li class=\'keycap tt\'>9</li><li class=\'keycap tt\'>0</li></ul>\n            <ul><li class=\'keycap tt\'>!</li><li class=\'keycap tt\'>@</li><li class=\'keycap tt\'>#</li><li class=\'keycap tt\'>$</li><li class=\'keycap tt\'>%</li><li class=\'keycap tt\'>^</li><li class=\'keycap tt\'>&</li><li class=\'keycap tt\'>*</li><li class=\'keycap tt\'>+</li><li class=\'keycap tt\'>=</li></ul>\n            <ul>\n                <li class=\'keycap tt\'>\\</li>\n                <li class=\'keycap tt\'>|</li>\n                <li class=\'keycap tt\'>/</li>\n                <li class=\'keycap tt\'>`</li>\n                <li class=\'keycap tt\'>;</li>\n                <li class=\'keycap tt\'>:</li>\n                <li class=\'keycap tt\'>?</li>\n                <li class=\'keycap tt\'>\'</li>\n                <li class=\'keycap tt\'>"</li>\n                <li class=\'action font-glyph bottom right\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-lower\'>abc</li>\n                <li class=\'keycap tt\'>&lt;</li>\n                <li class=\'keycap tt\'>&gt;</li>\n                <li class=\'keycap tt\'>~</li>\n                <li class=\'keycap tt\'>,</li>\n                <li class=\'keycap tt\'>.</li>\n                <li class=\'keycap\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        functions: '\n        <div class=\'rows\'>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin^{-1}\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\ln\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\exponentialE^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{lcm}(#?)\' data-latex=\'\\operatorname{lcm}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{ceil}(#?)\' data-latex=\'\\operatorname{ceil}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\lim_{n\\to\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\int\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{abs}(#?)\' data-latex=\'\\operatorname{abs}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\ln_{10}\'></li>\n                <li class=\'fnbutton\' data-latex=\'10^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{gcd}(#?)\' data-latex=\'\\operatorname{gcd}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{floor}(#?)\' data-latex=\'\\operatorname{floor}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\sum_{n\\mathop=0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\int_{0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{sign}(#?)\' data-latex=\'\\operatorname{sign}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\log_{#?}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\sqrt[#?]{#0}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'#0 \\mod\' data-latex=\'\\mod\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{round}(#?) \' data-latex=\'\\operatorname{round}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\prod_{n\\mathop=0}^{\\infty}\' data-latex=\'{\\scriptstyle \\prod_{n=0}^{\\infty}}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\frac{\\differentialD #0}{\\differentialD x}\'></li>\n                <li class=\'action font-glyph bottom right\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\'>(</li>\n                <li class=\'fnbutton\'>)</li>\n                <li class=\'fnbutton\' data-insert=\'^{#?}\' data-latex=\'x^{#?}\'></li>\n                <li class=\'fnbutton\' data-insert=\'_{#?}\' data-latex=\'x_{#?}\'></li>\n                <li class=\'keycap w20 \' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        style: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590\'></span></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"3"}]\' data-latex=\'\\scriptsize\\text{small}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"5"}]\' data-latex=\'\\scriptsize\\text{normal}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"9"}]\' data-latex=\'\\huge\\text{big}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-latex=\'\\langle\' data-command=\'["insert", "\\\\langle", {"smartFence":true}]\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"l"}]\' data-latex=\'\\fontseries{l}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"m"}]\' data-latex=\'\\fontseries{m}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"b"}]\' data-latex=\'\\fontseries{b}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"bx"}]\' data-latex=\'\\fontseries{bx}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"sb"}]\' data-latex=\'\\fontseries{sb}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"c"}]\' data-latex=\'\\fontseries{c}\\text{Ab}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"up"}]\' data-latex=\'\\textup{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"it"}]\' data-latex=\'\\textit{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sl"}]\' data-latex=\'\\textsl{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sc"}]\' data-latex=\'\\textsc{Ab}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-insert=\'\\emph{#@} \' data-latex=\'\\text{\\emph{emph}}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmr"}]\' data-latex=\'\\textrm{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmtt"}]\' data-latex=\'\\texttt{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmss"}]\' data-latex=\'\\textsf{Az}\'></li>\n\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"bb"}]\'  data-latex=\'\\mathbb{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"scr"}]\'  data-latex=\'\\mathscr{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cal"}]\' data-latex=\'\\mathcal{A1}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"frak"}]\' data-latex=\'\\mathfrak{Az}\'></li>\n            </ul>\n        </div>'
    };

    function Kg(Xf, hf) {
        Xf = Xf.replace(/(^|[^\\])#@/g, '$1#?');
        const Lg = ud(),
            Mg = new kc('root', Lg);
        return Mg.body = Rc(Xf, Lg, {
            parseMode: 'math',
            args: hf
        }), Tb(Ob(Rb(new Mb(Mg.render(new Cb({
            registers: Lg.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function Lg(Xf, hf, qg) {
        var Mg, Ng, Og;
        let Pg = '<div class=\'left\'>';
        const Qg = hf.replace(/\s+/g, ' ').split(' ');
        if (Qg.length > 1) {
            const Rg = {
                ...Fg,
                ...null !== (Mg = Xf.customVirtualKeyboards) && void 0 !== Mg ? Mg : {}
            };
            for (const Sg of Qg) {
                if (!Rg[Sg])
                    break;
                Pg += '<div class=\'', Sg === qg ? Pg += 'selected ' : Rg[Sg].command ? Pg += 'action ' : Pg += 'layer-switch ', Pg += (null !== (Ng = Rg[Sg].classes) && void 0 !== Ng ? Ng : '') + '\'', Rg[Sg].tooltip && (Pg += 'data-tooltip=\'' + (null !== (Og = j(Rg[Sg].tooltip)) && void 0 !== Og ? Og : Rg[Sg].tooltip) + '\' '), Sg !== qg && ('string' == typeof Rg[Sg].command ? Pg += `data-command='"${ Rg[Sg].command }"'` : Array.isArray(Rg[Sg].command) && (Pg += `data-command='"${ Rg[Sg].command.join('') }"'`), Rg[Sg].layer && (Pg += 'data-layer=\'' + Rg[Sg].layer + '\'')), Pg += '>' + Rg[Sg].label + '</div>';
            }
        }
        Pg += '</div>';
        const Rg = 'default' === Xf.virtualKeyboardToolbar ? [
                'copyToClipboard',
                'undo',
                'redo'
            ] : [],
            Sg = {
                copyToClipboard: `\n            <div class='action'\n                data-command='"copyToClipboard"'\n                data-tooltip='${ j('tooltip.copy to clipboard') }'>\n                <svg><use xlink:href='#svg-copy' /></svg>\n            </div>\n        `,
                undo: `\n            <div class='action disabled'\n                data-command='"undo"'\n                data-tooltip='${ j('tooltip.undo') }'>\n                <svg><use xlink:href='#svg-undo' /></svg>\n            </div>\n        `,
                redo: `\n            <div class='action disabled'\n                data-command='"redo"'\n                data-tooltip='${ j('tooltip.redo') }'>\n                <svg><use xlink:href='#svg-redo' /></svg>\n            </div>\n        `
            };
        return Rg.length > 0 && (Pg += `\n            <div class='right'>\n                ${ Rg.map(Xf => Sg[Xf]).join('') }\n            </div>\n        `), '<div class=\'keyboard-toolbar\' role=\'toolbar\'>' + Pg + '</div>';
    }

    function Mg(Xf, hf, qg) {
        var Ng, Og;
        for (const Pg of hf) {
            let Qg;
            Pg.getAttribute('data-latex') ? Qg = Kg(Pg.getAttribute('data-latex').replace(/&quot;/g, '"'), () => '\\placeholder{}') : Pg.getAttribute('data-insert') && '' === Pg.innerHTML ? Qg = Kg(Pg.getAttribute('data-insert').replace(/&quot;/g, '"'), () => '\\placeholder{}') : Pg.getAttribute('data-content') && (Qg = Pg.getAttribute('data-content').replace(/&quot;/g, '"')), Pg.getAttribute('data-aside') && (Qg = (null != Qg ? Qg : '') + '<aside>' + Pg.getAttribute('data-aside').replace(/&quot;/g, '"') + '</aside>'), void 0 !== Qg && (Pg.innerHTML = Xf.options.createHTML(Qg)), Pg.getAttribute('data-classes') && Pg.classList.add(Pg.getAttribute('data-classes'));
            const Rg = null === (Ng = Pg.getAttribute('data-insert')) || void 0 === Ng ? void 0 : Ng.replace(/&quot;/g, '"');
            let Sg;
            Rg && Gg[Rg] && (Pg.dataset.shifted = Gg[Rg][0], Pg.dataset.shiftedCommand = JSON.stringify([
                'insertAndUnshiftKeyboardLayer',
                Gg[Rg][1]
            ]));
            const Tg = Pg.getAttribute('data-command');
            if (Tg)
                if (/^[a-zA-Z]+$/.test(Tg))
                    Sg = Tg;
                else
                    try {
                        Sg = JSON.parse(Tg);
                    } catch (Xf) {}
            else
                Sg = Pg.getAttribute('data-insert') ? [
                    'insert',
                    Pg.getAttribute('data-insert'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : Pg.getAttribute('data-latex') ? [
                    'insert',
                    Pg.getAttribute('data-latex'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : [
                    'typedText',
                    null !== (Og = Pg.getAttribute('data-key')) && void 0 !== Og ? Og : Pg.textContent,
                    {
                        focus: !0,
                        feedback: !0,
                        simulateKeystroke: !0
                    }
                ];
            if (Sg) {
                qg && (Sg = [
                    qg,
                    Sg
                ]);
                let Ug = Vg;
                const Wg = Pg.getAttribute('data-alt-keys');
                Wg && Ig[Wg] && (Ug = {
                    default: Vg,
                    pressAndHoldStart: [
                        'showAlternateKeys',
                        Wg
                    ],
                    pressAndHoldEnd: 'hideAlternateKeys'
                }), Bg(Ug => Xf.executeCommand(Ug), Pg, Ug);
            }
        }
    }

    function Ng(Xf, hf) {
        var Og, Pg, Qg, Rg;
        const Sg = {
            qwerty: {
                'lower-1': 'qwertyuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^zxcvbnm~',
                'upper-1': 'QWERTYUIOP',
                'upper-2': ' ASDFGHJKL ',
                'upper-3': '^ZXCVBNM~',
                'numpad-1': '789/',
                'numpad-2': '456*',
                'numpad-3': '123-',
                'numpad-4': '0.=+'
            },
            azerty: {
                'lower-1': 'azertyuiop',
                'lower-2': 'qsdfghjklm',
                'lower-3': '^ wxcvbn ~',
                'upper-1': 'AZERTYUIOP',
                'upper-2': 'QSDFGHJKLM',
                'upper-3': '^ WXCVBN ~'
            },
            qwertz: {
                'lower-1': 'qwertzuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^yxcvbnm~',
                'upper-1': 'QWERTZUIOP',
                'upper-2': ' ASDFGHJKL',
                'upper-3': '^YXCVBNM~'
            },
            dvorak: {
                'lower-1': '^  pyfgcrl ',
                'lower-2': 'aoeuidhtns',
                'lower-3': 'qjkxbmwvz~',
                'upper-1': '^  PYFGCRL ',
                'upper-2': 'AOEUIDHTNS',
                'upper-3': 'QJKXBMWVZ~'
            },
            colemak: {
                'lower-1': ' qwfpgjluy ',
                'lower-2': 'arstdhneio',
                'lower-3': '^zxcvbkm~',
                'upper-1': ' QWFPGNLUY ',
                'upper-2': 'ARSTDHNEIO',
                'upper-3': '^ZXCVBKM~'
            }
        };
        let Tg = Xf.virtualKeyboardLayout;
        if ('auto' === Tg) {
            const Ug = Pe();
            Ug && (Tg = Ug.virtualLayout), Tg && 'auto' !== Tg || (Tg = null !== (Og = {
                fr: 'azerty',
                be: 'azerty',
                al: 'qwertz',
                ba: 'qwertz',
                cz: 'qwertz',
                de: 'qwertz',
                hu: 'qwertz',
                sk: 'qwertz',
                ch: 'qwertz'
            } [i.locale.slice(0, 2)]) && void 0 !== Og ? Og : 'qwerty');
        }
        const Ug = null !== (Pg = Sg[Tg]) && void 0 !== Pg ? Pg : Sg.qwerty;
        let Vg, Wg = Xg;
        Wg = Wg.replace(/<arrows\/>/g, '\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToPreviousChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-left" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToPreviousChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-left\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToNextChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-right" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToNextChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-right\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","commit"]\'>\n        <svg class="svg-glyph"><use xlink:href=\'#svg-commit\' /></svg></li>');
        let Yg = Wg.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        for (; Yg;) {
            Vg = '';
            const Zg = Yg[2].match(/[a-zA-Z][a-zA-Z\d-]*=(['"])(.*?)\1/g),
                $g = {};
            if (Zg)
                for (const _g of Zg) {
                    const ah = _g.match(/([a-zA-Z][a-zA-Z\d-]*)=(['"])(.*?)\2/);
                    ah && ($g[ah[1]] = ah[3]);
                }
            let _g = Ug[$g.name];
            if (_g || (_g = Sg.qwerty[$g.name]), _g)
                for (const ah of _g) {
                    let bh = null !== (Qg = $g.class) && void 0 !== Qg ? Qg : '';
                    bh && (bh = ` ${ bh }`), '~' === ah ? (Vg += '<li class=\'action font-glyph bottom right ', Vg += _g.length - (_g.match(/ /g) || []).length / 2 == 10 ? 'w10' : 'w15', Vg += '\' data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                        data-shifted-command=\'"deleteAll"\'\n                        data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                        ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>') : ' ' === ah ? Vg += '<li class=\'separator w5\'></li>' : '^' === ah ? Vg += '<li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'' + $g['shift-layer'] + '\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>' : '/' === ah ? Vg += '<li class=\'keycap' + bh + '\' data-alt-keys=\'/\' data-insert=\'\\frac{#@}{#?}\'>&divide;</li>' : '*' === ah ? Vg += '<li class=\'keycap' + bh + '\' data-alt-keys=\'*\' data-insert=\'\\times \'>&times;</li>' : '-' === ah ? Vg += '<li class=\'keycap' + bh + '\' data-alt-keys=\'-\' data-key=\'-\'>&#x2212;</li>' : '.' === ah ? Vg += '<li class=\'keycap' + bh + '\' data-alt-keys=\'.\' data-command=\'"insertDecimalSeparator"\'>' + (null !== (Rg = Xf.decimalSeparator) && void 0 !== Rg ? Rg : '.') + '</li>' : bh.includes('tt') ? Vg += `<li class='keycap${ bh }' data-alt-keys='${ ah }' data-command='["typedText","${ ah }",{"mode":"command", "focus":true, "feedback":true}]'>${ ah }</li>` : Vg += '<li class=\'keycap' + bh + '\' data-alt-keys=\'' + ah + '\'>' + ah + '</li>';
                }
            Wg = Wg.replace(new RegExp(Yg[1] + Yg[2] + Yg[3]), Vg), Yg = Wg.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        }
        return Wg;
    }

    function Og(Xf) {
        Dg();
        const Pg = Xf.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
        if (Pg)
            for (const Qg of Pg) {
                const Rg = Qg.getAttribute('data-unshifted-content');
                Rg && (Qg.innerHTML = Xf.options.createHTML(Rg), Qg.dataset.unshiftedContent = '');
                const Sg = Qg.getAttribute('data-unshifted-command');
                Sg && (Qg.dataset.command = Sg, Qg.dataset.unshiftedCommand = '');
            }
        return !1;
    }

    function Pg(Xf) {
        return Object.keys(Xf).map(hf => `${ hf } {${ function (Xf) {
            return 'string' == typeof Xf ? Xf : Object.entries(Xf).map(([Qg, Rg]) => `${ Qg }:${ Rg } !important`).join(';');
        }(Xf[hf]) }}`).join('');
    }

    function Qg(Xf, hf) {
        'lower-command' !== hf && 'upper-command' !== hf && 'symbols-command' !== hf && Xf.executeCommand('complete'), Rg(Xf), Dg(), Og(Xf);
        const Rg = null == Xf ? void 0 : Xf.element.querySelectorAll('.keyboard-layer');
        let Sg = !1;
        for (const Tg of Rg)
            if (Tg.dataset.layer === hf) {
                Sg = !0;
                break;
            }
        if (Sg)
            for (const Ug of Rg)
                Ug.dataset.layer === hf ? Ug.classList.add('is-visible') : Ug.classList.remove('is-visible');
        return Tg.focusMathfield(), !0;
    }

    function Rg(Xf, Sg = '') {
        const Tg = Xf.options.virtualKeyboardContainer;
        if (!Tg)
            return !1;
        if (Xf.element ? Xf.element.classList.add('is-visible') : Xf.buildAndAttachElement(Sg), !Xf.visible) {
            const Ug = Yh();
            Ug.visibleVirtualKeyboard && Tg(Ug.visibleVirtualKeyboard), Ug.visibleVirtualKeyboard = Xf;
            const Vg = Tg.style.paddingBottom;
            Xf.originalContainerBottomPadding = Vg, Tg.style.paddingBottom = Vg ? `calc(${ Vg } + var(--keyboard-height, 276px) - 1px)` : 'calc(var(--keyboard-height, 276px) - 1px)';
        }
        return setTimeout(() => {
            var Ug;
            null === (Ug = Xf.element) || void 0 === Ug || Ug.classList.add('is-visible'), Xf.focusMathfield();
        }, 1), Xf.visible = !0, Xf.stateChanged(), !1;
    }

    function Tg(Xf) {
        var Ug, Vg, Wg;
        const Xg = Xf.options.virtualKeyboardContainer;
        return !!Xg && (Xf.element && (Yh().visibleVirtualKeyboard = void 0, Xf.disable(), Dg(), Xf.visible = !1, null === (Ug = Xf.coreStylesheet) || void 0 === Ug || Ug.release(), Xf.coreStylesheet = null, null === (Vg = Xf.virtualKeyboardStylesheet) || void 0 === Vg || Vg.release(), Xf.virtualKeyboardStylesheet = null, null === (Wg = Xf._element) || void 0 === Wg || Wg.remove(), Xf._element = void 0, null !== Xf.originalContainerBottomPadding && (Xg.style.paddingBottom = Xf.originalContainerBottomPadding)), Xf.visible = !1, Xf.stateChanged(), !1);
    }

    function Ug(Xf, Sg, qg) {
        'function' == typeof Sg && (qg = Sg, Sg = 1 / 0), void 0 === Sg && (Sg = 1 / 0);
        let Vg = Xf.position,
            Wg = !1,
            Xg = '';
        for (; !Wg;) {
            const Yg = Xf.at(Vg);
            Wg = 0 === Sg || void 0 === Yg || 'math' !== Yg.mode || !(/mord|textord|mpunct/.test(Yg.type) || 'mop' === Yg.type && /[a-zA-Z]+/.test(Yg.value)) || !Yg.hasEmptyBranch('superscript') || !Yg.hasEmptyBranch('subscript') || 'function' == typeof qg && !qg(Yg), Wg || (Yg.mode = 'text', Yg.command = Yg.value, Yg.verbatimLatex = void 0, Xg += Yg.value), Vg -= 1, Sg -= 1;
        }
        af(Xf, {
            data: Xg,
            inputType: 'insertText'
        });
    }

    function Vg(Xf, Sg, qg) {
        'function' == typeof Sg && (qg = Sg, Sg = 1 / 0), void 0 === Sg && (Sg = 1 / 0);
        let Wg = Xf.position,
            Xg = !1;
        const Yg = [];
        for (; !Xg;) {
            const Zg = Xf.at(Wg);
            Xg = 0 === Sg || !Zg || Zg.isFirstSibling || 'text' !== Zg.mode || ' ' === Zg.value || qg && !qg(Zg), Xg || (Yg.push(Zg.serialize({
                defaultMode: 'math'
            })), Zg.mode = 'math'), Wg -= 1, Sg -= 1;
        }
        Wg(Xf), af(Xf, {
            data: ec(Yg),
            inputType: 'insertText'
        });
    }

    function Wg(Xf) {
        var Xg;
        let Yg = Xf.position - 1;
        for (; Yg >= 0 && 'math' === (null === (Xg = Xf.at(Yg)) || void 0 === Xg ? void 0 : Xg.mode);)
            Yg -= 1;
        if (!(Yg < 0) && 'text' === Xf.at(Yg).mode && ' ' === Xf.at(Yg).value && 'math' === Xf.at(Yg - 1).mode) {
            Xf.at(Yg - 1).parent.removeChild(Xf.at(Yg - 1));
            const Zg = Xf.suppressChangeNotifications;
            Xf.suppressChangeNotifications = !0, Xf.position -= 1, Xf.suppressChangeNotifications = Zg, af(Xf, {
                inputType: 'deleteContent'
            });
        }
    }
    wf({
        showAlternateKeys: function(Xf, Sg) {
            var Xg;
            d();
            const Yg = Ig[Sg],
                Zg = document.createElement('div');
            Zg.setAttribute('aria-hidden', 'true'), Zg.className = 'ML__keyboard alternate-keys' + (Xf.element.classList.contains('material') ? ' material' : ''), Zg.id = 'mathlive-alternate-keys-panel', Yg.length >= 14 ? Zg.style.width = '236px' : Yg.length >= 7 ? Zg.style.width = '286px' : 4 === Yg.length || 2 === Yg.length ? Zg.style.width = '146px' : 1 === Yg.length ? Zg.style.width = '86px' : Zg.style.width = '146px', Zg.style.height = 'auto';
            let $g = '';
            for (const _g of Yg)
                $g += '<li', 'string' == typeof _g ? $g += ' data-latex="' + _g.replace(/"/g, '&quot;') + '"' : (_g.latex && ($g += ' data-latex="' + _g.latex.replace(/"/g, '&quot;') + '"'), _g.content && ($g += ' data-content="' + _g.content.replace(/"/g, '&quot;') + '"'), _g.insert && ($g += ' data-insert="' + _g.insert.replace(/"/g, '&quot;') + '"'), _g.command && ('string' == typeof _g.command ? $g += ` data-command="${ _g.command.replace(/"/g, '&quot;') }"` : $g += ' data-command=\'' + JSON.stringify(_g.command).replace(/"/g, '&quot;') + '\''), _g.aside && ($g += ` data-aside="${ _g.aside.replace(/"/g, '&quot;') }"`), _g.class && ($g += ` data-classes="${ _g.class }"`)), $g += '>', $g += 'string' == typeof _g ? _g : null !== (Xg = _g.label) && void 0 !== Xg ? Xg : '', $g += '</li>';
            $g = '<ul>' + $g + '</ul>', Zg.innerHTML = _g.options.createHTML($g), Mg(_g, [...Zg.querySelectorAll('li')], 'performAlternateKeys'), sg.scrim || (sg.scrim = new sg()), sg.scrim.open({
                root: _g.options.virtualKeyboardContainer,
                child: Zg
            });
            const ah = null == _g ? void 0 : _g.element.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' + Sg + '"]'),
                bh = null == ah ? void 0 : ah.getBoundingClientRect();
            if (bh) {
                bh.top - Zg.clientHeight < 0 && (Zg.style.width = 'auto', Yg.length <= 6 ? Zg.style.height = '56px' : Yg.length <= 12 ? Zg.style.height = '108px' : Yg.length <= 18 ? Zg.style.height = '205px' : Zg.classList.add('compact'));
                const ch = (bh.top - Zg.clientHeight + 5).toString() + 'px',
                    dh = Math.max(0, Math.min(window.innerWidth - Zg.offsetWidth, (bh.left + bh.right - Zg.offsetWidth) / 2)) + 'px';
                Zg.style.transform = 'translate(' + dh + ',' + ch + ')', Zg.classList.add('is-visible');
            }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), wf({
        shiftKeyboardLayer: function(Xf) {
            const Xg = null == Xf ? void 0 : Xf.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
            if (Xg)
                for (const Yg of Xg) {
                    if (Yg.dataset.unshiftedContent)
                        return !1;
                    let Zg = Yg.getAttribute('data-shifted');
                    if (Zg || /^[a-z]$/.test(Yg.innerHTML)) {
                        Yg.dataset.unshiftedContent = Yg.innerHTML, Zg || (Zg = Yg.innerHTML.toUpperCase()), Yg.innerHTML = Xf.options.createHTML(Zg);
                        const $g = Yg.getAttribute('data-command');
                        if ($g) {
                            Yg.dataset.unshiftedCommand = $g;
                            const _g = Yg.getAttribute('data-shifted-command');
                            if (_g)
                                Yg.dataset.command = _g;
                            else {
                                const ah = JSON.parse($g);
                                Td(ah) && (ah[1] = ah[1].toUpperCase()), Yg.dataset.command = JSON.stringify(ah);
                            }
                        }
                    }
                }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), wf({
        hideAlternateKeys: () => Dg(),
        performAlternateKeys: function(Xf, Sg) {
            return Dg(), Xf.executeCommand(Sg);
        },
        switchKeyboardLayer: (Xf, Sg) => Qg(Xf, Sg),
        unshiftKeyboardLayer: Xf => Og(Xf),
        insertAndUnshiftKeyboardLayer: function(Xf, Sg) {
            return Xf.executeCommand([
                'insert',
                Sg
            ]), Og(Xf), !0;
        }
    }, {
        target: 'virtual-keyboard'
    }), wf({
        toggleVirtualKeyboardAlt: function(Xf) {
            let Xg = !1;
            return (null == Xf ? void 0 : Xf.element) && (Xg = null == Xf ? void 0 : Xf.element.classList.contains('material'), Xf.disable()), Rg(Xf, Xg ? '' : 'material'), !1;
        },
        toggleVirtualKeyboardShift: function(Xf) {
            var Xg, Yg;
            Xf.options.virtualKeyboardLayout = {
                qwerty: 'azerty',
                azerty: 'qwertz',
                qwertz: 'dvorak',
                dvorak: 'colemak',
                colemak: 'qwerty'
            } [Xf.options.virtualKeyboardLayout];
            const Zg = null !== (Yg = null === (Xg = null == Xf ? void 0 : Xf.element.querySelector('div.keyboard-layer.is-visible')) || void 0 === Xg ? void 0 : Xg.id) && void 0 !== Yg ? Yg : '';
            return Xf && Xf.disable(), Rg(Xf), Zg && Qg(Xf, Zg), !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), wf({
        toggleVirtualKeyboard: (Xf, Sg) => function(Xf, Sg) {
            return Xf.visible ? Tg(Xf) : Rg(Xf, Sg), !1;
        }(Xf, Sg),
        hideVirtualKeyboard: Xf => Tg(Xf),
        showVirtualKeyboard: (Xf, Sg) => Rg(Xf, Sg),
        onUndoStateChanged: (Xf, Sg, qg) => function(Xf, Sg, qg) {
            var Xg;
            const Yg = null === (Xg = Xf.element) || void 0 === Xg ? void 0 : Xg.querySelector('.keyboard-toolbar');
            if (!Yg)
                return !1;
            const Zg = Yg.querySelector('[data-command=\'"undo"\']'),
                $g = Yg.querySelector('[data-command=\'"redo"\']');
            return $g && (qg ? $g.classList.remove('disabled') : $g.classList.add('disabled')), Zg && (Sg ? Zg.classList.remove('disabled') : Zg.classList.add('disabled')), !1;
        }(Xf, Sg, qg)
    }, {
        target: 'virtual-keyboard'
    });
    var Xg = '#mathlive-keystroke-caption-panel{--keystroke:#fff;--on-keystroke:#555;--keystroke-border:#f7f7f7;background:var(--secondary,hsl(var(--hue,212),19%,26%));border-color:var(--secondary-border,#e8e8e8);border-radius:6px;box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);display:flex;flex-direction:row-reverse;justify-content:center;padding:16px;position:absolute;text-align:center;visibility:hidden;z-index:1}@media (prefers-color-scheme:dark){body:not([theme=light]) #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}}body[theme=dark] #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}#mathlive-keystroke-caption-panel>span{fill:currentColor;background-color:var(--keystroke);border:2px solid var(--keystroke-border);border-radius:6px;color:var(--on-keystroke);font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:1em;margin:0 8px 0 0;min-width:14px;padding:4px}';
    let Yg, Zg = null,
        $g = null;

    function _g(Xf) {
        return Xf.keystrokeCaption || (Xf.keystrokeCaption = ne('mathlive-keystroke-caption-panel'), void 0 === Yg && (Yg = Ge(Xg).toString(36)), Zg = He(null, Xg, Yg), $g = He(null, Ye, Ge(Ye).toString(36))), Xf.keystrokeCaption;
    }

    function ah(Xf) {
        if (!Xf)
            return null;
        if (Xf.length > 1)
            return null;
        const bh = Xf[0];
        return bh instanceof Ic && '(' === bh.leftDelim && ')' === bh.rightDelim ? bh.removeBranch('body') : null;
    }

    function bh(Xf) {
        if (Xf) {
            for (let ch = 0; Xf[ch]; ch++) {
                const dh = Xf[ch];
                if (dh instanceof Ic && '(' === dh.leftDelim) {
                    let eh = 0,
                        fh = 0,
                        gh = 0;
                    for (let hh = 0; dh.body[hh]; hh++)
                        'genfrac' === dh.body[hh].type && (eh++, fh = hh), gh++;
                    0 === gh && 1 === eh && (hh[ch] = dh.body[fh]);
                }
            }
            for (const dh of Xf) {
                for (const eh of dh.branches)
                    if (!dh.hasEmptyBranch(eh)) {
                        bh(dh.branch(eh));
                        const fh = ah(dh.branch(eh));
                        fh && dh.setChildren(fh, eh);
                    }
                if (dh instanceof Wc)
                    for (const fh of dh.cells)
                        bh(fh);
            }
        }
    }

    function ch(Xf) {
        if (!Xf)
            return [];
        const dh = [];
        for (const eh of Xf) {
            for (const fh of eh.branches)
                if (!eh.hasEmptyBranch(fh)) {
                    const gh = ch(eh.branch(fh));
                    dh.push(...gh);
                }
            eh instanceof Kc && dh.push(eh);
        }
        return dh;
    }

    function dh(Xf) {
        return !!/^(mord|surd|msubsup|leftright|mop|mclose)$/.test(Xf.type) && !Xf.isExtensibleSymbol && !Xf.isFunction;
    }

    function eh(Xf, Sg, qg) {
        const fh = Xf.at(Xf.position),
            {
                parent: gh
            } = hh;
        let ih = gh instanceof Ic ? gh.leftDelim + gh.rightDelim : '';
        if ('\\lbrace\\rbrace' === ih && (ih = '{}'), '\\{\\}' === ih && (ih = '{}'), '\\lparen\\rparen' === ih && (ih = '()'), '{}' === ih && /\||\\vert|\\Vert|\\mvert|\\mid/.test(Sg))
            return Sd.insert('math', Xf, '\\,\\middle' + Sg + '\\, ', {
                format: 'latex',
                style: qg
            }), !0;
        if ('{' !== Sg && '\\{' !== Sg || (Sg = '\\lbrace'), '}' !== Sg && '\\}' !== Sg || (Sg = '\\rbrace'), '[' === Sg && (Sg = '\\lbrack'), ']' === Sg && (Sg = '\\rbrack'), oc[Sg]) {
            const jh = kh;
            if ('leftright' === jh.type && jh.firstChild === hh && ('?' === jh.leftDelim || '.' === jh.leftDelim))
                return jh.leftDelim = Sg, jh.isDirty = !0, !0;
            if (!(kh instanceof Ic && '|' === kh.leftDelim)) {
                if (Sd.insert('math', Xf, `\\left${ Sg }\\right?`, {
                        format: 'latex',
                        style: qg
                    }), 'first' !== hh.lastSibling.type) {
                    const lh = Xf.offsetOf(hh.lastSibling),
                        mh = Xf.extractAtoms([
                            Xf.position,
                            lh
                        ]);
                    Xf.at(Xf.position).body = mh, Xf.position -= 1;
                }
                return !0;
            }
        }
        let jh = '';
        if (Object.keys(oc).forEach(Xf => {
                Sg === oc[Xf] && (jh = Xf);
            }), jh) {
            if (gh instanceof Ic && hh.isLastSibling)
                return gh.isDirty = !0, gh.rightDelim = Sg, Xf.position += 1, af(Xf, {
                    data: Sg,
                    inputType: 'insertText'
                }), !0;
            const kh = Xf.offsetOf(hh.firstSibling);
            let lh;
            for (lh = Xf.position; lh >= kh; lh--) {
                const mh = Xf.at(lh);
                if (mh instanceof Ic && '?' === mh.rightDelim)
                    break;
            }
            const mh = Xf.at(lh);
            if (lh >= kh && mh instanceof Ic)
                return mh.rightDelim = Sg, mh.addChildren(Xf.extractAtoms([
                    lh,
                    Xf.position
                ]), hh.treeBranch), Xf.position = lh, af(Xf, {
                    data: Sg,
                    inputType: 'insertText'
                }), !0;
            if (gh instanceof Ic && '?' === gh.rightDelim)
                return gh.isDirty = !0, gh.rightDelim = Sg, gh.parent.addChildren(Xf.extractAtoms([
                    Xf.position,
                    Xf.offsetOf(hh.lastSibling)
                ]), gh.treeBranch), Xf.position = Xf.offsetOf(gh), af(Xf, {
                    data: Sg,
                    inputType: 'insertText'
                }), !0;
            const nh = gh.parent;
            return !!(nh instanceof Ic && '?' === nh.rightDelim && Xf.at(Xf.position).isLastSibling) && (Xf.position = Xf.offsetOf(nh), eh(Xf, Sg, qg));
        }
        return !1;
    }

    function fh(Xf, Sg, qg) {
        var gh, hh, ih, jh;
        const {
            model: kh
        } = lh;
        ! function(lh) {
            var mh, nh;
            if (!lh)
                return;
            if ('Unidentified' === lh.key)
                return;
            if ('Dead' === lh.key)
                return;
            const oh = lh.shiftKey && lh.altKey ? 3 : lh.altKey ? 2 : lh.shiftKey ? 1 : 0;
            for (const ph of Me)
                (null === (mh = ph.mapping[lh.code]) || void 0 === mh ? void 0 : mh[oh]) === lh.key ? ph.score += 1 : (null === (nh = ph.mapping[lh.code]) || void 0 === nh ? void 0 : nh[oh]) && (ph.score = 0);
            Me.sort((lh, mh) => mh.score - lh.score);
        }(qg);
        const mh = Pe();
        if (lh.keyboardLayout !== mh.id && (lh.keyboardLayout = mh.id, lh._keybindings = void 0), clearTimeout(lh.inlineShortcutBufferFlushTimer), lh.inlineShortcutBufferFlushTimer = 0, function(lh, Sg) {
                if (lh.options.readOnly || !lh.keystrokeCaptionVisible)
                    return;
                const nh = _g(lh),
                    oh = lh.element.getBoundingClientRect();
                nh.style.left = `${ oh.left }px`, nh.style.top = oh.top - 64 + 'px', nh.innerHTML = lh.options.createHTML('<span>' + (Ue(Sg) || Sg) + '</span>' + nh.innerHTML), nh.style.visibility = 'visible', setTimeout(() => {
                    nh.childNodes.length > 0 && nh.childNodes[nh.childNodes.length - 1].remove(), 0 === nh.childNodes.length && (nh.style.visibility = 'hidden');
                }, 3000);
            }(lh, Sg), qg.defaultPrevented)
            return lh.flushInlineShortcutBuffer(), !1;
        let nh, oh, ph = '';
        if (!lh.options.readOnly) {
            if ('math' === lh.mode && !qg.ctrlKey && !qg.metaKey)
                if ('[Backspace]' === Sg)
                    lh.inlineShortcutBuffer.pop(), lh.flushInlineShortcutBuffer({
                        defer: !0
                    });
                else if (vg(qg)) {
                const qh = yg(qg),
                    rh = (null !== (hh = null === (gh = lh.inlineShortcutBuffer[lh.inlineShortcutBuffer.length - 1]) || void 0 === gh ? void 0 : gh.keystrokes) && void 0 !== hh ? hh : '') + qh;
                lh.inlineShortcutBuffer.push({
                    state: kh.getState(),
                    keystrokes: rh,
                    leftSiblings: hh(lh)
                });
                let sh = 0,
                    th = '';
                for (; !nh && sh < rh.length;) {
                    oh = lh.inlineShortcutBuffer.length - (rh.length - sh), th = rh.slice(sh);
                    const uh = lh.inlineShortcutBuffer[oh].leftSiblings;
                    nh = Jd(uh, th, lh.options.inlineShortcuts), !nh && /^[a-zA-Z][a-zA-Z0-9]+?([_\^][a-zA-Z0-9\*\+\-]+?)?$/.test(th) && (nh = lh.options.onInlineShortcut(lh, th)), sh += 1;
                }
                lh.flushInlineShortcutBuffer({
                    defer: !0
                });
            } else
                lh.flushInlineShortcutBuffer(), lh.snapshot();
            if (lh.options.smartMode) {
                const qh = lh.mode;
                nh ? lh.mode = 'math' : function(lh, Sg, qg) {
                    if (lh.smartModeSuppressed)
                        return !1;
                    const {
                        model: rh
                    } = sh;
                    if (!rh.at(rh.position).isLastSibling)
                        return !1;
                    if (!qg || !vg(qg))
                        return !1;
                    const th = yg(qg);
                    if (!rh.selectionIsCollapsed)
                        return !('text' !== sh.mode || !/[/_^]/.test(th));
                    const uh = function(sh) {
                        let vh = '',
                            wh = sh.position,
                            xh = !1;
                        for (; !xh;) {
                            const yh = sh.at(wh);
                            xh = !(yh && ('text' === yh.mode || 'math' === yh.mode && /mord|textord|mpunct/.test(yh.type))), xh || (vh = yh.value + vh), wh -= 1;
                        }
                        return vh;
                    }(rh) + th;
                    if ('text' === sh.mode) {
                        if ('Esc' === Sg || /[/\\]/.test(th))
                            return !0;
                        if (/[\^_]/.test(th))
                            return /(^|\s)[a-zA-Z][^_]$/.test(uh) && Vg(rh, 1), !0;
                        const vh = {
                                ')': '(',
                                '}': '{',
                                ']': '['
                            } [th],
                            {
                                parent: wh
                            } = rh.at(rh.position);
                        if (vh && wh instanceof Ic && wh.leftDelim === vh)
                            return !0;
                        if (/(^|[^a-zA-Z])(a|I) $/.test(uh))
                            return !1;
                        if (/[$\u20ac\xa3\u20a4\u20ba\xa5\xa4\u0e3f\xa2\u20a1\u20a7\u20a8\u20b9\u20a9\u20b1]/u.test(th))
                            return !0;
                        if (/(^|[^a-zA-Z'\u2019])[a-zA-Z] $/.test(uh))
                            return Vg(rh, 1), !1;
                        if (/\D\.[^\d\s]$/.test(uh)) {
                            Vg(rh, 1);
                            const xh = rh.at(rh.position);
                            return xh.value = '\u22C5', xh.style.variant = 'normal', xh.command = '\\cdot', xh.verbatimLatex = void 0, af(rh, {
                                data: '\\cdot',
                                inputType: 'insertText'
                            }), !0;
                        }
                        if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(uh))
                            return Vg(rh, 1), !0;
                        if (/\.\d$/.test(uh))
                            return Vg(rh, 1), !0;
                        if (/\([\d+\-.]$/.test(uh))
                            return Vg(rh, 1), !0;
                        if (/\([a-z][,;]$/.test(uh))
                            return Vg(rh, 2), !0;
                        if (/[\d+\-=><*|]$/.test(th))
                            return Wg(rh), !0;
                    } else {
                        if ('[Space]' === Sg)
                            return Ug(rh, void 0, vh => /[a-z][:,;.]$/.test(vh.value)), !0;
                        if (/[a-zA-Z]{3,}$/.test(uh) && !/(dxd|abc|xyz|uvw)$/.test(uh))
                            return Ug(rh, void 0, vh => /[a-zA-Z]/.test(vh.value)), !0;
                        if (/(^|\W)(if)$/i.test(uh))
                            return Ug(rh, 1), !0;
                        if (/(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/u.test(uh) && !/(\u03b1\u03b2\u03b3)$/.test(uh))
                            return Ug(rh, void 0, vh => /(:|,|;|.|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/u.test(vh.value)), !0;
                        if ('?' === th)
                            return !0;
                        if ('.' === th && !/[\d-+]\.$/.test(uh))
                            return !0;
                    }
                    return !1;
                }(lh, Sg, qg) && (lh.mode = {
                    math: 'text',
                    text: 'math'
                } [lh.mode], ph = ''), lh.mode !== qh && ((null === (ih = lh.host) || void 0 === ih ? void 0 : ih.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))) || (lh.mode = qh));
            }
        }
        if (!nh) {
            if (ph || (ph = function(lh, Sg, qg) {
                    if (0 === lh.length)
                        return '';
                    const qh = Je(Ie(qg));
                    for (let rh = lh.length - 1; rh >= 0; rh--)
                        if (lh[rh].key === qh && (!lh[rh].ifMode || lh[rh].ifMode === Sg))
                            return lh[rh].command;
                    return '';
                }(lh.keybindings, lh.mode, Sg)), !ph && ('[Enter]' === Sg || '[Return]' === Sg)) {
                let qh = !1;
                return $e(kh, {
                    inputType: 'insertLineBreak'
                }) && (lh.host && (qh = !lh.host.dispatchEvent(new Event('change', {
                    bubbles: !0,
                    composed: !0
                }))), qh || qg.preventDefault && (qg.preventDefault(), qg.stopPropagation()), af(kh, {
                    inputType: 'insertLineBreak'
                })), qh;
            }
            if ('math' === lh.mode) {
                if ('[Space]' === Sg) {
                    if (lh.flushInlineShortcutBuffer(), lh.options.mathModeSpace)
                        return lh.snapshot(), Sd.insert('math', kh, lh.options.mathModeSpace, {
                            format: 'latex'
                        }), ph = '', lh.dirty = !0, lh.scrollIntoView(), qg.preventDefault && (qg.preventDefault(), qg.stopPropagation()), !1;
                    const qh = kh.at(kh.position + 1),
                        rh = kh.at(kh.position - 1);
                    'text' !== (null == qh ? void 0 : qh.mode) && 'text' !== (null == rh ? void 0 : rh.mode) || (lh.snapshot(), Sd.insert('text', kh, ' '), lh.dirty = !0);
                }
                (null === (jh = kh.at(kh.position)) || void 0 === jh ? void 0 : jh.isDigit()) && ',' === lh.options.decimalSeparator && ',' === yg(qg) && (ph = 'insertDecimalSeparator');
            }
        }
        if (!nh && !ph)
            return !0;
        const qh = kh.at(Math.max(kh.position, kh.anchor)),
            {
                parent: rh
            } = sh;
        if ('moveAfterParent' === ph && 'leftright' === (null == rh ? void 0 : rh.type) && sh.isLastSibling && lh.options.smartFence && eh(kh, '.', lh.style) && (ph = '', sf(lh)), ph)
            lh.executeCommand(ph);
        else if (nh) {
            lh.keyboardDelegate.cancelComposition();
            const th = {
                ...kh.at(kh.position).computedStyle,
                ...lh.style
            };
            if (!/^\\({|}|\[|]|@|#|\$|%|&|\^|_|backslash)$/.test(nh)) {
                const uh = lh.mode;
                Sd.insert(lh.mode, kh, yg(qg), {
                    suppressChangeNotifications: !0,
                    style: th
                }), lh.snapshot(), kh.setState(lh.inlineShortcutBuffer[oh].state), lh.mode = uh;
            }
            kh.deferNotifications({
                content: !0,
                selection: !0,
                data: null != nh ? nh : null,
                type: 'insertText'
            }, () => (Sd.insert(lh.mode, kh, nh, {
                format: 'latex',
                style: th
            }), Wg(lh.model), nh.endsWith(' ') && (lh.mode = 'text', Sd.insert('text', kh, ' ', {
                style: th
            })), !0)), lh.snapshot(), lh.dirty = !0, kh.announce('replacement');
        }
        return lh.scrollIntoView(), qg.preventDefault && qg.preventDefault(), !1;
    }

    function gh(Xf, Sg, qg) {
        var hh;
        const {
            model: ih
        } = jh;
        if (jh.options.readOnly)
            return void ih.announce('plonk');
        if ((qg = null != qg ? qg : {}).focus && jh.focus(), qg.feedback && (jh.options.keypressVibration && f() && navigator.vibrate(3), jh.playSound('keypress')), 'string' == typeof qg.mode && jh.mode !== qg.mode && jh.switchMode(qg.mode), qg.simulateKeystroke) {
            const kh = Sg.charAt(0),
                lh = new KeyboardEvent('keypress', {
                    key: kh
                });
            if (!fh(jh, kh, lh))
                return;
        }
        const kh = ih.at(ih.position),
            lh = {
                ...kh.computedStyle,
                ...jh.style
            };
        ih.selectionIsCollapsed || (ih.deleteAtoms(Id(ih.selection)), jh.snapshot());
        const mh = _b(Sg);
        if ('latex' === jh.mode)
            ih.deferNotifications({
                content: !0,
                selection: !0,
                data: Sg,
                type: 'insertText'
            }, () => {
                df(jh);
                for (const nh of mh)
                    Sd.insert('latex', ih, nh);
                ef(nh);
            });
        else if ('text' === nh.mode)
            for (const oh of mh)
                Sd.insert('text', ih, oh, {
                    style: lh
                });
        else if ('math' === oh.mode)
            for (const ph of mh) {
                let qh = {
                    '^': 'moveToSuperscript',
                    _: 'moveToSubscript',
                    ' ': 'moveAfterParent'
                } [ph];
                ' ' === ph && oh.options.mathModeSpace && (qh = [
                    'insert',
                    oh.options.mathModeSpace
                ]), qh ? oh.executeCommand(qh) : /\d/.test(ph) && oh.options.smartSuperscript && 'superscript' === kh.treeBranch && 'mop' !== (null === (hh = kh.parent) || void 0 === hh ? void 0 : hh.type) && kh.hasNoSiblings ? (Sd.insert('math', ih, ph, {
                    style: lh
                }), mg(ih)) : ('mord' === kh.type && /[a-zA-Z]/.test(kh.value) && /[a-zA-Z]/.test(ph) && (kh.style.variant && (lh.variant = kh.style.variant), kh.style.variantStyle && (lh.variantStyle = kh.style.variantStyle)), Sd.insert('math', ih, ph, {
                    style: lh
                }));
            }
        jh.snapshotAndCoalesce(), jh.dirty = !0, jh.scrollIntoView();
    }

    function hh(Xf) {
        const ih = Xf.model,
            jh = [];
        let kh = ih.at(Math.min(ih.position, ih.anchor));
        for (;
            'first' !== kh.type;)
            jh.push(kh), kh = kh.leftSibling;
        return jh;
    }

    function ih(Xf, Sg) {
        var jh, kh, lh, mh, nh, oh;
        const ph = {};
        'string' == typeof Sg.color && (ph.verbatimColor = Sg.color, ph.color = null !== (jh = Xf.colorMap(Sg.color)) && void 0 !== jh ? jh : 'none'), 'string' == typeof Sg.backgroundColor && (ph.verbatimBackgroundColor = Sg.backgroundColor, ph.backgroundColor = null !== (kh = Xf.backgroundColorMap(Sg.backgroundColor)) && void 0 !== kh ? kh : 'none'), 'string' == typeof Sg.fontFamily && (ph.fontFamily = Sg.fontFamily), 'string' == typeof Sg.series && (ph.fontSeries = Sg.series), 'string' == typeof Sg.fontSeries && (ph.fontSeries = Sg.fontSeries.toLowerCase()), ph.fontSeries && (ph.fontSeries = null !== (lh = {
            bold: 'b',
            medium: 'm',
            normal: 'm'
        } [ph.fontSeries]) && void 0 !== lh ? lh : ph.fontSeries), 'string' == typeof Sg.shape && (ph.fontShape = Sg.shape), 'string' == typeof Sg.fontShape && (ph.fontShape = Sg.fontShape.toLowerCase()), ph.fontShape && (ph.fontShape = null !== (mh = {
            italic: 'it',
            up: 'n',
            upright: 'n',
            normal: 'n'
        } [ph.fontShape]) && void 0 !== mh ? mh : ph.fontShape);
        const qh = null !== (nh = Sg.size) && void 0 !== nh ? nh : Sg.fontSize;
        return 'number' == typeof qh ? ph.fontSize = Math.max(1, Math.min(10, qh)) : 'string' == typeof qh && (ph.fontSize = null !== (oh = {
            size1: 1,
            size2: 2,
            size3: 3,
            size4: 4,
            size5: 5,
            size6: 6,
            size7: 7,
            size8: 8,
            size9: 9,
            size10: 10
        } [qh.toLowerCase()]) && void 0 !== oh ? oh : {
            tiny: 1,
            scriptsize: 2,
            footnotesize: 3,
            small: 4,
            normal: 5,
            normalsize: 5,
            large: 6,
            Large: 7,
            LARGE: 8,
            huge: 9,
            Huge: 10
        } [qh]), ph;
    }
    new class extends Sd {
        onPaste(Xf, Sg) {
            if (!Sg.clipboardData)
                return !1;
            if (!$e(Xf.model, {
                    dataTransfer: Sg.clipboardData,
                    inputType: 'insertFromPaste'
                }))
                return !1;
            let jh = '',
                kh = 'auto',
                lh = Sg.clipboardData.getData('application/json+mathlive');
            if (lh)
                try {
                    const mh = JSON.parse(lh);
                    if (mh && Array.isArray(mh)) {
                        Xf.snapshot();
                        const nh = zd(mh, Xf),
                            {
                                model: oh
                            } = ph;
                        oh.selectionIsCollapsed || oh.deleteAtoms(Id(oh.selection));
                        const qh = oh.at(oh.position);
                        if (qh.parent instanceof Wc) {
                            const rh = [];
                            let sh = [];
                            'first' === nh[0].type && nh.shift(), 'first' === nh[nh.length - 1].type && nh.pop();
                            for (const th of nh)
                                'first' === th.type && sh.length > 0 ? (rh.push(sh), sh = [th]) : sh.push(th);
                            sh.length > 0 && rh.push(sh);
                            let uh = Number(qh.treeBranch[0]),
                                vh = Number(qh.treeBranch[1]);
                            const wh = qh.parent.maxColumns;
                            for (; qh.parent.colCount - vh < rh.length && qh.parent.colCount < wh;)
                                qh.parent.addColumn();
                            qh.parent.addChildrenAfter(rh[0], qh);
                            for (let xh = 1; xh < rh.length; xh++)
                                vh++, vh >= wh && (vh = 0, qh.parent.addRowAfter(uh), uh++), qh.parent.setCell(uh, vh, rh[xh]);
                        } else
                            qh.parent.addChildrenAfter(nh.filter(ph => 'first' !== ph.type), qh);
                        return oh.position = oh.offsetOf(nh[nh.length - 1]), af(oh, {
                            inputType: 'insertFromPaste'
                        }), sf(ph), Sg.preventDefault(), Sg.stopPropagation(), !0;
                    }
                } catch {}
            if (lh = Sg.clipboardData.getData('application/json'), lh && Xf.computeEngine)
                try {
                    const mh = JSON.parse(lh);
                    if ('object' == typeof mh && 'latex' in mh && mh.latex && (jh = mh.latex), !jh) {
                        const nh = Xf.computeEngine.box(mh);
                        nh && !nh.has('Error') && (jh = nh.latex);
                    }
                    jh || (kh = 'latex');
                } catch {}
            if (jh || (jh = Sg.clipboardData.getData('application/x-latex'), jh && (kh = 'latex')), jh || (jh = Sg.clipboardData.getData('text/plain')), jh) {
                let mh;
                return Xf.snapshot(), [nh, oh] = Qd(oh), 'auto' === kh && nh && (kh = 'latex'), this.insert(Xf.model, oh, {
                    format: kh
                }) && sf(Xf), Sg.preventDefault(), Sg.stopPropagation(), !0;
            }
            return !1;
        }
        insert(Xf, Sg, qg) {
            var jh, kh;
            const lh = 'string' == typeof Sg ? Sg : null !== (kh = null === (jh = Xf.mathfield.computeEngine) || void 0 === jh ? void 0 : jh.box(Sg).latex) && void 0 !== kh ? kh : '';
            if (!qg.suppressChangeNotifications && !$e(Xf, {
                    data: lh,
                    inputType: 'insertText'
                }))
                return !1;
            if (qg.insertionMode || (qg.insertionMode = 'replaceSelection'), qg.selectionMode || (qg.selectionMode = 'placeholder'), qg.format || (qg.format = 'auto'), Xf.mathfield.smartFence) {
                if (Xf.selectionIsCollapsed && 'string' == typeof Sg && eh(Xf, Sg, qg.style))
                    return !0;
            } else if ('replaceAll' !== qg.insertionMode) {
                const {
                    parent: mh
                } = Xf.at(Xf.position);
                if (mh instanceof Ic && '?' === mh.rightDelim && Xf.at(Xf.position).isLastSibling && 'string' == typeof Sg && /^[)}\]|]$/.test(Sg))
                    return mh.isDirty = !0, mh.rightDelim = Sg, Xf.position += 1, Ze(Xf), af(Xf, {
                        data: lh,
                        inputType: 'insertText'
                    }), !0;
            }
            const {
                suppressChangeNotifications: mh
            } = nh;
            qg.suppressChangeNotifications && (nh.suppressChangeNotifications = !0);
            const oh = nh.suppressChangeNotifications;
            nh.suppressChangeNotifications = !0;
            const ph = {};
            if (ph[0] = 'replaceAll' === qg.insertionMode ? '' : nh.getValue(nh.selection, 'latex-unstyled'), ph['?'] = '\\placeholder{}', ph['@'] = ph['?'], 'replaceSelection' !== qg.insertionMode || nh.selectionIsCollapsed ? 'replaceAll' === qg.insertionMode ? (nh.root.setChildren([], 'body'), nh.position = 0) : 'insertBefore' === qg.insertionMode ? nh.collapseSelection('backward') : 'insertAfter' === qg.insertionMode && nh.collapseSelection('forward') : nh.deleteAtoms(Id(nh.selection)), nh.at(nh.position).isLastSibling || 'placeholder' !== nh.at(nh.position + 1).type ? 'placeholder' === nh.at(nh.position).type && nh.deleteAtoms([
                    nh.position - 1,
                    nh.position
                ]) : nh.deleteAtoms([
                    nh.position,
                    nh.position + 1
                ]), ph[0])
                ph['@'] = ph[0];
            else if ('string' == typeof Sg && /(^|[^\\])#@/.test(Sg)) {
                const qh = function(nh) {
                    let rh = nh.at(nh.position);
                    if ('text' === rh.mode) {
                        for (; !rh.isFirstSibling && 'text' === rh.mode;)
                            rh = rh.leftSibling;
                        return nh.offsetOf(rh);
                    }
                    const sh = th,
                        uh = [];
                    for (; !th.isFirstSibling && (dh(th) || uh.length > 0);)
                        'mclose' === th.type && uh.unshift(th.value), 'mopen' === th.type && uh.length > 0 && th.value === pc[uh[0]] && uh.shift(), th = th.leftSibling;
                    return sh === th ? -1 : nh.offsetOf(th);
                }(nh);
                qh >= 0 && (ph['@'] = nh.getValue(qh, nh.position, 'latex-unstyled'), nh.deleteAtoms([
                    qh,
                    nh.position
                ]));
            }
            ph[0] || (ph[0] = ph['?']);
            let qh = !1;
            const [rh, sh] = function(nh, Sg, qg, jh) {
                var th;
                let uh, vh = [];
                if ('string' != typeof Sg || 'math-json' === jh.format) {
                    if (!nh.mathfield.computeEngine)
                        return [
                            'math-json',
                            []
                        ];
                    [wh, xh] = [
                        'latex',
                        nh.mathfield.computeEngine.box(xh).latex
                    ], vh = Rc(xh, nh.mathfield, {
                        parseMode: 'math'
                    });
                } else
                    'string' == typeof Sg && 'ascii-math' === jh.format ? ([wh, xh] = Ld(xh, {
                        format: 'ascii-math',
                        inlineShortcuts: nh.mathfield.options.inlineShortcuts
                    }), vh = Rc(xh, nh.mathfield, {
                        parseMode: 'math'
                    }), 'latex' !== wh && nh.options.removeExtraneousParentheses && bh(vh)) : ('auto' === jh.format || (null === (th = jh.format) || void 0 === th ? void 0 : th.startsWith('latex'))) && ('auto' === jh.format && ([yh, zh] = Ld(zh, {
                        format: 'auto',
                        inlineShortcuts: nh.mathfield.options.inlineShortcuts
                    })), 'latex' === jh.format && ([, Ah] = Qd(Ah)), vh = Rc(Ah, nh.mathfield, {
                        parseMode: 'math',
                        args: nh => (qh = !0, ph[nh])
                    }), 'latex' !== jh.format && nh.options.removeExtraneousParentheses && bh(vh));
                return gg(vh, jh.style), [
                    null != uh ? uh : 'latex',
                    vh
                ];
            }(nh, Sg, 0, qg);
            if (!sh)
                return !1;
            const th = ch(sh),
                uh = th.filter(Sg => Sg.placeholderId && !nh.mathfield.placeholders.has(Sg.placeholderId)),
                vh = th.map(nh => nh.placeholderId);
            [...nh.mathfield.placeholders.keys()].filter(nh => !vh.includes(nh)).forEach(Sg => {
                var wh;
                nh.mathfield.placeholders.has(Sg) && (null === (wh = nh.mathfield.placeholders.get(Sg)) || void 0 === wh || wh.field.remove(), nh.mathfield.placeholders.delete(Sg));
            }), uh.forEach(Sg => {
                var wh, xh;
                let yh = nh.mathfield.options.virtualKeyboardMode;
                'manual' === yh && (yh = 'onfocus');
                const zh = new Jh({
                        ...nh.mathfield.options,
                        virtualKeyboardMode: yh,
                        readOnly: !1
                    }),
                    Ah = Sg.defaultValue ? kc.serialize(Sg.defaultValue, {
                        defaultMode: 'math'
                    }) : '';
                zh.value = Ah, zh.addEventListener('input', () => {
                    ! function(nh, Sg) {
                        !nh.suppressChangeNotifications && nh.mathfield.host && (nh.suppressChangeNotifications = !0, nh.mathfield.host.dispatchEvent(new CustomEvent('placeholder-change', {
                            detail: {
                                placeholderId: Sg
                            },
                            bubbles: !0,
                            composed: !0
                        })), nh.suppressChangeNotifications = !1);
                    }(nh, Sg.placeholderId), setTimeout(() => sf(nh.mathfield));
                }), null === (xh = null === (wh = nh.mathfield.element) || void 0 === wh ? void 0 : wh.querySelector('.ML__placeholdercontainer')) || void 0 === xh || xh.appendChild(zh), nh.mathfield.placeholders.set(Sg.placeholderId, {
                    atom: Sg,
                    field: zh
                });
            });
            const {
                parent: wh
            } = nh.at(nh.position);
            if ('latex' !== rh && nh.options.removeExtraneousParentheses && wh instanceof Ic && '(' === wh.leftDelim && wh.hasEmptyBranch('body') && 1 === sh.length && 'genfrac' === sh[0].type) {
                const xh = wh.parent,
                    yh = wh.treeBranch;
                xh.removeChild(wh), xh.setChildren(sh, yh);
            }
            const xh = wh.hasEmptyBranch('body'),
                yh = nh.at(nh.position);
            yh.parent.addChildrenAfter(sh, yh), 'latex' === rh && 'string' == typeof Sg && 'root' === wh.type && xh && !qh && (wh.verbatimLatex = Sg), nh.suppressChangeNotifications = oh;
            const zh = sh[sh.length - 1];
            if ('placeholder' === qg.selectionMode) {
                const Ah = sh.reduce((nh, Ah) => [
                    ...nh,
                    ...Ah.children.filter(nh => 'placeholder' === nh.type)
                ], []);
                if (Ah.length > 0) {
                    const Bh = nh.offsetOf(Ah[0]);
                    nh.setSelection(Bh - 1, Bh), nh.announce('move');
                } else
                    zh && (nh.position = nh.offsetOf(zh));
            } else
                'before' === qg.selectionMode || ('after' === qg.selectionMode ? zh && (nh.position = nh.offsetOf(zh)) : 'item' === qg.selectionMode && nh.setSelection(nh.anchor, nh.offsetOf(zh)));
            return af(nh, {
                data: lh,
                inputType: 'insertText'
            }), nh.suppressChangeNotifications = mh, !0;
        }
        constructor() {
            super('math');
        }
    }(), wf({
        undo: Xf => (gf(Xf, 'accept'), Xf.undo(), !0),
        redo: Xf => (gf(Xf, 'accept'), Xf.redo(), !0),
        scrollIntoView: Xf => (Xf.scrollIntoView(), !0),
        scrollToStart: Xf => (Xf.field.scroll(0, 0), !0),
        scrollToEnd: Xf => {
            const jh = Xf.field.getBoundingClientRect();
            return Xf.field.scroll(jh.left - window.scrollX, 0), !0;
        },
        enterLatexMode: Xf => (Xf.switchMode('latex'), !0),
        toggleKeystrokeCaption: function(Xf) {
            return Xf.keystrokeCaptionVisible = !Xf.keystrokeCaptionVisible, Xf.keystrokeCaptionVisible ? (Xf.keystrokeCaption = _g(Xf), Xf.keystrokeCaption.innerHTML = '') : Xf.keystrokeCaption && (Xf.keystrokeCaption.style.visibility = 'hidden'), !1;
        },
        plonk: Xf => (Xf.model.announce('plonk'), !0),
        switchMode: (Xf, Sg, qg, Td) => (Xf.switchMode(Sg, qg, Td), !0),
        insert: (Xf, Sg, qg) => Xf.insert(Sg, qg),
        typedText: (Xf, Sg, qg) => (gh(Xf, Sg, qg), !0),
        insertDecimalSeparator: Xf => {
            if ('math' === Xf.mode && ',' === Xf.options.decimalSeparator) {
                const jh = Xf.model;
                if (jh.at(Math.max(jh.position, jh.anchor)).isDigit())
                    return Xf.snapshot(), Xf.insert('{,}', {
                        format: 'latex'
                    }), !0;
            }
            return Xf.insert('.'), !0;
        },
        commit: Xf => ($e(Xf.model, {
            inputType: 'insertLineBreak'
        }) && (Xf.host && Xf.host.dispatchEvent(new Event('change', {
            bubbles: !0,
            composed: !0
        })), af(Xf.model, {
            inputType: 'insertLineBreak'
        })), !0)
    }), wf({
        copyToClipboard: Xf => (Xf.focus(), Xf.model.selectionIsCollapsed && Xf.select(), document.execCommand('copy'), !1),
        cutToClipboard: Xf => (Xf.focus(), document.execCommand('cut'), !0),
        pasteFromClipboard: Xf => (Xf.focus(), document.execCommand('paste'), !0)
    }, {
        target: 'mathfield',
        category: 'clipboard'
    }), wf({
        applyStyle: function(Xf, Sg) {
            Xf.flushInlineShortcutBuffer();
            const jh = ih(Xf, Sg),
                {
                    model: kh
                } = lh;
            return kh.selectionIsCollapsed ? (lh.style.fontSeries && jh.fontSeries === lh.style.fontSeries && (jh.fontSeries = 'auto'), jh.fontShape && jh.fontShape === lh.style.fontShape && (jh.fontShape = 'auto'), jh.color && jh.color === lh.style.color && (jh.color = 'none'), jh.backgroundColor && jh.backgroundColor === lh.style.backgroundColor && (jh.backgroundColor = 'none'), jh.fontSize && jh.fontSize === lh.style.fontSize && (jh.fontSize = 'auto'), lh.style = {
                ...lh.style,
                ...jh
            }) : lh.model.deferNotifications({
                content: !0,
                type: 'insertText'
            }, () => {
                kh.selection.ranges.forEach(lh => hg(kh, lh, jh, {
                    operation: 'toggle'
                })), lh.snapshot();
            }), !0;
        }
    }, {
        target: 'mathfield'
    });
    let jh = null,
        kh = 0;

    function lh(Xf) {
        return Xc() && 'TouchEvent' in globalThis && Xf instanceof TouchEvent;
    }

    function mh(Xf) {
        return Xc() && 'PointerEvent' in globalThis && Xf instanceof PointerEvent;
    }

    function nh(Xf, Sg, qg) {
        if (Xf >= qg.left && Xf <= qg.right && Sg >= qg.top && Sg <= qg.bottom)
            return 0;
        const oh = Xf - (qg.left + qg.right) / 2,
            ph = Sg - (qg.top + qg.bottom) / 2;
        return oh * oh + ph * ph;
    }

    function oh(Xf, Sg, qg, Td, Xc) {
        if (!qg.id)
            return [
                1 / 0,
                null
            ];
        if (Sg.has(qg.id))
            return Sg.get(qg.id);
        const ph = ue(Xf, qg);
        if (!ph)
            return [
                1 / 0,
                null
            ];
        let qh = [
            1 / 0,
            null
        ];
        if (qg.hasChildren && !qg.captureSelection && Td >= ph.left && Td <= ph.right)
            for (const rh of qg.children) {
                const sh = oh(Xf, Sg, rh, Td, Xc);
                sh[0] <= qh[0] && (qh = sh);
            }
        return qh[1] || (qh = [
            nh(Td, Xc, ph),
            qg
        ]), Sg.set(qg.id, qh), qh;
    }

    function ph(Xf, Sg, qg) {
        const [, qh] = oh(Xf, new Map(), Xf.model.root, Sg, qg);
        return qh;
    }

    function qh(Xf, Sg, qg, Td) {
        var rh;
        const sh = Xf.fieldContent.getBoundingClientRect();
        if (Sg > sh.right || qg > sh.bottom + 8)
            return Xf.model.lastOffset;
        if (Sg < sh.left || qg < sh.top - 8)
            return 0;
        (Td = null != Td ? Td : {}).bias = null !== (rh = Td.bias) && void 0 !== rh ? rh : 0;
        let th = ph(Xf, Sg, qg);
        const uh = [];
        let vh = wh;
        for (; vh;)
            uh.unshift(vh), vh = vh.parent;
        for (const xh of uh)
            if (xh.captureSelection) {
                wh = xh;
                break;
            }
        let yh = xh.model.offsetOf(wh);
        if (yh < 0)
            return -1;
        if (wh.leftSibling)
            if (0 === Td.bias && 'placeholder' !== wh.type) {
                const zh = ue(xh, wh);
                zh && Sg < (zh.left + zh.right) / 2 && (yh = xh.model.offsetOf(wh.leftSibling));
            } else
                Td.bias < 0 && (yh = xh.model.offsetOf(wh.leftSibling));
        return yh;
    }
    new class extends Sd {
        onPaste(Xf, Sg) {
            if (!Sg.clipboardData)
                return !1;
            const rh = Sg.clipboardData.getData('text/plain');
            return !(!rh || !$e(Xf.model, {
                inputType: 'insertFromPaste',
                data: rh
            }) || (Xf.snapshot(), this.insert(Xf.model, rh) && (af(Xf.model, {
                inputType: 'insertFromPaste'
            }), sf(Xf)), Sg.preventDefault(), Sg.stopPropagation(), 0));
        }
        insert(Xf, Sg, rh = {}) {
            if (!$e(Xf, {
                    data: Sg,
                    inputType: 'insertText'
                }))
                return !1;
            rh.insertionMode || (rh.insertionMode = 'replaceSelection'), rh.selectionMode || (rh.selectionMode = 'placeholder'), rh.format || (rh.format = 'auto');
            const {
                suppressChangeNotifications: sh
            } = th;
            rh.suppressChangeNotifications && (th.suppressChangeNotifications = !0);
            const uh = th.suppressChangeNotifications;
            th.suppressChangeNotifications = !0, 'replaceSelection' !== rh.insertionMode || th.selectionIsCollapsed ? 'replaceAll' === rh.insertionMode ? (th.root.setChildren([], 'body'), th.position = 0) : 'insertBefore' === rh.insertionMode ? th.collapseSelection('backward') : 'insertAfter' === rh.insertionMode && th.collapseSelection('forward') : th.deleteAtoms(Id(th.selection));
            const vh = (e = Sg, f = th.mathfield, Rc(e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = e.replace(/\\/g, '\\textbackslash ')).replace(/#/g, '\\#')).replace(/\$/g, '\\$')).replace(/%/g, '\\%')).replace(/&/g, '\\&')).replace(/_/g, '\\_')).replace(/{/g, '\\textbraceleft ')).replace(/}/g, '\\textbraceright ')).replace(/\^/g, '\\textasciicircum ')).replace(/~/g, '\\textasciitilde ')).replace(/\xa3/g, '\\textsterling '), f, {
                parseMode: 'text'
            }));
            var wh, xh;
            if (gg(vh, rh.style), !vh)
                return !1;
            const yh = th.at(th.position),
                zh = yh.parent.addChildrenAfter(vh, yh);
            return th.suppressChangeNotifications = uh, 'before' === rh.selectionMode || ('item' === rh.selectionMode ? th.setSelection(th.anchor, th.offsetOf(zh)) : zh && (th.position = th.offsetOf(zh))), af(th, {
                data: Sg,
                inputType: 'insertText'
            }), th.suppressChangeNotifications = sh, !0;
        }
        constructor() {
            super('text');
        }
    }();
    const sh = 'mathlive#remote-virtual-keyboard-message';
    class th {
        get visible() {
            var uh, vh;
            return null !== (vh = null === (uh = Yh().sharedVirtualKeyboard) || void 0 === uh ? void 0 : uh.visible) && void 0 !== vh && vh;
        }
        set visible(Xf) {
            Yh().sharedVirtualKeyboard && (Yh().sharedVirtualKeyboard.visible = Xf);
        }
        setOptions(Xf) {
            this.sendMessage('setOptions', {
                options: JSON.stringify(vh(Xf))
            });
        }
        create() {}
        dispose() {
            this.disable();
        }
        enable() {
            this.enabled || (this.enabled = !0, globalThis.addEventListener('message', this));
        }
        disable() {
            this.enabled && (globalThis.removeEventListener('message', this), this.enabled = !1);
        }
        executeCommand(Xf) {
            var uh, vh, wh;
            return 'virtual-keyboard' === xf(Xf) ? (this._mathfield && (this.setOptions(vh(this._mathfield.getOptions())), ('showVirtualKeyboard' === Xf || 'toggleVirtualKeyboard' === Xf && !1 === this.visible) && (null === (vh = (uh = this._mathfield).focus) || void 0 === vh || vh.call(uh))), this.sendMessage('executeCommand', {
                command: Xf
            }), !1) : null === (wh = this._mathfield) || void 0 === wh ? void 0 : wh.executeCommand(Xf);
        }
        focusMathfield() {}
        blurMathfield() {}
        stateChanged() {}
        handleEvent(Xf) {
            var uh, vh, wh, xh;
            if ('message' === Xf.type && Xf.data && Xf.data.type === sh) {
                if (!we(Xf.origin, this.originValidator))
                    throw new Error(`Message from unknown origin (${ Xf.origin }) cannot be handled`);
                const {
                    action: yh
                } = Xf.data;
                if ('executeCommand' === yh) {
                    if ('virtual-keyboard' === xf(Xf.data.command) && window === globalThis.parent)
                        return;
                    this.executeCommand(Xf.data.command);
                } else
                    'updateState' === yh ? (this.visible = Xf.data.state.visible, this.height = Xf.data.state.height) : 'focus' === yh ? null === (vh = null === (uh = this._mathfield) || void 0 === uh ? void 0 : uh.focus) || void 0 === vh || vh.call(uh) : 'blur' === yh && (null === (xh = null === (wh = this._mathfield) || void 0 === wh ? void 0 : wh.blur) || void 0 === xh || xh.call(wh));
            }
        }
        sendMessage(Xf, uh = {}) {
            return !!globalThis.parent && (globalThis.parent.postMessage({
                type: sh,
                action: Xf,
                ...uh
            }, this.targetOrigin), !0);
        }
        constructor(Xf) {
            var vh, wh, xh;
            this.targetOrigin = null !== (wh = null !== (vh = Xf.targetOrigin) && void 0 !== vh ? vh : globalThis.origin) && void 0 !== wh ? wh : '*', this.originValidator = null !== (xh = Xf.originValidator) && void 0 !== xh ? xh : 'same-origin', this._mathfield = Xf.mathfield;
        }
    }

    function vh(Xf) {
        if ('object' != typeof Xf)
            return {};
        const wh = {};
        return Xf.fontsDirectory && (wh.fontsDirectory = Xf.fontsDirectory), Xf.soundsDirectory && (wh.soundsDirectory = Xf.soundsDirectory), Xf.virtualKeyboards && (wh.virtualKeyboards = Xf.virtualKeyboards), Xf.virtualKeyboardLayout && (wh.virtualKeyboardLayout = Xf.virtualKeyboardLayout), Xf.customVirtualKeyboardLayers && (wh.customVirtualKeyboardLayers = Xf.customVirtualKeyboardLayers), Xf.customVirtualKeyboards && (wh.customVirtualKeyboards = Xf.customVirtualKeyboards), Xf.virtualKeyboardTheme && (wh.virtualKeyboardTheme = Xf.virtualKeyboardTheme), Xf.keypressVibration && (wh.keypressVibration = Xf.keypressVibration), Xf.keypressSound && (wh.keypressSound = Xf.keypressSound), Xf.plonkSound && (wh.plonkSound = Xf.plonkSound), Xf.virtualKeyboardToolbar && (wh.virtualKeyboardToolbar = Xf.virtualKeyboardToolbar), Xf.targetOrigin && (wh.targetOrigin = Xf.targetOrigin), Xf.originValidator && (wh.originValidator = Xf.originValidator), wh;
    }
    let wh, xh;
    class yh {
        get audioContext() {
            return this._audioContext || (this._audioContext = new AudioContext()), this._audioContext;
        }
        get colorMap() {
            return Xf => {
                var zh;
                let Ah;
                return 'function' == typeof(null === (zh = this.options) || void 0 === zh ? void 0 : zh.colorMap) && (Ah = this.options.colorMap(Xf)), Ah || (Ah = q(Xf)), Ah;
            };
        }
        get backgroundColorMap() {
            return Xf => {
                var zh;
                let Ah;
                return 'function' == typeof(null === (zh = this.options) || void 0 === zh ? void 0 : zh.backgroundColorMap) && (Ah = this.options.backgroundColorMap(Xf)), Ah || 'function' != typeof this.options.colorMap || (Ah = this.options.colorMap(Xf)), Ah || (Ah = r(Xf)), Ah;
            };
        }
        get fractionNavigationOrder() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this.options) || void 0 === zh ? void 0 : zh.fractionNavigationOrder) && void 0 !== Ah ? Ah : 'numerator-denominator';
        }
        get placeholderSymbol() {
            var Bh, Ch;
            return null !== (Ch = null === (Bh = this.options) || void 0 === Bh ? void 0 : Bh.placeholderSymbol) && void 0 !== Ch ? Ch : '\u25A2';
        }
        get smartFence() {
            var Dh, Eh;
            return null !== (Eh = null === (Dh = this.options) || void 0 === Dh ? void 0 : Dh.smartFence) && void 0 !== Eh && Eh;
        }
        get letterShapeStyle() {
            var Fh, Gh;
            return null !== (Gh = null === (Fh = this.options) || void 0 === Fh ? void 0 : Fh.letterShapeStyle) && void 0 !== Gh ? Gh : 'tex';
        }
        get registers() {
            var Hh, Ih;
            return null !== (Ih = null === (Hh = this.options) || void 0 === Hh ? void 0 : Hh.registers) && void 0 !== Ih ? Ih : {};
        }
        getDefinition(Xf, zh = 'math') {
            return vd(Xf, zh);
        }
        getMacro(Xf) {
            return xd(Xf, this.options.macros);
        }
        get virtualKeyboard() {
            if (!this.options.readOnly)
                return this._virtualKeyboard || (this.options.useSharedVirtualKeyboard || Yh().sharedVirtualKeyboard ? this._virtualKeyboard = new th({
                    targetOrigin: this.options.sharedVirtualKeyboardTargetOrigin,
                    originValidator: this.options.originValidator,
                    mathfield: this
                }) : this._virtualKeyboard = new Eg(this.options, this)), this._virtualKeyboard;
        }
        get computeEngine() {
            var Ah, Bh;
            if (void 0 === this._computeEngine) {
                const Ch = null === (Ah = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === Ah ? void 0 : Ah.ComputeEngine;
                Ch && (this._computeEngine = new Ch()), this._computeEngine && ',' === this.options.decimalSeparator && (this._computeEngine.latexOptions.decimalMarker = '{,}');
            }
            return null !== (Bh = this._computeEngine) && void 0 !== Bh ? Bh : null;
        }
        get virtualKeyboardState() {
            var Ch;
            return (null === (Ch = this.virtualKeyboard) || void 0 === Ch ? void 0 : Ch.visible) ? 'visible' : 'hidden';
        }
        set virtualKeyboardState(Xf) {
            this.virtualKeyboard && ('hidden' === Xf ? this.virtualKeyboard.executeCommand('hideVirtualKeyboard') : 'visible' === Xf && this.virtualKeyboard.executeCommand('showVirtualKeyboard'));
        }
        get keybindings() {
            var Ah, Bh;
            if (this._keybindings)
                return this._keybindings;
            const [Ch, Dh] = function(Ah, Bh) {
                const Eh = [],
                    Fh = [];
                for (const Gh of Ah)
                    try {
                        const Hh = Ve(Gh, Bh);
                        if (Hh) {
                            const Ih = Eh.filter(Bh => Bh.key === Hh.key && Bh.ifMode === Hh.ifMode);
                            if (Ih.length > 0)
                                throw new Error(`Ambiguous key binding ${ Gh.key } (${ We(Gh.command) }) matches ${ Ih[0].key } (${ We(Ih[0].command) }) with the ${ Bh.displayName } keyboard layout`);
                            Eh.push(Hh);
                        }
                    } catch (Ah) {
                        Ah instanceof Error && Fh.push(Ah.message);
                    }
                return [
                    Eh,
                    Fh
                ];
            }(this.options.keybindings, null !== (Ah = Pe()) && void 0 !== Ah ? Ah : Ke);
            return (null === (Bh = Pe()) || void 0 === Bh ? void 0 : Bh.score) > 0 && (this._keybindings = Ch, Dh.length), Ch;
        }
        setOptions(Xf) {
            var Ah, Bh;
            if (this.options = Df(this.options, Xf), 'computeEngine' in Xf && (this._computeEngine = this.options.computeEngine), this._computeEngine && 'decimalSeparator' in Xf && (this._computeEngine.latexOptions.decimalMarker = ',' === this.options.decimalSeparator ? '{,}' : '.'), this.model.setListeners({
                    onSelectionDidChange: Xf => this._onSelectionDidChange()
                }), this.model.options.macros = this.options.macros, this._keybindings = void 0, ('soundsDirectory' in Xf || 'plonkSound' in Xf || 'keypressSound' in Xf || 'spacebarKeypressSound' in Xf || 'returnKeypressSound' in Xf || 'deleteKeypressSound' in Xf) && (this.audioBuffers = {}), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.options.readOnly ? (this.hasFocus() && 'visible' === this.virtualKeyboardState && this.executeCommand('hideVirtualKeyboard'), this.onBlur(), this.element.classList.add('ML__isReadOnly')) : this.element.classList.remove('ML__isReadOnly'), null === (Ah = this.virtualKeyboard) || void 0 === Ah || Ah.setOptions(this.options), this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), 'virtualKeyboardToggleGlyph' in Xf) {
                const Ch = null === (Bh = this.element) || void 0 === Bh ? void 0 : Bh.querySelector('.ML__virtual-keyboard-toggle');
                Ch && (Ch.innerHTML = this.options.createHTML(this.options.virtualKeyboardToggleGlyph));
            }
            const Ch = kc.serialize(this.model.root, {
                expandMacro: !1,
                defaultMode: this.options.defaultMode
            });
            ('macros' in Xf || this.model.getValue() !== Ch) && Sd.insert('math', this.model, Ch, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), sf(this);
        }
        getOptions(Xf) {
            return Ef(this.options, Xf);
        }
        getOption(Xf) {
            return Ef(this.options, Xf);
        }
        handleEvent(Xf) {
            if (pe(this))
                switch (Xf.type) {
                    case 'focus':
                        this.onFocus();
                        break;
                    case 'blur':
                        this.onBlur();
                        break;
                    case 'touchstart':
                    case 'mousedown':
                    case 'pointerdown':
                        ! function(Xf, zh) {
                            var Ah;
                            Xf.atomBoundsCache = new Map();
                            const Bh = Ch;
                            let Dh, Eh = !1,
                                Fh = 'none';
                            if (mh(zh) && zh.buttons > 1)
                                return;
                            let Gh = !1,
                                Hh = !1;
                            const Ih = lh(zh) ? zh.touches[0].clientX : zh.clientX,
                                Jh = lh(zh) ? zh.touches[0].clientY : zh.clientY,
                                Kh = Date.now(),
                                Lh = Bh.field,
                                Mh = setInterval(() => {
                                    Gh ? Lh.scroll({
                                        top: 0,
                                        left: Lh.scrollLeft - 16
                                    }) : Hh && Lh.scroll({
                                        top: 0,
                                        left: Lh.scrollLeft + 16
                                    });
                                }, 32);

                            function Nh(zh) {
                                Xc() && ('PointerEvent' in window ? (me(Lh, 'pointermove', o), me(Lh, 'pointerup pointercancel', Nh), zh instanceof PointerEvent && Lh.releasePointerCapture(zh.pointerId)) : (me(Lh, 'touchmove', o), me(Lh, 'touchcancel touchend', Nh), me(window, 'mousemove', o), me(window, 'mouseup blur', Nh)), Eh = !1, clearInterval(Mh), Ch.element.classList.remove('tracking'), zh && zh.preventDefault());
                            }

                            function Oh(zh) {
                                if (!Bh.hasFocus())
                                    return void Nh(null);
                                const Ph = lh(zh) ? zh.touches[0].clientX : zh.clientX,
                                    Qh = lh(zh) ? zh.touches[0].clientY : zh.clientY,
                                    Rh = lh(zh) || 'touch' === zh.pointerType ? 20 : 5;
                                if (Date.now() < Kh + 500 && Math.abs(Ih - Ph) < Rh && Math.abs(Jh - Qh) < Rh)
                                    return zh.preventDefault(), void zh.stopPropagation();
                                const Sh = Lh.getBoundingClientRect();
                                Hh = Ph > Sh.right, Gh = Ph < Sh.left;
                                let Th = Uh;
                                mh(zh) ? zh.isPrimary || (Th = qh(Bh, zh.clientX, zh.clientY, {
                                    bias: 0
                                })) : zh.touches && 2 === zh.touches.length && (Th = qh(Bh, zh.touches[1].clientX, zh.touches[1].clientY, {
                                    bias: 0
                                }));
                                const Vh = qh(Bh, Ph, Qh, {
                                    bias: Ph <= Ih ? Ph === Ih ? 0 : -1 : 1
                                });
                                Th >= 0 && Vh >= 0 && (Bh.model.extendSelectionTo(Th, Vh), sf(Ch)), zh.preventDefault(), zh.stopPropagation();
                            }
                            jh && Math.abs(jh.x - Ih) < 5 && Math.abs(jh.y - Jh) < 5 && Date.now() < jh.time + 500 ? (kh += 1, jh.time = Kh) : (jh = {
                                x: Ih,
                                y: Jh,
                                time: Kh
                            }, kh = 1);
                            const Ph = Lh.getBoundingClientRect();
                            if (Ih >= Ph.left && Ih <= Ph.right && Jh >= Ph.top && Jh <= Ph.bottom) {
                                if (Ch.hasFocus() || (Fh = 'all', Ch.focus({
                                        scrollIntoView: !1
                                    })), Ch.flushInlineShortcutBuffer(), Ch.smartModeSuppressed = !1, Dh = qh(Ch, Ih, Jh, {
                                        bias: 0
                                    }), Dh >= 0) {
                                    if (Ch.element.classList.add('tracking'), zh.shiftKey) {
                                        const Qh = Ch.model.selectionIsCollapsed;
                                        Ch.model.extendSelectionTo(Ch.model.anchor, Dh), Fh = ff(Ch.model) || Qh ? 'all' : 'selection';
                                    } else
                                        'placeholder' === Ch.model.at(Dh).type ? (Ch.model.setSelection(Dh - 1, Dh), Fh = 'selection') : 'placeholder' === (null === (Ah = Ch.model.at(Dh).rightSibling) || void 0 === Ah ? void 0 : Ah.type) ? (Ch.model.setSelection(Dh, Dh + 1), Fh = 'selection') : (Ch.model.position = Dh, Fh = ff(Ch.model) ? 'all' : 'selection');
                                    Ch.style = {}, 3 === zh.detail || kh > 2 ? (Nh(zh), 3 !== zh.detail && 3 !== kh || (Ch.model.selection = {
                                        ranges: [
                                            [
                                                0,
                                                Ch.model.lastOffset
                                            ]
                                        ]
                                    }, Fh = 'all')) : Eh || (Eh = !0, Xc() && 'PointerEvent' in window ? (le(Lh, 'pointermove', Oh), le(Lh, 'pointerup pointercancel', Nh), zh instanceof PointerEvent && Lh.setPointerCapture(zh.pointerId)) : (le(window, 'blur', Nh), lh(zh) && zh.touches ? (le(zh.target, 'touchmove', Oh), le(zh.target, 'touchcancel touchend', Nh)) : (le(window, 'mousemove', Oh), le(window, 'mouseup', Nh))), 2 !== zh.detail && 2 !== kh || (rg(Ch.model), Fh = 'all'));
                                }
                            } else
                                jh = null;
                            'none' !== Fh && (Ch.model.selectionIsCollapsed && (Fh = 'all'), sf(Ch)), zh.preventDefault();
                        }(this, Xf);
                        break;
                    case 'resize':
                        this.resizeTimer && cancelAnimationFrame(this.resizeTimer), this.resizeTimer = requestAnimationFrame(() => pe(this) && this.onResize());
                        break;
                    case 'wheel':
                        this.onWheel(Xf);
                }
        }
        dispose() {
            if (!pe(this))
                return;
            const Ah = this.element;
            delete this.element, delete Ah.mathfield, Ah.innerHTML = this.model.getValue(), me(Ah, 'pointerdown', this), me(Ah, 'touchstart:active mousedown', this), me(Ah, 'focus', this), me(Ah, 'blur', this), me(window, 'resize', this), window.removeEventListener('blur', this, {
                capture: !0
            }), delete this.accessibleNode, delete this.ariaLiveText, delete this.field, delete this.fieldContent, this.virtualKeyboardToggle.remove(), delete this.virtualKeyboardToggle, this._virtualKeyboard && (this._virtualKeyboard.dispose(), delete this._virtualKeyboard), oe(this.popover), kf && kf.release(), lf && lf.release(), delete this.popover, oe(this.keystrokeCaption), Zg && Zg.release(), $g && $g.release(), delete this.keystrokeCaption, this.stylesheets.forEach(Ah => null == Ah ? void 0 : Ah.release());
        }
        flushInlineShortcutBuffer(Xf) {
            if (null != Xf || (Xf = {
                    defer: !1
                }), !Xf.defer)
                return this.inlineShortcutBuffer = [], clearTimeout(this.inlineShortcutBufferFlushTimer), void(this.inlineShortcutBufferFlushTimer = 0);
            this.options.inlineShortcutTimeout > 0 && (clearTimeout(this.inlineShortcutBufferFlushTimer), this.inlineShortcutBufferFlushTimer = setTimeout(() => this.flushInlineShortcutBuffer(), this.options.inlineShortcutTimeout));
        }
        executeCommand(Xf) {
            var Ah, Bh;
            return 'virtual-keyboard' === xf(Xf) ? null !== (Bh = null === (Ah = this.virtualKeyboard) || void 0 === Ah ? void 0 : Ah.executeCommand(Xf)) && void 0 !== Bh && Bh : function(Xf, Ah) {
                var Ch, Dh, Eh;
                if (!Ah)
                    return !1;
                let Fh, Gh = [],
                    Hh = !1,
                    Ih = !1;
                Td(Ah) ? (Fh = Ah[0], Gh = Ah.slice(1)) : Fh = Ah, Fh = Fh.replace(/-\w/g, Xf => Xf[1].toUpperCase());
                const Jh = null === (Ch = vf[Fh]) || void 0 === Ch ? void 0 : Ch.target;
                if ('model' === Jh) {
                    if (Xf.options.readOnly && /^(paste|cut|insert|delete|transpose|add)/.test(Fh))
                        return Xf.model.announce('plonk'), !1;
                    /^(delete|transpose|add)/.test(Fh) && 'deleteBackward' !== Fh && Xf.flushInlineShortcutBuffer(), /^(delete|transpose|add)/.test(Fh) && 'latex' !== Xf.mode && (Xf.popUndoStack(), Xf.snapshot()), 'latex' !== Xf.mode || /^(complete)/.test(Fh) || df(Xf), vf[Fh].fn(Xf.model, ...Gh), 'latex' !== Xf.mode && /^(delete|transpose|add)/.test(Fh) && Xf.snapshot(), 'latex' === Xf.mode && ef(Xf), Ih = !0, Hh = !0;
                } else if ('virtual-keyboard' === Jh)
                    Ih = null !== (Eh = null === (Dh = Xf.virtualKeyboard) || void 0 === Dh ? void 0 : Dh.executeCommand(Ah)) && void 0 !== Eh && Eh, Hh = !0;
                else {
                    if (!vf[Fh])
                        throw new Error(`Unknown command "${ Fh }"`);
                    /^(undo|redo)/.test(Fh) && Xf.flushInlineShortcutBuffer(), Ih = vf[Fh].fn(Xf, ...Gh), Hh = !0;
                }
                return 'virtual-keyboard' !== Jh && (Xf.model.selectionIsCollapsed && !/^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(Fh) || (Xf.flushInlineShortcutBuffer(), Xf.style = {})), Ih && sf(Xf), Hh;
            }(this, Xf);
        }
        get errors() {
            return Sc(this.model.getValue(), this);
        }
        getValue(Xf, zh, rh) {
            return this.model.getValue(Xf, zh, rh);
        }
        setValue(Xf, zh) {
            var Ah;
            void 0 === (zh = null != zh ? zh : {
                mode: 'math'
            }).insertionMode && (zh.insertionMode = 'replaceAll'), void 0 !== zh.format && 'auto' !== zh.format || (zh.format = 'latex');
            let Bh = 'math';
            void 0 !== zh.mode && 'auto' !== zh.mode || (Bh = null !== (Ah = fg(this.model, this.model.position)) && void 0 !== Ah ? Ah : 'math'), Sd.insert(Bh, this.model, Xf, zh) && (this.undoManager.snapshot(), sf(this));
        }
        get expression() {
            const Ch = this.computeEngine;
            return Ch ? Ch.box(Ch.parse(this.model.getValue())) : null;
        }
        loadSound(Xf) {
            var Ah, Bh, Ch, Dh, Eh, Fh, Gh;
            delete this.audioBuffers[Xf];
            let Hh = '';
            switch (Xf) {
                case 'keypress':
                    Hh = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null === (Ah = this.options.keypressSound) || void 0 === Ah ? void 0 : Ah.default;
                    break;
                case 'spacebar':
                    Hh = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (Ch = null === (Bh = this.options.keypressSound) || void 0 === Bh ? void 0 : Bh.spacebar) && void 0 !== Ch ? Ch : null === (Dh = this.options.keypressSound) || void 0 === Dh ? void 0 : Dh.default;
                    break;
                case 'delete':
                    Hh = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (Fh = null === (Eh = this.options.keypressSound) || void 0 === Eh ? void 0 : Eh.delete) && void 0 !== Fh ? Fh : null === (Gh = this.options.keypressSound) || void 0 === Gh ? void 0 : Gh.default;
                    break;
                case 'plonk':
                    Hh = this.options.plonkSound;
            }
            if ('string' != typeof Hh)
                return;
            Hh = Hh.trim();
            const Ih = this.options.soundsDirectory;
            null != Ih && 'null' !== Ih && 'none' !== Hh && 'null' !== Hh && fetch(Mf(Ih + '/' + Hh)).then(Xf => Xf.arrayBuffer()).then(Xf => this.audioContext.decodeAudioData(Xf)).then(Ah => {
                this.audioBuffers[Xf] = Ah;
            });
        }
        playSound(Xf) {
            if (this.audioBuffers[Xf] || this.loadSound(Xf), !this.audioBuffers[Xf])
                return;
            const Ah = this.audioContext.createBufferSource();
            Ah.buffer = this.audioBuffers[Xf];
            const Bh = this.audioContext.createGain();
            Bh.gain.value = 0.5, Ah.connect(Bh).connect(this.audioContext.destination), Ah.start();
        }
        scrollIntoView() {
            var Ch;
            if (!this.element)
                return;
            null === (Ch = this.host) || void 0 === Ch || Ch.scrollIntoView({
                block: 'nearest',
                inline: 'nearest'
            }), this.dirty && tf(this, {
                interactive: !0
            });
            const Dh = this.field.getBoundingClientRect();
            let Eh = null;
            if (this.model.selectionIsCollapsed)
                Eh = qe(this.field);
            else {
                const Fh = ve(this);
                if (Fh.length > 0) {
                    let Gh = -1 / 0,
                        Hh = -1 / 0;
                    for (const Ih of Fh)
                        Ih.right > Gh && (Gh = Ih.right), Ih.top < Hh && (Hh = Ih.top);
                    Eh = {
                        x: Gh + Ih.left - this.field.scrollLeft,
                        y: Hh + Ih.top - this.field.scrollTop,
                        height: 0
                    };
                }
            }
            if (this.host && Eh) {
                const Fh = this.host.getBoundingClientRect(),
                    Gh = Eh.y;
                let Hh = this.host.scrollTop;
                Gh < Fh.top ? Hh = Gh - Fh.top + this.host.scrollTop : Gh > Fh.bottom && (Hh = Gh - Fh.bottom + this.host.scrollTop + Eh.height), this.host.scroll({
                    top: Hh,
                    left: 0
                });
            }
            if (Eh) {
                const Fh = Eh.x - window.scrollX;
                let Gh = this.field.scrollLeft;
                Fh < Dh.left ? Gh = Fh - Dh.left + this.field.scrollLeft - 20 : Fh > Dh.right && (Gh = Fh - Dh.right + this.field.scrollLeft + 20), this.field.scroll({
                    top: this.field.scrollTop,
                    left: Gh
                });
            }
        }
        insert(Xf, zh) {
            if ('string' == typeof Xf && Xf.length > 0) {
                if (this.flushInlineShortcutBuffer(), (zh = null != zh ? zh : {
                        mode: 'math'
                    }).focus && this.focus(), zh.feedback && (this.options.keypressVibration && f() && navigator.vibrate(3), this.playSound('keypress')), zh.scrollIntoView && this.scrollIntoView(), '\\\\' === Xf)
                    ag(this.model);
                else if ('&' === Xf)
                    bg(this.model);
                else {
                    const Ah = this.style;
                    Sd.insert(this.mode, this.model, Xf, {
                        style: this.model.at(this.model.position).computedStyle,
                        ...zh
                    }), zh.resetStyle && (this.style = Ah);
                }
                return this.undoManager.snapshot(), sf(this), !0;
            }
            return !1;
        }
        switchMode(Xf, Ah = '', Bh = '') {
            var Ch;
            if (this.mode === Xf || this.options.readOnly)
                return;
            if (!(null === (Ch = this.host) || void 0 === Ch ? void 0 : Ch.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))))
                return;
            const Dh = this.mode,
                {
                    model: Eh
                } = this;
            Eh.deferNotifications({
                content: Boolean(Bh) || Boolean(Ah),
                selection: !0,
                type: 'insertText'
            }, () => {
                var Fh;
                let Gh = !1;
                if (this.flushInlineShortcutBuffer(), this.smartModeSuppressed = /text|math/.test(this.mode) && /text|math/.test(Xf), Ah && 'latex' !== Xf) {
                    const Hh = Rc(Ah, this, {
                        parseMode: Xf
                    });
                    Eh.collapseSelection('forward');
                    const Ih = Eh.at(Eh.position);
                    Eh.position = Eh.offsetOf(Ih.parent.addChildrenAfter(Hh, Ih)), Gh = !0;
                }
                if (this.mode = Xf, 'latex' === Xf) {
                    let Hh, Ih = Eh.selectionIsCollapsed;
                    gf(this, 'accept'), (null === (Fh = this.virtualKeyboard) || void 0 === Fh ? void 0 : Fh.visible) && this.executeCommand([
                        'switchKeyboardLayer',
                        'latex-lower'
                    ]);
                    let Jh = Eh.at(Eh.position);
                    if (Ih)
                        Hh = '\\';
                    else {
                        const Kh = Id(Eh.selection);
                        Hh = this.model.getValue(Kh, 'latex');
                        const Lh = this.model.extractAtoms(Kh);
                        1 === Lh.length && Lh[0] instanceof Kc && (Hh = Ah, Ih = !0), Jh = Eh.at(Kh[0]);
                    }
                    const Kh = new id(Hh, this);
                    Jh.parent.addChildAfter(Kh, Jh), Ih ? Eh.position = Eh.offsetOf(Kh.lastChild) : Eh.setSelection(Eh.offsetOf(Kh.firstChild), Eh.offsetOf(Kh.lastChild));
                } else
                    bf(Eh).forEach(Xf => {
                        Xf.isError = !1;
                    });
                if (Bh) {
                    const Hh = Rc(Bh, this, {
                        parseMode: Dh
                    });
                    Eh.collapseSelection('forward');
                    const Ih = Eh.at(Eh.position);
                    Eh.position = Eh.offsetOf(Ih.parent.addChildrenAfter(Hh, Ih)), Gh = !0;
                }
                return sf(this), Gh;
            }), this.mode = Xf;
        }
        hasFocus() {
            return Dh() && this.keyboardDelegate.hasFocus();
        }
        focus(Xf) {
            var Ch;
            this.keyboardDelegate.focus(), this.model.announce('line'), (null === (Ch = null == Xf ? void 0 : Xf.scrollIntoView) || void 0 === Ch || Ch) && this.scrollIntoView();
        }
        blur() {
            this.keyboardDelegate.blur();
        }
        select() {
            this.model.selection = {
                ranges: [
                    [
                        0,
                        this.model.lastOffset
                    ]
                ]
            };
        }
        applyStyle(Xf, Ch = {}) {
            var Dh, Eh;
            const Fh = {
                operation: 'set',
                suppressChangeNotifications: !1
            };
            Qf(Ch) ? Fh.range = Ch : (Fh.range = Ch.range, Fh.suppressChangeNotifications = null !== (Dh = Ch.suppressChangeNotifications) && void 0 !== Dh && Dh);
            const Gh = ih(this, Xf),
                Hh = null !== (Eh = Fh.operation) && void 0 !== Eh ? Eh : 'set';
            this.model.deferNotifications({
                content: !Fh.suppressChangeNotifications,
                type: 'insertText'
            }, () => {
                void 0 === Fh.range ? this.model.selection.ranges.forEach(Xf => hg(this.model, Xf, Gh, {
                    operation: Hh
                })) : hg(this.model, Fh.range, Gh, {
                    operation: Hh
                });
            }), sf(this);
        }
        getCaretPoint() {
            const Ih = qe(this.field);
            return Ih ? {
                x: Ih.x,
                y: Ih.y
            } : null;
        }
        setCaretPoint(Xf, Ch) {
            const Dh = qh(this, Xf, Ch, {
                bias: 0
            });
            if (Dh < 0)
                return !1;
            const Eh = this.model.position;
            return this.model.position = Dh, this.model.announce('move', Eh), sf(this), !0;
        }
        getPlaceholderField(Xf) {
            var Dh;
            return null === (Dh = this.placeholders.get(Xf)) || void 0 === Dh ? void 0 : Dh.field;
        }
        attachNestedMathfield() {
            let Eh = !1;
            const Fh = this.field.getBoundingClientRect();
            this.placeholders.forEach((Bh, Td) => {
                var Gh, Hh;
                const Ih = this.field.querySelector(`[data-placeholder-id=${ Td }]`);
                if (!Ih)
                    return;
                const Jh = Ih.getBoundingClientRect(),
                    Kh = Jh.left - Fh.left + (null !== (Gh = this.element.offsetLeft) && void 0 !== Gh ? Gh : 0);
                (!Bh.field.style.left || Math.abs(Kh - parseFloat(Bh.field.style.left)) >= 1) && (Eh = !0, Bh.field.style.left = `${ Kh }px`);
                const Lh = Jh.top - Fh.top + (null !== (Hh = this.element.offsetTop) && void 0 !== Hh ? Hh : 0);
                (!Bh.field.style.top || Math.abs(Lh - parseFloat(Bh.field.style.top)) >= 1) && (Eh = !0, Bh.field.style.top = `${ Lh }px`);
            }), Eh && sf(this);
        }
        canUndo() {
            return this.undoManager.canUndo();
        }
        canRedo() {
            return this.undoManager.canRedo();
        }
        popUndoStack() {
            this.undoManager.pop();
        }
        snapshot() {
            var Gh, Hh;
            this.undoManager.snapshot() && (null === (Gh = this.virtualKeyboard) || void 0 === Gh || Gh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (Hh = this.host) || void 0 === Hh || Hh.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        snapshotAndCoalesce() {
            var Ih, Jh;
            this.undoManager.snapshotAndCoalesce() && (null === (Ih = this.virtualKeyboard) || void 0 === Ih || Ih.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (Jh = this.host) || void 0 === Jh || Jh.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        undo() {
            var Kh, Lh;
            this.undoManager.undo() && (null === (Kh = this.virtualKeyboard) || void 0 === Kh || Kh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (Lh = this.host) || void 0 === Lh || Lh.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        redo() {
            var Mh, Nh;
            this.undoManager.redo() && (null === (Mh = this.virtualKeyboard) || void 0 === Mh || Mh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (Nh = this.host) || void 0 === Nh || Nh.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        resetUndo() {
            var Oh;
            null === (Oh = this.undoManager) || void 0 === Oh || Oh.reset();
        }
        _onSelectionDidChange() {
            var Ph, Qh, Rh;
            this.keyboardDelegate.setValue(this.model.getValue(this.model.selection, 'latex-expanded'));
            const Sh = this.model.getAtoms(this.model.selection);
            if (1 === Sh.length && 'placeholder' === Sh[0].type) {
                const Th = Sh[0];
                this.model.mathfield.placeholders.has(Th.placeholderId) && (null === (Ph = this.model.mathfield.placeholders.get(Th.placeholderId)) || void 0 === Ph || Ph.field.focus());
            } {
                const Th = this.model.at(this.model.position),
                    Uh = null !== (Qh = Th.mode) && void 0 !== Qh ? Qh : Hf(this.options);
                this.mode !== Uh && ('latex' === this.mode ? (gf(this, 'accept', {
                    mode: Uh
                }), this.model.position = this.model.offsetOf(Th)) : this.switchMode(Uh));
            }
            null === (Rh = this.host) || void 0 === Rh || Rh.dispatchEvent(new Event('selection-change', {
                bubbles: !0,
                composed: !0
            }));
        }
        onFocus() {
            var Th, Uh, Vh;
            !this.focusBlurInProgress && this.blurred && (this.focusBlurInProgress = !0, this.blurred = !1, this.keyboardDelegate.focus(), null === (Th = this.virtualKeyboard) || void 0 === Th || Th.setOptions(this.options), null === (Uh = this.virtualKeyboard) || void 0 === Uh || Uh.enable(), 'onfocus' === this.options.virtualKeyboardMode && this.executeCommand('showVirtualKeyboard'), nf(this), tf(this, {
                interactive: !0
            }), null === (Vh = this.host) || void 0 === Vh || Vh.dispatchEvent(new Event('focus', {
                bubbles: !1,
                composed: !0
            })), this.valueOnFocus = this.model.getValue(), this.focusBlurInProgress = !1);
        }
        onBlur() {
            var Wh, Xh;
            this.focusBlurInProgress || this.blurred || (this.focusBlurInProgress = !0, this.blurred = !0, this.ariaLiveText.textContent = '', gf(this, 'accept'), this.model.getValue() !== this.valueOnFocus && this.executeCommand('commit'), /onfocus|manual/.test(this.options.virtualKeyboardMode) && !Yh().sharedVirtualKeyboard && this.executeCommand('hideVirtualKeyboard'), null === (Wh = this.virtualKeyboard) || void 0 === Wh || Wh.disable(), null === (Xh = this.host) || void 0 === Xh || Xh.dispatchEvent(new Event('blur', {
                bubbles: !1,
                composed: !0
            })), sf(this), this.focusBlurInProgress = !1);
        }
        onCompositionStart(Xf) {
            this.model.deleteAtoms(Id(this.model.selection)), requestAnimationFrame(() => {
                tf(this);
                const Dh = qe(this.field);
                Dh && this.keyboardDelegate.moveTo(Dh.x, Dh.y);
            });
        }
        onCompositionUpdate(Xf) {
            ! function(Xf, Ch) {
                const Dh = Xf.at(Xf.position);
                if ('composition' === Dh.type)
                    Dh.value = Ch;
                else {
                    const {
                        caret: Eh
                    } = Fh;
                    Fh.caret = '';
                    const Gh = new _c(Ch, Xf.mathfield, {
                        mode: Fh.mode
                    });
                    Gh.caret = Eh, Fh.parent.addChildAfter(Gh, Fh), Xf.position += 1;
                }
            }(this.model, Xf), sf(this);
        }
        onCompositionEnd(Xf) {
            ! function(Xf) {
                const Dh = Xf.at(Xf.position);
                'composition' === Dh.type && (Dh.parent.removeChild(Dh), Xf.position -= 1);
            }(this.model), gh(this, Xf, {
                simulateKeystroke: !0
            });
        }
        onResize() {
            nf(this);
        }
        onWheel(Xf) {
            const Dh = 5 * Xf.deltaX;
            if (!Number.isFinite(Dh) || 0 === Dh)
                return;
            const Eh = this.field;
            Dh < 0 && 0 === Eh.scrollLeft || Dh > 0 && Eh.offsetWidth + Eh.scrollLeft >= Eh.scrollWidth || (Eh.scrollBy({
                top: 0,
                left: Dh
            }), Xf.preventDefault(), Xf.stopPropagation());
        }
        getHTMLElement(Xf) {
            let Dh = Eh;
            for (; !Dh.id && Dh.hasChildren;)
                Dh = Eh.children[0];
            if (Dh.id)
                return this.element.querySelector(`[data-atom-id="${ Dh.id }"]`);
            throw new TypeError('Could not get an ID from atom');
        }
        constructor(Xf, Ch) {
            var Dh, Eh, Fh;
            this.focusBlurInProgress = !1, this.stylesheets = [], this.audioBuffers = {}, this.options = Df({
                ...Gf(),
                registers: td(this)
            }, Ch.readOnly ? {
                ...Ch,
                virtualKeyboardMode: 'off'
            } : {
                plonkSound: 'plonk.wav',
                keypressSound: {
                    spacebar: 'keypress-spacebar.wav',
                    return: 'keypress-return.wav',
                    delete: 'keypress-delete.wav',
                    default: 'keypress-standard.wav'
                },
                ...Ch
            }), 'auto' === this.options.virtualKeyboardMode && (this.options.virtualKeyboardMode = e() ? 'onfocus' : 'off'), void 0 !== this.options.computeEngine && (this._computeEngine = Ch.computeEngine), Ch.eventSink && (this.host = Ch.eventSink), this.placeholders = new Map(), this.element = Xf, Xf.mathfield = this;
            let Gh = null !== (Dh = Ch.value) && void 0 !== Dh ? Dh : this.element.textContent;
            Gh && (Gh = Gh.trim()), null !== this.options.fontsDirectory && Of(this.options.fontsDirectory), wh || (wh = Ge(Ye).toString(36)), this.stylesheets.push(He(Xf, Ye, wh)), xh || (xh = Ge(Kf).toString(36)), this.stylesheets.push(He(Xf, Kf, xh));
            let Hh = '<span class=ML__textarea>';
            if (e() ? Hh += '<span class=ML__textarea__textarea tabindex=-1 role=textbox></span>' : Hh += `<textarea class=ML__textarea__textarea autocapitalize=off autocomplete=off autocorrect=off spellcheck=false inputmode=none aria-hidden="true" tabindex="${ null !== (Eh = Xf.tabIndex) && void 0 !== Eh ? Eh : 0 }"></textarea>`, Hh += '</span>', Hh += '<span part="container" class="ML__container"><span part="content" class="ML__content"></span>', Hh += `<div part='virtual-keyboard-toggle' class="ML__virtual-keyboard-toggle" role="button" data-ML__tooltip="${ j('tooltip.toggle virtual keyboard') }">`, Hh += null !== (Fh = this.options.virtualKeyboardToggleGlyph) && void 0 !== Fh ? Fh : Ff, Hh += '</div>', Hh += '<div class=\'ML__placeholdercontainer\'></div>', Hh += '</span>', Hh += '<div class="ML__sr-only"><span aria-role="status" aria-live="assertive" aria-atomic="true"></span><span></span></div>', this.element.innerHTML = this.options.createHTML(Hh), !this.element.children)
                return;
            let Ih = 0;
            const Jh = this.element.children[Ih++].firstElementChild;
            this.field = this.element.children[Ih].children[0], Ih++, this.virtualKeyboardToggle = this.element.querySelector('.ML__virtual-keyboard-toggle'), this.ariaLiveText = this.element.children[Ih].children[0], this.accessibleNode = this.element.children[Ih++].children[1], this.keystrokeCaptionVisible = !1, this.popoverVisible = !1, this.suggestionIndex = 0, this.inlineShortcutBuffer = [], this.inlineShortcutBufferFlushTimer = 0, this.mode = Hf(this.options), this.smartModeSuppressed = !1, this.style = {}, this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), this.options.readOnly ? this.element.classList.add('ML__isReadOnly') : this.element.classList.remove('ML__isReadOnly'), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.element.querySelector('.ML__content').addEventListener('click', Xf => Xf.stopImmediatePropagation(), {
                capture: !1
            }), this.field.addEventListener('wheel', this, {
                passive: !1
            }), Bg(Xf => this.executeCommand(Xf), this.virtualKeyboardToggle, {
                default: 'toggleVirtualKeyboard',
                alt: 'toggleVirtualKeyboardAlt',
                shift: 'toggleVirtualKeyboardShift'
            }), this.blurred = !0, le(this.element, 'focus', this), le(this.element, 'blur', this), this.keyboardDelegate = function(Xf, Ch, Dh) {
                let Kh, Lh = null,
                    Mh = null,
                    Nh = !1,
                    Oh = !1,
                    Ph = !1;

                function Qh(Xf) {
                    clearTimeout(Kh), Kh = setTimeout(() => {
                        clearTimeout(Kh), Xf();
                    });
                }

                function Rh() {
                    if (Xf.selectionStart !== Xf.selectionEnd)
                        return;
                    const Sh = Xf.value;
                    Xf.value = '', Sh.length > 0 && Dh.typedText(Sh);
                }
                const Sh = Th;
                return Sh.addEventListener('keydown', Ch => {
                    Nh || 'Process' === Ch.key || 'CapsLock' === Ch.code || /(Control|Meta|Alt|Shift)(Left|Right)/.test(Ch.code) ? Lh = null : (Lh = Ch, Mh = null, Dh.keystroke(wg(Ch), Ch) ? 'textarea' !== Th.tagName.toLowerCase() && (1 === Ch.key.length && Dh.typedText(Ch.key), Ch.preventDefault()) : (Lh = null, Th.value = ''));
                }, !0), Sh.addEventListener('keypress', Th => {
                    Nh || (Lh && Mh && Dh.keystroke(wg(Lh), Lh), Mh = Th, Qh(Rh));
                }, !0), Sh.addEventListener('keyup', () => {
                    Nh || Lh && !Mh && Rh();
                }, !0), Sh.addEventListener('paste', Ch => {
                    Th.focus(), Th.value = '', Dh.paste(Ch) || Ch.preventDefault(), Ch.stopImmediatePropagation();
                }, !0), Sh.addEventListener('cut', Th => Dh.cut(Th), !0), Sh.addEventListener('copy', Th => Dh.copy(Th), !0), Sh.addEventListener('blur', Kh => {
                    var Uh, Vh, Wh;
                    if ((null === (Vh = null === (Uh = Kh.relatedTarget) || void 0 === Uh ? void 0 : Uh._mathfield) || void 0 === Vh ? void 0 : Vh.element) === Ch)
                        return Th.focus(), Kh.preventDefault(), void Kh.stopPropagation();
                    const Xh = null === (Wh = sg.scrim) || void 0 === Wh ? void 0 : Wh.state;
                    return 'open' === Xh || 'opening' === Xh || Kh.relatedTarget === Kh.target.getRootNode().host ? (Kh.preventDefault(), void Kh.stopPropagation()) : void(Ph || Oh || (Ph = !0, Lh = null, Mh = null, Dh.blur && Dh.blur(), Ph = !1, Kh.stopPropagation()));
                }, !0), Sh.addEventListener('focus', Ch => {
                    Ph || Oh || (Oh = !0, Dh.focus && Dh.focus(), xg() === Th && 'function' == typeof Th.select && Th.select(), Oh = !1, Ch.stopPropagation());
                }, !0), Sh.addEventListener('compositionstart', Ch => {
                    Nh = !0, Th.value = '', Dh.compositionStart && Dh.compositionStart(Ch.data);
                }, !0), Sh.addEventListener('compositionupdate', Th => {
                    Nh && Dh.compositionUpdate && Dh.compositionUpdate(Th.data);
                }, !0), Sh.addEventListener('compositionend', Ch => {
                    Th.value = '', Nh && (Nh = !1, Dh.compositionEnd && Dh.compositionEnd(Ch.data));
                }, !0), Sh.addEventListener('beforeinput', Th => {
                    Th.stopImmediatePropagation();
                }), Sh.addEventListener('input', Th => {
                    if (!Nh && 'insertCompositionText' !== Th.inputType) {
                        if ('insertFromPaste' === Th.inputType)
                            return Th.preventDefault(), void Th.stopPropagation();
                        Qh(Rh), Th.preventDefault(), Th.stopPropagation();
                    }
                }), {
                    cancelComposition: () => {
                        const Uh = Dh.blur,
                            Vh = Dh.focus;
                        Dh.blur = null, Dh.focus = null, Th.blur(), Th.focus(), Dh.blur = Uh, Dh.focus = Vh;
                    },
                    blur: () => {
                        'function' == typeof Th.blur && Th.blur();
                    },
                    focus: () => {
                        'function' == typeof Th.focus && Th.focus();
                    },
                    hasFocus: () => xg() === Th,
                    setValue: Ch => {
                        Ch ? (Th.value = Ch, xg() === Th && 'function' == typeof Th.select && Th.select()) : (Th.value = '', Th.setAttribute('aria-label', ''));
                    },
                    setAriaLabel: Ch => {
                        Th.setAttribute('aria-label', 'after: ' + Ch);
                    },
                    moveTo: (Ch, Dh) => {
                        Th.style.top = `${ Dh }px`, Th.style.left = `${ Ch }px`;
                    }
                };
            }(Jh, this.element, {
                typedText: Xf => gh(this, Xf),
                cut: Xf => {
                    this.options.readOnly ? this.model.announce('plonk') : $e(this.model, {
                        inputType: 'deleteByCut'
                    }) && (this.snapshot(), Sd.onCopy(this, Xf), setTimeout(() => {
                        eg(this.model, Id(this.model.selection), 'deleteByCut'), sf(this);
                    }, 0));
                },
                copy: Xf => Sd.onCopy(this, Xf),
                paste: Xf => {
                    let Kh = !0;
                    return this.options.readOnly && (Kh = !1), Kh && (Kh = Sd.onPaste(this.model.at(this.model.position).mode, this, Xf)), Kh || this.model.announce('plonk'), Kh;
                },
                keystroke: (Xf, Ch) => fh(this, Xf, Ch),
                focus: () => this.onFocus(),
                blur: () => this.onBlur(),
                compositionStart: Xf => this.onCompositionStart(Xf),
                compositionUpdate: Xf => this.onCompositionUpdate(Xf),
                compositionEnd: Xf => this.onCompositionEnd(Xf)
            }), Xc() && 'PointerEvent' in window ? le(this.field, 'pointerdown', this) : le(this.field, 'touchstart:active mousedown', this), le(window, 'resize', this), window.addEventListener('blur', () => {
                pe(this) && this.hasFocus() && window.addEventListener('focus', Xf => {
                    Xf.target === window && pe(this) && this.focus();
                }, {
                    once: !0
                });
            }, {
                capture: !0
            }), this.model = new Wf({
                mode: Hf(this.options),
                macros: this.options.macros,
                removeExtraneousParentheses: this.options.removeExtraneousParentheses
            }, {
                onSelectionDidChange: Xf => this._onSelectionDidChange()
            }, this), this.undoManager = new zg(this.model), Gh && Sd.insert('math', this.model, Gh, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), this.undoManager.startRecording(), this.undoManager.snapshot(), this.model.setListeners({
                onSelectionDidChange: Xf => this._onSelectionDidChange()
            }), sf(this), Xc() && document.fonts.ready.then(() => tf(this));
        }
    }
    var Dh, Eh, Fh, Gh;
    const Hh = Xc() ? document.createElement('template') : null;
    Hh && (Hh.innerHTML = '<style>\n:host { display: block; position: relative; overflow: hidden auto;}\n:host([hidden]) { display: none; }\n:host([disabled]) { opacity:  .5; }\n:host(:focus), :host(:focus-within) {\n  outline: Highlight auto 1px;    /* For Firefox */\n  outline: -webkit-focus-ring-color auto 1px;\n}\n:host([readonly]), :host([read-only]) { outline: none; }\n</style>\n<div></div><slot style="display:none"></slot>');
    const Ih = new WeakMap();
    class Jh extends HTMLElement {
        static get optionsAttributes() {
            return {
                'default-mode': 'string',
                'fonts-directory': 'string',
                'sounds-directory': 'string',
                'horizontal-spacing-scale': 'string',
                'math-mode-space': 'string',
                'inline-shortcut-timeout': 'string',
                'keypress-vibration': 'on/off',
                'keypress-sound': 'string',
                'plonk-sound': 'string',
                'letter-shape-style': 'string',
                locale: 'string',
                'read-only': 'boolean',
                'remove-extraneous-parentheses': 'on/off',
                'smart-fence': 'on/off',
                'smart-mode': 'on/off',
                'smart-superscript': 'on/off',
                'speech-engine': 'string',
                'speech-engine-rate': 'string',
                'speech-engine-voice': 'string',
                'text-to-speech-markup': 'string',
                'text-to-speech-rules': 'string',
                'virtual-keyboard-layout': 'string',
                'virtual-keyboard-mode': 'string',
                'virtual-keyboard-theme': 'string',
                'virtual-keyboards': 'string',
                'use-shared-virtual-keyboard': 'boolean',
                'shared-virtual-keyboard-target-origin': 'string'
            };
        }
        static get observedAttributes() {
            return [
                ...Object.keys(Jh.optionsAttributes),
                'disabled',
                'readonly',
                'read-only'
            ];
        }
        onPointerDown() {
            window.addEventListener('pointerup', Xf => {
                Xf.target === this && this.dispatchEvent(new MouseEvent('click', {
                    altKey: Xf.altKey,
                    button: Xf.button,
                    buttons: Xf.buttons,
                    clientX: Xf.clientX,
                    clientY: Xf.clientY,
                    ctrlKey: Xf.ctrlKey,
                    metaKey: Xf.metaKey,
                    movementX: Xf.movementX,
                    movementY: Xf.movementY,
                    relatedTarget: Xf.relatedTarget,
                    screenX: Xf.screenX,
                    screenY: Xf.screenY,
                    shiftKey: Xf.shiftKey
                }));
            }, {
                once: !0
            });
        }
        getPlaceholderField(Xf) {
            var Kh;
            return null === (Kh = this._mathfield) || void 0 === Kh ? void 0 : Kh.getPlaceholderField(Xf);
        }
        addEventListener(Xf, Ch, Bh) {
            return super.addEventListener(Xf, Ch, Bh);
        }
        removeEventListener(Xf, Ch, Bh) {
            super.removeEventListener(Xf, Ch, Bh);
        }
        get mode() {
            var Kh, Lh;
            return null !== (Lh = null === (Kh = this._mathfield) || void 0 === Kh ? void 0 : Kh.mode) && void 0 !== Lh ? Lh : 'math';
        }
        set mode(Xf) {
            this._mathfield && (this._mathfield.mode = Xf);
        }
        get computeEngine() {
            if (this._mathfield)
                return this._mathfield.computeEngine;
        }
        set computeEngine(Xf) {
            this._mathfield && this._mathfield.setOptions({
                computeEngine: Xf
            });
        }
        get expression() {
            if (this._mathfield)
                return this._mathfield.expression;
        }
        set expression(Xf) {
            var Kh, Lh;
            if (!this._mathfield)
                return;
            const Mh = null !== (Lh = null === (Kh = this.computeEngine) || void 0 === Kh ? void 0 : Kh.box(Xf).latex) && void 0 !== Lh ? Lh : null;
            null !== Mh && this._mathfield.setValue(Mh);
        }
        get errors() {
            var Nh, Oh;
            return null !== (Oh = null === (Nh = this._mathfield) || void 0 === Nh ? void 0 : Nh.errors) && void 0 !== Oh ? Oh : [];
        }
        get placeholders() {
            if (!this._mathfield)
                return {};
            const Ph = {};
            for (const [Qh, Rh] of this._mathfield.placeholders)
                Ph[Qh] = Rh.field;
            return Ph;
        }
        getOptions(Xf) {
            return this._mathfield ? Ef(this._mathfield.options, Xf) : Ih.has(this) ? Ef(Df(Gf(), Ih.get(this).options), Xf) : null;
        }
        getOption(Xf) {
            return this.getOptions([Xf])[Xf];
        }
        setOptions(Xf) {
            if (this._mathfield)
                this._mathfield.setOptions(Xf), this._mathfield.placeholders.forEach(Ch => {
                    Ch.field.setOptions({
                        ...Xf,
                        readOnly: !1
                    });
                });
            else if (Ih.has(this)) {
                const Kh = {
                    ...Ih.get(this).options,
                    ...Xf
                };
                Ih.set(this, {
                    ...Ih.get(this),
                    selection: {
                        ranges: Kh.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ]
                    },
                    options: Kh
                });
            } else
                Ih.set(this, {
                    value: void 0,
                    selection: {
                        ranges: [
                            [
                                0,
                                0
                            ]
                        ]
                    },
                    options: Xf
                });
            ! function(Xf) {
                const Kh = Gf(),
                    Lh = Xf.getOptions();
                Object.keys(Jh.optionsAttributes).forEach(Td => {
                    const Mh = Kh(Td);
                    'on/off' === Jh.optionsAttributes[Td] ? Kh[Mh] !== Lh[Mh] ? Xf.setAttribute(Td, Lh[Mh] ? 'on' : 'off') : Xf.removeAttribute(Td) : Kh[Mh] !== Lh[Mh] && ('boolean' === Jh.optionsAttributes[Td] ? Lh[Mh] ? Xf.setAttribute(Td, '') : Xf.removeAttribute(Td) : 'string' != typeof Lh[Mh] && 'number' != typeof Lh[Mh] || Xf.setAttribute(Td, Lh[Mh].toString()));
                });
            }(this);
        }
        executeCommand(Xf) {
            var Kh, Lh;
            return null !== (Lh = null === (Kh = this._mathfield) || void 0 === Kh ? void 0 : Kh.executeCommand(Xf)) && void 0 !== Lh && Lh;
        }
        getValue(Xf, Ch, Bh) {
            var Kh, Lh;
            if (this._mathfield)
                return this._mathfield.model.getValue(Xf, Ch, Bh);
            if (Ih.has(this)) {
                let Mh, Nh, Oh;
                if (Rf(Xf) ? ([Ph, Qh] = Xf.ranges[0], Oh = Ch) : Qf(Xf) ? ([Rh, Sh] = Xf, Oh = Ch) : Pf(Xf) && Pf(Ch) ? (Rh = Xf, Sh = Ch, Oh = Bh) : (Rh = 0, Sh = -1, Oh = Xf), (void 0 === Oh || 'latex' === Oh) && 0 === Rh && -1 === Sh)
                    return null !== (Lh = null !== (Kh = Ih.get(this).value) && void 0 !== Kh ? Kh : this.textContent) && void 0 !== Lh ? Lh : '';
            }
            return '';
        }
        setValue(Xf, Ch) {
            if (this._mathfield && void 0 !== Xf)
                return Ch || (Ch = {
                    suppressChangeNotifications: !0
                }), void this._mathfield.setValue(Xf, Ch);
            if (Ih.has(this)) {
                const Kh = Ih.get(this).options;
                return void Ih.set(this, {
                    value: Xf,
                    selection: {
                        ranges: Kh.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ],
                        direction: 'forward'
                    },
                    options: Kh
                });
            }
            const Kh = Lh(this);
            Ih.set(this, {
                value: Xf,
                selection: {
                    ranges: Kh.readOnly ? [
                        [
                            0,
                            0
                        ]
                    ] : [
                        [
                            0,
                            -1
                        ]
                    ],
                    direction: 'forward'
                },
                options: Kh
            });
        }
        hasFocus() {
            var Lh, Mh;
            return null !== (Mh = null === (Lh = this._mathfield) || void 0 === Lh ? void 0 : Lh.hasFocus()) && void 0 !== Mh && Mh;
        }
        get virtualKeyboardState() {
            var Nh, Oh;
            return null !== (Oh = null === (Nh = this._mathfield) || void 0 === Nh ? void 0 : Nh.virtualKeyboardState) && void 0 !== Oh ? Oh : 'hidden';
        }
        set virtualKeyboardState(Xf) {
            this._mathfield && (this._mathfield.virtualKeyboardState = Xf);
        }
        focus() {
            super.focus();
        }
        blur() {
            var Kh;
            null === (Kh = this._mathfield) || void 0 === Kh || Kh.blur(), super.blur();
        }
        select() {
            var Lh;
            null === (Lh = this._mathfield) || void 0 === Lh || Lh.select();
        }
        insert(Xf, Ch) {
            var Kh, Lh;
            return null !== (Lh = null === (Kh = this._mathfield) || void 0 === Kh ? void 0 : Kh.insert(Xf, Ch)) && void 0 !== Lh && Lh;
        }
        applyStyle(Xf, Ch) {
            var Kh;
            return null === (Kh = this._mathfield) || void 0 === Kh ? void 0 : Kh.applyStyle(Xf, Ch);
        }
        get caretPoint() {
            var Lh, Mh;
            return null !== (Mh = null === (Lh = this._mathfield) || void 0 === Lh ? void 0 : Lh.getCaretPoint()) && void 0 !== Mh ? Mh : null;
        }
        set caretPoint(Xf) {
            var Kh;
            Xf && (null === (Kh = this._mathfield) || void 0 === Kh || Kh.setCaretPoint(Xf.x, Xf.y));
        }
        setCaretPoint(Xf, Ch) {
            var Kh, Lh;
            return null !== (Lh = null === (Kh = this._mathfield) || void 0 === Kh ? void 0 : Kh.setCaretPoint(Xf, Ch)) && void 0 !== Lh && Lh;
        }
        offsetFromPoint(Xf, Ch, Bh) {
            return this._mathfield ? qh(this._mathfield, Xf, Ch, Bh) : -1;
        }
        hitboxFromOffset(Xf) {
            if (!this._mathfield)
                return null;
            const Kh = this._mathfield.model.at(Xf);
            if (!Kh)
                return null;
            const Lh = ue(this._mathfield, Kh);
            return Lh ? new DOMRect(Lh.left, Lh.top, Lh.right - Lh.left, Lh.bottom - Lh.top) : null;
        }
        resetUndo() {
            var Mh;
            null === (Mh = this._mathfield) || void 0 === Mh || Mh.resetUndo();
        }
        canUndo() {
            return !!this._mathfield && this._mathfield.canUndo();
        }
        canRedo() {
            return !!this._mathfield && this._mathfield.canRedo();
        }
        connectedCallback() {
            var Nh, Oh, Ph;
            this.hasAttribute('role') || this.setAttribute('role', 'textbox'), this.setAttribute('dir', 'ltr'), this.hasAttribute('aria-label') || this.setAttribute('aria-label', 'math input field'), this.setAttribute('contenteditable', 'true'), this.setAttribute('aria-multiline', 'false'), this.hasAttribute('tabindex') || this.setAttribute('tabindex', '0');
            const Qh = this.shadowRoot.querySelector('slot:not([name])');
            try {
                this._style = Qh.assignedElements().filter(Nh => 'style' === Nh.tagName.toLowerCase()).map(Nh => Nh.textContent).join('');
            } catch (Nh) {}
            if (this._style) {
                const Rh = document.createElement('style');
                Rh.textContent = this._style, this.shadowRoot.appendChild(Rh);
            }
            try {
                const Sh = Qh.assignedElements().filter(Sh => 'script' === Sh.tagName.toLowerCase() && 'application/json' === Sh.type).map(Sh => Sh.textContent).join('');
                Sh && this.setOptions(JSON.parse(Sh));
            } catch (Nh) {}
            let Rh = '';
            if (Rh = this.hasAttribute('value') ? null !== (Nh = this.getAttribute('value')) && void 0 !== Nh ? Nh : '' : null !== (Oh = null == Qh ? void 0 : Qh.assignedNodes().map(Nh => 3 === Nh.nodeType ? Nh.textContent : '').join('').trim()) && void 0 !== Oh ? Oh : '', this._mathfield = new yh(this.shadowRoot.querySelector(':host > div'), {
                    ...Ih.has(this) ? Ih.get(this).options : Lh(this),
                    eventSink: this,
                    value: Rh
                }), !Ih.has(this)) {
                this.upgradeProperty('disabled'), this.upgradeProperty('readonly');
                for (const Sh of Object.keys(Jh.optionsAttributes))
                    this.upgradeProperty(Kh(Sh));
            }
            (null === (Ph = this._mathfield) || void 0 === Ph ? void 0 : Ph.model) ? (Ih.has(this) && this._mathfield.model.deferNotifications({
                content: !1,
                selection: !1
            }, () => {
                const Sh = Ih.get(this).value;
                void 0 !== Sh && this._mathfield.setValue(Sh), this._mathfield.model.selection = Ih.get(this).selection, Ih.delete(this);
            }), Qh.addEventListener('slotchange', Nh => {
                if (Nh.target !== Qh)
                    return;
                const Sh = Qh.assignedNodes().map(Nh => 3 === Nh.nodeType ? Nh.textContent : '').join('').trim();
                Sh !== this._slotValue && (this._mathfield ? this._mathfield.setValue(Sh) : this.value = Sh);
            }), this.dispatchEvent(new Event('mount', {
                cancelable: !1,
                bubbles: !0,
                composed: !0
            }))) : this._mathfield = null;
        }
        disconnectedCallback() {
            if (this.dispatchEvent(new Event('unmount', {
                    cancelable: !1,
                    bubbles: !0,
                    composed: !0
                })), !this._mathfield)
                return;
            const Sh = Ef(this._mathfield.options, Object.keys(Jh.optionsAttributes).map(Sh => Kh(Sh)));
            Ih.set(this, {
                value: this._mathfield.getValue(),
                selection: this._mathfield.model.selection,
                options: Sh
            }), this._mathfield.dispose(), this._mathfield = null;
        }
        upgradeProperty(Xf) {
            if (this.hasOwnProperty(Xf)) {
                const Kh = this[Xf];
                delete this[Xf], 'readonly' !== Xf && 'read-only' !== Xf || (Xf = 'readOnly'), this[Xf] = Kh;
            }
        }
        attributeChangedCallback(Xf, Ch, Bh) {
            if (Ch === Bh)
                return;
            const Kh = null !== Bh;
            switch (Xf) {
                case 'disabled':
                    this.disabled = Kh;
                    break;
                case 'read-only':
                case 'readonly':
                    this.readOnly = Kh;
            }
        }
        get readonly() {
            return this.hasAttribute('readonly') || this.hasAttribute('read-only');
        }
        set readonly(Xf) {
            const Kh = Boolean(Xf);
            Kh ? (this.setAttribute('readonly', ''), this.setAttribute('disabled', ''), this.setAttribute('aria-readonly', 'true')) : (this.removeAttribute('readonly'), this.removeAttribute('read-only'), this.removeAttribute('disabled'), this.removeAttribute('aria-readonly')), this.setOptions({
                readOnly: Kh
            });
        }
        get disabled() {
            return this.hasAttribute('disabled');
        }
        set disabled(Xf) {
            const Kh = Boolean(Xf);
            Kh ? this.setAttribute('disabled', '') : this.removeAttribute('disabled'), this.setAttribute('aria-disabled', Kh ? 'true' : 'false'), this.setOptions({
                readOnly: Kh
            });
        }
        get value() {
            return this.getValue();
        }
        set value(Xf) {
            this.setValue(Xf);
        }
        get defaultMode() {
            return this.getOption('defaultMode');
        }
        set defaultMode(Xf) {
            this.setOptions({
                defaultMode: Xf
            });
        }
        get fontsDirectory() {
            return this.getOption('fontsDirectory');
        }
        set fontsDirectory(Xf) {
            this.setOptions({
                fontsDirectory: Xf
            });
        }
        get mathModeSpace() {
            return this.getOption('mathModeSpace');
        }
        set mathModeSpace(Xf) {
            this.setOptions({
                mathModeSpace: Xf
            });
        }
        get inlineShortcutTimeout() {
            return this.getOption('inlineShortcutTimeout');
        }
        set inlineShortcutTimeout(Xf) {
            this.setOptions({
                inlineShortcutTimeout: Xf
            });
        }
        get keypressVibration() {
            return this.getOption('keypressVibration');
        }
        set keypressVibration(Xf) {
            this.setOptions({
                keypressVibration: Xf
            });
        }
        get keypressSound() {
            return this.getOption('keypressSound');
        }
        set keypressSound(Xf) {
            this.setOptions({
                keypressSound: Xf
            });
        }
        get plonkSound() {
            var Kh;
            return null !== (Kh = this.getOption('plonkSound')) && void 0 !== Kh ? Kh : null;
        }
        set plonkSound(Xf) {
            this.setOptions({
                plonkSound: Xf
            });
        }
        get letterShapeStyle() {
            return this.getOption('letterShapeStyle');
        }
        set letterShapeStyle(Xf) {
            this.setOptions({
                letterShapeStyle: Xf
            });
        }
        get locale() {
            return this.getOption('locale');
        }
        set locale(Xf) {
            this.setOptions({
                locale: Xf
            });
        }
        get readOnly() {
            return this.getOption('readOnly');
        }
        set readOnly(Xf) {
            this.setOptions({
                readOnly: Xf
            });
        }
        get removeExtraneousParentheses() {
            return this.getOption('removeExtraneousParentheses');
        }
        set removeExtraneousParentheses(Xf) {
            this.setOptions({
                removeExtraneousParentheses: Xf
            });
        }
        get smartFence() {
            return this.getOption('smartFence');
        }
        set smartFence(Xf) {
            this.setOptions({
                smartFence: Xf
            });
        }
        get smartMode() {
            return this.getOption('smartMode');
        }
        set smartMode(Xf) {
            this.setOptions({
                smartMode: Xf
            });
        }
        get smartSuperscript() {
            return this.getOption('smartSuperscript');
        }
        set smartSuperscript(Xf) {
            this.setOptions({
                smartSuperscript: Xf
            });
        }
        get speechEngine() {
            return this.getOption('speechEngine');
        }
        set speechEngine(Xf) {
            this.setOptions({
                speechEngine: Xf
            });
        }
        get speechEngineRate() {
            return this.getOption('speechEngineRate');
        }
        set speechEngineRate(Xf) {
            this.setOptions({
                speechEngineRate: Xf
            });
        }
        get speechEngineVoice() {
            return this.getOption('speechEngineVoice');
        }
        set speechEngineVoice(Xf) {
            this.setOptions({
                speechEngineVoice: Xf
            });
        }
        get textToSpeechMarkup() {
            return this.getOption('textToSpeechMarkup');
        }
        set textToSpeechMarkup(Xf) {
            this.setOptions({
                textToSpeechMarkup: Xf
            });
        }
        get textToSpeechRules() {
            return this.getOption('textToSpeechRules');
        }
        set textToSpeechRule(Xf) {
            this.setOptions({
                textToSpeechRules: Xf
            });
        }
        get virtualKeyboardLayout() {
            return this.getOption('virtualKeyboardLayout');
        }
        set virtualKeyboardLayout(Xf) {
            this.setOptions({
                virtualKeyboardLayout: Xf
            });
        }
        get virtualKeyboardMode() {
            return this.getOption('virtualKeyboardMode');
        }
        set virtualKeyboardMode(Xf) {
            this.setOptions({
                virtualKeyboardMode: Xf
            });
        }
        get virtualKeyboardTheme() {
            return this.getOption('virtualKeyboardTheme');
        }
        set virtualKeyboardTheme(Xf) {
            this.setOptions({
                virtualKeyboardTheme: Xf
            });
        }
        get virtualKeyboards() {
            return this.getOption('virtualKeyboards');
        }
        set virtualKeyboards(Xf) {
            this.setOptions({
                virtualKeyboards: Xf
            });
        }
        get useSharedVirtualKeyboard() {
            return this.getOption('useSharedVirtualKeyboard');
        }
        set useSharedVirtualKeyboard(Xf) {
            this.setOptions({
                useSharedVirtualKeyboard: Xf
            });
        }
        get sharedVirtualKeyboardTargetOrigin() {
            return this.getOption('sharedVirtualKeyboardTargetOrigin');
        }
        set sharedVirtualKeyboardTargetOrigin(Xf) {
            this.setOptions({
                sharedVirtualKeyboardTargetOrigin: Xf
            });
        }
        get selection() {
            return this._mathfield ? this._mathfield.model.selection : Ih.has(this) ? Ih.get(this).selection : {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'forward'
            };
        }
        set selection(Xf) {
            'number' == typeof Xf && (Xf = {
                ranges: [
                    [
                        Xf,
                        Xf
                    ]
                ]
            }), this._mathfield ? this._mathfield.model.selection = Xf : Ih.has(this) ? Ih.set(this, {
                ...Ih.get(this),
                selection: Xf
            }) : Ih.set(this, {
                value: void 0,
                selection: Xf,
                options: Lh(this)
            });
        }
        get selectionIsCollapsed() {
            const Kh = this.selection;
            return 1 === Kh.ranges.length && Kh.ranges[0][0] === Kh.ranges[0][1];
        }
        get position() {
            return this._mathfield ? this._mathfield.model.position : Ih.has(this) ? Ih.get(this).selection.ranges[0][0] : 0;
        }
        set position(Xf) {
            this._mathfield && (this._mathfield.model.position = Xf), Ih.has(this) ? Ih.set(this, {
                ...Ih.get(this),
                selection: {
                    ranges: [
                        [
                            Xf,
                            Xf
                        ]
                    ]
                }
            }) : Ih.set(this, {
                value: void 0,
                selection: {
                    ranges: [
                        [
                            Xf,
                            Xf
                        ]
                    ]
                },
                options: Lh(this)
            });
        }
        getOffsetDepth(Xf) {
            var Kh, Lh;
            return this._mathfield && (Lh = (null === (Kh = this._mathfield.model.at(Xf)) || void 0 === Kh ? void 0 : Kh.treeDepth) - 2, 1) && void 0 !== Lh ? Lh : 0;
        }
        get lastOffset() {
            var Mh, Nh;
            return null !== (Nh = null === (Mh = this._mathfield) || void 0 === Mh ? void 0 : Mh.model.lastOffset) && void 0 !== Nh ? Nh : -1;
        }
        constructor(Xf) {
            d(), super(), this.attachShadow({
                mode: 'open'
            }), this.shadowRoot.append(Hh.content.cloneNode(!0));
            const Kh = this.shadowRoot.querySelector('slot:not([name])');
            this._slotValue = Kh.assignedNodes().map(Xf => 3 === Xf.nodeType ? Xf.textContent : '').join('').trim(), Xf && this.setOptions(Xf), this.shadowRoot.host.addEventListener('pointerdown', Xf => this.onPointerDown(), !0), this.shadowRoot.host.addEventListener('focus', () => {
                var Lh;
                return null === (Lh = this._mathfield) || void 0 === Lh ? void 0 : Lh.focus();
            }, !0), this.shadowRoot.host.addEventListener('blur', () => {
                var Mh;
                return null === (Mh = this._mathfield) || void 0 === Mh ? void 0 : Mh.blur();
            }, !0);
        }
    }

    function Kh(Xf) {
        return Xf.toLowerCase().replace(/[^a-zA-Z\d]+(.)/g, (Xf, Ch) => Ch.toUpperCase());
    }

    function Lh(Xf) {
        const Mh = {},
            Nh = Jh.optionsAttributes;
        return Object.keys(Nh).forEach(Td => {
            if (Xf.hasAttribute(Td)) {
                const Oh = Xf.getAttribute(Td);
                'boolean' === Nh[Td] ? Mh[Kh(Td)] = !0 : 'on/off' === Nh[Td] ? Mh[Kh(Td)] = 'on' === Oh || 'off' !== Oh && void 0 : 'number' === Nh[Td] ? Mh[Kh(Td)] = Number.parseFloat(null != Oh ? Oh : '0') : Mh[Kh(Td)] = Oh;
            } else
                'boolean' === Nh[Td] && (Mh[Kh(Td)] = !1);
        }), Mh;
    }

    function Mh(Xf, Ch, Bh) {
        let Nh = Oh,
            Ph = 0;
        const Qh = Xf.length;
        for (; Nh < Ch.length;) {
            const Rh = Ch[Nh];
            if (Ph <= 0 && Ch.slice(Nh, Nh + Qh) === Xf)
                return Nh;
            '\\' === Rh ? Nh++ : '{' === Rh ? Ph++ : '}' === Rh && Ph--, Nh++;
        }
        return -1;
    }

    function Nh(Xf, Ch, Bh, Td, Oh = 'latex') {
        const Ph = [];
        for (const Qh of Xf)
            if ('text' === Qh.type) {
                const Rh = Qh.data;
                let Sh, Th = !0,
                    Uh = 0;
                Sh = Rh.indexOf(Ch), -1 !== Sh && (Uh = Sh, Uh > 0 && Ph.push({
                    type: 'text',
                    data: Rh.slice(0, Uh)
                }), Th = !1);
                let Vh = !1;
                for (; !Vh;) {
                    if (Th) {
                        if (Sh = Rh.indexOf(Ch, Uh), -1 === Sh) {
                            Vh = !0;
                            break;
                        }
                        Uh !== Sh && Ph.push({
                            type: 'text',
                            data: Rh.slice(Uh, Sh)
                        }), Uh = Sh;
                    } else {
                        if (Sh = Mh(Bh, Rh, Uh + Ch.length), -1 === Sh) {
                            Vh = !0;
                            break;
                        }
                        let Wh = Rh.slice(Uh + Ch.length, Sh);
                        'ascii-math' === Oh && ([, Xh] = Ld(Xh, {
                            format: 'ascii-math'
                        })), Ph.push({
                            type: 'math',
                            data: Xh,
                            rawData: Rh.slice(Uh, Sh + Bh.length),
                            mathstyle: Td
                        }), Uh = Sh + Bh.length;
                    }
                    Th = !Th;
                }
                Uh < Rh.length && Ph.push({
                    type: 'text',
                    data: Rh.slice(Uh)
                });
            } else
                Ph.push(Qh);
        return Ph;
    }

    function Ph(Xf, Ch, Bh) {
        let Qh = [{
            type: 'text',
            data: Xf
        }];
        return (null == Ch ? void 0 : Ch.inline) && Ch.inline.forEach(([Rh, Sh]) => {
            Qh = Nh(Qh, Rh, Sh, 'textstyle');
        }), (null == Sh ? void 0 : Sh.display) && Sh.display.forEach(([Th, Uh]) => {
            Qh = Nh(Qh, Th, Uh, 'displaystyle');
        }), (null == Bh ? void 0 : Bh.inline) && Bh.inline.forEach(([Vh, Wh]) => {
            Qh = Nh(Qh, Vh, Wh, 'textstyle', 'ascii-math');
        }), (null == Bh ? void 0 : Bh.display) && Bh.display.forEach(([Xh, Yh]) => {
            Qh = Nh(Qh, Xh, Yh, 'displaystyle', 'ascii-math');
        }), Qh;
    }

    function Qh(Xf, Ch, Bh, Td) {
        var Rh;
        const Sh = function(Xf, Ch, Bh, Td) {
                d();
                try {
                    const Th = Ch.renderToMarkup(Xf, {
                            mathstyle: Bh,
                            format: 'html'
                        }),
                        Uh = document.createElement('displaystyle' === Bh ? 'div' : 'span');
                    return Uh.setAttribute('aria-hidden', 'true'), Uh.innerHTML = Ch.createHTML ? Ch.createHTML(Th) : Th, Uh;
                } catch (Ch) {
                    if (Td)
                        return document.createTextNode(Xf);
                }
                return null;
            }(Xf, Bh, Ch || 'displaystyle', Td),
            Th = null !== (Rh = Bh.renderAccessibleContent) && void 0 !== Rh ? Rh : '';
        if (Sh && /\b(mathml|speakable-text)\b/i.test(Th)) {
            d();
            const Uh = document.createElement('span');
            if (/\bmathml\b/i.test(Th) && Bh.renderToMathML && Uh.append(function(Xf, Uh) {
                    d();
                    const Vh = document.createElement('span');
                    try {
                        const Wh = '<math xmlns=\'http://www.w3.org/1998/Math/MathML\'>' + Uh.renderToMathML(Xf) + '</math>';
                        Vh.innerHTML = Uh.createHTML ? Uh.createHTML(Wh) : Wh;
                    } catch (Uh) {
                        Vh.textContent = Xf;
                    }
                    return Vh.className = 'ML__sr-only', Vh;
                }(Xf, Bh)), /\bspeakable-text\b/i.test(Th) && Bh.renderToSpeakableText) {
                const Vh = document.createElement('span'),
                    Wh = Bh.renderToSpeakableText(Xf, Bh);
                Vh.innerHTML = Bh.createHTML ? Bh.createHTML(Wh) : Wh, Vh.className = 'ML__sr-only', Uh.append(Vh);
            }
            return Uh.append(Sh), Uh;
        }
        return Sh;
    }

    function Rh(Xf, Ch) {
        var Sh, Th, Uh;
        d();
        let Vh = null;
        if ((null === (Sh = Ch.TeX) || void 0 === Sh ? void 0 : Sh.processEnvironments) && /^\s*\\begin/.test(Xf)) {
            Vh = document.createDocumentFragment();
            const Wh = Qh(Xf, '', Ch, !0);
            Wh && Vh.appendChild(Wh);
        } else {
            if (!Xf.trim())
                return null;
            const Xh = Ph(Xf, null === (Th = Ch.TeX) || void 0 === Th ? void 0 : Th.delimiters, null === (Uh = Ch.asciiMath) || void 0 === Uh ? void 0 : Uh.delimiters);
            if (1 === Xh.length && 'text' === Xh[0].type)
                return null;
            Vh = document.createDocumentFragment();
            for (const Yh of Xh)
                if ('text' === Yh.type)
                    Vh.appendChild(document.createTextNode(Yh.data));
                else {
                    const Zh = Qh(Yh.data, 'textstyle' === Yh.mathstyle ? 'textstyle' : 'displaystyle', Ch, !0);
                    Zh && Vh.appendChild(Zh);
                }
        }
        return Vh;
    }

    function Sh(Xf, Ch) {
        var Th, Uh, Vh, Wh, Xh, Yh, Zh, $h, _h, ai, bi, ci, di, ei, fi, gi;
        if (1 === Xf.childNodes.length && 3 === Xf.childNodes[0].nodeType) {
            const hi = null !== (Th = Xf.childNodes[0].textContent) && void 0 !== Th ? Th : '';
            if ((null === (Uh = Ch.TeX) || void 0 === Uh ? void 0 : Uh.processEnvironments) && /^\s*\\begin/.test(hi)) {
                Xf.textContent = '';
                const ii = Qh(hi, '', Ch, !0);
                return void(ii && Xf.append(ii));
            }
            const ii = Ph(hi, null === (Vh = Ch.TeX) || void 0 === Vh ? void 0 : Vh.delimiters, null === (Wh = Ch.asciiMath) || void 0 === Wh ? void 0 : Wh.delimiters);
            if (1 === ii.length && 'math' === ii[0].type) {
                Xf.textContent = '';
                const ji = Qh(ii[0].data, 'textstyle' === ii[0].mathstyle ? 'textstyle' : 'displaystyle', Ch, !0);
                return void(ji && Xf.append(ji));
            }
            if (1 === ii.length && 'text' === ii[0].type)
                return;
        }
        for (let hi = Xf.childNodes.length - 1; hi >= 0; hi--) {
            const ii = Xf.childNodes[hi];
            if (3 === ii.nodeType) {
                const ji = Rh(null !== (Xh = ii.textContent) && void 0 !== Xh ? Xh : '', Ch);
                ji && (hi += ji.childNodes.length - 1, ii.replaceWith(ji));
            } else if (1 === ii.nodeType) {
                const ki = li,
                    mi = li.nodeName.toLowerCase();
                if ('script' === mi) {
                    const ni = oi;
                    let pi;
                    if (null === (Yh = Ch.processScriptTypePattern) || void 0 === Yh ? void 0 : Yh.test(ni.type))
                        pi = null !== (Zh = ni.textContent) && void 0 !== Zh ? Zh : '';
                    else if (null === ($h = Ch.processMathJSONScriptTypePattern) || void 0 === $h ? void 0 : $h.test(ni.type))
                        try {
                            pi = null === (_h = Ch.serializeToLatex) || void 0 === _h ? void 0 : _h.call(Ch, JSON.parse(null !== (ai = ni.textContent) && void 0 !== ai ? ai : ''));
                        } catch (ji) {}
                    if (pi) {
                        let qi = 'displaystyle';
                        for (const ri of ni.type.split(';')) {
                            const [si, ti] = ri.toLowerCase().split('=');
                            'mode' === si.trim() && (qi = 'display' === ti.trim() ? 'displaystyle' : 'textstyle');
                        }
                        const si = Qh(pi, qi, ri, !0);
                        si && ni.parentNode.replaceChild(si, ni);
                    }
                } else if (null !== (ci = null === (bi = Ch.processClassPattern) || void 0 === bi ? void 0 : bi.test(ni.className)) && void 0 !== ci && ci || !(null !== (ei = null === (di = Ch.skipTags) || void 0 === di ? void 0 : di.includes(pi)) && void 0 !== ei && ei || null !== (gi = null === (fi = Ch.ignoreClassPattern) || void 0 === fi ? void 0 : fi.test(ni.className)) && void 0 !== gi && gi))
                    if (1 === ji.childNodes.length && 3 === ji.childNodes[0].nodeType) {
                        const qi = ji.textContent;
                        ji.textContent = '';
                        const ri = Qh(null != qi ? qi : '', 'displaystyle', Ch, !0);
                        ri && ji.append(ri);
                    } else
                        Sh(ni, Ch);
            }
        }
    }
    Oh() && !(null === (Dh = window.customElements) || void 0 === Dh ? void 0 : Dh.get('math-field')) && (null !== (Eh = globalThis[Gh = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== Eh || (globalThis[Gh] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')].version = '0.86.0', window.MathfieldElement = Jh, null === (Fh = window.customElements) || void 0 === Fh || Fh.define('math-field', Jh));
    const Th = {
        skipTags: [
            'math-field',
            'noscript',
            'style',
            'textarea',
            'pre',
            'code',
            'annotation',
            'annotation-xml'
        ],
        processScriptType: 'math/tex',
        processMathJSONScriptType: 'math/json',
        ignoreClass: 'tex2jax_ignore',
        processClass: 'tex2jax_process',
        renderAccessibleContent: 'mathml',
        asciiMath: {
            delimiters: {
                display: [
                    [
                        '`',
                        '`'
                    ]
                ]
            }
        },
        TeX: {
            processEnvironments: !0,
            delimiters: {
                inline: [
                    [
                        '\\(',
                        '\\)'
                    ]
                ],
                display: [
                    [
                        '$$',
                        '$$'
                    ],
                    [
                        '\\[',
                        '\\]'
                    ]
                ]
            }
        }
    };

    function Uh(Xf, Ch) {
        var Vh, Wh, Xh, Yh;
        try {
            const Zh = {
                ...Th,
                ...Ch
            };
            Zh.ignoreClassPattern = new RegExp(null !== (Vh = Zh.ignoreClass) && void 0 !== Vh ? Vh : ''), Zh.processClassPattern = new RegExp(null !== (Wh = Zh.processClass) && void 0 !== Wh ? Wh : ''), Zh.processScriptTypePattern = new RegExp(null !== (Xh = Zh.processScriptType) && void 0 !== Xh ? Xh : ''), Zh.processMathJSONScriptTypePattern = new RegExp(null !== (Yh = Zh.processMathJSONScriptType) && void 0 !== Yh ? Yh : ''), null !== Zh.fontsDirectory && Of(Zh.fontsDirectory), He(null, Ye, Ge(Ye).toString(36)), Sh(Xf, Zh);
        } catch (Xf) {
            Error;
        }
    }

    function Vh(Xf, Ch, Wh = 3000, Xh = '$0') {
        for (const Yh of Ch)
            v[Yh] && (v[Yh].frequency = Wh, v[Yh].category = Xf, v[Yh].template = Xh.replace(/\$0/g, Yh)), x[Yh] && (x[Yh] = {
                ...x[Yh],
                frequency: Wh,
                category: Xf,
                template: Xh.replace(/\$0/g, Yh)
            });
    }

    function Yh() {
        var Zh, $h;
        return null !== (Zh = globalThis[$h = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== Zh || (globalThis[$h] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')];
    }

    function Zh(Xf, Ch) {
        var $h;
        (Ch = null != Ch ? Ch : {}).mathstyle = null !== ($h = Ch.mathstyle) && void 0 !== $h ? $h : 'displaystyle';
        const _h = ud(),
            ai = new kc('root', _h);
        ai.body = Rc(Xf, _h, {
            parseMode: 'math',
            mathstyle: Ch.mathstyle
        });
        const bi = ai.render(new Cb({
            registers: _h.registers,
            renderPlaceholder: () => new Mb(160, {
                maxFontSize: 1
            })
        }, {
            fontSize: 5,
            letterShapeStyle: _h.letterShapeStyle
        }, Ch.mathstyle));
        return bi ? (Rb(bi), Ob(bi), Tb(bi, {
            classes: 'ML__mathlive'
        }).toMarkup()) : '';
    }

    function $h(Xf, _h = {}) {
        return ce(Rc(Xf, ud(), {
            parseMode: 'math',
            args: () => '',
            mathstyle: 'displaystyle'
        }), _h);
    }

    function ai(Xf, bi = {}) {
        return ke(Rc(Xf, ud(), {
            parseMode: 'math',
            mathstyle: 'displaystyle'
        }), bi);
    }
    let ci;

    function di(Xf) {
        var ei, fi;
        if (!ci) {
            const gi = null === (ei = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === ei ? void 0 : ei.ComputeEngine;
            gi && (ci = new gi());
        }
        return null !== (fi = null == ci ? void 0 : ci.box(Xf).latex) && void 0 !== fi ? fi : '';
    }

    function ei(Xf, bi) {
        var fi, gi, hi, ii;
        const ji = function(Xf) {
            if ('string' == typeof Xf && Oh()) {
                const ki = document.getElementById(Xf);
                if (null === ki)
                    throw new Error(`The element with ID "${ Xf }" could not be found.`);
                return ki;
            }
            return 'string' == typeof Xf ? null : Xf;
        }(Xf);
        if (!ji)
            return;
        const ki = null != bi ? bi : {};
        null !== (fi = ki.renderToMarkup) && void 0 !== fi || (ki.renderToMarkup = Zh), null !== (gi = ki.renderToMathML) && void 0 !== gi || (ki.renderToMathML = $h), null !== (hi = ki.renderToSpeakableText) && void 0 !== hi || (ki.renderToSpeakableText = ai), null !== (ii = ki.serializeToLatex) && void 0 !== ii || (ki.serializeToLatex = di), Uh(ji, ki);
    }
    Vh('Trigonometry', [
        '\\cos',
        '\\sin',
        '\\tan'
    ], 4000), Vh('Trigonometry', [
        '\\arccos',
        '\\arcsin',
        '\\arctan',
        '\\arctg',
        '\\arcctg',
        '\\arcsec',
        '\\arccsc',
        '\\arsinh',
        '\\arcosh',
        '\\artanh',
        '\\arcsech',
        '\\arccsch',
        '\\arg',
        '\\ch',
        '\\cosec',
        '\\cosh',
        '\\cot',
        '\\cotg',
        '\\coth',
        '\\csc',
        '\\ctg',
        '\\cth',
        '\\lg',
        '\\lb',
        '\\sec',
        '\\sinh',
        '\\sh',
        '\\tanh',
        '\\tg',
        '\\th'
    ], 2000), Vh('Functions', [
        '\\ln',
        '\\log',
        '\\exp',
        '\\lim'
    ], 4000), Vh('Functions', [
        '\\dim',
        '\\ker',
        '\\deg',
        '\\det',
        '\\mod',
        '\\min',
        '\\max'
    ], 3000), Vh('Functions', ['\\hom'], 1200), Vh('Decoration', ['\\rule'], 200, '$0{2em}{1em}'), Vh('Decoration', [
        '\\color',
        '\\textcolor'
    ], 200, '{$0{m0}A}{$0{m1}B}{$0{m2}C }{$0{m3}a}{$0{m4}b}{$0{m5}c}{$0{m6}8}'), Vh('Decoration', [
        '\\overline',
        '\\underline'
    ], 3000, '$0{\\placeholder{}}'), Vh('Decoration', ['\\enclose'], 1200, '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{x=0}'), Vh('Decoration', ['\\fcolorbox'], 1200, '\\fcolorbox{#cd0030}{#ffd400}{\\unicode{"2B1A}}'), Vh('Decoration', ['\\colorbox'], 1200, '\\colorbox{#fbc0bd}{\\unicode{"2B1A}}'), Vh('Decoration', [
        '\\boxed',
        '\\cancel',
        '\\bcancel',
        '\\xcancel'
    ], 1200, '$0{\\placeholder{}}'), Vh('Decoration', ['\\bbox'], 1200, '\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{"2B1A}}'), Vh('Styling', ['\\mathbb'], 4000, '$0{Don Knuth}'), Vh('Styling', [
        '\\textbf',
        '\\textup',
        '\\textit',
        '\\textrm',
        '\\textsf',
        '\\texttt',
        '\\textnormal',
        '\\textmd',
        '\\textsl',
        '\\textsc',
        '\\mathsf',
        '\\mathtt',
        '\\mathrm',
        '\\mathfrak',
        '\\mathcal',
        '\\mathscr',
        '\\mathbf',
        '\\mathmd',
        '\\mathit',
        '\\text',
        '\\mbox',
        '\\Bbb',
        '\\bold',
        '\\bm',
        '\\boldsymbol'
    ], 3000, '$0{Don Knuth}'), Vh('Styling', [
        '\\frak',
        '\\tt',
        '\\bf',
        '\\it',
        '\\rmfamily',
        '\\sffamily',
        '\\ttfamily',
        '\\class',
        '\\cssId',
        '\\htmlData',
        '\\htmlStyle'
    ], 1200, '{$0 Don Knuth}'), Vh('Styling', [
        '\\bfseries',
        '\\mdseries',
        '\\upshape',
        '\\slshape',
        '\\scshape'
    ], 1200, '\\text{$0 Don Knuth}'), Vh('Styling', [
        '\\class',
        '\\cssId'
    ], 1200, '$0{testIdentifier}{Don Knuth}'), Vh('Styling', ['\\fontseries'], 1200, '\\text{$0{b}Don Knuth}'), Vh('Styling', ['\\fontfamily'], 1200, '\\text{$0{cmtt}Don Knuth}'), Vh('Styling', ['\\fontshape'], 1200, '\\text{$0{sc}Don Knuth}'), Vh('Styling', ['\\selectfont'], 1200, '\\text{$0}'), Vh('Styling', ['\\emph'], 1200, 'Don$0{Knuth}'), Vh('Styling', ['\\em'], 1200, 'Don{$0 Knuth}'), Vh('Layout', [
        '\\mathop',
        '\\mathbin',
        '\\mathrel',
        '\\mathopen',
        '\\mathclose',
        '\\mathpunct',
        '\\mathord',
        '\\mathinner',
        '\\operatorname',
        '\\operatorname*'
    ], 1200, 'x=$0{arg}=0'), Vh('Layout', ['\\middle'], 1200, '\\left\\{x$0|x>0\\right\\}'), Vh('Layout', [
        '\\overset',
        '\\underset',
        '\\stackrel',
        '\\stackbin'
    ], 1200, '$0{arg}{x=0}'), Vh('Layout', [
        '\\rlap',
        '\\mathrlap'
    ], 1200, '$0{/}0'), Vh('Layout', [
        '\\llap',
        '\\mathllap'
    ], 1200, 'o$0{/}'), Vh('Fractions', ['\\frac'], 4000, '$0{\\placeholder{}}{\\placeholder{}}'), Vh('Fractions', [
        '\\binom',
        '\\dfrac',
        '\\tfrac',
        '\\dbinom',
        '\\tbinom',
        '\\pdiff',
        '\\cfrac'
    ], 1200, '$0{\\placeholder{}}{\\placeholder{}}'), Vh('Fractions', [
        '\\over',
        '\\atop',
        '\\choose'
    ], 1200, '\\unicode{"2B1A} $0 \\unicode{"2B1A}'), Vh('Fractions', [
        '\\overwithdelims',
        '\\atopwithdelims'
    ], 1200, '{\\unicode{"2B1A} $0{\\lbrace}{\\rbrace} \\unicode{"2B1A}}'), Vh('Extensible Operators', [
        '\\sum',
        '\\prod',
        '\\bigcap',
        '\\bigcup',
        '\\int'
    ], 4000), Vh('Extensible Operators', [
        '\\bigoplus',
        '\\smallint',
        '\\iint',
        '\\oint'
    ], 3000), Vh('Extensible Operators', [
        '\\bigwedge',
        '\\bigvee',
        '\\coprod',
        '\\bigsqcup',
        '\\bigotimes',
        '\\bigodot',
        '\\biguplus',
        '\\intop',
        '\\sqcup',
        '\\sqcap',
        '\\uplus',
        '\\wr',
        '\\Cap',
        '\\Cup',
        '\\doublecap',
        '\\doublecup',
        '\\amalg',
        '\\iiint',
        '\\oiint',
        '\\oiiint',
        '\\intclockwise',
        '\\varointclockwise',
        '\\ointctrclockwise',
        '\\intctrclockwise'
    ], 1200), Vh('Accents', ['\\vec'], 4000), Vh('Accents', [
        '\\bar',
        '\\ddot',
        '\\acute',
        '\\tilde',
        '\\check'
    ], 3000, '$0{\\placeholder{}}'), Vh('Accents', [
        '\\^',
        '\\`',
        '\\\''
    ], 1200, '$0{e}'), Vh('Accents', ['\\c'], 1200, '$0{c}'), Vh('Accents', ['\\~'], 1200, '$0{n}'), Vh('Accents', [
        '\\mathring',
        '\\hat',
        '\\dot',
        '\\breve',
        '\\grave'
    ], 1200, '$0{\\placeholder{}}'), Vh('Extensible Symbols', [
        '\\overrightarrow',
        '\\overleftarrow',
        '\\Overrightarrow',
        '\\overleftharpoon',
        '\\overrightharpoon',
        '\\overleftrightarrow',
        '\\overbrace',
        '\\overlinesegment',
        '\\overgroup',
        '\\widehat',
        '\\widecheck',
        '\\widetilde'
    ], 3000, '$0{ABC}'), Vh('Extensible Symbols', [
        '\\underrightarrow',
        '\\underleftarrow',
        '\\underleftrightarrow',
        '\\underbrace',
        '\\underlinesegment',
        '\\undergroup',
        '\\utilde'
    ], 3000, '$0{ABC}'), Vh('Sizing', [
        '\\tiny',
        '\\scriptsize',
        '\\footnotesize',
        '\\small',
        '\\normalsize',
        '\\large',
        '\\Large',
        '\\LARGE',
        '\\huge',
        '\\Huge'
    ], 1200, '$0{x=0}'), Vh('Sizing', [
        '\\big',
        '\\Big',
        '\\bigg',
        '\\Bigg'
    ], 1200, '$0($0)'), Vh('Sizing', [
        '\\bigl',
        '\\Bigl',
        '\\biggl',
        '\\Biggl'
    ], 1200, '$0('), Vh('Sizing', [
        '\\bigr',
        '\\Bigr',
        '\\biggr',
        '\\Biggr'
    ], 1200, '$0)'), Vh('Sizing', [
        '\\bigm',
        '\\Bigm',
        '\\biggm',
        '\\Biggm'
    ], 1200, '$0|'), Vh('Letterlike Symbols', [
        '\\nabla',
        '\\partial',
        '\\N',
        '\\R',
        '\\Q',
        '\\C',
        '\\Z',
        '\\exponentialE',
        '\\forall',
        '\\exists',
        '\\nexists'
    ], 4000), Vh('Letterlike Symbols', [
        '\\doubleStruckCapitalP',
        '\\P',
        '\\ell',
        '\\hbar',
        '\\hslash',
        '\\imath',
        '\\jmath',
        '\\imaginaryI',
        '\\imaginaryJ',
        '\\differentialD',
        '\\rd',
        '\\capitalDifferentialD',
        '\\doubleStruckCapitalN',
        '\\doubleStruckCapitalR',
        '\\doubleStruckCapitalQ',
        '\\doubleStruckCapitalC',
        '\\doubleStruckCapitalZ',
        '\\rD',
        '\\differencedelta',
        '\\mid',
        '@',
        '\\Re',
        '\\Im',
        '\\$',
        '\\%',
        '\\And',
        '\\degree'
    ], 3000), Vh('Letterlike Symbols', [
        '\\top',
        '\\bot',
        '\\scriptCapitalE',
        '\\scriptCapitalH',
        '\\scriptCapitalL',
        '\\gothicCapitalC',
        '\\gothicCapitalH',
        '\\gothicCapitalI',
        '\\gothicCapitalR',
        '\\Bbbk',
        '\\Finv',
        '\\Game',
        '\\wp',
        '\\eth',
        '\\mho',
        '\\pounds',
        '\\yen',
        '\\euro'
    ], 1200), Vh('Crosses', [
        '\\dagger',
        '\\dag'
    ], 4000), Vh('Crosses', [
        '\\ddag',
        '\\ddagger',
        '\\maltese',
        '\\textdagger',
        '\\textdaggerdbl'
    ], 1200), Vh('Various', [
        '\\checkmark',
        '\\diagup',
        '\\diagdown',
        '\\angle',
        '\\measuredangle',
        '\\sphericalangle',
        '\\prime',
        '\\doubleprime',
        '\\backprime',
        '\\backdoubleprime',
        '\\sharp',
        '\\flat',
        '\\natural',
        '\\&',
        '\\#',
        '\\clubsuit',
        '\\spadesuit',
        '\\diamondsuit',
        '\\heartsuit',
        '\\backslash',
        '\\infty',
        '/',
        '\\_',
        '\\/',
        '|',
        '\''
    ], 1200), Vh('Various', ['\\unicode'], 1200, '$0{"2B1A}'), Vh('Arrows', [
        '\\longrightarrow',
        '\\rightarrow',
        '\\Longrightarrow',
        '\\Rightarrow'
    ], 4000), Vh('Arrows', [
        '\\longmapsto',
        '\\mapsto',
        '\\Longleftrightarrow',
        '\\rightleftarrows',
        '\\leftarrow',
        '\\curvearrowleft',
        '\\uparrow',
        '\\downarrow',
        '\\hookrightarrow',
        '\\rightharpoonup',
        '\\rightleftharpoons'
    ], 3000), Vh('Arrows', [
        '\\Leftarrow',
        '\\longleftrightarrow',
        '\\longleftarrow',
        '\\Longleftarrow',
        '\\searrow',
        '\\nearrow',
        '\\swarrow',
        '\\nwarrow',
        '\\Uparrow',
        '\\Downarrow',
        '\\updownarrow',
        '\\Updownarrow',
        '\\hookleftarrow',
        '\\leftharpoonup',
        '\\leftharpoondown',
        '\\rightharpoondown',
        '\\leftrightarrows',
        '\\dashrightarrow',
        '\\dashleftarrow',
        '\\leftleftarrows',
        '\\Lleftarrow',
        '\\twoheadleftarrow',
        '\\leftarrowtail',
        '\\looparrowleft',
        '\\leftrightharpoons',
        '\\circlearrowleft',
        '\\Lsh',
        '\\upuparrows',
        '\\downharpoonleft',
        '\\multimap',
        '\\leftrightsquigarrow',
        '\\twoheadrightarrow',
        '\\rightarrowtail',
        '\\looparrowright',
        '\\curvearrowright',
        '\\circlearrowright',
        '\\Rsh',
        '\\downdownarrows',
        '\\upharpoonright',
        '\\downharpoonright',
        '\\rightsquigarrow',
        '\\leadsto',
        '\\Rrightarrow',
        '\\restriction'
    ], 1200), Vh('Arrows', [
        '\\upharpoonleft',
        '\\rightrightarrows'
    ], 0), Vh('Negated Arrows', [
        '\\nrightarrow',
        '\\nRightarrow',
        '\\nleftrightarrow',
        '\\nLeftrightarrow',
        '\\nleftarrow',
        '\\nLeftarrow'
    ], 1200), Vh('Extensible Symbols', [
        '\\xrightarrow',
        '\\xleftarrow',
        '\\xRightarrow',
        '\\xLeftarrow',
        '\\xleftharpoonup',
        '\\xleftharpoondown',
        '\\xrightharpoonup',
        '\\xrightharpoondown',
        '\\xlongequal',
        '\\xtwoheadleftarrow',
        '\\xtwoheadrightarrow',
        '\\xleftrightarrow',
        '\\xLeftrightarrow',
        '\\xrightleftharpoons',
        '\\xleftrightharpoons',
        '\\xhookleftarrow',
        '\\xhookrightarrow',
        '\\xmapsto',
        '\\xtofrom',
        '\\xrightleftarrows',
        '\\xrightequilibrium',
        '\\xleftequilibrium'
    ], 1200, '$0[below]{above}=0'), Vh('Negated Relations', [
        '\\nless',
        '\\nleqslant',
        '\\lneq',
        '\\lneqq',
        '\\nleqq',
        '\\unlhd',
        '\\unrhd',
        '\\lvertneqq',
        '\\lnsim',
        '\\lnapprox',
        '\\nprec',
        '\\npreceq',
        '\\precnsim',
        '\\precnapprox',
        '\\nsim',
        '\\nshortmid',
        '\\nmid',
        '\\nvdash',
        '\\nvDash',
        '\\ngtr',
        '\\ngeqslant',
        '\\ngeqq',
        '\\gneq',
        '\\gneqq',
        '\\gvertneqq',
        '\\gnsim',
        '\\nsucc',
        '\\succnsim',
        '\\ncong',
        '\\nshortparallel',
        '\\nparallel',
        '\\nVDash',
        '\\nVdash',
        '\\precneqq',
        '\\succneqq',
        '\\gnapprox',
        '\\succnapprox',
        '\\nsucceq'
    ], 1200), Vh('Hebrew', [
        '\\aleph',
        '\\beth',
        '\\daleth',
        '\\gimel'
    ], 1200), Vh('Fences', [
        '\\lbrace',
        '\\rbrace',
        '\\vert',
        '\\Vert',
        '\\{',
        '\\}',
        '(',
        ')',
        '[',
        ']'
    ], 4000), Vh('Fences', [
        '\\langle',
        '\\rangle',
        '\\lfloor',
        '\\rfloor',
        '\\lceil',
        '\\rceil',
        '\\mvert',
        '\\|',
        '\\mVert'
    ], 3000), Vh('Fences', [
        '\\lvert',
        '\\rvert',
        '\\lVert',
        '\\rVert',
        '\\lbrack',
        '\\rbrack',
        '\\ulcorner',
        '\\urcorner',
        '\\llcorner',
        '\\lrcorner',
        '\\lgroup',
        '\\rgroup',
        '\\lmoustache',
        '\\rmoustache'
    ], 1200), Vh('Relations', [
        '=',
        '\\ne',
        '\\neq',
        '<',
        '>',
        '\\leqslant',
        '\\geqslant',
        '\\approx'
    ], 4000), Vh('Relations', [
        '\\lt',
        '\\gt',
        '\\le',
        '\\ge',
        '\\leq',
        '\\geq',
        '\\gg',
        '\\cong',
        '\\equiv',
        '\\prec',
        '\\preceq',
        '\\succ',
        '\\perp',
        '\\parallel',
        '\\propto',
        '\\smile',
        '\\frown',
        '\\sim',
        '\\gtrsim'
    ], 3000), Vh('Relations', [
        '\\coloneq',
        '\\succeq',
        '\\approxeq',
        '\\thickapprox',
        '\\lessapprox',
        '\\gtrapprox',
        '\\precapprox',
        '\\succapprox',
        '\\thicksim',
        '\\succsim',
        '\\precsim',
        '\\backsim',
        '\\eqsim',
        '\\backsimeq',
        '\\simeq',
        '\\lesssim',
        '\\nleq',
        '\\ngeq',
        '\\smallsmile',
        '\\smallfrown',
        '\\bowtie',
        '\\asymp',
        '\\leqq',
        '\\eqslantless',
        '\\ll',
        '\\lll',
        '\\lessgtr',
        '\\lesseqgtr',
        '\\lesseqqgtr',
        '\\risingdotseq',
        '\\fallingdotseq',
        '\\preccurlyeq',
        '\\curlyeqprec',
        '\\vDash',
        '\\Vvdash',
        '\\bumpeq',
        '\\Bumpeq',
        '\\geqq',
        '\\eqslantgtr',
        '\\ggg',
        '\\gtrless',
        '\\gtreqless',
        '\\gtreqqless',
        '\\succcurlyeq',
        '\\curlyeqsucc',
        '\\Vdash',
        '\\shortmid',
        '\\shortparallel',
        '\\between',
        '\\pitchfork',
        '\\varpropto',
        '\\backepsilon',
        '\\llless',
        '\\gggtr',
        '\\lhd',
        '\\rhd',
        '\\Join',
        '\\doteq',
        '\\doteqdot',
        '\\Doteq',
        '\\eqcirc',
        '\\circeq',
        '\\lessdot',
        '\\gtrdot',
        '\\measeq',
        '\\eqdef',
        '\\questeq'
    ], 1200), Vh('Logic', [
        '\\leftrightarrow',
        '\\Leftrightarrow',
        '\\to'
    ], 4000), Vh('Logic', [
        '\\models',
        '\\vdash'
    ], 3000), Vh('Logic', [
        '\\therefore',
        '\\because',
        '\\implies',
        '\\gets',
        '\\dashv',
        '\\impliedby',
        '\\biconditional',
        '\\roundimplies'
    ], 1200), Vh('Operators', [
        '+',
        '-',
        '*',
        '\\cdot'
    ], 4000), Vh('Operators', ['\\sqrt'], 4000, '$0{\\placeholder{}}'), Vh('Operators', [
        '\\pm',
        '\\mp',
        '\\times',
        '\\div',
        '\\surd'
    ], 3000), Vh('Operators', [
        '\\ltimes',
        '\\rtimes',
        '\\leftthreetimes',
        '\\rightthreetimes',
        '\\intercal',
        '\\dotplus',
        '\\centerdot',
        '\\doublebarwedge',
        '\\divideontimes',
        '\\divides'
    ], 1200), Vh('Logic', [
        '\\wedge',
        '\\vee',
        '\\neg'
    ], 4000), Vh('Logic', ['\\lnot'], 3000), Vh('Logic', [
        '\\land',
        '\\lor',
        '\\barwedge',
        '\\veebar',
        '\\nor',
        '\\curlywedge',
        '\\curlyvee'
    ], 1200), Vh('Greek', [
        '\\alpha',
        '\\beta',
        '\\gamma',
        '\\delta',
        '\\epsilon',
        '\\varepsilon',
        '\\zeta',
        '\\eta',
        '\\theta',
        '\\vartheta',
        '\\iota',
        '\\kappa',
        '\\varkappa',
        '\\lambda',
        '\\mu',
        '\\nu',
        '\\xi',
        '\\pi',
        '\\varpi',
        '\\rho',
        '\\varrho',
        '\\sigma',
        '\\varsigma',
        '\\tau',
        '\\phi',
        '\\varphi',
        '\\upsilon',
        '\\chi',
        '\\psi',
        '\\omega',
        '\\Gamma',
        '\\Delta',
        '\\Theta',
        '\\Lambda',
        '\\Xi',
        '\\Pi',
        '\\Sigma',
        '\\Upsilon',
        '\\Phi',
        '\\Psi',
        '\\Omega',
        '\\digamma',
        '\\omicron'
    ], 3000), Vh('Sets', [
        '\\emptyset',
        '\\varnothing',
        '\\cap',
        '\\cup',
        '\\in',
        '\\notin',
        '\\subset',
        '\\supset',
        '\\subseteq',
        '\\supseteq',
        '\\sqsubseteq'
    ], 4000), Vh('Sets', [
        '\\setminus',
        '\\not',
        '\\ni',
        '\\sqsupseteq',
        '\\nsupseteqq',
        '\\supsetneq',
        '\\varsupsetneq',
        '\\supsetneqq',
        '\\varsupsetneqq'
    ], 3000), Vh('Sets', [
        '\\smallsetminus',
        '\\complement',
        '\\owns',
        '\\subsetneq',
        '\\varsubsetneq',
        '\\subsetneqq',
        '\\varsubsetneqq',
        '\\nsubset',
        '\\nsupset',
        '\\nsubseteq',
        '\\nsupseteq',
        '\\nsubseteqq',
        '\\subseteqq',
        '\\Subset',
        '\\sqsubset',
        '\\supseteqq',
        '\\Supset',
        '\\sqsupset'
    ], 1200), Vh('Spacing', [
        '\\space',
        '\\quad',
        '\\qquad'
    ], 3000, '\\unicode{"203A}$0\\unicode{"2039}'), Vh('Spacing', [
        '\\!',
        '\\,',
        '\\:',
        '\\;',
        '\\enskip',
        '\\enspace'
    ], 1200, '\\unicode{"203A}$0\\unicode{"2039}'), Vh('Spacing', [
        '\\hspace',
        '\\hspace*'
    ], 1200, '\\unicode{"203A}$0{1em}\\unicode{"2039}'), Vh('Punctuation', [
        '\\colon',
        '\\cdotp',
        '\\ldots',
        '\\cdots',
        '\\ddots',
        '\\vdots',
        '?',
        '!',
        ':',
        '"',
        ',',
        '.',
        ';'
    ], 3000), Vh('Punctuation', [
        '\\mathellipsis',
        '\\ldotp',
        '\\Colon'
    ], 1200), Vh('Boxes', [
        '\\square',
        '\\Box'
    ], 3000), Vh('Boxes', [
        '\\blacksquare',
        '\\boxminus',
        '\\boxplus',
        '\\boxtimes',
        '\\boxdot'
    ], 1200), Vh('Circles', [
        '\\circ',
        '\\bullet',
        '\\circleddash',
        '\\oplus',
        '\\otimes'
    ], 3000), Vh('Circles', [
        '\\bigcirc',
        '\\circledast',
        '\\ominus',
        '\\circledcirc',
        '\\oslash',
        '\\circledS',
        '\\circledR',
        '\\odot'
    ], 1200), Vh('Triangles', [
        '\\triangle',
        '\\triangleq'
    ], 3000), Vh('Triangles', [
        '\\bigtriangleup',
        '\\vartriangle',
        '\\triangledown',
        '\\bigtriangledown',
        '\\triangleleft',
        '\\vartriangleleft',
        '\\trianglelefteq',
        '\\ntriangleleft',
        '\\ntrianglelefteq',
        '\\triangleright',
        '\\vartriangleright',
        '\\trianglerighteq',
        '\\ntriangleright',
        '\\ntrianglerighteq',
        '\\blacktriangle',
        '\\blacktriangledown',
        '\\blacktriangleleft',
        '\\blacktriangleright'
    ], 1200), Vh('Shapes', [
        '\\ast',
        '\\star'
    ], 3000), Vh('Shapes', [
        '\\diamond',
        '\\Diamond',
        '\\lozenge',
        '\\blacklozenge',
        '\\bigstar'
    ], 1200);
});