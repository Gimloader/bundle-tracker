function a(b, c, d, e) {
    Object.defineProperty(b, c, {
        get: d,
        set: e,
        enumerable: !0,
        configurable: !0
    });
}
('undefined' != typeof globalThis ? globalThis : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : 'undefined' != typeof global ? global : {}).parcelRequire388b.register('OeG4h', function(a, b) {
    function c(d) {
        return Array.isArray(d);
    }

    function c() {
        return 'window' in globalThis && 'document' in globalThis;
    }

    function c() {
        if (!_o())
            throw new Error('<math-field> is an interactive component that needs to run in a browser environment\nIf you are using nextjs, see https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr');
    }

    function c() {
        return !!_o() && ('matchMedia' in globalThis ? globalThis.matchMedia('(any-pointer: coarse)').matches : 'ontouchstart' in globalThis || navigator.maxTouchPoints > 0);
    }

    function c() {
        return _o() && 'function' == typeof navigator.vibrate;
    }

    function c() {
        var d, e;
        if (!_o())
            return 'other';
        const f = null !== (e = null === (d = navigator.userAgentData) || void 0 === d ? void 0 : d.platform) && void 0 !== e ? e : navigator.platform;
        return /^mac/i.test(f) ? 5 === navigator.maxTouchPoints ? 'ios' : 'macos' : /^win/i.test(f) ? 'windows' : /android/i.test(navigator.userAgent) ? 'android' : /iphone|ipod|ipad/i.test(navigator.userAgent) ? 'ios' : /\bcros\b/i.test(navigator.userAgent) ? 'chromeos' : 'other';
    }

    function c() {
        if (!_o())
            return !0;
        if (/firefox/i.test(navigator.userAgent)) {
            const d = navigator.userAgent.match(/firefox\/(\d+)/i);
            return !!d && parseInt(d[1]) >= 78;
        }
        if (/trident/i.test(navigator.userAgent))
            return !1;
        if (/edge/i.test(navigator.userAgent)) {
            const d = navigator.userAgent.match(/edg\/(\d+)/i);
            return !!d && parseInt(d[1]) >= 79;
        }
        return !0;
    }
    _d(a.exports, 'MathfieldElement', function() {
        return _ud;
    }), _d(a.exports, 'renderMathInElement', function() {
        return _xd;
    });
    const c = {
        strings: {
            en: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symbols',
                'keyboard.tooltip.greek': 'Greek Letters',
                'keyboard.tooltip.command': 'LaTeX Command Mode',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Roman Letters',
                'tooltip.copy to clipboard': 'Copy to Clipboard',
                'tooltip.redo': 'Redo',
                'tooltip.toggle virtual keyboard': 'Toggle Virtual Keyboard',
                'tooltip.undo': 'Undo',
                'menu.insert matrix': 'Insert Matrix',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Delimiters',
                'menu.array.add row above': 'Add Row After',
                'menu.array.add row below': 'Add Row Before',
                'menu.array.add column after': 'Add Column After',
                'menu.array.add column before': 'Add Column Before',
                'menu.array.delete row': 'Delete Row',
                'menu.array.delete rows': 'Delete Selected Rows',
                'menu.array.delete column': 'Delete Column',
                'menu.array.delete columns': 'Delete Selected Columns',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Insert Table',
                'submenu.table style': 'Table Style'
            },
            ar: {
                'keyboard.tooltip.functions': 'مهام',
                'keyboard.tooltip.symbols': 'حرف او رمز',
                'keyboard.tooltip.greek': 'حروف يونانية',
                'keyboard.tooltip.command': 'حالة تلقي الأوامر اللاتك',
                'keyboard.tooltip.numeric': 'الرقمية',
                'keyboard.tooltip.roman': 'رموز الاحرف الرومانية',
                'tooltip.copy to clipboard': 'نسخ إلى الحافظة',
                'tooltip.redo': 'الإعادة',
                'tooltip.toggle virtual keyboard': 'تبديل لوحة المفاتيح الإفتراضية',
                'tooltip.undo': 'إلغاء',
                'menu.insert matrix': 'أدخل المصفوفة',
                'menu.insert vector': 'أدخل متجه',
                'submenu.array.matrix delimiters': 'محددات المصفوفة',
                'menu.array.add row above': 'أضف صفًا بعد ذلك',
                'menu.array.add row below': 'أضف الصف قبل',
                'menu.array.add column after': 'أضف العمود بعد ذلك',
                'menu.array.add column before': 'أضف العمود قبل',
                'menu.array.delete row': 'احذف صف',
                'menu.array.delete rows': 'حذف الصفوف المحددة',
                'menu.array.delete column': 'حذف العمود',
                'menu.array.delete columns': 'حذف الأعمدة المحددة',
                'submenu.array.insert separator': 'أدخل فاصل',
                'menu.insert table': 'إدراج جدول',
                'submenu.table style': 'نمط الجدول'
            },
            bg: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Гръцки букви',
                'keyboard.tooltip.command': 'Команден режим на латекс',
                'keyboard.tooltip.numeric': 'Числови',
                'keyboard.tooltip.roman': 'Римски букви',
                'tooltip.copy to clipboard': 'Копиране в клипборда',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Превключване на виртуална клавиатура',
                'tooltip.undo': 'Отмяна',
                'menu.insert matrix': 'Вмъкване на матрица',
                'menu.insert vector': 'Вмъкване на вектор',
                'submenu.array.matrix delimiters': 'Матрични разделители',
                'menu.array.add row above': 'Добавяне на ред след',
                'menu.array.add row below': 'Добавяне на ред преди',
                'menu.array.add column after': 'Добавяне на колона след',
                'menu.array.add column before': 'Добавяне на колона преди',
                'menu.array.delete row': 'Изтриване на реда',
                'menu.array.delete rows': 'Изтриване на избраните редове',
                'menu.array.delete column': 'Изтриване на колона',
                'menu.array.delete columns': 'Изтриване на избраните колони',
                'submenu.array.insert separator': 'Поставете разделител',
                'menu.insert table': 'Вмъкване на таблица',
                'submenu.table style': 'Табличен стил'
            },
            bs: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u clipboard',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj red prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši red',
                'menu.array.delete rows': 'Izbriši odabrane redove',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Ubaci tabelu',
                'submenu.table style': 'Stil tabele'
            },
            cs: {
                'keyboard.tooltip.functions': 'Funkce',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Řecké dopisy',
                'keyboard.tooltip.command': 'Příkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Číselné',
                'keyboard.tooltip.roman': 'Římské dopisy',
                'tooltip.copy to clipboard': 'Zkopírovat do schránky',
                'tooltip.redo': 'Předělat',
                'tooltip.toggle virtual keyboard': 'Přepnout virtuální klávesnici',
                'tooltip.undo': 'Vrátit',
                'menu.insert matrix': 'Vložte matici',
                'menu.insert vector': 'Vložit vektor',
                'submenu.array.matrix delimiters': 'Oddělovače matic',
                'menu.array.add row above': 'Přidat řádek za',
                'menu.array.add row below': 'Přidat řádek před',
                'menu.array.add column after': 'Přidat sloupec za',
                'menu.array.add column before': 'Přidat sloupec dříve',
                'menu.array.delete row': 'Odstranit řádek',
                'menu.array.delete rows': 'Odstranit vybrané řádky',
                'menu.array.delete column': 'Odstranit sloupec',
                'menu.array.delete columns': 'Odstranit vybrané sloupce',
                'submenu.array.insert separator': 'Vložte oddělovač',
                'menu.insert table': 'Vložit tabulku',
                'submenu.table style': 'Styl tabulky'
            },
            da: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Græske bogstaver',
                'keyboard.tooltip.command': 'LaTeX kommandotilstand',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske breve',
                'tooltip.copy to clipboard': 'Kopier til udklipsholder',
                'tooltip.redo': 'Gentag igen',
                'tooltip.toggle virtual keyboard': 'Skift virtuelt tastatur',
                'tooltip.undo': 'Fortryd',
                'menu.insert matrix': 'Indsæt matrix',
                'menu.insert vector': 'Indsæt vektor',
                'submenu.array.matrix delimiters': 'Matrixafgrænsere',
                'menu.array.add row above': 'Tilføj række efter',
                'menu.array.add row below': 'Tilføj række før',
                'menu.array.add column after': 'Tilføj kolonne efter',
                'menu.array.add column before': 'Tilføj kolonne før',
                'menu.array.delete row': 'Slet række',
                'menu.array.delete rows': 'Slet valgte rækker',
                'menu.array.delete column': 'Slet kolonne',
                'menu.array.delete columns': 'Slet valgte kolonner',
                'submenu.array.insert separator': 'Indsæt separator',
                'menu.insert table': 'Indsæt tabel',
                'submenu.table style': 'Tabelstil'
            },
            de: {
                'keyboard.tooltip.functions': 'Funktionen',
                'keyboard.tooltip.symbols': 'Symbole',
                'keyboard.tooltip.greek': 'Griechische Buchstaben',
                'keyboard.tooltip.command': 'LaTeX-Befehlsmodus',
                'keyboard.tooltip.numeric': 'Numerisch',
                'keyboard.tooltip.roman': 'Römische Buchstaben',
                'tooltip.copy to clipboard': 'In die Zwischenablage kopieren',
                'tooltip.redo': 'Wiederholen',
                'tooltip.toggle virtual keyboard': 'Virtuelle Tastatur umschalten',
                'tooltip.undo': 'Widerrufen',
                'menu.insert matrix': 'Matrix einfügen',
                'menu.insert vector': 'Vektor einfügen',
                'submenu.array.matrix delimiters': 'Matrixtrennzeichen',
                'menu.array.add row above': 'Zeile hinzufügen nach',
                'menu.array.add row below': 'Zeile hinzufügen vor',
                'menu.array.add column after': 'Spalte hinzufügen nach',
                'menu.array.add column before': 'Spalte hinzufügen vor',
                'menu.array.delete row': 'Zeile löschen',
                'menu.array.delete rows': 'Ausgewählte Zeilen löschen',
                'menu.array.delete column': 'Spalte löschen',
                'menu.array.delete columns': 'Ausgewählte Spalten löschen',
                'submenu.array.insert separator': 'Trennzeichen einfügen',
                'menu.insert table': 'Tabelle einfügen',
                'submenu.table style': 'Tabellenstil'
            },
            el: {
                'keyboard.tooltip.functions': 'συναρτήσεις',
                'keyboard.tooltip.symbols': 'σύμβολα',
                'keyboard.tooltip.greek': 'ελληνικά γράμματα',
                'keyboard.tooltip.command': 'Λειτουργία εντολών LaTeX',
                'keyboard.tooltip.numeric': 'Αριθμητικός',
                'keyboard.tooltip.roman': 'Ρωμαϊκά γράμματα',
                'tooltip.copy to clipboard': 'Αντιγραφή στο πρόχειρο',
                'tooltip.redo': 'Ξανακάνω',
                'tooltip.toggle virtual keyboard': 'Εναλλαγή εικονικού πληκτρολογίου',
                'tooltip.undo': 'Ξεκάνω',
                'menu.insert matrix': 'Εισαγωγή Matrix',
                'menu.insert vector': 'Εισαγωγή διανύσματος',
                'submenu.array.matrix delimiters': 'Οριοθέτες Matrix',
                'menu.array.add row above': 'Προσθήκη σειράς μετά',
                'menu.array.add row below': 'Προσθήκη σειράς πριν',
                'menu.array.add column after': 'Προσθήκη στήλης μετά',
                'menu.array.add column before': 'Προσθήκη στήλης πριν',
                'menu.array.delete row': 'Διαγραφή σειράς',
                'menu.array.delete rows': 'Διαγραφή επιλεγμένων σειρών',
                'menu.array.delete column': 'Διαγραφή στήλης',
                'menu.array.delete columns': 'Διαγραφή επιλεγμένων στηλών',
                'submenu.array.insert separator': 'Εισαγωγή διαχωριστικού',
                'menu.insert table': 'Εισαγωγή πίνακα',
                'submenu.table style': 'Στυλ πίνακα'
            },
            es: {
                'keyboard.tooltip.functions': 'Funciones',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras griegas',
                'keyboard.tooltip.command': 'Modo Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar al portapapeles',
                'tooltip.redo': 'Rehacer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Deshacer',
                'menu.insert matrix': 'Añadir Matriz',
                'menu.insert vector': 'Añadir vector',
                'submenu.array.matrix delimiters': 'Delimitadores de Matriz',
                'menu.array.add row above': 'Añadir Línea Antes',
                'menu.array.add row below': 'Añadir Línea Despues',
                'menu.array.add column after': 'Añadir Columna Despues',
                'menu.array.add column before': 'Añadir Columna Antes',
                'menu.array.delete row': 'Borrar Línea',
                'menu.array.delete rows': 'Borrar Líneas Seleccionadas',
                'menu.array.delete column': 'Borrar Columna',
                'menu.array.delete columns': 'Borrar Columnas Seleccionadas',
                'submenu.array.insert separator': 'Insertar un Separador',
                'menu.insert table': 'Insertar Tabla',
                'submenu.table style': 'Estilo de Tabla'
            },
            et: {
                'keyboard.tooltip.functions': 'Funktsioonid',
                'keyboard.tooltip.symbols': 'Sümbolid',
                'keyboard.tooltip.greek': 'Kreeka kirjad',
                'keyboard.tooltip.command': 'LaTeXi käsurežiim',
                'keyboard.tooltip.numeric': 'Numbriline',
                'keyboard.tooltip.roman': 'Rooma kirjad',
                'tooltip.copy to clipboard': 'Kopeerida lõikelauale',
                'tooltip.redo': 'Tee uuesti',
                'tooltip.toggle virtual keyboard': 'Lülitage sisse virtuaalne klaviatuur',
                'tooltip.undo': 'Võta tagasi',
                'menu.insert matrix': 'Sisesta maatriks',
                'menu.insert vector': 'Sisesta vektor',
                'submenu.array.matrix delimiters': 'Maatriksi eraldajad',
                'menu.array.add row above': 'Lisa rida pärast',
                'menu.array.add row below': 'Lisa rida enne',
                'menu.array.add column after': 'Lisa veerg pärast',
                'menu.array.add column before': 'Lisa veerg enne',
                'menu.array.delete row': 'Kustuta rida',
                'menu.array.delete rows': 'Kustuta valitud read',
                'menu.array.delete column': 'Kustuta veerg',
                'menu.array.delete columns': 'Kustuta valitud veerud',
                'submenu.array.insert separator': 'Sisestage eraldaja',
                'menu.insert table': 'Sisesta tabeli',
                'submenu.table style': 'Tabeli stiilis'
            },
            fa: {
                'keyboard.tooltip.functions': 'توابع',
                'keyboard.tooltip.symbols': 'نمادها',
                'keyboard.tooltip.greek': 'حروف یونانی',
                'keyboard.tooltip.command': 'حالت دستور لاتک',
                'keyboard.tooltip.numeric': 'عددی',
                'keyboard.tooltip.roman': 'حروف رومی',
                'tooltip.copy to clipboard': 'کپی به کلیپبورد',
                'tooltip.redo': 'بازگشت به بعد',
                'tooltip.toggle virtual keyboard': 'نمایش/نهفتن کیبورد مجازی',
                'tooltip.undo': 'بازگشت به قبل',
                'menu.insert matrix': 'ماتریس را وارد کنید',
                'menu.insert vector': 'درج بردار',
                'submenu.array.matrix delimiters': 'مرزهای ماتریس',
                'menu.array.add row above': 'بعد از آن ردیف اضافه کنید',
                'menu.array.add row below': 'ردیف را قبل اضافه کنید',
                'menu.array.add column after': 'اضافه کردن ستون بعد',
                'menu.array.add column before': 'ستون قبل را اضافه کنید',
                'menu.array.delete row': 'ردیف را حذف کنید',
                'menu.array.delete rows': 'ردیف های انتخاب شده را حذف کنید',
                'menu.array.delete column': 'حذف ستون',
                'menu.array.delete columns': 'ستون های انتخاب شده را حذف کنید',
                'submenu.array.insert separator': 'درج جدا کننده',
                'menu.insert table': 'قرار دادن جدول',
                'submenu.table style': 'سبک میز'
            },
            fi: {
                'keyboard.tooltip.functions': 'Toiminnot',
                'keyboard.tooltip.symbols': 'Symbolit',
                'keyboard.tooltip.greek': 'Kreikkalaiset kirjeet',
                'keyboard.tooltip.command': 'LaTeX-komentotila',
                'keyboard.tooltip.numeric': 'Numeerinen',
                'keyboard.tooltip.roman': 'Roomalaiset kirjeet',
                'tooltip.copy to clipboard': 'Kopioi leikepöydälle',
                'tooltip.redo': 'Tee uudelleen',
                'tooltip.toggle virtual keyboard': 'Vaihda virtuaalinäppäimistö',
                'tooltip.undo': 'Kumoa',
                'menu.insert matrix': 'Lisää matriisi',
                'menu.insert vector': 'Lisää vektori',
                'submenu.array.matrix delimiters': 'Matriisin erottimet',
                'menu.array.add row above': 'Lisää rivi jälkeen',
                'menu.array.add row below': 'Lisää rivi ennen',
                'menu.array.add column after': 'Lisää sarake jälkeen',
                'menu.array.add column before': 'Lisää sarake ennen',
                'menu.array.delete row': 'Poista rivi',
                'menu.array.delete rows': 'Poista valitut rivit',
                'menu.array.delete column': 'Poista sarake',
                'menu.array.delete columns': 'Poista valitut sarakkeet',
                'submenu.array.insert separator': 'Aseta erotin',
                'menu.insert table': 'Lisää taulukko',
                'submenu.table style': 'Taulukon tyyli'
            },
            fr: {
                'keyboard.tooltip.functions': 'Fonctions',
                'keyboard.tooltip.symbols': 'Symboles',
                'keyboard.tooltip.greek': 'Lettres grecques',
                'keyboard.tooltip.command': 'Mode de commandes LaTeX',
                'keyboard.tooltip.numeric': 'Numérique',
                'keyboard.tooltip.roman': 'Lettres romaines',
                'tooltip.copy to clipboard': 'Copier dans le presse-papiers',
                'tooltip.redo': 'Rétablir',
                'tooltip.toggle virtual keyboard': 'Afficher/Masquer le clavier virtuel',
                'tooltip.undo': 'Annuler',
                'menu.insert matrix': 'Insérer une Matrice',
                'menu.insert vector': 'Insérer un Vecteur',
                'submenu.array.matrix delimiters': 'Délimiteurs de la Matrice',
                'menu.array.add row above': 'Ajouter une Ligne Avant',
                'menu.array.add row below': 'Ajouter une Ligne Après',
                'menu.array.add column before': 'Ajouter une Colonne Avant',
                'menu.array.add column after': 'Ajouter une Colonne Après',
                'menu.array.delete row': 'Enlever une Ligne',
                'menu.array.delete rows': 'Enlever les Lignes Sélectionées',
                'menu.array.delete column': 'Enlever une Colone',
                'menu.array.delete columns': 'Enlever les Colonnes Sélectionées',
                'submenu.array.insert separator': 'Insérer un Séparateur',
                'menu.insert table': 'Insérer une Table',
                'submenu.table style': 'Style de la  Table'
            },
            ga: {
                'keyboard.tooltip.functions': 'Feidhmeanna',
                'keyboard.tooltip.symbols': 'Siombailí',
                'keyboard.tooltip.greek': 'Litreacha na Gréige',
                'keyboard.tooltip.command': 'Mód Ordú LaTeX',
                'keyboard.tooltip.numeric': 'Uimhriúil',
                'keyboard.tooltip.roman': 'Litreacha Rómhánacha',
                'tooltip.copy to clipboard': 'Cóipeáil chuig an Ghearrthaisce',
                'tooltip.redo': 'Athdhéan',
                'tooltip.toggle virtual keyboard': 'Méarchláir Fíorúil a Fháil',
                'tooltip.undo': 'Cealaigh',
                'menu.insert matrix': 'Cuir isteach Maitrís',
                'menu.insert vector': 'Cuir isteach Veicteoir',
                'submenu.array.matrix delimiters': 'Delimiters Maitrís',
                'menu.array.add row above': 'Cuir Rae Tar éis',
                'menu.array.add row below': 'Cuir Rae Roimh',
                'menu.array.add column after': 'Cuir Colún Tar éis',
                'menu.array.add column before': 'Cuir Colún Roimh',
                'menu.array.delete row': 'Scrios Rae',
                'menu.array.delete rows': 'Scrios Sraitheanna Roghnaithe',
                'menu.array.delete column': 'Scrios Colún',
                'menu.array.delete columns': 'Scrios Colúin Roghnaithe',
                'submenu.array.insert separator': 'Cuir Deighilteoir isteach',
                'menu.insert table': 'Ionsáigh Tábla',
                'submenu.table style': 'Stíl Tábla'
            },
            he: {
                'keyboard.tooltip.functions': 'פונקציות',
                'keyboard.tooltip.symbols': 'סמלים',
                'keyboard.tooltip.greek': 'אותיות יווניות',
                'keyboard.tooltip.command': 'מצב פקודה לטקס',
                'keyboard.tooltip.numeric': 'מספרי',
                'keyboard.tooltip.roman': 'מכתבים רומיים',
                'tooltip.copy to clipboard': 'העתק ללוח',
                'tooltip.redo': 'לַעֲשׂוֹת שׁוּב',
                'tooltip.toggle virtual keyboard': 'החלף את המקלדת הווירטואלית',
                'tooltip.undo': 'לבטל',
                'menu.insert matrix': 'הכנס מטריקס',
                'menu.insert vector': 'הכנס וקטור',
                'submenu.array.matrix delimiters': 'מפרידי מטריקס',
                'menu.array.add row above': 'הוסף שורה אחרי',
                'menu.array.add row below': 'הוסף שורה לפני',
                'menu.array.add column after': 'הוסף עמודה אחרי',
                'menu.array.add column before': 'הוסף עמודה לפני',
                'menu.array.delete row': 'מחק שורה',
                'menu.array.delete rows': 'מחק שורות שנבחרו',
                'menu.array.delete column': 'מחק עמודה',
                'menu.array.delete columns': 'מחק עמודות שנבחרו',
                'submenu.array.insert separator': 'הכנס מפריד',
                'menu.insert table': 'הכנס טבלה',
                'submenu.table style': 'טבלה סִגְנוֹן'
            },
            hr: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u međuspremnik',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj redak prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši redak',
                'menu.array.delete rows': 'Izbriši odabrane retke',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Umetni tablicu',
                'submenu.table style': 'Stil tabele'
            },
            id: {
                'keyboard.tooltip.functions': 'Fungsi',
                'keyboard.tooltip.symbols': 'Simbol',
                'keyboard.tooltip.greek': 'Huruf Yunani',
                'keyboard.tooltip.command': 'Mode Perintah LaTeX',
                'keyboard.tooltip.numeric': 'Numerik',
                'keyboard.tooltip.roman': 'Surat Romawi',
                'tooltip.copy to clipboard': 'Menyalin ke clipboard',
                'tooltip.redo': 'Mengulangi',
                'tooltip.toggle virtual keyboard': 'Alihkan Keyboard Virtual',
                'tooltip.undo': 'Membuka',
                'menu.insert matrix': 'Sisipkan Matriks',
                'menu.insert vector': 'Sisipkan Vektor',
                'submenu.array.matrix delimiters': 'Pembatas Matriks',
                'menu.array.add row above': 'Tambahkan Baris Setelah',
                'menu.array.add row below': 'Tambahkan Baris Sebelumnya',
                'menu.array.add column after': 'Tambahkan Kolom Setelah',
                'menu.array.add column before': 'Tambahkan Kolom Sebelumnya',
                'menu.array.delete row': 'Hapus Baris',
                'menu.array.delete rows': 'Hapus Baris yang Dipilih',
                'menu.array.delete column': 'Hapus Kolom',
                'menu.array.delete columns': 'Hapus Kolom yang Dipilih',
                'submenu.array.insert separator': 'Sisipkan Pemisah',
                'menu.insert table': 'Sisipkan Tabel',
                'submenu.table style': 'Gaya Tabel'
            },
            hi: {
                'keyboard.tooltip.functions': 'कार्यों',
                'keyboard.tooltip.symbols': 'प्रतीक',
                'keyboard.tooltip.greek': 'ग्रीक अक्षर',
                'keyboard.tooltip.command': 'लाटेक्स कमांड मोड',
                'keyboard.tooltip.numeric': 'संख्यात्मक',
                'keyboard.tooltip.roman': 'रोमन पत्र',
                'tooltip.copy to clipboard': 'क्लिपबोर्ड पर कॉपी करें',
                'tooltip.redo': 'फिर से करें',
                'tooltip.toggle virtual keyboard': 'वर्चुअल कीबोर्ड टॉगल करें',
                'tooltip.undo': 'पूर्ववत',
                'menu.insert matrix': 'मैट्रिक्स डालें',
                'menu.insert vector': 'वेक्टर डालें',
                'submenu.array.matrix delimiters': 'मैट्रिक्स सीमांकक',
                'menu.array.add row above': 'बाद में पंक्ति जोड़ें',
                'menu.array.add row below': 'पहले पंक्ति जोड़ें',
                'menu.array.add column after': 'बाद में कॉलम जोड़ें',
                'menu.array.add column before': 'पहले कॉलम जोड़ें',
                'menu.array.delete row': 'पंक्ति को हटाएं',
                'menu.array.delete rows': 'चयनित पंक्तियों को हटाएं',
                'menu.array.delete column': 'कॉलम हटाएं',
                'menu.array.delete columns': 'चयनित कॉलम हटाएं',
                'submenu.array.insert separator': 'विभाजक डालें',
                'menu.insert table': 'टेबल इंसर्ट करें',
                'submenu.table style': 'टेबल स्टाइल'
            },
            hu: {
                'keyboard.tooltip.functions': 'Funkciók',
                'keyboard.tooltip.symbols': 'Szimbólumok',
                'keyboard.tooltip.greek': 'Görög levelek',
                'keyboard.tooltip.command': 'LaTeX Parancs mód',
                'keyboard.tooltip.numeric': 'Numerikus',
                'keyboard.tooltip.roman': 'Római levelek',
                'tooltip.copy to clipboard': 'Másolja a vágólapra',
                'tooltip.redo': 'Újra',
                'tooltip.toggle virtual keyboard': 'Váltás a virtuális billentyűzetre',
                'tooltip.undo': 'Visszavonás',
                'menu.insert matrix': 'Helyezze be a Mátrixot',
                'menu.insert vector': 'Vektor beszúrása',
                'submenu.array.matrix delimiters': 'Mátrixhatárolók',
                'menu.array.add row above': 'Sor hozzáadása után',
                'menu.array.add row below': 'Add Add Sor előtt',
                'menu.array.add column after': 'Oszlop hozzáadása után',
                'menu.array.add column before': 'Add oszlop előtt',
                'menu.array.delete row': 'Sor törlése',
                'menu.array.delete rows': 'Kijelölt sorok törlése',
                'menu.array.delete column': 'Oszlop törlése',
                'menu.array.delete columns': 'A kijelölt oszlopok törlése',
                'submenu.array.insert separator': 'Helyezze be az elválasztót',
                'menu.insert table': 'Helyezze be a táblázatot',
                'submenu.table style': 'Táblázatos stílus'
            },
            it: {
                'keyboard.tooltip.functions': 'Funzioni',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Lettere greche',
                'keyboard.tooltip.command': 'Modalità di comando LaTeX',
                'keyboard.tooltip.numeric': 'Numerico',
                'keyboard.tooltip.roman': 'Lettere romane',
                'tooltip.copy to clipboard': 'Copia negli appunti',
                'tooltip.redo': 'Rifare',
                'tooltip.toggle virtual keyboard': 'Attiva / disattiva la tastiera virtuale',
                'tooltip.undo': 'Disfare',
                'menu.insert matrix': 'Inserisci una Matrice',
                'menu.insert vector': 'Inserisci Vettore',
                'submenu.array.matrix delimiters': 'Delimitatori di Matrice',
                'menu.array.add row above': 'Aggiungi una Riga Prima',
                'menu.array.add row below': 'Aggiungi una Riga Dopo',
                'menu.array.add column before': 'Aggiungi una Colonna Prima',
                'menu.array.add column after': 'Aggiungi una Colonna Dopo',
                'menu.array.delete row': 'Rimuovi una Riga',
                'menu.array.delete rows': 'Rimuovi le Righe Selezionate',
                'menu.array.delete column': 'Rimuovi una Colonna',
                'menu.array.delete columns': 'Rimuovi le Colonne Selezionate',
                'submenu.array.insert separator': 'Inserisci un Separatore',
                'menu.insert table': 'Inserisci Tabella',
                'submenu.table style': 'Stile tabella'
            },
            is: {
                'keyboard.tooltip.functions': 'Aðgerðir',
                'keyboard.tooltip.symbols': 'Tákn',
                'keyboard.tooltip.greek': 'Grísk bréf',
                'keyboard.tooltip.command': 'LaTeX stjórnunarstilling',
                'keyboard.tooltip.numeric': 'Tölulegt',
                'keyboard.tooltip.roman': 'Rómversk bréf',
                'tooltip.copy to clipboard': 'Afritaðu á klemmuspjald',
                'tooltip.redo': 'Endurtaka',
                'tooltip.toggle virtual keyboard': 'Skiptu um sýndarlyklaborð',
                'tooltip.undo': 'Afturkalla',
                'menu.insert matrix': 'Settu fylki inn',
                'menu.insert vector': 'Settu inn Vector',
                'submenu.array.matrix delimiters': 'Matrix afmörkun',
                'menu.array.add row above': 'Bæta við röð á eftir',
                'menu.array.add row below': 'Bæta við röð áður',
                'menu.array.add column after': 'Bæta við dálki á eftir',
                'menu.array.add column before': 'Bæta við dálki áður',
                'menu.array.delete row': 'Eyða röð',
                'menu.array.delete rows': 'Eyða völdum línum',
                'menu.array.delete column': 'Eyða dálki',
                'menu.array.delete columns': 'Eyða völdum dálkum',
                'submenu.array.insert separator': 'Settu skiljuna í',
                'menu.insert table': 'Settu inn töflu',
                'submenu.table style': 'Töflu stíl'
            },
            ja: {
                'keyboard.tooltip.functions': '関数',
                'keyboard.tooltip.symbols': 'シンボル',
                'keyboard.tooltip.greek': 'ギリシャ文字',
                'keyboard.tooltip.command': 'ラテックスコマンドモード',
                'keyboard.tooltip.numeric': '数値',
                'keyboard.tooltip.roman': 'ローマ字',
                'tooltip.copy to clipboard': 'クリップボードにコピー',
                'tooltip.redo': 'やり直し',
                'tooltip.toggle virtual keyboard': '仮想キーボードの切り替え',
                'tooltip.undo': '元に戻す',
                'menu.insert matrix': 'マトリックスを挿入',
                'menu.insert vector': 'ベクトルを挿入',
                'submenu.array.matrix delimiters': '行列区切り文字',
                'menu.array.add row above': '後に行を追加',
                'menu.array.add row below': '前に行を追加',
                'menu.array.add column after': '後に列を追加',
                'menu.array.add column before': '前に列を追加',
                'menu.array.delete row': '行を削除',
                'menu.array.delete rows': '選択した行を削除する',
                'menu.array.delete column': '列を削除',
                'menu.array.delete columns': '選択した列を削除する',
                'submenu.array.insert separator': 'セパレーターを挿入',
                'menu.insert table': 'テーブルを挿入',
                'submenu.table style': 'テーブルスタイル'
            },
            ko: {
                'keyboard.tooltip.functions': '기능',
                'keyboard.tooltip.symbols': '기호',
                'keyboard.tooltip.greek': '그리스 문자',
                'keyboard.tooltip.command': '유액 명령 모드',
                'keyboard.tooltip.numeric': '숫자',
                'keyboard.tooltip.roman': '로마 문자',
                'tooltip.copy to clipboard': '클립 보드에 복사',
                'tooltip.redo': '다시 하다',
                'tooltip.toggle virtual keyboard': '가상 키보드 전환',
                'tooltip.undo': '실행 취소',
                'menu.insert matrix': '매트릭스 삽입',
                'menu.insert vector': '벡터 삽입',
                'submenu.array.matrix delimiters': '행렬 구분 기호',
                'menu.array.add row above': '뒤에 행 추가',
                'menu.array.add row below': '앞에 행 추가',
                'menu.array.add column after': '뒤에 열 추가',
                'menu.array.add column before': '앞에 열 추가',
                'menu.array.delete row': '행 삭제',
                'menu.array.delete rows': '선택한 행 삭제',
                'menu.array.delete column': '열 삭제',
                'menu.array.delete columns': '선택한 열 삭제',
                'submenu.array.insert separator': '구분자 삽입',
                'menu.insert table': '표 삽입',
                'submenu.table style': '테이블 스타일'
            },
            lv: {
                'keyboard.tooltip.functions': 'Funkcijas',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grieķu burti',
                'keyboard.tooltip.command': 'LaTeX komandu režīms',
                'keyboard.tooltip.numeric': 'Ciparu skaitlis',
                'keyboard.tooltip.roman': 'Romiešu vēstules',
                'tooltip.copy to clipboard': 'Kopēt starpliktuvē',
                'tooltip.redo': 'Pārtaisīt',
                'tooltip.toggle virtual keyboard': 'Pārslēgt virtuālo tastatūru',
                'tooltip.undo': 'Atsaukt',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Galda stils'
            },
            lt: {
                'keyboard.tooltip.functions': 'Funkcijos',
                'keyboard.tooltip.symbols': 'Simboliai',
                'keyboard.tooltip.greek': 'Graikiškos raidės',
                'keyboard.tooltip.command': 'LaTeX komandų režimas',
                'keyboard.tooltip.numeric': 'Skaitmeninis',
                'keyboard.tooltip.roman': 'Romos laiškai',
                'tooltip.copy to clipboard': 'Nukopijuoti į iškarpinę',
                'tooltip.redo': 'Perdaryti',
                'tooltip.toggle virtual keyboard': 'Perjungti virtualiąją klaviatūrą',
                'tooltip.undo': 'Atšaukti',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Tabulas stili'
            },
            lu: {
                'keyboard.tooltip.functions': 'Funktiounen',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Griichesch Bréiwer',
                'keyboard.tooltip.command': 'LaTeX Kommando Modus',
                'keyboard.tooltip.numeric': 'Numeresch',
                'keyboard.tooltip.roman': 'Réimesch Bréiwer',
                'tooltip.copy to clipboard': 'Kopéiert op Clipboard',
                'tooltip.redo': 'Nees nei maachen',
                'tooltip.toggle virtual keyboard': 'Wiesselt Virtuell Tastatur',
                'tooltip.undo': 'Undoen',
                'menu.insert matrix': 'Matrix asetzen',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Ofgrenzer',
                'menu.array.add row above': 'Dobäizemaachen Rei No',
                'menu.array.add row below': 'Füügt Rei vir',
                'menu.array.add column after': 'Dobäizemaachen Kolonn No',
                'menu.array.add column before': 'Kolonn derbäi Virun',
                'menu.array.delete row': 'Rad läschen',
                'menu.array.delete rows': 'Läscht Ausgewielte Reien',
                'menu.array.delete column': 'Läscht Kolonn',
                'menu.array.delete columns': 'Läscht Ausgewielte Kolonnen',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Dësch anzeginn',
                'submenu.table style': 'Dësch Style'
            },
            nl: {
                'keyboard.tooltip.functions': 'Functies',
                'keyboard.tooltip.symbols': 'Symbolen',
                'keyboard.tooltip.greek': 'Griekse letters',
                'keyboard.tooltip.command': 'LaTeX commando mode',
                'keyboard.tooltip.numeric': 'Numeriek',
                'keyboard.tooltip.roman': 'Romeinse letters',
                'tooltip.copy to clipboard': 'Kopiëren naar klembord',
                'tooltip.redo': 'Opnieuw',
                'tooltip.toggle virtual keyboard': 'Schakel naar virtueel toetsenbord',
                'tooltip.undo': 'Ongedaan maken',
                'menu.insert matrix': 'Matrix invoegen',
                'menu.insert vector': 'Vector invoegen',
                'submenu.array.matrix delimiters': 'Matrixscheidingstekens',
                'menu.array.add row above': 'Rij toevoegen na',
                'menu.array.add row below': 'Rij toevoegen eerder',
                'menu.array.add column after': 'Kolom toevoegen na',
                'menu.array.add column before': 'Kolom toevoegen voor',
                'menu.array.delete row': 'Verwijder rij',
                'menu.array.delete rows': 'Geselecteerde rijen verwijderen',
                'menu.array.delete column': 'Kolom verwijderen',
                'menu.array.delete columns': 'Geselecteerde kolommen verwijderen',
                'submenu.array.insert separator': 'Scheidingsteken invoegen',
                'menu.insert table': 'Tabel invoegen',
                'submenu.table style': 'Tabelstijl'
            },
            no: {
                'keyboard.tooltip.functions': 'Funksjoner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Greske bokstaver',
                'keyboard.tooltip.command': 'LaTeX kommandomodus',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske bokstaver',
                'tooltip.copy to clipboard': 'Kopiere til utklippstavle',
                'tooltip.redo': 'Gjøre om',
                'tooltip.toggle virtual keyboard': 'Bytt virtuelt tastatur',
                'tooltip.undo': 'Angre',
                'menu.insert matrix': 'Sett inn matrise',
                'menu.insert vector': 'Sett inn vektor',
                'submenu.array.matrix delimiters': 'Matrix avgrensere',
                'menu.array.add row above': 'Legg til rad etter',
                'menu.array.add row below': 'Legg til rad før',
                'menu.array.add column after': 'Legg til kolonne etter',
                'menu.array.add column before': 'Legg til kolonne før',
                'menu.array.delete row': 'Slett rad',
                'menu.array.delete rows': 'Slett valgte rader',
                'menu.array.delete column': 'Slett kolonne',
                'menu.array.delete columns': 'Slett valgte kolonner',
                'submenu.array.insert separator': 'Sett inn skilletegn',
                'menu.insert table': 'Sett inn tabell',
                'submenu.table style': 'Tabellstil'
            },
            mk: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Грчки букви',
                'keyboard.tooltip.command': 'Режим на команда во латекс',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римски писма',
                'tooltip.copy to clipboard': 'Копирајте во клипборд',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Вклучете ја виртуелната тастатура',
                'tooltip.undo': 'Врати',
                'menu.insert matrix': 'Вметнете матрица',
                'menu.insert vector': 'Вметни вектор',
                'submenu.array.matrix delimiters': 'Разграничувачи на матрица',
                'menu.array.add row above': 'Додадете ред после',
                'menu.array.add row below': 'Додади ред пред тоа',
                'menu.array.add column after': 'Додадете колона после',
                'menu.array.add column before': 'Додадете колона пред тоа',
                'menu.array.delete row': 'Избриши го редот',
                'menu.array.delete rows': 'Избришете ги избраните редови',
                'menu.array.delete column': 'Избриши ја колоната',
                'menu.array.delete columns': 'Избриши ја колоната',
                'submenu.array.insert separator': 'Вметнете сепаратор',
                'menu.insert table': 'Вметни табела',
                'submenu.table style': 'Табела стил'
            },
            pl: {
                'keyboard.tooltip.functions': 'Funkcje',
                'keyboard.tooltip.symbols': 'Symbolika',
                'keyboard.tooltip.greek': 'Litery greckie',
                'keyboard.tooltip.command': 'Tryb poleceń LaTeX',
                'keyboard.tooltip.numeric': 'Numeryczne',
                'keyboard.tooltip.roman': 'Litery rzymskie',
                'tooltip.copy to clipboard': 'Kopiuj do Schowka',
                'tooltip.redo': 'Przywróć',
                'tooltip.toggle virtual keyboard': 'Przełącz wirtualną klawiaturę',
                'tooltip.undo': 'Cofnij',
                'menu.insert matrix': 'Wstaw macierz',
                'menu.insert vector': 'Wstaw wektor',
                'submenu.array.matrix delimiters': 'Ograniczniki macierzy',
                'menu.array.add row above': 'Dodaj wiersz po',
                'menu.array.add row below': 'Dodaj wiersz przed',
                'menu.array.add column after': 'Dodaj kolumnę po',
                'menu.array.add column before': 'Dodaj kolumnę przed',
                'menu.array.delete row': 'Usuń wiersz',
                'menu.array.delete rows': 'Usuń wybrane wiersze',
                'menu.array.delete column': 'Usuń kolumnę',
                'menu.array.delete columns': 'Usuń wybrane kolumny',
                'submenu.array.insert separator': 'Wstaw separator',
                'menu.insert table': 'Wypełnij tabelę',
                'submenu.table style': 'Styl tabelę'
            },
            pt: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras gregas',
                'keyboard.tooltip.command': 'Modo de Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar para área de transferência',
                'tooltip.redo': 'Refazer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Desfazer',
                'menu.insert matrix': 'Inserir Matriz',
                'menu.insert vector': 'Inserir vetor',
                'submenu.array.matrix delimiters': 'Delimitadores de matriz',
                'menu.array.add row above': 'Adicionar linha depois',
                'menu.array.add row below': 'Adicionar linha antes',
                'menu.array.add column after': 'Adicionar coluna depois',
                'menu.array.add column before': 'Adicionar coluna antes',
                'menu.array.delete row': 'Excluir linha',
                'menu.array.delete rows': 'Excluir linhas selecionadas',
                'menu.array.delete column': 'Apagar Coluna',
                'menu.array.delete columns': 'Excluir Colunas Selecionadas',
                'submenu.array.insert separator': 'Inserir Separador',
                'menu.insert table': 'Insira a tabela',
                'submenu.table style': 'Estilo tabela'
            },
            ro: {
                'keyboard.tooltip.functions': 'Funcții',
                'keyboard.tooltip.symbols': 'Simboluri',
                'keyboard.tooltip.greek': 'Scrisori grecești',
                'keyboard.tooltip.command': 'Modul de comandă latex',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Scrisori romane',
                'tooltip.copy to clipboard': 'Copiați în clipboard',
                'tooltip.redo': 'A reface',
                'tooltip.toggle virtual keyboard': 'Comutați tastatura virtuală',
                'tooltip.undo': 'Anula',
                'menu.insert matrix': 'Introduceți Matrix',
                'menu.insert vector': 'Inserați Vector',
                'submenu.array.matrix delimiters': 'Delimitatori de matrice',
                'menu.array.add row above': 'Adăugați rândul după',
                'menu.array.add row below': 'Adăugați rândul înainte',
                'menu.array.add column after': 'Adăugați o coloană după',
                'menu.array.add column before': 'Adăugați o coloană înainte',
                'menu.array.delete row': 'Ștergeți rândul',
                'menu.array.delete rows': 'Ștergeți rândurile selectate',
                'menu.array.delete column': 'Ștergeți coloana',
                'menu.array.delete columns': 'Ștergeți coloanele selectate',
                'submenu.array.insert separator': 'Introduceți separatorul',
                'menu.insert table': 'Introduceți tabelul',
                'submenu.table style': 'Table style'
            },
            ru: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символы',
                'keyboard.tooltip.greek': 'Греческие буквы',
                'keyboard.tooltip.command': 'Режим командной строки Латекс',
                'keyboard.tooltip.numeric': 'числовой',
                'keyboard.tooltip.roman': 'Латинские буквы',
                'tooltip.copy to clipboard': 'Скопировать в буфер обмена',
                'tooltip.redo': 'переделывать',
                'tooltip.toggle virtual keyboard': 'Переключить виртуальную клавиатуру',
                'tooltip.undo': 'расстегивать',
                'menu.insert matrix': 'Вставить матрицу',
                'menu.insert vector': 'Вставить вектор',
                'submenu.array.matrix delimiters': 'Матричные разделители',
                'menu.array.add row above': 'Добавить строку после',
                'menu.array.add row below': 'Добавить строку перед',
                'menu.array.add column after': 'Добавить столбец после',
                'menu.array.add column before': 'Добавить столбец перед',
                'menu.array.delete row': 'Удалить строку',
                'menu.array.delete rows': 'Удалить выбранные строки',
                'menu.array.delete column': 'Удалить столбец',
                'menu.array.delete columns': 'Удалить выбранные столбцы',
                'submenu.array.insert separator': 'Вставить разделитель',
                'menu.insert table': 'Вставить таблицу',
                'submenu.table style': 'Табличный стиль'
            },
            sk: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Grécke listy',
                'keyboard.tooltip.command': 'Príkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Numerické',
                'keyboard.tooltip.roman': 'Rímske listy',
                'tooltip.copy to clipboard': 'Skopírovať do schránky',
                'tooltip.redo': 'Znova',
                'tooltip.toggle virtual keyboard': 'Prepnúť virtuálnu klávesnicu',
                'tooltip.undo': 'Vrátenie späť',
                'menu.insert matrix': 'Vložte maticu',
                'menu.insert vector': 'Vložte vektor',
                'submenu.array.matrix delimiters': 'Oddeľovače matíc',
                'menu.array.add row above': 'Pridajte riadok za',
                'menu.array.add row below': 'Pridajte riadok pred',
                'menu.array.add column after': 'Pridať stĺpec za',
                'menu.array.add column before': 'Pridajte stĺpec predtým',
                'menu.array.delete row': 'Odstrániť riadok',
                'menu.array.delete rows': 'Odstrániť vybraté riadky',
                'menu.array.delete column': 'Odstrániť stĺpec',
                'menu.array.delete columns': 'Odstrániť vybraté stĺpce',
                'submenu.array.insert separator': 'Vložte oddeľovač',
                'menu.insert table': 'Vložte tabuľku',
                'submenu.table style': 'Štýl tabuľky'
            },
            sl: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grška pisma',
                'keyboard.tooltip.command': 'Ukazni način LaTeX',
                'keyboard.tooltip.numeric': 'Številsko',
                'keyboard.tooltip.roman': 'Rimska pisma',
                'tooltip.copy to clipboard': 'Kopirati v odložišče',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Preklop navidezne tipkovnice',
                'tooltip.undo': 'Razveljavi',
                'menu.insert matrix': 'Vstavi matrico',
                'menu.insert vector': 'Vstavi vektor',
                'submenu.array.matrix delimiters': 'Matrični ločevalniki',
                'menu.array.add row above': 'Dodaj vrstico po',
                'menu.array.add row below': 'Dodaj vrstico prej',
                'menu.array.add column after': 'Dodaj stolpec po',
                'menu.array.add column before': 'Dodaj stolpec prej',
                'menu.array.delete row': 'Izbriši vrstico',
                'menu.array.delete rows': 'Izbriši izbrane vrstice',
                'menu.array.delete column': 'Izbriši stolpec',
                'menu.array.delete columns': 'Izbriši izbrane stolpce',
                'submenu.array.insert separator': 'Vstavi ločilo',
                'menu.insert table': 'Vstavi tabelo',
                'submenu.table style': 'Tabela slog'
            },
            sq: {
                'keyboard.tooltip.functions': 'Funksione',
                'keyboard.tooltip.symbols': 'Simbolet',
                'keyboard.tooltip.greek': 'Letrat Greke',
                'keyboard.tooltip.command': 'Modaliteti i komandës latex',
                'keyboard.tooltip.numeric': 'Numerike',
                'keyboard.tooltip.roman': 'Letrat romake',
                'tooltip.copy to clipboard': 'Kopjoni në Clipboard',
                'tooltip.redo': 'Riparo',
                'tooltip.toggle virtual keyboard': 'Aktivizo tastierën virtuale',
                'tooltip.undo': 'Zhbëj',
                'menu.insert matrix': 'Vendosni Matricën',
                'menu.insert vector': 'Vendos vektorin',
                'submenu.array.matrix delimiters': 'Përcaktuesit e matricës',
                'menu.array.add row above': 'Shto Rreshtin Pas',
                'menu.array.add row below': 'Shto Rreshtin Para',
                'menu.array.add column after': 'Shto kolonën pas',
                'menu.array.add column before': 'Shto kolonën para',
                'menu.array.delete row': 'Fshi Rreshtin',
                'menu.array.delete rows': 'Fshi rreshtat e zgjedhur',
                'menu.array.delete column': 'Fshi kolonën',
                'menu.array.delete columns': 'Fshi kolonat e zgjedhura',
                'submenu.array.insert separator': 'Vendos Ndarësin',
                'menu.insert table': 'Vendos tabelën',
                'submenu.table style': 'Stili tabelën'
            },
            sr: {
                'keyboard.tooltip.functions': 'Функције',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Греек Леттерс',
                'keyboard.tooltip.command': 'ЛаТеКс командни режим',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римска писма',
                'tooltip.copy to clipboard': 'Копирајте у међуспремник',
                'tooltip.redo': 'Понови',
                'tooltip.toggle virtual keyboard': 'Укључи / искључи виртуелну тастатуру',
                'tooltip.undo': 'Опозови',
                'menu.insert matrix': 'Уметни матрицу',
                'menu.insert vector': 'Уметни вектор',
                'submenu.array.matrix delimiters': 'Матрик Делимитерс',
                'menu.array.add row above': 'Додај ред после',
                'menu.array.add row below': 'Додај ред пре',
                'menu.array.add column after': 'Додај колону после',
                'menu.array.add column before': 'Додај колону пре',
                'menu.array.delete row': 'Избриши ред',
                'menu.array.delete rows': 'Избриши изабране редове',
                'menu.array.delete column': 'Избриши колону',
                'menu.array.delete columns': 'Избриши изабране колоне',
                'submenu.array.insert separator': 'Уметни сепаратор',
                'menu.insert table': 'Убаци табелу',
                'submenu.table style': 'Табеларни стил'
            },
            sv: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Grekiska bokstäver',
                'keyboard.tooltip.command': 'LaTeX kommandoläge',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerska bokstäver',
                'tooltip.copy to clipboard': 'Kopiera till Urklipp',
                'tooltip.redo': 'Göra om',
                'tooltip.toggle virtual keyboard': 'Växla virtuellt tangentbord',
                'tooltip.undo': 'Ångra',
                'menu.insert matrix': 'Sätt in matris',
                'menu.insert vector': 'Infoga vektor',
                'submenu.array.matrix delimiters': 'Matrisavgränsare',
                'menu.array.add row above': 'Lägg till rad efter',
                'menu.array.add row below': 'Lägg till rad före',
                'menu.array.add column after': 'Lägg till kolumn efter',
                'menu.array.add column before': 'Lägg till kolumn före',
                'menu.array.delete row': 'Radera rad',
                'menu.array.delete rows': 'Ta bort valda rader',
                'menu.array.delete column': 'Ta bort kolumn',
                'menu.array.delete columns': 'Ta bort valda kolumner',
                'submenu.array.insert separator': 'Sätt i separator',
                'menu.insert table': 'Infoga tabell',
                'submenu.table style': 'Tabellstil'
            },
            th: {
                'keyboard.tooltip.functions': 'ฟังก์ชั่น',
                'keyboard.tooltip.symbols': 'สัญลักษณ์',
                'keyboard.tooltip.greek': 'อักษรกรีก',
                'keyboard.tooltip.command': 'โหมดคำสั่ง น้ำยาง',
                'keyboard.tooltip.numeric': 'ตัวเลข',
                'keyboard.tooltip.roman': 'อักษรโรมัน',
                'tooltip.copy to clipboard': 'คัดลอกไปที่คลิปบอร์ด',
                'tooltip.redo': 'ทำซ้ำ',
                'tooltip.toggle virtual keyboard': 'สลับแป้นพิมพ์เสมือน',
                'tooltip.undo': 'เลิกทำ',
                'menu.insert matrix': 'แทรกเมทริกซ์',
                'menu.insert vector': 'แทรกเวกเตอร์',
                'submenu.array.matrix delimiters': 'ตัวคั่นเมทริกซ์',
                'menu.array.add row above': 'เพิ่มแถวหลัง',
                'menu.array.add row below': 'เพิ่มแถวก่อน',
                'menu.array.add column after': 'เพิ่มคอลัมน์หลัง',
                'menu.array.add column before': 'เพิ่มคอลัมน์ก่อน',
                'menu.array.delete row': 'ลบแถว',
                'menu.array.delete rows': 'ลบแถวที่เลือก',
                'menu.array.delete column': 'ลบคอลัมน์',
                'menu.array.delete columns': 'ลบคอลัมน์ที่เลือก',
                'submenu.array.insert separator': 'ตัวคั่นแทรก',
                'menu.insert table': 'แทรกตาราง',
                'submenu.table style': 'สไตล์ตาราง'
            },
            tr: {
                'keyboard.tooltip.functions': 'Fonksiyonlar',
                'keyboard.tooltip.symbols': 'Semboller',
                'keyboard.tooltip.greek': 'Yunan harfleri',
                'keyboard.tooltip.command': 'LaTeX Komut Modu',
                'keyboard.tooltip.numeric': 'Sayısal',
                'keyboard.tooltip.roman': 'Roma Harfleri',
                'tooltip.copy to clipboard': 'Panoya kopyala',
                'tooltip.redo': 'Yeniden yap',
                'tooltip.toggle virtual keyboard': 'Sanal Klavyeyi Aç/Kapat',
                'tooltip.undo': 'Geri alma',
                'menu.insert matrix': 'Matris Ekle',
                'menu.insert vector': 'Vektör Ekle',
                'submenu.array.matrix delimiters': 'Matris Sınırlayıcılar',
                'menu.array.add row above': 'Satırdan Sonra Ekle',
                'menu.array.add row below': 'Önce Satır Ekle',
                'menu.array.add column after': 'Sonra Sütun Ekle',
                'menu.array.add column before': 'Önce Sütun Ekle',
                'menu.array.delete row': 'Sırayı sil',
                'menu.array.delete rows': 'Seçili Satırları Sil',
                'menu.array.delete column': 'Sütunu Sil',
                'menu.array.delete columns': 'Seçili Sütunları Sil',
                'submenu.array.insert separator': 'Ayırıcı Ekle',
                'menu.insert table': 'Tablo Ekle',
                'submenu.table style': 'Tablo Stili'
            },
            uk: {
                'keyboard.tooltip.functions': 'Функції',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Грецькі літери',
                'keyboard.tooltip.command': 'Командний режим латексу',
                'keyboard.tooltip.numeric': 'Числовий',
                'keyboard.tooltip.roman': 'Римські літери',
                'tooltip.copy to clipboard': 'Копіювати в буфер обміну',
                'tooltip.redo': 'Повторити',
                'tooltip.toggle virtual keyboard': 'Переключити віртуальну клавіатуру',
                'tooltip.undo': 'Скасувати',
                'menu.insert matrix': 'Вставити матрицю',
                'menu.insert vector': 'Вставити вектор',
                'submenu.array.matrix delimiters': 'Матричні роздільники',
                'menu.array.add row above': 'Додати рядок після',
                'menu.array.add row below': 'Додати рядок до',
                'menu.array.add column after': 'Додати стовпець після',
                'menu.array.add column before': 'Додати стовпець перед',
                'menu.array.delete row': 'Видалити рядок',
                'menu.array.delete rows': 'Видалити вибрані рядки',
                'menu.array.delete column': 'Видалити стовпець',
                'menu.array.delete columns': 'Видалити вибрані стовпці',
                'submenu.array.insert separator': 'Вставте роздільник',
                'menu.insert table': 'Вставити таблицю',
                'submenu.table style': 'Стиль таблиці'
            },
            vi: {
                'keyboard.tooltip.functions': 'Chức năng',
                'keyboard.tooltip.symbols': 'Ký hiệu',
                'keyboard.tooltip.greek': 'Chữ Hy Lạp',
                'keyboard.tooltip.command': 'Chế độ lệnh LaTeX',
                'keyboard.tooltip.numeric': 'Số',
                'keyboard.tooltip.roman': 'Chữ cái La mã',
                'tooltip.copy to clipboard': 'Sao chép vào clipboard',
                'tooltip.redo': 'Làm lại',
                'tooltip.toggle virtual keyboard': 'Chuyển đổi bàn phím ảo',
                'tooltip.undo': 'Hoàn tác',
                'menu.insert matrix': 'Chèn ma trận',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Dấu phân cách ma trận',
                'menu.array.add row above': 'Thêm hàng sau',
                'menu.array.add row below': 'Thêm hàng trước',
                'menu.array.add column after': 'Thêm cột sau',
                'menu.array.add column before': 'Thêm cột trước',
                'menu.array.delete row': 'Xóa hàng',
                'menu.array.delete rows': 'Xóa hàng đã chọn',
                'menu.array.delete column': 'Xóa cột',
                'menu.array.delete columns': 'Xóa các cột đã chọn',
                'submenu.array.insert separator': 'Chèn dấu phân cách',
                'menu.insert table': 'Chèn bảng',
                'submenu.table style': 'Kiểu bảng'
            },
            zh_cn: {
                'keyboard.tooltip.functions': '职能',
                'keyboard.tooltip.symbols': '符号',
                'keyboard.tooltip.greek': '希腊字母',
                'keyboard.tooltip.command': '乳胶 命令模式',
                'keyboard.tooltip.numeric': '数字',
                'keyboard.tooltip.roman': '罗马字母',
                'tooltip.copy to clipboard': '复制到剪贴板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切换虚拟键盘',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩阵',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩阵分隔符',
                'menu.array.add row above': '在后面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在后面添加列r',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '删除行',
                'menu.array.delete rows': '删除选定行',
                'menu.array.delete column': '删除列',
                'menu.array.delete columns': '删除选定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格样式'
            },
            zh_tw: {
                'keyboard.tooltip.functions': '職能',
                'keyboard.tooltip.symbols': '符號',
                'keyboard.tooltip.greek': '希臘字母',
                'keyboard.tooltip.command': '乳膠命令模式',
                'keyboard.tooltip.numeric': '數字',
                'keyboard.tooltip.roman': '羅馬字母',
                'tooltip.copy to clipboard': '複製到剪貼板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切換虛擬鍵盤',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩陣',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩陣分隔符',
                'menu.array.add row above': '在後面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在後面添加列',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '刪除行',
                'menu.array.delete rows': '刪除選定行',
                'menu.array.delete column': '刪除列',
                'menu.array.delete columns': '刪除選定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格樣式'
            }
        },
        _locale: '',
        get locale() {
            return c._locale || (c._locale = _o() ? navigator.language.slice(0, 5) : 'en'), c._locale;
        },
        set locale(_d) {
            c._locale = _d;
        },
        merge(d, e) {
            if (d && e) {
                const f = c._locale;
                c.locale = d, c.strings[d] = {
                    ...c.strings[d],
                    ...e
                }, c.locale = f;
            } else if (d && !e)
                for (const f of Object.keys(d))
                    c.merge(f, d[f]);
        }
    };

    function d(e) {
        if (void 0 === e)
            return;
        const f = c.locale.slice(0, 2);
        let g = '';
        return c.strings[c.locale] && (g = c.strings[c.locale][e]), !g && c.strings[f] && (g = c.strings[f][e]), g || (g = c.strings.en[e]), g || void 0;
    }
    const d = {
            m0: '#3F3D99',
            m1: '#993D71',
            m2: '#998B3D',
            m3: '#3D9956',
            m4: '#3D5A99',
            m5: '#993D90',
            m6: '#996D3D',
            m7: '#43993D',
            m8: '#3D7999',
            m9: '#843D99'
        },
        e = {
            blue: '#0072BD',
            orange: '#D95319',
            yellow: '#EDB120',
            purple: '#7E2F8E',
            green: '#77AC30',
            cyan: '#4DBEEE',
            red: '#A2142F'
        },
        f = {
            red: '#fbbbb6',
            orange: '#ffe0c2',
            yellow: '#fff1c2',
            lime: '#d0e8b9',
            green: '#bceac4',
            teal: '#b9f1f1',
            blue: '#b6d9fb',
            indigo: '#d1c2f0',
            purple: '#e3baf8',
            magenta: '#f9c8e0',
            black: '#353535',
            'dark-grey': '#8C8C8C',
            grey: '#D0D0D0',
            'light-grey': '#F0F0F0',
            white: '#ffffff'
        },
        g = {
            red: '#d7170b',
            orange: '#fe8a2b',
            yellow: '#ffc02b',
            lime: '#63b215',
            green: '#21ba3a',
            teal: '#17cfcf',
            blue: '#0d80f2',
            indigo: '#63c',
            purple: '#a219e6',
            magenta: '#eb4799',
            black: '#000',
            'dark-grey': '#666',
            grey: '#A6A6A6',
            'light-grey': '#d4d5d2',
            white: '#ffffff'
        },
        h = {
            Red: 'red',
            Orange: 'orange',
            Yellow: 'yellow',
            LimeGreen: 'lime',
            Green: 'green',
            TealBlue: 'teal',
            Blue: 'blue',
            Violet: 'indigo',
            Purple: 'purple',
            Magenta: 'magenta',
            Black: 'black',
            Gray: 'grey',
            White: 'white'
        },
        i = {
            Apricot: '#FBB982',
            Aquamarine: '#00B5BE',
            Bittersweet: '#C04F17',
            Black: '#221E1F',
            Blue: '#2D2F92',
            BlueGreen: '#00B3B8',
            BlueViolet: '#473992',
            BrickRed: '#B6321C',
            Brown: '#792500',
            BurntOrange: '#F7921D',
            CadetBlue: '#74729A',
            CarnationPink: '#F282B4',
            Cerulean: '#00A2E3',
            CornflowerBlue: '#41B0E4',
            Cyan: '#00AEEF',
            Dandelion: '#FDBC42',
            DarkOrchid: '#A4538A',
            Emerald: '#00A99D',
            ForestGreen: '#009B55',
            Fuchsia: '#8C368C',
            Goldenrod: '#FFDF42',
            Gray: '#949698',
            Green: '#00A64F',
            GreenYellow: '#DFE674',
            JungleGreen: '#00A99A',
            Lavender: '#F49EC4',
            Limegreen: '#8DC73E',
            Magenta: '#EC008C',
            Mahogany: '#A9341F',
            Maroon: '#AF3235',
            Melon: '#F89E7B',
            MidnightBlue: '#006795',
            Mulberry: '#A93C93',
            NavyBlue: '#006EB8',
            OliveGreen: '#3C8031',
            Orange: '#F58137',
            OrangeRed: '#ED135A',
            Orchid: '#AF72B0',
            Peach: '#F7965A',
            Periwinkle: '#7977B8',
            PineGreen: '#008B72',
            Plum: '#92268F',
            ProcessBlue: '#00B0F0',
            Purple: '#99479B',
            RawSienna: '#974006',
            Red: '#ED1B23',
            RedOrange: '#F26035',
            RedViolet: '#A1246B',
            Rhodamine: '#EF559F',
            RoyalBlue: '#0071BC',
            RoyalPurple: '#613F99',
            RubineRed: '#ED017D',
            Salmon: '#F69289',
            SeaGreen: '#3FBC9D',
            Sepia: '#671800',
            SkyBlue: '#46C5DD',
            SpringGreen: '#C6DC67',
            Tan: '#DA9D76',
            TealBlue: '#00AEB3',
            Thistle: '#D883B7',
            Turquoise: '#00B4CE',
            Violet: '#58429B',
            VioletRed: '#EF58A0',
            White: '#FFFFFF',
            WildStrawberry: '#EE2967',
            Yellow: '#FFF200',
            YellowGreen: '#98CC70',
            YellowOrange: '#FAA21A'
        };

    function j(k) {
        var l, m, n, _o, p, q;
        const r = k.split('!');
        let s, t, u, v = 255,
            w = 255,
            x = 255,
            y = -1;
        const z = r.length > 0 && r[0].startsWith('-');
        z && (r[0] = r[0].slice(1));
        for (let A = 0; A < r.length; A++) {
            s = v, t = w, u = x;
            const B = null === (l = r[A].trim().match(/^([A-Za-z\d]+)/)) || void 0 === l ? void 0 : l[1],
                C = null == B ? void 0 : B.toLowerCase(),
                D = B && null !== (q = null !== (p = null !== (_o = null !== (n = null !== (m = g[C]) && void 0 !== m ? m : g[h[B]]) && void 0 !== n ? n : e[B]) && void 0 !== _o ? _o : i[B]) && void 0 !== p ? p : d[B]) && void 0 !== q ? q : r[A].trim();
            let E = D.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);
            if ((null == E ? void 0 : E[1]) && E[2] && E[3])
                v = Math.max(0, Math.min(255, Number.parseInt(E[1], 16))), w = Math.max(0, Math.min(255, Number.parseInt(E[2], 16))), x = Math.max(0, Math.min(255, Number.parseInt(E[3], 16)));
            else if (E = D.match(/^#([\da-f]{3})$/i), null == E ? void 0 : E[1]) {
                const F = Number.parseInt(E[1][0], 16),
                    G = Number.parseInt(E[1][1], 16),
                    H = Number.parseInt(E[1][2], 16);
                v = Math.max(0, Math.min(255, 16 * F + F)), w = Math.max(0, Math.min(255, 16 * G + G)), x = Math.max(0, Math.min(255, 16 * H + H));
            } else {
                if (E = D.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i), !((null == E ? void 0 : E[1]) && E[2] && E[3]))
                    return;
                v = Math.max(0, Math.min(255, Number.parseInt(E[1]))), w = Math.max(0, Math.min(255, Number.parseInt(E[2]))), x = Math.max(0, Math.min(255, Number.parseInt(E[3])));
            }
            y >= 0 && (v = (1 - y) * v + y * s, w = (1 - y) * w + y * t, x = (1 - y) * x + y * u, y = -1), A + 1 < r.length && (y = Math.max(0, Math.min(100, Number.parseInt(r[++A]))) / 100);
        }
        return y >= 0 && (v = y * v + (1 - y) * s, w = y * w + (1 - y) * t, x = y * x + (1 - y) * u), z && (v = 255 - v, w = 255 - w, x = 255 - x), '#' + ('00' + Math.round(v).toString(16)).slice(-2) + ('00' + Math.round(w).toString(16)).slice(-2) + ('00' + Math.round(x).toString(16)).slice(-2);
    }

    function j(k) {
        var l, m;
        return k = k.trim(), null !== (m = null !== (l = f[k.toLowerCase()]) && void 0 !== l ? l : f[h[k]]) && void 0 !== m ? m : _Ob(k);
    }

    function j(k, l, m) {
        return m < 0 && (m += 6), m >= 6 && (m -= 6), m < 1 ? (l - k) * m + k : m < 3 ? l : m < 4 ? (l - k) * (4 - m) + k : k;
    }

    function j(k) {
        return k < 0 ? 0 : k > 255 ? 255 : Math.round(k);
    }

    function j(k) {
        let l = function(m) {
            if (!m)
                return;
            if ('#' !== m[0])
                return;
            let n;
            return (m = m.slice(1)).length <= 4 ? (n = {
                r: parseInt(m[0] + m[0], 16),
                g: parseInt(m[1] + m[1], 16),
                b: parseInt(m[2] + m[2], 16)
            }, 4 === m.length && (n.a = parseInt(m[3] + m[3], 16) / 255)) : (n = {
                r: parseInt(m[0] + m[1], 16),
                g: parseInt(m[2] + m[3], 16),
                b: parseInt(m[4] + m[5], 16)
            }, 8 === m.length && (n.a = parseInt(m[6] + m[7], 16) / 255)), n && void 0 === n.a && (n.a = 1), n;
        }(k);
        if (!l)
            return k;
        let {
            h: m,
            s: n,
            l: o
        } = function(p) {
            let {
                r: q,
                g: r,
                b: s
            } = p;
            q /= 255, r /= 255, s /= 255;
            const t = Math.min(q, r, s),
                u = Math.max(q, r, s),
                v = u - t;
            let w, x;
            u === t ? w = 0 : q === u ? w = (r - s) / v : r === u ? w = 2 + (s - q) / v : s === u && (w = 4 + (q - r) / v), w = Math.min(60 * w, 360), w < 0 && (w += 360);
            const y = (t + u) / 2;
            return x = u === t ? 0 : y <= 0.5 ? v / (u + t) : v / (2 - u - t), {
                h: w,
                s: x,
                l: y
            };
        }(l);
        return n += 0.1, o -= 0.1,
            function(p) {
                const {
                    r: q,
                    g: r,
                    b: s
                } = p;
                let t = (16777216 + (_Rb(q) << 16) + (_Rb(r) << 8) + _Rb(s)).toString(16).slice(1);
                return t[0] === t[1] && t[2] === t[3] && t[4] === t[5] && t[6] === t[7] && (t = t[0] + t[2] + t[4]), '#' + t;
            }(function(p) {
                let [q, r, s] = [
                    p.h,
                    p.s,
                    p.l
                ];
                q = (q + 360) % 360 / 60, s = Math.max(0, Math.min(s, 1)), r = Math.max(0, Math.min(r, 1));
                const t = s <= 0.5 ? s * (r + 1) : s + r - s * r,
                    u = 2 * s - t;
                return {
                    r: Math.round(255 * _Qb(u, t, q + 2)),
                    g: Math.round(255 * _Qb(u, t, q)),
                    b: Math.round(255 * _Qb(u, t, q - 2))
                };
            }({
                h: m,
                s: n,
                l: o
            }));
    }
    const j = {},
        k = {
            60: '\\lt',
            62: '\\gt',
            111: 'o',
            38: '\\&',
            123: '\\lbrace',
            125: '\\rbrace',
            91: '\\lbrack',
            93: '\\rbrack',
            58: '\\colon',
            160: '~',
            172: '\\neg',
            183: '\\cdot',
            188: '\\frac{1}{4}',
            189: '\\frac{1}{2}',
            190: '\\frac{3}{4}',
            8304: '^{0}',
            8305: '^{i}',
            185: '^{1}',
            178: '^{2}',
            179: '^{3}',
            8224: '\\dagger',
            8225: '\\ddagger',
            8230: '\\ldots',
            8308: '^{4}',
            8309: '^{5}',
            8310: '^{6}',
            8311: '^{7}',
            8312: '^{8}',
            8313: '^{9}',
            8314: '^{+}',
            8315: '^{-}',
            8316: '^{=}',
            8319: '^{n}',
            8320: '_{0}',
            8321: '_{1}',
            8322: '_{2}',
            8323: '_{3}',
            8324: '_{4}',
            8325: '_{5}',
            8326: '_{6}',
            8327: '_{7}',
            8328: '_{8}',
            8329: '_{9}',
            8330: '_{+}',
            8331: '_{-}',
            8332: '_{=}',
            8336: '_{a}',
            8337: '_{e}',
            8338: '_{o}',
            8339: '_{x}',
            8242: '\\prime',
            39: '\\prime',
            8592: '\\gets',
            8594: '\\to',
            9651: '\\triangle',
            9661: '\\triangledown',
            8715: '\\owns',
            8727: '\\ast',
            8739: '\\vert',
            8741: '\\Vert',
            8743: '\\land',
            8744: '\\lor',
            8901: '\\cdot',
            8904: '\\bowtie',
            8800: '\\ne',
            8804: '\\le',
            8805: '\\ge',
            8869: '\\bot',
            10231: '\\biconditional',
            10232: '\\impliedby',
            10233: '\\implies',
            10234: '\\iff',
            8450: '\\mathbb{C}',
            8469: '\\mathbb{N}',
            8473: '\\mathbb{P}',
            8474: '\\mathbb{Q}',
            8477: '\\mathbb{R}',
            8484: '\\mathbb{Z}',
            8461: '\\mathbb{H}',
            8476: '\\Re',
            8465: '\\Im',
            42: '\\ast',
            11036: '\\square',
            9633: '\\square',
            8720: '\\coprod',
            8716: '\\not\\ni',
            9671: '\\diamond',
            8846: '\\uplus',
            8851: '\\sqcap',
            8852: '\\sqcup',
            8768: '\\wr',
            8750: '\\oint',
            8226: '\\textbullet',
            8722: '-',
            978: '\\Upsilon'
        },
        l = {},
        m = {},
        n = {
            iff: '\\;\u27FA\\;',
            nicefrac: '^{#1}\\!\\!/\\!_{#2}',
            rd: '\\mathrm{d}',
            rD: '\\mathrm{D}',
            doubleStruckCapitalN: '\\mathbb{N}',
            doubleStruckCapitalR: '\\mathbb{R}',
            doubleStruckCapitalQ: '\\mathbb{Q}',
            doubleStruckCapitalZ: '\\mathbb{Z}',
            doubleStruckCapitalP: '\\mathbb{P}',
            scriptCapitalE: '\\mathscr{E}',
            scriptCapitalH: '\\mathscr{H}',
            scriptCapitalL: '\\mathscr{L}',
            gothicCapitalC: '\\mathfrak{C}',
            gothicCapitalH: '\\mathfrak{H}',
            gothicCapitalI: '\\mathfrak{I}',
            gothicCapitalR: '\\mathfrak{R}',
            imaginaryI: '\\mathrm{i}',
            imaginaryJ: '\\mathrm{j}',
            exponentialE: '\\mathrm{e}',
            differentialD: '\\mathrm{d}',
            capitalDifferentialD: '\\mathrm{D}',
            'braket.sty': {
                package: {
                    bra: '\\mathinner{\\langle{#1}|}',
                    ket: '\\mathinner{|{#1}\\rangle}',
                    braket: '\\mathinner{\\langle{#1}\\rangle}',
                    set: '\\mathinner{\\lbrace #1 \\rbrace}',
                    Bra: '\\left\\langle #1\\right|',
                    Ket: '\\left|#1\\right\\rangle',
                    Braket: '\\left\\langle{#1}\\right\\rangle',
                    Set: '\\left\\lbrace #1 \\right\\rbrace'
                }
            },
            'amsmath.sty': {
                package: {
                    varGamma: '\\mathit{\\Gamma}',
                    varDelta: '\\mathit{\\Delta}',
                    varTheta: '\\mathit{\\Theta}',
                    varLambda: '\\mathit{\\Lambda}',
                    varXi: '\\mathit{\\Xi}',
                    varPi: '\\mathit{\\Pi}',
                    varSigma: '\\mathit{\\Sigma}',
                    varUpsilon: '\\mathit{\\Upsilon}',
                    varPhi: '\\mathit{\\Phi}',
                    varPsi: '\\mathit{\\Psi}',
                    varOmega: '\\mathit{\\Omega}',
                    pmod: {
                        def: '\\quad(\\operatorname{mod}\\ #1)',
                        args: 1,
                        expand: !1
                    },
                    mod: {
                        def: '\\quad\\operatorname{mod}\\,\\,#1',
                        args: 1,
                        expand: !1
                    },
                    bmod: {
                        def: '\\;\\mathbin{\\operatorname{mod }}',
                        expand: !1
                    }
                },
                expand: !1
            },
            'texvc.sty': {
                package: {
                    darr: '\\downarrow',
                    dArr: '\\Downarrow',
                    Darr: '\\Downarrow',
                    lang: '\\langle',
                    rang: '\\rangle',
                    uarr: '\\uparrow',
                    uArr: '\\Uparrow',
                    Uarr: '\\Uparrow',
                    N: '\\mathbb{N}',
                    R: '\\mathbb{R}',
                    Z: '\\mathbb{Z}',
                    alef: '\\aleph',
                    alefsym: '\\aleph',
                    Alpha: '\\mathrm{A}',
                    Beta: '\\mathrm{B}',
                    bull: '\\bullet',
                    Chi: '\\mathrm{X}',
                    clubs: '\\clubsuit',
                    cnums: '\\mathbb{C}',
                    Complex: '\\mathbb{C}',
                    Dagger: '\\ddagger',
                    diamonds: '\\diamondsuit',
                    empty: '\\emptyset',
                    Epsilon: '\\mathrm{E}',
                    Eta: '\\mathrm{H}',
                    exist: '\\exists',
                    harr: '\\leftrightarrow',
                    hArr: '\\Leftrightarrow',
                    Harr: '\\Leftrightarrow',
                    hearts: '\\heartsuit',
                    image: '\\Im',
                    infin: '\\infty',
                    Iota: '\\mathrm{I}',
                    isin: '\\in',
                    Kappa: '\\mathrm{K}',
                    larr: '\\leftarrow',
                    lArr: '\\Leftarrow',
                    Larr: '\\Leftarrow',
                    lrarr: '\\leftrightarrow',
                    lrArr: '\\Leftrightarrow',
                    Lrarr: '\\Leftrightarrow',
                    Mu: '\\mathrm{M}',
                    natnums: '\\mathbb{N}',
                    Nu: '\\mathrm{N}',
                    Omicron: '\\mathrm{O}',
                    plusmn: '\\pm',
                    rarr: '\\rightarrow',
                    rArr: '\\Rightarrow',
                    Rarr: '\\Rightarrow',
                    real: '\\Re',
                    reals: '\\mathbb{R}',
                    Reals: '\\mathbb{R}',
                    Rho: '\\mathrm{P}',
                    sdot: '\\cdot',
                    sect: '\\S',
                    spades: '\\spadesuit',
                    sub: '\\subset',
                    sube: '\\subseteq',
                    supe: '\\supseteq',
                    Tau: '\\mathrm{T}',
                    thetasym: '\\vartheta',
                    weierp: '\\wp',
                    Zeta: '\\mathrm{Z}'
                },
                expand: !1
            }
        },
        o = {
            ' ': 32,
            '\\#': 35,
            '\\&': 38,
            '\\$': 36,
            '\\%': 37,
            '\\_': 95,
            '\\euro': 8364,
            '\\maltese': 10016,
            '\\{': 123,
            '\\}': 125,
            '\\nobreakspace': 160,
            '\\ldots': 8230,
            '\\textellipsis': 8230,
            '\\backslash': 92,
            '`': 8216,
            '\'': 8217,
            '``': 8220,
            '\'\'': 8221,
            '\\degree': 176,
            '\\textasciicircum': 94,
            '\\textasciitilde': 126,
            '\\textasteriskcentered': 42,
            '\\textbackslash': 92,
            '\\textbraceleft': 123,
            '\\textbraceright': 125,
            '\\textbullet': 8226,
            '\\textdollar': 36,
            '\\textsterling': 163,
            '\\textdagger': 8224,
            '\\textdaggerdbl': 8225,
            '\u2013': 8211,
            '\u2014': 8212,
            '\u2018': 8216,
            '\u2019': 8217,
            '\u201C': 8220,
            '\u201D': 8221,
            '"': 8221,
            '\\ss': 223,
            '\\ae': 230,
            '\\oe': 339,
            '\\AE': 198,
            '\\OE': 338,
            '\\O': 216,
            '\\i': 305,
            '\\j': 567,
            '\\aa': 229,
            '\\AA': 197
        },
        p = /[\w!@*()-=+{}[\]\\';:?/.,~<>`|$%#&^" ]/,
        q = _jb() ? new RegExp('\\p{Letter}', 'u') : /[a-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/,
        r = _jb() ? new RegExp('[0-9\\p{Letter}]', 'u') : /[\da-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/;

    function s(t, u, v = 'mord', w) {
        void 0 !== u && (j[t] = {
            definitionType: 'symbol',
            type: v,
            variant: w,
            codepoint: u
        }, k[u] || (k[u] = t), o[t] || (o[t] = u));
    }

    function s(t, u, v) {
        if ('string' != typeof t)
            for (const [w, x, y, z] of t)
                _Zc(w, x, null != y ? y : u, null != z ? z : v);
        else
            for (let A = 0; A < t.length; A++) {
                const B = t.charAt(A);
                _Zc(B, B.codePointAt(0));
            }
    }

    function s(t, u) {
        for (let v = t; v <= u; v++)
            _Zc(String.fromCodePoint(v), v);
    }

    function s(t, u) {
        if (void 0 === u)
            return '';
        if ('math' === t && k[u])
            return k[u];
        if ('text' === t) {
            let v = Object.keys(o).find(v => o[v] === u);
            if (!v) {
                const w = u.toString(16);
                v = '^'.repeat(w.length) + w;
            }
            return v;
        }
        return String.fromCodePoint(u);
    }
    const s = {
            119893: 8462,
            119965: 8492,
            119968: 8496,
            119969: 8497,
            119971: 8459,
            119972: 8464,
            119975: 8466,
            119976: 8499,
            119981: 8475,
            119994: 8495,
            119996: 8458,
            120004: 8500,
            120070: 8493,
            120075: 8460,
            120076: 8465,
            120085: 8476,
            120093: 8488,
            120122: 8450,
            120127: 8461,
            120133: 8469,
            120135: 8473,
            120136: 8474,
            120137: 8477,
            120145: 8484
        },
        t = [{
                start: 119808,
                len: 26,
                offset: 65,
                style: 'bold'
            },
            {
                start: 119834,
                len: 26,
                offset: 97,
                style: 'bold'
            },
            {
                start: 119860,
                len: 26,
                offset: 65,
                style: 'italic'
            },
            {
                start: 119886,
                len: 26,
                offset: 97,
                style: 'italic'
            },
            {
                start: 119912,
                len: 26,
                offset: 65,
                style: 'bolditalic'
            },
            {
                start: 119938,
                len: 26,
                offset: 97,
                style: 'bolditalic'
            },
            {
                start: 119964,
                len: 26,
                offset: 65,
                variant: 'script'
            },
            {
                start: 119990,
                len: 26,
                offset: 97,
                variant: 'script'
            },
            {
                start: 120016,
                len: 26,
                offset: 65,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120042,
                len: 26,
                offset: 97,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120068,
                len: 26,
                offset: 65,
                variant: 'fraktur'
            },
            {
                start: 120094,
                len: 26,
                offset: 97,
                variant: 'fraktur'
            },
            {
                start: 120172,
                len: 26,
                offset: 65,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120198,
                len: 26,
                offset: 97,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120120,
                len: 26,
                offset: 65,
                variant: 'double-struck'
            },
            {
                start: 120146,
                len: 26,
                offset: 97,
                variant: 'double-struck'
            },
            {
                start: 120224,
                len: 26,
                offset: 65,
                variant: 'sans-serif'
            },
            {
                start: 120250,
                len: 26,
                offset: 97,
                variant: 'sans-serif'
            },
            {
                start: 120276,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120302,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120328,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120354,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120380,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120406,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120432,
                len: 26,
                offset: 65,
                variant: 'monospace'
            },
            {
                start: 120458,
                len: 26,
                offset: 97,
                variant: 'monospace'
            },
            {
                start: 120488,
                len: 25,
                offset: 913,
                style: 'bold'
            },
            {
                start: 120514,
                len: 25,
                offset: 945,
                style: 'bold'
            },
            {
                start: 120546,
                len: 25,
                offset: 913,
                style: 'italic'
            },
            {
                start: 120572,
                len: 25,
                offset: 945,
                style: 'italic'
            },
            {
                start: 120604,
                len: 25,
                offset: 913,
                style: 'bolditalic'
            },
            {
                start: 120630,
                len: 25,
                offset: 945,
                style: 'bolditalic'
            },
            {
                start: 120662,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120688,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120720,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120746,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120782,
                len: 10,
                offset: 48,
                variant: 'main',
                style: 'bold'
            },
            {
                start: 120792,
                len: 10,
                offset: 48,
                variant: 'double-struck'
            },
            {
                start: 120803,
                len: 10,
                offset: 48,
                variant: 'sans-serif'
            },
            {
                start: 120812,
                len: 10,
                offset: 48,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120822,
                len: 10,
                offset: 48,
                variant: 'monospace'
            }
        ];

    function u(v) {
        let w = 'auto';
        const x = v.match(/:([^=]+)/);
        return x && (w = x[1].trim()), w;
    }

    function u(v) {
        if (!v)
            return [];
        const w = [];
        let x = v.split(']');
        if (x[0].startsWith('[')) {
            w.push({
                isOptional: !0,
                type: _ed(x[0].slice(1))
            });
            for (let y = 1; y <= x.length; y++)
                w.push(...u(x[y]));
        } else if (x = v.split('}'), x[0].startsWith('{')) {
            w.push({
                isOptional: !1,
                type: _ed(x[0].slice(1))
            });
            for (let y = 1; y <= x.length; y++)
                w.push(...u(x[y]));
        }
        return w;
    }

    function u(v) {
        if (!v)
            return '';
        let w = '',
            x = !0;
        for (const y of v)
            'string' == typeof y.value ? w += y.value : x = !1;
        return x ? w : '';
    }

    function u(v, w, x, y = !1) {
        'string' == typeof v && (v = [v]);
        const z = {
            tabular: y,
            params: _fd(w),
            createAtom: x
        };
        for (const A of v)
            m[A] = z;
    }

    function u(v, w, x) {
        R(v, w, x, !0);
    }

    function u(v, w, x) {
        var y, z;
        x || (x = {});
        const A = {
            definitionType: 'function',
            params: _fd(w),
            ifMode: x.ifMode,
            isFunction: null !== (y = x.isFunction) && void 0 !== y && y,
            applyMode: x.applyMode,
            infix: null !== (z = x.infix) && void 0 !== z && z,
            createAtom: x.createAtom,
            applyStyle: x.applyStyle
        };
        if ('string' == typeof v)
            l['\\' + v] = A;
        else
            for (const B of v)
                l['\\' + B] = A;
    }
    let u;

    function v(w) {
        return u || (u = _v(n)), w ? _v({
            ...u,
            ...w
        }) : u;
    }

    function v(w, x) {
        var y, z, A, B;
        if ('string' == typeof w) {
            let C = 0;
            const D = w;
            return /(^|[^\\])#1/.test(D) && (C = 1), /(^|[^\\])#2/.test(D) && (C = 2), /(^|[^\\])#3/.test(D) && (C = 3), /(^|[^\\])#4/.test(D) && (C = 4), /(^|[^\\])#5/.test(D) && (C = 5), /(^|[^\\])#6/.test(D) && (C = 6), /(^|[^\\])#7/.test(D) && (C = 7), /(^|[^\\])#8/.test(D) && (C = 8), /(^|[^\\])#9/.test(D) && (C = 9), {
                expand: null === (y = null == x ? void 0 : x.expand) || void 0 === y || y,
                captureSelection: null === (z = null == x ? void 0 : x.captureSelection) || void 0 === z || z,
                args: C,
                def: D
            };
        }
        return {
            expand: null === (A = null == x ? void 0 : x.expand) || void 0 === A || A,
            captureSelection: null === (B = null == x ? void 0 : x.captureSelection) || void 0 === B || B,
            args: 0,
            ...w
        };
    }

    function _v(w) {
        if (!w)
            return {};
        const x = {};
        for (const y of Object.keys(w)) {
            const z = w[y];
            if (null == z)
                delete x[y];
            else if ('object' == typeof z && 'package' in z)
                for (const A of Object.keys(z.package))
                    x[A] = W(z.package[A], {
                        expand: z.expand,
                        captureSelection: z.captureSelection
                    });
            else
                x[y] = W(z);
        }
        return x;
    }
    const v = [
            0,
            0.69444,
            0,
            0
        ],
        w = [
            0,
            0.61111,
            0,
            0
        ],
        x = [
            0.25,
            0.75,
            0,
            0
        ],
        y = [
            0,
            0.44444,
            0,
            0
        ],
        z = [
            0,
            0.68611,
            0,
            0
        ],
        A = [
            0.19444,
            0.69444,
            0,
            0
        ],
        B = [
            0,
            0.68333,
            0,
            0
        ],
        C = [
            0,
            0.68889,
            0,
            0
        ],
        D = [
            0,
            0.69141,
            0,
            0
        ],
        E = [
            0,
            0,
            0,
            0
        ],
        F = [
            0,
            0.64444,
            0,
            0
        ],
        G = [
            0,
            0.69224,
            0,
            0
        ],
        H = [
            0.19444,
            0.44444,
            0,
            0
        ],
        I = [
            0.65002,
            1.15,
            0,
            0
        ],
        J = [
            0,
            0.55556,
            0,
            0
        ],
        K = [
            0.35001,
            0.85,
            0,
            0
        ],
        L = [
            1.25003,
            1.75,
            0,
            0
        ],
        M = [
            0.95003,
            1.45,
            0,
            0
        ],
        N = [
            0,
            0.75,
            0,
            0
        ],
        O = [
            0,
            0.47534,
            0,
            0
        ],
        P = [
            0.25001,
            0.75,
            0,
            0
        ],
        Q = [
            0.55001,
            1.05,
            0,
            0
        ],
        R = [
            0.16667,
            0.68889,
            0,
            0
        ],
        S = [
            0.08167,
            0.58167,
            0,
            0
        ];
    var T = {
        'AMS-Regular': {
            32: E,
            65: C,
            66: C,
            67: C,
            68: C,
            69: C,
            70: C,
            71: C,
            72: C,
            73: C,
            74: R,
            75: C,
            76: C,
            77: C,
            78: C,
            79: R,
            80: C,
            81: R,
            82: C,
            83: C,
            84: C,
            85: C,
            86: C,
            87: C,
            88: C,
            89: C,
            90: C,
            107: C,
            160: E,
            165: [
                0,
                0.675,
                0.025,
                0
            ],
            174: [
                0.15559,
                0.69224,
                0,
                0
            ],
            240: C,
            295: C,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.9,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.9,
                0,
                0
            ],
            989: S,
            1008: [
                0,
                0.43056,
                0.04028,
                0
            ],
            8245: [
                0,
                0.54986,
                0,
                0
            ],
            8463: C,
            8487: C,
            8498: C,
            8502: C,
            8503: C,
            8504: C,
            8513: C,
            8592: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8594: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8602: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8603: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8606: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8608: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8610: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8611: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8619: [
                0,
                0.54986,
                0,
                0
            ],
            8620: [
                0,
                0.54986,
                0,
                0
            ],
            8621: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8622: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8624: G,
            8625: G,
            8630: [
                0,
                0.43056,
                0,
                0
            ],
            8631: [
                0,
                0.43056,
                0,
                0
            ],
            8634: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8635: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8638: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8639: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8642: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8643: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8644: [
                0.1808,
                0.675,
                0,
                0
            ],
            8646: [
                0.1808,
                0.675,
                0,
                0
            ],
            8647: [
                0.1808,
                0.675,
                0,
                0
            ],
            8648: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8649: [
                0.1808,
                0.675,
                0,
                0
            ],
            8650: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8651: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8652: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8653: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8654: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8655: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8666: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8667: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8669: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8672: [
                -0.064,
                0.437,
                0,
                0
            ],
            8674: [
                -0.064,
                0.437,
                0,
                0
            ],
            8705: [
                0,
                0.825,
                0,
                0
            ],
            8708: C,
            8709: S,
            8717: [
                0,
                0.43056,
                0,
                0
            ],
            8722: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8724: [
                0.08198,
                0.69224,
                0,
                0
            ],
            8726: S,
            8733: G,
            8736: G,
            8737: G,
            8738: [
                0.03517,
                0.52239,
                0,
                0
            ],
            8739: S,
            8740: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8741: S,
            8742: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8756: G,
            8757: G,
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8765: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8769: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8770: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8774: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8778: S,
            8782: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8783: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8785: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8786: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8787: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8790: G,
            8791: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8796: [
                0.08198,
                0.91667,
                0,
                0
            ],
            8806: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8807: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8808: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8809: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8812: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8814: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8815: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8816: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8817: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8818: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8819: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8822: [
                0.1808,
                0.675,
                0,
                0
            ],
            8823: [
                0.1808,
                0.675,
                0,
                0
            ],
            8828: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8829: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8830: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8831: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8832: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8833: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8840: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8841: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8842: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8843: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8847: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8848: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8858: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8859: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8861: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8862: [
                0,
                0.675,
                0,
                0
            ],
            8863: [
                0,
                0.675,
                0,
                0
            ],
            8864: [
                0,
                0.675,
                0,
                0
            ],
            8865: [
                0,
                0.675,
                0,
                0
            ],
            8872: G,
            8873: G,
            8874: G,
            8876: C,
            8877: C,
            8878: C,
            8879: C,
            8882: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8883: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8884: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8885: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8888: [
                0,
                0.54986,
                0,
                0
            ],
            8890: [
                0.19444,
                0.43056,
                0,
                0
            ],
            8891: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8892: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8901: [
                0,
                0.54986,
                0,
                0
            ],
            8903: S,
            8905: S,
            8906: S,
            8907: G,
            8908: G,
            8909: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8910: [
                0,
                0.54986,
                0,
                0
            ],
            8911: [
                0,
                0.54986,
                0,
                0
            ],
            8912: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8913: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8914: [
                0,
                0.54986,
                0,
                0
            ],
            8915: [
                0,
                0.54986,
                0,
                0
            ],
            8916: G,
            8918: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8919: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8920: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8921: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8922: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8923: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8926: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8927: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8928: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8929: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8934: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8935: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8936: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8937: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8938: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8939: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8940: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8941: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8994: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8995: [
                0.19444,
                0.69224,
                0,
                0
            ],
            9416: [
                0.15559,
                0.69224,
                0,
                0
            ],
            9484: G,
            9488: G,
            9492: [
                0,
                0.37788,
                0,
                0
            ],
            9496: [
                0,
                0.37788,
                0,
                0
            ],
            9585: [
                0.19444,
                0.68889,
                0,
                0
            ],
            9586: [
                0.19444,
                0.74111,
                0,
                0
            ],
            9632: [
                0,
                0.675,
                0,
                0
            ],
            9633: [
                0,
                0.675,
                0,
                0
            ],
            9650: [
                0,
                0.54986,
                0,
                0
            ],
            9651: [
                0,
                0.54986,
                0,
                0
            ],
            9654: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9660: [
                0,
                0.54986,
                0,
                0
            ],
            9661: [
                0,
                0.54986,
                0,
                0
            ],
            9664: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9674: [
                0.11111,
                0.69224,
                0,
                0
            ],
            9733: [
                0.19444,
                0.69224,
                0,
                0
            ],
            10003: G,
            10016: G,
            10731: [
                0.11111,
                0.69224,
                0,
                0
            ],
            10846: [
                0.19444,
                0.75583,
                0,
                0
            ],
            10877: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10878: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10885: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10886: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10887: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10888: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10889: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10890: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10891: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10892: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10901: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10902: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10933: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10934: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10935: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10936: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10937: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10938: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10949: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10950: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10955: [
                0.28481,
                0.79383,
                0,
                0
            ],
            10956: [
                0.28481,
                0.79383,
                0,
                0
            ],
            57350: S,
            57351: S,
            57352: S,
            57353: [
                0,
                0.43056,
                0.04028,
                0
            ],
            57356: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57357: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57358: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57359: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57360: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57361: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57366: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57367: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57368: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57369: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57370: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57371: [
                0.13597,
                0.63597,
                0,
                0
            ]
        },
        'Caligraphic-Regular': {
            32: E,
            65: [
                0,
                0.68333,
                0,
                0.19445
            ],
            66: [
                0,
                0.68333,
                0.03041,
                0.13889
            ],
            67: [
                0,
                0.68333,
                0.05834,
                0.13889
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            69: [
                0,
                0.68333,
                0.08944,
                0.11111
            ],
            70: [
                0,
                0.68333,
                0.09931,
                0.11111
            ],
            71: [
                0.09722,
                0.68333,
                0.0593,
                0.11111
            ],
            72: [
                0,
                0.68333,
                0.00965,
                0.11111
            ],
            73: [
                0,
                0.68333,
                0.07382,
                0
            ],
            74: [
                0.09722,
                0.68333,
                0.18472,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.01445,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.13889
            ],
            77: [
                0,
                0.68333,
                0,
                0.13889
            ],
            78: [
                0,
                0.68333,
                0.14736,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.11111
            ],
            80: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            81: [
                0.09722,
                0.68333,
                0,
                0.11111
            ],
            82: [
                0,
                0.68333,
                0,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.075,
                0.13889
            ],
            84: [
                0,
                0.68333,
                0.25417,
                0
            ],
            85: [
                0,
                0.68333,
                0.09931,
                0.08334
            ],
            86: [
                0,
                0.68333,
                0.08222,
                0
            ],
            87: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            88: [
                0,
                0.68333,
                0.14643,
                0.13889
            ],
            89: [
                0.09722,
                0.68333,
                0.08222,
                0.08334
            ],
            90: [
                0,
                0.68333,
                0.07944,
                0.13889
            ],
            160: E
        },
        'Fraktur-Regular': {
            32: E,
            33: D,
            34: D,
            38: D,
            39: D,
            40: [
                0.24982,
                0.74947,
                0,
                0
            ],
            41: [
                0.24982,
                0.74947,
                0,
                0
            ],
            42: [
                0,
                0.62119,
                0,
                0
            ],
            43: [
                0.08319,
                0.58283,
                0,
                0
            ],
            44: [
                0,
                0.10803,
                0,
                0
            ],
            45: [
                0.08319,
                0.58283,
                0,
                0
            ],
            46: [
                0,
                0.10803,
                0,
                0
            ],
            47: [
                0.24982,
                0.74947,
                0,
                0
            ],
            48: O,
            49: O,
            50: O,
            51: [
                0.18906,
                0.47534,
                0,
                0
            ],
            52: [
                0.18906,
                0.47534,
                0,
                0
            ],
            53: [
                0.18906,
                0.47534,
                0,
                0
            ],
            54: D,
            55: [
                0.18906,
                0.47534,
                0,
                0
            ],
            56: D,
            57: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58: O,
            59: [
                0.12604,
                0.47534,
                0,
                0
            ],
            61: [
                -0.13099,
                0.36866,
                0,
                0
            ],
            63: D,
            65: D,
            66: D,
            67: D,
            68: D,
            69: D,
            70: [
                0.12604,
                0.69141,
                0,
                0
            ],
            71: D,
            72: [
                0.06302,
                0.69141,
                0,
                0
            ],
            73: D,
            74: [
                0.12604,
                0.69141,
                0,
                0
            ],
            75: D,
            76: D,
            77: D,
            78: D,
            79: D,
            80: [
                0.18906,
                0.69141,
                0,
                0
            ],
            81: [
                0.03781,
                0.69141,
                0,
                0
            ],
            82: D,
            83: D,
            84: D,
            85: D,
            86: D,
            87: D,
            88: D,
            89: [
                0.18906,
                0.69141,
                0,
                0
            ],
            90: [
                0.12604,
                0.69141,
                0,
                0
            ],
            91: [
                0.24982,
                0.74947,
                0,
                0
            ],
            93: [
                0.24982,
                0.74947,
                0,
                0
            ],
            94: D,
            97: O,
            98: D,
            99: O,
            100: [
                0,
                0.62119,
                0,
                0
            ],
            101: O,
            102: [
                0.18906,
                0.69141,
                0,
                0
            ],
            103: [
                0.18906,
                0.47534,
                0,
                0
            ],
            104: [
                0.18906,
                0.69141,
                0,
                0
            ],
            105: D,
            106: D,
            107: D,
            108: D,
            109: O,
            110: O,
            111: O,
            112: [
                0.18906,
                0.52396,
                0,
                0
            ],
            113: [
                0.18906,
                0.47534,
                0,
                0
            ],
            114: O,
            115: O,
            116: [
                0,
                0.62119,
                0,
                0
            ],
            117: O,
            118: [
                0,
                0.52396,
                0,
                0
            ],
            119: [
                0,
                0.52396,
                0,
                0
            ],
            120: [
                0.18906,
                0.47534,
                0,
                0
            ],
            121: [
                0.18906,
                0.47534,
                0,
                0
            ],
            122: [
                0.18906,
                0.47534,
                0,
                0
            ],
            160: E,
            8216: D,
            8217: D,
            58112: [
                0,
                0.62119,
                0,
                0
            ],
            58113: [
                0,
                0.62119,
                0,
                0
            ],
            58114: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58115: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58116: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58117: D,
            58118: [
                0,
                0.62119,
                0,
                0
            ],
            58119: O
        },
        'Main-Bold': {
            32: E,
            33: v,
            34: v,
            35: A,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: v,
            39: v,
            40: x,
            41: x,
            42: N,
            43: [
                0.13333,
                0.63333,
                0,
                0
            ],
            44: [
                0.19444,
                0.15556,
                0,
                0
            ],
            45: y,
            46: [
                0,
                0.15556,
                0,
                0
            ],
            47: x,
            48: F,
            49: F,
            50: F,
            51: F,
            52: F,
            53: F,
            54: F,
            55: F,
            56: F,
            57: F,
            58: y,
            59: H,
            60: [
                0.08556,
                0.58556,
                0,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            62: [
                0.08556,
                0.58556,
                0,
                0
            ],
            63: v,
            64: v,
            65: z,
            66: z,
            67: z,
            68: z,
            69: z,
            70: z,
            71: z,
            72: z,
            73: z,
            74: z,
            75: z,
            76: z,
            77: z,
            78: z,
            79: z,
            80: z,
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: z,
            83: z,
            84: z,
            85: z,
            86: [
                0,
                0.68611,
                0.01597,
                0
            ],
            87: [
                0,
                0.68611,
                0.01597,
                0
            ],
            88: z,
            89: [
                0,
                0.68611,
                0.02875,
                0
            ],
            90: z,
            91: x,
            92: x,
            93: x,
            94: v,
            95: [
                0.31,
                0.13444,
                0.03194,
                0
            ],
            97: y,
            98: v,
            99: y,
            100: v,
            101: y,
            102: [
                0,
                0.69444,
                0.10903,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            104: v,
            105: v,
            106: A,
            107: v,
            108: v,
            109: y,
            110: y,
            111: y,
            112: H,
            113: H,
            114: y,
            115: y,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: y,
            118: [
                0,
                0.44444,
                0.01597,
                0
            ],
            119: [
                0,
                0.44444,
                0.01597,
                0
            ],
            120: y,
            121: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            122: y,
            123: x,
            124: x,
            125: x,
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: E,
            163: v,
            168: v,
            172: y,
            176: v,
            177: [
                0.13333,
                0.63333,
                0,
                0
            ],
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: z,
            215: [
                0.13333,
                0.63333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0,
                0
            ],
            223: v,
            230: y,
            247: [
                0.13333,
                0.63333,
                0,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0,
                0
            ],
            305: y,
            338: z,
            339: y,
            567: H,
            710: v,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.59611,
                0,
                0
            ],
            714: v,
            715: v,
            728: v,
            729: v,
            730: v,
            732: v,
            733: v,
            915: z,
            916: z,
            920: z,
            923: z,
            926: z,
            928: z,
            931: z,
            933: z,
            934: z,
            936: z,
            937: z,
            8211: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8212: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8216: v,
            8217: v,
            8220: v,
            8221: v,
            8224: A,
            8225: A,
            8242: J,
            8407: [
                0,
                0.72444,
                0.15486,
                0
            ],
            8463: v,
            8465: v,
            8467: v,
            8472: H,
            8476: v,
            8501: v,
            8592: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8593: A,
            8594: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8595: A,
            8596: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8597: x,
            8598: A,
            8599: A,
            8600: A,
            8601: A,
            8636: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8637: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8640: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8641: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8656: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8657: A,
            8658: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8659: A,
            8660: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8661: x,
            8704: v,
            8706: [
                0,
                0.69444,
                0.06389,
                0
            ],
            8707: v,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: z,
            8712: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8715: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8722: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8723: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8725: x,
            8726: x,
            8727: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8728: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8729: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8730: [
                0.18,
                0.82,
                0,
                0
            ],
            8733: y,
            8734: y,
            8736: G,
            8739: x,
            8741: x,
            8743: J,
            8744: J,
            8745: J,
            8746: J,
            8747: [
                0.19444,
                0.69444,
                0.12778,
                0
            ],
            8764: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8768: A,
            8771: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8776: [
                0.02444,
                0.52444,
                0,
                0
            ],
            8781: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8801: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8804: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8805: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8810: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8811: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8826: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8827: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8834: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8835: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8838: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8839: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8846: J,
            8849: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8850: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8851: J,
            8852: J,
            8853: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8854: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8855: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8856: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8857: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8866: v,
            8867: v,
            8868: v,
            8869: v,
            8900: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8901: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8902: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8968: x,
            8969: x,
            8970: x,
            8971: x,
            8994: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            8995: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            9651: A,
            9657: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9661: A,
            9667: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9711: A,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: N,
            9838: A,
            9839: A,
            10216: x,
            10217: x,
            10815: z,
            10927: [
                0.19667,
                0.69667,
                0,
                0
            ],
            10928: [
                0.19667,
                0.69667,
                0,
                0
            ],
            57376: A
        },
        'Main-BoldItalic': {
            32: E,
            33: [
                0,
                0.69444,
                0.11417,
                0
            ],
            34: [
                0,
                0.69444,
                0.07939,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06833,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.12861,
                0
            ],
            38: [
                0,
                0.69444,
                0.08528,
                0
            ],
            39: [
                0,
                0.69444,
                0.12945,
                0
            ],
            40: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03306,
                0
            ],
            42: [
                0,
                0.75,
                0.14333,
                0
            ],
            43: [
                0.10333,
                0.60333,
                0.03306,
                0
            ],
            44: [
                0.19444,
                0.14722,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.02611,
                0
            ],
            46: [
                0,
                0.14722,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            48: [
                0,
                0.64444,
                0.13167,
                0
            ],
            49: [
                0,
                0.64444,
                0.13167,
                0
            ],
            50: [
                0,
                0.64444,
                0.13167,
                0
            ],
            51: [
                0,
                0.64444,
                0.13167,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            53: [
                0,
                0.64444,
                0.13167,
                0
            ],
            54: [
                0,
                0.64444,
                0.13167,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            56: [
                0,
                0.64444,
                0.13167,
                0
            ],
            57: [
                0,
                0.64444,
                0.13167,
                0
            ],
            58: [
                0,
                0.44444,
                0.06695,
                0
            ],
            59: [
                0.19444,
                0.44444,
                0.06695,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0.06833,
                0
            ],
            63: [
                0,
                0.69444,
                0.11472,
                0
            ],
            64: [
                0,
                0.69444,
                0.09208,
                0
            ],
            65: z,
            66: [
                0,
                0.68611,
                0.0992,
                0
            ],
            67: [
                0,
                0.68611,
                0.14208,
                0
            ],
            68: [
                0,
                0.68611,
                0.09062,
                0
            ],
            69: [
                0,
                0.68611,
                0.11431,
                0
            ],
            70: [
                0,
                0.68611,
                0.12903,
                0
            ],
            71: [
                0,
                0.68611,
                0.07347,
                0
            ],
            72: [
                0,
                0.68611,
                0.17208,
                0
            ],
            73: [
                0,
                0.68611,
                0.15681,
                0
            ],
            74: [
                0,
                0.68611,
                0.145,
                0
            ],
            75: [
                0,
                0.68611,
                0.14208,
                0
            ],
            76: z,
            77: [
                0,
                0.68611,
                0.17208,
                0
            ],
            78: [
                0,
                0.68611,
                0.17208,
                0
            ],
            79: [
                0,
                0.68611,
                0.09062,
                0
            ],
            80: [
                0,
                0.68611,
                0.0992,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0.09062,
                0
            ],
            82: [
                0,
                0.68611,
                0.02559,
                0
            ],
            83: [
                0,
                0.68611,
                0.11264,
                0
            ],
            84: [
                0,
                0.68611,
                0.12903,
                0
            ],
            85: [
                0,
                0.68611,
                0.17208,
                0
            ],
            86: [
                0,
                0.68611,
                0.18625,
                0
            ],
            87: [
                0,
                0.68611,
                0.18625,
                0
            ],
            88: [
                0,
                0.68611,
                0.15681,
                0
            ],
            89: [
                0,
                0.68611,
                0.19803,
                0
            ],
            90: [
                0,
                0.68611,
                0.14208,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.09972,
                0
            ],
            94: [
                0,
                0.69444,
                0.06709,
                0
            ],
            95: [
                0.31,
                0.13444,
                0.09811,
                0
            ],
            97: [
                0,
                0.44444,
                0.09426,
                0
            ],
            98: [
                0,
                0.69444,
                0.07861,
                0
            ],
            99: [
                0,
                0.44444,
                0.05222,
                0
            ],
            100: [
                0,
                0.69444,
                0.10861,
                0
            ],
            101: [
                0,
                0.44444,
                0.085,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21778,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            104: [
                0,
                0.69444,
                0.09426,
                0
            ],
            105: [
                0,
                0.69326,
                0.11387,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.1672,
                0
            ],
            107: [
                0,
                0.69444,
                0.11111,
                0
            ],
            108: [
                0,
                0.69444,
                0.10861,
                0
            ],
            109: [
                0,
                0.44444,
                0.09426,
                0
            ],
            110: [
                0,
                0.44444,
                0.09426,
                0
            ],
            111: [
                0,
                0.44444,
                0.07861,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.07861,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            114: [
                0,
                0.44444,
                0.11111,
                0
            ],
            115: [
                0,
                0.44444,
                0.08167,
                0
            ],
            116: [
                0,
                0.63492,
                0.09639,
                0
            ],
            117: [
                0,
                0.44444,
                0.09426,
                0
            ],
            118: [
                0,
                0.44444,
                0.11111,
                0
            ],
            119: [
                0,
                0.44444,
                0.11111,
                0
            ],
            120: [
                0,
                0.44444,
                0.12583,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            122: [
                0,
                0.44444,
                0.13889,
                0
            ],
            126: [
                0.35,
                0.34444,
                0.11472,
                0
            ],
            160: E,
            168: [
                0,
                0.69444,
                0.11473,
                0
            ],
            176: v,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68611,
                0.11431,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0.09062,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.09736,
                0
            ],
            230: [
                0,
                0.44444,
                0.085,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0.09458,
                0
            ],
            305: [
                0,
                0.44444,
                0.09426,
                0
            ],
            338: [
                0,
                0.68611,
                0.11431,
                0
            ],
            339: [
                0,
                0.44444,
                0.085,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04611,
                0
            ],
            710: [
                0,
                0.69444,
                0.06709,
                0
            ],
            711: [
                0,
                0.63194,
                0.08271,
                0
            ],
            713: [
                0,
                0.59444,
                0.10444,
                0
            ],
            714: [
                0,
                0.69444,
                0.08528,
                0
            ],
            715: v,
            728: [
                0,
                0.69444,
                0.10333,
                0
            ],
            729: [
                0,
                0.69444,
                0.12945,
                0
            ],
            730: v,
            732: [
                0,
                0.69444,
                0.11472,
                0
            ],
            733: [
                0,
                0.69444,
                0.11472,
                0
            ],
            915: [
                0,
                0.68611,
                0.12903,
                0
            ],
            916: z,
            920: [
                0,
                0.68611,
                0.09062,
                0
            ],
            923: z,
            926: [
                0,
                0.68611,
                0.15092,
                0
            ],
            928: [
                0,
                0.68611,
                0.17208,
                0
            ],
            931: [
                0,
                0.68611,
                0.11431,
                0
            ],
            933: [
                0,
                0.68611,
                0.10778,
                0
            ],
            934: [
                0,
                0.68611,
                0.05632,
                0
            ],
            936: [
                0,
                0.68611,
                0.10778,
                0
            ],
            937: [
                0,
                0.68611,
                0.0992,
                0
            ],
            8211: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8212: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8220: [
                0,
                0.69444,
                0.16772,
                0
            ],
            8221: [
                0,
                0.69444,
                0.07939,
                0
            ]
        },
        'Main-Italic': {
            32: E,
            33: [
                0,
                0.69444,
                0.12417,
                0
            ],
            34: [
                0,
                0.69444,
                0.06961,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06616,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.13639,
                0
            ],
            38: [
                0,
                0.69444,
                0.09694,
                0
            ],
            39: [
                0,
                0.69444,
                0.12417,
                0
            ],
            40: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03694,
                0
            ],
            42: [
                0,
                0.75,
                0.14917,
                0
            ],
            43: [
                0.05667,
                0.56167,
                0.03694,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0.02826,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            48: [
                0,
                0.64444,
                0.13556,
                0
            ],
            49: [
                0,
                0.64444,
                0.13556,
                0
            ],
            50: [
                0,
                0.64444,
                0.13556,
                0
            ],
            51: [
                0,
                0.64444,
                0.13556,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            53: [
                0,
                0.64444,
                0.13556,
                0
            ],
            54: [
                0,
                0.64444,
                0.13556,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            56: [
                0,
                0.64444,
                0.13556,
                0
            ],
            57: [
                0,
                0.64444,
                0.13556,
                0
            ],
            58: [
                0,
                0.43056,
                0.0582,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0.0582,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0.06616,
                0
            ],
            63: [
                0,
                0.69444,
                0.1225,
                0
            ],
            64: [
                0,
                0.69444,
                0.09597,
                0
            ],
            65: B,
            66: [
                0,
                0.68333,
                0.10257,
                0
            ],
            67: [
                0,
                0.68333,
                0.14528,
                0
            ],
            68: [
                0,
                0.68333,
                0.09403,
                0
            ],
            69: [
                0,
                0.68333,
                0.12028,
                0
            ],
            70: [
                0,
                0.68333,
                0.13305,
                0
            ],
            71: [
                0,
                0.68333,
                0.08722,
                0
            ],
            72: [
                0,
                0.68333,
                0.16389,
                0
            ],
            73: [
                0,
                0.68333,
                0.15806,
                0
            ],
            74: [
                0,
                0.68333,
                0.14028,
                0
            ],
            75: [
                0,
                0.68333,
                0.14528,
                0
            ],
            76: B,
            77: [
                0,
                0.68333,
                0.16389,
                0
            ],
            78: [
                0,
                0.68333,
                0.16389,
                0
            ],
            79: [
                0,
                0.68333,
                0.09403,
                0
            ],
            80: [
                0,
                0.68333,
                0.10257,
                0
            ],
            81: [
                0.19444,
                0.68333,
                0.09403,
                0
            ],
            82: [
                0,
                0.68333,
                0.03868,
                0
            ],
            83: [
                0,
                0.68333,
                0.11972,
                0
            ],
            84: [
                0,
                0.68333,
                0.13305,
                0
            ],
            85: [
                0,
                0.68333,
                0.16389,
                0
            ],
            86: [
                0,
                0.68333,
                0.18361,
                0
            ],
            87: [
                0,
                0.68333,
                0.18361,
                0
            ],
            88: [
                0,
                0.68333,
                0.15806,
                0
            ],
            89: [
                0,
                0.68333,
                0.19383,
                0
            ],
            90: [
                0,
                0.68333,
                0.14528,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.10528,
                0
            ],
            94: [
                0,
                0.69444,
                0.06646,
                0
            ],
            95: [
                0.31,
                0.12056,
                0.09208,
                0
            ],
            97: [
                0,
                0.43056,
                0.07671,
                0
            ],
            98: [
                0,
                0.69444,
                0.06312,
                0
            ],
            99: [
                0,
                0.43056,
                0.05653,
                0
            ],
            100: [
                0,
                0.69444,
                0.10333,
                0
            ],
            101: [
                0,
                0.43056,
                0.07514,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21194,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            104: [
                0,
                0.69444,
                0.07671,
                0
            ],
            105: [
                0,
                0.65536,
                0.1019,
                0
            ],
            106: [
                0.19444,
                0.65536,
                0.14467,
                0
            ],
            107: [
                0,
                0.69444,
                0.10764,
                0
            ],
            108: [
                0,
                0.69444,
                0.10333,
                0
            ],
            109: [
                0,
                0.43056,
                0.07671,
                0
            ],
            110: [
                0,
                0.43056,
                0.07671,
                0
            ],
            111: [
                0,
                0.43056,
                0.06312,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0.06312,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            114: [
                0,
                0.43056,
                0.10764,
                0
            ],
            115: [
                0,
                0.43056,
                0.08208,
                0
            ],
            116: [
                0,
                0.61508,
                0.09486,
                0
            ],
            117: [
                0,
                0.43056,
                0.07671,
                0
            ],
            118: [
                0,
                0.43056,
                0.10764,
                0
            ],
            119: [
                0,
                0.43056,
                0.10764,
                0
            ],
            120: [
                0,
                0.43056,
                0.12042,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            122: [
                0,
                0.43056,
                0.12292,
                0
            ],
            126: [
                0.35,
                0.31786,
                0.11585,
                0
            ],
            160: E,
            168: [
                0,
                0.66786,
                0.10474,
                0
            ],
            176: v,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68333,
                0.12028,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0.09403,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.10514,
                0
            ],
            230: [
                0,
                0.43056,
                0.07514,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0.09194,
                0
            ],
            338: [
                0,
                0.68333,
                0.12028,
                0
            ],
            339: [
                0,
                0.43056,
                0.07514,
                0
            ],
            710: [
                0,
                0.69444,
                0.06646,
                0
            ],
            711: [
                0,
                0.62847,
                0.08295,
                0
            ],
            713: [
                0,
                0.56167,
                0.10333,
                0
            ],
            714: [
                0,
                0.69444,
                0.09694,
                0
            ],
            715: v,
            728: [
                0,
                0.69444,
                0.10806,
                0
            ],
            729: [
                0,
                0.66786,
                0.11752,
                0
            ],
            730: v,
            732: [
                0,
                0.66786,
                0.11585,
                0
            ],
            733: [
                0,
                0.69444,
                0.1225,
                0
            ],
            915: [
                0,
                0.68333,
                0.13305,
                0
            ],
            916: B,
            920: [
                0,
                0.68333,
                0.09403,
                0
            ],
            923: B,
            926: [
                0,
                0.68333,
                0.15294,
                0
            ],
            928: [
                0,
                0.68333,
                0.16389,
                0
            ],
            931: [
                0,
                0.68333,
                0.12028,
                0
            ],
            933: [
                0,
                0.68333,
                0.11111,
                0
            ],
            934: [
                0,
                0.68333,
                0.05986,
                0
            ],
            936: [
                0,
                0.68333,
                0.11111,
                0
            ],
            937: [
                0,
                0.68333,
                0.10257,
                0
            ],
            8211: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8212: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8220: [
                0,
                0.69444,
                0.1685,
                0
            ],
            8221: [
                0,
                0.69444,
                0.06961,
                0
            ],
            8463: C
        },
        'Main-Regular': {
            32: E,
            33: v,
            34: v,
            35: A,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: v,
            39: v,
            40: x,
            41: x,
            42: N,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: x,
            48: F,
            49: F,
            50: F,
            51: F,
            52: F,
            53: F,
            54: F,
            55: F,
            56: F,
            57: F,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0,
                0
            ],
            60: [
                0.0391,
                0.5391,
                0,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            62: [
                0.0391,
                0.5391,
                0,
                0
            ],
            63: v,
            64: v,
            65: B,
            66: B,
            67: B,
            68: B,
            69: B,
            70: B,
            71: B,
            72: B,
            73: B,
            74: B,
            75: B,
            76: B,
            77: B,
            78: B,
            79: B,
            80: B,
            81: [
                0.19444,
                0.68333,
                0,
                0
            ],
            82: B,
            83: B,
            84: B,
            85: B,
            86: [
                0,
                0.68333,
                0.01389,
                0
            ],
            87: [
                0,
                0.68333,
                0.01389,
                0
            ],
            88: B,
            89: [
                0,
                0.68333,
                0.025,
                0
            ],
            90: B,
            91: x,
            92: x,
            93: x,
            94: v,
            95: [
                0.31,
                0.12056,
                0.02778,
                0
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: v,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: v,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07778,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            104: v,
            105: [
                0,
                0.66786,
                0,
                0
            ],
            106: [
                0.19444,
                0.66786,
                0,
                0
            ],
            107: v,
            108: v,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.61508,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0.01389,
                0
            ],
            119: [
                0,
                0.43056,
                0.01389,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: x,
            124: x,
            125: x,
            126: [
                0.35,
                0.31786,
                0,
                0
            ],
            160: E,
            163: v,
            167: A,
            168: [
                0,
                0.66786,
                0,
                0
            ],
            172: [
                0,
                0.43056,
                0,
                0
            ],
            176: v,
            177: [
                0.08333,
                0.58333,
                0,
                0
            ],
            182: A,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: B,
            215: [
                0.08333,
                0.58333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0,
                0
            ],
            223: v,
            230: [
                0,
                0.43056,
                0,
                0
            ],
            247: [
                0.08333,
                0.58333,
                0,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            338: B,
            339: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.19444,
                0.43056,
                0,
                0
            ],
            710: v,
            711: [
                0,
                0.62847,
                0,
                0
            ],
            713: [
                0,
                0.56778,
                0,
                0
            ],
            714: v,
            715: v,
            728: v,
            729: [
                0,
                0.66786,
                0,
                0
            ],
            730: v,
            732: [
                0,
                0.66786,
                0,
                0
            ],
            733: v,
            915: B,
            916: B,
            920: B,
            923: B,
            926: B,
            928: B,
            931: B,
            933: B,
            934: B,
            936: B,
            937: B,
            8211: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8212: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8216: v,
            8217: v,
            8220: v,
            8221: v,
            8224: A,
            8225: A,
            8230: [
                0,
                0.12,
                0,
                0
            ],
            8242: J,
            8407: [
                0,
                0.71444,
                0.15382,
                0
            ],
            8463: C,
            8465: v,
            8467: [
                0,
                0.69444,
                0,
                0.11111
            ],
            8472: [
                0.19444,
                0.43056,
                0,
                0.11111
            ],
            8476: v,
            8501: v,
            8592: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8593: A,
            8594: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8595: A,
            8596: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8597: x,
            8598: A,
            8599: A,
            8600: A,
            8601: A,
            8614: [
                0.011,
                0.511,
                0,
                0
            ],
            8617: [
                0.011,
                0.511,
                0,
                0
            ],
            8618: [
                0.011,
                0.511,
                0,
                0
            ],
            8636: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8637: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8640: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8641: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8652: [
                0.011,
                0.671,
                0,
                0
            ],
            8656: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8657: A,
            8658: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8659: A,
            8660: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8661: x,
            8704: v,
            8706: [
                0,
                0.69444,
                0.05556,
                0.08334
            ],
            8707: v,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: B,
            8712: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8715: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8722: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8723: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8725: x,
            8726: x,
            8727: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8728: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8729: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8730: [
                0.2,
                0.8,
                0,
                0
            ],
            8733: [
                0,
                0.43056,
                0,
                0
            ],
            8734: [
                0,
                0.43056,
                0,
                0
            ],
            8736: G,
            8739: x,
            8741: x,
            8743: J,
            8744: J,
            8745: J,
            8746: J,
            8747: [
                0.19444,
                0.69444,
                0.11111,
                0
            ],
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8768: A,
            8771: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8773: [
                -0.022,
                0.589,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8781: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8784: [
                -0.133,
                0.67,
                0,
                0
            ],
            8801: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8804: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8805: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8810: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8811: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8826: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8827: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8834: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8835: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8838: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8839: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8846: J,
            8849: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8850: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8851: J,
            8852: J,
            8853: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8854: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8855: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8856: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8857: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8866: v,
            8867: v,
            8868: v,
            8869: v,
            8872: [
                0.249,
                0.75,
                0,
                0
            ],
            8900: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8901: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8902: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8904: [
                0.005,
                0.505,
                0,
                0
            ],
            8942: [
                0.03,
                0.9,
                0,
                0
            ],
            8943: [
                -0.19,
                0.31,
                0,
                0
            ],
            8945: [
                -0.1,
                0.82,
                0,
                0
            ],
            8968: x,
            8969: x,
            8970: x,
            8971: x,
            8994: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            8995: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            9136: [
                0.244,
                0.744,
                0,
                0
            ],
            9137: [
                0.244,
                0.744,
                0,
                0
            ],
            9651: A,
            9657: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9661: A,
            9667: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9711: A,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: N,
            9838: A,
            9839: A,
            10216: x,
            10217: x,
            10222: [
                0.244,
                0.744,
                0,
                0
            ],
            10223: [
                0.244,
                0.744,
                0,
                0
            ],
            10229: [
                0.011,
                0.511,
                0,
                0
            ],
            10230: [
                0.011,
                0.511,
                0,
                0
            ],
            10231: [
                0.011,
                0.511,
                0,
                0
            ],
            10232: [
                0.024,
                0.525,
                0,
                0
            ],
            10233: [
                0.024,
                0.525,
                0,
                0
            ],
            10234: [
                0.024,
                0.525,
                0,
                0
            ],
            10236: [
                0.011,
                0.511,
                0,
                0
            ],
            10815: B,
            10927: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10928: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57376: A
        },
        'Math-BoldItalic': {
            32: E,
            48: y,
            49: y,
            50: y,
            51: H,
            52: H,
            53: H,
            54: F,
            55: H,
            56: F,
            57: H,
            65: z,
            66: [
                0,
                0.68611,
                0.04835,
                0
            ],
            67: [
                0,
                0.68611,
                0.06979,
                0
            ],
            68: [
                0,
                0.68611,
                0.03194,
                0
            ],
            69: [
                0,
                0.68611,
                0.05451,
                0
            ],
            70: [
                0,
                0.68611,
                0.15972,
                0
            ],
            71: z,
            72: [
                0,
                0.68611,
                0.08229,
                0
            ],
            73: [
                0,
                0.68611,
                0.07778,
                0
            ],
            74: [
                0,
                0.68611,
                0.10069,
                0
            ],
            75: [
                0,
                0.68611,
                0.06979,
                0
            ],
            76: z,
            77: [
                0,
                0.68611,
                0.11424,
                0
            ],
            78: [
                0,
                0.68611,
                0.11424,
                0
            ],
            79: [
                0,
                0.68611,
                0.03194,
                0
            ],
            80: [
                0,
                0.68611,
                0.15972,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: [
                0,
                0.68611,
                0.00421,
                0
            ],
            83: [
                0,
                0.68611,
                0.05382,
                0
            ],
            84: [
                0,
                0.68611,
                0.15972,
                0
            ],
            85: [
                0,
                0.68611,
                0.11424,
                0
            ],
            86: [
                0,
                0.68611,
                0.25555,
                0
            ],
            87: [
                0,
                0.68611,
                0.15972,
                0
            ],
            88: [
                0,
                0.68611,
                0.07778,
                0
            ],
            89: [
                0,
                0.68611,
                0.25555,
                0
            ],
            90: [
                0,
                0.68611,
                0.06979,
                0
            ],
            97: y,
            98: v,
            99: y,
            100: v,
            101: y,
            102: [
                0.19444,
                0.69444,
                0.11042,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            104: v,
            105: [
                0,
                0.69326,
                0,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.0622,
                0
            ],
            107: [
                0,
                0.69444,
                0.01852,
                0
            ],
            108: [
                0,
                0.69444,
                0.0088,
                0
            ],
            109: y,
            110: y,
            111: y,
            112: H,
            113: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            114: [
                0,
                0.44444,
                0.03194,
                0
            ],
            115: y,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: y,
            118: [
                0,
                0.44444,
                0.03704,
                0
            ],
            119: [
                0,
                0.44444,
                0.02778,
                0
            ],
            120: y,
            121: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            122: [
                0,
                0.44444,
                0.04213,
                0
            ],
            160: E,
            915: [
                0,
                0.68611,
                0.15972,
                0
            ],
            916: z,
            920: [
                0,
                0.68611,
                0.03194,
                0
            ],
            923: z,
            926: [
                0,
                0.68611,
                0.07458,
                0
            ],
            928: [
                0,
                0.68611,
                0.08229,
                0
            ],
            931: [
                0,
                0.68611,
                0.05451,
                0
            ],
            933: [
                0,
                0.68611,
                0.15972,
                0
            ],
            934: z,
            936: [
                0,
                0.68611,
                0.11653,
                0
            ],
            937: [
                0,
                0.68611,
                0.04835,
                0
            ],
            945: y,
            946: [
                0.19444,
                0.69444,
                0.03403,
                0
            ],
            947: [
                0.19444,
                0.44444,
                0.06389,
                0
            ],
            948: [
                0,
                0.69444,
                0.03819,
                0
            ],
            949: y,
            950: [
                0.19444,
                0.69444,
                0.06215,
                0
            ],
            951: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            952: [
                0,
                0.69444,
                0.03194,
                0
            ],
            953: y,
            954: y,
            955: v,
            956: H,
            957: [
                0,
                0.44444,
                0.06898,
                0
            ],
            958: [
                0.19444,
                0.69444,
                0.03021,
                0
            ],
            959: y,
            960: [
                0,
                0.44444,
                0.03704,
                0
            ],
            961: H,
            962: [
                0.09722,
                0.44444,
                0.07917,
                0
            ],
            963: [
                0,
                0.44444,
                0.03704,
                0
            ],
            964: [
                0,
                0.44444,
                0.13472,
                0
            ],
            965: [
                0,
                0.44444,
                0.03704,
                0
            ],
            966: H,
            967: H,
            968: [
                0.19444,
                0.69444,
                0.03704,
                0
            ],
            969: [
                0,
                0.44444,
                0.03704,
                0
            ],
            977: v,
            981: A,
            982: [
                0,
                0.44444,
                0.03194,
                0
            ],
            1009: H,
            1013: y,
            57649: y,
            57911: H
        },
        'Math-Italic': {
            32: E,
            48: [
                0,
                0.43056,
                0,
                0
            ],
            49: [
                0,
                0.43056,
                0,
                0
            ],
            50: [
                0,
                0.43056,
                0,
                0
            ],
            51: [
                0.19444,
                0.43056,
                0,
                0
            ],
            52: [
                0.19444,
                0.43056,
                0,
                0
            ],
            53: [
                0.19444,
                0.43056,
                0,
                0
            ],
            54: F,
            55: [
                0.19444,
                0.43056,
                0,
                0
            ],
            56: F,
            57: [
                0.19444,
                0.43056,
                0,
                0
            ],
            65: [
                0,
                0.68333,
                0,
                0.13889
            ],
            66: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            67: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.05556
            ],
            69: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            70: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            71: [
                0,
                0.68333,
                0,
                0.08334
            ],
            72: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            73: [
                0,
                0.68333,
                0.07847,
                0.11111
            ],
            74: [
                0,
                0.68333,
                0.09618,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.07153,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.02778
            ],
            77: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            78: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            80: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            81: [
                0.19444,
                0.68333,
                0,
                0.08334
            ],
            82: [
                0,
                0.68333,
                0.00773,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            84: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            85: [
                0,
                0.68333,
                0.10903,
                0.02778
            ],
            86: [
                0,
                0.68333,
                0.22222,
                0
            ],
            87: [
                0,
                0.68333,
                0.13889,
                0
            ],
            88: [
                0,
                0.68333,
                0.07847,
                0.08334
            ],
            89: [
                0,
                0.68333,
                0.22222,
                0
            ],
            90: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: v,
            99: [
                0,
                0.43056,
                0,
                0.05556
            ],
            100: [
                0,
                0.69444,
                0,
                0.16667
            ],
            101: [
                0,
                0.43056,
                0,
                0.05556
            ],
            102: [
                0.19444,
                0.69444,
                0.10764,
                0.16667
            ],
            103: [
                0.19444,
                0.43056,
                0.03588,
                0.02778
            ],
            104: v,
            105: [
                0,
                0.65952,
                0,
                0
            ],
            106: [
                0.19444,
                0.65952,
                0.05724,
                0
            ],
            107: [
                0,
                0.69444,
                0.03148,
                0
            ],
            108: [
                0,
                0.69444,
                0.01968,
                0.08334
            ],
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0.05556
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            113: [
                0.19444,
                0.43056,
                0.03588,
                0.08334
            ],
            114: [
                0,
                0.43056,
                0.02778,
                0.05556
            ],
            115: [
                0,
                0.43056,
                0,
                0.05556
            ],
            116: [
                0,
                0.61508,
                0,
                0.08334
            ],
            117: [
                0,
                0.43056,
                0,
                0.02778
            ],
            118: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            119: [
                0,
                0.43056,
                0.02691,
                0.08334
            ],
            120: [
                0,
                0.43056,
                0,
                0.02778
            ],
            121: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            122: [
                0,
                0.43056,
                0.04398,
                0.05556
            ],
            160: E,
            915: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            916: [
                0,
                0.68333,
                0,
                0.16667
            ],
            920: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            923: [
                0,
                0.68333,
                0,
                0.16667
            ],
            926: [
                0,
                0.68333,
                0.07569,
                0.08334
            ],
            928: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            931: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            933: [
                0,
                0.68333,
                0.13889,
                0.05556
            ],
            934: [
                0,
                0.68333,
                0,
                0.08334
            ],
            936: [
                0,
                0.68333,
                0.11,
                0.05556
            ],
            937: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            945: [
                0,
                0.43056,
                0.0037,
                0.02778
            ],
            946: [
                0.19444,
                0.69444,
                0.05278,
                0.08334
            ],
            947: [
                0.19444,
                0.43056,
                0.05556,
                0
            ],
            948: [
                0,
                0.69444,
                0.03785,
                0.05556
            ],
            949: [
                0,
                0.43056,
                0,
                0.08334
            ],
            950: [
                0.19444,
                0.69444,
                0.07378,
                0.08334
            ],
            951: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            952: [
                0,
                0.69444,
                0.02778,
                0.08334
            ],
            953: [
                0,
                0.43056,
                0,
                0.05556
            ],
            954: [
                0,
                0.43056,
                0,
                0
            ],
            955: v,
            956: [
                0.19444,
                0.43056,
                0,
                0.02778
            ],
            957: [
                0,
                0.43056,
                0.06366,
                0.02778
            ],
            958: [
                0.19444,
                0.69444,
                0.04601,
                0.11111
            ],
            959: [
                0,
                0.43056,
                0,
                0.05556
            ],
            960: [
                0,
                0.43056,
                0.03588,
                0
            ],
            961: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            962: [
                0.09722,
                0.43056,
                0.07986,
                0.08334
            ],
            963: [
                0,
                0.43056,
                0.03588,
                0
            ],
            964: [
                0,
                0.43056,
                0.1132,
                0.02778
            ],
            965: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            966: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            967: [
                0.19444,
                0.43056,
                0,
                0.05556
            ],
            968: [
                0.19444,
                0.69444,
                0.03588,
                0.11111
            ],
            969: [
                0,
                0.43056,
                0.03588,
                0
            ],
            977: [
                0,
                0.69444,
                0,
                0.08334
            ],
            981: [
                0.19444,
                0.69444,
                0,
                0.08334
            ],
            982: [
                0,
                0.43056,
                0.02778,
                0
            ],
            1009: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            1013: [
                0,
                0.43056,
                0,
                0.05556
            ],
            57649: [
                0,
                0.43056,
                0,
                0.02778
            ],
            57911: [
                0.19444,
                0.43056,
                0,
                0.08334
            ]
        },
        'SansSerif-Bold': {
            32: E,
            33: v,
            34: v,
            35: A,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: v,
            39: v,
            40: x,
            41: x,
            42: N,
            43: [
                0.11667,
                0.61667,
                0,
                0
            ],
            44: [
                0.10556,
                0.13056,
                0,
                0
            ],
            45: [
                0,
                0.45833,
                0,
                0
            ],
            46: [
                0,
                0.13056,
                0,
                0
            ],
            47: x,
            48: v,
            49: v,
            50: v,
            51: v,
            52: v,
            53: v,
            54: v,
            55: v,
            56: v,
            57: v,
            58: [
                0,
                0.45833,
                0,
                0
            ],
            59: [
                0.10556,
                0.45833,
                0,
                0
            ],
            61: [
                -0.09375,
                0.40625,
                0,
                0
            ],
            63: v,
            64: v,
            65: v,
            66: v,
            67: v,
            68: v,
            69: v,
            70: v,
            71: v,
            72: v,
            73: v,
            74: v,
            75: v,
            76: v,
            77: v,
            78: v,
            79: v,
            80: v,
            81: [
                0.10556,
                0.69444,
                0,
                0
            ],
            82: v,
            83: v,
            84: v,
            85: v,
            86: [
                0,
                0.69444,
                0.01528,
                0
            ],
            87: [
                0,
                0.69444,
                0.01528,
                0
            ],
            88: v,
            89: [
                0,
                0.69444,
                0.0275,
                0
            ],
            90: v,
            91: x,
            93: x,
            94: v,
            95: [
                0.35,
                0.10833,
                0.03056,
                0
            ],
            97: [
                0,
                0.45833,
                0,
                0
            ],
            98: v,
            99: [
                0,
                0.45833,
                0,
                0
            ],
            100: v,
            101: [
                0,
                0.45833,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07639,
                0
            ],
            103: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            104: v,
            105: v,
            106: A,
            107: v,
            108: v,
            109: [
                0,
                0.45833,
                0,
                0
            ],
            110: [
                0,
                0.45833,
                0,
                0
            ],
            111: [
                0,
                0.45833,
                0,
                0
            ],
            112: [
                0.19444,
                0.45833,
                0,
                0
            ],
            113: [
                0.19444,
                0.45833,
                0,
                0
            ],
            114: [
                0,
                0.45833,
                0.01528,
                0
            ],
            115: [
                0,
                0.45833,
                0,
                0
            ],
            116: [
                0,
                0.58929,
                0,
                0
            ],
            117: [
                0,
                0.45833,
                0,
                0
            ],
            118: [
                0,
                0.45833,
                0.01528,
                0
            ],
            119: [
                0,
                0.45833,
                0.01528,
                0
            ],
            120: [
                0,
                0.45833,
                0,
                0
            ],
            121: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            122: [
                0,
                0.45833,
                0,
                0
            ],
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: E,
            168: v,
            176: v,
            180: v,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.45833,
                0,
                0
            ],
            567: [
                0.19444,
                0.45833,
                0,
                0
            ],
            710: v,
            711: [
                0,
                0.63542,
                0,
                0
            ],
            713: [
                0,
                0.63778,
                0,
                0
            ],
            728: v,
            729: v,
            730: v,
            732: v,
            733: v,
            915: v,
            916: v,
            920: v,
            923: v,
            926: v,
            928: v,
            931: v,
            933: v,
            934: v,
            936: v,
            937: v,
            8211: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8212: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8216: v,
            8217: v,
            8220: v,
            8221: v
        },
        'SansSerif-Italic': {
            32: E,
            33: [
                0,
                0.69444,
                0.05733,
                0
            ],
            34: [
                0,
                0.69444,
                0.00316,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.05087,
                0
            ],
            36: [
                0.05556,
                0.75,
                0.11156,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.03126,
                0
            ],
            38: [
                0,
                0.69444,
                0.03058,
                0
            ],
            39: [
                0,
                0.69444,
                0.07816,
                0
            ],
            40: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            41: [
                0.25,
                0.75,
                0.02536,
                0
            ],
            42: [
                0,
                0.75,
                0.11775,
                0
            ],
            43: [
                0.08333,
                0.58333,
                0.02536,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.01946,
                0
            ],
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            48: [
                0,
                0.65556,
                0.11156,
                0
            ],
            49: [
                0,
                0.65556,
                0.11156,
                0
            ],
            50: [
                0,
                0.65556,
                0.11156,
                0
            ],
            51: [
                0,
                0.65556,
                0.11156,
                0
            ],
            52: [
                0,
                0.65556,
                0.11156,
                0
            ],
            53: [
                0,
                0.65556,
                0.11156,
                0
            ],
            54: [
                0,
                0.65556,
                0.11156,
                0
            ],
            55: [
                0,
                0.65556,
                0.11156,
                0
            ],
            56: [
                0,
                0.65556,
                0.11156,
                0
            ],
            57: [
                0,
                0.65556,
                0.11156,
                0
            ],
            58: [
                0,
                0.44444,
                0.02502,
                0
            ],
            59: [
                0.125,
                0.44444,
                0.02502,
                0
            ],
            61: [
                -0.13,
                0.37,
                0.05087,
                0
            ],
            63: [
                0,
                0.69444,
                0.11809,
                0
            ],
            64: [
                0,
                0.69444,
                0.07555,
                0
            ],
            65: v,
            66: [
                0,
                0.69444,
                0.08293,
                0
            ],
            67: [
                0,
                0.69444,
                0.11983,
                0
            ],
            68: [
                0,
                0.69444,
                0.07555,
                0
            ],
            69: [
                0,
                0.69444,
                0.11983,
                0
            ],
            70: [
                0,
                0.69444,
                0.13372,
                0
            ],
            71: [
                0,
                0.69444,
                0.11983,
                0
            ],
            72: [
                0,
                0.69444,
                0.08094,
                0
            ],
            73: [
                0,
                0.69444,
                0.13372,
                0
            ],
            74: [
                0,
                0.69444,
                0.08094,
                0
            ],
            75: [
                0,
                0.69444,
                0.11983,
                0
            ],
            76: v,
            77: [
                0,
                0.69444,
                0.08094,
                0
            ],
            78: [
                0,
                0.69444,
                0.08094,
                0
            ],
            79: [
                0,
                0.69444,
                0.07555,
                0
            ],
            80: [
                0,
                0.69444,
                0.08293,
                0
            ],
            81: [
                0.125,
                0.69444,
                0.07555,
                0
            ],
            82: [
                0,
                0.69444,
                0.08293,
                0
            ],
            83: [
                0,
                0.69444,
                0.09205,
                0
            ],
            84: [
                0,
                0.69444,
                0.13372,
                0
            ],
            85: [
                0,
                0.69444,
                0.08094,
                0
            ],
            86: [
                0,
                0.69444,
                0.1615,
                0
            ],
            87: [
                0,
                0.69444,
                0.1615,
                0
            ],
            88: [
                0,
                0.69444,
                0.13372,
                0
            ],
            89: [
                0,
                0.69444,
                0.17261,
                0
            ],
            90: [
                0,
                0.69444,
                0.11983,
                0
            ],
            91: [
                0.25,
                0.75,
                0.15942,
                0
            ],
            93: [
                0.25,
                0.75,
                0.08719,
                0
            ],
            94: [
                0,
                0.69444,
                0.0799,
                0
            ],
            95: [
                0.35,
                0.09444,
                0.08616,
                0
            ],
            97: [
                0,
                0.44444,
                0.00981,
                0
            ],
            98: [
                0,
                0.69444,
                0.03057,
                0
            ],
            99: [
                0,
                0.44444,
                0.08336,
                0
            ],
            100: [
                0,
                0.69444,
                0.09483,
                0
            ],
            101: [
                0,
                0.44444,
                0.06778,
                0
            ],
            102: [
                0,
                0.69444,
                0.21705,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            104: [
                0,
                0.69444,
                0.01778,
                0
            ],
            105: [
                0,
                0.67937,
                0.09718,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0.09162,
                0
            ],
            107: [
                0,
                0.69444,
                0.08336,
                0
            ],
            108: [
                0,
                0.69444,
                0.09483,
                0
            ],
            109: [
                0,
                0.44444,
                0.01778,
                0
            ],
            110: [
                0,
                0.44444,
                0.01778,
                0
            ],
            111: [
                0,
                0.44444,
                0.06613,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.0389,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            114: [
                0,
                0.44444,
                0.10836,
                0
            ],
            115: [
                0,
                0.44444,
                0.0778,
                0
            ],
            116: [
                0,
                0.57143,
                0.07225,
                0
            ],
            117: [
                0,
                0.44444,
                0.04169,
                0
            ],
            118: [
                0,
                0.44444,
                0.10836,
                0
            ],
            119: [
                0,
                0.44444,
                0.10836,
                0
            ],
            120: [
                0,
                0.44444,
                0.09169,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            122: [
                0,
                0.44444,
                0.08752,
                0
            ],
            126: [
                0.35,
                0.32659,
                0.08826,
                0
            ],
            160: E,
            168: [
                0,
                0.67937,
                0.06385,
                0
            ],
            176: v,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.44444,
                0.04169,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            710: [
                0,
                0.69444,
                0.0799,
                0
            ],
            711: [
                0,
                0.63194,
                0.08432,
                0
            ],
            713: [
                0,
                0.60889,
                0.08776,
                0
            ],
            714: [
                0,
                0.69444,
                0.09205,
                0
            ],
            715: v,
            728: [
                0,
                0.69444,
                0.09483,
                0
            ],
            729: [
                0,
                0.67937,
                0.07774,
                0
            ],
            730: v,
            732: [
                0,
                0.67659,
                0.08826,
                0
            ],
            733: [
                0,
                0.69444,
                0.09205,
                0
            ],
            915: [
                0,
                0.69444,
                0.13372,
                0
            ],
            916: v,
            920: [
                0,
                0.69444,
                0.07555,
                0
            ],
            923: v,
            926: [
                0,
                0.69444,
                0.12816,
                0
            ],
            928: [
                0,
                0.69444,
                0.08094,
                0
            ],
            931: [
                0,
                0.69444,
                0.11983,
                0
            ],
            933: [
                0,
                0.69444,
                0.09031,
                0
            ],
            934: [
                0,
                0.69444,
                0.04603,
                0
            ],
            936: [
                0,
                0.69444,
                0.09031,
                0
            ],
            937: [
                0,
                0.69444,
                0.08293,
                0
            ],
            8211: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8212: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8216: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8217: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8220: [
                0,
                0.69444,
                0.14205,
                0
            ],
            8221: [
                0,
                0.69444,
                0.00316,
                0
            ]
        },
        'SansSerif-Regular': {
            32: E,
            33: v,
            34: v,
            35: A,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: v,
            39: v,
            40: x,
            41: x,
            42: N,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: y,
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: x,
            48: [
                0,
                0.65556,
                0,
                0
            ],
            49: [
                0,
                0.65556,
                0,
                0
            ],
            50: [
                0,
                0.65556,
                0,
                0
            ],
            51: [
                0,
                0.65556,
                0,
                0
            ],
            52: [
                0,
                0.65556,
                0,
                0
            ],
            53: [
                0,
                0.65556,
                0,
                0
            ],
            54: [
                0,
                0.65556,
                0,
                0
            ],
            55: [
                0,
                0.65556,
                0,
                0
            ],
            56: [
                0,
                0.65556,
                0,
                0
            ],
            57: [
                0,
                0.65556,
                0,
                0
            ],
            58: y,
            59: [
                0.125,
                0.44444,
                0,
                0
            ],
            61: [
                -0.13,
                0.37,
                0,
                0
            ],
            63: v,
            64: v,
            65: v,
            66: v,
            67: v,
            68: v,
            69: v,
            70: v,
            71: v,
            72: v,
            73: v,
            74: v,
            75: v,
            76: v,
            77: v,
            78: v,
            79: v,
            80: v,
            81: [
                0.125,
                0.69444,
                0,
                0
            ],
            82: v,
            83: v,
            84: v,
            85: v,
            86: [
                0,
                0.69444,
                0.01389,
                0
            ],
            87: [
                0,
                0.69444,
                0.01389,
                0
            ],
            88: v,
            89: [
                0,
                0.69444,
                0.025,
                0
            ],
            90: v,
            91: x,
            93: x,
            94: v,
            95: [
                0.35,
                0.09444,
                0.02778,
                0
            ],
            97: y,
            98: v,
            99: y,
            100: v,
            101: y,
            102: [
                0,
                0.69444,
                0.06944,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            104: v,
            105: [
                0,
                0.67937,
                0,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0,
                0
            ],
            107: v,
            108: v,
            109: y,
            110: y,
            111: y,
            112: H,
            113: H,
            114: [
                0,
                0.44444,
                0.01389,
                0
            ],
            115: y,
            116: [
                0,
                0.57143,
                0,
                0
            ],
            117: y,
            118: [
                0,
                0.44444,
                0.01389,
                0
            ],
            119: [
                0,
                0.44444,
                0.01389,
                0
            ],
            120: y,
            121: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            122: y,
            126: [
                0.35,
                0.32659,
                0,
                0
            ],
            160: E,
            168: [
                0,
                0.67937,
                0,
                0
            ],
            176: v,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: y,
            567: H,
            710: v,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.60889,
                0,
                0
            ],
            714: v,
            715: v,
            728: v,
            729: [
                0,
                0.67937,
                0,
                0
            ],
            730: v,
            732: [
                0,
                0.67659,
                0,
                0
            ],
            733: v,
            915: v,
            916: v,
            920: v,
            923: v,
            926: v,
            928: v,
            931: v,
            933: v,
            934: v,
            936: v,
            937: v,
            8211: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8212: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8216: v,
            8217: v,
            8220: v,
            8221: v
        },
        'Script-Regular': {
            32: E,
            65: [
                0,
                0.7,
                0.22925,
                0
            ],
            66: [
                0,
                0.7,
                0.04087,
                0
            ],
            67: [
                0,
                0.7,
                0.1689,
                0
            ],
            68: [
                0,
                0.7,
                0.09371,
                0
            ],
            69: [
                0,
                0.7,
                0.18583,
                0
            ],
            70: [
                0,
                0.7,
                0.13634,
                0
            ],
            71: [
                0,
                0.7,
                0.17322,
                0
            ],
            72: [
                0,
                0.7,
                0.29694,
                0
            ],
            73: [
                0,
                0.7,
                0.19189,
                0
            ],
            74: [
                0.27778,
                0.7,
                0.19189,
                0
            ],
            75: [
                0,
                0.7,
                0.31259,
                0
            ],
            76: [
                0,
                0.7,
                0.19189,
                0
            ],
            77: [
                0,
                0.7,
                0.15981,
                0
            ],
            78: [
                0,
                0.7,
                0.3525,
                0
            ],
            79: [
                0,
                0.7,
                0.08078,
                0
            ],
            80: [
                0,
                0.7,
                0.08078,
                0
            ],
            81: [
                0,
                0.7,
                0.03305,
                0
            ],
            82: [
                0,
                0.7,
                0.06259,
                0
            ],
            83: [
                0,
                0.7,
                0.19189,
                0
            ],
            84: [
                0,
                0.7,
                0.29087,
                0
            ],
            85: [
                0,
                0.7,
                0.25815,
                0
            ],
            86: [
                0,
                0.7,
                0.27523,
                0
            ],
            87: [
                0,
                0.7,
                0.27523,
                0
            ],
            88: [
                0,
                0.7,
                0.26006,
                0
            ],
            89: [
                0,
                0.7,
                0.2939,
                0
            ],
            90: [
                0,
                0.7,
                0.24037,
                0
            ],
            160: E
        },
        'Size1-Regular': {
            32: E,
            40: K,
            41: K,
            47: K,
            91: K,
            92: K,
            93: K,
            123: K,
            125: K,
            160: E,
            710: [
                0,
                0.72222,
                0,
                0
            ],
            732: [
                0,
                0.72222,
                0,
                0
            ],
            770: [
                0,
                0.72222,
                0,
                0
            ],
            771: [
                0,
                0.72222,
                0,
                0
            ],
            8214: [
                -0.00099,
                0.601,
                0,
                0
            ],
            8593: [
                0.00001,
                0.6,
                0,
                0
            ],
            8595: [
                0.00001,
                0.6,
                0,
                0
            ],
            8657: [
                0.00001,
                0.6,
                0,
                0
            ],
            8659: [
                0.00001,
                0.6,
                0,
                0
            ],
            8719: P,
            8720: P,
            8721: P,
            8730: K,
            8739: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8741: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8747: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8748: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8749: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8750: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8896: P,
            8897: P,
            8898: P,
            8899: P,
            8968: K,
            8969: K,
            8970: K,
            8971: K,
            9168: [
                -0.00099,
                0.601,
                0,
                0
            ],
            10216: K,
            10217: K,
            10752: P,
            10753: P,
            10754: P,
            10756: P,
            10758: P
        },
        'Size2-Regular': {
            32: E,
            40: I,
            41: I,
            47: I,
            91: I,
            92: I,
            93: I,
            123: I,
            125: I,
            160: E,
            710: N,
            732: N,
            770: N,
            771: N,
            8719: Q,
            8720: Q,
            8721: Q,
            8730: I,
            8747: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8748: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8749: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8750: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8896: Q,
            8897: Q,
            8898: Q,
            8899: Q,
            8968: I,
            8969: I,
            8970: I,
            8971: I,
            10216: I,
            10217: I,
            10752: Q,
            10753: Q,
            10754: Q,
            10756: Q,
            10758: Q
        },
        'Size3-Regular': {
            32: E,
            40: M,
            41: M,
            47: M,
            91: M,
            92: M,
            93: M,
            123: M,
            125: M,
            160: E,
            710: N,
            732: N,
            770: N,
            771: N,
            8730: M,
            8968: M,
            8969: M,
            8970: M,
            8971: M,
            10216: M,
            10217: M
        },
        'Size4-Regular': {
            32: E,
            40: L,
            41: L,
            47: L,
            91: L,
            92: L,
            93: L,
            123: L,
            125: L,
            160: E,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.825,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.825,
                0,
                0
            ],
            8730: L,
            8968: L,
            8969: L,
            8970: L,
            8971: L,
            9115: [
                0.64502,
                1.155,
                0,
                0
            ],
            9116: [
                0.00001,
                0.6,
                0,
                0
            ],
            9117: [
                0.64502,
                1.155,
                0,
                0
            ],
            9118: [
                0.64502,
                1.155,
                0,
                0
            ],
            9119: [
                0.00001,
                0.6,
                0,
                0
            ],
            9120: [
                0.64502,
                1.155,
                0,
                0
            ],
            9121: [
                0.64502,
                1.155,
                0,
                0
            ],
            9122: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9123: [
                0.64502,
                1.155,
                0,
                0
            ],
            9124: [
                0.64502,
                1.155,
                0,
                0
            ],
            9125: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9126: [
                0.64502,
                1.155,
                0,
                0
            ],
            9127: [
                0.00001,
                0.9,
                0,
                0
            ],
            9128: I,
            9129: [
                0.90001,
                0,
                0,
                0
            ],
            9130: [
                0,
                0.3,
                0,
                0
            ],
            9131: [
                0.00001,
                0.9,
                0,
                0
            ],
            9132: I,
            9133: [
                0.90001,
                0,
                0,
                0
            ],
            9143: [
                0.88502,
                0.915,
                0,
                0
            ],
            10216: L,
            10217: L,
            57344: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57345: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57680: [
                0,
                0.12,
                0,
                0
            ],
            57681: [
                0,
                0.12,
                0,
                0
            ],
            57682: [
                0,
                0.12,
                0,
                0
            ],
            57683: [
                0,
                0.12,
                0,
                0
            ]
        },
        'Typewriter-Regular': {
            32: E,
            33: w,
            34: w,
            35: w,
            36: [
                0.08333,
                0.69444,
                0,
                0
            ],
            37: [
                0.08333,
                0.69444,
                0,
                0
            ],
            38: w,
            39: w,
            40: [
                0.08333,
                0.69444,
                0,
                0
            ],
            41: [
                0.08333,
                0.69444,
                0,
                0
            ],
            42: [
                0,
                0.52083,
                0,
                0
            ],
            43: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            44: [
                0.13889,
                0.125,
                0,
                0
            ],
            45: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            46: [
                0,
                0.125,
                0,
                0
            ],
            47: [
                0.08333,
                0.69444,
                0,
                0
            ],
            48: w,
            49: w,
            50: w,
            51: w,
            52: w,
            53: w,
            54: w,
            55: w,
            56: w,
            57: w,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.13889,
                0.43056,
                0,
                0
            ],
            60: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            61: [
                -0.19549,
                0.41562,
                0,
                0
            ],
            62: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            63: w,
            64: w,
            65: w,
            66: w,
            67: w,
            68: w,
            69: w,
            70: w,
            71: w,
            72: w,
            73: w,
            74: w,
            75: w,
            76: w,
            77: w,
            78: w,
            79: w,
            80: w,
            81: [
                0.13889,
                0.61111,
                0,
                0
            ],
            82: w,
            83: w,
            84: w,
            85: w,
            86: w,
            87: w,
            88: w,
            89: w,
            90: w,
            91: [
                0.08333,
                0.69444,
                0,
                0
            ],
            92: [
                0.08333,
                0.69444,
                0,
                0
            ],
            93: [
                0.08333,
                0.69444,
                0,
                0
            ],
            94: w,
            95: [
                0.09514,
                0,
                0,
                0
            ],
            96: w,
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: w,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: w,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: w,
            103: [
                0.22222,
                0.43056,
                0,
                0
            ],
            104: w,
            105: w,
            106: [
                0.22222,
                0.61111,
                0,
                0
            ],
            107: w,
            108: w,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.22222,
                0.43056,
                0,
                0
            ],
            113: [
                0.22222,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.55358,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0,
                0
            ],
            119: [
                0,
                0.43056,
                0,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.22222,
                0.43056,
                0,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: [
                0.08333,
                0.69444,
                0,
                0
            ],
            124: [
                0.08333,
                0.69444,
                0,
                0
            ],
            125: [
                0.08333,
                0.69444,
                0,
                0
            ],
            126: w,
            127: w,
            160: E,
            176: w,
            184: [
                0.19445,
                0,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.22222,
                0.43056,
                0,
                0
            ],
            711: [
                0,
                0.56597,
                0,
                0
            ],
            713: [
                0,
                0.56555,
                0,
                0
            ],
            714: w,
            715: w,
            728: w,
            730: w,
            770: w,
            771: w,
            776: w,
            915: w,
            916: w,
            920: w,
            923: w,
            926: w,
            928: w,
            931: w,
            933: w,
            934: w,
            936: w,
            937: w,
            8216: w,
            8217: w,
            8242: w,
            9251: [
                0.11111,
                0.21944,
                0,
                0
            ]
        }
    };
    const U = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/,
        V = {
            slant: [
                0.25,
                0.25,
                0.25
            ],
            space: [
                0,
                0,
                0
            ],
            stretch: [
                0,
                0,
                0
            ],
            shrink: [
                0,
                0,
                0
            ],
            xHeight: [
                0.431,
                0.431,
                0.431
            ],
            quad: [
                1,
                1.171,
                1.472
            ],
            extraSpace: [
                0,
                0,
                0
            ],
            num1: [
                0.677,
                0.732,
                0.925
            ],
            num2: [
                0.394,
                0.384,
                0.387
            ],
            num3: [
                0.444,
                0.471,
                0.504
            ],
            denom1: [
                0.686,
                0.752,
                1.025
            ],
            denom2: [
                0.345,
                0.344,
                0.532
            ],
            sup1: [
                0.413,
                0.503,
                0.504
            ],
            sup2: [
                0.363,
                0.431,
                0.404
            ],
            sup3: [
                0.289,
                0.286,
                0.294
            ],
            sub1: [
                0.15,
                0.143,
                0.2
            ],
            sub2: [
                0.247,
                0.286,
                0.4
            ],
            supDrop: [
                0.386,
                0.353,
                0.494
            ],
            subDrop: [
                0.05,
                0.071,
                0.1
            ],
            delim1: [
                2.39,
                1.7,
                1.98
            ],
            delim2: [
                1.01,
                1.157,
                1.42
            ],
            axisHeight: [
                0.25,
                0.25,
                0.25
            ],
            defaultRuleThickness: [
                0.04,
                0.049,
                0.049
            ],
            bigOpSpacing1: [
                0.111,
                0.111,
                0.111
            ],
            bigOpSpacing2: [
                0.166,
                0.166,
                0.166
            ],
            bigOpSpacing3: [
                0.2,
                0.2,
                0.2
            ],
            bigOpSpacing4: [
                0.6,
                0.611,
                0.611
            ],
            bigOpSpacing5: [
                0.1,
                0.143,
                0.143
            ],
            sqrtRuleThickness: [
                0.04,
                0.04,
                0.04
            ]
        },
        W = [
            0,
            0.5,
            0.7,
            0.8,
            0.9,
            1,
            1.2,
            1.44,
            1.728,
            2.074,
            2.488
        ],
        X = {
            '\xA0': ' ',
            '\u200B': ' ',
            'Å': 'A',
            'Ç': 'C',
            'Ð': 'D',
            'Þ': 'o',
            'å': 'a',
            'ç': 'c',
            'ð': 'd',
            'þ': 'o',
            'А': 'A',
            'Б': 'B',
            'В': 'B',
            'Г': 'F',
            'Д': 'A',
            'Е': 'E',
            'Ж': 'K',
            'З': '3',
            'И': 'N',
            'Й': 'N',
            'К': 'K',
            'Л': 'N',
            'М': 'M',
            'Н': 'H',
            'О': 'O',
            'П': 'N',
            'Р': 'P',
            'С': 'C',
            'Т': 'T',
            'У': 'y',
            'Ф': 'O',
            'Х': 'X',
            'Ц': 'U',
            'Ч': 'h',
            'Ш': 'W',
            'Щ': 'W',
            'Ъ': 'B',
            'Ы': 'X',
            'Ь': 'B',
            'Э': '3',
            'Ю': 'X',
            'Я': 'R',
            'а': 'a',
            'б': 'b',
            'в': 'a',
            'г': 'r',
            'д': 'y',
            'е': 'e',
            'ж': 'm',
            'з': 'e',
            'и': 'n',
            'й': 'n',
            'к': 'n',
            'л': 'n',
            'м': 'm',
            'н': 'n',
            'о': 'o',
            'п': 'n',
            'р': 'p',
            'с': 'c',
            'т': 'o',
            'у': 'y',
            'ф': 'b',
            'х': 'x',
            'ц': 'n',
            'ч': 'n',
            'ш': 'w',
            'щ': 'w',
            'ъ': 'a',
            'ы': 'm',
            'ь': 'a',
            'э': 'e',
            'ю': 'm',
            'я': 'r'
        };

    function Y(Z, $) {
        void 0 === Z && (Z = 77);
        const ab = T[$][Z];
        if (ab)
            return {
                defaultMetrics: !1,
                depth: ab[0],
                height: ab[1],
                italic: ab[2],
                skew: ab[3]
            };
        if (11034 === Z)
            return {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.8,
                italic: 0,
                skew: 0
            };
        const bb = String.fromCodePoint(Z);
        if (bb in X)
            Z = X[bb].codePointAt(0);
        else if (U.test(bb))
            return Z = 77, {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.9,
                italic: 0,
                skew: 0
            };
        return {
            defaultMetrics: !0,
            depth: 0.2,
            height: 0.7,
            italic: 0,
            skew: 0
        };
    }
    class Y {
        getFontSize(Z) {
            return Math.max(1, Z + this.sizeDelta);
        }
        get sup() {
            return _Z[[
                0,
                1,
                0,
                1,
                2,
                3,
                2,
                3
            ][this.id]];
        }
        get sub() {
            return _Z[[
                0,
                0,
                0,
                0,
                2,
                2,
                2,
                2
            ][this.id]];
        }
        get fracNum() {
            return _Z[[
                0,
                1,
                0,
                1,
                2,
                3,
                4,
                5
            ][this.id]];
        }
        get fracDen() {
            return _Z[[
                0,
                0,
                0,
                0,
                2,
                2,
                4,
                4
            ][this.id]];
        }
        get cramp() {
            return _Z[[
                0,
                0,
                2,
                2,
                4,
                4,
                6,
                6
            ][this.id]];
        }
        get isTight() {
            return this.sizeDelta < 0;
        }
        constructor(Z, $, ab) {
            this.id = Z, this.sizeDelta = $, this.cramped = ab;
            const bb = {
                '-4': 2,
                '-3': 1,
                0: 0
            } [$];
            this.metrics = Object.keys(V).reduce((Z, $) => ({
                ...Z,
                [$]: V[$][bb]
            }), {});
        }
    }
    const _Z = {
        7: new Y(7, 0, !1),
        6: new Y(6, 0, !0),
        5: new Y(5, 0, !1),
        4: new Y(4, 0, !0),
        3: new Y(3, -3, !1),
        2: new Y(2, -3, !0),
        1: new Y(1, -4, !1),
        0: new Y(0, -4, !0)
    };

    function $(ab, bb) {
        return null === ab ? 0 : function(cb, db) {
            var eb;
            if (!cb)
                return 0;
            const fb = {
                pt: 1,
                mm: 7227 / 2540,
                cm: 7227 / 254,
                ex: 35271 / 8192,
                px: 3 / 4,
                em: 10,
                bp: 1.00375,
                dd: 1238 / 1157,
                pc: 12,
                in: 72.27,
                mu: 10 / 18
            } [null !== (eb = cb.unit) && void 0 !== eb ? eb : 'pt'];
            if (Number.isFinite(db)) {
                const gb = 10 ** db;
                return Math.round(cb.dimension / 10 * fb * gb) / gb;
            }
            return cb.dimension * fb;
        }(ab, bb) / 10;
    }

    function $(ab) {
        var bb;
        return `${ ab.dimension }${ null !== (bb = ab.unit) && void 0 !== bb ? bb : 'pt' }`;
    }
    _Z.displaystyle = _Z[7], _Z.textstyle = _Z[5], _Z.scriptstyle = _Z[3], _Z.scriptscriptstyle = _Z[1];
    class $ {
        get mathstyle() {
            let ab = this._mathstyle,
                bb = this.parent;
            for (; !ab;)
                ab = bb._mathstyle, bb = bb.parent;
            return ab;
        }
        getRegister(ab) {
            var bb;
            return (null === (bb = this.registers) || void 0 === bb ? void 0 : bb[ab]) ? this.registers[ab] : this.parent ? this.parent.getRegister(ab) : void 0;
        }
        getRegisterAsGlue(ab) {
            var bb;
            if (null === (bb = this.registers) || void 0 === bb ? void 0 : bb[ab]) {
                const cb = this.registers[ab];
                return 'object' == typeof cb && 'glue' in cb ? cb : 'object' == typeof cb && 'dimension' in cb ? {
                    glue: {
                        dimension: cb.dimension
                    }
                } : 'number' == typeof cb ? {
                    glue: {
                        dimension: cb
                    }
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsGlue(ab);
        }
        getRegisterAsEm(ab) {
            return Le(this.getRegisterAsDimension(ab));
        }
        getRegisterAsDimension(ab) {
            var bb;
            if (null === (bb = this.registers) || void 0 === bb ? void 0 : bb[ab]) {
                const cb = this.registers[ab];
                return 'object' == typeof cb && 'glue' in cb ? cb.glue : 'object' == typeof cb && 'dimension' in cb ? cb : 'number' == typeof cb ? {
                    dimension: cb
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsDimension(ab);
        }
        setRegister(ab, bb) {
            void 0 !== bb ? this.registers[ab] = bb : delete this.registers[ab];
        }
        setGlobalRegister(ab, bb) {
            let cb = this;
            for (; cb.parent;)
                cb.setRegister(ab, void 0), cb = cb.parent;
            cb.setRegister(ab, bb);
        }
        get size() {
            let ab = this._size,
                bb = this.parent;
            for (; !ab;)
                ab = bb._size, bb = bb.parent;
            return ab;
        }
        makeID() {
            if (!this.atomIdsSettings)
                return;
            if (this.atomIdsSettings.overrideID)
                return this.atomIdsSettings.overrideID;
            if ('number' != typeof this.atomIdsSettings.seed)
                return Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
            const ab = this.atomIdsSettings.seed.toString(36);
            return this.atomIdsSettings.seed += 1, ab;
        }
        scale(ab) {
            return ab * this.effectiveFontSize;
        }
        get scalingFactor() {
            return this.parent ? this.effectiveFontSize / this.parent.effectiveFontSize : 1;
        }
        get isDisplayStyle() {
            return 7 === this.mathstyle.id || 6 === this.mathstyle.id;
        }
        get isCramped() {
            return this.mathstyle.cramped;
        }
        get isTight() {
            return this.mathstyle.isTight;
        }
        get effectiveFontSize() {
            return W[Math.max(1, this.size + this.mathstyle.sizeDelta)];
        }
        get computedColor() {
            let ab = this.color,
                bb = this.parent;
            return !ab && bb && (ab = bb.color, bb = bb.parent), null != ab ? ab : '';
        }
        get computedBackgroundColor() {
            let ab = this.backgroundColor,
                bb = this.parent;
            return !ab && bb && (ab = bb.backgroundColor, bb = bb.parent), null != ab ? ab : '';
        }
        get metrics() {
            return this.mathstyle.metrics;
        }
        constructor(ab, bb, cb) {
            var db, eb, fb, gb, hb, ib;
            ab instanceof $ && (this.parent = ab), ab instanceof $ || (this.registers = null !== (db = ab.registers) && void 0 !== db ? db : {}), this.isPhantom = null !== (gb = null !== (eb = null == bb ? void 0 : bb.isPhantom) && void 0 !== eb ? eb : null === (fb = this.parent) || void 0 === fb ? void 0 : fb.isPhantom) && void 0 !== gb && gb;
            const _jb = {
                ...ab
            };
            let kb;
            if (bb && (bb.letterShapeStyle && 'auto' !== bb.letterShapeStyle && (_jb.letterShapeStyle = bb.letterShapeStyle), bb.color && 'none' !== bb.color && (_jb.color = bb.color), bb.backgroundColor && 'none' !== bb.backgroundColor && (_jb.backgroundColor = bb.backgroundColor), bb.fontSize && 'auto' !== bb.fontSize && bb.fontSize !== (null === (hb = this.parent) || void 0 === hb ? void 0 : hb._size) && (this._size = bb.fontSize)), this.letterShapeStyle = null !== (ib = _jb.letterShapeStyle) && void 0 !== ib ? ib : 'tex', this.color = _jb.color, this.backgroundColor = _jb.backgroundColor, 'string' == typeof cb) {
                if (ab instanceof $)
                    switch (cb) {
                        case 'cramp':
                            kb = ab.mathstyle.cramp;
                            break;
                        case 'superscript':
                            kb = ab.mathstyle.sup;
                            break;
                        case 'subscript':
                            kb = ab.mathstyle.sub;
                            break;
                        case 'numerator':
                            kb = ab.mathstyle.fracNum;
                            break;
                        case 'denominator':
                            kb = ab.mathstyle.fracDen;
                    }
                switch (cb) {
                    case 'textstyle':
                        kb = _Z.textstyle;
                        break;
                    case 'displaystyle':
                        kb = _Z.displaystyle;
                        break;
                    case 'scriptstyle':
                        kb = _Z.scriptstyle;
                        break;
                    case 'scriptscriptstyle':
                        kb = _Z.scriptscriptstyle;
                }
            }
            this._mathstyle = kb, this.atomIdsSettings = ab.atomIdsSettings, this.renderPlaceholder = _jb.renderPlaceholder;
        }
    }
    const ab = {
            overrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            overleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            underrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            underleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            xrightarrow: [
                ['rightarrow'],
                1.469,
                522,
                'xMaxYMin'
            ],
            xleftarrow: [
                ['leftarrow'],
                1.469,
                522,
                'xMinYMin'
            ],
            Overrightarrow: [
                ['doublerightarrow'],
                0.888,
                560,
                'xMaxYMin'
            ],
            xRightarrow: [
                ['doublerightarrow'],
                1.526,
                560,
                'xMaxYMin'
            ],
            xLeftarrow: [
                ['doubleleftarrow'],
                1.526,
                560,
                'xMinYMin'
            ],
            overleftharpoon: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoonup: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoondown: [
                ['leftharpoondown'],
                0.888,
                522,
                'xMinYMin'
            ],
            overrightharpoon: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoonup: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoondown: [
                ['rightharpoondown'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xlongequal: [
                ['longequal'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadleftarrow: [
                ['twoheadleftarrow'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadrightarrow: [
                ['twoheadrightarrow'],
                0.888,
                334,
                'xMaxYMin'
            ],
            overleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            overbrace: [
                [
                    'leftbrace',
                    'midbrace',
                    'rightbrace'
                ],
                1.6,
                548
            ],
            underbrace: [
                [
                    'leftbraceunder',
                    'midbraceunder',
                    'rightbraceunder'
                ],
                1.6,
                548
            ],
            underleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            xleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                1.75,
                522
            ],
            xLeftrightarrow: [
                [
                    'doubleleftarrow',
                    'doublerightarrow'
                ],
                1.75,
                560
            ],
            xrightleftharpoons: [
                [
                    'leftharpoondownplus',
                    'rightharpoonplus'
                ],
                1.75,
                716
            ],
            xleftrightharpoons: [
                [
                    'leftharpoonplus',
                    'rightharpoondownplus'
                ],
                1.75,
                716
            ],
            xhookleftarrow: [
                [
                    'leftarrow',
                    'righthook'
                ],
                1.08,
                522
            ],
            xhookrightarrow: [
                [
                    'lefthook',
                    'rightarrow'
                ],
                1.08,
                522
            ],
            overlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            underlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            overgroup: [
                [
                    'leftgroup',
                    'rightgroup'
                ],
                0.888,
                342
            ],
            undergroup: [
                [
                    'leftgroupunder',
                    'rightgroupunder'
                ],
                0.888,
                342
            ],
            xmapsto: [
                [
                    'leftmapsto',
                    'rightarrow'
                ],
                1.5,
                522
            ],
            xtofrom: [
                [
                    'leftToFrom',
                    'rightToFrom'
                ],
                1.75,
                528
            ],
            xrightleftarrows: [
                [
                    'baraboveleftarrow',
                    'rightarrowabovebar'
                ],
                1.75,
                901
            ],
            xrightequilibrium: [
                [
                    'baraboveshortleftharpoon',
                    'rightharpoonaboveshortbar'
                ],
                1.75,
                716
            ],
            xleftequilibrium: [
                [
                    'shortbaraboveleftharpoon',
                    'shortrightharpoonabovebar'
                ],
                1.75,
                716
            ]
        },
        bb = {
            widehat1: [
                1062,
                239,
                0.24
            ],
            widehat2: [
                2364,
                300,
                0.3
            ],
            widehat3: [
                2364,
                360,
                0.36
            ],
            widehat4: [
                2364,
                420,
                0.42
            ],
            widecheck1: [
                1062,
                239,
                0.24
            ],
            widecheck2: [
                2364,
                300,
                0.3
            ],
            widecheck3: [
                2364,
                360,
                0.36
            ],
            widecheck4: [
                2364,
                420,
                0.42
            ],
            widetilde1: [
                600,
                260,
                0.26
            ],
            widetilde2: [
                1033,
                286,
                0.286
            ],
            widetilde3: [
                2339,
                306,
                0.306
            ],
            widetilde4: [
                2340,
                312,
                0.34
            ],
            overarc: [
                1061,
                159,
                0.3
            ],
            underarc: [
                1061,
                159,
                0.3
            ]
        },
        cb = {
            doubleleftarrow: 'M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z',
            doublerightarrow: 'M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z',
            leftarrow: 'M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z',
            leftbrace: 'M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z',
            leftbraceunder: 'M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z',
            overarc: 'M529 0c179 0 524 115 524 115 5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2s-338-93-512-92c-174 0-513 92-513 92h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13 0 0 342-115 520-115z',
            underarc: 'm 529 160\n  c -179 0 -524 -115 -524 -115\n  c -5 -1 -9 -5 -9 -10\n  c 0 -1 1 -2 1 -3\n  l 4 -22\n  c 1 -5 5 -9 11 -9\n  h 2\n  s 338 93 512 92\n  c 174 0 513 -92 513 -92\n  h 2\n  c 5 0 9 4 11 9\n  l 5 22\n  c 1 6 -2 12 -8 13\n  c 0 0 -342 115 -520 115\n  z\n  ',
            leftgroup: 'M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z',
            leftgroupunder: 'M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z',
            leftharpoon: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z',
            leftharpoonplus: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z',
            leftharpoondown: 'M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z',
            leftharpoondownplus: 'M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z',
            lefthook: 'M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z',
            leftlinesegment: 'M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z',
            leftmapsto: 'M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z',
            leftToFrom: 'M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z',
            longequal: 'M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z',
            midbrace: 'M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z',
            midbraceunder: 'M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z',
            oiintSize1: 'M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z',
            oiintSize2: 'M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z',
            oiiintSize1: 'M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z',
            oiiintSize2: 'M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z',
            rightarrow: 'M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z',
            rightbrace: 'M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z',
            rightbraceunder: 'M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z',
            rightgroup: 'M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z',
            rightgroupunder: 'M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z',
            rightharpoon: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z',
            rightharpoonplus: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z',
            rightharpoondown: 'M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z',
            rightharpoondownplus: 'M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z',
            righthook: 'M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z',
            rightlinesegment: 'M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z',
            rightToFrom: 'M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z',
            twoheadleftarrow: 'M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z',
            twoheadrightarrow: 'M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z',
            widetilde1: 'M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z',
            widetilde2: 'M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z',
            widetilde3: 'M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z',
            widetilde4: 'M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z',
            vec: 'M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z',
            widehat1: 'M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z',
            widehat2: 'M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat3: 'M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat4: 'M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widecheck1: 'M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z',
            widecheck2: 'M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck3: 'M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck4: 'M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            baraboveleftarrow: 'M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z',
            rightarrowabovebar: 'M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z',
            baraboveshortleftharpoon: 'M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z',
            rightharpoonaboveshortbar: 'M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z',
            shortbaraboveleftharpoon: 'M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z',
            shortrightharpoonabovebar: 'M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z'
        };
    class db {
        static createAtom(eb, fb, gb, hb) {
            return db._registry[eb].createAtom(fb, gb, hb);
        }
        static serialize(eb, fb) {
            return db._registry[eb[0].mode].serialize(eb, fb);
        }
        static applyStyle(eb, fb, gb) {
            return db._registry[eb].applyStyle(fb, gb);
        }
        constructor(eb) {
            db._registry[eb] = this;
        }
    }

    function eb(fb, gb) {
        const hb = [];
        let ib, jb = [];
        for (const kb of fb)
            if ('first' !== kb.type && kb.style) {
                let lb;
                'variant' === gb ? (lb = kb.style.variant, kb.style.variantStyle && 'up' !== kb.style.variantStyle && (lb += '-' + kb.style.variantStyle)) : 'cssClass' === gb ? 'group' === kb.type && (lb = kb.customClass) : lb = kb.style[gb], lb === ib ? jb.push(kb) : (jb.length > 0 && hb.push(jb), jb = [kb], ib = lb);
            }
        return jb.length > 0 && hb.push(jb), hb;
    }
    db._registry = {};
    const eb = [
            '',
            'chem',
            'mord',
            'mbin',
            'mop',
            'mrel',
            'mopen',
            'mclose',
            'mpunct',
            'minner',
            'spacing',
            'first',
            'latex',
            'composition',
            'error',
            'placeholder',
            'supsub',
            'none',
            'mathfield'
        ],
        fb = {
            mord: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mop: {
                mord: 3,
                mop: 3,
                rel: 5,
                minner: 3
            },
            mbin: {
                mord: 4,
                mop: 4,
                mopen: 4,
                minner: 4
            },
            mrel: {
                mord: 5,
                mop: 5,
                mopen: 5,
                minner: 5
            },
            mclose: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mpunct: {
                mord: 3,
                mop: 3,
                mrel: 3,
                mopen: 3,
                mpunct: 3,
                minner: 3
            },
            minner: {
                mord: 3,
                mop: 3,
                mbin: 4,
                mrel: 5,
                mopen: 3,
                mpunct: 3,
                minner: 3
            }
        },
        gb = {
            mord: {
                mop: 3
            },
            mop: {
                mord: 3,
                mop: 3
            },
            mclose: {
                mop: 3
            },
            minner: {
                mop: 3
            }
        };

    function hb(ib, jb) {
        if ('string' == typeof ib)
            return ib;
        if ('number' == typeof ib) {
            const kb = Math.ceil(100 * ib) / 100;
            return 0 === kb ? '0' : kb.toString() + (null != jb ? jb : '');
        }
        return '';
    }
    class hb {
        set atomID(ib) {
            void 0 !== ib && 0 !== ib.length && (this.attributes || (this.attributes = {}), this.attributes['data-atom-id'] = ib);
        }
        selected(ib) {
            if (this.isSelected !== ib && (this.isSelected = ib, this.children))
                for (const jb of this.children)
                    jb.selected(ib);
        }
        setStyle(ib, jb, kb) {
            if (void 0 === jb)
                return;
            const lb = Oe(jb, kb);
            lb.length > 0 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties[ib] = lb);
        }
        setTop(ib) {
            Number.isFinite(ib) && Math.abs(ib) > 0.01 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties.top = Oe(ib, 'em'), this.height -= ib, this.depth += ib);
        }
        get left() {
            var ib;
            return (null === (ib = this.cssProperties) || void 0 === ib ? void 0 : ib['margin-left']) ? Number.parseFloat(this.cssProperties['margin-left']) : 0;
        }
        set left(ib) {
            Number.isFinite(ib) && (0 === ib ? this.cssProperties && delete this.cssProperties['margin-left'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-left'] = Oe(ib, 'em')));
        }
        set right(ib) {
            Number.isFinite(ib) && (0 === ib ? this.cssProperties && delete this.cssProperties['margin-right'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-right'] = Oe(ib, 'em')));
        }
        set width(ib) {
            Number.isFinite(ib) && (0 === ib ? this.cssProperties && delete this.cssProperties.width : (this.cssProperties || (this.cssProperties = {}), this.cssProperties.width = Oe(ib, 'em')));
        }
        wrap(ib, jb) {
            const kb = ib.parent;
            if (!kb)
                return this;
            ib.isPhantom && this.setStyle('opacity', 0);
            let lb = ib.computedColor;
            lb === kb.computedColor && (lb = ''), this.setStyle('color', lb);
            const mb = ib.effectiveFontSize === kb.effectiveFontSize ? void 0 : ib.effectiveFontSize;
            let nb, ob = ib.computedBackgroundColor;
            if (this.isSelected && (ob = _Sb(ob)), ob === kb.computedBackgroundColor && (ob = ''), !(mb || ob || jb && (jb.classes || jb.type)))
                return this;
            ob ? (nb = _ib(this, jb), nb.selected(this.isSelected), nb.setStyle('background-color', ob), nb.setStyle('display', 'inline-block')) : nb = new hb(this, jb);
            const pb = ib.scalingFactor;
            return 1 !== pb && (nb.setStyle('font-size', 100 * pb, '%'), nb.height *= pb, nb.depth *= pb, nb.italic *= pb, nb.skew *= pb), nb;
        }
        wrapSelect(ib) {
            if (!this.isSelected)
                return this;
            if (!ib.parent)
                return this;
            const jb = _Sb(ib.computedBackgroundColor),
                kb = _ib(this);
            return kb.selected(!0), kb.setStyle('background-color', jb), kb.setStyle('display', 'inline-block'), kb;
        }
        toMarkup() {
            var ib, jb, kb;
            let lb = null !== (ib = this.value) && void 0 !== ib ? ib : '';
            if (this.children)
                for (const mb of this.children)
                    lb += mb.toMarkup();
            const mb = this.classes.split(' ');
            mb.push(null !== (jb = {
                latex: 'ML__latex',
                placeholder: 'ML__placeholder',
                error: 'ML__error'
            } [this.type]) && void 0 !== jb ? jb : ''), 'latex' === this.caret && mb.push('ML__latex-caret');
            const nb = 1 === mb.length ? mb[0] : mb.filter((ib, jb, kb) => ib.length > 0 && kb.indexOf(ib) === jb).join(' ');
            let ob = '';
            if (lb.length > 0 && '\u200B' !== lb || nb.length > 0 || this.cssId || this.htmlData || this.htmlStyle || this.attributes || this.cssProperties || this.svgBody || this.svgOverlay) {
                let pb = '';
                if (this.cssId && (pb += ` id=${ this.cssId.replace(/ /g, '-') } `), this.htmlData) {
                    const qb = this.htmlData.split(',');
                    for (const rb of qb) {
                        const sb = rb.match(/([^=]+)=(.+$)/);
                        if (sb) {
                            const tb = sb[1].trim().replace(/ /g, '-');
                            tb && (pb += ` data-${ tb }=${ sb[2] } `);
                        } else {
                            const tb = rb.trim().replace(/ /g, '-');
                            tb && (pb += ` data-${ tb } `);
                        }
                    }
                }
                if (this.htmlStyle) {
                    const qb = this.htmlStyle.split(';');
                    let rb = '';
                    for (const sb of qb) {
                        const tb = sb.match(/([^=]+):(.+$)/);
                        if (tb) {
                            const ub = tb[1].trim().replace(/ /g, '-');
                            ub && (rb += `${ ub }:${ tb[2] };`);
                        }
                    }
                    rb && (sb += ` style="${ rb }"`);
                }
                if (this.attributes && (pb += ' ' + Object.keys(this.attributes).map(pb => `${ pb }="${ this.attributes[pb] }"`).join(' ')), nb.length > 0 && (pb += ` class="${ nb }"`), this.cssProperties) {
                    const qb = Object.keys(this.cssProperties).map(pb => `${ pb }:${ this.cssProperties[pb] }`).join(';');
                    qb.length > 0 && (pb += ` style="${ qb }"`);
                }
                let qb = '';
                this.svgBody ? qb = function(rb) {
                    if (bb[rb]) {
                        const [sb, tb, ub] = bb[rb];
                        return `<span style="display:inline-block;height:${ ub / 2 }em;min-width:0"><span class="stretchy" style="height:${ ub }em"><svg width="100%" height="${ ub }em" viewBox="0 0 ${ sb } ${ tb }" preserveAspectRatio="none" ><path fill="currentcolor" d="${ cb[rb] }"></path></svg></span></span>`;
                    }
                    const [sb, tb, ub, vb] = ab[rb];
                    let wb, xb;
                    const yb = ub / 1000;
                    3 === sb.length ? (wb = [
                        'slice-1-of-3',
                        'slice-2-of-3',
                        'slice-3-of-3'
                    ], xb = [
                        'xMinYMin',
                        'xMidYMin',
                        'xMaxYMin'
                    ]) : 2 === sb.length ? (wb = [
                        'slice-1-of-2',
                        'slice-2-of-2'
                    ], xb = [
                        'xMinYMin',
                        'xMaxYMin'
                    ]) : (wb = ['slice-1-of-1'], xb = [vb]);
                    const zb = sb.map((rb, sb) => `<span class="${ wb[sb] }" style=height:${ yb }em><svg width=400em height=${ yb }em viewBox="0 0 400000 ${ ub }" preserveAspectRatio="${ xb[sb] } slice"><path fill="currentcolor" d="${ cb[rb] }"></path></svg></span>`).join('');
                    return `<span style="display:inline-block;height:${ yb }em;min-width:${ tb }em;">${ zb }</span>`;
                }(this.svgBody) : this.svgOverlay && (qb = '<span style="', qb += 'display: inline-block;', qb += `height:${ this.height + this.depth }em;`, qb += `vertical-align:${ this.depth }em;`, qb += '">', qb += lb, qb += '</span>', qb += '<svg style="position:absolute;overflow:overlay;', qb += `height:${ this.height + this.depth }em;`, (null === (kb = this.cssProperties) || void 0 === kb ? void 0 : kb.padding) ? (qb += `top:${ this.cssProperties.padding }em;`, qb += `left:${ this.cssProperties.padding }em;`, qb += `width:calc(100% - 2 * ${ this.cssProperties.padding }em );`) : qb += 'top:0;left:0;width:100%;', qb += 'z-index:2;', qb += '"', this.svgStyle && (qb += ` style="${ this.svgStyle }"`), qb += `>${ this.svgOverlay }</svg>`), ob = `<span${ pb }>${ lb }${ qb }</span>`;
            }
            return 'text' === this.caret ? ob += '<span class="ML__text-caret"></span>' : 'math' === this.caret && (ob += '<span class="ML__caret"></span>'), ob;
        }
        tryCoalesceWith(ib) {
            if (this.type !== ib.type)
                return !1;
            if (!/ML__text/.test(this.classes) && ![
                    'mord',
                    'mbin',
                    'mrel'
                ].includes(this.type))
                return !1;
            if (this.svgBody || !this.value)
                return !1;
            if (ib.svgBody || !ib.value)
                return !1;
            const jb = this.children && this.children.length > 0,
                kb = ib.children && ib.children.length > 0;
            if (jb || kb)
                return !1;
            const lb = this.cssProperties ? Object.keys(this.cssProperties).length : 0;
            if (lb !== (ib.cssProperties ? Object.keys(ib.cssProperties).length : 0))
                return !1;
            if (lb > 0)
                for (const mb of Object.keys(this.cssProperties))
                    if (this.cssProperties[mb] !== ib.cssProperties[mb])
                        return !1;
            const mb = this.classes.trim().replace(/\s+/g, ' ').split(' '),
                nb = ib.classes.trim().replace(/\s+/g, ' ').split(' ');
            if (mb.length !== nb.length)
                return !1;
            mb.sort(), nb.sort();
            for (const [ob, pb] of mb.entries()) {
                if ('vertical-separator' === pb)
                    return !1;
                if (pb !== nb[ob])
                    return !1;
            }
            return this.value += ob.value, this.height = Math.max(this.height, ob.height), this.depth = Math.max(this.depth, ob.depth), this.maxFontSize = Math.max(this.maxFontSize, ob.maxFontSize), this.italic = ob.italic, !0;
        }
        constructor(ib, jb) {
            var kb, lb, mb, nb, ob, pb;
            if ('number' == typeof ib ? this.value = String.fromCodePoint(ib) : 'string' == typeof ib ? this.value = ib : _ub(ib) ? this.children = ib.filter(ib => null !== ib) : ib && ib instanceof hb && (this.children = [ib]), this.type = null !== (kb = null == jb ? void 0 : jb.type) && void 0 !== kb ? kb : '', this.isSelected = !1, this.isTight = null !== (lb = null == jb ? void 0 : jb.isTight) && void 0 !== lb && lb, this.newList = null !== (mb = null == jb ? void 0 : jb.newList) && void 0 !== mb && mb, null == jb ? void 0 : jb.properties)
                for (const qb of Object.keys(jb.properties))
                    this.setStyle(qb, jb.properties[qb]);
            (null == jb ? void 0 : jb.attributes) && (this.attributes = jb.attributes), this.classes = null !== (nb = null == jb ? void 0 : jb.classes) && void 0 !== nb ? nb : '';
            let qb = (null == jb ? void 0 : jb.fontFamily) || 'Main-Regular';
            if ((null == jb ? void 0 : jb.style) && this.value && (qb = db.applyStyle(null !== (ob = jb.mode) && void 0 !== ob ? ob : 'math', this, jb.style) || 'Main-Regular'), this.height = 0, this.depth = 0, this.skew = 0, this.italic = 0, this.maxFontSize = 0, 'latex' === this.type)
                this.height = 0.8, this.depth = 0.2;
            else if ('number' == typeof ib) {
                const rb = _e(ib, qb);
                this.height = rb.height, this.depth = rb.depth, this.skew = rb.skew, this.italic = rb.italic;
            } else if (this.value) {
                this.height = -1 / 0, this.depth = -1 / 0, this.skew = -1 / 0, this.italic = -1 / 0;
                for (let rb = 0; rb < this.value.length; rb++) {
                    const sb = _e(this.value.codePointAt(rb), qb || 'Main-Regular');
                    this.height = Math.max(this.height, sb.height), this.depth = Math.max(this.depth, sb.depth), this.skew = sb.skew, this.italic = sb.italic;
                }
            } else if (this.children && this.children.length > 0)
                if (1 === this.children.length) {
                    const rb = this.children[0];
                    this.height = rb.height, this.depth = rb.depth, this.maxFontSize = rb.maxFontSize, this.skew = rb.skew, this.italic = rb.italic;
                } else {
                    let rb = -1 / 0,
                        sb = -1 / 0,
                        tb = 0;
                    for (const _ub of this.children)
                        _ub.height > rb && (rb = _ub.height), _ub.depth > sb && (sb = _ub.depth), tb = Math.max(tb, null !== (pb = _ub.maxFontSize) && void 0 !== pb ? pb : 0);
                    this.height = rb, this.depth = sb, this.maxFontSize = tb;
                }
            void 0 !== (null == jb ? void 0 : jb.height) && (this.height = jb.height), void 0 !== (null == jb ? void 0 : jb.depth) && (this.depth = jb.depth), void 0 !== (null == jb ? void 0 : jb.maxFontSize) && (this.maxFontSize = jb.maxFontSize);
        }
    }

    function ib(jb) {
        if (!jb || 0 === jb.length)
            return [];
        jb[0].children = ib(jb[0].children);
        const kb = [jb[0]];
        for (let lb = 1; lb < jb.length; lb++)
            kb[kb.length - 1].tryCoalesceWith(jb[lb]) || (jb[lb].children = ib(jb[lb].children), kb.push(jb[lb]));
        return kb;
    }

    function ib(jb) {
        return jb.children && (jb.children = Pe(jb.children)), jb;
    }

    function ib(jb, kb, lb) {
        kb.newList && (jb = null);
        const mb = kb.type;
        if ('first' === mb)
            return null;
        if ('spacing' === mb)
            return jb;
        if (lb(jb, kb), kb.children) {
            let nb = null;
            void 0 !== mb && 0 !== mb.length || (nb = jb);
            for (const ob of kb.children)
                nb = ib(nb, ob, lb);
            void 0 !== mb && 0 !== mb.length || (ob = nb);
        }
        return 'supsub' !== mb && void 0 !== mb && mb.length > 0 && (jb = kb), jb;
    }

    function ib(jb, kb) {
        jb && Re(null, jb, kb);
    }

    function ib(jb, kb = 1) {
        return function(lb) {
                Ie(lb, (lb, kb) => {
                    'mbin' !== kb.type || lb && !/first|none|mbin|mop|mrel|mopen|mpunct/.test(lb.type) || (kb.type = 'mord'), lb && 'mbin' === lb.type && /mrel|mclose|mpunct|placeholder/.test(kb.type) && (lb.type = 'mord');
                });
            }(jb),
            function(lb, mb) {
                Ie(lb, (lb, b) => {
                    var nb, ob, pb, qb;
                    const rb = null !== (nb = null == lb ? void 0 : lb.type) && void 0 !== nb ? nb : 'none',
                        sb = b.isTight ? null !== (ob = gb[rb]) && void 0 !== ob ? ob : null : null !== (pb = fb[rb]) && void 0 !== pb ? pb : null,
                        tb = sb && null !== (qb = sb[b.type]) && void 0 !== qb ? qb : 0;
                    tb && (b.left += mb * (tb / 18));
                });
            }(jb, kb), jb;
    }

    function _ib(jb, kb) {
        if (!jb)
            return new hb(null, kb);
        const lb = new hb(null, {
            classes: 'ML__strut'
        });
        lb.setStyle('height', Math.max(0, jb.height), 'em');
        const mb = [lb];
        if (0 !== jb.depth) {
            const nb = new hb(null, {
                classes: 'ML__strut--bottom'
            });
            nb.setStyle('height', jb.height + jb.depth, 'em'), nb.setStyle('vertical-align', -jb.depth, 'em'), mb.push(nb);
        }
        return mb.push(jb), new hb(mb, kb);
    }

    function ib(jb) {
        const kb = function(lb) {
                return ab[lb] ? ab[lb][2] / 1000 : bb[lb][2];
            }(jb) / 2,
            lb = new hb(null, {
                height: kb + 0.166,
                depth: kb - 0.166,
                maxFontSize: 0
            });
        return lb.svgBody = jb, lb;
    }
    class ib extends hb {
        constructor(jb, kb) {
            var lb;
            const [mb, nb, ob] = function(pb) {
                var qb;
                const [rb, sb] = function(tb) {
                    if ('individualShift' in tb) {
                        const ub = tb.individualShift;
                        let vb = ub[0];
                        const wb = [vb],
                            xb = -vb.shift - vb.box.depth;
                        let yb = xb;
                        for (let zb = 1; zb < ub.length; zb++) {
                            const Ab = ub[zb],
                                Bb = -Ab.shift - yb - Ab.box.depth,
                                Cb = Bb - (vb.box.height + vb.box.depth);
                            yb += Bb, wb.push(Cb), wb.push(Ab), vb = Ab;
                        }
                        return [
                            wb,
                            xb
                        ];
                    }
                    if ('top' in tb) {
                        let ub = tb.top;
                        for (const vb of tb.children)
                            ub -= 'number' == typeof vb ? vb : vb.box.height + vb.box.depth;
                        return [
                            tb.children,
                            ub
                        ];
                    }
                    if ('bottom' in tb)
                        return [
                            tb.children,
                            -tb.bottom
                        ];
                    if ('firstBaseline' in tb) {
                        const ub = tb.firstBaseline[0];
                        if ('number' == typeof ub)
                            throw new Error('First child must be an element.');
                        return [
                            tb.firstBaseline,
                            -ub.box.depth
                        ];
                    }
                    if ('shift' in tb) {
                        const ub = tb.children[0];
                        if ('number' == typeof ub)
                            throw new Error('First child must be an element.');
                        return [
                            tb.children,
                            -ub.box.depth - tb.shift
                        ];
                    }
                    return [
                        null,
                        0
                    ];
                }(pb);
                if (!rb)
                    return [
                        [],
                        0,
                        0
                    ];
                let tb = 0;
                for (const ub of rb)
                    if ('number' != typeof ub) {
                        const vb = ub.box;
                        tb = Math.max(tb, vb.maxFontSize, vb.height);
                    }
                tb += 2;
                const vb = new hb(null, {
                    classes: 'pstrut'
                });
                vb.setStyle('height', tb, 'em');
                const wb = [];
                let xb = sb,
                    yb = sb,
                    zb = sb;
                for (const Ab of rb) {
                    if ('number' == typeof Ab)
                        zb += Ab;
                    else {
                        const Bb = Ab.box,
                            Cb = null !== (qb = Ab.classes) && void 0 !== qb ? qb : [],
                            Db = new hb([
                                vb,
                                Bb
                            ], {
                                classes: Cb.join(' '),
                                style: Ab.style
                            });
                        Db.setStyle('top', -tb - zb - Bb.depth, 'em'), Ab.marginLeft && Db.setStyle('margin-left', Ab.marginLeft, 'em'), Ab.marginRight && Db.setStyle('margin-right', Ab.marginRight, 'em'), wb.push(Db), zb += Bb.height + Bb.depth;
                    }
                    xb = Math.min(xb, zb), yb = Math.max(yb, zb);
                }
                const Bb = new hb(wb, {
                    classes: 'vlist'
                });
                if (Bb.setStyle('height', yb, 'em'), xb >= 0)
                    return [
                        [new hb(Bb, {
                            classes: 'vlist-r'
                        })],
                        yb,
                        -xb
                    ];
                const Cb = new hb(new hb(null), {
                    classes: 'vlist'
                });
                Cb.setStyle('height', -xb, 'em');
                const Db = new hb(8203, {
                    classes: 'vlist-s',
                    maxFontSize: 0,
                    height: 0,
                    depth: 0
                });
                return [
                    [
                        new hb([
                            Bb,
                            Db
                        ], {
                            classes: 'vlist-r'
                        }),
                        new hb(Cb, {
                            classes: 'vlist-r'
                        })
                    ],
                    yb,
                    -xb
                ];
            }(jb);
            super(1 === mb.length ? mb[0] : mb, {
                classes: (null !== (lb = null == kb ? void 0 : kb.classes) && void 0 !== lb ? lb : '') + ' vlist-t' + (2 === mb.length ? ' vlist-t2' : ''),
                height: nb,
                depth: ob,
                type: null == kb ? void 0 : kb.type
            });
        }
    }
    const jb = [
        [
            8205,
            1
        ],
        [
            65038,
            2
        ],
        [
            127995,
            5
        ],
        [
            129456,
            4
        ],
        [
            917536,
            96
        ]
    ];
    let kb;
    const lb = [
        127462,
        127487
    ];

    function mb(nb) {
        var ob;
        if (void 0 === kb) {
            kb = {};
            for (const pb of jb)
                for (let qb = pb[0]; qb <= pb[0] + pb[1] - 1; qb++)
                    kb[qb] = !0;
        }
        return null !== (ob = kb[nb]) && void 0 !== ob && ob;
    }

    function mb(nb) {
        return nb >= lb[0] && nb <= lb[1];
    }

    function mb(nb) {
        if (/^[\u0020-\u00FF]*$/.test(nb))
            return nb;
        const ob = [],
            pb = function(qb) {
                const rb = [];
                for (let sb = 0; sb < qb.length; sb++) {
                    let tb = qb.charCodeAt(sb);
                    if (13 === tb && 10 === qb.charCodeAt(sb + 1) && (tb = 10, sb++), 13 !== tb && 12 !== tb || (tb = 10), 0 === tb && (tb = 65533), tb >= 55296 && tb <= 56319) {
                        const ub = qb.charCodeAt(sb + 1);
                        ub >= 56320 && ub <= 57343 && (tb = 65536 + 1024 * (tb - 55296) + (ub - 56320), sb++);
                    }
                    rb.push(tb);
                }
                return rb;
            }(nb);
        let qb = 0;
        for (; qb < pb.length;) {
            const rb = pb[qb++],
                sb = pb[qb];
            if (8205 === sb) {
                const tb = qb - 1;
                for (qb += 2; 8205 === pb[qb];)
                    qb += 2;
                ob.push(String.fromCodePoint(...pb.slice(tb, qb - tb + 1)));
            } else if (Ge(sb)) {
                const tb = qb - 1;
                for (; Ge(pb[qb]);)
                    qb += 8205 === pb[qb] ? 2 : 1;
                ob.push(String.fromCodePoint(...pb.slice(tb, 2 * qb - tb - 1)));
            } else
                Ze(rb) ? (qb += 1, ob.push(String.fromCodePoint(...pb.slice(qb - 2, 2)))) : ob.push(String.fromCodePoint(rb));
        }
        return ob;
    }
    class mb {
        end() {
            return this.pos >= this.s.length;
        }
        get() {
            return this.pos < this.s.length ? this.s[this.pos++] : '';
        }
        peek() {
            return this.s[this.pos];
        }
        match(nb) {
            const ob = 'string' == typeof this.s ? nb.exec(this.s.slice(this.pos)) : nb.exec(this.s.slice(this.pos).join(''));
            return (null == ob ? void 0 : ob[0]) ? (this.pos += ob[0].length, ob[0]) : '';
        }
        next() {
            if (this.end())
                return null;
            if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]+/))
                return '<space>';
            if (this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]/))
                return '<space>';
            const nb = this.get();
            if ('\\' === nb) {
                if (!this.end()) {
                    let ob = this.match(/^[a-zA-Z\*]+/);
                    if (ob)
                        this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]*/);
                    else if (ob = this.get(), ' ' === ob)
                        return '<space>';
                    return '\\' + ob;
                }
            } else {
                if ('{' === nb)
                    return '<{>';
                if ('}' === nb)
                    return '<}>';
                if ('^' === nb) {
                    if ('^' === this.peek()) {
                        this.get();
                        const ob = this.match(/^(\^(\^(\^(\^[\da-f])?[\da-f])?[\da-f])?[\da-f])?[\da-f]{2}/);
                        if (ob)
                            return String.fromCodePoint(Number.parseInt(ob.slice(ob.lastIndexOf('^') + 1), 16));
                    }
                    return nb;
                }
                if ('#' === nb) {
                    if (!this.end()) {
                        let ob = !1;
                        if (/[\d?@]/.test(this.peek()) && (ob = !0, this.pos + 1 < this.s.length)) {
                            const pb = this.s[this.pos + 1];
                            ob = /[^\dA-Za-z]/.test(pb);
                        }
                        return ob ? '#' + this.get() : '#';
                    }
                } else if ('$' === nb)
                    return '$' === this.peek() ? (this.get(), '<$$>') : '<$>';
            }
            return nb;
        }
        constructor(nb) {
            this.s = Ye(nb), this.pos = 0, this.obeyspaces = !1;
        }
    }

    function nb(ob, pb) {
        var qb, rb, sb, tb;
        const ub = [];
        let vb = ob.next();
        if (vb)
            if ('\\relax' === vb);
            else if ('\\noexpand' === vb)
            vb = ob.next(), vb && ub.push(vb);
        else if ('\\obeyspaces' === vb)
            ob.obeyspaces = !0;
        else if ('\\space' === vb || '~' === vb)
            ub.push('<space>');
        else if ('\\bgroup' === vb)
            ub.push('<{>');
        else if ('\\egroup' === vb)
            ub.push('<}>');
        else if ('\\string' === vb) {
            if (vb = ob.next(), vb)
                if (vb.startsWith('\\'))
                    for (const wb of vb)
                        ub.push('\\' === wb ? '\\backslash' : wb);
                else
                    '<{>' === vb ? ub.push('\\{') : '<space>' === vb ? ub.push('~') : '<}>' === vb && ub.push('\\}');
        } else if ('\\csname' === vb) {
            for (;
                '<space>' === ob.peek();)
                ob.next();
            let wb = '',
                xb = !1,
                yb = [];
            do {
                if (0 === yb.length)
                    if (/^#[\d?@]$/.test(ob.peek())) {
                        const zb = ob.get().slice(1);
                        yb = _nb(null !== (rb = null !== (qb = null == pb ? void 0 : pb(zb)) && void 0 !== qb ? qb : null == pb ? void 0 : pb('?')) && void 0 !== rb ? rb : '\\placeholder{}', pb), vb = yb[0];
                    } else
                        vb = ob.next(), yb = vb ? [vb] : [];
                xb = 0 === yb.length, xb || '\\endcsname' !== vb || (xb = !0, yb.shift()), xb || (xb = '<$>' === vb || '<$$>' === vb || '<{>' === vb || '<}>' === vb || 'string' == typeof vb && vb.length > 1 && vb.startsWith('\\')), xb || (wb += yb.shift());
            } while (!xb);
            wb && ub.push('\\' + wb), ub.push(...yb);
        } else if ('\\endcsname' === vb);
        else if (vb.length > 1 && vb.startsWith('#')) {
            const wb = vb.slice(1);
            ub.push(..._nb(null !== (tb = null !== (sb = null == pb ? void 0 : pb(wb)) && void 0 !== sb ? sb : null == pb ? void 0 : pb('?')) && void 0 !== tb ? tb : '\\placeholder{}', pb));
        } else
            ub.push(vb);
        return ub;
    }

    function _nb(ob, pb = null) {
        const qb = [];
        let rb = '';
        for (const sb of ob.toString().split(/\r?\n/)) {
            rb && qb.push(rb), rb = ' ';
            const tb = sb.match(/((?:\\%)|[^%])*/);
            null !== tb && qb.push(tb[0]);
        }
        const tb = new mb(qb.join('')),
            ub = [];
        do {
            ub.push(...et(tb, sb));
        } while (!tb.end());
        return ub;
    }

    function nb(ob) {
        let pb = '';
        const qb = [];
        for (const rb of ob)
            rb && (/[a-zA-Z\*]/.test(rb[0]) && qb.push(pb), qb.push(rb), /\\[a-zA-Z]+\*?[\"\'][^\ ]+$/.test(rb) && qb.push(' '), pb = /\\[a-zA-Z]+\*?$/.test(rb) ? ' ' : '');
        return qb.join('');
    }

    function nb(ob) {
        return at(ob.map(ob => {
            var pb;
            return null !== (pb = {
                '<space>': ' ',
                '<$$>': '$$',
                '<$>': '$',
                '<{>': '{',
                '<}>': '}'
            } [ob]) && void 0 !== pb ? pb : ob;
        }));
    }
    class nb extends hb {
        toMarkup() {
            const ob = [],
                pb = this.classes.split(' '),
                qb = 1 === pb.length ? pb[0] : pb.filter((ob, pb, qb) => ob.length > 0 && qb.indexOf(ob) === pb).join(' ');
            if (this.cssId && ob.push(`id=${ this.cssId.replace(/ /g, '-') }`), this.htmlData) {
                const rb = this.htmlData.split(',');
                for (const sb of rb) {
                    const tb = sb.match(/([^=]+)=(.+$)/);
                    if (tb) {
                        const ub = tb[1].trim().replace(/ /g, '-');
                        ub && ob.push(`data-${ ub }=${ tb[2] }`);
                    } else {
                        const ub = sb.trim().replace(/ /g, '-');
                        ub && ob.push(`data-${ ub }`);
                    }
                }
            }
            if (this.htmlStyle) {
                const rb = this.htmlStyle.split(';');
                let sb = '';
                for (const tb of rb) {
                    const ub = tb.match(/([^=]+):(.+$)/);
                    if (ub) {
                        const vb = ub[1].trim().replace(/ /g, '-');
                        vb && (sb += `${ vb }:${ ub[2] };`);
                    }
                }
                sb && tb.push(`style="${ sb }"`);
            }
            this.attributes && ob.push(...Object.keys(this.attributes).map(ob => `${ ob }="${ this.attributes[ob] }"`)), qb.length > 0 && ob.push(`class="${ qb }"`);
            const rb = this.mathfield;
            return ob.push(`style="display:inline-block; width:${ rb.clientWidth }px; height:${ rb.clientHeight }px;" `), `<span ${ ob.join(' ') }></span>`;
        }
        constructor(ob, pb, qb) {
            super(null, qb), this.mathfield = pb, this.htmlData = `placeholder-id=${ ob } `;
            const rb = function(sb) {
                return je(Ve(sb.model.root.render(new $({
                    registers: sb.registers
                }, {
                    fontSize: 5,
                    letterShapeStyle: sb.options.letterShapeStyle
                }, 'inline-math' === sb.options.defaultMode ? 'textstyle' : 'displaystyle')), sb.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(pb._mathfield);
            this.height = rb.height, this.depth = rb.depth;
        }
    }
    const ob = [
        'above',
        'body',
        'below',
        'superscript',
        'subscript'
    ];

    function pb(qb) {
        return 'string' == typeof qb && ob.includes(qb);
    }

    function pb(qb) {
        return void 0 !== qb && Array.isArray(qb) && 2 === qb.length;
    }
    class pb {
        static createBox(qb, rb, sb) {
            var tb, ub, vb;
            if (!rb)
                return null;
            const wb = function(xb) {
                let yb;
                const zb = [];
                let Ab = [];
                for (const Bb of xb)
                    if (yb || Bb.style) {
                        const Cb = Bb.computedStyle;
                        yb && Cb.color === yb.color && Cb.backgroundColor === yb.backgroundColor && Cb.fontSize === yb.fontSize ? Ab.push(Bb) : (Ab.length > 0 && zb.push(Ab), Ab = [Bb], yb = Cb);
                    } else
                        Ab.push(Bb);
                return Ab.length > 0 && zb.push(Ab), zb;
            }(rb);
            if (1 === wb.length) {
                const xb = wb[0];
                return xb[0].style ? _qb(qb, xb, {
                    ...sb,
                    style: {
                        color: xb[0].style.color,
                        backgroundColor: xb[0].style.backgroundColor,
                        fontSize: xb[0].style.fontSize
                    }
                }) : _qb(qb, xb, sb);
            }
            const xb = [];
            let yb = null == sb ? void 0 : sb.newList;
            for (const zb of wb) {
                const Ab = _qb(new $(qb, {
                    color: null === (tb = zb[0].style) || void 0 === tb ? void 0 : tb.color,
                    backgroundColor: null === (ub = zb[0].style) || void 0 === ub ? void 0 : ub.backgroundColor,
                    fontSize: null === (vb = zb[0].style) || void 0 === vb ? void 0 : vb.fontSize
                }), zb, {
                    newList: yb
                });
                Ab && (yb = !1, xb.push(Ab));
            }
            return 0 === xb.length ? null : 1 !== xb.length || (null == sb ? void 0 : sb.classes) || (null == sb ? void 0 : sb.type) ? new hb(xb, {
                classes: null == sb ? void 0 : sb.classes,
                type: null == sb ? void 0 : sb.type,
                newList: null == sb ? void 0 : sb.newList
            }).wrap(qb) : xb[0].wrap(qb);
        }
        static serialize(qb, rb) {
            return _tb(qb) ? _qb(qb, rb) : 'number' == typeof qb || 'boolean' == typeof qb ? qb.toString() : 'string' == typeof qb ? qb.replace(/\s/g, '~') : void 0 === qb ? '' : rb.expandMacro || 'string' != typeof qb.verbatimLatex ? qb.command && pb.customSerializer[qb.command] ? pb.customSerializer[qb.command](qb, rb) : qb.serialize(rb) : qb.verbatimLatex;
        }
        static commonAncestor(qb, rb) {
            if (qb === rb)
                return qb.parent;
            if (qb.parent === rb.parent)
                return qb.parent;
            const sb = new WeakSet();
            let {
                parent: _tb
            } = qb;
            for (; _tb;)
                sb.add(_tb), _tb = _tb.parent;
            for (_tb = rb.parent; _tb;) {
                if (sb.has(_tb))
                    return _tb;
                _tb = _tb.parent;
            }
        }
        static fromJson(qb, rb) {
            const sb = new pb(qb.type, rb, qb);
            for (const tb of ob)
                qb[tb] && sb.setChildren(qb[tb], tb);
            return sb;
        }
        toJson() {
            const qb = {
                type: this.type
            };
            if ('math' !== this.mode && (qb.mode = this.mode), this.command && this.command !== this.value && (qb.command = this.command), void 0 !== this.value && (qb.value = this.value), this.style && Object.keys(this.style).length > 0 && (qb.style = {
                    ...this.style
                }), void 0 !== this.verbatimLatex && (qb.verbatimLatex = this.verbatimLatex), this.subsupPlacement && (qb.subsupPlacement = this.subsupPlacement), this.explicitSubsupPlacement && (qb.explicitSubsupPlacement = !0), this.isFunction && (qb.isFunction = !0), this.displayContainsHighlight && (qb.displayContainsHighlight = !0), this.isExtensibleSymbol && (qb.isExtensibleSymbol = !0), this.skipBoundary && (qb.skipBoundary = !0), this.captureSelection && (qb.captureSelection = !0), this._branches)
                for (const rb of Object.keys(this._branches))
                    this._branches[rb] && (qb[rb] = this._branches[rb].filter(qb => 'first' !== qb.type).map(qb => qb.toJson()));
            return qb;
        }
        get changeCounter() {
            return this._changeCounter;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(qb) {
            if (this._isDirty = qb, qb) {
                this._changeCounter++, this.verbatimLatex = void 0, this._children = void 0;
                let {
                    parent: rb
                } = this;
                for (; rb;)
                    rb._isDirty = !0, rb._changeCounter++, rb.verbatimLatex = void 0, rb._children = void 0, rb = rb.parent;
            }
        }
        serialize(qb) {
            var rb;
            return this.body && this.command ? at([
                this.command,
                '{',
                this.bodyToLatex(qb),
                '}',
                this.supsubToLatex(qb)
            ]) : this.body ? at([
                this.bodyToLatex(qb),
                this.supsubToLatex(qb)
            ]) : this.value && '\u200B' !== this.value ? null !== (rb = this.command) && void 0 !== rb ? rb : function(sb, tb) {
                var ub;
                if ('text' === sb)
                    return null !== (ub = _bd(sb, tb.codePointAt(0))) && void 0 !== ub ? ub : tb;
                let vb;
                if (vb = _bd(sb, tb.codePointAt(0)), vb)
                    return vb;
                const wb = function(xb) {
                    var yb;
                    if ((xb < 119808 || xb > 120831) && (xb < 8448 || xb > 8527))
                        return {
                            char: String.fromCodePoint(xb)
                        };
                    for (const zb in s)
                        if (s[zb] === xb) {
                            xb = null !== (yb = zb.codePointAt(0)) && void 0 !== yb ? yb : 0;
                            break;
                        }
                    for (const Ab of t)
                        if (xb >= Ab.start && xb < Ab.start + Ab.len)
                            return {
                                char: String.fromCodePoint(xb - Ab.start + Ab.offset),
                                variant: Ab.variant,
                                style: Ab.style
                            };
                    return {
                        char: String.fromCodePoint(xb)
                    };
                }(tb.codePointAt(0));
                return wb.style || wb.variant ? (vb = wb.char, wb.variant && (vb = '\\' + wb.variant + '{' + vb + '}'), 'bold' === wb.style ? vb = '\\mathbf{' + vb + '}' : 'italic' === wb.style ? vb = '\\mathit{' + vb + '}' : 'bolditalic' === wb.style && (vb = '\\mathbfit{' + vb + '}'), '\\mathord{' + vb + '}') : '';
            }(this.mode, this.value) : '';
        }
        bodyToLatex(qb) {
            return _qb(this.body, qb);
        }
        aboveToLatex(qb) {
            return _qb(this.above, qb);
        }
        belowToLatex(qb) {
            return _qb(this.below, qb);
        }
        supsubToLatex(qb) {
            let rb = '';
            if (void 0 !== this.branch('subscript')) {
                const sb = _qb(this.subscript, qb);
                0 === sb.length ? rb += '_{}' : 1 === sb.length ? rb += '_' + sb : rb += `_{${ sb }}`;
            }
            if (void 0 !== this.branch('superscript')) {
                const sb = _qb(this.superscript, qb);
                0 === sb.length ? rb += '^{}' : 1 === sb.length ? rb += '\u2032' === sb ? '^\\prime ' : '\u2033' === sb ? '^\\doubleprime ' : '^' + sb : rb += `^{${ sb }}`;
            }
            return rb;
        }
        get treeDepth() {
            let qb = 1,
                rb = this.parent;
            for (; rb;)
                rb = rb.parent, qb += 1;
            return qb;
        }
        get inCaptureSelection() {
            let qb = !1,
                rb = this;
            for (; rb;) {
                if (rb.captureSelection) {
                    qb = !0;
                    break;
                }
                rb = rb.parent;
            }
            return qb;
        }
        branch(qb) {
            if (nt(qb) && this._branches)
                return this._branches[qb];
        }
        get branches() {
            if (!this._branches)
                return [];
            const qb = [];
            for (const rb of ob)
                this._branches[rb] && qb.push(rb);
            return qb;
        }
        createBranch(qb) {
            return nt(qb) ? (this._branches ? this._branches[qb] || (this._branches[qb] = [this.makeFirstAtom(qb)]) : this._branches = {
                [qb]: [this.makeFirstAtom(qb)]
            }, this.isDirty = !0, this._branches[qb]) : [];
        }
        get row() {
            return st(this.treeBranch) ? this.treeBranch[0] : -1;
        }
        get col() {
            return st(this.treeBranch) ? this.treeBranch[1] : -1;
        }
        get body() {
            var qb;
            return null === (qb = this._branches) || void 0 === qb ? void 0 : qb.body;
        }
        set body(qb) {
            this.setChildren(qb, 'body');
        }
        get superscript() {
            var qb;
            return null === (qb = this._branches) || void 0 === qb ? void 0 : qb.superscript;
        }
        set superscript(qb) {
            this.setChildren(qb, 'superscript');
        }
        get subscript() {
            var qb;
            return null === (qb = this._branches) || void 0 === qb ? void 0 : qb.subscript;
        }
        set subscript(qb) {
            this.setChildren(qb, 'subscript');
        }
        get above() {
            var qb;
            return null === (qb = this._branches) || void 0 === qb ? void 0 : qb.above;
        }
        set above(qb) {
            this.setChildren(qb, 'above');
        }
        get below() {
            var qb;
            return null === (qb = this._branches) || void 0 === qb ? void 0 : qb.below;
        }
        set below(qb) {
            this.setChildren(qb, 'below');
        }
        get computedStyle() {
            var qb;
            if (!this.parent)
                return {
                    ...null !== (qb = this.style) && void 0 !== qb ? qb : {}
                };
            const rb = void 0 !== this.style.verbatimColor,
                sb = void 0 !== this.style.verbatimBackgroundColor,
                tb = {
                    ...this.parent.computedStyle,
                    ...this.style
                };
            return delete tb.variant, delete tb.variantStyle, sb || delete tb.verbatimBackgroundColor, rb || delete tb.verbatimColor, tb;
        }
        applyStyle(qb) {
            this.isDirty = !0, this.style = {
                ...this.style,
                ...qb
            }, 'none' === this.style.fontFamily && delete this.style.fontFamily, 'auto' === this.style.fontShape && delete this.style.fontShape, 'auto' === this.style.fontSeries && delete this.style.fontSeries, 'none' === this.style.color && (delete this.style.color, delete this.style.verbatimColor), 'none' === this.style.backgroundColor && (delete this.style.backgroundColor, delete this.style.verbatimBackgroundColor), 'auto' === this.style.fontSize && delete this.style.fontSize;
            for (const rb of this.children)
                rb.applyStyle(qb);
        }
        getInitialBaseElement() {
            let qb;
            return this.hasEmptyBranch('body') || (qb = this.body[1].getInitialBaseElement()), null != qb ? qb : this;
        }
        getFinalBaseElement() {
            return this.hasEmptyBranch('body') ? this : this.body[this.body.length - 1].getFinalBaseElement();
        }
        isCharacterBox() {
            if ('leftright' === this.type)
                return !1;
            const qb = this.getInitialBaseElement();
            return /mord/.test(qb.type);
        }
        hasEmptyBranch(qb) {
            const rb = this.branch(qb);
            return !rb || 1 === rb.length;
        }
        setChildren(qb, rb) {
            if (!qb)
                return;
            if (!nt(rb))
                return;
            const sb = [
                this.makeFirstAtom(rb),
                ...qb
            ];
            this._branches ? this._branches[rb] = sb : this._branches = {
                [rb]: sb
            };
            for (const tb of qb)
                tb.parent = this, tb.treeBranch = rb;
            this.isDirty = !0;
        }
        makeFirstAtom(qb) {
            const rb = new pb('first', this.context, {
                mode: this.mode
            });
            return rb.parent = this, rb.treeBranch = qb, rb;
        }
        addChild(qb, rb) {
            this.createBranch(rb).push(qb), this.isDirty = !0, qb.parent = this, qb.treeBranch = rb;
        }
        addChildBefore(qb, rb) {
            const sb = this.createBranch(rb.treeBranch);
            sb.splice(sb.indexOf(rb), 0, qb), this.isDirty = !0, qb.parent = this, qb.treeBranch = rb.treeBranch;
        }
        addChildAfter(qb, rb) {
            const sb = this.createBranch(rb.treeBranch);
            sb.splice(sb.indexOf(rb) + 1, 0, qb), this.isDirty = !0, qb.parent = this, qb.treeBranch = rb.treeBranch;
        }
        addChildren(qb, rb) {
            for (const sb of qb)
                this.addChild(sb, rb);
        }
        addChildrenAfter(qb, rb) {
            const sb = this.createBranch(rb.treeBranch);
            sb.splice(sb.indexOf(rb) + 1, 0, ...qb), this.isDirty = !0;
            for (const tb of qb)
                tb.parent = this, tb.treeBranch = rb.treeBranch;
            return qb[qb.length - 1];
        }
        removeBranch(qb) {
            const rb = this.branch(qb);
            if (nt(qb) && (this._branches[qb] = void 0), !rb)
                return [];
            for (const sb of rb)
                sb.parent = void 0, sb.treeBranch = void 0;
            return rb.shift(), this.isDirty = !0, rb;
        }
        removeChild(qb) {
            if ('first' === qb.type)
                return;
            const rb = this.branch(qb.treeBranch),
                sb = rb.indexOf(qb);
            rb.splice(sb, 1), this.isDirty = !0, qb.parent = void 0, qb.treeBranch = void 0;
        }
        get siblings() {
            return 'root' === this.type ? [] : this.parent.branch(this.treeBranch);
        }
        get firstSibling() {
            return this.siblings[0];
        }
        get lastSibling() {
            const {
                siblings: qb
            } = this;
            return qb[qb.length - 1];
        }
        get isFirstSibling() {
            return this === this.firstSibling;
        }
        get isLastSibling() {
            return this === this.lastSibling;
        }
        get hasNoSiblings() {
            return 1 === this.siblings.length;
        }
        get leftSibling() {
            const qb = this.parent.branch(this.treeBranch);
            return qb[qb.indexOf(this) - 1];
        }
        get rightSibling() {
            const qb = this.parent.branch(this.treeBranch);
            return qb[qb.indexOf(this) + 1];
        }
        get hasChildren() {
            return Boolean(this._branches && this.children.length > 0);
        }
        get firstChild() {
            return this.children[0];
        }
        get lastChild() {
            const {
                children: qb
            } = this;
            return qb[qb.length - 1];
        }
        get children() {
            if (this._children)
                return this._children;
            if (!this._branches)
                return [];
            const qb = [];
            for (const rb of ob)
                if (this._branches[rb])
                    for (const sb of this._branches[rb])
                        qb.push(...sb.children), qb.push(sb);
            return this._children = qb, qb;
        }
        render(qb, rb) {
            if ('first' === this.type && !qb.atomIdsSettings)
                return null;
            const sb = new $(qb, this.style);
            let tb = '';
            'root' === this.type && (tb += ' ML__base'), this.isSelected && (tb += ' ML__selected');
            let ub = this.createBox(sb, {
                classes: tb,
                newList: !0 === (null == rb ? void 0 : rb.newList) || 'first' === this.type
            });
            return ub ? (this.subsupPlacement || !this.superscript && !this.subscript || (ub = this.attachSupsub(sb, {
                base: ub
            })), ub.wrap(sb)) : null;
        }
        attachSupsub(qb, rb) {
            var sb, tb;
            const ub = rb.base,
                vb = this.superscript,
                wb = this.subscript;
            if (!vb && !wb)
                return ub;
            let xb = null,
                yb = null;
            const zb = null !== (sb = rb.isCharacterBox) && void 0 !== sb ? sb : this.isCharacterBox();
            let Ab = 0;
            if (vb) {
                const Bb = new $(qb, void 0, 'superscript');
                xb = pb.createBox(Bb, vb, {
                    newList: !0
                }), zb || (Ab = ub.height - qb.metrics.supDrop * Bb.scalingFactor);
            }
            let Bb, Cb = 0;
            if (wb) {
                const Db = new $(qb, void 0, 'subscript');
                yb = pb.createBox(Db, wb, {
                    newList: !0
                }), zb || (Cb = ub.depth + qb.metrics.subDrop * Db.scalingFactor);
            }
            Bb = qb.isDisplayStyle ? qb.metrics.sup1 : qb.isCramped ? qb.metrics.sup3 : qb.metrics.sup2;
            const Db = 0.05 / qb.scalingFactor;
            let Eb = null;
            if (yb && xb) {
                Ab = Math.max(Ab, Bb, xb.depth + 0.25 * qb.metrics.xHeight), Cb = Math.max(Cb, qb.metrics.sub2);
                const Fb = qb.metrics.defaultRuleThickness;
                if (Ab - xb.depth - (yb.height - Cb) < 4 * Fb) {
                    Cb = 4 * Fb - (Ab - xb.depth) + yb.height;
                    const Gb = 0.8 * qb.metrics.xHeight - (Ab - xb.depth);
                    Gb > 0 && (Ab += Gb, Cb -= Gb);
                }
                const Gb = this.isExtensibleSymbol && ub.italic ? -ub.italic : 0;
                Eb = new ib({
                    individualShift: [{
                            box: yb,
                            shift: Cb,
                            marginLeft: Gb
                        },
                        {
                            box: xb,
                            shift: -Ab
                        }
                    ]
                }).wrap(qb);
            } else
                yb && !xb ? (Cb = Math.max(Cb, qb.metrics.sub1, yb.height - 0.3448), Eb = new ib({
                    shift: Cb,
                    children: [{
                        box: yb,
                        marginRight: Db,
                        marginLeft: this.isCharacterBox() ? -(null !== (tb = ub.italic) && void 0 !== tb ? tb : 0) : 0
                    }]
                })) : !yb && xb && (Ab = Math.max(Ab, Bb, xb.depth + 0.10775), Eb = new ib({
                    shift: -Ab,
                    children: [{
                        box: xb,
                        marginRight: Db
                    }]
                }), Eb.wrap(qb));
            const Fb = new hb(Eb, {
                classes: 'msubsup' + (this.isSelected ? ' ML__selected' : '')
            });
            return this.caret && (Fb.caret = this.caret), new hb([
                ub,
                Fb
            ], {
                type: rb.type
            });
        }
        attachLimits(qb, rb) {
            var sb;
            const tb = this.superscript ? pb.createBox(new $(qb, this.style, 'superscript'), this.superscript, {
                    newList: !0
                }) : null,
                ub = this.subscript ? pb.createBox(new $(qb, this.style, 'subscript'), this.subscript, {
                    newList: !0
                }) : null;
            return tb || ub ? function(vb, wb) {
                var xb, yb, zb, Ab, Bb;
                const Cb = vb.metrics,
                    Db = new hb(wb.base),
                    Eb = null !== (xb = wb.baseShift) && void 0 !== xb ? xb : 0,
                    Fb = null !== (yb = wb.slant) && void 0 !== yb ? yb : 0;
                let Gb = 0,
                    Hb = 0;
                wb.above && (Gb = null !== (zb = wb.aboveShift) && void 0 !== zb ? zb : Math.max(Cb.bigOpSpacing1, Cb.bigOpSpacing3 - wb.above.depth)), wb.below && (Hb = null !== (Ab = wb.belowShift) && void 0 !== Ab ? Ab : Math.max(Cb.bigOpSpacing2, Cb.bigOpSpacing4 - wb.below.height));
                let Ib = null;
                if (wb.below && wb.above) {
                    const Jb = Cb.bigOpSpacing5 + wb.below.height + wb.below.depth + Hb + Db.depth + Eb;
                    Ib = new ib({
                        bottom: Jb,
                        children: [
                            Cb.bigOpSpacing5,
                            {
                                box: wb.below,
                                marginLeft: -Fb,
                                classes: ['ML__center']
                            },
                            Hb,
                            {
                                box: Db,
                                classes: ['ML__center']
                            },
                            Gb,
                            {
                                box: wb.above,
                                marginLeft: Fb,
                                classes: ['ML__center']
                            },
                            Cb.bigOpSpacing5
                        ]
                    }).wrap(vb);
                } else if (wb.below && !wb.above)
                    Ib = new ib({
                        top: Db.height - Eb,
                        children: [
                            Cb.bigOpSpacing5,
                            {
                                box: wb.below,
                                marginLeft: -Fb,
                                classes: ['ML__center']
                            },
                            Hb,
                            {
                                box: Db,
                                classes: ['ML__center']
                            }
                        ]
                    }).wrap(vb);
                else if (!wb.below && wb.above) {
                    const Jb = Db.depth + Eb;
                    Ib = new ib({
                        bottom: Jb,
                        children: [{
                                box: Db,
                                classes: ['ML__center']
                            },
                            Gb,
                            {
                                box: wb.above,
                                marginLeft: Fb,
                                classes: ['ML__center']
                            },
                            Cb.bigOpSpacing5
                        ]
                    }).wrap(vb);
                } else {
                    const Jb = Db.depth + Eb;
                    Ib = new ib({
                        bottom: Jb,
                        children: [{
                                box: Db
                            },
                            Cb.bigOpSpacing5
                        ]
                    }).wrap(vb);
                }
                return new hb(Ib, {
                    type: null !== (Bb = wb.type) && void 0 !== Bb ? Bb : 'mop'
                });
            }(qb, {
                ...rb,
                above: tb,
                below: ub,
                type: null !== (sb = null == rb ? void 0 : rb.type) && void 0 !== sb ? sb : 'mop'
            }) : rb.base.wrap(qb);
        }
        bind(qb, rb) {
            if (!rb || qb.isPhantom || '\u200B' === this.value)
                return rb;
            let sb = this.parent;
            for (; sb && !sb.captureSelection;)
                sb = sb.parent;
            return (null == sb ? void 0 : sb.captureSelection) || (this.id || (this.id = qb.makeID()), rb.atomID = this.id), rb;
        }
        createMathfieldBox(qb, rb, sb) {
            const tb = new nb(sb, rb, {
                type: 'mathfield',
                mode: this.mode,
                maxFontSize: qb.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: qb.letterShapeStyle,
                    fontSize: Math.max(1, qb.size + qb.mathstyle.sizeDelta)
                },
                classes: ''
            });
            return qb.isTight && (tb.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (tb.italic = 0), tb.right = tb.italic, this.bind(qb, tb), je(tb, {
                type: 'mord'
            });
        }
        createBox(qb, rb) {
            var sb, tb, ub, vb;
            const wb = null !== (sb = this.value) && void 0 !== sb ? sb : this.body,
                xb = function(yb) {
                    return eb.includes(yb);
                }(this.type) ? this.type : void 0;
            let yb = null !== (tb = null == rb ? void 0 : rb.classes) && void 0 !== tb ? tb : '';
            'text' === this.mode && (yb += ' ML__text');
            const zb = 'string' == typeof wb || void 0 === wb ? new hb(null !== (ub = wb) && void 0 !== ub ? ub : null, {
                type: xb,
                mode: this.mode,
                maxFontSize: qb.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: qb.letterShapeStyle,
                    fontSize: Math.max(1, qb.size + qb.mathstyle.sizeDelta)
                },
                classes: yb,
                newList: null == rb ? void 0 : rb.newList
            }) : null !== (vb = pb.createBox(qb, wb, {
                type: xb,
                mode: this.mode,
                style: this.style,
                classes: yb,
                newList: null == rb ? void 0 : rb.newList
            })) && void 0 !== vb ? vb : new hb(null);
            return qb.isTight && (zb.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (zb.italic = 0), zb.right = zb.italic, this.bind(qb, zb), this.caret && (this.superscript || this.subscript || (zb.caret = this.caret)), zb;
        }
        isDigit() {
            var qb;
            return 'mord' === this.type && this.value ? /^[\d,.]$/.test(this.value) : 'group' === this.type && 2 === (null === (qb = this.body) || void 0 === qb ? void 0 : qb.length) && 'first' === this.body[0].type && ',' === this.body[1].value;
        }
        asDigit() {
            var qb;
            return 'mord' === this.type && this.value && /^[\d,.]$/.test(this.value) ? this.value : 'group' === this.type && 2 === (null === (qb = this.body) || void 0 === qb ? void 0 : qb.length) && 'first' === this.body[0].type && ',' === this.body[1].value ? '.' : '';
        }
        constructor(qb, rb, sb) {
            var tb, ub, vb, wb, xb, yb;
            this.id = void 0, this.verbatimLatex = void 0, this._isDirty = !1, this._changeCounter = 0, this.subsupPlacement = void 0, this.explicitSubsupPlacement = !1, this.skipBoundary = !1, this.captureSelection = !1, this.type = qb, this.context = rb, 'string' == typeof(null == sb ? void 0 : sb.value) && (this.value = sb.value), this.command = null !== (ub = null !== (tb = null == sb ? void 0 : sb.command) && void 0 !== tb ? tb : this.value) && void 0 !== ub ? ub : '', this.mode = null !== (vb = null == sb ? void 0 : sb.mode) && void 0 !== vb ? vb : 'math', this.isFunction = null !== (wb = null == sb ? void 0 : sb.isFunction) && void 0 !== wb && wb, this.subsupPlacement = null == sb ? void 0 : sb.limits, this.style = null !== (xb = null == sb ? void 0 : sb.style) && void 0 !== xb ? xb : {}, this.displayContainsHighlight = null !== (yb = null == sb ? void 0 : sb.displayContainsHighlight) && void 0 !== yb && yb, (null == sb ? void 0 : sb.serialize) && (pb.customSerializer[sb.command] = sb.serialize);
        }
    }

    function _qb(rb, sb) {
        if (!rb || 0 === rb.length)
            return '';
        if ('first' === rb[0].type) {
            if (1 === rb.length)
                return '';
            rb = rb.slice(1);
        }
        return 0 === rb.length ? '' : at(Ke(rb, 'cssClass').map(rb => at(Ke(rb, 'color').map(rb => at(function(tb) {
            const ub = [];
            let vb = [],
                wb = 'NONE';
            for (const xb of tb)
                'first' !== xb.type && (xb.mode !== wb ? (vb.length > 0 && ub.push(vb), vb = [xb], wb = xb.mode) : vb.push(xb));
            return vb.length > 0 && ub.push(vb), ub;
        }(rb).map(rb => db.serialize(rb, sb)))))));
    }

    function _qb(rb, sb, tb) {
        var ub, vb, wb, xb;

        function yb(zb) {
            return 'text' === zb.mode;
        }
        if (!sb || 0 === sb.length)
            return null;
        const yb = new $(rb, null == tb ? void 0 : tb.style),
            zb = !yb.atomIdsSettings || !yb.atomIdsSettings.groupNumbers;
        let Ab, Bb = [],
            Cb = null !== (ub = null == tb ? void 0 : tb.newList) && void 0 !== ub && ub;
        if (1 === sb.length) {
            const Db = sb[0],
                Eb = Db.render(yb, {
                    newList: Cb
                });
            Eb && (zb && Db.isSelected && Eb.selected(!0), Bb = [Eb]);
        } else {
            let Db = '',
                Eb = !0;
            for (const Fb of sb) {
                (null === (vb = yb.atomIdsSettings) || void 0 === vb ? void 0 : vb.groupNumbers) && Db && (Eb && Fb.isDigit() || !Eb && _yb(Fb)) && (yb.atomIdsSettings.overrideID = Db);
                const Gb = Fb.render(yb, {
                    newList: Cb
                });
                yb.atomIdsSettings && (yb.atomIdsSettings.overrideID = void 0), Gb && (Cb = 'group' === Fb.type && !Fb.boxType, (null === (wb = yb.atomIdsSettings) || void 0 === wb ? void 0 : wb.groupNumbers) && ((Fb.isDigit() || _yb(Fb)) && (Db && Eb === Fb.isDigit() || (Eb = Fb.isDigit(), Db = null !== (xb = Fb.id) && void 0 !== xb ? xb : '')), !Db || (Fb.isDigit() || _yb(Fb)) && Fb.hasEmptyBranch('superscript') && Fb.hasEmptyBranch('subscript') || (Db = '')), zb && Fb.isSelected && Gb.selected(!0), Bb.push(Gb));
            }
        }
        return 0 === Bb.length ? null : (tb || yb.isTight || Bb.length > 1 ? (Ab = new hb(Bb, {
            isTight: yb.isTight,
            ...null != tb ? tb : {}
        }), Ab.isSelected = Bb.every(rb => rb.isSelected)) : Ab = Bb[0], Ab.wrap(yb).wrap(rb));
    }
    pb.customSerializer = {};
    class qb extends pb {
        static fromJson(rb, sb) {
            return new qb(rb.command, rb.body, sb, {
                accentChar: rb.accentChar,
                svgAccent: rb.svgAccent,
                style: rb.style
            });
        }
        toJson() {
            return {
                ...super.toJson(),
                accentChar: this.accent,
                svgAccent: this.svgAccent
            };
        }
        render(rb) {
            var sb;
            const tb = new $(rb, this.style, 'cramp'),
                ub = null !== (sb = pb.createBox(tb, this.body)) && void 0 !== sb ? sb : new hb(null);
            let vb = 0;
            !this.hasEmptyBranch('body') && 2 === this.body.length && this.body[1].isCharacterBox() && (vb = ub.skew);
            let wb, xb = Math.min(ub.height, 0.431);
            if (this.svgAccent)
                wb = He(this.svgAccent), xb = tb.metrics.bigOpSpacing1 - xb;
            else if (this.accent) {
                const yb = new hb(this.accent, {
                    fontFamily: 'Main-Regular'
                });
                yb.italic = 0;
                const zb = 8407 === this.accent ? ' ML__accent-vec' : '';
                wb = new hb(new hb(yb), {
                    classes: 'ML__accent-body' + zb
                });
            }
            wb = new ib({
                shift: 0,
                children: [{
                        box: new hb(ub)
                    },
                    -xb,
                    {
                        box: wb,
                        marginLeft: ub.left + 2 * vb,
                        classes: ['ML__center']
                    }
                ]
            });
            const _yb = new hb(wb, {
                newList: !0,
                type: 'mord'
            });
            return this.caret && (_yb.caret = this.caret), this.bind(tb, _yb.wrap(tb)), this.attachSupsub(tb, {
                base: _yb
            });
        }
        constructor(rb, sb, tb, ub) {
            super('accent', tb, {
                command: rb,
                style: ub.style
            }), ub.accentChar ? this.accent = ub.accentChar : this.svgAccent = null == ub ? void 0 : ub.svgAccent, this.body = sb, this.skipBoundary = !0;
        }
    }
    const rb = {
            '(': ')',
            '{': '}',
            '[': ']',
            '|': '|',
            '\\lbrace': '\\rbrace',
            '\\lparen': '\\rparen',
            '\\{': '\\}',
            '\\langle': '\\rangle',
            '\\lfloor': '\\rfloor',
            '\\lceil': '\\rceil',
            '\\vert': '\\vert',
            '\\lvert': '\\rvert',
            '\\Vert': '\\Vert',
            '\\lVert': '\\rVert',
            '\\lbrack': '\\rbrack',
            '\\ulcorner': '\\urcorner',
            '\\llcorner': '\\lrcorner',
            '\\lgroup': '\\rgroup',
            '\\lmoustache': '\\rmoustache'
        },
        sb = Object.fromEntries(Object.entries(rb).map(([tb, ub]) => [
            ub,
            tb
        ]));

    function vb(wb) {
        var xb;
        return null !== (xb = {
            '[': 91,
            ']': 93,
            '(': 40,
            ')': 41,
            '\\mid': 8739,
            '|': 8739,
            '\u2223': 8739,
            '\u2225': 8741,
            '\\|': 8739,
            '\\{': 123,
            '\\}': 125,
            '\\lbrace': 123,
            '\\rbrace': 125,
            '\\lparen': 40,
            '\\rparen': 41,
            '\\lbrack': 91,
            '\\rbrack': 93,
            '\\vert': 8739,
            '\\lvert': 8739,
            '\\mvert': 8739,
            '\\rvert': 8739,
            '\\Vert': 8741,
            '\\lVert': 8741,
            '\\mVert': 8741,
            '\\rVert': 8741,
            '\\parallel': 8741,
            '\\shortparallel': 8741,
            '\\langle': 10216,
            '\\rangle': 10217,
            '\\lfloor': 8970,
            '\\rfloor': 8971,
            '\\lceil': 8968,
            '\\rceil': 8969,
            '\\ulcorner': 9484,
            '\\urcorner': 9488,
            '\\llcorner': 9492,
            '\\lrcorner': 9496,
            '\\lgroup': 10222,
            '\\rgroup': 10223,
            '\\lmoustache': 9136,
            '\\rmoustache': 9137,
            '\\surd': 8730
        } [wb]) && void 0 !== xb ? xb : wb.codePointAt(0);
    }

    function vb(wb, xb, yb, zb, Ab) {
        const Bb = new $(zb, null == Ab ? void 0 : Ab.style, 'textstyle'),
            Cb = new hb(mt(wb), {
                fontFamily: 'Size' + xb + '-Regular',
                classes: 'ML__delim-size' + xb
            }).wrap(Bb);
        return yb && Cb.setTop(0.25 * (1 - Bb.scalingFactor)), Cb;
    }

    function vb(wb, xb, yb, zb, Ab) {
        var Bb;
        let Cb, Db, Eb, Fb;
        Cb = Eb = Fb = mt(wb), Db = null;
        let Gb = 'Size1-Regular';
        '\\vert' === wb || '\\lvert' === wb || '\\rvert' === wb || '\\mvert' === wb || '\\mid' === wb ? Eb = Cb = Fb = 8739 : '\\Vert' === wb || '\\lVert' === wb || '\\rVert' === wb || '\\mVert' === wb || '\\|' === wb ? Eb = Cb = Fb = 8741 : '\\uparrow' === wb ? Eb = Fb = 9168 : '\\Uparrow' === wb ? Eb = Fb = 8214 : '\\downarrow' === wb ? Cb = Eb = 9168 : '\\Downarrow' === wb ? Cb = Eb = 8214 : '\\updownarrow' === wb ? (Cb = 8593, Eb = 9168, Fb = 8595) : '\\Updownarrow' === wb ? (Cb = 8657, Eb = 8214, Fb = 8659) : '[' === wb || '\\lbrack' === wb ? (Cb = 9121, Eb = 9122, Fb = 9123, Gb = 'Size4-Regular') : ']' === wb || '\\rbrack' === wb ? (Cb = 9124, Eb = 9125, Fb = 9126, Gb = 'Size4-Regular') : '\\lfloor' === wb || '\u230A' === wb ? (Eb = Cb = 9122, Fb = 9123, Gb = 'Size4-Regular') : '\\lceil' === wb || '\u2308' === wb ? (Cb = 9121, Eb = Fb = 9122, Gb = 'Size4-Regular') : '\\rfloor' === wb || '\u230B' === wb ? (Eb = Cb = 9125, Fb = 9126, Gb = 'Size4-Regular') : '\\rceil' === wb || '\u2309' === wb ? (Cb = 9124, Eb = Fb = 9125, Gb = 'Size4-Regular') : '(' === wb || '\\lparen' === wb ? (Cb = 9115, Eb = 9116, Fb = 9117, Gb = 'Size4-Regular') : ')' === wb || '\\rparen' === wb ? (Cb = 9118, Eb = 9119, Fb = 9120, Gb = 'Size4-Regular') : '\\{' === wb || '\\lbrace' === wb ? (Cb = 9127, Db = 9128, Fb = 9129, Eb = 9130, Gb = 'Size4-Regular') : '\\}' === wb || '\\rbrace' === wb ? (Cb = 9131, Db = 9132, Fb = 9133, Eb = 9130, Gb = 'Size4-Regular') : '\\lgroup' === wb || '\u27EE' === wb ? (Cb = 9127, Fb = 9129, Eb = 9130, Gb = 'Size4-Regular') : '\\rgroup' === wb || '\u27EF' === wb ? (Cb = 9131, Fb = 9133, Eb = 9130, Gb = 'Size4-Regular') : '\\lmoustache' === wb || '\u23B0' === wb ? (Cb = 9127, Fb = 9133, Eb = 9130, Gb = 'Size4-Regular') : '\\rmoustache' === wb || '\u23B1' === wb ? (Cb = 9131, Fb = 9129, Eb = 9130, Gb = 'Size4-Regular') : '\\surd' === wb ? (Cb = 57345, Fb = 9143, Eb = 57344, Gb = 'Size4-Regular') : '\\ulcorner' === wb ? (Cb = 9484, Eb = Fb = 32) : '\\urcorner' === wb ? (Cb = 9488, Eb = Fb = 32) : '\\llcorner' === wb ? (Fb = 9492, Eb = Cb = 32) : '\\lrcorner' === wb && (Cb = 9496, Eb = Cb = 32);
        const Hb = _e(Cb, Gb),
            Ib = Hb.height + Hb.depth,
            Jb = _e(Eb, Gb),
            Kb = Jb.height + Jb.depth,
            Lb = _e(Fb, Gb),
            Mb = Lb.height + Lb.depth;
        let Nb = 0,
            _Ob = 1;
        if (null !== Db) {
            const Pb = _e(Db, Gb);
            Nb = Pb.height + Pb.depth, _Ob = 2;
        }
        const Pb = Ib + Mb + Nb,
            _Qb = Math.max(0, Math.ceil((xb - Pb) / (_Ob * Kb))),
            _Rb = Pb + _Qb * _Ob * Kb;
        let _Sb = 0.25;
        yb && (_Sb *= zb.scalingFactor);
        const Tb = _Rb / 2 - _Sb,
            Ub = [];
        Ub.push({
            box: new hb(Fb, {
                fontFamily: Gb
            })
        }), Ub.push(-0.008);
        const Vb = new hb(Eb, {
            fontFamily: Gb
        });
        if (null === Db)
            for (let Wb = 0; Wb < _Qb; Wb++)
                Ub.push({
                    box: Vb
                });
        else {
            for (let Xb = 0; Xb < _Qb; Xb++)
                Ub.push({
                    box: Vb
                });
            Ub.push(-0.008), Ub.push({
                box: new hb(Db, {
                    fontFamily: Gb
                })
            }), Ub.push(-0.008);
            for (let Yb = 0; Yb < _Qb; Yb++)
                Ub.push({
                    box: Vb
                });
        }
        Ub.push(-0.008), Ub.push({
            box: new hb(Cb, {
                fontFamily: Gb
            })
        });
        let Wb = '';
        'Size1-Regular' === Gb ? Wb = ' delim-size1' : 'Size4-Regular' === Gb && (Wb = ' delim-size4');
        const Xb = new ib({
            bottom: Tb,
            children: Ub
        }, {
            classes: Wb
        });
        return new hb(Xb, {
            ...null != Ab ? Ab : {},
            classes: (null !== (Bb = null == Ab ? void 0 : Ab.classes) && void 0 !== Bb ? Bb : '') + ' ML__delim-mult'
        });
    }
    const vb = new Set([
            '(',
            ')',
            '\\lparen',
            '\\rparen',
            '[',
            ']',
            '\\lbrack',
            '\\rbrack',
            '\\{',
            '\\}',
            '\\lbrace',
            '\\rbrace',
            '\\lfloor',
            '\\rfloor',
            '\\lceil',
            '\\rceil',
            '\\surd',
            '\u230A',
            '\u230B',
            '\u2308',
            '\u2309'
        ]),
        wb = new Set([
            '\\uparrow',
            '\\downarrow',
            '\\updownarrow',
            '\\Uparrow',
            '\\Downarrow',
            '\\Updownarrow',
            '|',
            '\\|',
            '\\vert',
            '\\Vert',
            '\\lvert',
            '\\rvert',
            '\\lVert',
            '\\rVert',
            '\\mvert',
            '\\mid',
            '\\lgroup',
            '\\rgroup',
            '\\lmoustache',
            '\\rmoustache',
            '\u27EE',
            '\u27EF',
            '\u23B0',
            '\u23B1'
        ]),
        xb = new Set([
            '<',
            '>',
            '\\langle',
            '\\rangle',
            '/',
            '\\backslash',
            '\\lt',
            '\\gt'
        ]),
        yb = [
            0,
            1.2,
            1.8,
            2.4,
            3
        ],
        zb = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            }
        ],
        Ab = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'stack'
            }
        ],
        Bb = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            },
            {
                type: 'stack'
            }
        ];

    function Cb(Db, Eb, Fb, Gb, Hb, Ib) {
        var Jb;
        if (!Eb || 0 === Eb.length || '.' === Eb)
            return _Cb(Hb, Db, Db);
        let Kb;
        '<' === Eb || '\\lt' === Eb ? Eb = '\\langle' : '>' !== Eb && '\\gt' !== Eb || (Eb = '\\rangle'), Kb = xb.has(Eb) ? zb : vb.has(Eb) ? Bb : Ab;
        const Lb = function(Mb, Nb, Ob, Pb) {
                for (let Qb = {
                        '-4': 0,
                        '-3': 1,
                        0: 2
                    } [Pb.mathstyle.sizeDelta]; Qb < Ob.length && 'stack' !== Ob[Qb].type; Qb++) {
                    const Rb = _e(Mb, 'small' === (Hb = Ob[Qb]).type ? 'Main-Regular' : 'large' === Hb.type ? 'Size' + Hb.size + '-Regular' : 'Size4-Regular');
                    if (Rb.defaultMetrics)
                        return {
                            type: 'small',
                            mathstyle: 'scriptstyle'
                        };
                    let Sb = Rb.height + Rb.depth;
                    if ('small' === Ob[Qb].type && ('scriptscriptstyle' === Ob[Qb].mathstyle ? Sb *= W[Math.max(1, Pb.size - 2)] : 'scriptstyle' === Ob[Qb].mathstyle && (Sb *= W[Math.max(1, Pb.size - 1)])), Sb > Nb)
                        return Ob[Qb];
                }
                var Rb;
                return Ob[Ob.length - 1];
            }(mt(Eb), Fb, Kb, Hb),
            Mb = new $(Hb, null == Ib ? void 0 : Ib.style, Lb.mathstyle);
        return 'small' === Lb.type ? function(Nb, Ob, Pb, Qb) {
            const Rb = new hb(mt(Nb), {
                fontFamily: 'Main-Regular'
            }).wrap(Ob, Qb);
            return Pb && Rb.setTop(0.25 * (1 - Ob.scalingFactor)), Rb;
        }(Eb, Mb, Gb, {
            type: Db,
            classes: 'ML__small-delim ' + (null !== (Jb = null == Ib ? void 0 : Ib.classes) && void 0 !== Jb ? Jb : '')
        }) : 'large' === Lb.type ? ft(Eb, Lb.size, Gb, Mb, {
            ...Ib,
            type: Db
        }) : yt(Eb, Fb, Gb, Mb, {
            ...Ib,
            type: Db
        });
    }

    function Cb(Db, Eb, Fb, Gb, Hb, Ib) {
        if ('.' === Eb)
            return _Cb(Hb, Db, null == Ib ? void 0 : Ib.classes);
        const Jb = 0.25 * Hb.scalingFactor,
            Kb = Math.max(Fb - Jb, Gb + Jb);
        return St(Db, Eb, Math.max(Kb / 500 * 901, 2 * Kb - 0.5), !0, Hb, Ib);
    }

    function _Cb(Db, Eb, Fb) {
        const Gb = new $(Db, void 0, 'textstyle');
        return new hb(null, {
            classes: ' nulldelimiter ' + (null != Fb ? Fb : ''),
            type: Eb
        }).wrap(Gb);
    }
    class Cb extends pb {
        static fromJson(Db, Eb) {
            return new Cb(Db.command, Eb, Db);
        }
        toJson() {
            const Db = {};
            return this.skipBoundary || (Db.skipBoundary = !1), this.subsupPlacement && (Db.subsupPlacement = this.subsupPlacement), this.svgAbove && (Db.svgAbove = this.svgAbove), this.svgBelow && (Db.svgBelow = this.svgBelow), this.svgBody && (Db.svgBody = this.svgBody), 'mord' !== this.boxType && (Db.boxType = this.boxType), this.paddedBody && (Db.paddedBody = !0), this.paddedLabels && (Db.paddedLabels = !0), {
                ...super.toJson(),
                ...Db
            };
        }
        render(Db) {
            let Eb = this.svgBody ? He(this.svgBody) : pb.createBox(Db, this.body, {
                newList: !0
            });
            const Fb = new $(Db, this.style, 'scriptstyle');
            let Gb = null;
            this.svgAbove ? Gb = He(this.svgAbove) : this.above && (Gb = pb.createBox(Fb, this.above, {
                newList: !0
            }));
            let Hb = null;
            this.svgBelow ? Hb = He(this.svgBelow) : this.below && (Hb = pb.createBox(Fb, this.below, {
                newList: !0
            })), this.paddedBody && (Eb = new hb([
                Lt(Db, 'mopen'),
                Eb,
                Lt(Db, 'mclose')
            ], {
                newList: !0
            }));
            let Ib = function(Jb, Kb) {
                if (!Kb.base)
                    return null;
                if (!Kb.above && !Kb.below) {
                    const Lb = new hb(Kb.base, {
                        type: Kb.type
                    });
                    return Lb.setStyle('position', 'relative'), Lb;
                }
                let Lb = 0;
                Kb.above && (Lb = -Kb.above.depth + Jb.metrics.bigOpSpacing2);
                let Mb = null;
                const Nb = Kb.base,
                    Ob = ['ML__center'];
                if (Kb.paddedAboveBelow && Ob.push('ML__label_padding'), Kb.below && Kb.above) {
                    const Pb = Jb.metrics.bigOpSpacing5 + Kb.below.height + Kb.below.depth + Nb.depth + 0;
                    Mb = new ib({
                        bottom: Pb,
                        children: [
                            Jb.metrics.bigOpSpacing5,
                            {
                                box: Kb.below,
                                classes: Ob
                            },
                            {
                                box: Nb,
                                classes: ['ML__center']
                            },
                            Lb,
                            {
                                box: Kb.above,
                                classes: Ob
                            },
                            Jb.metrics.bigOpSpacing5
                        ]
                    });
                } else
                    Kb.below ? Mb = new ib({
                        top: Nb.height - 0,
                        children: [
                            Jb.metrics.bigOpSpacing5,
                            {
                                box: Kb.below,
                                classes: Ob
                            },
                            {
                                box: Nb,
                                classes: ['ML__center']
                            }
                        ]
                    }) : Kb.above && (Mb = new ib({
                        bottom: Nb.depth + 0,
                        children: [{
                                box: Nb,
                                classes: ['ML__center']
                            },
                            Lb,
                            {
                                box: Kb.above,
                                classes: Ob
                            },
                            Jb.metrics.bigOpSpacing5
                        ]
                    }));
                return new hb(Mb, {
                    type: Kb.type
                });
            }(Db, {
                base: Eb,
                above: Gb,
                below: Hb,
                type: 'mbin' === this.boxType || 'mrel' === this.boxType ? this.boxType : 'mord',
                paddedAboveBelow: this.paddedLabels
            });
            return Ib ? (Ib = 'over-under' === this.subsupPlacement ? this.attachLimits(Db, {
                base: Ib,
                type: Ib.type
            }) : this.attachSupsub(Db, {
                base: Ib
            }), this.caret && (Ib.caret = this.caret), this.bind(Db, Ib)) : null;
        }
        constructor(Db, Eb, Fb) {
            var Gb, Hb, Ib, Jb;
            super('overunder', Eb, {
                command: Db,
                serialize: Fb.serialize,
                style: Fb.style
            }), this.skipBoundary = null === (Gb = Fb.skipBoundary) || void 0 === Gb || Gb, this.subsupPlacement = Fb.supsubPlacement, this.body = Fb.body, this.svgAbove = Fb.svgAbove, this.svgBelow = Fb.svgBelow, this.svgBody = Fb.svgBody, this.above = Fb.above, this.below = Fb.below, this.boxType = null !== (Hb = Fb.boxType) && void 0 !== Hb ? Hb : 'mord', this.paddedBody = null !== (Ib = Fb.paddedBody) && void 0 !== Ib && Ib, this.paddedLabels = null !== (Jb = Fb.paddedLabels) && void 0 !== Jb && Jb;
        }
    }
    class Db extends pb {
        static fromJson(Eb, Fb) {
            return new Db(Eb.body, Fb, Eb);
        }
        toJson() {
            const Eb = {};
            return this.mathstyleName && (Eb.mathstyleName = this.mathstyleName), this.latexOpen && (Eb.latexOpen = this.latexOpen), this.latexClose && (Eb.latexClose = this.latexClose), this.cssId && (Eb.cssId = this.cssId), this.htmlData && (Eb.htmlData = this.htmlData), this.htmlStyle && (Eb.htmlStyle = this.htmlStyle), this.customClass && (Eb.customClass = this.customClass), this.boxType && (Eb.boxType = this.boxType), this.captureSelection && (Eb.captureSelection = !0), this.changeMode && (Eb.changeMode = !0), {
                ...super.toJson(),
                ...Eb
            };
        }
        render(Eb) {
            const Fb = new $(Eb, this.style, this.mathstyleName),
                Gb = pb.createBox(Fb, this.body, {
                    type: this.boxType,
                    classes: this.customClass,
                    mode: this.mode,
                    style: {
                        backgroundColor: this.style.backgroundColor
                    },
                    newList: !this.boxType
                });
            return Gb ? (this.cssId && (Gb.cssId = this.cssId), this.htmlData && (Gb.htmlData = this.htmlData), this.htmlStyle && (Gb.htmlStyle = this.htmlStyle), this.caret && (Gb.caret = this.caret), this.bind(Eb, Gb)) : null;
        }
        serialize(Eb) {
            let Fb = this.bodyToLatex(Eb);
            return 'string' == typeof this.latexOpen && (Fb = this.latexOpen + Fb + this.latexClose), this.htmlData && (Fb = `\\htmlData{${ this.htmlData }}{${ Fb }}`), this.htmlStyle && (Fb = `\\htmlStyle{${ this.htmlStyle }}{${ Fb }}`), this.customClass && (Fb = `\\class{${ this.customClass }}{${ Fb }}`), this.cssId && (Fb = `\\cssId{${ this.cssId }}{${ Fb }}`), Fb;
        }
        constructor(Eb, Fb, Gb) {
            var Hb, Ib, Jb;
            super('group', Fb, {
                command: null == Gb ? void 0 : Gb.command,
                mode: null !== (Hb = null == Gb ? void 0 : Gb.mode) && void 0 !== Hb ? Hb : 'math',
                serialize: null == Gb ? void 0 : Gb.serialize,
                style: null == Gb ? void 0 : Gb.style
            }), this.body = Eb, this.mathstyleName = null == Gb ? void 0 : Gb.mathstyleName, this.latexOpen = null == Gb ? void 0 : Gb.latexOpen, this.latexClose = null == Gb ? void 0 : Gb.latexClose, this.cssId = null == Gb ? void 0 : Gb.cssId, this.htmlData = null == Gb ? void 0 : Gb.htmlData, this.htmlStyle = null == Gb ? void 0 : Gb.htmlStyle, this.customClass = null == Gb ? void 0 : Gb.customClass, this.boxType = null == Gb ? void 0 : Gb.boxType, this.skipBoundary = !0, this.captureSelection = null !== (Ib = null == Gb ? void 0 : Gb.captureSelection) && void 0 !== Ib && Ib, this.changeMode = null !== (Jb = null == Gb ? void 0 : Gb.changeMode) && void 0 !== Jb && Jb, this.displayContainsHighlight = !1, Eb && 1 === Eb.length && ',' === Eb[0].command && (this.captureSelection = !0);
        }
    }
    class Eb extends pb {
        static fromJson(Fb, Gb) {
            return new Eb(Fb.command, Fb.style, Gb, Fb.width);
        }
        toJson() {
            const Fb = {};
            return this.width && (Fb.width = this.width), {
                ...super.toJson(),
                ...Fb
            };
        }
        render(Fb) {
            var Gb;
            let Hb;
            if (this.width)
                Hb = new hb(null, {
                    classes: 'mspace'
                }), Hb.left = Le(this.width.glue);
            else {
                const Ib = null !== (Gb = {
                    '\\qquad': 'qquad',
                    '\\quad': 'quad',
                    '\\enspace': 'enspace',
                    '\\;': 'thickspace',
                    '\\:': 'mediumspace',
                    '\\,': 'thinspace',
                    '\\!': 'negativethinspace'
                } [this.command]) && void 0 !== Gb ? Gb : 'mediumspace';
                Hb = new hb(null, {
                    classes: Ib
                });
            }
            return Hb = this.bind(Fb, Hb), this.caret && (Hb.caret = this.caret), Hb;
        }
        serialize(Fb) {
            var Gb;
            let Hb = null !== (Gb = this.command) && void 0 !== Gb ? Gb : '';
            return '\\hspace' === this.command || '\\hspace*' === this.command ? Number.isFinite(this.width) ? Hb += `{${ this.width }em'}` : Hb += '{0pt}' : Number.isFinite(this.width) && (Hb += ` ${ this.width }em`), Hb;
        }
        constructor(Fb, Gb, Hb, Ib) {
            super('spacing', Hb, {
                command: Fb,
                style: Gb
            }), this.width = Ib;
        }
    }
    class Fb extends pb {
        static fromJson(Gb, Hb) {
            var Ib;
            return new Fb(null !== (Ib = Gb.variant) && void 0 !== Ib ? Ib : '', Gb.body, Hb, Gb);
        }
        toJson() {
            const Gb = super.toJson();
            return this.variant && (Gb.variant = this.variant), this.leftDelim && (Gb.leftDelim = this.leftDelim), this.rightDelim && (Gb.rightDelim = this.rightDelim), Gb;
        }
        serialize(Gb) {
            var Hb, Ib;
            const Jb = this.matchingRightDelim();
            return 'left...right' === this.variant ? at([
                '\\left' + (null !== (Hb = this.leftDelim) && void 0 !== Hb ? Hb : '.'),
                this.bodyToLatex(Gb),
                '\\right' + Jb
            ]) : 'mleft...mright' === this.variant ? at([
                '\\mleft' + (null !== (Ib = this.leftDelim) && void 0 !== Ib ? Ib : '.'),
                this.bodyToLatex(Gb),
                '\\mright' + Jb
            ]) : at([
                this.leftDelim && '.' !== this.leftDelim ? this.leftDelim : '',
                this.bodyToLatex(Gb),
                Jb
            ]);
        }
        matchingRightDelim() {
            var Gb, Hb;
            if (this.rightDelim && '?' !== this.rightDelim)
                return this.rightDelim;
            const Ib = null !== (Gb = this.leftDelim) && void 0 !== Gb ? Gb : '.';
            return null !== (Hb = rb[Ib]) && void 0 !== Hb ? Hb : Ib;
        }
        render(Gb) {
            var Hb, Ib, Jb;
            const Kb = new $(Gb, this.style),
                Lb = new $(Gb, this.style, 'textstyle'),
                Mb = null !== (Hb = pb.createBox(Kb, this.body, {
                    newList: !0
                })) && void 0 !== Hb ? Hb : new hb(null, {
                    newList: !0
                }),
                Nb = Mb.height / Lb.scalingFactor,
                Ob = Mb.depth / Lb.scalingFactor,
                Pb = [];
            if (this.leftDelim && Pb.push(this.bind(Lb, Mt('mopen', this.leftDelim, Nb, Ob, Lb, {
                    classes: 'ML__open' + (this.containsCaret ? ' ML__contains-caret' : ''),
                    mode: this.mode,
                    style: this.style
                }))), Mb) {
                if (Mb.children)
                    for (let Qb = 0; Qb < Mb.children.length; Qb++) {
                        const Rb = Mb.children[Qb];
                        if (Rb.delim) {
                            const Sb = Rb.caret;
                            Mb.children[Qb] = this.bind(Kb, Mt('minner', Rb.delim, Nb, Ob, Kb)), Mb.children[Qb].caret = Sb;
                        }
                    }
                Pb.push(Mb);
            }
            if (this.rightDelim) {
                let Qb = this.containsCaret ? ' ML__contains-caret' : '',
                    Rb = this.rightDelim;
                '?' === Rb && (this.context.smartFence ? (Rb = this.matchingRightDelim(), Qb += ' ML__smart-fence__close') : Rb = '.'), Pb.push(this.bind(Lb, Mt('mclose', Rb, Nb, Ob, Lb, {
                    classes: Qb + ' ML__close',
                    mode: this.mode,
                    style: this.style
                })));
            }
            const Qb = null !== (Jb = 'mleft...mright' === this.variant || (null === (Ib = this.leftSibling) || void 0 === Ib ? void 0 : Ib.isFunction)) && void 0 !== Jb && Jb,
                Rb = new hb(Pb, {
                    type: Qb ? 'mclose' : 'minner',
                    classes: 'left-right'
                });
            return this.caret && (Rb.caret = this.caret), this.bind(Kb, Rb.wrap(Kb));
        }
        constructor(Gb, Hb, Ib, Jb) {
            super('leftright', Ib, {
                style: Jb.style,
                displayContainsHighlight: !0
            }), this.variant = Gb, this.body = Hb, this.leftDelim = Jb.leftDelim, this.rightDelim = Jb.rightDelim;
        }
    }
    class Gb extends pb {
        static fromJson(Hb, Ib) {
            const Jb = new Gb(Ib, Hb);
            for (const Kb of ob)
                Hb[Kb] && Jb.setChildren(Hb[Kb], Kb);
            return Jb;
        }
        toJson() {
            return super.toJson();
        }
        render(Hb) {
            var Ib;
            const Jb = this.leftSibling,
                Kb = new $(Hb, {
                    isPhantom: !0
                }),
                Lb = null !== (Ib = Jb.render(Kb)) && void 0 !== Ib ? Ib : new hb(null),
                Mb = new hb(null, {
                    height: Lb.height,
                    depth: Lb.depth
                });
            return this.attachSupsub(Hb, {
                base: Mb,
                isCharacterBox: Jb.isCharacterBox(),
                type: 'supsub'
            });
        }
        serialize(Hb) {
            return this.supsubToLatex(Hb);
        }
        constructor(Hb, Ib) {
            super('msubsup', Hb, {
                style: null == Ib ? void 0 : Ib.style
            });
        }
    }
    class Hb extends pb {
        static fromJson(Ib, Jb) {
            return new Hb(Jb, Ib);
        }
        toJson() {
            const Ib = super.toJson();
            return this.placeholderId && (Ib.placeholderId = this.placeholderId), this.value === this.context.placeholderSymbol && delete Ib.value, this.defaultValue && (Ib.defaultValue = this.defaultValue.map(Ib => Ib.toJson())), Ib;
        }
        render(Ib) {
            if ('function' == typeof Ib.renderPlaceholder)
                return Ib.renderPlaceholder(Ib, this);
            let Jb = '';
            return this.caret && (Jb += 'ML__placeholder-selected '), this.isSelected && (Jb += ' ML__selected '), this.createBox(Ib, {
                classes: Jb
            });
        }
        serialize(Ib) {
            var Jb;
            let Kb = null !== (Jb = this.value) && void 0 !== Jb ? Jb : '';
            return Kb === this.context.placeholderSymbol && (Kb = ''), `\\placeholder${ this.placeholderId ? `[${ this.placeholderId }]` : '' }${ this.defaultValue ? `[${ pb.serialize(this.defaultValue, Ib) }]` : '' }{${ Kb }}`;
        }
        constructor(Ib, Jb) {
            var Kb;
            const Lb = (null == Jb ? void 0 : Jb.value) || Ib.placeholderSymbol;
            super('placeholder', Ib, {
                mode: null !== (Kb = null == Jb ? void 0 : Jb.mode) && void 0 !== Kb ? Kb : 'math',
                style: null == Jb ? void 0 : Jb.style,
                value: Lb,
                command: '\\placeholder'
            }), this.captureSelection = !0, this.placeholderId = null == Jb ? void 0 : Jb.placeholderId, (null == Jb ? void 0 : Jb.default) && (this.defaultValue = null == Jb ? void 0 : Jb.default);
        }
    }
    class Ib extends pb {
        static fromJson(Jb, Kb) {
            return new Ib(Jb.command, Kb);
        }
        toJson() {
            return super.toJson();
        }
        render(Jb) {
            const Kb = this.createBox(Jb, {
                classes: 'ML__error'
            });
            return this.caret && (Kb.caret = this.caret), Kb;
        }
        constructor(Jb, Kb) {
            super('error', Kb, {
                value: Jb,
                command: Jb,
                mode: 'math'
            }), this.verbatimLatex = Jb;
        }
    }
    class Jb extends pb {
        static fromJson(Kb, Lb) {
            return new Jb(Kb.command, Lb, Kb);
        }
        toJson() {
            const Kb = super.toJson();
            return this.expand && (Kb.expand = !0), void 0 !== this.captureSelection && (Kb.captureSelection = this.captureSelection), this.macroArgs && (Kb.args = this.macroArgs), Kb;
        }
        serialize(Kb) {
            return Kb.expandMacro && this.expand ? this.bodyToLatex(Kb) : this.command + this.macroArgs;
        }
        render(Kb) {
            const Lb = pb.createBox(Kb, this.body);
            return Lb ? (this.caret && (Lb.caret = this.caret), this.bind(Kb, Lb)) : null;
        }
        constructor(Kb, Lb, Mb) {
            var Nb, Ob;
            super('macro', Lb, {
                command: Kb
            }), this.body = Mb.body, void 0 === Mb.captureSelection ? Mb.args ? this.captureSelection = !1 : this.captureSelection = !0 : this.captureSelection = Mb.captureSelection, this.macroArgs = null !== (Nb = Mb.args) && void 0 !== Nb ? Nb : '', this.expand = null !== (Ob = Mb.expand) && void 0 !== Ob && Ob;
        }
    }
    class Kb extends pb {
        static fromJson(Lb, Mb) {
            return new Kb(Lb.command, Lb.value, Lb.style, Mb);
        }
        toJson() {
            return super.toJson();
        }
        render(Lb) {
            const Mb = this.createBox(Lb);
            return this.caret && (Mb.caret = this.caret), Mb;
        }
        serialize(Lb) {
            var Mb;
            return null !== (Mb = this.verbatimLatex) && void 0 !== Mb ? Mb : _bd('text', this.value.codePointAt(0));
        }
        constructor(Lb, Mb, Nb, Ob) {
            super('text', Ob, {
                command: Lb,
                mode: 'text',
                displayContainsHighlight: !0
            }), this.value = Mb, this.verbatimLatex = Mb, this.applyStyle(Nb);
        }
    }

    function Lb(Mb) {
        return !/^<({|}|\$|\$\$|space)>$/.test(Mb);
    }
    class Lb {
        get currentContext() {
            return this._currentParsingContext;
        }
        get rootContext() {
            let Mb = this._currentParsingContext;
            for (; Mb.parent;)
                Mb = Mb.parent;
            return Mb;
        }
        beginContext(Mb) {
            var Nb, Ob, Pb;
            const Qb = {
                parent: this.currentContext,
                mathlist: [],
                style: {
                    ...this.currentContext.style
                },
                parseMode: null !== (Nb = null == Mb ? void 0 : Mb.mode) && void 0 !== Nb ? Nb : this.currentContext.parseMode,
                mathstyle: null !== (Ob = null == Mb ? void 0 : Mb.mathstyle) && void 0 !== Ob ? Ob : this.currentContext.mathstyle,
                registers: null,
                tabular: null !== (Pb = null == Mb ? void 0 : Mb.tabular) && void 0 !== Pb && Pb
            };
            this._currentParsingContext = Qb;
        }
        endContext() {
            this._currentParsingContext = this._currentParsingContext.parent;
        }
        onError(Mb) {
            this.errors.push({
                before: it(this.tokens.slice(this.index, this.index + 10)),
                after: it(this.tokens.slice(Math.max(0, this.index - 10), this.index)),
                ...Mb
            });
        }
        get mathlist() {
            return this.currentContext.mathlist;
        }
        set mathlist(Mb) {
            this.currentContext.mathlist = Mb;
        }
        get parseMode() {
            return this.currentContext.parseMode;
        }
        set parseMode(Mb) {
            this.currentContext.parseMode = Mb;
        }
        get tabularMode() {
            return this.currentContext.tabular;
        }
        get style() {
            let Mb = this.currentContext;
            for (; Mb;) {
                if (Mb.style)
                    return Mb.style;
                Mb = Mb.parent;
            }
            return {};
        }
        set style(Mb) {
            this.currentContext.style = Mb;
        }
        getRegister(Mb) {
            var Nb, Ob, Pb;
            if (Mb.startsWith('global '))
                return null !== (Ob = null === (Nb = this.rootContext.registers) || void 0 === Nb ? void 0 : Nb[Mb.slice(7)]) && void 0 !== Ob ? Ob : 0;
            let Qb = this.currentContext;
            for (; Qb;) {
                if (null === (Pb = Qb.registers) || void 0 === Pb ? void 0 : Pb[Mb])
                    return Qb.registers[Mb];
                Qb = Qb.parent;
            }
            return 0;
        }
        setRegister(Mb, Nb) {
            var Ob;
            if (Mb.startsWith('global ')) {
                Mb = Mb.slice(7);
                let Pb = this.currentContext;
                for (; Pb;)
                    (null === (Ob = Pb.registers) || void 0 === Ob ? void 0 : Ob[Mb]) && delete Pb.registers[Mb], Pb = Pb.parent;
                this.rootContext.registers[Mb] = Nb;
            } else
                this.currentContext.registers || (this.currentContext.registers = {}), this.currentContext.registers[Mb] = Nb;
        }
        end() {
            return this.endCount++, this.index >= this.tokens.length || this.endCount > 1000;
        }
        get() {
            return this.endCount = 0, this.index < this.tokens.length ? this.tokens[this.index++] : '';
        }
        peek() {
            return this.tokens[this.index];
        }
        match(Mb) {
            return this.tokens[this.index] === Mb && (this.index++, !0);
        }
        lastSubsupAtom() {
            let Mb;
            if (this.mathlist.length > 0) {
                if (Mb = this.mathlist[this.mathlist.length - 1], 'msubsup' === Mb.type)
                    return Mb;
                if (void 0 !== Mb.subsupPlacement)
                    return Mb;
            }
            return Mb = new Gb(this.context, {
                style: this.style
            }), this.mathlist.push(Mb), Mb;
        }
        hasPattern(Mb) {
            return Mb.test(this.tokens[this.index]);
        }
        hasInfixCommand() {
            var Mb;
            const {
                index: Nb
            } = this;
            if (Nb < this.tokens.length && this.tokens[Nb].startsWith('\\')) {
                const Ob = this.context.getDefinition(this.tokens[Nb], this.parseMode);
                return !(!Ob || 'symbol' === Ob.definitionType) && !(Ob.ifMode && !Ob.ifMode.includes(this.parseMode)) && null !== (Mb = Ob.infix) && void 0 !== Mb && Mb;
            }
            return !1;
        }
        matchColumnSeparator() {
            const {
                index: Mb
            } = this;
            return !(!this.tabularMode || '&' !== this.tokens[Mb] || (this.index++, 0));
        }
        matchRowSeparator() {
            const {
                index: Mb
            } = this;
            return !(!this.tabularMode || '\\\\' !== this.tokens[Mb] && '\\cr' !== this.tokens[Mb] || (this.index++, 0));
        }
        placeholder() {
            var Mb;
            const Nb = null === (Mb = this.args) || void 0 === Mb ? void 0 : Mb.call(this, '?');
            return Nb ? _Mb(Nb, this.context, {
                parseMode: this.parseMode,
                mathstyle: 'textstyle'
            }) : [new Hb(this.context, {
                mode: this.parseMode,
                style: this.style
            })];
        }
        matchWhitespace() {
            let Mb = !1;
            for (; this.match('<space>');)
                Mb = !0;
            return Mb;
        }
        skipUntilToken(Mb) {
            let Nb = this.tokens[this.index];
            for (; Nb && Nb !== Mb;)
                Nb = this.tokens[++this.index];
            Nb === Mb && this.index++;
        }
        skipFiller() {
            let Mb = !1;
            do {
                const Nb = this.matchWhitespace(),
                    Ob = this.match('\\relax');
                Mb = !Nb && !Ob;
            } while (!Mb);
        }
        matchKeyword(Mb) {
            const Nb = this.index;
            let Ob = this.end(),
                Pb = '';
            for (; !Ob;) {
                const Qb = this.get();
                Et(Qb) ? (Pb += Qb, Ob = this.end() || Pb.length >= Mb.length) : Ob = !0;
            }
            const Qb = Mb.toUpperCase() === Pb.toUpperCase();
            return Qb || (this.index = Nb), Qb;
        }
        scanString() {
            let Mb = '';
            for (; !this.end();)
                if (this.match('<space>'))
                    Mb += ' ';
                else {
                    const Nb = this.peek();
                    if (']' === Nb)
                        break;
                    if (Et(Nb))
                        Mb += this.get();
                    else {
                        if (!Nb.startsWith('\\'))
                            break;
                        this.onError({
                            code: 'unbalanced-braces'
                        }), Mb += this.get();
                    }
                }
            return Mb;
        }
        scanBalancedString() {
            let Mb = '',
                Nb = this.end(),
                Ob = 1;
            for (; !Nb;) {
                if (this.match('<space>'))
                    Mb += ' ';
                else {
                    const Pb = this.get();
                    '<{>' === Pb ? (Mb += '{', Ob += 1) : '<}>' === Pb ? (Ob -= 1, Ob > 0 ? Mb += '}' : this.index -= 1) : Mb += '<$>' === Pb ? '$' : '<$$>' === Pb ? '$$' : Pb;
                }
                Nb = 0 === Ob || this.end();
            }
            return Mb;
        }
        matchLiteralArg() {
            var Mb;
            let Nb = '';
            if (this.match('<{>')) {
                let Ob = 1;
                for (; Ob > 0 && !this.end();) {
                    const Pb = this.get();
                    '<}>' === Pb ? (Ob -= 1, Ob > 0 && (Nb += '}')) : '<{>' === Pb ? (Ob += 1, Nb += '{') : Nb += null !== (Mb = {
                        '<space>': ' ',
                        '<$$>': '$$',
                        '<$>': '$'
                    } [Pb]) && void 0 !== Mb ? Mb : Pb;
                }
            }
            return Nb;
        }
        scanNumber(Mb = !0) {
            var Nb, Ob;
            let Pb = !1,
                Qb = this.peek();
            for (;
                '<space>' === Qb || '+' === Qb || '-' === Qb;)
                this.get(), '-' === Qb && (Pb = !Pb), Qb = this.peek();
            Mb = Boolean(Mb);
            let Rb = 10,
                Sb = /\d/;
            if (this.match('\''))
                Rb = 8, Sb = /[0-7]/, Mb = !0;
            else if (this.match('"') || this.match('x'))
                Rb = 16, Sb = /[\dA-F]/, Mb = !0;
            else if (this.match('`'))
                return Qb = this.get(), Qb ? Qb.startsWith('\\') && 2 === Qb.length ? (Pb ? -1 : 1) * (null !== (Nb = Qb.codePointAt(1)) && void 0 !== Nb ? Nb : 0) : (Pb ? -1 : 1) * (null !== (Ob = Qb.codePointAt(0)) && void 0 !== Ob ? Ob : 0) : null;
            let Tb = '';
            for (; this.hasPattern(Sb);)
                Tb += this.get();
            if (!Mb && (this.match('.') || this.match(',')))
                for (Tb += '.'; this.hasPattern(Sb);)
                    Tb += this.get();
            const Ub = Mb ? Number.parseInt(Tb, Rb) : Number.parseFloat(Tb);
            return Number.isNaN(Ub) ? null : Pb ? -Ub : Ub;
        }
        scanDimen() {
            var Mb, Nb, Ob;
            let Pb, Qb = this.scanNumber(!1);
            if (null === Qb) {
                if (!(null === (Mb = this.peek()) || void 0 === Mb ? void 0 : Mb.startsWith('\\')))
                    return null;
                Qb = 1;
            }
            return this.matchWhitespace(), this.matchKeyword('pt') ? Pb = {
                dimension: Qb,
                unit: 'pt'
            } : this.matchKeyword('mm') ? Pb = {
                dimension: Qb,
                unit: 'mm'
            } : this.matchKeyword('cm') ? Pb = {
                dimension: Qb,
                unit: 'cm'
            } : this.matchKeyword('ex') ? Pb = {
                dimension: Qb,
                unit: 'ex'
            } : this.matchKeyword('px') ? Pb = {
                dimension: Qb,
                unit: 'px'
            } : this.matchKeyword('em') ? Pb = {
                dimension: Qb,
                unit: 'em'
            } : this.matchKeyword('bp') ? Pb = {
                dimension: Qb,
                unit: 'bp'
            } : this.matchKeyword('dd') ? Pb = {
                dimension: Qb,
                unit: 'dd'
            } : this.matchKeyword('pc') ? Pb = {
                dimension: Qb,
                unit: 'pc'
            } : this.matchKeyword('in') ? Pb = {
                dimension: Qb,
                unit: 'in'
            } : this.matchKeyword('mu') ? Pb = {
                dimension: Qb,
                unit: 'mu'
            } : (null === (Nb = this.peek()) || void 0 === Nb ? void 0 : Nb.startsWith('\\')) ? (Pb = null !== (Ob = _Mb(this.getRegister(this.get().slice(1)), this.context)) && void 0 !== Ob ? Ob : {
                dimension: 0
            }, Pb.dimension *= Qb) : (this.match('\\relax') || this.onError({
                code: 'missing-unit'
            }), Pb = {
                dimension: Qb,
                unit: 'pt'
            }), Pb;
        }
        scanGlue() {
            const Mb = this.scanDimen();
            if (null === Mb)
                return null;
            const Nb = {
                glue: Mb
            };
            return this.matchWhitespace(), this.match('\\relax') || (this.matchKeyword('plus') && this.scanDimen(), this.matchWhitespace(), this.match('\\relax') || (this.matchWhitespace(), this.matchKeyword('minus') && this.scanDimen())), Nb;
        }
        scanColspec() {
            this.matchWhitespace();
            const Mb = [];
            for (; !this.end() && '<}>' !== this.peek() && ']' !== this.peek();) {
                const Nb = this.get();
                'c' === Nb || 'r' === Nb || 'l' === Nb ? Mb.push({
                    align: Nb
                }) : '|' === Nb ? Mb.push({
                    separator: 'solid'
                }) : ':' === Nb ? Mb.push({
                    separator: 'dashed'
                }) : '@' === Nb && (this.match('<{>') && (this.beginContext({
                    mode: 'math'
                }), Mb.push({
                    gap: this.parse(Mb => '<}>' === Mb)
                }), this.endContext()), this.match('<}>') || this.onError({
                    code: 'unbalanced-braces'
                }));
            }
            return Mb;
        }
        parseModeSet() {
            let Mb = '';
            if (this.match('\\(') && (Mb = '\\)'), !Mb && this.match('\\[') && (Mb = '\\]'), !Mb)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: '\\)' === Mb ? 'textstyle' : 'displaystyle'
            });
            const Nb = new Db(this.parse(Nb => Nb === Mb), this.context, {
                mathstyleName: '\\)' === Mb ? 'textstyle' : 'displaystyle',
                latexOpen: '\\]' === Mb ? '\\[' : '\\(',
                latexClose: Mb,
                boxType: 'mord'
            });
            return this.match(Mb) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), Nb.hasEmptyBranch('body') ? null : Nb;
        }
        parseModeShift() {
            let Mb = '';
            if (this.match('<$>') && (Mb = '<$>'), !Mb && this.match('<$$>') && (Mb = '<$$>'), !Mb)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: 'textstyle'
            });
            const Nb = new Db(this.parse(Nb => Nb === Mb), this.context, {
                mathstyleName: '<$>' === Mb ? 'textstyle' : 'displaystyle',
                latexOpen: '<$>' === Mb ? '$ ' : '$$ ',
                latexClose: '<$>' === Mb ? ' $' : ' $$'
            });
            return this.match(Mb) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), Nb.hasEmptyBranch('body') ? null : Nb;
        }
        parseEnvironment() {
            if (!this.match('\\begin'))
                return null;
            const Mb = this.parseArgument('string');
            if (!Mb)
                return null;
            const Nb = function(Ob) {
                var Pb;
                return null !== (Pb = m[Ob]) && void 0 !== Pb ? Pb : null;
            }(Mb);
            if (!Nb)
                return this.onError({
                    code: 'unknown-environment',
                    arg: Mb
                }), null;
            const Ob = [];
            if (Nb.params)
                for (const Pb of Nb.params)
                    if (Pb.isOptional)
                        Ob.push(this.parseOptionalArgument(Pb.type));
                    else {
                        const Qb = this.parseArgument(Pb.type);
                        Qb || this.onError({
                            code: 'missing-argument',
                            arg: Mb
                        }), Ob.push(Qb);
                    }
            this.beginContext({
                tabular: Nb.tabular
            });
            const Pb = [],
                Qb = [];
            let Rb = [],
                Sb = !1;
            do {
                if (this.end() && (this.onError({
                        code: 'unbalanced-environment',
                        arg: Mb
                    }), Sb = !0), !Sb && this.match('\\end') && (this.parseArgument('string') !== Mb && this.onError({
                        code: 'unbalanced-environment',
                        arg: Mb
                    }), Sb = !0), !Sb)
                    if (this.matchColumnSeparator())
                        Rb.push(this.mathlist), this.mathlist = [];
                    else if (this.matchRowSeparator()) {
                    Rb.push(this.mathlist), this.mathlist = [];
                    let Tb = null;
                    this.matchWhitespace(), this.match('[') && (Tb = this.scanDimen(), this.matchWhitespace(), this.match(']')), Qb.push(null != Tb ? Tb : {
                        dimension: 0
                    }), Pb.push(Rb), Rb = [];
                } else
                    this.mathlist.push(...this.parse(Mb => '<}>' === Mb || '&' === Mb || '\\end' === Mb || '\\cr' === Mb || '\\\\' === Mb));
            } while (!Sb);
            return Rb.push(this.mathlist), Rb.length > 0 && Pb.push(Rb), this.endContext(), Nb.createAtom(this.context, Mb, Pb, Qb, Ob);
        }
        parse(Mb) {
            this.beginContext(), Mb || (Mb = Mb => '<}>' === Mb);
            let Nb = '',
                Ob = null,
                Pb = [],
                Qb = null;
            const Rb = this.mathlist;
            for (this.mathlist = []; !this.end() && !Mb(this.peek());)
                this.hasInfixCommand() && !Nb ? (Nb = this.get(), Ob = this.context.getDefinition(Nb, 'math'), Ob && (Pb = this.parseArguments(Ob)[1]), Qb = this.mathlist, this.mathlist = []) : this.parseToken();
            let Sb;
            return Nb ? (Pb.unshift(this.mathlist), this.mathlist = Rb, Qb && Pb.unshift(Qb), Sb = [Ob.createAtom(Nb, Pb, this.style, this.context)]) : (Sb = this.mathlist, this.mathlist = Rb), this.endContext(), Sb;
        }
        parseGroup() {
            if (!this.match('<{>'))
                return null;
            const Mb = new Db(this.parse(Mb => '<}>' === Mb), this.context, {
                mode: this.parseMode,
                latexOpen: '{',
                latexClose: '}'
            });
            return this.match('<}>') || this.onError({
                code: 'unbalanced-braces'
            }), Mb;
        }
        scanSmartFence() {
            if (this.matchWhitespace(), !this.match('('))
                return null;
            this.beginContext();
            let Mb = 1;
            for (; !this.end() && 0 !== Mb;)
                this.match('(') && (Mb += 1), this.match(')') && (Mb -= 1), 0 !== Mb && this.parseToken();
            0 === Mb && this.match(')');
            const Nb = new Fb('', this.mathlist, this.context, {
                leftDelim: '(',
                rightDelim: 0 === Mb ? ')' : '?'
            });
            return this.endContext(), Nb;
        }
        scanDelim() {
            this.matchWhitespace();
            const Mb = this.get();
            if (!Mb)
                return this.onError({
                    code: 'unexpected-end-of-string'
                }), null;
            let Nb = '.';
            (Mb.startsWith('\\') || Et(Mb)) && (Nb = Mb);
            const Ob = this.context.getDefinition(Nb, 'math');
            return Ob ? 'function' === Ob.definitionType && Ob.ifMode && !Ob.ifMode.includes(this.parseMode) ? (this.onError({
                code: 'unexpected-delimiter',
                arg: Nb
            }), null) : 'symbol' !== Ob.definitionType || 'mopen' !== Ob.type && 'mclose' !== Ob.type ? /^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(Nb) ? Nb : (this.onError({
                code: 'unexpected-delimiter',
                arg: Nb
            }), null) : Nb : (this.onError({
                code: 'unknown-command',
                arg: Nb
            }), null);
        }
        parseLeftRight() {
            var Mb;
            if (this.match('\\right') || this.match('\\mright'))
                return this.onError({
                    code: 'unbalanced-braces'
                }), null;
            let Nb = '\\right';
            if (!this.match('\\left')) {
                if (!this.match('\\mleft'))
                    return null;
                Nb = '\\mright';
            }
            const Ob = this.scanDelim();
            if (!Ob)
                return null;
            for (this.beginContext(); !this.end() && !this.match(Nb);)
                this.parseToken();
            const Pb = this.mathlist;
            this.endContext();
            const Qb = null !== (Mb = this.scanDelim()) && void 0 !== Mb ? Mb : '.';
            return new Fb('\\right' === Nb ? 'left...right' : 'mleft...mright', Pb, this.context, {
                leftDelim: Ob,
                rightDelim: Qb,
                style: this.style
            });
        }
        parseSupSub() {
            if ('math' !== this.parseMode)
                return !1;
            let Mb = this.peek();
            if ('^' !== Mb && '_' !== Mb && '\'' !== Mb)
                return !1;
            for (;
                '^' === Mb || '_' === Mb || '\'' === Mb;) {
                if (this.match('\''))
                    this.match('\'') ? this.lastSubsupAtom().addChild(new pb('mord', this.context, {
                        command: '\\doubleprime',
                        mode: 'math',
                        value: '\u2032\u2032'
                    }), 'superscript') : this.lastSubsupAtom().addChild(new pb('mord', this.context, {
                        command: '\\prime',
                        mode: 'math',
                        value: '\u2032'
                    }), 'superscript');
                else if (this.match('^') || this.match('_')) {
                    const Nb = this.parseArgument('math');
                    Nb ? this.lastSubsupAtom().addChildren(Nb, '_' === Mb ? 'subscript' : 'superscript') : this.lastSubsupAtom().createBranch('_' === Mb ? 'subscript' : 'superscript');
                }
                Mb = this.peek();
            }
            return !0;
        }
        parseLimits() {
            const Mb = this.match('\\limits'),
                Nb = !Mb && this.match('\\nolimits'),
                Ob = !Nb && !Mb && this.match('\\displaylimits');
            if (!Mb && !Nb && !Ob)
                return !1;
            const Pb = this.mathlist.length > 0 ? this.mathlist[this.mathlist.length - 1] : null;
            return !(null === Pb || 'mop' !== Pb.type || (Mb ? (Pb.subsupPlacement = 'over-under', Pb.explicitSubsupPlacement = !0, 0) : Nb ? (Pb.subsupPlacement = 'adjacent', Pb.explicitSubsupPlacement = !0, 0) : !Ob || (Pb.subsupPlacement = 'auto', Pb.explicitSubsupPlacement = !0, 0)));
        }
        parseArguments(Mb) {
            if (!(null == Mb ? void 0 : Mb.params))
                return [
                    void 0,
                    []
                ];
            let Nb;
            const Ob = [];
            let Pb = Mb.infix ? 2 : 0;
            for (; Pb < Mb.params.length;) {
                const Qb = Mb.params[Pb];
                if ('rest' === Qb.type)
                    Ob.push(this.parse(Mb => '<}>' === Mb || '&' === Mb || '\\end' === Mb || '\\cr' === Mb || '\\\\' === Mb));
                else if (Qb.isOptional)
                    Ob.push(this.parseOptionalArgument(Qb.type));
                else if (Qb.type.endsWith('*'))
                    Nb = Qb.type.slice(0, -1);
                else {
                    const Rb = this.parseArgument(Qb.type);
                    if (null !== Rb)
                        Ob.push(Rb);
                    else
                        switch (this.onError({
                                code: 'missing-argument'
                            }), Qb.type) {
                            case 'number':
                                Ob.push(0);
                                break;
                            case 'dimen':
                                Ob.push({
                                    dimension: 0,
                                    unit: 'pt'
                                });
                                break;
                            case 'glue':
                                Ob.push({
                                    glue: {
                                        dimension: 0,
                                        unit: 'pt'
                                    }
                                });
                                break;
                            case 'string':
                            case 'balanced-string':
                                Ob.push('');
                                break;
                            case 'delim':
                                Ob.push('.');
                                break;
                            case 'colspec':
                                Ob.push('llllllllll');
                                break;
                            default:
                                Ob.push(this.placeholder());
                        }
                }
                Pb += 1;
            }
            return [
                Nb,
                Ob
            ];
        }
        parseArgument(Mb) {
            var Nb, Ob;
            this.skipFiller(), 'auto' === Mb && (Mb = this.parseMode);
            let Pb = null;
            const Qb = '<{>' === this.peek();
            if (!Qb) {
                if ('delim' === Mb)
                    return null !== (Nb = this.scanDelim()) && void 0 !== Nb ? Nb : '.';
                if ('text' === Mb || 'math' === Mb) {
                    this.beginContext();
                    const Rb = this.parseSimpleToken();
                    return this.endContext(), Rb;
                }
            }
            if (Qb && this.get(), 'text' === Mb || 'math' === Mb) {
                this.beginContext({
                    mode: Mb
                });
                do {
                    this.mathlist.push(...this.parse());
                } while (!this.match('<}>') && !this.end());
            } else if (this.beginContext(), 'string' === Mb ? Pb = this.scanString() : 'balanced-string' === Mb ? Pb = this.scanBalancedString() : 'number' === Mb ? Pb = this.scanNumber() : 'colspec' === Mb ? Pb = this.scanColspec() : 'dimen' === Mb ? Pb = this.scanDimen() : 'glue' === Mb ? Pb = this.scanGlue() : 'delim' === Mb && (Pb = null !== (Ob = this.scanDelim()) && void 0 !== Ob ? Ob : '.'), Qb && this.skipUntilToken('<}>'), null === Pb)
                return this.endContext(), null;
            const Rb = this.mathlist;
            return this.endContext(), null != Pb ? Pb : Rb;
        }
        parseOptionalArgument(Mb) {
            var Nb, Ob;
            if (Mb = 'auto' === Mb ? this.parseMode : Mb, this.matchWhitespace(), !this.match('['))
                return null;
            let Pb = null;
            for (; !this.end() && !this.match(']');)
                if ('string' === Mb)
                    Pb = this.scanString();
                else if ('number' === Mb)
                Pb = this.scanNumber();
            else if ('dimen' === Mb)
                Pb = this.scanDimen();
            else if ('glue' === Mb)
                Pb = this.scanGlue();
            else if ('colspec' === Mb)
                Pb = this.scanColspec();
            else if ('bbox' === Mb) {
                const Qb = this.scanString().toLowerCase().trim().split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/),
                    Rb = {};
                for (const Sb of Qb) {
                    const Tb = null === (Ob = (Nb = this.context).backgroundColorMap) || void 0 === Ob ? void 0 : Ob.call(Nb, Sb);
                    if (Tb)
                        Rb.backgroundcolor = Tb;
                    else {
                        const Ub = Sb.match(/^\s*([\d.]+)\s*([a-z]{2})/);
                        if (Ub)
                            Rb.padding = Ub[0];
                        else {
                            const Vb = Sb.match(/^\s*border\s*:\s*(.*)/);
                            Vb && (Rb.border = Vb[1]);
                        }
                    }
                }
                Sb = Rb;
            } else
                'math' === Mb && (this.beginContext({
                    mode: 'math'
                }), Pb = this.mathlist.concat(this.parse(Mb => ']' === Mb)), this.endContext());
            return Pb;
        }
        parseCommand(Mb) {
            var Nb, Ob, Pb, Qb, Rb, Sb, Tb;
            if ('\\placeholder' === Mb) {
                const Ub = this.parseOptionalArgument('string'),
                    Vb = this.parseOptionalArgument('math'),
                    Wb = null !== (Nb = this.parseArgument('string')) && void 0 !== Nb ? Nb : void 0;
                return [new Hb(this.context, {
                    mode: this.parseMode,
                    placeholderId: Ub,
                    value: Wb,
                    default: Vb,
                    style: this.style
                })];
            }
            let Ub = null;
            if ('\\char' === Mb) {
                const Vb = this.index;
                let Wb = Math.floor(null !== (Ob = this.scanNumber(!0)) && void 0 !== Ob ? Ob : Number.NaN);
                (!Number.isFinite(Wb) || Wb < 0 || Wb > 1114111) && (Wb = 10067);
                const Xb = '\\char' + it(this.tokens.slice(Vb, this.index));
                return Ub = new pb('math' === this.parseMode ? 'mord' : 'text', this.context, {
                    command: '\\char',
                    mode: this.parseMode,
                    value: String.fromCodePoint(Wb),
                    serialize: () => Xb
                }), Ub.verbatimLatex = Xb, [Ub];
            }
            if ('\\hskip' === Mb || '\\kern' === Mb) {
                const Vb = this.scanGlue();
                return Vb ? [new Eb(Mb, this.style, this.context, Vb)] : null;
            }
            if (Ub = this.scanMacro(Mb), Ub)
                return [Ub];
            const Vb = this.context.getDefinition(Mb, this.parseMode);
            if (!Vb)
                return this.onError({
                    code: 'unknown-command',
                    arg: Mb
                }), [new Ib(Mb, this.context)];
            const Wb = this.index;
            if ('symbol' === Vb.definitionType) {
                const Xb = {
                    ...this.style
                };
                Vb.variant && (Xb.variant = Vb.variant), Ub = new pb(null !== (Pb = Vb.type) && void 0 !== Pb ? Pb : 'mop', this.context, {
                    command: Mb,
                    style: Xb,
                    value: String.fromCodePoint(Vb.codepoint),
                    mode: this.parseMode
                });
            } else {
                if (Vb.ifMode && !Vb.ifMode.includes(this.parseMode))
                    return [];
                const Xb = this.parseMode;
                Vb.applyMode && (this.parseMode = Vb.applyMode);
                const [Yb, Zb] = this.parseArguments(Vb);
                if (this.parseMode = Xb, !Zb)
                    return null;
                if (Vb.applyMode && !Vb.applyStyle && !Vb.createAtom)
                    return Zb[0];
                if (Vb.infix)
                    return this.onError({
                        code: 'too-many-infix-commands',
                        arg: Mb
                    }), null;
                if ('function' == typeof Vb.createAtom)
                    Ub = Vb.createAtom(Mb, Zb, this.style, this.context), Yb && (Ub.body = null !== (Qb = this.parseArgument(Yb)) && void 0 !== Qb ? Qb : void 0);
                else if ('function' == typeof Vb.applyStyle) {
                    const $b = Vb.applyStyle(Mb, Zb, this.context),
                        ac = this.parseMode;
                    if (Vb.applyMode && (this.parseMode = Vb.applyMode), Yb) {
                        const bc = this.style;
                        this.style = {
                            ...this.style,
                            ...$b
                        };
                        const cc = this.parseArgument(Yb);
                        return this.style = bc, this.parseMode = ac, cc;
                    }
                    this.style = {
                        ...this.style,
                        ...$b
                    }, this.parseMode = ac;
                } else
                    Ub = new pb('mop', this.context, {
                        command: null !== (Rb = Vb.command) && void 0 !== Rb ? Rb : Mb,
                        style: {
                            ...this.style
                        },
                        value: Mb,
                        mode: null !== (Sb = Vb.applyMode) && void 0 !== Sb ? Sb : this.parseMode
                    });
            }
            if (Ub instanceof pb && void 0 === Ub.verbatimLatex && !/^\\(llap|rlap|class|cssId|htmlData)$/.test(Mb) && (Ub.verbatimLatex = (null !== (Tb = Ub.command) && void 0 !== Tb ? Tb : '') + it(this.tokens.slice(Wb, this.index)), 0 === Ub.verbatimLatex.length && (Ub.verbatimLatex = void 0), Ub.isFunction && this.smartFence)) {
                const Xb = this.scanSmartFence();
                if (Xb)
                    return [
                        Ub,
                        Xb
                    ];
            }
            return Ub ? [Ub] : null;
        }
        parseLiteral(Mb) {
            const Nb = db.createAtom(this.parseMode, Mb, this.context, {
                ...this.style
            });
            if (!Nb)
                return null;
            if (Nb.isFunction && this.smartFence) {
                const Ob = this.scanSmartFence();
                if (Ob)
                    return [
                        Nb,
                        Ob
                    ];
            }
            return [Nb];
        }
        parseSimpleToken() {
            const Mb = this.get();
            return Mb ? '<space>' === Mb ? 'text' === this.parseMode ? [new Kb(' ', ' ', this.style, this.context)] : null : Mb.startsWith('\\') ? this.parseCommand(Mb) : Et(Mb) ? this.parseLiteral(Mb) : ('<}>' === Mb ? this.onError({
                latex: '',
                code: 'unbalanced-braces'
            }) : this.onError({
                latex: '',
                code: 'unexpected-token',
                arg: Mb
            }), null) : null;
        }
        scanMacro(Mb) {
            var Nb;
            const Ob = this.context.getMacro(Mb);
            if (!Ob)
                return null;
            const Pb = this.index,
                Qb = Ob.args,
                Rb = {
                    '?': null === (Nb = this.args) || void 0 === Nb ? void 0 : Nb.call(this, '?')
                };
            for (let Sb = 1; Sb <= Qb; Sb++)
                Rb[Sb] = this.matchLiteralArg();
            return new Jb(Sb, this.context, {
                expand: Ob.expand,
                captureSelection: Ob.captureSelection,
                args: it(this.tokens.slice(Pb, this.index)),
                body: _Mb(Ob.def, this.context, {
                    parseMode: this.parseMode,
                    args: Sb => Rb[Sb],
                    mathstyle: this.currentContext.mathstyle
                })
            });
        }
        parseToken() {
            var Mb, Nb, Ob, Pb;
            let Qb = null !== (Pb = null !== (Ob = null !== (Nb = null !== (Mb = this.parseEnvironment()) && void 0 !== Mb ? Mb : this.parseModeShift()) && void 0 !== Nb ? Nb : this.parseModeSet()) && void 0 !== Ob ? Ob : this.parseGroup()) && void 0 !== Pb ? Pb : this.parseLeftRight();
            if (null === Qb) {
                if (this.parseSupSub())
                    return !0;
                if (this.parseLimits())
                    return !0;
                Qb = this.parseSimpleToken();
            }
            return _Pb(Qb) ? this.mathlist.push(...Qb) : Qb && this.mathlist.push(Qb), null !== Qb;
        }
        constructor(Mb, Nb, Ob) {
            var _Pb, Qb, Rb, Sb, Tb, Ub;
            this.index = 0, this.endCount = 0, this.tokens = Mb, this.context = Nb, this.errors = [], this.args = null !== (_Pb = Ob.args) && void 0 !== _Pb ? _Pb : null, this.smartFence = null !== (Qb = Ob.smartFence) && void 0 !== Qb ? Qb : Nb.smartFence, this._currentParsingContext = {
                parent: void 0,
                mathlist: [],
                style: null !== (Rb = Ob.style) && void 0 !== Rb ? Rb : {},
                parseMode: null !== (Sb = Ob.parseMode) && void 0 !== Sb ? Sb : 'math',
                mathstyle: null !== (Tb = Ob.mathstyle) && void 0 !== Tb ? Tb : 'displaystyle',
                registers: null !== (Ub = Ob.registers) && void 0 !== Ub ? Ub : Nb.registers,
                tabular: !1
            };
        }
    }

    function _Mb(Nb, Ob, Pb) {
        var Qb, Rb, Sb;
        const Tb = null !== (Qb = null == Pb ? void 0 : Pb.args) && void 0 !== Qb ? Qb : null,
            Ub = new Lb(tt(Nb, Tb), Ob, {
                args: Tb,
                mathstyle: null !== (Rb = null == Pb ? void 0 : Pb.mathstyle) && void 0 !== Rb ? Rb : 'displaystyle',
                parseMode: null !== (Sb = null == Pb ? void 0 : Pb.parseMode) && void 0 !== Sb ? Sb : 'math'
            }),
            Vb = [];
        for (; !Ub.end();)
            Vb.push(...Ub.parse());
        return Vb;
    }

    function Mb(Nb, Ob, Pb) {
        var Qb;
        const Rb = new Lb(tt(Nb, null), Ob, {
            args: null,
            mathstyle: 'displaystyle',
            parseMode: null !== (Qb = null == Pb ? void 0 : Pb.parseMode) && void 0 !== Qb ? Qb : 'math'
        });
        for (; !Rb.end();)
            Rb.parse();
        return Rb.errors;
    }

    function Mb(Nb, Ob, Pb) {
        return 'object' == typeof Nb && 'glue' in Nb ? Nb : 'object' == typeof Nb && 'dimension' in Nb ? {
            glue: Nb
        } : 'number' == typeof Nb ? {
            glue: {
                dimension: Nb
            }
        } : new Lb(tt(Nb), Ob, {
            registers: Pb
        }).scanGlue();
    }

    function _Mb(Nb, Ob, Pb) {
        return 'number' == typeof Nb ? {
            dimension: Nb,
            unit: 'pt'
        } : ('object' == typeof Nb && 'glue' in Nb && (Nb = Nb.glue), 'object' == typeof Nb && 'dimension' in Nb ? Nb : new Lb(tt(Nb), Ob, {
            registers: Pb
        }).scanDimen());
    }
    class Mb extends pb {
        static fromJson(Nb, Ob) {
            return new Mb(Nb.command, Nb.body, Ob, Nb);
        }
        toJson() {
            return {
                ...super.toJson(),
                framecolor: this.framecolor,
                verbatimFramecolor: this.verbatimFramecolor,
                backgroundcolor: this.backgroundcolor,
                verbatimBackgroundcolor: this.verbatimBackgroundcolor,
                padding: this.padding,
                border: this.border
            };
        }
        render(Nb) {
            const Ob = new $(Nb, this.style),
                Pb = Le(Ob.getRegisterAsDimension('fboxsep')),
                Qb = void 0 === this.padding ? Pb : Le(Rt(this.padding, {
                    ...this.context,
                    registers: Nb.registers
                })),
                Rb = pb.createBox(Nb, this.body);
            if (!Rb)
                return null;
            Rb.setStyle('vertical-align', -Rb.height, 'em');
            const Sb = new hb(Rb, {
                    type: 'mord'
                }),
                Tb = new hb(null, {
                    classes: 'ML__box'
                });
            Tb.height = Sb.height + Qb, Tb.depth = Sb.depth + Qb, Tb.setStyle('box-sizing', 'border-box'), Tb.setStyle('position', 'absolute'), Tb.setStyle('height', Sb.height + Sb.depth + 2 * Qb, 'em'), 0 === Qb ? Tb.setStyle('width', '100%') : (Tb.setStyle('width', `calc(100% + ${ 2 * Qb }em)`), Tb.setStyle('top', Pb, 'em'), Tb.setStyle('left', -Qb, 'em')), Tb.setStyle('z-index', '-1'), this.backgroundcolor && Tb.setStyle('background-color', this.backgroundcolor), this.framecolor && Tb.setStyle('border', `${ Le(Ob.getRegisterAsDimension('fboxrule')) }em solid ${ this.framecolor }`), this.border && Tb.setStyle('border', this.border), Sb.setStyle('display', 'inline-block'), Sb.setStyle('height', Rb.height + Rb.depth, 'em'), Sb.setStyle('vertical-align', -Qb, 'em');
            const Ub = new hb([
                Tb,
                Sb
            ]);
            return Ub.setStyle('position', 'relative'), Ub.setStyle('display', 'inline-block'), Ub.setStyle('line-height', 0), Ub.height = Sb.height + Qb, Ub.depth = Sb.depth + Qb, Ub.left = Qb, Ub.right = Qb, Ub.setStyle('height', Sb.height + Qb, 'em'), Ub.setStyle('top', Sb.depth - Sb.height, 'em'), Ub.setStyle('vertical-align', Sb.depth + Qb, 'em'), this.caret && (Ub.caret = this.caret), this.attachSupsub(Nb, {
                base: Ub
            });
        }
        constructor(Nb, Ob, Pb, Qb) {
            super('box', Pb, {
                command: Nb,
                serialize: Qb.serialize,
                style: Qb.style
            }), this.body = Ob, this.framecolor = Qb.framecolor, this.verbatimFramecolor = Qb.verbatimBackgroundcolor, this.backgroundcolor = Qb.backgroundcolor, this.verbatimBackgroundcolor = Qb.verbatimBackgroundcolor, this.padding = Qb.padding, this.border = Qb.border;
        }
    }
    class Nb extends pb {
        static fromJson(Ob, Pb) {
            return new Nb(Pb, Ob.environmentName, Ob.array, Ob.rowGaps, Ob);
        }
        toJson() {
            const Ob = {
                ...super.toJson(),
                environmentName: this.environmentName,
                array: this.array.map(Ob => Ob.map(Ob => Ob.map(Ob => Ob.toJson()))),
                rowGaps: this.rowGaps,
                columns: this.colFormat,
                colSeparationType: this.colSeparationType
            };
            return 1 !== this.arraystretch && (Ob.arraystretch = this.arraystretch), this.arraycolsep && (Ob.arraycolsep = this.arraycolsep), this.leftDelim && (Ob.leftDelim = this.leftDelim), this.rightDelim && (Ob.rightDelim = this.rightDelim), void 0 !== this.jot && (Ob.jot = this.jot), Ob;
        }
        branch(Ob) {
            var Pb;
            if (st(Ob))
                return null !== (Pb = this.array[Ob[0]][Ob[1]]) && void 0 !== Pb ? Pb : void 0;
        }
        get branches() {
            const Ob = super.branches;
            return this.array.forEach((ub, b) => {
                this.array[b].forEach((ub, _Rb) => {
                    this.array[b][_Rb] && Ob.push([
                        b,
                        _Rb
                    ]);
                });
            }), Ob;
        }
        createBranch(Ob) {
            var Pb;
            return st(Ob) ? (this.isDirty = !0, null !== (Pb = this.branch(Ob)) && void 0 !== Pb ? Pb : []) : [];
        }
        get rowCount() {
            return this.array.length;
        }
        get colCount() {
            return this.array[0].length;
        }
        get maxColumns() {
            return this.colFormat.filter(tb => Boolean(tb.align)).length;
        }
        removeBranch(Ob) {
            if (nt(Ob))
                return super.removeBranch(Ob);
            const Pb = this.branch(Ob);
            return this.array[Ob[0]][Ob[1]] = void 0, Pb.forEach(Ob => {
                Ob.parent = void 0, Ob.treeBranch = void 0;
            }), Pb.shift(), this.isDirty = !0, Pb;
        }
        get hasChildren() {
            return this.children.length > 0;
        }
        get children() {
            const Ob = [];
            for (const Pb of this.array)
                for (const Qb of Pb)
                    if (Qb)
                        for (const Rb of Qb)
                            Ob.push(...Rb.children), Ob.push(Rb);
            return [
                ...Ob,
                ...super.children
            ];
        }
        render(Ob) {
            var Pb, Qb, _Rb, Sb, Tb;
            const Ub = new $(Ob, this.style, this.mathstyleName),
                Vb = Ub.getRegisterAsEm('arrayrulewidth'),
                Wb = Ub.getRegisterAsEm('arraycolsep'),
                Xb = Ub.getRegisterAsEm('doublerulesep'),
                Yb = null !== (Pb = this.arraystretch) && void 0 !== Pb ? Pb : 1;
            let Zb = 'number' == typeof this.arraycolsep ? this.arraycolsep : Wb;
            'small' === this.colSeparationType && (Zb = new $(Ob, void 0, 'scriptstyle').scalingFactor / Ob.scalingFactor * 0.2778);
            const $b = 1.2 * Yb,
                ac = 0.7 * $b,
                bc = 0.3 * $b;
            let cc = 0;
            const dc = [];
            let ec = 0;
            const fc = this.array.length;
            for (let gc = 0; gc < fc; ++gc) {
                const hc = this.array[gc];
                ec = Math.max(ec, hc.length);
                const ic = new $(Ub, this.style, this.mathstyleName);
                let jc = ac / ic.scalingFactor,
                    kc = bc / ic.scalingFactor;
                const lc = {
                    cells: [],
                    height: 0,
                    depth: 0,
                    pos: 0
                };
                for (const mc of hc) {
                    const nc = null !== (Qb = pb.createBox(ic, mc, {
                        newList: !0
                    })) && void 0 !== Qb ? Qb : new hb(null, {
                        newList: !0
                    });
                    kc = Math.max(kc, nc.depth), jc = Math.max(jc, nc.height), lc.cells.push(nc);
                }
                let nc = null !== (_Rb = Le(this.rowGaps[mc])) && void 0 !== _Rb ? _Rb : 0;
                nc > 0 && (nc += bc, kc = Math.max(kc, nc), nc = 0), void 0 !== this.jot && (kc += this.jot), lc.height = jc, lc.depth = kc, cc += jc, lc.pos = cc, cc += kc + nc, dc.push(lc);
            }
            const hc = cc / 2 + 0.25,
                ic = [];
            for (let jc = 0; jc < ec; jc++) {
                const kc = [];
                for (const lc of dc) {
                    const mc = lc.cells[jc];
                    mc.depth = lc.depth, mc.height = lc.height, kc.push({
                        box: mc,
                        shift: lc.pos - hc
                    });
                }
                kc.length > 0 && ic.push(new ib({
                    individualShift: kc
                }));
            }
            const kc = [];
            let lc = !1,
                mc = !1,
                nc = 0,
                oc = !this.leftDelim;
            const {
                colFormat: pc
            } = this;
            for (const qc of pc) {
                if ('align' in qc && nc >= ic.length)
                    break;
                if ('align' in qc)
                    lc ? kc.push(_Ob(2 * Zb)) : (mc || oc) && kc.push(_Ob(Zb)), kc.push(new hb(ic[nc], {
                        classes: 'col-align-' + qc.align
                    })), nc++, lc = !0, mc = !1, oc = !1;
                else if ('gap' in qc) {
                    if ('number' == typeof qc.gap)
                        kc.push(_Ob(qc.gap));
                    else {
                        const rc = _Ob(jc, dc, hc, qc.gap);
                        rc && kc.push(rc);
                    }
                    lc = !1, mc = !1, oc = !1;
                } else if ('separator' in qc) {
                    const rc = new hb(null, {
                        classes: 'vertical-separator'
                    });
                    rc.setStyle('height', cc, 'em'), rc.setStyle('border-right', `${ Vb }em ${ qc.separator } currentColor`), rc.setStyle('vertical-align', -(cc - hc), 'em');
                    let sc = 0;
                    mc ? sc = Xb - Vb : lc && (sc = Zb - Vb), rc.left = sc, kc.push(rc), lc = !1, mc = !0, oc = !1;
                }
            }
            lc && !this.rightDelim && kc.push(_Ob(Zb));
            const rc = new hb(kc, {
                classes: 'mtable'
            });
            if (!(this.leftDelim && '.' !== this.leftDelim || this.rightDelim && '.' !== this.rightDelim))
                return this.caret && (rc.caret = this.caret), rc;
            const sc = rc.height,
                tc = rc.depth,
                uc = this.bind(jc, new hb([
                    this.bind(jc, Mt('mopen', null !== (Sb = this.leftDelim) && void 0 !== Sb ? Sb : '.', sc, tc, Ub)),
                    rc,
                    this.bind(jc, Mt('mclose', null !== (Tb = this.rightDelim) && void 0 !== Tb ? Tb : '.', sc, tc, Ub))
                ], {
                    type: 'mord'
                }));
            return uc ? (this.caret && (uc.caret = this.caret), this.attachSupsub(jc, {
                base: uc
            })) : null;
        }
        serialize(Ob) {
            let Pb = '\\begin{' + this.environmentName + '}';
            if ('array' === this.environmentName) {
                if (Pb += '{', void 0 !== this.colFormat)
                    for (const Qb of this.colFormat)
                        'align' in Qb ? Pb += Qb.align : 'separator' in Qb && 'solid' === Qb.separator ? Pb += '|' : 'separator' in Qb && 'dashed' === Qb.separator && (Pb += ':');
                Pb += '}';
            }
            for (let Qb = 0; Qb < this.array.length; Qb++) {
                for (let Rb = 0; Rb < this.array[Qb].length; Rb++)
                    Rb > 0 && (Pb += ' & '), Pb = at([
                        Pb,
                        pb.serialize(this.array[Qb][Rb], Ob)
                    ]);
                Qb < this.array.length - 1 && (Pb += ' \\\\ ');
            }
            return Pb += '\\end{' + this.environmentName + '}', Pb;
        }
        getCell(Ob, Pb) {
            return this.array[Ob][Pb];
        }
        setCell(Ob, Pb, Qb) {
            for (const Rb of this.array[Ob][Pb])
                Rb.parent = void 0, Rb.treeBranch = void 0;
            let Sb = Rb;
            0 !== Rb.length && 'first' === Rb[0].type || (Sb = [
                new pb('first', this.context, {
                    mode: this.mode
                }),
                ...Rb
            ]), this.array[Ob][Pb] = Sb;
            for (const Tb of Sb)
                Tb.parent = this, Tb.treeBranch = [
                    Ob,
                    Pb
                ];
            this.isDirty = !0;
        }
        addRowBefore(Ob) {
            const Pb = [];
            for (let Qb = 0; Qb < this.colCount; Qb++)
                Pb.push(_Ob(this));
            this.array.splice(Qb, 0, Pb);
            for (let Rb = Qb; Rb < this.rowCount; Rb++)
                for (let Sb = 0; Sb < this.colCount; Sb++) {
                    const Tb = this.array[Rb][Sb];
                    if (Tb)
                        for (const Ub of Tb)
                            Ub.treeBranch = [
                                Rb,
                                Sb
                            ];
                }
            this.isDirty = !0;
        }
        addRowAfter(Ob) {
            const Pb = [];
            for (let Qb = 0; Qb < this.colCount; Qb++)
                Pb.push(_Ob(this));
            this.array.splice(Qb + 1, 0, Pb);
            for (let Rb = Qb + 1; Rb < this.rowCount; Rb++)
                for (let Sb = 0; Sb < this.colCount; Sb++) {
                    const Tb = this.array[Rb][Sb];
                    if (Tb)
                        for (const Ub of Tb)
                            Ub.treeBranch = [
                                Rb,
                                Sb
                            ];
                }
            this.isDirty = !0;
        }
        removeRow(Ob) {
            const Pb = this.array.splice(Ob, 1);
            for (const Qb of Pb)
                for (const Rb of Qb)
                    if (Rb)
                        for (const Sb of Rb)
                            Sb.parent = void 0, Sb.treeBranch = void 0;
            for (let Sb = Qb; Sb < this.rowCount; Sb++)
                for (let Tb = 0; Tb < this.colCount; Tb++) {
                    const Ub = this.array[Sb][Tb];
                    if (Ub)
                        for (const Vb of Ub)
                            Vb.treeBranch = [
                                Sb,
                                Tb
                            ];
                }
            this.isDirty = !0;
        }
        addColumnBefore(Ob) {
            for (const Pb of this.array)
                Pb.splice(Ob, 0, _Ob(this));
            for (let Qb = 0; Qb < this.rowCount; Qb++)
                for (let Rb = Ob; Rb < this.colCount; Rb++) {
                    const Sb = this.array[Qb][Rb];
                    if (Sb)
                        for (const Tb of Sb)
                            Tb.treeBranch = [
                                Qb,
                                Rb
                            ];
                }
            this.isDirty = !0;
        }
        addColumnAfter(Ob) {
            for (const Pb of this.array)
                Pb.splice(Ob + 1, 0, _Ob(this));
            for (let Qb = 0; Qb < this.rowCount; Qb++)
                for (let Rb = Ob + 1; Rb < this.colCount; Rb++) {
                    const Sb = this.array[Qb][Rb];
                    if (Sb)
                        for (const Tb of Sb)
                            Tb.treeBranch = [
                                Qb,
                                Rb
                            ];
                }
            this.isDirty = !0;
        }
        addColumn() {
            this.addColumnAfter(this.colCount - 1);
        }
        removeColumn(Ob) {
            for (const Pb of this.array) {
                const Qb = Pb.splice(Ob, 1);
                for (const Rb of Qb)
                    if (Rb)
                        for (const Sb of Rb)
                            Sb.parent = void 0, Sb.treeBranch = void 0;
            }
            for (let Qb = 0; Qb < this.rowCount; Qb++)
                for (let Rb = Ob; Rb < this.colCount; Rb++) {
                    const Sb = this.array[Qb][Rb];
                    if (Sb)
                        for (const Tb of Sb)
                            Tb.treeBranch = [
                                Qb,
                                Rb
                            ];
                }
            this.isDirty = !0;
        }
        get cells() {
            const Ob = [];
            for (const Pb of this.array)
                for (const Qb of Pb)
                    Qb && Ob.push(Qb);
            return Ob;
        }
        constructor(Ob, Pb, Qb, Rb, Sb = {}) {
            var Tb, Ub;
            super('array', Ob), this.environmentName = Pb, this.rowGaps = Rb, Sb.mathstyleName && (this.mathstyleName = Sb.mathstyleName), Sb.columns && (0 === Sb.columns.length ? this.colFormat = [{
                align: 'l'
            }] : this.colFormat = Sb.columns), this.colFormat || (this.colFormat = [{
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                }
            ]), this.array = function(Vb, Wb, Xb, Yb) {
                let Zb = 0;
                for (const $b of Yb)
                    'align' in $b && (Zb += 1);
                let ac = 0;
                const bc = [];
                for (const cc of Xb) {
                    let dc = 0;
                    for (ac = Math.max(ac, Math.min(cc.length, Zb)); dc < cc.length;) {
                        const ec = [],
                            fc = Math.min(cc.length, dc + Zb);
                        for (; dc < fc;)
                            0 === cc[dc].length ? ec.push([new pb('first', $b, {
                                mode: Wb.mode
                            })]) : 'first' !== cc[dc][0].type ? ec.push([
                                new pb('first', $b, {
                                    mode: Wb.mode
                                }),
                                ...cc[dc]
                            ]) : ec.push(cc[dc]), dc += 1;
                        bc.push(ec);
                    }
                }
                1 === bc[bc.length - 1].length && 0 === bc[bc.length - 1][0].length && bc.pop();
                const dc = [];
                for (const ec of bc) {
                    if (ec.length !== ac)
                        for (let fc = ec.length; fc < ac; fc++)
                            ec.push([
                                new pb('first', $b, {
                                    mode: Wb.mode
                                }),
                                new Hb($b)
                            ]);
                    dc.push(ec);
                }
                let fc = 0,
                    gc = 0;
                for (const hc of dc) {
                    gc = 0;
                    for (const ic of hc) {
                        for (const jc of ic)
                            jc.parent = Wb, jc.treeBranch = [
                                fc,
                                gc
                            ];
                        gc += 1;
                    }
                    fc += 1;
                }
                return Wb.isDirty = !0, dc;
            }(Ob, this, Qb, this.colFormat), Sb.leftDelim && (this.leftDelim = Sb.leftDelim), Sb.rightDelim && (this.rightDelim = Sb.rightDelim), void 0 !== Sb.jot && (this.jot = Sb.jot), Sb.arraycolsep && (this.arraycolsep = Sb.arraycolsep), this.colSeparationType = Sb.colSeparationType, this.arraystretch = null !== (Tb = Sb.arraystretch) && void 0 !== Tb ? Tb : 1, this.minColumns = null !== (Ub = Sb.minColumns) && void 0 !== Ub ? Ub : 1;
        }
    }

    function _Ob(Pb) {
        const Qb = new pb('first', Pb.context, {
            mode: Pb.mode
        });
        Qb.parent = Pb;
        const Rb = new Hb(Pb.context, {
            mode: Pb.mode
        });
        return Rb.parent = Pb, [
            Qb,
            Rb
        ];
    }

    function _Ob(Pb) {
        const Qb = new hb(null, {
            classes: 'arraycolsep'
        });
        return Qb.width = Pb, Qb;
    }

    function _Ob(Pb, Qb, Rb, Sb) {
        if (!Sb)
            return null;
        const Tb = [];
        for (const Ub of Qb) {
            const Vb = pb.createBox(Pb, Sb, {
                newList: !0
            });
            Vb && (Vb.depth = Ub.depth, Vb.height = Ub.height, Tb.push({
                box: Vb,
                shift: Ub.pos - Rb
            }));
        }
        return new ib({
            individualShift: Tb
        }).wrap(Pb);
    }
    class Ob extends pb {
        static fromJson(Pb, Qb) {
            return new Ob(Pb.value, Qb, Pb);
        }
        toJson() {
            return super.toJson();
        }
        get computedStyle() {
            return {};
        }
        render(Pb) {
            const Qb = new hb(this.value, {
                classes: 'ML__composition',
                type: 'composition'
            });
            return this.bind(Pb, Qb), this.caret && (Qb.caret = this.caret), Qb;
        }
        serialize(Pb) {
            return '';
        }
        constructor(Pb, Qb, Rb) {
            var Sb;
            super('composition', Qb, {
                mode: null !== (Sb = null == Rb ? void 0 : Rb.mode) && void 0 !== Sb ? Sb : 'math',
                value: Pb
            });
        }
    }
    class Pb extends pb {
        static fromJson(Qb, Rb) {
            return new Pb(Qb.command, Qb.arg, Rb);
        }
        toJson() {
            return {
                ...super.toJson(),
                arg: this.arg
            };
        }
        render(Qb) {
            const Rb = pb.createBox(Qb, this.body, {
                type: 'chem',
                newList: !0
            });
            return this.caret && (Rb.caret = this.caret), this.bind(Qb, Rb);
        }
        serialize(Qb) {
            return this.verbatimLatex;
        }
        constructor(Qb, Rb, Sb) {
            super('chem', Sb, {
                command: Qb,
                mode: 'math'
            });
            const Tb = _Rb.go(_Qb.go(Rb, '\\pu' === Qb ? 'pu' : 'ce'), !1);
            this.body = Nt(Tb, Sb), this.verbatimLatex = Qb + '{' + Rb + '}', this.arg = Rb, this.captureSelection = !0;
        }
    }
    V([
        'ce',
        'pu'
    ], '{chemformula:balanced-string}', {
        createAtom: (tb, ub, b, _Ub) => new Pb(tb, ub[0], _Ub)
    });
    var _Qb = {
        go: function(Rb, Sb) {
            if (!Rb)
                return [];
            void 0 === Sb && (Sb = 'ce');
            var Tb, _Ub = '0',
                Vb = {
                    parenthesisLevel: 0
                };
            Rb = (Rb = (Rb = Rb.replace(/\n/g, ' ')).replace(/[\u2212\u2013\u2014\u2010]/g, '-')).replace(/[\u2026]/g, '...');
            for (var Wb = 10, Xb = [];;) {
                Tb !== Rb ? (Wb = 10, Tb = Rb) : Wb--;
                var Yb = _Qb.stateMachines[Sb],
                    Zb = Yb.transitions[_Ub] || Yb.transitions['*'];
                e:
                    for (var $b = 0; $b < Zb.length; $b++) {
                        var ac = _Qb.patterns.match_(Zb[$b].pattern, Rb);
                        if (ac) {
                            for (var bc = Zb[$b].task, cc = 0; cc < bc.action_.length; cc++) {
                                var dc;
                                if (Yb.actions[bc.action_[cc].type_])
                                    dc = Yb.actions[bc.action_[cc].type_](Vb, ac.match_, bc.action_[cc].option);
                                else {
                                    if (!_Qb.actions[bc.action_[cc].type_])
                                        throw [
                                            'MhchemBugA',
                                            'mhchem bug A. Please report. (' + bc.action_[cc].type_ + ')'
                                        ];
                                    dc = _Qb.actions[bc.action_[cc].type_](Vb, ac.match_, bc.action_[cc].option);
                                }
                                _Qb.concatArray(Xb, dc);
                            }
                            if (_Ub = bc.nextState || _Ub, !(Rb.length > 0))
                                return Xb;
                            if (bc.revisit || (Rb = ac.remainder), !bc.toContinue)
                                break e;
                        }
                    }
                if (Wb <= 0)
                    throw [
                        'MhchemBugU',
                        'mhchem bug U. Please report.'
                    ];
            }
        },
        concatArray: function(Rb, Sb) {
            if (Sb)
                if (Array.isArray(Sb))
                    for (var Tb = 0; Tb < Sb.length; Tb++)
                        Rb.push(Sb[Tb]);
                else
                    Rb.push(Sb);
        },
        patterns: {
            patterns: {
                empty: /^$/,
                else: /^./,
                else2: /^./,
                space: /^\s/,
                'space A': /^\s(?=[A-Z\\$])/,
                space$: /^\s$/,
                'a-z': /^[a-z]/,
                x: /^x/,
                x$: /^x$/,
                i$: /^i$/,
                letters: /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
                '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
                'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
                '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
                'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
                digits: /^[0-9]+/,
                '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
                '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
                '(-)(9.,9)(e)(99)': function(Rb) {
                    var Sb = Rb.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
                    return Sb && Sb[0] ? {
                        match_: Sb.splice(1),
                        remainder: Rb.substr(Sb[0].length)
                    } : null;
                },
                '(-)(9)^(-9)': function(Rb) {
                    var Sb = Rb.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);
                    return Sb && Sb[0] ? {
                        match_: Sb.splice(1),
                        remainder: Rb.substr(Sb[0].length)
                    } : null;
                },
                'state of aggregation $': function(Rb) {
                    var Sb = _Qb.patterns.findObserveGroups(Rb, '', /^\([a-z]{1,3}(?=[\),])/, ')', '');
                    if (Sb && Sb.remainder.match(/^($|[\s,;\)\]\}])/))
                        return Sb;
                    var Tb = Rb.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);
                    return Tb ? {
                        match_: Tb[0],
                        remainder: Rb.substr(Tb[0].length)
                    } : null;
                },
                '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
                '{[(': /^(?:\\\{|\[|\()/,
                ')]}': /^(?:\)|\]|\\\})/,
                ', ': /^[,;]\s*/,
                ',': /^[,;]/,
                '.': /^[.]/,
                '. ': /^([.\u22C5\u00B7\u2022])\s*/,
                '...': /^\.\.\.(?=$|[^.])/,
                '* ': /^([*])\s*/,
                '^{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '^{', '', '', '}');
                },
                '^($...$)': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '^', '$', '$', '');
                },
                '^a': /^\^([0-9]+|[^\\_])/,
                '^\\x{}{}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '^', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '^\\x{}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '^', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
                '^(-1)': /^\^(-?\d+)/,
                '\'': /^'/,
                '_{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '_{', '', '', '}');
                },
                '_($...$)': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '_', '$', '$', '');
                },
                _9: /^_([+\-]?[0-9]+|[^\\])/,
                '_\\x{}{}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '_', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '_\\x{}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '_', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '_\\x': /^_(\\[a-zA-Z]+)\s*/,
                '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
                '{}': /^\{\}/,
                '{...}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '', '{', '}', '');
                },
                '{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '{', '', '', '}');
                },
                '$...$': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '', '$', '$', '');
                },
                '${(...)}$': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '${', '', '', '}$');
                },
                '$(...)$': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '$', '', '', '$');
                },
                '=<>': /^[=<>]/,
                '#': /^[#\u2261]/,
                '+': /^\+/,
                '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
                '-9': /^-(?=[0-9])/,
                '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
                '-': /^-/,
                'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
                operator: /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
                arrowUpDown: /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
                '\\bond{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\bond{', '', '', '}');
                },
                '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
                CMT: /^[CMT](?=\[)/,
                '[(...)]': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '[', '', '', ']');
                },
                '1st-level escape': /^(&|\\\\|\\hline)\s*/,
                '\\,': /^(?:\\[,\ ;:])/,
                '\\x{}{}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '\\x{}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
                '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
                orbital: /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
                others: /^[\/~|]/,
                '\\frac{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\frac{', '', '', '}', '{', '', '', '}');
                },
                '\\overset{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\overset{', '', '', '}', '{', '', '', '}');
                },
                '\\underset{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\underset{', '', '', '}', '{', '', '', '}');
                },
                '\\underbrace{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\underbrace{', '', '', '}_', '{', '', '', '}');
                },
                '\\color{(...)}0': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\color{', '', '', '}');
                },
                '\\color{(...)}{(...)}1': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\color{', '', '', '}', '{', '', '', '}');
                },
                '\\color(...){(...)}2': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\color', '\\', '', /^(?=\{)/, '{', '', '', '}');
                },
                '\\ce{(...)}': function(Rb) {
                    return _Qb.patterns.findObserveGroups(Rb, '\\ce{', '', '', '}');
                },
                oxidation$: /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'd-oxidation$': /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'roman numeral': /^[IVX]+/,
                '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
                amount: function(Rb) {
                    var Sb;
                    if (Sb = Rb.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/))
                        return {
                            match_: Sb[0],
                            remainder: Rb.substr(Sb[0].length)
                        };
                    var Tb = _Qb.patterns.findObserveGroups(Rb, '', '$', '$', '');
                    return Tb && (Sb = Tb.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/)) ? {
                        match_: Sb[0],
                        remainder: Rb.substr(Sb[0].length)
                    } : null;
                },
                amount2: function(Rb) {
                    return this.amount(Rb);
                },
                '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
                formula$: function(Rb) {
                    if (Rb.match(/^\([a-z]+\)$/))
                        return null;
                    var Sb = Rb.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
                    return Sb ? {
                        match_: Sb[0],
                        remainder: Rb.substr(Sb[0].length)
                    } : null;
                },
                uprightEntities: /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
                '/': /^\s*(\/)\s*/,
                '//': /^\s*(\/\/)\s*/,
                '*': /^\s*[*.]\s*/
            },
            findObserveGroups: function(Rb, Sb, Tb, Ub, Vb, Wb, Xb, Yb, Zb, $b) {
                var ac = function(bc, cc) {
                        if ('string' == typeof cc)
                            return 0 !== bc.indexOf(cc) ? null : cc;
                        var dc = bc.match(cc);
                        return dc ? dc[0] : null;
                    },
                    bc = ac(Rb, Sb);
                if (null === bc)
                    return null;
                if (Rb = Rb.substr(bc.length), null === (bc = ac(Rb, Tb)))
                    return null;
                var cc = function(dc, ec, fc) {
                    for (var gc = 0; ec < dc.length;) {
                        var hc = dc.charAt(ec),
                            ic = ac(dc.substr(ec), fc);
                        if (null !== ic && 0 === gc)
                            return {
                                endMatchBegin: ec,
                                endMatchEnd: ec + ic.length
                            };
                        if ('{' === hc)
                            gc++;
                        else if ('}' === hc) {
                            if (0 === gc)
                                throw [
                                    'ExtraCloseMissingOpen',
                                    'Extra close brace or missing open brace'
                                ];
                            gc--;
                        }
                        ec++;
                    }
                    return null;
                }(Rb, bc.length, Ub || Vb);
                if (null === cc)
                    return null;
                var dc = Rb.substring(0, Ub ? cc.endMatchEnd : cc.endMatchBegin);
                if (Wb || Xb) {
                    var ec = this.findObserveGroups(Rb.substr(cc.endMatchEnd), Wb, Xb, Yb, Zb);
                    if (null === ec)
                        return null;
                    var fc = [
                        dc,
                        ec.match_
                    ];
                    return {
                        match_: $b ? fc.join('') : fc,
                        remainder: ec.remainder
                    };
                }
                return {
                    match_: dc,
                    remainder: Rb.substr(cc.endMatchEnd)
                };
            },
            match_: function(Rb, Sb) {
                var Tb = _Qb.patterns.patterns[Rb];
                if (void 0 === Tb)
                    throw [
                        'MhchemBugP',
                        'mhchem bug P. Please report. (' + Rb + ')'
                    ];
                if ('function' == typeof Tb)
                    return _Qb.patterns.patterns[Rb](Sb);
                var Ub = Sb.match(Tb);
                return Ub ? {
                    match_: Ub[2] ? [
                        Ub[1],
                        Ub[2]
                    ] : Ub[1] ? Ub[1] : Ub[0],
                    remainder: Sb.substr(Ub[0].length)
                } : null;
            }
        },
        actions: {
            'a=': function(Rb, Sb) {
                Rb.a = (Rb.a || '') + Sb;
            },
            'b=': function(Rb, Sb) {
                Rb.b = (Rb.b || '') + Sb;
            },
            'p=': function(Rb, Sb) {
                Rb.p = (Rb.p || '') + Sb;
            },
            'o=': function(Rb, Sb) {
                Rb.o = (Rb.o || '') + Sb;
            },
            'q=': function(Rb, Sb) {
                Rb.q = (Rb.q || '') + Sb;
            },
            'd=': function(Rb, Sb) {
                Rb.d = (Rb.d || '') + Sb;
            },
            'rm=': function(Rb, Sb) {
                Rb.rm = (Rb.rm || '') + Sb;
            },
            'text=': function(Rb, Sb) {
                Rb.text_ = (Rb.text_ || '') + Sb;
            },
            insert: function(Rb, Sb, Tb) {
                return {
                    type_: Tb
                };
            },
            'insert+p1': function(Rb, Sb, Tb) {
                return {
                    type_: Tb,
                    p1: Sb
                };
            },
            'insert+p1+p2': function(Rb, Sb, Tb) {
                return {
                    type_: Tb,
                    p1: Sb[0],
                    p2: Sb[1]
                };
            },
            copy: function(Rb, Sb) {
                return Sb;
            },
            rm: function(Rb, Sb) {
                return {
                    type_: 'rm',
                    p1: Sb || ''
                };
            },
            text: function(Rb, Sb) {
                return _Qb.go(Sb, 'text');
            },
            '{text}': function(Rb, Sb) {
                var Tb = ['{'];
                return _Qb.concatArray(Tb, _Qb.go(Sb, 'text')), Tb.push('}'), Tb;
            },
            'tex-math': function(Rb, Sb) {
                return _Qb.go(Sb, 'tex-math');
            },
            'tex-math tight': function(Rb, Sb) {
                return _Qb.go(Sb, 'tex-math tight');
            },
            bond: function(Rb, Sb, Tb) {
                return {
                    type_: 'bond',
                    kind_: Tb || Sb
                };
            },
            'color0-output': function(Rb, Sb) {
                return {
                    type_: 'color0',
                    color: Sb[0]
                };
            },
            ce: function(Rb, Sb) {
                return _Qb.go(Sb);
            },
            '1/2': function(Rb, Sb) {
                var Tb = [];
                Sb.match(/^[+\-]/) && (Tb.push(Sb.substr(0, 1)), Sb = Sb.substr(1));
                var Ub = Sb.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
                return Ub[1] = Ub[1].replace(/\$/g, ''), Tb.push({
                    type_: 'frac',
                    p1: Ub[1],
                    p2: Ub[2]
                }), Ub[3] && (Ub[3] = Ub[3].replace(/\$/g, ''), Tb.push({
                    type_: 'tex-math',
                    p1: Ub[3]
                })), Tb;
            },
            '9,9': function(Rb, Sb) {
                return _Qb.go(Sb, '9,9');
            }
        },
        createTransitions: function(Rb) {
            var Sb, Tb, Ub, Vb, Wb = {};
            for (Sb in Rb)
                for (Tb in Rb[Sb])
                    for (Ub = Tb.split('|'), Rb[Sb][Tb].stateArray = Ub, Vb = 0; Vb < Ub.length; Vb++)
                        Wb[Ub[Vb]] = [];
            for (Sb in Rb)
                for (Tb in Rb[Sb])
                    for (Ub = Rb[Sb][Tb].stateArray || [], Vb = 0; Vb < Ub.length; Vb++) {
                        var Xb = Rb[Sb][Tb];
                        if (Xb.action_) {
                            Xb.action_ = [].concat(Xb.action_);
                            for (var Yb = 0; Yb < Xb.action_.length; Yb++)
                                'string' == typeof Xb.action_[Yb] && (Xb.action_[Yb] = {
                                    type_: Xb.action_[Yb]
                                });
                        } else
                            Xb.action_ = [];
                        for (var Yb = Sb.split('|'), Zb = 0; Zb < Yb.length; Zb++)
                            if ('*' === Ub[Vb])
                                for (var $b in Wb)
                                    Wb[$b].push({
                                        pattern: Yb[Zb],
                                        task: Xb
                                    });
                            else
                                Wb[Ub[Vb]].push({
                                    pattern: Yb[Zb],
                                    task: Xb
                                });
                    }
            return Wb;
        },
        stateMachines: {}
    };
    _Qb.stateMachines = {
        ce: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                else: {
                    '0|1|2': {
                        action_: 'beginsWithBond=false',
                        revisit: !0,
                        toContinue: !0
                    }
                },
                oxidation$: {
                    0: {
                        action_: 'oxidation-output'
                    }
                },
                CMT: {
                    r: {
                        action_: 'rdt=',
                        nextState: 'rt'
                    },
                    rd: {
                        action_: 'rqt=',
                        nextState: 'rdt'
                    }
                },
                arrowUpDown: {
                    '0|1|2|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '1'
                    }
                },
                uprightEntities: {
                    '0|1|2': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '1'
                    }
                },
                orbital: {
                    '0|1|2|3': {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                '->': {
                    '0|1|2|3': {
                        action_: 'r=',
                        nextState: 'r'
                    },
                    'a|as': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    },
                    '*': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    }
                },
                '+': {
                    o: {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    'd|D': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qd|qD': {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    3: {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                amount: {
                    '0|2': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                'pm-operator': {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            {
                                type_: 'operator',
                                option: '\\pm'
                            }
                        ],
                        nextState: '0'
                    }
                },
                operator: {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                '-$': {
                    'o|q': {
                        action_: [
                            'charge or bond',
                            'output'
                        ],
                        nextState: 'qd'
                    },
                    d: {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    D: {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    qd: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qD|dq': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '-9': {
                    '3|o': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '- orbital overlap': {
                    o: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    d: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    }
                },
                '-': {
                    '0|1|2': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'beginsWithBond=true',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    3: {
                        action_: {
                            type_: 'bond',
                            option: '-'
                        }
                    },
                    a: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    as: {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    b: {
                        action_: 'b='
                    },
                    o: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    q: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    'd|qd|dq': {
                        action_: {
                            type_: '- after o/d',
                            option: !0
                        },
                        nextState: '2'
                    },
                    'D|qD|p': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                amount2: {
                    '1|3': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                letters: {
                    '0|1|2|3|a|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'q|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    'd|D|qd|qD': {
                        action_: 'o after d',
                        nextState: 'o'
                    }
                },
                digits: {
                    o: {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    q: {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    a: {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                'space A': {
                    'b|p|bp': {}
                },
                space: {
                    a: {
                        nextState: 'as'
                    },
                    0: {
                        action_: 'sb=false'
                    },
                    '1|2': {
                        action_: 'sb=true'
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: 'output',
                        nextState: '0'
                    },
                    '*': {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1'
                    }
                },
                '1st-level escape': {
                    '1|2': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ]
                    },
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ],
                        nextState: '0'
                    }
                },
                '[(...)]': {
                    'r|rt': {
                        action_: 'rd=',
                        nextState: 'rd'
                    },
                    'rd|rdt': {
                        action_: 'rq=',
                        nextState: 'rdq'
                    }
                },
                '...': {
                    'o|d|D|dq|qd|qD': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '...'
                            }
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            {
                                type_: 'insert',
                                option: 'ellipsis'
                            }
                        ],
                        nextState: '1'
                    }
                },
                '. |* ': {
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'addition compound'
                            }
                        ],
                        nextState: '1'
                    }
                },
                'state of aggregation $': {
                    '*': {
                        action_: [
                            'output',
                            'state of aggregation'
                        ],
                        nextState: '1'
                    }
                },
                '{[(': {
                    'a|as|o': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '0|1|2|3': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    }
                },
                ')]}': {
                    '0|1|2|3|b|p|bp|o': {
                        action_: [
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    },
                    'a|as|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    }
                },
                ', ': {
                    '*': {
                        action_: [
                            'output',
                            'comma'
                        ],
                        nextState: '0'
                    }
                },
                '^_': {
                    '*': {}
                },
                '^{(...)}|^($...$)': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'D'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qD'
                    },
                    'd|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'D'
                    }
                },
                '^a|^\\x{}{}|^\\x{}|^\\x|\'': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'd|qd|D|qD': {
                        action_: 'd='
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    }
                },
                '_{(state of aggregation)}$': {
                    'd|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
                    '0|1|2|as': {
                        action_: 'p=',
                        nextState: 'p'
                    },
                    b: {
                        action_: 'p=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    'q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '=<>': {
                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '#': {
                    '0|1|2|3|a|as|o': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '#'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '{}': {
                    '*': {
                        action_: {
                            type_: 'output',
                            option: 1
                        },
                        nextState: '1'
                    }
                },
                '{...}': {
                    '0|1|2|3|a|as|b|p|bp': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'o|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '$...$': {
                    a: {
                        action_: 'a='
                    },
                    '0|1|2|3|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'as|o': {
                        action_: 'o='
                    },
                    'q|d|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '\\bond{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '\\frac{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'frac-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\overset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'overset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underbrace{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underbrace-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color0-output'
                        ]
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'ce'
                        ],
                        nextState: '3'
                    }
                },
                '\\,': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '1'
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '0|1|2|3|a|as|b|p|bp|o|c0': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    }
                },
                others: {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '3'
                    }
                },
                else2: {
                    a: {
                        action_: 'a to o',
                        nextState: 'o',
                        revisit: !0
                    },
                    as: {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1',
                        revisit: !0
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: ['output'],
                        nextState: '0',
                        revisit: !0
                    },
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ],
                        nextState: '3'
                    }
                }
            }),
            actions: {
                'o after d': function(Rb, Sb) {
                    var Tb;
                    if ((Rb.d || '').match(/^[0-9]+$/)) {
                        var Ub = Rb.d;
                        Rb.d = void 0, Tb = this.output(Rb), Rb.b = Ub;
                    } else
                        Tb = this.output(Rb);
                    return _Qb.actions['o='](Rb, Sb), Tb;
                },
                'd= kv': function(Rb, Sb) {
                    Rb.d = Sb, Rb.dType = 'kv';
                },
                'charge or bond': function(Rb, Sb) {
                    if (Rb.beginsWithBond) {
                        var Tb = [];
                        return _Qb.concatArray(Tb, this.output(Rb)), _Qb.concatArray(Tb, _Qb.actions.bond(Rb, Sb, '-')), Tb;
                    }
                    Rb.d = Sb;
                },
                '- after o/d': function(Rb, Sb, Tb) {
                    var Ub = _Qb.patterns.match_('orbital', Rb.o || ''),
                        Vb = _Qb.patterns.match_('one lowercase greek letter $', Rb.o || ''),
                        Wb = _Qb.patterns.match_('one lowercase latin letter $', Rb.o || ''),
                        Xb = _Qb.patterns.match_('$one lowercase latin letter$ $', Rb.o || ''),
                        Yb = '-' === Sb && (Ub && '' === Ub.remainder || Vb || Wb || Xb);
                    !Yb || Rb.a || Rb.b || Rb.p || Rb.d || Rb.q || Ub || !Wb || (Rb.o = '$' + Rb.o + '$');
                    var Zb = [];
                    return Yb ? (_Qb.concatArray(Zb, this.output(Rb)), Zb.push({
                        type_: 'hyphen'
                    })) : (Ub = _Qb.patterns.match_('digits', Rb.d || ''), Tb && Ub && '' === Ub.remainder ? (_Qb.concatArray(Zb, _Qb.actions['d='](Rb, Sb)), _Qb.concatArray(Zb, this.output(Rb))) : (_Qb.concatArray(Zb, this.output(Rb)), _Qb.concatArray(Zb, _Qb.actions.bond(Rb, Sb, '-')))), Zb;
                },
                'a to o': function(Rb) {
                    Rb.o = Rb.a, Rb.a = void 0;
                },
                'sb=true': function(Rb) {
                    Rb.sb = !0;
                },
                'sb=false': function(Rb) {
                    Rb.sb = !1;
                },
                'beginsWithBond=true': function(Rb) {
                    Rb.beginsWithBond = !0;
                },
                'beginsWithBond=false': function(Rb) {
                    Rb.beginsWithBond = !1;
                },
                'parenthesisLevel++': function(Rb) {
                    Rb.parenthesisLevel++;
                },
                'parenthesisLevel--': function(Rb) {
                    Rb.parenthesisLevel--;
                },
                'state of aggregation': function(Rb, Sb) {
                    return {
                        type_: 'state of aggregation',
                        p1: _Qb.go(Sb, 'o')
                    };
                },
                comma: function(Rb, Sb) {
                    var Tb = Sb.replace(/\s*$/, '');
                    return Tb !== Sb && 0 === Rb.parenthesisLevel ? {
                        type_: 'comma enumeration L',
                        p1: Tb
                    } : {
                        type_: 'comma enumeration M',
                        p1: Tb
                    };
                },
                output: function(Rb, Sb, Tb) {
                    var Ub, Vb, Wb;
                    for (var Xb in (Rb.r ? (Vb = 'M' === Rb.rdt ? _Qb.go(Rb.rd, 'tex-math') : 'T' === Rb.rdt ? [{
                            type_: 'text',
                            p1: Rb.rd || ''
                        }] : _Qb.go(Rb.rd), Wb = 'M' === Rb.rqt ? _Qb.go(Rb.rq, 'tex-math') : 'T' === Rb.rqt ? [{
                            type_: 'text',
                            p1: Rb.rq || ''
                        }] : _Qb.go(Rb.rq), Ub = {
                            type_: 'arrow',
                            r: Rb.r,
                            rd: Vb,
                            rq: Wb
                        }) : (Ub = [], (Rb.a || Rb.b || Rb.p || Rb.o || Rb.q || Rb.d || Tb) && (Rb.sb && Ub.push({
                            type_: 'entitySkip'
                        }), Rb.o || Rb.q || Rb.d || Rb.b || Rb.p || 2 === Tb ? Rb.o || Rb.q || Rb.d || !Rb.b && !Rb.p ? Rb.o && 'kv' === Rb.dType && _Qb.patterns.match_('d-oxidation$', Rb.d || '') ? Rb.dType = 'oxidation' : Rb.o && 'kv' === Rb.dType && !Rb.q && (Rb.dType = void 0) : (Rb.o = Rb.a, Rb.d = Rb.b, Rb.q = Rb.p, Rb.a = Rb.b = Rb.p = void 0) : (Rb.o = Rb.a, Rb.a = void 0), Ub.push({
                            type_: 'chemfive',
                            a: _Qb.go(Rb.a, 'a'),
                            b: _Qb.go(Rb.b, 'bd'),
                            p: _Qb.go(Rb.p, 'pq'),
                            o: _Qb.go(Rb.o, 'o'),
                            q: _Qb.go(Rb.q, 'pq'),
                            d: _Qb.go(Rb.d, 'oxidation' === Rb.dType ? 'oxidation' : 'bd'),
                            dType: Rb.dType
                        }))), Rb))
                        'parenthesisLevel' !== Xb && 'beginsWithBond' !== Xb && delete Rb[Xb];
                    return Ub;
                },
                'oxidation-output': function(Rb, Sb) {
                    var Tb = ['{'];
                    return _Qb.concatArray(Tb, _Qb.go(Sb, 'oxidation')), Tb.push('}'), Tb;
                },
                'frac-output': function(Rb, Sb) {
                    return {
                        type_: 'frac-ce',
                        p1: _Qb.go(Sb[0]),
                        p2: _Qb.go(Sb[1])
                    };
                },
                'overset-output': function(Rb, Sb) {
                    return {
                        type_: 'overset',
                        p1: _Qb.go(Sb[0]),
                        p2: _Qb.go(Sb[1])
                    };
                },
                'underset-output': function(Rb, Sb) {
                    return {
                        type_: 'underset',
                        p1: _Qb.go(Sb[0]),
                        p2: _Qb.go(Sb[1])
                    };
                },
                'underbrace-output': function(Rb, Sb) {
                    return {
                        type_: 'underbrace',
                        p1: _Qb.go(Sb[0]),
                        p2: _Qb.go(Sb[1])
                    };
                },
                'color-output': function(Rb, Sb) {
                    return {
                        type_: 'color',
                        color1: Sb[0],
                        color2: _Qb.go(Sb[1])
                    };
                },
                'r=': function(Rb, Sb) {
                    Rb.r = Sb;
                },
                'rdt=': function(Rb, Sb) {
                    Rb.rdt = Sb;
                },
                'rd=': function(Rb, Sb) {
                    Rb.rd = Sb;
                },
                'rqt=': function(Rb, Sb) {
                    Rb.rqt = Sb;
                },
                'rq=': function(Rb, Sb) {
                    Rb.rq = Sb;
                },
                operator: function(Rb, Sb, Tb) {
                    return {
                        type_: 'operator',
                        kind_: Tb || Sb
                    };
                }
            }
        },
        a: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                '$(...)$': {
                    '*': {
                        action_: 'tex-math tight',
                        nextState: '1'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'commaDecimal'
                        }
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        o: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\\ca': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'circa'
                        }
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: '{text}'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        text: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '{...}': {
                    '*': {
                        action_: 'text='
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '\\greek': {
                    '*': {
                        action_: [
                            'output',
                            'rm'
                        ]
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ]
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                output: function(Rb) {
                    if (Rb.text_) {
                        var Sb = {
                            type_: 'text',
                            p1: Rb.text_
                        };
                        for (var Tb in Rb)
                            delete Rb[Tb];
                        return Sb;
                    }
                }
            }
        },
        pq: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {}
                },
                'state of aggregation $': {
                    '*': {
                        action_: 'state of aggregation'
                    }
                },
                i$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '(KV letters),': {
                    0: {
                        action_: 'rm',
                        nextState: '0'
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '-9.,9': {
                    '*': {
                        action_: '9,9'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert+p1',
                            option: 'comma enumeration S'
                        }
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'state of aggregation': function(Rb, Sb) {
                    return {
                        type_: 'state of aggregation subscript',
                        p1: _Qb.go(Sb, 'o')
                    };
                },
                'color-output': function(Rb, Sb) {
                    return {
                        type_: 'color',
                        color1: Sb[0],
                        color2: _Qb.go(Sb[1], 'pq')
                    };
                }
            }
        },
        bd: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {}
                },
                x$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '-9.,9 no missing 0': {
                    '*': {
                        action_: '9,9'
                    }
                },
                '.': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'electron dot'
                        }
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                x: {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'KV x'
                        }
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\'': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'prime'
                        }
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'color-output': function(Rb, Sb) {
                    return {
                        type_: 'color',
                        color1: Sb[0],
                        color2: _Qb.go(Sb[1], 'bd')
                    };
                }
            }
        },
        oxidation: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {}
                },
                'roman numeral': {
                    '*': {
                        action_: 'roman-numeral'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'roman-numeral': function(Rb, Sb) {
                    return {
                        type_: 'roman numeral',
                        p1: Sb || ''
                    };
                }
            }
        },
        'tex-math': {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                output: function(Rb) {
                    if (Rb.o) {
                        var Sb = {
                            type_: 'tex-math',
                            p1: Rb.o
                        };
                        for (var Tb in Rb)
                            delete Rb[Tb];
                        return Sb;
                    }
                }
            }
        },
        'tex-math tight': {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                '-|+': {
                    '*': {
                        action_: 'tight operator'
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                'tight operator': function(Rb, Sb) {
                    Rb.o = (Rb.o || '') + '{' + Sb + '}';
                },
                output: function(Rb) {
                    if (Rb.o) {
                        var Sb = {
                            type_: 'tex-math',
                            p1: Rb.o
                        };
                        for (var Tb in Rb)
                            delete Rb[Tb];
                        return Sb;
                    }
                }
            }
        },
        '9,9': {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {}
                },
                ',': {
                    '*': {
                        action_: 'comma'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                }
            }
        },
        pu: {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                space$: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ]
                    }
                },
                '{[(|)]}': {
                    '0|a': {
                        action_: 'copy'
                    }
                },
                '(-)(9)^(-9)': {
                    0: {
                        action_: 'number^',
                        nextState: 'a'
                    }
                },
                '(-)(9.,9)(e)(99)': {
                    0: {
                        action_: 'enumber',
                        nextState: 'a'
                    }
                },
                space: {
                    '0|a': {}
                },
                'pm-operator': {
                    '0|a': {
                        action_: {
                            type_: 'operator',
                            option: '\\pm'
                        },
                        nextState: '0'
                    }
                },
                operator: {
                    '0|a': {
                        action_: 'copy',
                        nextState: '0'
                    }
                },
                '//': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '/': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '{...}|else': {
                    '0|d': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    a: {
                        action_: [
                            'space',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    '/|q': {
                        action_: 'q=',
                        nextState: 'q'
                    }
                }
            }),
            actions: {
                enumber: function(Rb, Sb) {
                    var Tb = [];
                    return '+-' === Sb[0] || '+/-' === Sb[0] ? Tb.push('\\pm ') : Sb[0] && Tb.push(Sb[0]), Sb[1] && (_Qb.concatArray(Tb, _Qb.go(Sb[1], 'pu-9,9')), Sb[2] && (Sb[2].match(/[,.]/) ? _Qb.concatArray(Tb, _Qb.go(Sb[2], 'pu-9,9')) : Tb.push(Sb[2])), Sb[3] = Sb[4] || Sb[3], Sb[3] && (Sb[3] = Sb[3].trim(), 'e' === Sb[3] || '*' === Sb[3].substr(0, 1) ? Tb.push({
                        type_: 'cdot'
                    }) : Tb.push({
                        type_: 'times'
                    }))), Sb[3] && Tb.push('10^{' + Sb[5] + '}'), Tb;
                },
                'number^': function(Rb, Sb) {
                    var Tb = [];
                    return '+-' === Sb[0] || '+/-' === Sb[0] ? Tb.push('\\pm ') : Sb[0] && Tb.push(Sb[0]), _Qb.concatArray(Tb, _Qb.go(Sb[1], 'pu-9,9')), Tb.push('^{' + Sb[2] + '}'), Tb;
                },
                operator: function(Rb, Sb, Tb) {
                    return {
                        type_: 'operator',
                        kind_: Tb || Sb
                    };
                },
                space: function() {
                    return {
                        type_: 'pu-space-1'
                    };
                },
                output: function(Rb) {
                    var Sb, Tb = _Qb.patterns.match_('{(...)}', Rb.d || '');
                    Tb && '' === Tb.remainder && (Rb.d = Tb.match_);
                    var Ub = _Qb.patterns.match_('{(...)}', Rb.q || '');
                    if (Ub && '' === Ub.remainder && (Rb.q = Ub.match_), Rb.d && (Rb.d = Rb.d.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), Rb.d = Rb.d.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F')), Rb.q) {
                        Rb.q = Rb.q.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), Rb.q = Rb.q.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F');
                        var Vb = {
                            d: _Qb.go(Rb.d, 'pu'),
                            q: _Qb.go(Rb.q, 'pu')
                        };
                        '//' === Rb.o ? Sb = {
                            type_: 'pu-frac',
                            p1: Vb.d,
                            p2: Vb.q
                        } : (Sb = Vb.d, Vb.d.length > 1 || Vb.q.length > 1 ? Sb.push({
                            type_: ' / '
                        }) : Sb.push({
                            type_: '/'
                        }), _Qb.concatArray(Sb, Vb.q));
                    } else
                        Sb = _Qb.go(Rb.d, 'pu-2');
                    for (var Vb in Rb)
                        delete Rb[Vb];
                    return Sb;
                }
            }
        },
        'pu-2': {
            transitions: _Qb.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '*': {
                    '*': {
                        action_: [
                            'output',
                            'cdot'
                        ],
                        nextState: '0'
                    }
                },
                '\\x': {
                    '*': {
                        action_: 'rm='
                    }
                },
                space: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ],
                        nextState: '0'
                    }
                },
                '^{(...)}|^(-1)': {
                    1: {
                        action_: '^(-1)'
                    }
                },
                '-9.,9': {
                    0: {
                        action_: 'rm=',
                        nextState: '0'
                    },
                    1: {
                        action_: '^(-1)',
                        nextState: '0'
                    }
                },
                '{...}|else': {
                    '*': {
                        action_: 'rm=',
                        nextState: '1'
                    }
                }
            }),
            actions: {
                cdot: function() {
                    return {
                        type_: 'tight cdot'
                    };
                },
                '^(-1)': function(Rb, Sb) {
                    Rb.rm += '^{' + Sb + '}';
                },
                space: function() {
                    return {
                        type_: 'pu-space-2'
                    };
                },
                output: function(Rb) {
                    var Sb = [];
                    if (Rb.rm) {
                        var Tb = _Qb.patterns.match_('{(...)}', Rb.rm || '');
                        Sb = Tb && '' === Tb.remainder ? _Qb.go(Tb.match_, 'pu') : {
                            type_: 'rm',
                            p1: Rb.rm
                        };
                    }
                    for (var Tb in Rb)
                        delete Rb[Tb];
                    return Sb;
                }
            }
        },
        'pu-9,9': {
            transitions: _Qb.createTransitions({
                empty: {
                    0: {
                        action_: 'output-0'
                    },
                    o: {
                        action_: 'output-o'
                    }
                },
                ',': {
                    0: {
                        action_: [
                            'output-0',
                            'comma'
                        ],
                        nextState: 'o'
                    }
                },
                '.': {
                    0: {
                        action_: [
                            'output-0',
                            'copy'
                        ],
                        nextState: 'o'
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                },
                'output-0': function(Rb) {
                    var Sb = [];
                    if (Rb.text_ = Rb.text_ || '', Rb.text_.length > 4) {
                        var Tb = Rb.text_.length % 3;
                        0 === Tb && (Tb = 3);
                        for (var Ub = Rb.text_.length - 3; Ub > 0; Ub -= 3)
                            Sb.push(Rb.text_.substr(Ub, 3)), Sb.push({
                                type_: '1000 separator'
                            });
                        Sb.push(Rb.text_.substr(0, Tb)), Sb.reverse();
                    } else
                        Sb.push(Rb.text_);
                    for (var Tb in Rb)
                        delete Rb[Tb];
                    return Sb;
                },
                'output-o': function(Rb) {
                    var Sb = [];
                    if (Rb.text_ = Rb.text_ || '', Rb.text_.length > 4) {
                        for (var Tb = Rb.text_.length - 3, Ub = 0; Ub < Tb; Ub += 3)
                            Sb.push(Rb.text_.substr(Ub, 3)), Sb.push({
                                type_: '1000 separator'
                            });
                        Sb.push(Rb.text_.substr(Ub));
                    } else
                        Sb.push(Rb.text_);
                    for (var Tb in Rb)
                        delete Rb[Tb];
                    return Sb;
                }
            }
        }
    };
    var _Rb = {
        go: function(Sb, Tb) {
            if (!Sb)
                return '';
            for (var Ub = '', Vb = !1, Wb = 0; Wb < Sb.length; Wb++) {
                var Xb = Sb[Wb];
                'string' == typeof Xb ? Ub += Xb : (Ub += _Rb._go2(Xb), '1st-level escape' === Xb.type_ && (Vb = !0));
            }
            return Tb || Vb || !Ub || (Ub = '{' + Ub + '}'), Ub;
        },
        _goInner: function(Sb) {
            return Sb ? _Rb.go(Sb, !0) : Sb;
        },
        _go2: function(Sb) {
            var Tb;
            switch (Sb.type_) {
                case 'chemfive':
                    Tb = '';
                    var Ub = {
                        a: _Rb._goInner(Sb.a),
                        b: _Rb._goInner(Sb.b),
                        p: _Rb._goInner(Sb.p),
                        o: _Rb._goInner(Sb.o),
                        q: _Rb._goInner(Sb.q),
                        d: _Rb._goInner(Sb.d)
                    };
                    Ub.a && (Ub.a.match(/^[+\-]/) && (Ub.a = '{' + Ub.a + '}'), Tb += Ub.a + '\\,'), (Ub.b || Ub.p) && (Tb += '{\\vphantom{X}}', Tb += '^{\\hphantom{' + (Ub.b || '') + '}}_{\\hphantom{' + (Ub.p || '') + '}}', Tb += '{\\vphantom{X}}', Tb += '^{\\smash[t]{\\vphantom{2}}\\mathllap{' + (Ub.b || '') + '}}', Tb += '_{\\vphantom{2}\\mathllap{\\smash[t]{' + (Ub.p || '') + '}}}'), Ub.o && (Ub.o.match(/^[+\-]/) && (Ub.o = '{' + Ub.o + '}'), Tb += Ub.o), 'kv' === Sb.dType ? ((Ub.d || Ub.q) && (Tb += '{\\vphantom{X}}'), Ub.d && (Tb += '^{' + Ub.d + '}'), Ub.q && (Tb += '_{\\smash[t]{' + Ub.q + '}}')) : 'oxidation' === Sb.dType ? (Ub.d && (Tb += '{\\vphantom{X}}', Tb += '^{' + Ub.d + '}'), Ub.q && (Tb += '{\\vphantom{X}}', Tb += '_{\\smash[t]{' + Ub.q + '}}')) : (Ub.q && (Tb += '{\\vphantom{X}}', Tb += '_{\\smash[t]{' + Ub.q + '}}'), Ub.d && (Tb += '{\\vphantom{X}}', Tb += '^{' + Ub.d + '}'));
                    break;
                case 'rm':
                case 'roman numeral':
                    Tb = '\\mathrm{' + Sb.p1 + '}';
                    break;
                case 'text':
                    Sb.p1.match(/[\^_]/) ? (Sb.p1 = Sb.p1.replace(' ', '~').replace('-', '\\text{-}'), Tb = '\\mathrm{' + Sb.p1 + '}') : Tb = '\\text{' + Sb.p1 + '}';
                    break;
                case 'state of aggregation':
                    Tb = '\\mskip2mu ' + _Rb._goInner(Sb.p1);
                    break;
                case 'state of aggregation subscript':
                    Tb = '\\mskip1mu ' + _Rb._goInner(Sb.p1);
                    break;
                case 'bond':
                    if (!(Tb = _Rb._getBond(Sb.kind_)))
                        throw [
                            'MhchemErrorBond',
                            'mhchem Error. Unknown bond type (' + Sb.kind_ + ')'
                        ];
                    break;
                case 'frac':
                    var Vb = '\\frac{' + Sb.p1 + '}{' + Sb.p2 + '}';
                    Tb = '\\mathchoice{\\textstyle' + Vb + '}{' + Vb + '}{' + Vb + '}{' + Vb + '}';
                    break;
                case 'pu-frac':
                    var Wb = '\\frac{' + _Rb._goInner(Sb.p1) + '}{' + _Rb._goInner(Sb.p2) + '}';
                    Tb = '\\mathchoice{\\textstyle' + Wb + '}{' + Wb + '}{' + Wb + '}{' + Wb + '}';
                    break;
                case 'tex-math':
                case '1st-level escape':
                    Tb = Sb.p1 + ' ';
                    break;
                case 'frac-ce':
                    Tb = '\\frac{' + _Rb._goInner(Sb.p1) + '}{' + _Rb._goInner(Sb.p2) + '}';
                    break;
                case 'overset':
                    Tb = '\\overset{' + _Rb._goInner(Sb.p1) + '}{' + _Rb._goInner(Sb.p2) + '}';
                    break;
                case 'underset':
                    Tb = '\\underset{' + _Rb._goInner(Sb.p1) + '}{' + _Rb._goInner(Sb.p2) + '}';
                    break;
                case 'underbrace':
                    Tb = '\\underbrace{' + _Rb._goInner(Sb.p1) + '}_{' + _Rb._goInner(Sb.p2) + '}';
                    break;
                case 'color':
                    Tb = '{\\color{' + Sb.color1 + '}{' + _Rb._goInner(Sb.color2) + '}}';
                    break;
                case 'color0':
                    Tb = '\\color{' + Sb.color + '}';
                    break;
                case 'arrow':
                    var Xb = {
                            rd: _Rb._goInner(Sb.rd),
                            rq: _Rb._goInner(Sb.rq)
                        },
                        Yb = '\\x' + _Rb._getArrow(Sb.r);
                    Xb.rq && (Yb += '[{' + Xb.rq + '}]'), Tb = Yb += Xb.rd ? '{' + Xb.rd + '}' : '{}';
                    break;
                case 'operator':
                    Tb = _Rb._getOperator(Sb.kind_);
                    break;
                case 'space':
                    Tb = ' ';
                    break;
                case 'entitySkip':
                case 'pu-space-1':
                    Tb = '~';
                    break;
                case 'pu-space-2':
                    Tb = '\\mkern3mu ';
                    break;
                case '1000 separator':
                    Tb = '\\mkern2mu ';
                    break;
                case 'commaDecimal':
                    Tb = '{,}';
                    break;
                case 'comma enumeration L':
                    Tb = '{' + Sb.p1 + '}\\mkern6mu ';
                    break;
                case 'comma enumeration M':
                    Tb = '{' + Sb.p1 + '}\\mkern3mu ';
                    break;
                case 'comma enumeration S':
                    Tb = '{' + Sb.p1 + '}\\mkern1mu ';
                    break;
                case 'hyphen':
                    Tb = '\\text{-}';
                    break;
                case 'addition compound':
                    Tb = '\\,{\\cdot}\\,';
                    break;
                case 'electron dot':
                    Tb = '\\mkern1mu \\bullet\\mkern1mu ';
                    break;
                case 'KV x':
                    Tb = '{\\times}';
                    break;
                case 'prime':
                    Tb = '\\prime ';
                    break;
                case 'cdot':
                    Tb = '\\cdot ';
                    break;
                case 'tight cdot':
                    Tb = '\\mkern1mu{\\cdot}\\mkern1mu ';
                    break;
                case 'times':
                    Tb = '\\times ';
                    break;
                case 'circa':
                    Tb = '{\\sim}';
                    break;
                case '^':
                    Tb = 'uparrow';
                    break;
                case 'v':
                    Tb = 'downarrow';
                    break;
                case 'ellipsis':
                    Tb = '\\ldots ';
                    break;
                case '/':
                    Tb = '/';
                    break;
                case ' / ':
                    Tb = '\\,/\\,';
                    break;
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
            return Tb;
        },
        _getArrow: function(Sb) {
            switch (Sb) {
                case '->':
                case '\u2192':
                case '\u27F6':
                    return 'rightarrow';
                case '<-':
                    return 'leftarrow';
                case '<->':
                    return 'leftrightarrow';
                case '<-->':
                    return 'rightleftarrows';
                case '<=>':
                case '\u21CC':
                    return 'rightleftharpoons';
                case '<=>>':
                    return 'rightequilibrium';
                case '<<=>':
                    return 'leftequilibrium';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getBond: function(Sb) {
            switch (Sb) {
                case '-':
                case '1':
                    return '{-}';
                case '=':
                case '2':
                    return '{=}';
                case '#':
                case '3':
                    return '{\\equiv}';
                case '~':
                    return '{\\tripledash}';
                case '~-':
                    return '{\\mathrlap{\\raisebox{-.1em}{$-$}}\\raisebox{.1em}{$\\tripledash$}}';
                case '~=':
                case '~--':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$\\tripledash$}}-}';
                case '-~-':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$-$}}\\tripledash}';
                case '...':
                    return '{{\\cdot}{\\cdot}{\\cdot}}';
                case '....':
                    return '{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}';
                case '->':
                    return '{\\rightarrow}';
                case '<-':
                    return '{\\leftarrow}';
                case '<':
                    return '{<}';
                case '>':
                    return '{>}';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getOperator: function(Sb) {
            switch (Sb) {
                case '+':
                    return ' {}+{} ';
                case '-':
                    return ' {}-{} ';
                case '=':
                    return ' {}={} ';
                case '<':
                    return ' {}<{} ';
                case '>':
                    return ' {}>{} ';
                case '<<':
                    return ' {}\\ll{} ';
                case '>>':
                    return ' {}\\gg{} ';
                case '\\pm':
                    return ' {}\\pm{} ';
                case '\\approx':
                case '$\\approx$':
                    return ' {}\\approx{} ';
                case 'v':
                case '(v)':
                    return ' \\downarrow{} ';
                case '^':
                case '(^)':
                    return ' \\uparrow{} ';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        }
    };
    class Sb extends pb {
        static fromJson(Tb, Ub) {
            return new Sb(Tb.command, Tb.delim, Ub, Tb);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size
            };
        }
        render(Tb) {
            const Ub = new hb(null);
            return Ub.delim = this.value, Ub;
        }
        serialize(Tb) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(Tb, Ub, Vb, Wb) {
            super('delim', Vb, {
                command: Tb,
                style: null == Wb ? void 0 : Wb.style
            }), this.value = Ub, this.size = null == Wb ? void 0 : Wb.size;
        }
    }
    class Tb extends pb {
        static fromJson(Ub, Vb) {
            return new Tb(Ub.command, Ub.delim, Vb, Ub);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size,
                delimClass: this.delimClass
            };
        }
        render(Ub) {
            let Vb = function(Wb, Xb, Yb, Zb) {
                var $b;
                return void 0 === Wb || '.' === Wb ? Lt(Yb, null !== ($b = Zb.type) && void 0 !== $b ? $b : 'minner', Zb.classes) : ('<' === Wb || '\\lt' === Wb || '\u27E8' === Wb ? Wb = '\\langle' : '>' !== Wb && '\\gt' !== Wb && '\u27E9' !== Wb || (Wb = '\\rangle'), vb.has(Wb) || xb.has(Wb) ? ft(Wb, Xb, !1, Yb, Zb) : wb.has(Wb) ? yt(Wb, yb[Xb], !1, Yb, Zb) : null);
            }(this.value, this.size, Ub, {
                classes: this.delimClass
            });
            return Vb ? (Vb = this.bind(Ub, Vb), this.caret && (Vb.caret = this.caret), Vb) : null;
        }
        serialize(Ub) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(Ub, Vb, Wb, Xb) {
            super('sizeddelim', Wb, {
                command: Ub,
                style: Xb.style
            }), this.value = Vb, this.delimClass = Xb.delimClass, this.size = Xb.size;
        }
    }
    class Ub extends pb {
        static fromJson(Vb, Wb) {
            return new Ub(Vb.command, Vb.body, Vb.notation, Wb, Vb);
        }
        toJson() {
            const Vb = {};
            return this.notation.downdiagonalstrike && (Vb.downdiagonalstrike = !0), this.notation.updiagonalstrike && (Vb.downdiagonalstrike = !0), this.notation.verticalstrike && (Vb.downdiagonalstrike = !0), this.notation.horizontalstrike && (Vb.downdiagonalstrike = !0), this.notation.updiagonalarrow && (Vb.downdiagonalstrike = !0), this.notation.right && (Vb.downdiagonalstrike = !0), this.notation.bottom && (Vb.downdiagonalstrike = !0), this.notation.left && (Vb.downdiagonalstrike = !0), this.notation.top && (Vb.downdiagonalstrike = !0), this.notation.circle && (Vb.downdiagonalstrike = !0), this.notation.roundedbox && (Vb.downdiagonalstrike = !0), this.notation.madruwb && (Vb.downdiagonalstrike = !0), this.notation.actuarial && (Vb.downdiagonalstrike = !0), this.notation.box && (Vb.downdiagonalstrike = !0), {
                ...super.toJson(),
                notation: Vb,
                shadow: this.shadow,
                strokeWidth: this.strokeWidth,
                strokeStyle: this.strokeStyle,
                svgStrokeStyle: this.svgStrokeStyle,
                strokeColor: this.strokeColor,
                borderStyle: this.borderStyle,
                padding: this.padding
            };
        }
        serialize(Vb) {
            var Wb;
            let Xb = null !== (Wb = this.command) && void 0 !== Wb ? Wb : '';
            if ('\\enclose' === this.command) {
                Xb += '{' + Object.keys(this.notation).join(' ') + '}';
                let Yb = '',
                    Zb = '';
                this.backgroundcolor && 'transparent' !== this.backgroundcolor && (Yb += Zb + 'mathbackground="' + this.backgroundcolor + '"', Zb = ','), this.shadow && 'auto' !== this.shadow && (Yb += Zb + 'shadow="' + this.shadow + '"', Zb = ','), this.strokeWidth || 'solid' !== this.strokeStyle ? (Yb += Zb + this.borderStyle, Zb = ',') : this.strokeColor && 'currentColor' !== this.strokeColor && (Yb += Zb + 'mathcolor="' + this.strokeColor + '"', Zb = ','), Yb && (Xb += `[${ Yb }]`);
            }
            return Xb += `{${ this.bodyToLatex(Vb) }}`, Xb;
        }
        render(Vb) {
            var Wb;
            const Xb = new $(Vb, this.style),
                Yb = pb.createBox(Xb, this.body);
            if (!Yb)
                return null;
            const Zb = null !== (Wb = Le(this.padding && 'auto' !== this.padding ? Rt(this.padding, {
                    ...this.context,
                    registers: Vb.registers
                }) : Xb.getRegisterAsDimension('fboxsep'))) && void 0 !== Wb ? Wb : 0,
                $b = function(ac) {
                    if (!ac)
                        return '1px';
                    const bc = ac.match(/([0-9][a-zA-Z\%]+)/);
                    return null === bc ? '1px' : bc[1];
                }(this.borderStyle),
                ac = new hb(null, {
                    classes: 'ML__notation'
                });
            ac.setStyle('position', 'absolute'), ac.setStyle('z-index', '-1'), ac.setStyle('box-sizing', 'border-box'), ac.setStyle('top', `calc(-${ $b } / 2 - ${ Zb }em)`), ac.setStyle('left', `calc(-${ $b } / 2 - ${ Zb }em)`), ac.setStyle('height', `calc(100% + ${ 2 * Zb }em + 2 * ${ $b })`), ac.height = Yb.height + Zb, ac.depth = Yb.depth + Zb, ac.setStyle('width', `calc(100% + ${ 2 * Zb }em + 2 * ${ $b })`), this.backgroundcolor && ac.setStyle('background-color', this.backgroundcolor), this.notation.box && ac.setStyle('border', this.borderStyle), this.notation.actuarial && (ac.setStyle('border-top', this.borderStyle), ac.setStyle('border-right', this.borderStyle)), this.notation.madruwb && (ac.setStyle('border-bottom', this.borderStyle), ac.setStyle('border-right', this.borderStyle)), this.notation.roundedbox && (ac.setStyle('border-radius', '8px'), ac.setStyle('border', this.borderStyle)), this.notation.circle && (ac.setStyle('border-radius', '50%'), ac.setStyle('border', this.borderStyle)), this.notation.top && ac.setStyle('border-top', this.borderStyle), this.notation.left && ac.setStyle('border-left', this.borderStyle), this.notation.right && ac.setStyle('border-right', this.borderStyle), this.notation.bottom && ac.setStyle('border-bottom', this.borderStyle);
            let bc = '';
            if (this.notation.horizontalstrike && (bc += '<line x1="3%"  y1="50%" x2="97%" y2="50%"', bc += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, bc += ' stroke-linecap="round"', this.svgStrokeStyle && (bc += ` stroke-dasharray="${ this.svgStrokeStyle }"`), bc += '/>'), this.notation.verticalstrike && (bc += '<line x1="50%"  y1="3%" x2="50%" y2="97%"', bc += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, bc += ' stroke-linecap="round"', this.svgStrokeStyle && (bc += ` stroke-dasharray="${ this.svgStrokeStyle }"`), bc += '/>'), this.notation.updiagonalstrike && (bc += '<line x1="3%"  y1="97%" x2="97%" y2="3%"', bc += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, bc += ' stroke-linecap="round"', this.svgStrokeStyle && (bc += ` stroke-dasharray="${ this.svgStrokeStyle }"`), bc += '/>'), this.notation.downdiagonalstrike && (bc += '<line x1="3%"  y1="3%" x2="97%" y2="97%"', bc += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, bc += ' stroke-linecap="round"', this.svgStrokeStyle && (bc += ` stroke-dasharray="${ this.svgStrokeStyle }"`), bc += '/>'), bc) {
                let cc;
                'none' !== this.shadow && (cc = 'auto' === this.shadow ? 'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)' : 'filter: drop-shadow(' + this.shadow + ')'),
                    function(dc, ec, fc) {
                        dc.svgOverlay = ec, dc.svgStyle = fc;
                    }(ac, bc, cc);
            }
            const cc = new hb([
                ac,
                Yb
            ]);
            return cc.setStyle('position', 'relative'), cc.setStyle('display', 'inline'), cc.height = Yb.height + Zb, cc.depth = Yb.depth + Zb, cc.left = Zb, cc.right = Zb, this.caret && (cc.caret = this.caret), cc.wrap(Xb);
        }
        constructor(Vb, Wb, Xb, Yb, Zb) {
            super('enclose', Yb, {
                command: Vb,
                style: Zb.style
            }), this.body = Wb, this.backgroundcolor = Zb.backgroundcolor, Xb.updiagonalarrow && (Xb.updiagonalstrike = !1), Xb.box && (Xb.left = !1, Xb.right = !1, Xb.bottom = !1, Xb.top = !1), this.notation = Xb, this.shadow = Zb.shadow, this.strokeWidth = Zb.strokeWidth, this.strokeStyle = Zb.strokeStyle, this.svgStrokeStyle = Zb.svgStrokeStyle, this.strokeColor = Zb.strokeColor, this.borderStyle = Zb.borderStyle, this.padding = Zb.padding, this.captureSelection = !0;
        }
    }
    class Vb extends pb {
        static fromJson(Wb, Xb) {
            return new Vb(Wb.command, Wb.above, Wb.below, Xb, Wb);
        }
        toJson() {
            const Wb = {};
            return this.continuousFraction && (Wb.continuousFraction = !0), this.numerPrefix && (Wb.numerPrefix = this.numerPrefix), this.denomPrefix && (Wb.denomPrefix = this.denomPrefix), this.leftDelim && (Wb.leftDelim = this.leftDelim), this.rightDelim && (Wb.rightDelim = this.rightDelim), this.hasBarLine || (Wb.hasBarLine = !1), this.mathstyleName && (Wb.mathstyleName = this.mathstyleName), {
                ...super.toJson(),
                ...Wb
            };
        }
        serialize(Wb) {
            return this.command + `{${ this.aboveToLatex(Wb) }}` + `{${ this.belowToLatex(Wb) }}`;
        }
        get children() {
            if (this._children)
                return this._children;
            const Wb = [];
            if ('numerator-denominator' === this.context.fractionNavigationOrder) {
                for (const Xb of this.above)
                    Wb.push(...Xb.children), Wb.push(Xb);
                for (const Yb of this.below)
                    Wb.push(...Yb.children), Wb.push(Yb);
            } else {
                for (const Xb of this.below)
                    Wb.push(...Xb.children), Wb.push(Xb);
                for (const Yb of this.above)
                    Wb.push(...Yb.children), Wb.push(Yb);
            }
            return this._children = Wb, Wb;
        }
        render(Wb) {
            var Xb, Yb;
            const Zb = new $(Wb, this.style, this.mathstyleName),
                $b = Zb.metrics,
                ac = new $(Zb, this.style, this.continuousFraction ? '' : 'numerator'),
                bc = this.numerPrefix ? new hb([
                    new hb(this.numerPrefix),
                    pb.createBox(ac, this.above)
                ], {
                    isTight: ac.isTight,
                    newList: !0
                }) : null !== (Xb = pb.createBox(ac, this.above, {
                    newList: !0
                })) && void 0 !== Xb ? Xb : new hb(null, {
                    newList: !0
                }),
                cc = new $(Zb, this.style, this.continuousFraction ? '' : 'denominator'),
                dc = this.denomPrefix ? new hb([
                    new hb(this.denomPrefix),
                    pb.createBox(cc, this.below, {
                        newList: !0
                    })
                ]) : null !== (Yb = pb.createBox(cc, this.below, {
                    newList: !0
                })) && void 0 !== Yb ? Yb : new hb(null, {
                    newList: !0
                }),
                ec = this.hasBarLine ? $b.defaultRuleThickness : 0;
            let fc, gc, hc = 0;
            Zb.isDisplayStyle ? (fc = $b.num1, hc = ec > 0 ? 3 * ec : 7 * ec, gc = $b.denom1) : (ec > 0 ? (fc = $b.num2, hc = ec) : (fc = $b.num3, hc = 3 * ec), gc = $b.denom2);
            const ic = [];
            this.isSelected && ic.push('ML__selected');
            const jc = bc.depth,
                kc = dc.height;
            let lc;
            if (ec <= 0) {
                const mc = fc - jc - (kc - gc);
                mc < hc && (fc += (hc - mc) / 2, gc += (hc - mc) / 2), lc = new ib({
                    individualShift: [{
                            box: bc,
                            shift: -fc,
                            classes: [
                                ...ic,
                                'ML__center'
                            ]
                        },
                        {
                            box: dc,
                            shift: gc,
                            classes: [
                                ...ic,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(Zb);
            } else {
                const mc = 0.25 + ec / 2,
                    nc = 0.25 - ec / 2;
                fc < hc + jc + mc && (fc = hc + jc + mc), gc < hc + kc - nc && (gc = hc + kc - nc);
                const oc = new hb(null, {
                    classes: 'ML__frac-line',
                    mode: this.mode,
                    style: this.style
                });
                oc.height = ec / 2, oc.depth = ec / 2, lc = new ib({
                    individualShift: [{
                            box: dc,
                            shift: gc,
                            classes: [
                                ...ic,
                                'ML__center'
                            ]
                        },
                        {
                            box: oc,
                            shift: ec / 2 - nc,
                            classes: ic
                        },
                        {
                            box: bc,
                            shift: -fc,
                            classes: [
                                ...ic,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(Zb);
            }
            const mc = Zb.isDisplayStyle ? $b.delim1 : $b.delim2,
                nc = this.isSelected ? ' ML__selected' : '',
                oc = this.leftDelim ? this.bind(Wb, St('mopen', this.leftDelim, mc, !0, Wb, {
                    style: this.style,
                    mode: this.mode,
                    classes: nc
                })) : Lt(Zb, 'mopen');
            let pc = null;
            pc = this.continuousFraction ? new hb(null, {
                type: 'mclose'
            }) : this.rightDelim ? this.bind(Wb, St('mclose', this.rightDelim, mc, !0, Wb, {
                style: this.style,
                mode: this.mode,
                classes: nc
            })) : Lt(Zb, 'mclose');
            const qc = this.bind(Wb, new hb([
                oc,
                lc,
                pc
            ], {
                isTight: Zb.isTight,
                type: 'mord',
                classes: 'mfrac'
            }));
            return qc ? (this.caret && (qc.caret = this.caret), this.attachSupsub(Wb, {
                base: qc
            })) : null;
        }
        constructor(Wb, Xb, Yb, Zb, $b) {
            var ac, bc;
            super('genfrac', Zb, {
                style: $b.style,
                command: Wb,
                serialize: $b.serialize,
                displayContainsHighlight: !0
            }), this.above = Xb, this.below = Yb, this.hasBarLine = null === (ac = null == $b ? void 0 : $b.hasBarLine) || void 0 === ac || ac, this.continuousFraction = null !== (bc = null == $b ? void 0 : $b.continuousFraction) && void 0 !== bc && bc, this.numerPrefix = null == $b ? void 0 : $b.numerPrefix, this.denomPrefix = null == $b ? void 0 : $b.denomPrefix, this.mathstyleName = null == $b ? void 0 : $b.mathstyleName, this.leftDelim = null == $b ? void 0 : $b.leftDelim, this.rightDelim = null == $b ? void 0 : $b.rightDelim;
        }
    }
    class Wb extends pb {
        static fromJson(Xb, Yb) {
            const Zb = new Wb(Xb.command, Yb);
            return Xb.isSuggestion && (Zb.isSuggestion = !0), Xb.isError && (Zb.isError = !0), Zb;
        }
        toJson() {
            const Xb = {};
            return this.isSuggestion && (Xb.isSuggestion = !0), this.isError && (Xb.isError = !0), {
                ...super.toJson(),
                ...Xb
            };
        }
        get computedStyle() {
            return {};
        }
        render(Xb) {
            const Yb = new hb(this.value, {
                classes: this.isSuggestion ? 'ML__suggestion' : this.isError ? 'ML__error' : '',
                type: 'latex',
                maxFontSize: 1
            });
            return Yb ? (this.caret && (Yb.caret = this.caret), this.bind(Xb, Yb)) : null;
        }
        constructor(Xb, Yb, Zb) {
            var $b;
            super('latex', Yb, {
                value: Xb,
                mode: 'latex'
            }), this.isSuggestion = null !== ($b = null == Zb ? void 0 : Zb.isSuggestion) && void 0 !== $b && $b, this.isError = !1, this.verbatimLatex = Xb;
        }
    }
    class Xb extends pb {
        static fromJson(Yb, Zb) {
            return new Xb('', Zb);
        }
        toJson() {
            return super.toJson();
        }
        render(Yb) {
            const Zb = pb.createBox(Yb, this.body, {
                newList: !0
            });
            return Zb ? (this.caret && (Zb.caret = this.caret), this.bind(Yb, Zb)) : null;
        }
        serialize(Yb) {
            var Zb, $b;
            return null !== ($b = null === (Zb = this.body) || void 0 === Zb ? void 0 : Zb.map(Yb => Yb.value).join('')) && void 0 !== $b ? $b : '';
        }
        constructor(Yb, Zb) {
            super('latexgroup', Zb, {
                mode: 'latex'
            }), this.body = [...Yb].map(Yb => new Wb(Yb, Zb)), this.skipBoundary = !1;
        }
    }
    class Yb extends pb {
        static fromJson(Zb, $b) {
            return new Yb(Zb.command, Zb.body, $b, Zb);
        }
        toJson() {
            return {
                ...super.toJson(),
                position: this.position
            };
        }
        render(Zb) {
            const $b = new $(Zb, this.style, 'cramp'),
                ac = pb.createBox($b, this.body);
            if (!ac)
                return null;
            const bc = $b.metrics.defaultRuleThickness / $b.scalingFactor,
                cc = new hb(null, {
                    classes: this.position + '-line'
                });
            let dc;
            return cc.height = bc, cc.maxFontSize = 1.125 * bc * $b.scalingFactor, dc = 'overline' === this.position ? new ib({
                shift: 0,
                children: [{
                        box: ac
                    },
                    3 * bc,
                    {
                        box: cc
                    },
                    bc
                ]
            }) : new ib({
                top: ac.height,
                children: [
                    bc,
                    {
                        box: cc
                    },
                    3 * bc,
                    {
                        box: ac
                    }
                ]
            }), this.caret && (dc.caret = this.caret), new hb(dc, {
                classes: this.position,
                type: 'mord'
            });
        }
        constructor(Zb, $b, ac, bc) {
            super('line', ac, {
                command: Zb,
                style: bc.style
            }), this.skipBoundary = !0, this.body = $b, this.position = bc.position;
        }
    }
    class Zb extends pb {
        static fromJson($b, ac) {
            return new Zb($b.command, $b.body ? $b.body : $b.value, ac, $b);
        }
        toJson() {
            const $b = super.toJson();
            return this.hasArgument && ($b.hasArgument = !0), this.variant && ($b.variant = this.variant), this.variantStyle && ($b.variantStyle = this.variantStyle), this.subsupPlacement && ($b.limits = this.subsupPlacement), this.isExtensibleSymbol && ($b.isExtensibleSymbol = !0), this.value && ($b.symbol = this.value), $b;
        }
        render($b) {
            var ac;
            let bc, cc = 0,
                dc = 0;
            if (this.isExtensibleSymbol) {
                const ec = $b.isDisplayStyle && '\\smallint' !== this.value;
                if (bc = new hb(this.value, {
                        fontFamily: ec ? 'Size2-Regular' : 'Size1-Regular',
                        classes: 'op-symbol ' + (ec ? 'large-op' : 'small-op'),
                        type: 'mop',
                        maxFontSize: $b.scalingFactor
                    }), !bc)
                    return null;
                bc.right = bc.italic, cc = (bc.height - bc.depth) / 2 - 0.25 * $b.scalingFactor, dc = bc.italic, bc.setStyle('color', this.style.color), bc.setStyle('background-color', this.style.backgroundColor);
            } else if (this.body) {
                if (bc = pb.createBox($b, this.body, {
                        newList: !0
                    }), !bc)
                    return null;
                bc.setStyle('color', this.style.color), bc.setStyle('background-color', this.style.backgroundColor);
            } else
                bc = new hb(this.value, {
                    type: 'mop',
                    mode: 'math',
                    maxFontSize: $b.scalingFactor,
                    style: {
                        color: this.style.color,
                        backgroundColor: this.style.backgroundColor,
                        letterShapeStyle: $b.letterShapeStyle,
                        variant: this.variant,
                        variantStyle: this.variantStyle
                    }
                });
            this.isExtensibleSymbol && bc.setTop(cc);
            let ec = bc;
            if (this.superscript || this.subscript) {
                const fc = null !== (ac = this.subsupPlacement) && void 0 !== ac ? ac : 'auto';
                ec = 'over-under' === fc || 'auto' === fc && $b.isDisplayStyle ? this.attachLimits($b, {
                    base: bc,
                    baseShift: cc,
                    slant: dc
                }) : this.attachSupsub($b, {
                    base: bc
                });
            }
            return this.caret && (ec.caret = this.caret), new hb(this.bind($b, ec), {
                type: 'mop',
                classes: 'op-group' + (this.isSelected ? ' ML__selected' : '')
            });
        }
        serialize($b) {
            if ('\u200B' === this.value)
                return this.supsubToLatex($b);
            const ac = [];
            return ac.push(this.command), this.hasArgument && ac.push(`{${ this.bodyToLatex($b) }}`), this.explicitSubsupPlacement && ('over-under' === this.subsupPlacement && ac.push('\\limits'), 'adjacent' === this.subsupPlacement && ac.push('\\nolimits'), 'auto' === this.subsupPlacement && ac.push('\\displaylimits')), ac.push(this.supsubToLatex($b)), at(ac);
        }
        constructor($b, ac, bc, cc) {
            var dc, ec, fc, gc;
            super(null !== (dc = cc.type) && void 0 !== dc ? dc : 'mop', bc, {
                command: $b,
                style: cc.style,
                isFunction: null == cc ? void 0 : cc.isFunction
            }), 'string' == typeof ac ? this.value = ac : this.body = ac, this.captureSelection = null !== (ec = cc.captureSelection) && void 0 !== ec && ec, this.hasArgument = null !== (fc = cc.hasArgument) && void 0 !== fc && fc, this.variant = null == cc ? void 0 : cc.variant, this.variantStyle = null == cc ? void 0 : cc.variantStyle, this.subsupPlacement = null == cc ? void 0 : cc.limits, this.isExtensibleSymbol = null !== (gc = null == cc ? void 0 : cc.isExtensibleSymbol) && void 0 !== gc && gc;
        }
    }
    class $b extends pb {
        static fromJson(ac, bc) {
            return new $b(ac.command, ac.body, bc, ac);
        }
        toJson() {
            const ac = {};
            return this.align && (ac.align = this.align), this.boxType && (ac.boxType = this.boxType), {
                ...super.toJson(),
                ...ac
            };
        }
        render(ac) {
            const bc = pb.createBox(ac, this.body, {
                classes: 'inner'
            });
            return bc ? (this.caret && (bc.caret = this.caret), this.bind(ac, new hb([
                bc,
                new hb(null, {
                    classes: 'fix'
                })
            ], {
                classes: 'left' === this.align ? 'llap' : 'rlap',
                type: this.boxType
            }))) : null;
        }
        constructor(ac, bc, cc, dc) {
            var ec, fc;
            super('overlap', cc, {
                command: ac,
                style: null == dc ? void 0 : dc.style
            }), this.skipBoundary = !0, this.body = 'string' == typeof bc ? [new pb('mord', cc, {
                value: bc
            })] : bc, this.align = null !== (ec = null == dc ? void 0 : dc.align) && void 0 !== ec ? ec : 'left', this.boxType = null !== (fc = null == dc ? void 0 : dc.boxType) && void 0 !== fc ? fc : 'mord';
        }
    }
    class ac extends pb {
        static fromJson(bc, cc) {
            return new ac(bc.command, bc.body, cc, bc);
        }
        toJson() {
            const bc = {};
            return this.isInvisible && (bc.isInvisible = !0), this.smashDepth && (bc.smashDepth = !0), this.smashHeight && (bc.smashHeight = !0), this.smashWidth && (bc.smashWidth = !0), {
                ...super.toJson(),
                ...bc
            };
        }
        render(bc) {
            const cc = new $(bc, {
                isPhantom: !0
            });
            if (!this.smashDepth && !this.smashHeight && !this.smashWidth)
                return pb.createBox(cc, this.body, {
                    classes: 'inner'
                });
            const dc = pb.createBox(this.isInvisible ? cc : bc, this.body);
            if (!dc)
                return null;
            if (this.smashWidth) {
                const ec = new hb(null, {
                    classes: 'fix'
                });
                return new hb([
                    dc,
                    ec
                ], {
                    classes: 'rlap'
                }).wrap(bc);
            }
            if (!this.smashHeight && !this.smashDepth)
                return dc;
            if (this.smashHeight && (dc.height = 0), this.smashDepth && (dc.depth = 0), dc.children)
                for (const ec of dc.children)
                    this.smashHeight && (ec.height = 0), this.smashDepth && (ec.depth = 0);
            return new ib({
                firstBaseline: [{
                    box: dc
                }]
            }, {
                type: 'mord'
            }).wrap(bc);
        }
        constructor(bc, cc, dc, ec) {
            var fc, gc, hc, ic;
            super('phantom', dc, {
                command: bc,
                style: ec.style
            }), this.captureSelection = !0, this.body = cc, this.isInvisible = null !== (fc = ec.isInvisible) && void 0 !== fc && fc, this.smashDepth = null !== (gc = ec.smashDepth) && void 0 !== gc && gc, this.smashHeight = null !== (hc = ec.smashHeight) && void 0 !== hc && hc, this.smashWidth = null !== (ic = ec.smashWidth) && void 0 !== ic && ic;
        }
    }
    class bc extends pb {
        static fromJson(cc, dc) {
            return new bc(cc.command, dc, cc);
        }
        toJson() {
            const cc = {
                height: this.height,
                width: this.width
            };
            return this.shift && (cc.shift = this.shift), {
                ...super.toJson(),
                ...cc
            };
        }
        render(cc) {
            const dc = new $(cc, this.style, 'textstyle'),
                ec = Le(this.shift),
                fc = Le(this.width),
                gc = Le(this.height),
                hc = new hb(null, {
                    classes: 'rule',
                    type: 'mord'
                });
            return hc.setStyle('border-right-width', fc, 'em'), hc.setStyle('border-top-width', gc, 'em'), hc.setStyle('border-color', this.style.color), hc.setStyle('vertical-align', ec, 'em'), this.isSelected && hc.setStyle('opacity', '50%'), hc.width = fc, hc.height = gc + ec, hc.depth = -ec, this.bind(cc, hc), this.caret && (hc.caret = this.caret), hc.wrap(dc);
        }
        serialize(cc) {
            var dc;
            let ec = null !== (dc = this.command) && void 0 !== dc ? dc : '';
            return this.shift && (ec += `[${ Ce(this.shift) }]`), ec += `{${ Ce(this.width) }}{${ Ce(this.height) }}`, ec;
        }
        constructor(cc, dc, ec) {
            var fc;
            super('rule', dc, {
                command: cc,
                style: ec.style
            }), this.shift = null !== (fc = ec.shift) && void 0 !== fc ? fc : {
                dimension: 0
            }, this.height = ec.height, this.width = ec.width;
        }
    }
    class cc extends pb {
        static fromJson(dc, ec) {
            return new cc(dc.command, ec, {
                ...dc,
                index: dc.above
            });
        }
        toJson() {
            return super.toJson();
        }
        serialize(dc) {
            let ec = '';
            return this.above && (ec += `[${ this.aboveToLatex(dc) }]`), ec += `{${ this.bodyToLatex(dc) }}`, this.command + ec;
        }
        render(dc) {
            var ec;
            const fc = new $(dc, this.style, 'cramp'),
                gc = null !== (ec = pb.createBox(fc, this.body, {
                    style: this.style,
                    newList: !0
                })) && void 0 !== ec ? ec : new hb(null),
                hc = fc.scalingFactor,
                ic = fc.metrics.defaultRuleThickness / hc,
                jc = dc.isDisplayStyle ? 0.431 : ic,
                kc = new hb(null, {
                    classes: 'ML__sqrt-line',
                    style: this.style,
                    height: ic
                });
            let lc = hc * (ic + jc / 4);
            const mc = Math.max(2 * hc * jc, gc.height + gc.depth) + lc + ic,
                nc = new $(dc, this.style),
                oc = this.isSelected ? ' ML__selected' : '',
                pc = this.bind(nc, new hb(St('', '\\surd', mc, !1, nc, {
                    classes: oc
                }), {
                    classes: 'ML__sqrt-sign' + oc,
                    style: this.style
                }));
            if (!pc)
                return null;
            const qc = pc.height + pc.depth - ic;
            qc > gc.height + gc.depth + lc && (lc = (lc + qc - (gc.height + gc.depth)) / 2), pc.setTop(pc.height - gc.height - lc);
            const rc = this.bind(dc, new ib({
                    firstBaseline: [{
                            box: new hb(gc)
                        },
                        lc - 2 * ic,
                        {
                            box: kc
                        },
                        ic
                    ]
                }).wrap(dc)),
                sc = pb.createBox(new $(dc, this.style, 'scriptscriptstyle'), this.above, {
                    style: this.style,
                    newList: !0
                });
            if (!sc) {
                const tc = new hb([
                    pc,
                    rc
                ], {
                    classes: this.containsCaret ? 'ML__contains-caret' : '',
                    type: 'mord'
                });
                return this.caret && (tc.caret = this.caret), this.bind(dc, tc.wrap(dc));
            }
            const tc = new ib({
                    shift: -0.6 * (Math.max(pc.height, rc.height) - Math.max(pc.depth, rc.depth)),
                    children: [{
                        box: sc
                    }]
                }),
                uc = new hb([
                    new hb(tc, {
                        classes: 'ML__sqrt-index'
                    }),
                    pc,
                    rc
                ], {
                    type: 'mord',
                    classes: this.containsCaret ? 'ML__contains-caret' : ''
                });
            return uc.height = pc.height, uc.depth = pc.depth, this.caret && (uc.caret = this.caret), this.bind(dc, uc.wrap(dc));
        }
        constructor(dc, ec, fc) {
            var gc;
            super('surd', ec, {
                command: dc,
                mode: null !== (gc = fc.mode) && void 0 !== gc ? gc : 'math',
                style: fc.style,
                displayContainsHighlight: !0
            }), this.body = fc.body, this.above = fc.index;
        }
    }
    const dc = {
            'p@': '1pt ',
            'z@': '0pt',
            maxdimen: '16383.99999pt',
            hfuzz: '0.1pt',
            vfuzz: '0.1pt',
            overfullrule: '5pt',
            hsize: '6.5in',
            vsize: '8.9in',
            parindent: '20pt',
            maxdepth: '4pt',
            splitmaxdepth: '\\maxdimen',
            boxmaxdepth: '\\maxdimen',
            delimitershortfall: '5pt',
            nulldelimiterspace: '1.2pt',
            scriptspace: '0.5pt',
            topskip: '10pt',
            splittopskip: '10pt',
            normalbaselineskip: '12pt',
            normallineskip: '1pt',
            normallineskiplimit: '0pt',
            jot: '3pt',
            doublerulesep: '2pt',
            arrayrulewidth: '0.4pt',
            arraycolsep: '5pt',
            fboxsep: '3pt',
            fboxrule: '0.4pt'
        },
        ec = {
            'z@skip': '0pt plust0pt minus0pt',
            hideskip: '-1000pt plust 1fill',
            '@flushglue': '0pt plust 1fill',
            parskip: '0pt plus 1pt',
            abovedisplayskip: '12pt plus 3pt minus 9pt',
            abovedisplayshortskip: '0pt plus 3pt',
            belowdisplayskip: '12pt plus 3pt minus 9pt',
            belowdisplayshortskip: '7pt plus 3pt minus 4pt',
            parfillskip: '0pt plus 1fil',
            thinmuskip: '3mu',
            medmuskip: '4mu plus 2mu minus 4mu',
            thickmuskip: '5mu plus 5mu',
            smallskipamount: '3pt plus1pt minus1pt',
            medskipamount: '6pt plus2pt minus2pt',
            bigskipamount: '12pt plus4pt minus4pt'
        },
        fc = {
            pretolerance: 100,
            tolerance: 200,
            hbadness: 1000,
            vbadness: 1000,
            linepenalty: 10,
            hyphenpenalty: 50,
            exhyphenpenalty: 50,
            binoppenalty: 700,
            relpenalty: 500,
            clubpenalty: 150,
            widowpenalty: 150,
            displaywidowpenalty: 50,
            brokenpenalty: 100,
            predisplaypenalty: 10000,
            doublehyphendemerits: 10000,
            finalhyphendemerits: 5000,
            adjdemerits: 10000,
            tracinglostchars: 1,
            uchyph: 1,
            delimiterfactor: 901,
            defaulthyphenchar: '\\-',
            defaultskewchar: -1,
            newlinechar: -1,
            showboxbreadth: 5,
            showboxdepth: 3,
            errorcontextlines: 5,
            interdisplaylinepenalty: 100,
            interfootnotelinepenalty: 100,
            baselineSkip: 1.2,
            arraystretch: '',
            month: new Date().getMonth() + 1,
            day: new Date().getDate(),
            year: new Date().getFullYear()
        };
    let gc;

    function hc(ic) {
        var jc, kc;
        if (gc)
            return gc;
        gc = {
            ...fc
        };
        for (const lc of Object.keys(dc))
            gc[lc] = null !== (jc = Rt(dc[lc], ic, gc)) && void 0 !== jc ? jc : 0;
        for (const mc of Object.keys(ec))
            gc[mc] = null !== (lc = Ft(ec[mc], ic, gc)) && void 0 !== lc ? lc : 0;
        return gc;
    }

    function hc() {
        const ic = {
            registers: {},
            smartFence: !1,
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            letterShapeStyle: c.locale.startsWith('fr') ? 'french' : 'tex',
            colorMap: _Jc,
            backgroundColorMap: _Mc,
            getDefinition: _hc,
            getMacro: ic => _hc(ic, H())
        };
        return {
            ...ic,
            registers: ha(ic)
        };
    }

    function _hc(ic, jc = 'math') {
        if (!ic || 0 === ic.length)
            return null;
        let kc = null;
        if (ic.startsWith('\\')) {
            if (kc = l[ic], kc)
                return kc;
            'math' === jc ? kc = j[ic] : o[ic] && (kc = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: o[ic]
            });
        } else if ('math' === jc) {
            if (kc = j[ic], !kc && 1 === ic.length) {
                const lc = _bd('math', ic.codePointAt(0));
                return lc.startsWith('\\') ? {
                    ..._hc(lc, 'math'),
                    command: lc
                } : null;
            }
        } else
            o[ic] ? kc = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: o[ic]
            } : 'text' === jc && (kc = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: ic.codePointAt(0)
            });
        return !kc || 'symbol' !== kc.definitionType || 'mord' !== kc.type || 102 !== kc.codepoint && 103 !== kc.codepoint && 104 !== kc.codepoint || (kc.isFunction = !0), null != kc ? kc : null;
    }

    function _hc(ic, jc) {
        return ic.startsWith('\\') ? jc[ic.slice(1)] : null;
    }
    class hc extends pb {
        static fromJson(ic, jc) {
            return new hc(ic.body, _ic(ic.tooltip, jc), jc, ic);
        }
        toJson() {
            var ic;
            const jc = null === (ic = this.tooltip.body) || void 0 === ic ? void 0 : ic.filter(ic => 'first' !== ic.type).map(ic => ic.toJson());
            return {
                ...super.toJson(),
                tooltip: jc
            };
        }
        render(ic) {
            const jc = pb.createBox(ic, this.body, {
                style: this.style
            });
            if (!jc)
                return null;
            const kc = Fe(Ve(new hb(this.tooltip.render(new $({
                    registers: ic.registers
                }, {
                    fontSize: 5
                }, 'displaystyle')), {
                    classes: 'ML__tooltip-content'
                }))),
                lc = new hb([
                    kc,
                    jc
                ], {
                    classes: 'ML__tooltip-container'
                });
            return this.caret && (lc.caret = this.caret), this.bind(ic, lc);
        }
        serialize(ic) {
            return `${ this.command }{${ this.bodyToLatex(ic) }}{${ pb.serialize(this.tooltip.body, ic) }}`;
        }
        constructor(ic, jc, kc, lc) {
            super('tooltip', kc, {
                command: null == lc ? void 0 : lc.command,
                mode: 'math',
                serialize: null == lc ? void 0 : lc.serialize,
                style: null == lc ? void 0 : lc.style,
                displayContainsHighlight: !0
            }), this.body = ic;
            const mc = ma();
            this.tooltip = new pb('root', mc, {
                style: {}
            }), this.tooltip.body = jc, this.skipBoundary = !0, this.captureSelection = !1;
        }
    }

    function _ic(jc, kc) {
        if (_jc(jc))
            return jc.map(jc => _ic(jc, kc));
        jc = {
            ...jc
        };
        for (const lc of ob)
            jc[lc] && (jc[lc] = _ic(jc[lc], kc));
        jc.array && (jc.array = _ic(jc.array, kc));
        const mc = jc.type;
        let nc;
        'accent' === mc && (nc = qb.fromJson(jc, kc)), 'array' === mc && (nc = Nb.fromJson(jc, kc)), 'box' === mc && (nc = Mb.fromJson(jc, kc)), 'composition' === mc && (nc = Ob.fromJson(jc, kc)), 'chem' === mc && (nc = Pb.fromJson(jc, kc)), 'choice' === mc && (nc = _ic.fromJson(jc, kc)), 'delim' === mc && (nc = Sb.fromJson(jc, kc)), 'enclose' === mc && (nc = Ub.fromJson(jc, kc)), 'error' === mc && (nc = Ib.fromJson(jc, kc)), 'genfrac' === mc && (nc = Vb.fromJson(jc, kc)), 'group' === mc && (nc = Db.fromJson(jc, kc)), 'latex' === mc && (nc = Wb.fromJson(jc, kc)), 'latexgroup' === mc && (nc = Xb.fromJson(jc, kc)), 'leftright' === mc && (nc = Fb.fromJson(jc, kc)), 'line' === mc && (nc = Yb.fromJson(jc, kc)), 'macro' === mc && (nc = Jb.fromJson(jc, kc)), 'msubsup' === mc && (nc = Gb.fromJson(jc, kc)), 'overlap' === mc && (nc = $b.fromJson(jc, kc)), 'overunder' === mc && (nc = Cb.fromJson(jc, kc)), 'placeholder' === mc && (jc.defaultValue && (jc.defaultValue = _ic(jc.defaultValue, kc)), nc = Hb.fromJson(jc, kc)), 'phantom' === mc && (nc = ac.fromJson(jc, kc)), 'rule' === mc && (nc = bc.fromJson(jc, kc)), 'sizeddelim' === mc && (nc = Tb.fromJson(jc, kc)), 'spacing' === mc && (nc = Eb.fromJson(jc, kc)), 'surd' === mc && (nc = cc.fromJson(jc, kc)), 'text' === mc && (nc = Kb.fromJson(jc, kc)), 'tooltip' === mc && (nc = hc.fromJson(jc, kc)), 'mop' === mc && (nc = Zb.fromJson(jc, kc)), nc || (nc = pb.fromJson(jc, kc));
        for (const oc of ob)
            jc[oc] && nc.setChildren(jc[oc], oc);
        return void 0 !== jc.verbatimLatex && (nc.verbatimLatex = jc.verbatimLatex), jc.subsupPlacement && (nc.subsupPlacement = jc.subsupPlacement), jc.explicitSubsupPlacement && (nc.explicitSubsupPlacement = !0), jc.isFunction && (nc.isFunction = !0), jc.isExtensibleSymbol && (nc.isExtensibleSymbol = !0), jc.skipBoundary && (nc.skipBoundary = !0), jc.captureSelection && (nc.captureSelection = !0), nc;
    }
    class _ic extends pb {
        static fromJson(jc, kc) {
            return new _ic([
                ga(jc.choices[0], kc),
                ga(jc.choices[1], kc),
                ga(jc.choices[2], kc),
                ga(jc.choices[3], kc)
            ], kc);
        }
        toJson() {
            const jc = [];
            for (const kc of this.choices)
                jc.push(kc.filter(jc => 'first' !== jc.type).map(jc => jc.toJson()));
            return {
                ...super.toJson(),
                choices: jc
            };
        }
        render(jc) {
            const kc = pb.createBox(jc, this.choices[Math.floor(jc.mathstyle.id / 2)]);
            return kc ? (this.caret && (kc.caret = this.caret), this.bind(jc, kc)) : null;
        }
        serialize(jc) {
            return `\\mathchoice{${ pb.serialize(this.choices[0], jc) }}{${ pb.serialize(this.choices[1], jc) }}{${ pb.serialize(this.choices[2], jc) }}{${ pb.serialize(this.choices[3], jc) }}`;
        }
        constructor(jc, kc) {
            super('choice', kc), this.choices = jc, this.skipBoundary = !0;
        }
    }
    V('mathtip', '{:math}{:math}', {
        createAtom: (tb, ub, b, _jc) => new hc(ub[0], ub[1], _jc, {
            command: tb,
            content: 'math',
            style: b
        })
    }), V('texttip', '{:math}{:text}', {
        createAtom: (tb, ub, b, _jc) => new hc(ub[0], ub[1], _jc, {
            command: tb,
            content: 'text',
            style: b
        })
    }), V('error', '{:math}', {
        createAtom: (tb, ub, b, _jc) => new Db(ub[0], _jc, {
            mode: 'math',
            command: '\\error',
            customClass: 'ML__error',
            style: b,
            serialize: (tb, ub) => `\\error{${ tb.bodyToLatex(ub) }}`
        })
    }), V('ensuremath', '{:math}', {
        createAtom: (tb, ub, b, _jc) => new Db(ub[0], _jc, {
            mode: 'math',
            latexOpen: '\\ensuremath{',
            latexClose: '}',
            style: b
        })
    }), V('color', '{:string}', {
        applyStyle: (tb, ub, b) => {
            var _jc, kc;
            const lc = ub[0];
            return {
                verbatimColor: ub[0],
                color: null !== (kc = null === (_jc = b.colorMap) || void 0 === _jc ? void 0 : _jc.call(b, lc)) && void 0 !== kc ? kc : lc
            };
        }
    }), V('textcolor', '{:string}{content:auto*}', {
        applyStyle: (tb, ub, b) => {
            var jc, kc;
            const lc = ub[0];
            return {
                verbatimColor: lc,
                color: null !== (kc = null === (jc = b.colorMap) || void 0 === jc ? void 0 : jc.call(b, lc)) && void 0 !== kc ? kc : lc
            };
        }
    }), V('boxed', '{content:math}', {
        createAtom: (tb, ub, b, _jc) => new Mb(tb, ub[0], _jc, {
            framecolor: 'black',
            style: b
        })
    }), V('colorbox', '{:string}{content:auto*}', {
        applyMode: 'text',
        applyStyle: (tb, ub, b) => {
            var _jc, kc;
            const lc = ub[0];
            return {
                verbatimBackgroundColor: ub[0],
                backgroundColor: null !== (kc = null === (_jc = b.backgroundColorMap) || void 0 === _jc ? void 0 : _jc.call(b, lc)) && void 0 !== kc ? kc : lc
            };
        }
    }), V('fcolorbox', '{frame-color:string}{background-color:string}{content:auto}', {
        applyMode: 'text',
        createAtom: (tb, ub, b, _qc) => {
            var jc, kc, lc, mc;
            const nc = ub[0],
                oc = ub[1];
            return new Mb(tb, ub[2], _qc, {
                verbatimFramecolor: nc,
                framecolor: null !== (kc = null === (jc = _qc.colorMap) || void 0 === jc ? void 0 : jc.call(_qc, nc)) && void 0 !== kc ? kc : nc,
                verbatimBackgroundcolor: ub[1],
                backgroundcolor: null !== (mc = null === (lc = _qc.backgroundColorMap) || void 0 === lc ? void 0 : lc.call(_qc, oc)) && void 0 !== mc ? mc : oc,
                style: b,
                serialize: (tb, ub) => {
                    var pc, _qc;
                    return `${ tb.command }{${ null !== (pc = tb.verbatimFramecolor) && void 0 !== pc ? pc : tb.framecolor }{${ null !== (_qc = tb.verbatimBackgroundcolor) && void 0 !== _qc ? _qc : tb.backgroundcolor }}{${ tb.bodyToLatex(ub) }}`;
                }
            });
        }
    }), V('bbox', '[:bbox]{body:auto}', {
        createAtom: (tb, ub, b, _kc) => {
            if (ub[0]) {
                const jc = ub[0];
                return new Mb(tb, ub[1], _kc, {
                    padding: jc.padding,
                    border: jc.border,
                    backgroundcolor: jc.backgroundcolor,
                    style: b,
                    serialize: (ub, b) => {
                        var _kc;
                        let lc = tb;
                        if (Number.isFinite(ub.padding) || void 0 !== ub.border || void 0 !== ub.backgroundcolor) {
                            const mc = [];
                            ub.padding && mc.push(ub.padding), ub.border && mc.push(`border: ${ ub.border }`), (ub.verbatimBackgroundcolor || ub.backgroundcolor) && mc.push(null !== (_kc = ub.verbatimBackgroundcolor) && void 0 !== _kc ? _kc : ub.backgroundcolor), lc += `[${ mc.join(',') }]`;
                        }
                        return lc + `{${ ub.bodyToLatex(b) }}`;
                    }
                });
            }
            return new Mb(tb, ub[1], _oc, {
                style: b
            });
        }
    }), V([
        'displaystyle',
        'textstyle',
        'scriptstyle',
        'scriptscriptstyle'
    ], '{:rest}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[0], _oc, {
            latexOpen: `{${ tb } `,
            latexClose: '}',
            style: b,
            mathstyleName: tb.slice(1)
        })
    }), V([
        'tiny',
        'scriptsize',
        'footnotesize',
        'small',
        'normalsize',
        'large',
        'Large',
        'LARGE',
        'huge',
        'Huge'
    ], '', {
        applyStyle: (tb, ub) => ({
            fontSize: {
                '\\tiny': 1,
                '\\scriptsize': 2,
                '\\footnotesize': 3,
                '\\small': 4,
                '\\normalsize': 5,
                '\\large': 6,
                '\\Large': 7,
                '\\LARGE': 8,
                '\\huge': 9,
                '\\Huge': 10
            } [tb]
        })
    }), V('fontseries', '{:string}', {
        ifMode: 'text',
        applyStyle: (tb, ub) => ({
            fontSeries: ub[0]
        })
    }), V('fontshape', '{:string}', {
        ifMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: ub[0]
        })
    }), V('fontfamily', '{:string}', {
        ifMode: 'text',
        applyStyle: (tb, ub) => ({
            fontFamily: ub[0]
        })
    }), V('selectfont', '', {
        ifMode: 'text',
        applyStyle: (tb, ub) => ({})
    }), V('bf', '', {
        applyStyle: (tb, ub) => ({
            fontSeries: 'b',
            fontShape: 'n',
            fontFamily: 'cmr'
        })
    }), V([
        'boldsymbol',
        'bm'
    ], '{:math*}', {
        applyMode: 'math',
        createAtom: (tb, ub, b, _oc) => new Db(ub[0], _oc, {
            latexOpen: `${ tb }{`,
            latexClose: '}',
            style: b,
            customClass: 'ML__boldsymbol'
        })
    }), V('bold', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variantStyle: 'bold'
        })
    }), V('bfseries', '', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontSeries: 'b'
        })
    }), V('mdseries', '', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontSeries: 'm'
        })
    }), V('upshape', '', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'n'
        })
    }), V('slshape', '', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'sl'
        })
    }), V('scshape', '', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'sc'
        })
    }), V('textbf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontSeries: 'b'
        })
    }), V('textmd', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontSeries: 'm'
        })
    }), V('textup', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'n'
        })
    }), V('textnormal', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'n',
            fontSeries: 'm'
        })
    }), V('textsl', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'sl'
        })
    }), V('textit', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'it'
        })
    }), V('textsc', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontShape: 'sc'
        })
    }), V('textrm', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontFamily: 'roman'
        })
    }), V('textsf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontFamily: 'sans-serif'
        })
    }), V('texttt', '{:text*}', {
        applyMode: 'text',
        applyStyle: (tb, ub) => ({
            fontFamily: 'monospace'
        })
    }), V('mathbf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'normal',
            variantStyle: 'bold'
        })
    }), V('mathit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'main',
            variantStyle: 'italic'
        })
    }), V('mathnormal', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'normal',
            variantStyle: 'italic'
        })
    }), V('mathbfit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'main',
            variantStyle: 'bolditalic'
        })
    }), V('mathrm', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'normal',
            variantStyle: 'up'
        })
    }), V('mathsf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'sans-serif',
            variantStyle: 'up'
        })
    }), V('mathtt', '{:math*}', {
        applyMode: 'math',
        applyStyle: (tb, ub) => ({
            variant: 'monospace',
            variantStyle: 'up'
        })
    }), V('it', '', {
        applyStyle: (tb, ub) => ({
            fontSeries: 'm',
            fontShape: 'it',
            fontFamily: 'cmr',
            variantStyle: 'italic'
        })
    }), V('rmfamily', '', {
        applyStyle: (tb, ub) => ({
            fontFamily: 'roman'
        })
    }), V('sffamily', '', {
        applyStyle: (tb, ub) => ({
            fontFamily: 'sans-serif'
        })
    }), V('ttfamily', '', {
        applyStyle: (tb, ub) => ({
            fontFamily: 'monospace'
        })
    }), V([
        'Bbb',
        'mathbb'
    ], '{:math*}', {
        applyStyle: (tb, ub) => ({
            variant: 'double-struck',
            variantStyle: 'up'
        })
    }), V([
        'frak',
        'mathfrak'
    ], '{:math*}', {
        applyStyle: (tb, ub) => ({
            variant: 'fraktur',
            variantStyle: 'up'
        })
    }), V('mathcal', '{:math*}', {
        applyStyle: (tb, ub) => ({
            variant: 'calligraphic',
            variantStyle: 'up'
        })
    }), V('mathscr', '{:math*}', {
        applyStyle: (tb, ub) => ({
            variant: 'script',
            variantStyle: 'up'
        })
    }), V('mbox', '{:text}', {
        ifMode: 'math',
        createAtom: (tb, ub, b, _oc) => new Db(ub[0], _oc, {
            changeMode: !0,
            style: b,
            mode: 'text',
            command: tb,
            serialize: (tb, ub) => `\\mbox{${ tb.bodyToLatex({
                ...ub,
                skipModeCommand: !0
            }) }}`
        })
    }), V('text', '{:text}', {
        ifMode: 'math',
        applyMode: 'text'
    }), V('class', '{name:string}{content:auto*}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[1], _oc, {
            customClass: ub[0],
            style: b
        })
    }), V('cssId', '{id:string}{content:auto}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[1], _oc, {
            cssId: ub[0],
            style: b
        })
    }), V('htmlData', '{data:string}{content:auto}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[1], _oc, {
            htmlData: ub[0],
            style: b
        })
    }), V('htmlStyle', '{data:string}{content:auto}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[1], _oc, {
            htmlStyle: ub[0],
            style: b
        })
    }), V('em', '{:auto*}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[0], _oc, {
            latexOpen: '\\em',
            latexClose: '',
            customClass: 'ML__emph',
            style: b
        })
    }), V('emph', '{:auto}', {
        createAtom: (tb, ub, b, _oc) => new Db(ub[0], _oc, {
            latexOpen: '\\emph{',
            latexClose: '}',
            customClass: 'ML__emph',
            style: b
        })
    });
    const jc = {
        '\\bigl': {
            mclass: 'mopen',
            size: 1
        },
        '\\Bigl': {
            mclass: 'mopen',
            size: 2
        },
        '\\biggl': {
            mclass: 'mopen',
            size: 3
        },
        '\\Biggl': {
            mclass: 'mopen',
            size: 4
        },
        '\\bigr': {
            mclass: 'mclose',
            size: 1
        },
        '\\Bigr': {
            mclass: 'mclose',
            size: 2
        },
        '\\biggr': {
            mclass: 'mclose',
            size: 3
        },
        '\\Biggr': {
            mclass: 'mclose',
            size: 4
        },
        '\\bigm': {
            mclass: 'mrel',
            size: 1
        },
        '\\Bigm': {
            mclass: 'mrel',
            size: 2
        },
        '\\biggm': {
            mclass: 'mrel',
            size: 3
        },
        '\\Biggm': {
            mclass: 'mrel',
            size: 4
        },
        '\\big': {
            mclass: 'mord',
            size: 1
        },
        '\\Big': {
            mclass: 'mord',
            size: 2
        },
        '\\bigg': {
            mclass: 'mord',
            size: 3
        },
        '\\Bigg': {
            mclass: 'mord',
            size: 4
        }
    };
    V([
        'bigl',
        'Bigl',
        'biggl',
        'Biggl',
        'bigr',
        'Bigr',
        'biggr',
        'Biggr',
        'bigm',
        'Bigm',
        'biggm',
        'Biggm',
        'big',
        'Big',
        'bigg',
        'Bigg'
    ], '{:delim}', {
        createAtom: (tb, ub, b, _oc) => new Tb(tb, ub[0], _oc, {
            size: jc[tb].size,
            delimClass: jc[tb].mclass,
            style: b
        })
    }), V([
        'hspace',
        'hspace*'
    ], '{width:glue}', {
        createAtom: (tb, ub, b, _oc) => {
            var kc;
            return new Eb(tb, b, _oc, null !== (kc = ub[0]) && void 0 !== kc ? kc : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), V([
        'mkern',
        'kern'
    ], '{width:glue}', {
        createAtom: (tb, ub, b, _oc) => {
            var kc;
            return new Eb(tb, b, _oc, null !== (kc = ub[0]) && void 0 !== kc ? kc : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), V('mspace', '{width:glue}', {
        createAtom: (tb, ub, b, _oc) => {
            var kc;
            return new Eb(tb, b, _oc, null !== (kc = ub[0]) && void 0 !== kc ? kc : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), V('mathop', '{:auto}', {
        createAtom: (tb, ub, b, _oc) => new Zb(tb, ub[0], _oc, {
            type: 'mop',
            captureSelection: !0,
            limits: 'over-under',
            isFunction: !0,
            hasArgument: !0,
            style: b
        })
    }), V('mathchoice', '{:math}{:math}{:math}{:math}', {
        createAtom: (tb, ub, b, _oc) => new _ic(ub, _oc)
    }), V([
        'mathbin',
        'mathrel',
        'mathopen',
        'mathclose',
        'mathpunct',
        'mathord',
        'mathinner'
    ], '{:auto}', {
        createAtom: (tb, ub, b, _oc) => new Zb(tb, ub[0], _oc, {
            type: {
                '\\mathbin': 'mbin',
                '\\mathrel': 'mrel',
                '\\mathopen': 'mopen',
                '\\mathclose': 'mclose',
                '\\mathpunct': 'mpunct',
                '\\mathord': 'mord',
                '\\mathinner': 'minner'
            } [tb],
            captureSelection: !0,
            hasArgument: !0,
            style: b
        })
    }), V([
        'operatorname',
        'operatorname*'
    ], '{operator:math}', {
        createAtom: (tb, ub, b, _oc) => {
            const kc = new Zb(tb, ub[0], _oc, {
                isFunction: !0,
                hasArgument: !0,
                limits: '\\operatorname' === tb ? 'adjacent' : 'over-under',
                style: b
            });
            return kc.captureSelection = !0, kc.body && kc.body.forEach(tb => {
                var lc;
                'first' !== tb.type && (tb.type = 'mord', tb.value = null !== (lc = {
                    '\u2217': '*',
                    '\u2212': '-'
                } [tb.value]) && void 0 !== lc ? lc : tb.value, tb.isFunction = !1, tb.style.variant || tb.style.variantStyle || (tb.style.variant = 'main', tb.style.variantStyle = 'up'));
            }), kc;
        }
    });
    class kc extends pb {
        serialize(lc) {
            return '\\unicode"' + ('000000' + this.codepoint.toString(16)).toUpperCase().slice(-6);
        }
        constructor(lc, mc, nc) {
            let _oc = Number.parseInt(lc);
            Number.isFinite(_oc) || (_oc = 10067), super('mord', nc, {
                value: String.fromCodePoint(_oc),
                style: mc
            }), this.codepoint = _oc;
        }
    }

    function lc(mc) {
        if (1 === mc.length) {
            const nc = mc[0];
            if ('mbin' === nc.type)
                return 'mbin';
            if ('mrel' === nc.type)
                return 'mrel';
        }
        return 'mord';
    }
    V('unicode', '{charcode:number}', {
        createAtom: (tb, ub, b, _rc) => new kc(ub[0], b, _rc)
    }), V('rule', '[raise:dimen]{width:dimen}{thickness:dimen}', {
        createAtom: (tb, ub, b, _rc) => new bc(tb, _rc, {
            shift: ub[0],
            width: ub[1],
            height: ub[2],
            style: b
        })
    }), V('overline', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new Yb(tb, ub[0], _rc, {
            position: 'overline',
            style: b
        })
    }), V('underline', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new Yb(tb, ub[0], _rc, {
            position: 'underline',
            style: b
        })
    }), V('overset', '{above:auto}{base:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            above: ub[0],
            body: ub[1],
            skipBoundary: !1,
            style: b,
            boxType: wa(ub[1]),
            serialize: (tb, ub) => `${ tb.command }{${ tb.aboveToLatex(ub) }}{${ tb.bodyToLatex(ub) }}`
        })
    }), V('underset', '{below:auto}{base:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            below: ub[0],
            body: ub[1],
            skipBoundary: !1,
            style: b,
            boxType: wa(ub[1]),
            serialize: (ub, b) => `${ tb }{${ ub.belowToLatex(b) }}{${ ub.bodyToLatex(b) }}`
        })
    }), V('overunderset', '{above:auto}{below:auto}{base:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            above: ub[0],
            below: ub[1],
            body: ub[2],
            skipBoundary: !1,
            style: b,
            boxType: wa(ub[2]),
            serialize: (tb, ub) => `${ tb.command }{${ tb.aboveToLatex(ub) }}{${ tb.bodyToLatex(ub) }}`
        })
    }), V([
        'stackrel',
        'stackbin'
    ], '[below:auto]{above:auto}{base:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            body: ub[2],
            above: ub[1],
            below: ub[0],
            skipBoundary: !1,
            style: b,
            boxType: '\\stackrel' === tb ? 'mrel' : 'mbin',
            serialize: (tb, ub) => `${ tb.command }{${ tb.aboveToLatex(ub) }}{${ tb.bodyToLatex(ub) }}`
        })
    }), V('smash', '[:string]{:auto}', {
        createAtom: (tb, ub, b, _rc) => ub[0] ? new ac(tb, ub[1], _rc, {
            smashHeight: ub[0].includes('t'),
            smashDepth: ub[0].includes('b'),
            style: b
        }) : new ac(tb, ub[1], _rc, {
            smashHeight: !0,
            smashDepth: !0,
            style: b
        })
    }), V(['vphantom'], '{:auto*}', {
        createAtom: (tb, ub, b, _rc) => new ac(tb, ub[1], _rc, {
            isInvisible: !0,
            smashWidth: !0,
            style: b
        })
    }), V(['hphantom'], '{:auto*}', {
        createAtom: (tb, ub, b, _rc) => new ac(tb, ub[1], _rc, {
            isInvisible: !0,
            smashHeight: !0,
            smashDepth: !0,
            style: b
        })
    }), V(['phantom'], '{:auto*}', {
        createAtom: (tb, ub, b, _rc) => new ac(tb, ub[1], _rc, {
            isInvisible: !0,
            style: b
        })
    }), V('not', '{:math}', {
        createAtom: (tb, ub, b, _rc) => {
            if (ub.length < 1 || null === ub[0])
                return new pb('mrel', _rc, {
                    command: tb,
                    style: b,
                    value: '\uE020'
                });
            const lc = ub[0];
            return new Db([
                new $b(tb, '\uE020', _rc, {
                    align: 'right',
                    style: b,
                    boxType: 'mrel'
                }),
                ...lc
            ], _rc, {
                boxType: 'mrel',
                captureSelection: !0,
                command: '\\not',
                serialize: (tb, ub) => {
                    const mc = pb.serialize(lc, ub);
                    return 1 !== mc.length || /[a-zA-Z]/.test(mc) ? `\\not{${ mc }}` : '\\not' + mc;
                }
            });
        }
    }), V([
        'ne',
        'neq'
    ], '', {
        createAtom: (tb, ub, b, _rc) => new Db([
            new $b(tb, '\uE020', _rc, {
                align: 'right',
                style: b,
                boxType: 'mrel'
            }),
            new pb('mrel', _rc, {
                style: b,
                value: '='
            })
        ], _rc, {
            boxType: 'mrel',
            captureSelection: !0,
            serialize: () => tb,
            command: tb
        })
    }), V('rlap', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new $b(tb, ub[0], _rc, {
            align: 'right',
            style: b
        })
    }), V('llap', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new $b(tb, ub[0], _rc, {
            style: b
        })
    }), V('mathllap', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new $b(tb, ub[0], _rc, {
            style: b
        })
    }), V('mathrlap', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new $b(tb, ub[0], _rc, {
            align: 'right',
            style: b
        })
    });
    const lc = {
        acute: 714,
        grave: 715,
        dot: 729,
        ddot: 168,
        mathring: 730,
        tilde: 126,
        bar: 713,
        breve: 728,
        check: 711,
        hat: 94,
        vec: 8407
    };

    function mc(nc) {
        for (const oc of nc)
            for (const pc of oc)
                if (pc.length > 0)
                    return !1;
        return !0;
    }
    V(Object.keys(lc), '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => new qb(tb, ub[0], _rc, {
            accentChar: lc[tb.slice(1)],
            style: b
        })
    }), V([
        'widehat',
        'widecheck',
        'widetilde'
    ], '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => {
            const mc = F(ub[0]);
            return new qb(tb, ub[0], _rc, {
                style: b,
                svgAccent: tb.slice(1) + (mc.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][mc.length])
            });
        }
    }), V([
        'overarc',
        'overparen',
        'wideparen'
    ], '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => new qb(tb, ub[0], _rc, {
            style: b,
            svgAccent: 'overarc'
        })
    }), V([
        'underarc',
        'underparen'
    ], '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            body: ub[0],
            style: b,
            svgBelow: 'underarc'
        })
    }), V('utilde', '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => {
            const mc = F(ub[0]),
                nc = 'widetilde' + (mc.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][mc.length]);
            return new Cb(tb, _rc, {
                body: ub[0],
                svgBelow: nc,
                style: b,
                boxType: wa(ub[0])
            });
        }
    }), V('^', '{:string}', {
        createAtom: (tb, ub, b, _rc) => {
            var mc;
            return new pb('mord', _rc, {
                command: tb,
                isFunction: !1,
                limits: 'adjacent',
                style: b,
                value: ub[0] && null !== (mc = {
                    a: 'â',
                    e: 'ê',
                    i: 'î',
                    o: 'ô',
                    u: 'û',
                    A: 'Â',
                    E: 'Ê',
                    I: 'Î',
                    O: 'Ô',
                    U: 'Û'
                } [ub[0]]) && void 0 !== mc ? mc : '^'
            });
        }
    }), V('`', '{:string}', {
        createAtom: (tb, ub, b, _rc) => {
            var mc;
            return new pb('mord', _rc, {
                command: tb,
                isFunction: !1,
                limits: 'adjacent',
                style: b,
                value: ub[0] && null !== (mc = {
                    a: 'à',
                    e: 'è',
                    i: 'ì',
                    o: 'ò',
                    u: 'ù',
                    A: 'À',
                    E: 'È',
                    I: 'Ì',
                    O: 'Ò',
                    U: 'Ù'
                } [ub[0]]) && void 0 !== mc ? mc : '`'
            });
        }
    }), V('\'', '{:string}', {
        createAtom: (tb, ub, b, _rc) => {
            var mc;
            return new pb('mord', _rc, {
                command: tb,
                isFunction: !1,
                limits: 'adjacent',
                style: b,
                value: ub[0] && null !== (mc = {
                    a: 'á',
                    e: 'é',
                    i: 'í',
                    o: 'ó',
                    u: 'ú',
                    A: 'Á',
                    E: 'É',
                    I: 'Í',
                    O: 'Ó',
                    U: 'Ú'
                } [ub[0]]) && void 0 !== mc ? mc : '^'
            });
        }
    }), V('~', '{:string}', {
        createAtom: (tb, ub, b, _rc) => {
            var mc;
            return new pb('mord', _rc, {
                command: tb,
                isFunction: !1,
                limits: 'adjacent',
                style: b,
                value: ub[0] && null !== (mc = {
                    n: 'ñ',
                    N: 'Ñ',
                    a: 'ã',
                    o: 'õ',
                    A: 'Ã',
                    O: 'Õ'
                } [ub[0]]) && void 0 !== mc ? mc : '\xB4'
            });
        }
    }), V('c', '{:string}', {
        createAtom: (tb, ub, b, _rc) => {
            var mc;
            return new pb('mord', _rc, {
                command: tb,
                isFunction: !1,
                limits: 'adjacent',
                style: b,
                value: ub[0] && null !== (mc = {
                    c: 'ç',
                    C: 'Ç'
                } [ub[0]]) && void 0 !== mc ? mc : ''
            });
        }
    }), V('enclose', '{notation:string}[style:string]{body:auto}', {
        createAtom: (tb, ub, b, _rc) => {
            var mc;
            const nc = {
                strokeColor: 'currentColor',
                strokeWidth: '',
                strokeStyle: 'solid',
                backgroundcolor: 'transparent',
                padding: 'auto',
                shadow: 'auto',
                svgStrokeStyle: void 0,
                borderStyle: void 0,
                style: b
            };
            if (ub[1]) {
                const oc = ub[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
                for (const pc of oc) {
                    const qc = pc.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                    if (qc)
                        nc.strokeWidth = qc[1], nc.strokeStyle = qc[2], nc.strokeColor = qc[3];
                    else {
                        const rc = pc.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                        rc && ('mathbackground' === rc[1] ? nc.backgroundcolor = rc[2] : 'mathcolor' === rc[1] ? nc.strokeColor = rc[2] : 'padding' === rc[1] ? nc.padding = rc[2] : 'shadow' === rc[1] && (nc.shadow = rc[2]));
                    }
                }
                'dashed' === nc.strokeStyle ? nc.svgStrokeStyle = '5,5' : 'dotted' === nc.strokeStyle && (nc.svgStrokeStyle = '1,5');
            }
            nc.borderStyle = `${ nc.strokeWidth } ${ nc.strokeStyle } ${ nc.strokeColor }`;
            const oc = {};
            return (null !== (mc = ub[0]) && void 0 !== mc ? mc : '').split(/[, ]/).filter(tb => tb.length > 0).forEach(tb => {
                oc[tb.toLowerCase()] = !0;
            }), new Ub(tb, ub[2], oc, _rc, nc);
        }
    }), V('cancel', '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => new Ub(tb, ub[0], {
            updiagonalstrike: !0
        }, _rc, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: b
        })
    }), V('bcancel', '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => new Ub(tb, ub[0], {
            downdiagonalstrike: !0
        }, _rc, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: b
        })
    }), V('xcancel', '{body:auto}', {
        createAtom: (tb, ub, b, _rc) => new Ub(tb, ub[0], {
            updiagonalstrike: !0,
            downdiagonalstrike: !0
        }, _rc, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: b
        })
    }), R('math', '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        mathstyleName: 'textstyle'
    }))), R('displaymath', '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        mathstyleName: 'textstyle'
    }))), I('array', '{columns:colspec}', (tb, ub, b, _rc, _mc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        columns: _mc[0],
        mathstyleName: 'textstyle'
    }))), I([
        'equation',
        'equation*',
        'subequations'
    ], '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        columns: [{
            align: 'c'
        }]
    }))), I('multline', '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        columns: [{
            align: 'm'
        }]
    }))), I([
        'align',
        'align*',
        'aligned',
        'eqnarray'
    ], '', (tb, ub, b, _rc) => {
        let _mc = 0;
        Sa(b) && (b = [
            [
                [
                    new pb('first', tb),
                    new Hb(tb)
                ],
                [
                    new pb('first', tb),
                    new Hb(tb)
                ]
            ]
        ]);
        for (const nc of b)
            _mc = Math.max(_mc, nc.length);
        const oc = [{
                gap: 0
            },
            {
                align: 'r'
            },
            {
                gap: 0.25
            },
            {
                align: 'l'
            }
        ];
        let pc = 2;
        for (; pc < _mc;)
            oc.push({
                gap: 1
            }), oc.push({
                align: 'r'
            }), oc.push({
                gap: 0.25
            }), oc.push({
                align: 'l'
            }), pc += 2;
        return oc.push({
            gap: 0
        }), new Nb(nc, ub, b, _rc, {
            arraycolsep: 0,
            columns: oc,
            colSeparationType: 'align',
            jot: 0.3,
            minColumns: 2
        });
    }), I('split', '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ],
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        columns: [{
                align: 'r'
            },
            {
                align: 'l'
            }
        ],
        minColumns: 2
    }))), I([
        'gather',
        'gathered'
    ], '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        columns: [{
                gap: 0.25
            },
            {
                align: 'c'
            },
            {
                gap: 0
            }
        ],
        colSeparationType: 'gather'
    }))), I([
        'matrix',
        'pmatrix',
        'bmatrix',
        'Bmatrix',
        'vmatrix',
        'Vmatrix',
        'matrix*',
        'pmatrix*',
        'bmatrix*',
        'Bmatrix*',
        'vmatrix*',
        'Vmatrix*'
    ], '[columns:colspec]', (tb, ub, b, _rc, _mc) => {
        var mc;
        Sa(b) && (b = [
            [
                [
                    new pb('first', tb),
                    new Hb(tb)
                ]
            ]
        ]);
        let nc = '.',
            oc = '.';
        switch (ub) {
            case 'pmatrix':
            case 'pmatrix*':
                nc = '(', oc = ')';
                break;
            case 'bmatrix':
            case 'bmatrix*':
                nc = '[', oc = ']';
                break;
            case 'Bmatrix':
            case 'Bmatrix*':
                nc = '\\lbrace', oc = '\\rbrace';
                break;
            case 'vmatrix':
            case 'vmatrix*':
                nc = '\\vert', oc = '\\vert';
                break;
            case 'Vmatrix':
            case 'Vmatrix*':
                nc = '\\Vert', oc = '\\Vert';
                break;
            case 'matrix':
            case 'matrix*':
                nc = '.', oc = '.';
        }
        return new Nb(tb, ub, b, _rc, {
            mathstyleName: 'textstyle',
            leftDelim: nc,
            rightDelim: oc,
            columns: null !== (mc = _mc[0]) && void 0 !== mc ? mc : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ]
        });
    }), I([
        'smallmatrix',
        'smallmatrix*'
    ], '[columns:colspec]', (tb, ub, b, _rc, _mc) => {
        var mc;
        return Sa(b) && (b = [
            [
                [
                    new pb('first', tb),
                    new Hb(tb)
                ]
            ]
        ]), new Nb(tb, ub, b, _rc, {
            mathstyleName: 'scriptstyle',
            columns: null !== (mc = _mc[0]) && void 0 !== mc ? mc : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ],
            colSeparationType: 'small',
            arraystretch: 0.5
        });
    }), I([
        'cases',
        'dcases'
    ], '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        mathstyleName: 'dcases' === ub ? 'displaystyle' : 'textstyle',
        arraystretch: 1.2,
        leftDelim: '\\lbrace',
        rightDelim: '.',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), I('rcases', '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        arraystretch: 1.2,
        leftDelim: '.',
        rightDelim: '\\rbrace',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), R('center', '', (tb, ub, b, _rc) => (Sa(b) && (b = [
        [
            [
                new pb('first', tb),
                new Hb(tb)
            ]
        ]
    ]), new Nb(tb, ub, b, _rc, {
        columns: [{
            align: 'c'
        }]
    }))), V([
        'overrightarrow',
        'overleftarrow',
        'Overrightarrow',
        'overleftharpoon',
        'overrightharpoon',
        'overleftrightarrow',
        'overlinesegment',
        'overgroup'
    ], '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            body: ub[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: b,
            svgAbove: tb.slice(1)
        })
    }), V('overbrace', '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            body: ub[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: b,
            svgAbove: tb.slice(1)
        })
    }), V([
        'underrightarrow',
        'underleftarrow',
        'underleftrightarrow',
        'underlinesegment',
        'undergroup'
    ], '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            body: ub[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: b,
            svgBelow: tb.slice(1)
        })
    }), V(['underbrace'], '{:auto}', {
        createAtom: (tb, ub, b, _rc) => new Cb(tb, _rc, {
            body: ub[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: b,
            svgBelow: tb.slice(1)
        })
    }), V([
        'xrightarrow',
        'xleftarrow',
        'xRightarrow',
        'xLeftarrow',
        'xleftharpoonup',
        'xleftharpoondown',
        'xrightharpoonup',
        'xrightharpoondown',
        'xlongequal',
        'xtwoheadleftarrow',
        'xtwoheadrightarrow',
        'xleftrightarrow',
        'xLeftrightarrow',
        'xrightleftharpoons',
        'xleftrightharpoons',
        'xhookleftarrow',
        'xhookrightarrow',
        'xmapsto',
        'xtofrom',
        'xrightleftarrows',
        'xrightequilibrium',
        'xleftequilibrium'
    ], '[:auto]{:auto}', {
        createAtom: (tb, ub, b, _rc) => {
            var _mc, nc;
            return new Cb(tb, _rc, {
                style: b,
                svgBody: tb.slice(1),
                above: 0 === (null === (_mc = ub[1]) || void 0 === _mc ? void 0 : _mc.length) ? void 0 : ub[1],
                below: null !== (nc = ub[0]) && void 0 !== nc ? nc : null,
                skipBoundary: !1,
                supsubPlacement: 'over-under',
                paddedBody: !0,
                paddedLabels: !0,
                boxType: 'mrel',
                serialize: (ub, b) => tb + (ub.hasEmptyBranch('below') ? '' : `[${ ub.belowToLatex(b) }]`) + `{${ ub.aboveToLatex(b) }}${ ub.supsubToLatex(b) }`
            });
        }
    }), V([
        'arccos',
        'arcsin',
        'arctan',
        'arctg',
        'arcctg',
        'arg',
        'ch',
        'cos',
        'cosh',
        'cot',
        'cotg',
        'coth',
        'ctg',
        'cth',
        'csc',
        'cosec',
        'dim',
        'exp',
        'hom',
        'inf',
        'ker',
        'lb',
        'lg',
        'ln',
        'log',
        'Pr',
        'sec',
        'sh',
        'sin',
        'sinh',
        'sup',
        'tan',
        'tanh',
        'tg',
        'th',
        'arcsec',
        'arccsc',
        'arsinh',
        'arcosh',
        'artanh',
        'arcsech',
        'arccsch'
    ], '', {
        isFunction: !0,
        createAtom: (tb, ub, b, _rc) => new Zb(tb, tb.slice(1), _rc, {
            limits: 'adjacent',
            isFunction: !0,
            variant: 'main',
            variantStyle: 'up',
            style: b
        })
    }), V([
        'liminf',
        'limsup'
    ], '', {
        createAtom: (tb, ub, b, _rc) => new Zb(tb, {
            '\\liminf': 'lim inf',
            '\\limsup': 'lim sup'
        } [tb], _rc, {
            limits: 'over-under',
            variant: 'main',
            style: b
        })
    }), V([
        'lim',
        'mod'
    ], '', {
        createAtom: (tb, ub, b, _rc) => new Zb(tb, tb.slice(1), _rc, {
            limits: 'over-under',
            variant: 'main',
            style: b
        })
    }), V([
        'det',
        'max',
        'min'
    ], '', {
        isFunction: !0,
        createAtom: (tb, ub, b, _rc) => new Zb(tb, tb.slice(1), _rc, {
            limits: 'over-under',
            isFunction: !0,
            variant: 'main',
            style: b
        })
    }), V(['ang'], '{:math}', {
        isFunction: !0,
        createAtom: (tb, ub, b, _rc) => new Db([
            ...ub[0],
            new pb('mord', _rc, {
                value: '\xB0',
                style: b
            })
        ], _rc, {
            mode: 'math',
            latexOpen: '\\ang{',
            latexClose: '}',
            style: b
        })
    }), V('sqrt', '[index:auto]{radicand:auto}', {
        createAtom: (tb, ub, b, _rc) => new cc(tb, _rc, {
            body: ub[1],
            index: ub[0],
            style: b
        })
    }), V([
        'frac',
        'dfrac',
        'tfrac',
        'cfrac',
        'binom',
        'dbinom',
        'tbinom'
    ], '{numerator}{denominator}', {
        createAtom: (tb, ub, b, _rc) => {
            const mc = {
                style: b
            };
            switch (tb) {
                case '\\dfrac':
                case '\\frac':
                case '\\tfrac':
                    mc.hasBarLine = !0;
                    break;
                case '\\atopfrac':
                    mc.hasBarLine = !1;
                    break;
                case '\\dbinom':
                case '\\binom':
                case '\\tbinom':
                    mc.hasBarLine = !1, mc.leftDelim = '(', mc.rightDelim = ')';
            }
            switch (tb) {
                case '\\dfrac':
                case '\\dbinom':
                    mc.mathstyleName = 'displaystyle';
                    break;
                case '\\tfrac':
                case '\\tbinom':
                    mc.mathstyleName = 'textstyle';
                    break;
                case '\\cfrac':
                    mc.hasBarLine = !0, mc.continuousFraction = !0;
            }
            return new Vb(tb, ub[0], ub[1], _rc, mc);
        }
    }), V([
        'brace',
        'brack'
    ], '', {
        infix: !0,
        createAtom: (tb, ub, b, _rc) => new Vb(tb, ub[0], ub[1], _rc, {
            hasBarLine: !1,
            leftDelim: '\\brace' === tb ? '\\lbrace' : '\\lbrack',
            rightDelim: '\\brace' === tb ? '\\rbrace' : '\\rbrack',
            style: b,
            serialize: (tb, ub) => at([
                tb.aboveToLatex(ub),
                tb.command,
                tb.belowToLatex(ub)
            ])
        })
    }), V([
        'over',
        'atop',
        'choose'
    ], '', {
        infix: !0,
        createAtom: (tb, ub, b, _rc) => {
            let mc, nc;
            return '\\choose' === tb && (mc = '(', nc = ')'), new Vb(tb, ub[0], ub[1], _rc, {
                hasBarLine: '\\over' === tb,
                leftDelim: mc,
                rightDelim: nc,
                style: b,
                serialize: (tb, ub) => at([
                    tb.aboveToLatex(ub),
                    tb.command,
                    tb.belowToLatex(ub)
                ])
            });
        }
    }), V([
        'overwithdelims',
        'atopwithdelims'
    ], '{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}', {
        infix: !0,
        createAtom: (tb, ub, b, _rc) => new Vb(tb, ub[0], ub[1], _rc, {
            leftDelim: ub[2],
            rightDelim: ub[3],
            hasBarLine: !1,
            style: b,
            serialize: (tb, ub) => `${ tb.aboveToLatex(ub) } ${ tb.command }${ tb.leftDelim }${ tb.rightDelim }${ tb.belowToLatex(ub) }`
        })
    }), V('pdiff', '{numerator}{denominator}', {
        createAtom: (tb, ub, b, _rc) => new Vb(tb, ub[0], ub[1], _rc, {
            hasBarLine: !0,
            numerPrefix: '\u2202',
            denomPrefix: '\u2202',
            style: b
        })
    }), V([
        'sum',
        'prod',
        'bigcup',
        'bigcap',
        'coprod',
        'bigvee',
        'bigwedge',
        'biguplus',
        'bigotimes',
        'bigoplus',
        'bigodot',
        'bigsqcup',
        'smallint',
        'intop'
    ], '', {
        createAtom: (tb, ub, b, _rc) => new Zb(tb, {
            coprod: '\u2210',
            bigvee: '\u22C1',
            bigwedge: '\u22C0',
            biguplus: '\u2A04',
            bigcap: '\u22C2',
            bigcup: '\u22C3',
            intop: '\u222B',
            prod: '\u220F',
            sum: '\u2211',
            bigotimes: '\u2A02',
            bigoplus: '\u2A01',
            bigodot: '\u2A00',
            bigsqcup: '\u2A06',
            smallint: '\u222B'
        } [tb.slice(1)], _rc, {
            isExtensibleSymbol: !0,
            limits: 'auto',
            variant: 'main',
            style: b
        })
    });
    const mc = {
        int: '\u222B',
        iint: '\u222C',
        iiint: '\u222D',
        oint: '\u222E',
        oiint: '\u222F',
        oiiint: '\u2230',
        intclockwise: '\u2231',
        varointclockwise: '\u2232',
        ointctrclockwise: '\u2233',
        intctrclockwise: '\u2A11',
        sqcup: '\u2294',
        sqcap: '\u2293',
        uplus: '\u228E',
        wr: '\u2240',
        amalg: '\u2A3F',
        Cap: '\u22D2',
        Cup: '\u22D3',
        doublecap: '\u22D2',
        doublecup: '\u22D3'
    };

    function nc(oc, pc) {
        return oc[0] === pc[0] && oc[1] === pc[1] ? 'equal' : 'different';
    }

    function nc(oc) {
        let pc = 1 / 0,
            qc = -1 / 0;
        for (const _rc of oc.ranges)
            pc = Math.min(pc, _rc[0], _rc[1]), qc = Math.max(qc, _rc[0], _rc[1]);
        return [
            pc,
            qc
        ];
    }

    function nc(oc, pc, qc) {
        return qc ? function(rc, sc) {
            if (!sc)
                return '';
            if ('string' == typeof sc)
                return sc;
            if (!rc || void 0 === sc.after)
                return sc.value;
            let tc = !1,
                uc = !1,
                vc = !1,
                wc = !1,
                xc = !1,
                yc = !1,
                zc = !1,
                Ac = !1,
                Bc = !1,
                Cc = !1,
                Dc = !1,
                Ec = !1,
                Fc = !1,
                Gc = !1,
                Hc = !1,
                Ic = rc[0],
                _Jc = 0;
            for (; Ic && /msubsup|placeholder/.test(Ic.type);)
                _Jc += 1, Ic = rc[_Jc];
            return tc = !Ic || 'first' === Ic.type, Ic && (Gc = 'text' === Ic.mode, uc = !Gc && 'mord' === Ic.type && q.test(Ic.value), vc = !Gc && 'mord' === Ic.type && /\d+$/.test(Ic.value), wc = !Gc && Ic.isFunction, xc = 'genfrac' === Ic.type, yc = 'surd' === Ic.type, zc = 'mbin' === Ic.type, Ac = 'mrel' === Ic.type, Bc = 'mop' === Ic.type, Cc = 'mpunct' === Ic.type || 'minner' === Ic.type, Dc = 'array' === Ic.type, Ec = 'mopen' === Ic.type, Fc = 'mclose' === Ic.type || 'leftright' === Ic.type, Hc = 'space' === Ic.type), sc.after.includes('nothing') && tc || sc.after.includes('letter') && uc || sc.after.includes('digit') && vc || sc.after.includes('function') && wc || sc.after.includes('frac') && xc || sc.after.includes('surd') && yc || sc.after.includes('binop') && zc || sc.after.includes('relop') && Ac || sc.after.includes('operator') && Bc || sc.after.includes('punct') && Cc || sc.after.includes('array') && Dc || sc.after.includes('openfence') && Ec || sc.after.includes('closefence') && Fc || sc.after.includes('text') && Gc || sc.after.includes('space') && Hc ? sc.value : '';
        }(oc, qc[pc]) : '';
    }
    V(Object.keys(mc), '', {
        createAtom: (tb, ub, b, _sc) => new Zb(tb, mc[tb.slice(1)], _sc, {
            limits: 'adjacent',
            isExtensibleSymbol: !0,
            style: b,
            variant: {
                '\u22D2': 'ams',
                '\u22D3': 'ams'
            } [mc[tb.slice(1)]]
        })
    }), V([
        'Re',
        'Im'
    ], '', {
        createAtom: (tb, ub, b, _sc) => new Zb(tb, {
            '\\Re': 'ℜ',
            '\\Im': 'ℑ'
        } [tb], _sc, {
            limits: 'adjacent',
            style: b,
            isFunction: !0,
            variant: 'fraktur'
        })
    }), V('middle', '{:delim}', {
        createAtom: (tb, ub, b, _sc) => new Sb(tb, ub[0], _sc, {
            size: 1,
            style: b
        })
    }), _$c('0123456789/@.?!'), _ad(65, 90), _ad(97, 122), _$c([
        [
            '\\forall',
            8704
        ],
        [
            '\\exists',
            8707
        ],
        [
            '\\nexists',
            8708,
            'mord',
            'ams'
        ],
        [
            '\\mid',
            8739,
            'mrel'
        ],
        [
            '\\top',
            8868
        ],
        [
            '\\bot',
            8869
        ]
    ]), _$c([
        [
            '\\sharp',
            9839
        ],
        [
            '\\flat',
            9837
        ],
        [
            '\\natural',
            9838
        ],
        [
            '\\#',
            35
        ],
        [
            '\\&',
            38
        ],
        [
            '\\clubsuit',
            9827
        ],
        [
            '\\heartsuit',
            9825
        ],
        [
            '\\spadesuit',
            9824
        ],
        [
            '\\diamondsuit',
            9826
        ],
        [
            '\\parallelogram',
            9649
        ]
    ]), _$c([
        [
            '\\backslash',
            92
        ],
        [
            '\\nabla',
            8711
        ],
        [
            '\\partial',
            8706
        ],
        [
            '\\ell',
            8467
        ],
        [
            '\\hbar',
            8463
        ],
        [
            '\\Q',
            81,
            'mord',
            'double-struck'
        ],
        [
            '\\C',
            67,
            'mord',
            'double-struck'
        ],
        [
            '\\P',
            80,
            'mord',
            'double-struck'
        ],
        [
            '\\pounds',
            163
        ],
        [
            '\\euro',
            8364
        ]
    ]), _$c([
        [
            '\\rightarrow',
            8594
        ],
        [
            '\\to',
            8594
        ],
        [
            '\\leftarrow',
            8592
        ],
        [
            '\\gets',
            8592
        ],
        [
            '\\Rightarrow',
            8658
        ],
        [
            '\\Leftarrow',
            8656
        ],
        [
            '\\longrightarrow',
            10230
        ],
        [
            '\\longleftarrow',
            10229
        ],
        [
            '\\Longrightarrow',
            10233
        ],
        [
            '\\implies',
            10233
        ],
        [
            '\\Longleftarrow',
            10232
        ],
        [
            '\\impliedby',
            10232
        ],
        [
            '\\longleftrightarrow',
            10231
        ],
        [
            '\\biconditional',
            10231
        ],
        [
            '\\Longleftrightarrow',
            10234
        ],
        [
            '\\mapsto',
            8614
        ],
        [
            '\\longmapsto',
            10236
        ],
        [
            '\\uparrow',
            8593
        ],
        [
            '\\downarrow',
            8595
        ],
        [
            '\\Uparrow',
            8657
        ],
        [
            '\\Downarrow',
            8659
        ],
        [
            '\\updownarrow',
            8597
        ],
        [
            '\\Updownarrow',
            8661
        ],
        [
            '\\hookrightarrow',
            8618
        ],
        [
            '\\hookleftarrow',
            8617
        ],
        [
            '\\rightharpoonup',
            8640
        ],
        [
            '\\leftharpoonup',
            8636
        ],
        [
            '\\rightharpoondown',
            8641
        ],
        [
            '\\leftharpoondown',
            8637
        ],
        [
            '\\searrow',
            8600
        ],
        [
            '\\nearrow',
            8599
        ],
        [
            '\\swarrow',
            8601
        ],
        [
            '\\nwarrow',
            8598
        ],
        [
            '\\originalof',
            8886
        ],
        [
            '\\laplace',
            8886
        ],
        [
            '\\imageof',
            8887
        ],
        [
            '\\Laplace',
            8887
        ]
    ], 'mrel'), _$c([
        [
            '\\lbrace',
            123,
            'mopen'
        ],
        [
            '\\rbrace',
            125,
            'mclose'
        ],
        [
            '\\lparen',
            40,
            'mopen'
        ],
        [
            '\\rparen',
            41,
            'mclose'
        ],
        [
            '\\langle',
            10216,
            'mopen'
        ],
        [
            '\\rangle',
            10217,
            'mclose'
        ],
        [
            '\\lfloor',
            8970,
            'mopen'
        ],
        [
            '\\rfloor',
            8971,
            'mclose'
        ],
        [
            '\\lceil',
            8968,
            'mopen'
        ],
        [
            '\\rceil',
            8969,
            'mclose'
        ],
        [
            '\\vert',
            8739
        ],
        [
            '\\lvert',
            8739,
            'mopen'
        ],
        [
            '\\rvert',
            8739,
            'mclose'
        ],
        [
            '\\|',
            8741
        ],
        [
            '\\Vert',
            8741
        ],
        [
            '\\mVert',
            8741
        ],
        [
            '\\lVert',
            8741,
            'mopen'
        ],
        [
            '\\rVert',
            8741,
            'mclose'
        ],
        [
            '\\lbrack',
            91,
            'mopen'
        ],
        [
            '\\rbrack',
            93,
            'mclose'
        ],
        [
            '\\{',
            123,
            'mopen'
        ],
        [
            '\\}',
            125,
            'mclose'
        ],
        [
            '(',
            40,
            'mopen'
        ],
        [
            ')',
            41,
            'mclose'
        ],
        [
            '[',
            91,
            'mopen'
        ],
        [
            ']',
            93,
            'mclose'
        ],
        [
            '\\ulcorner',
            9484,
            'mopen',
            'ams'
        ],
        [
            '\\urcorner',
            9488,
            'mclose',
            'ams'
        ],
        [
            '\\llcorner',
            9492,
            'mopen',
            'ams'
        ],
        [
            '\\lrcorner',
            9496,
            'mclose',
            'ams'
        ],
        [
            '\\lgroup',
            10222,
            'mopen'
        ],
        [
            '\\rgroup',
            10223,
            'mclose'
        ],
        [
            '\\lmoustache',
            9136,
            'mopen'
        ],
        [
            '\\rmoustache',
            9137,
            'mclose'
        ]
    ]), _$c([
        [
            '\\dashrightarrow',
            8674
        ],
        [
            '\\dashleftarrow',
            8672
        ],
        [
            '\\Rrightarrow',
            8667
        ],
        [
            '\\Lleftarrow',
            8666
        ],
        [
            '\\leftrightarrows',
            8646
        ],
        [
            '\\rightleftarrows',
            8644
        ],
        [
            '\\curvearrowright',
            8631
        ],
        [
            '\\curvearrowleft',
            8630
        ],
        [
            '\\rightrightarrows',
            8649
        ],
        [
            '\\leftleftarrows',
            8647
        ],
        [
            '\\upuparrows',
            8648
        ],
        [
            '\\downdownarrows',
            8650
        ],
        [
            '\\vartriangle',
            9651
        ],
        [
            '\\triangleq',
            8796
        ],
        [
            '\\vartriangleleft',
            8882
        ],
        [
            '\\trianglelefteq',
            8884
        ],
        [
            '\\ntriangleleft',
            8938
        ],
        [
            '\\ntrianglelefteq',
            8940
        ],
        [
            '\\vartriangleright',
            8883
        ],
        [
            '\\trianglerighteq',
            8885
        ],
        [
            '\\ntriangleright',
            8939
        ],
        [
            '\\ntrianglerighteq',
            8941
        ],
        [
            '\\blacktriangleleft',
            9664
        ],
        [
            '\\blacktriangleright',
            9654
        ],
        [
            '\\leftarrowtail',
            8610
        ],
        [
            '\\rightarrowtail',
            8611
        ],
        [
            '\\looparrowright',
            8620
        ],
        [
            '\\looparrowleft',
            8619
        ],
        [
            '\\twoheadleftarrow',
            8606
        ],
        [
            '\\twoheadrightarrow',
            8608
        ],
        [
            '\\rightleftharpoons',
            8652
        ],
        [
            '\\leftrightharpoons',
            8651
        ],
        [
            '\\Rsh',
            8625
        ],
        [
            '\\Lsh',
            8624
        ],
        [
            '\\circlearrowright',
            8635
        ],
        [
            '\\circlearrowleft',
            8634
        ],
        [
            '\\restriction',
            8638
        ],
        [
            '\\upharpoonright',
            8638
        ],
        [
            '\\upharpoonleft',
            8639
        ],
        [
            '\\downharpoonright',
            8642
        ],
        [
            '\\downharpoonleft',
            8643
        ],
        [
            '\\rightsquigarrow',
            8669
        ],
        [
            '\\leadsto',
            8669
        ],
        [
            '\\leftrightsquigarrow',
            8621
        ],
        [
            '\\multimap',
            8888
        ],
        [
            '\\nrightarrow',
            8603
        ],
        [
            '\\nleftarrow',
            8602
        ],
        [
            '\\nRightarrow',
            8655
        ],
        [
            '\\nLeftarrow',
            8653
        ],
        [
            '\\nleftrightarrow',
            8622
        ],
        [
            '\\nLeftrightarrow',
            8654
        ],
        [
            '\\shortparallel',
            8741
        ],
        [
            '\\nless',
            8814
        ],
        [
            '\\nleqslant',
            57360
        ],
        [
            '\\lneq',
            10887
        ],
        [
            '\\lneqq',
            8808
        ],
        [
            '\\nleqq',
            57361
        ],
        [
            '\\lvertneqq',
            57356
        ],
        [
            '\\lnsim',
            8934
        ],
        [
            '\\lnapprox',
            10889
        ],
        [
            '\\nprec',
            8832
        ],
        [
            '\\npreceq',
            8928
        ],
        [
            '\\precnsim',
            8936
        ],
        [
            '\\precnapprox',
            10937
        ],
        [
            '\\nsim',
            8769
        ],
        [
            '\\nshortmid',
            57350
        ],
        [
            '\\nmid',
            8740
        ],
        [
            '\\nvdash',
            8876
        ],
        [
            '\\nvDash',
            8877
        ],
        [
            '\\ngtr',
            8815
        ],
        [
            '\\ngeqslant',
            57359
        ],
        [
            '\\ngeqq',
            57358
        ],
        [
            '\\gneq',
            10888
        ],
        [
            '\\gneqq',
            8809
        ],
        [
            '\\gvertneqq',
            57357
        ],
        [
            '\\gnsim',
            8935
        ],
        [
            '\\gnapprox',
            10890
        ],
        [
            '\\nsucc',
            8833
        ],
        [
            '\\nsucceq',
            8929
        ],
        [
            '\\succnsim',
            8937
        ],
        [
            '\\succnapprox',
            10938
        ],
        [
            '\\ncong',
            8774
        ],
        [
            '\\nshortparallel',
            57351
        ],
        [
            '\\nparallel',
            8742
        ],
        [
            '\\nVDash',
            8879
        ],
        [
            '\\nsupseteqq',
            57368
        ],
        [
            '\\supsetneq',
            8843
        ],
        [
            '\\varsupsetneq',
            57371
        ],
        [
            '\\supsetneqq',
            10956
        ],
        [
            '\\varsupsetneqq',
            57369
        ],
        [
            '\\nVdash',
            8878
        ],
        [
            '\\precneqq',
            10933
        ],
        [
            '\\succneqq',
            10934
        ],
        [
            '\\nsubseteqq',
            57366
        ],
        [
            '\\leqslant',
            10877
        ],
        [
            '\\geqslant',
            10878
        ],
        [
            '\\gtrsim',
            8819
        ],
        [
            '\\approxeq',
            8778
        ],
        [
            '\\thickapprox',
            8776
        ],
        [
            '\\lessapprox',
            10885
        ],
        [
            '\\gtrapprox',
            10886
        ],
        [
            '\\precapprox',
            10935
        ],
        [
            '\\succapprox',
            10936
        ],
        [
            '\\thicksim',
            8764
        ],
        [
            '\\succsim',
            8831
        ],
        [
            '\\precsim',
            8830
        ],
        [
            '\\backsim',
            8765
        ],
        [
            '\\eqsim',
            8770
        ],
        [
            '\\backsimeq',
            8909
        ],
        [
            '\\lesssim',
            8818
        ],
        [
            '\\nleq',
            8816
        ],
        [
            '\\ngeq',
            8817
        ],
        [
            '\\smallsmile',
            8995
        ],
        [
            '\\smallfrown',
            8994
        ],
        [
            '\\leqq',
            8806
        ],
        [
            '\\eqslantless',
            10901
        ],
        [
            '\\lll',
            8920
        ],
        [
            '\\lessgtr',
            8822
        ],
        [
            '\\lesseqgtr',
            8922
        ],
        [
            '\\lesseqqgtr',
            10891
        ],
        [
            '\\risingdotseq',
            8787
        ],
        [
            '\\fallingdotseq',
            8786
        ],
        [
            '\\subseteqq',
            10949
        ],
        [
            '\\Subset',
            8912
        ],
        [
            '\\sqsubset',
            8847
        ],
        [
            '\\preccurlyeq',
            8828
        ],
        [
            '\\curlyeqprec',
            8926
        ],
        [
            '\\vDash',
            8872
        ],
        [
            '\\Vvdash',
            8874
        ],
        [
            '\\bumpeq',
            8783
        ],
        [
            '\\Bumpeq',
            8782
        ],
        [
            '\\geqq',
            8807
        ],
        [
            '\\eqslantgtr',
            10902
        ],
        [
            '\\ggg',
            8921
        ],
        [
            '\\gtrless',
            8823
        ],
        [
            '\\gtreqless',
            8923
        ],
        [
            '\\gtreqqless',
            10892
        ],
        [
            '\\supseteqq',
            10950
        ],
        [
            '\\Supset',
            8913
        ],
        [
            '\\sqsupset',
            8848
        ],
        [
            '\\succcurlyeq',
            8829
        ],
        [
            '\\curlyeqsucc',
            8927
        ],
        [
            '\\Vdash',
            8873
        ],
        [
            '\\shortmid',
            8739
        ],
        [
            '\\between',
            8812
        ],
        [
            '\\pitchfork',
            8916
        ],
        [
            '\\varpropto',
            8733
        ],
        [
            '\\backepsilon',
            8717
        ],
        [
            '\\llless',
            8920
        ],
        [
            '\\gggtr',
            8921
        ],
        [
            '\\doteqdot',
            8785
        ],
        [
            '\\Doteq',
            8785
        ],
        [
            '\\eqcirc',
            8790
        ],
        [
            '\\circeq',
            8791
        ],
        [
            '\\therefore',
            8756
        ],
        [
            '\\because',
            8757
        ]
    ], 'mrel', 'ams'), _$c([
        [
            '+',
            43
        ],
        [
            '-',
            8722
        ],
        [
            '\u2212',
            8722
        ],
        [
            '\\pm',
            177
        ],
        [
            '\\mp',
            8723
        ],
        [
            '*',
            8727
        ],
        [
            '\\times',
            215
        ],
        [
            '\\div',
            247
        ],
        [
            '\\divides',
            8739
        ],
        [
            '\\cdot',
            8901
        ],
        [
            '\\cap',
            8745
        ],
        [
            '\\cup',
            8746
        ],
        [
            '\\setminus',
            8726
        ],
        [
            '\\land',
            8743
        ],
        [
            '\\wedge',
            8743
        ],
        [
            '\\lor',
            8744
        ],
        [
            '\\vee',
            8744
        ],
        [
            '\\circ',
            8728
        ],
        [
            '\\bigcirc',
            9711
        ],
        [
            '\\bullet',
            8729
        ],
        [
            '\\oplus',
            8853
        ],
        [
            '\\ominus',
            8854
        ],
        [
            '\\otimes',
            8855
        ],
        [
            '\\odot',
            8857
        ],
        [
            '\\oslash',
            8856
        ],
        [
            '\\bigtriangleup',
            9651
        ],
        [
            '\\bigtriangledown',
            9661
        ],
        [
            '\\triangleleft',
            9667
        ],
        [
            '\\triangleright',
            9657
        ],
        [
            '\\And',
            38
        ],
        [
            '\\dagger',
            8224
        ],
        [
            '\\dag',
            8224
        ],
        [
            '\\ddag',
            8225
        ],
        [
            '\\ddagger',
            8225
        ],
        [
            '\\ast',
            8727
        ],
        [
            '\\star',
            8902
        ],
        [
            '\\bigstar',
            9733
        ],
        [
            '\\diamond',
            8900
        ]
    ], 'mbin'), _$c([
        [
            '\\lhd',
            8882
        ],
        [
            '\\rhd',
            8883
        ],
        [
            '\\lessdot',
            8918
        ],
        [
            '\\gtrdot',
            8919
        ],
        [
            '\\ltimes',
            8905
        ],
        [
            '\\rtimes',
            8906
        ],
        [
            '\\leftthreetimes',
            8907
        ],
        [
            '\\rightthreetimes',
            8908
        ],
        [
            '\\intercal',
            8890
        ],
        [
            '\\dotplus',
            8724
        ],
        [
            '\\doublebarwedge',
            10846
        ],
        [
            '\\divideontimes',
            8903
        ],
        [
            '\\centerdot',
            8901
        ],
        [
            '\\smallsetminus',
            8726
        ],
        [
            '\\barwedge',
            8892
        ],
        [
            '\\veebar',
            8891
        ],
        [
            '\\nor',
            8891
        ],
        [
            '\\curlywedge',
            8911
        ],
        [
            '\\curlyvee',
            8910
        ],
        [
            '\\boxminus',
            8863
        ],
        [
            '\\boxplus',
            8862
        ],
        [
            '\\boxtimes',
            8864
        ],
        [
            '\\boxdot',
            8865
        ],
        [
            '\\circleddash',
            8861
        ],
        [
            '\\circledast',
            8859
        ],
        [
            '\\circledcirc',
            8858
        ],
        [
            '\\unlhd',
            8884
        ],
        [
            '\\unrhd',
            8885
        ]
    ], 'mbin', 'ams'), _$c([
        [
            '\\surd',
            8730
        ],
        [
            '\\infty',
            8734
        ],
        [
            '\\prime',
            8242
        ],
        [
            '\\doubleprime',
            8243
        ],
        [
            '\\angle',
            8736
        ],
        [
            '`',
            8216
        ],
        [
            '\\$',
            36
        ],
        [
            '\\%',
            37
        ],
        [
            '\\_',
            95
        ],
        [
            '\\alpha',
            945
        ],
        [
            '\\beta',
            946
        ],
        [
            '\\gamma',
            947
        ],
        [
            '\\delta',
            948
        ],
        [
            '\\epsilon',
            1013
        ],
        [
            '\\varepsilon',
            949
        ],
        [
            '\\zeta',
            950
        ],
        [
            '\\eta',
            951
        ],
        [
            '\\theta',
            952
        ],
        [
            '\\vartheta',
            977
        ],
        [
            '\\iota',
            953
        ],
        [
            '\\kappa',
            954
        ],
        [
            '\\varkappa',
            1008,
            'mord',
            'ams'
        ],
        [
            '\\lambda',
            955
        ],
        [
            '\\mu',
            956
        ],
        [
            '\\nu',
            957
        ],
        [
            '\\xi',
            958
        ],
        [
            '\\omicron',
            111
        ],
        [
            '\\pi',
            960
        ],
        [
            '\\varpi',
            982
        ],
        [
            '\\rho',
            961
        ],
        [
            '\\varrho',
            1009
        ],
        [
            '\\sigma',
            963
        ],
        [
            '\\varsigma',
            962
        ],
        [
            '\\tau',
            964
        ],
        [
            '\\phi',
            981
        ],
        [
            '\\varphi',
            966
        ],
        [
            '\\upsilon',
            965
        ],
        [
            '\\chi',
            967
        ],
        [
            '\\psi',
            968
        ],
        [
            '\\omega',
            969
        ],
        [
            '\\Gamma',
            915
        ],
        [
            '\\Delta',
            916
        ],
        [
            '\\Theta',
            920
        ],
        [
            '\\Lambda',
            923
        ],
        [
            '\\Xi',
            926
        ],
        [
            '\\Pi',
            928
        ],
        [
            '\\Sigma',
            931
        ],
        [
            '\\Upsilon',
            933
        ],
        [
            '\\Phi',
            934
        ],
        [
            '\\Psi',
            936
        ],
        [
            '\\Omega',
            937
        ],
        [
            '\\digamma',
            989,
            'mord',
            'ams'
        ],
        [
            '\\emptyset',
            8709
        ]
    ]), _$c([
        [
            '=',
            61
        ],
        [
            '<',
            60
        ],
        [
            '\\lt',
            60
        ],
        [
            '>',
            62
        ],
        [
            '\\gt',
            62
        ],
        [
            '\\le',
            8804
        ],
        [
            '\\leq',
            8804
        ],
        [
            '\\ge',
            8805
        ],
        [
            '\\geq',
            8805
        ],
        [
            '\\ll',
            8810
        ],
        [
            '\\gg',
            8811
        ],
        [
            '\\coloneq',
            8788
        ],
        [
            '\\measeq',
            8797
        ],
        [
            '\\eqdef',
            8798
        ],
        [
            '\\questeq',
            8799
        ],
        [
            ':',
            58
        ],
        [
            '\\cong',
            8773
        ],
        [
            '\\equiv',
            8801
        ],
        [
            '\\prec',
            8826
        ],
        [
            '\\preceq',
            10927
        ],
        [
            '\\succ',
            8827
        ],
        [
            '\\succeq',
            10928
        ],
        [
            '\\perp',
            8869
        ],
        [
            '\\propto',
            8733
        ],
        [
            '\\Colon',
            8759
        ],
        [
            '\\smile',
            8995
        ],
        [
            '\\frown',
            8994
        ],
        [
            '\\sim',
            8764
        ],
        [
            '\\doteq',
            8784
        ],
        [
            '\\bowtie',
            8904
        ],
        [
            '\\Join',
            8904
        ],
        [
            '\\asymp',
            8781
        ],
        [
            '\\sqsubseteq',
            8849
        ],
        [
            '\\sqsupseteq',
            8850
        ],
        [
            '\\approx',
            8776
        ],
        [
            '\\~',
            126
        ],
        [
            '\\leftrightarrow',
            8596
        ],
        [
            '\\Leftrightarrow',
            8660
        ],
        [
            '\\models',
            8872
        ],
        [
            '\\vdash',
            8866
        ],
        [
            '\\dashv',
            8867
        ],
        [
            '\\roundimplies',
            10608
        ],
        [
            '\\in',
            8712
        ],
        [
            '\\notin',
            8713
        ],
        [
            '\\ni',
            8715
        ],
        [
            '\\owns',
            8715
        ],
        [
            '\\subset',
            8834
        ],
        [
            '\\supset',
            8835
        ],
        [
            '\\subseteq',
            8838
        ],
        [
            '\\supseteq',
            8839
        ],
        [
            '\\differencedelta',
            8710
        ],
        [
            '\\mvert',
            8739
        ],
        [
            '\\parallel',
            8741
        ],
        [
            '\\simeq',
            8771
        ]
    ], 'mrel'), _$c([
        [
            '\\lnot',
            172
        ],
        [
            '\\neg',
            172
        ],
        [
            '\\triangle',
            9651
        ],
        [
            '\\subsetneq',
            8842
        ],
        [
            '\\varsubsetneq',
            57370
        ],
        [
            '\\subsetneqq',
            10955
        ],
        [
            '\\varsubsetneqq',
            57367
        ],
        [
            '\\nsubset',
            8836
        ],
        [
            '\\nsupset',
            8837
        ],
        [
            '\\nsubseteq',
            8840
        ],
        [
            '\\nsupseteq',
            8841
        ]
    ], 'mrel', 'ams'), _$c([
        [
            '\\wp',
            8472
        ],
        [
            '\\aleph',
            8501
        ]
    ]), _$c([
        [
            '\\blacktriangle',
            9650
        ],
        [
            '\\hslash',
            8463
        ],
        [
            '\\Finv',
            8498
        ],
        [
            '\\Game',
            8513
        ],
        [
            '\\eth',
            240
        ],
        [
            '\\mho',
            8487
        ],
        [
            '\\Bbbk',
            107
        ],
        [
            '\\yen',
            165
        ],
        [
            '\\square',
            9633
        ],
        [
            '\\Box',
            9633
        ],
        [
            '\\blacksquare',
            9632
        ],
        [
            '\\circledS',
            9416
        ],
        [
            '\\circledR',
            174
        ],
        [
            '\\triangledown',
            9661
        ],
        [
            '\\blacktriangledown',
            9660
        ],
        [
            '\\checkmark',
            10003
        ],
        [
            '\\diagup',
            9585
        ],
        [
            '\\measuredangle',
            8737
        ],
        [
            '\\sphericalangle',
            8738
        ],
        [
            '\\backprime',
            8245
        ],
        [
            '\\backdoubleprime',
            8246
        ],
        [
            '\\Diamond',
            9674
        ],
        [
            '\\lozenge',
            9674
        ],
        [
            '\\blacklozenge',
            10731
        ],
        [
            '\\varnothing',
            8709
        ],
        [
            '\\complement',
            8705
        ],
        [
            '\\maltese',
            10016
        ],
        [
            '\\beth',
            8502
        ],
        [
            '\\daleth',
            8504
        ],
        [
            '\\gimel',
            8503
        ]
    ], 'mord', 'ams'), _$c([
        [
            '\\ ',
            160
        ],
        [
            '~',
            160
        ],
        [
            '\\space',
            160
        ]
    ], 'space'), V([
        '!',
        ',',
        ':',
        ';',
        'enskip',
        'enspace',
        'quad',
        'qquad'
    ], '', {
        createAtom: (tb, ub, b, _sc) => new Eb(tb, b, _sc)
    }), _$c([
        [
            '\\colon',
            58
        ],
        [
            '\\cdotp',
            8901
        ],
        [
            '\\vdots',
            8942,
            'mord'
        ],
        [
            '\\ldotp',
            46
        ],
        [
            ',',
            44
        ],
        [
            ';',
            59
        ]
    ], 'mpunct'), _$c([
        [
            '\\cdots',
            8943
        ],
        [
            '\\ddots',
            8945
        ],
        [
            '\\ldots',
            8230
        ],
        [
            '\\mathellipsis',
            8230
        ]
    ], 'minner'), _$c([
        [
            '\\/',
            47
        ],
        [
            '|',
            8739,
            'mord'
        ],
        [
            '\\imath',
            305
        ],
        [
            '\\jmath',
            567
        ],
        [
            '\\degree',
            176
        ],
        [
            '\'',
            8242
        ],
        [
            '"',
            8221
        ]
    ]);
    const nc = {
        '&': '\\&',
        '%': '\\%',
        '\'\'': '^{\\doubleprime}',
        alpha: '\\alpha',
        delta: '\\delta',
        Delta: '\\Delta',
        pi: '\\pi',
        Pi: '\\Pi',
        theta: '\\theta',
        Theta: '\\Theta',
        ii: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryI'
        },
        jj: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryJ'
        },
        ee: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\exponentialE'
        },
        nabla: '\\nabla',
        grad: '\\nabla',
        del: '\\partial',
        deg: {
            after: 'digit+space',
            value: '\\degree'
        },
        infty: '\\infty',
        '\u221E': '\\infty',
        oo: {
            after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\infty'
        },
        '\u2211': '\\sum',
        sum: '\\sum_{#?}^{#?}',
        int: '\\int_{#?}^{#?}',
        prod: '\\prod_{#?}^{#?}',
        sqrt: '\\sqrt{#?}',
        '\u2206': '\\differentialD',
        '\u2202': '\\differentialD',
        arcsin: '\\arcsin',
        arccos: '\\arccos',
        arctan: '\\arctan',
        arcsec: '\\arcsec',
        arccsc: '\\arccsc',
        arsinh: '\\arsinh',
        arcosh: '\\arcosh',
        artanh: '\\artanh',
        arcsech: '\\arcsech',
        arccsch: '\\arccsch',
        arg: '\\arg',
        ch: '\\ch',
        cosec: '\\cosec',
        cosh: '\\cosh',
        cot: '\\cot',
        cotg: '\\cotg',
        coth: '\\coth',
        csc: '\\csc',
        ctg: '\\ctg',
        cth: '\\cth',
        sec: '\\sec',
        sinh: '\\sinh',
        sh: '\\sh',
        tanh: '\\tanh',
        tg: '\\tg',
        th: '\\th',
        sin: '\\sin',
        cos: '\\cos',
        tan: '\\tan',
        lg: '\\lg',
        lb: '\\lb',
        log: '\\log',
        ln: '\\ln',
        exp: '\\exp',
        lim: '\\lim_{#?}',
        dx: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD x'
        },
        dy: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD y'
        },
        dt: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD t'
        },
        AA: '\\forall',
        EE: '\\exists',
        '!EE': '\\nexists',
        '&&': '\\land',
        xin: {
            after: 'nothing+text+relop+punct+openfence+space',
            value: 'x \\in'
        },
        in: {
            after: 'nothing+letter+closefence',
            value: '\\in'
        },
        '!in': '\\notin',
        NN: '\\mathbb{N}',
        ZZ: '\\Z',
        QQ: '\\Q',
        RR: '\\R',
        CC: '\\C',
        xx: '\\times',
        '+-': '\\pm',
        '\u2260': '\\ne',
        '!=': '\\ne',
        '\u2265': '\\ge',
        '>=': '\\ge',
        '\u2264': '\\le',
        '<=': '\\le',
        '<<': '\\ll',
        '>>': '\\gg',
        '~~': '\\approx',
        '\u2248': '\\approx',
        '?=': '\\questeq',
        '\xF7': '\\div',
        '\xAC': '\\neg',
        ':=': '\\coloneq',
        '::': '\\Colon',
        '(:': '\\langle',
        ':)': '\\rangle',
        beta: '\\beta',
        chi: '\\chi',
        epsilon: '\\epsilon',
        varepsilon: '\\varepsilon',
        eta: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\eta'
        },
        gamma: '\\gamma',
        Gamma: '\\Gamma',
        iota: '\\iota',
        kappa: '\\kappa',
        lambda: '\\lambda',
        Lambda: '\\Lambda',
        mu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\mu'
        },
        nu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\nu'
        },
        'µ': '\\mu',
        phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\phi'
        },
        Phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Phi'
        },
        varphi: '\\varphi',
        psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\psi'
        },
        Psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Psi'
        },
        rho: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\rho'
        },
        sigma: '\\sigma',
        Sigma: '\\Sigma',
        tau: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\tau'
        },
        vartheta: '\\vartheta',
        upsilon: '\\upsilon',
        xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\xi'
        },
        Xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Xi'
        },
        zeta: '\\zeta',
        omega: '\\omega',
        Omega: '\\Omega',
        'Ω': '\\omega',
        forall: '\\forall',
        exists: '\\exists',
        '!exists': '\\nexists',
        ':.': '\\therefore',
        liminf: '\\liminf_{#?}',
        limsup: '\\limsup_{#?}',
        argmin: '\\operatorname*{arg~min}_{#?}',
        argmax: '\\operatorname*{arg~max}_{#?}',
        det: '\\det',
        mod: '\\mod',
        max: '\\max',
        min: '\\min',
        erf: '\\operatorname{erf}',
        erfc: '\\operatorname{erfc}',
        bessel: '\\operatorname{bessel}',
        mean: '\\operatorname{mean}',
        median: '\\operatorname{median}',
        fft: '\\operatorname{fft}',
        lcm: '\\operatorname{lcm}',
        gcd: '\\operatorname{gcd}',
        randomReal: '\\operatorname{randomReal}',
        randomInteger: '\\operatorname{randomInteger}',
        Re: '\\operatorname{Re}',
        Im: '\\operatorname{Im}',
        mm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{mm}'
        },
        cm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{cm}'
        },
        km: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{km}'
        },
        kg: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{kg}'
        },
        '...': '\\ldots',
        '+...': '+\\cdots',
        '-...': '-\\cdots',
        '->...': '\\to\\cdots',
        '->': '\\to',
        '|->': '\\mapsto',
        '-->': '\\longrightarrow',
        '<--': '\\longleftarrow',
        '=>': '\\Rightarrow',
        '==>': '\\Longrightarrow',
        '<=>': '\\Leftrightarrow',
        '<->': '\\leftrightarrow',
        '(.)': '\\odot',
        '(+)': '\\oplus',
        '(/)': '\\oslash',
        '(*)': '\\otimes',
        '(-)': '\\ominus',
        '||': '\\Vert',
        '{': '\\{',
        '}': '\\}',
        '*': '\\cdot'
    };

    function oc(pc, qc) {
        var rc;
        let _sc = null !== (rc = null == qc ? void 0 : qc.format) && void 0 !== rc ? rc : 'auto';
        return 'auto' === _sc && ([tc, uc] = function(vc) {
            if ((vc = vc.trim()).length <= 1)
                return [
                    'latex',
                    vc
                ];
            let wc;
            return [xc, yc] = _pc(yc), xc ? [
                'latex',
                yc
            ] : yc.startsWith('`') && yc.endsWith('`') ? [
                'ascii-math',
                yc = yc.substring(1, yc.length - 1)
            ] : yc.includes('\\') ? [
                'latex',
                yc
            ] : /\$.+\$/.test(yc) ? [
                'latex',
                `\\text{${ yc }}`
            ] : [
                void 0,
                yc
            ];
        }(uc)), 'ascii-math' === tc ? [
            'ascii-math',
            _oc(uc = (uc = (uc = (uc = (uc = (uc = uc.replace(/\u2061/gu, '')).replace(/\u3016/gu, '{')).replace(/\u3017/gu, '}')).replace(/([^\\])sinx/g, '$1\\sin x')).replace(/([^\\])cosx/g, '$1\\cos x ')).replace(/\u2013/g, '-'), {
                inlineShortcuts: null == qc ? void 0 : qc.inlineShortcuts
            })
        ] : [
            'latex',
            uc
        ];
    }

    function _oc(pc, qc) {
        var rc, sc, tc;
        if (!pc)
            return '';
        let uc, vc = !1;
        const wc = null !== (rc = qc.inlineShortcuts) && void 0 !== rc ? rc : nc;
        if (vc || !pc.startsWith('^') && !pc.startsWith('_') || (uc = _oc(pc.slice(1), {
                inlineShortcuts: wc,
                noWrap: !0
            }), pc = pc[0] + '{' + uc.match + '}', pc += _oc(uc.rest, qc), vc = !0), !vc && (uc = pc.match(/^(sqrt|\u221A)(.*)/), uc) && (uc = _oc(uc[2], {
                inlineShortcuts: wc,
                noWrap: !0
            }), pc = '\\sqrt{' + (null !== (sc = uc.match) && void 0 !== sc ? sc : '\\placeholder{}') + '}', pc += _oc(uc.rest, qc), vc = !0), !vc && (uc = pc.match(/^(\\cbrt|\u221B)(.*)/), uc) && (uc = _oc(uc[2], {
                inlineShortcuts: wc,
                noWrap: !0
            }), pc = '\\sqrt[3]{' + (null !== (tc = uc.match) && void 0 !== tc ? tc : '\\placeholder{}') + '}', pc += _oc(uc.rest, qc), vc = !0), vc || (uc = pc.match(/^abs(.*)/), uc && (uc = _oc(uc[1], {
                inlineShortcuts: wc,
                noWrap: !0
            }), pc = '\\left|' + uc.match + '\\right|', pc += _oc(uc.rest, qc), vc = !0)), vc || (uc = pc.match(/^["\u201d\u201c](.*?)["\u201d\u201c](.*)/), uc && (pc = '\\text{' + uc[1] + '}', pc += _oc(uc[2], qc), vc = !0)), vc || (uc = pc.match(/^([^a-zA-Z\(\{\[\_\^\\\s"]+)(.*)/), uc && (pc = _oc(uc[1], wc), pc += _oc(uc[2], qc), vc = !0)), !vc && /^([fgh])[^a-zA-Z]/.test(pc) && (uc = _oc(pc.slice(1), {
                inlineShortcuts: wc,
                noWrap: !0
            }), pc = '(' === pc[1] ? pc[0] + '\\left(' + uc.match + '\\right)' : pc[0] + uc.match, pc += _oc(uc.rest, qc), vc = !0), vc || (uc = pc.match(/^([a-zA-Z]+)(.*)/), uc && (pc = _oc(uc[1], wc), pc += _oc(uc[2], qc), vc = !0)), !vc)
            if (uc = _oc(pc, {
                    inlineShortcuts: wc,
                    noWrap: !0
                }), uc.match && '/' === uc.rest[0]) {
                const xc = _oc(uc.rest.slice(1), {
                    inlineShortcuts: wc,
                    noWrap: !0
                });
                xc.match && (pc = '\\frac{' + uc.match + '}{' + xc.match + '}' + _oc(xc.rest, qc)), vc = !0;
            } else
                uc.match && (pc = pc.startsWith('(') ? '\\left(' + uc.match + '\\right)' + _oc(uc.rest, qc) : uc.match + _oc(uc.rest, qc), vc = !0);
        return vc || (uc = pc.match(/^(\s+)(.*)$/), uc && (pc = ' ' + _oc(uc[2], qc), vc = !0)), pc;
    }

    function _oc(pc, qc) {
        let rc = '',
            sc = pc = pc.trim(),
            tc = pc.charAt(0),
            uc = {
                '(': ')',
                '{': '}',
                '[': ']'
            } [tc];
        if (uc) {
            let vc = 1,
                wc = 1;
            for (; wc < pc.length && vc > 0;)
                pc[wc] === tc && vc++, pc[wc] === uc && vc--, wc++;
            0 === vc ? (qc.noWrap && '(' === tc ? rc = za(pc.substring(1, wc - 1), qc) : ('{' === tc && '}' === uc && (tc = '\\{', uc = '\\}'), rc = '\\left' + tc + za(pc.substring(1, wc - 1), qc) + '\\right' + uc), sc = pc.slice(Math.max(0, wc))) : (rc = pc.substring(1, wc), sc = '');
        } else {
            let vc = pc.match(/^([a-zA-Z]+)/);
            if (vc) {
                let wc = Aa(null, pc, qc.inlineShortcuts);
                if (wc)
                    return wc = wc.replace('_{#?}', ''), wc = wc.replace('^{#?}', ''), {
                        match: wc,
                        rest: pc.slice(wc.length)
                    };
            }
            if (vc = pc.match(/^([a-zA-Z])/), vc)
                return {
                    match: vc[1],
                    rest: pc.slice(1)
                };
            if (vc = pc.match(/^(-)?\d+(\.\d*)?/), vc)
                return {
                    match: vc[0],
                    rest: pc.slice(vc[0].length)
                };
            /^\\(left|right)/.test(pc) || (vc = pc.match(/^(\\[a-zA-Z]+)/), vc && (sc = pc.slice(vc[1].length), rc = vc[1]));
        }
        return {
            match: rc,
            rest: sc
        };
    }

    function _oc(pc, qc) {
        let rc = Aa(null, pc, qc);
        return rc ? (rc = rc.replace('_{#?}', ''), rc = rc.replace('^{#?}', ''), rc += ' ') : rc = pc, rc;
    }
    const oc = [
        [
            '\\[',
            '\\]'
        ],
        [
            '\\(',
            '\\)'
        ],
        [
            '$$',
            '$$'
        ],
        [
            '$',
            '$'
        ],
        [
            '\\begin{math}',
            '\\end{math}'
        ],
        [
            '\\begin{displaymath}',
            '\\end{displaymath}'
        ],
        [
            '\\begin{equation}',
            '\\end{equation}'
        ],
        [
            '\\begin{equation*}',
            '\\end{equation*}'
        ]
    ];

    function _pc(qc) {
        const rc = qc.trim();
        for (const sc of oc)
            if (rc.startsWith(sc[0]) && rc.endsWith(sc[1]))
                return [
                    !0,
                    rc.substring(sc[0].length, rc.length - sc[1].length)
                ];
        return [
            !1,
            sc
        ];
    }
    const pc = (tb, ub, b) => (oc.some(tb => ub.startsWith(tb[0]) && ub.endsWith(tb[1])) || (ub = `$$ ${ ub } $$`), ub);
    class qc {
        static onPaste(rc, sc, tc) {
            var uc;
            const vc = new ClipboardEvent('paste', {
                clipboardData: tc.clipboardData,
                cancelable: !0
            });
            return !!(null === (uc = sc.host) || void 0 === uc ? void 0 : uc.dispatchEvent(vc)) && qc._registry[rc].onPaste(sc, tc);
        }
        static onCopy(rc, sc) {
            if (!sc.clipboardData)
                return;
            const tc = rc.model,
                uc = tc.selectionIsCollapsed ? [
                    0,
                    tc.lastOffset
                ] : Ca(tc.selection);
            let vc = tc.getAtoms(uc);
            if (vc.every(rc => 'text' === rc.mode || !rc.mode))
                sc.clipboardData.setData('text/plain', vc.filter(rc => rc instanceof Kb).map(rc => rc.value).join(''));
            else if (vc.every(rc => 'latex' === rc.mode))
                sc.clipboardData.setData('text/plain', tc.getAtoms(uc, {
                    includeChildren: !0
                }).map(rc => {
                    var wc;
                    return null !== (wc = rc.value) && void 0 !== wc ? wc : '';
                }).join(''));
            else {
                let wc;
                wc = 1 === vc.length && void 0 !== vc[0].verbatimLatex ? vc[0].verbatimLatex : tc.getValue(uc, 'latex-expanded'), sc.clipboardData.setData('application/x-latex', wc);
                try {
                    sc.clipboardData.setData('text/plain', rc.options.onExport(rc, wc, uc));
                } catch {}
                1 !== vc.length || 'root' !== vc[0].type && 'group' !== vc[0].type || (vc = vc[0].body.filter(rc => 'first' !== rc.type));
                try {
                    sc.clipboardData.setData('application/json+mathlive', JSON.stringify(vc.map(rc => rc.toJson())));
                } catch {}
                const xc = rc.computeEngine;
                if (xc)
                    try {
                        xc.jsonSerializationOptions = {
                            metadata: ['latex']
                        };
                        const yc = xc.parse(wc),
                            zc = JSON.stringify(yc.json);
                        zc && sc.clipboardData.setData('application/json', zc);
                    } catch {}
            }
            sc.preventDefault();
        }
        static insert(rc, sc, tc, uc = {}) {
            return qc._registry[rc].insert(sc, tc, uc);
        }
        onPaste(rc, sc) {
            return !1;
        }
        insert(rc, sc, tc) {
            return !1;
        }
        constructor(rc) {
            qc._registry[rc] = this;
        }
    }
    qc._registry = {};
    const rc = {
        '\\ne': '<mo>&ne;</mo>',
        '\\neq': '<mo>&neq;</mo>',
        '\\pm': '&#177;',
        '\\times': '&#215;',
        '\\colon': ':',
        '\\vert': '|',
        '\\Vert': '\u2225',
        '\\mid': '\u2223',
        '\\lbrace': '{',
        '\\rbrace': '}',
        '\\lparen': '(',
        '\\rparen': ')',
        '\\langle': '\u27E8',
        '\\rangle': '\u27E9',
        '\\lfloor': '\u230A',
        '\\rfloor': '\u230B',
        '\\lceil': '\u2308',
        '\\rceil': '\u2309',
        '\\vec': '&#x20d7;',
        '\\acute': '&#x00b4;',
        '\\grave': '&#x0060;',
        '\\dot': '&#x02d9;',
        '\\ddot': '&#x00a8;',
        '\\tilde': '&#x007e;',
        '\\bar': '&#x00af;',
        '\\breve': '&#x02d8;',
        '\\check': '&#x02c7;',
        '\\hat': '&#x005e;'
    };

    function sc(tc) {
        return tc.replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function sc(tc, uc) {
        return tc && uc.generateID ? ` extid="${ tc }"` : '';
    }

    function sc(tc, uc, vc) {
        let wc = !1;
        uc = null != uc ? uc : tc.atoms.length;
        let xc = '',
            yc = '';
        const zc = tc.atoms[tc.index];
        return tc.index < uc && ('mord' === zc.type || 'macro' === zc.type) && !zc.isDigit() && (yc = _sc(zc, vc), tc.index += 1), yc.length > 0 && (wc = !0, xc = yc, 'mi' !== tc.lastType && 'mn' !== tc.lastType && 'mtext' !== tc.lastType && 'fence' !== tc.lastType || /^<mo>(.*)<\/mo>$/.test(xc) || (xc = `<mo>&#8290;</mo>${ xc }`), yc.endsWith('>f</mi>') || yc.endsWith('>g</mi>') ? (xc += '<mo>&#x2061;</mo>', tc.lastType = 'applyfunction') : tc.lastType = /^<mo>(.*)<\/mo>$/.test(xc) ? 'mo' : 'mi', _sc(yc, tc, vc) || (tc.mathML += xc)), wc;
    }

    function sc(tc) {
        return tc.index < tc.atoms.length && tc.atoms[tc.index].superscript && 'msubsup' === tc.atoms[tc.index].type;
    }

    function _sc(tc, uc, vc) {
        let wc = uc.atoms[uc.index - 1];
        if (!wc)
            return !1;
        if (wc.superscript || wc.subscript || (Ia(uc) || function(xc) {
                return xc.index < xc.atoms.length && xc.atoms[xc.index].subscript && 'msubsup' === xc.atoms[xc.index].type;
            }(uc)) && (wc = uc.atoms[uc.index], uc.index += 1), !wc)
            return !1;
        const xc = _sc(wc.superscript, vc),
            yc = _sc(wc.subscript, vc);
        if (!xc && !yc)
            return !1;
        let zc = '';
        return xc && yc ? zc = `<msubsup>${ tc }${ yc }${ xc }</msubsup>` : xc ? zc = `<msup>${ tc }${ xc }</msup>` : yc && (zc = `<msub>${ tc }${ yc }</msub>`), uc.mathML += zc, uc.lastType = '', !0;
    }

    function sc(tc, uc, vc) {
        uc = null != uc ? uc : tc.atoms.length;
        const wc = tc.index;
        let xc = '';
        for (; tc.index < uc && 'text' === tc.atoms[tc.index].mode;)
            xc += tc.atoms[tc.index].value ? tc.atoms[tc.index].value : ' ', tc.index += 1;
        return xc.length > 0 && (tc.mathML += `<mtext ${ Fa(tc.atoms[wc].id, vc) }\n      >${ xc }</mtext>`, tc.lastType = 'mtext', !0);
    }

    function sc(tc, uc, vc) {
        uc = null != uc ? uc : tc.atoms.length;
        const wc = tc.index;
        let xc = '',
            yc = function(zc) {
                let Ac = -1,
                    Bc = zc.index,
                    Cc = !1,
                    Dc = !1;
                for (; Bc < zc.atoms.length && !Cc && !Dc;) {
                    const Ec = zc.atoms[Bc];
                    Cc = !Ec.isDigit(), Dc = !Cc && void 0 !== Ec.superscript, Bc++;
                }
                return Dc && (Ac = Bc - 1), Ac;
            }(tc);
        for (yc >= 0 && yc < uc && (uc = yc); tc.index < uc && tc.atoms[tc.index].isDigit();)
            xc += tc.atoms[tc.index].asDigit(), tc.index += 1;
        return !(xc.length <= 0 || (xc = '<mn' + Fa(tc.atoms[wc].id, vc) + '>' + xc + '</mn>', yc < 0 && Ia(tc) && (yc = tc.index, tc.index += 1), Va(xc, tc, vc) || (tc.mathML += xc, tc.lastType = 'mn'), 0));
    }

    function sc(tc, uc, vc) {
        let wc = !1;
        uc = null != uc ? uc : tc.atoms.length;
        let xc = '',
            yc = '';
        if (tc.index < uc && 'mopen' === tc.atoms[tc.index].type) {
            let zc = !1,
                Ac = 0;
            const Bc = tc.index;
            let Cc = -1,
                Dc = Bc + 1;
            for (; Dc < uc && !zc;)
                'mopen' === tc.atoms[Dc].type ? Ac += 1 : 'mclose' === tc.atoms[Dc].type && (Ac -= 1), -1 === Ac && (zc = !0, Cc = Dc), Dc += 1;
            zc && (xc = '<mrow>', xc += _sc(tc.atoms[Bc], vc), xc += _sc(tc.atoms, vc, Bc + 1, Cc), xc += _sc(tc.atoms[Cc], vc), xc += '</mrow>', 'mi' !== tc.lastType && 'mn' !== tc.lastType && 'mfrac' !== tc.lastType && 'fence' !== tc.lastType || (xc = `<mo>&#8290;</mo>${ xc }`), tc.index = Cc + 1, Va(xc, tc, vc) && (wc = !0, tc.lastType = '', xc = ''), yc = 'fence');
        }
        return xc.length > 0 && (wc = !0, tc.mathML += xc, tc.lastType = yc), wc;
    }

    function sc(tc, uc, vc) {
        let wc = !1;
        uc = null != uc ? uc : tc.atoms.length;
        let xc = '',
            yc = '';
        const zc = tc.atoms[tc.index];
        if (tc.index < uc && ('mbin' === zc.type || 'mrel' === zc.type))
            xc += _sc(tc.atoms[tc.index], vc), tc.index += 1, yc = 'mo';
        else if (tc.index < uc && 'mop' === zc.type) {
            if ('over-under' === zc.subsupPlacement && (zc.superscript || zc.subscript)) {
                const Ac = _sc(zc, vc);
                zc.superscript && zc.subscript ? (xc += '<munderover>' + Ac, xc += _sc(zc.subscript, vc), xc += _sc(zc.superscript, vc), xc += '</munderover>') : zc.superscript ? (xc += '<mover>' + Ac, xc += _sc(zc.superscript, vc), xc += '</mover>') : zc.subscript && (xc += '<munder>' + Ac, xc += _sc(zc.subscript, vc), xc += '</munder>'), yc = 'mo';
            } else {
                const Ac = tc.atoms[tc.index],
                    Bc = '\\operatorname' === Ac.value,
                    Cc = Bc ? '<mi class="MathML-Unit"' + Fa(Ac.id, vc) + '>' + _sc(Ac.value) + '</mi>' : _sc(Ac, vc);
                xc += Cc, Bc || /^<mo>(.*)<\/mo>$/.test(Cc) ? yc = Bc ? 'mi' : 'mo' : (xc += '<mo>&#x2061;</mo>', yc = 'applyfunction');
            }
            'mi' !== tc.lastType && 'mn' !== tc.lastType || /^<mo>(.*)<\/mo>$/.test(xc) || (xc = `<mo>&#8290;</mo>${ xc }`), tc.index += 1;
        }
        return Va(xc, tc, vc) || xc.length > 0 && (wc = !0, tc.mathML += xc, tc.lastType = yc), wc;
    }

    function _sc(tc, uc, vc, wc) {
        const xc = {
            atoms: [],
            index: null != vc ? vc : 0,
            mathML: '',
            lastType: ''
        };
        if ('number' == typeof tc || 'boolean' == typeof tc)
            xc.mathML = tc.toString();
        else if ('string' == typeof tc)
            xc.mathML = tc;
        else if (tc instanceof pb)
            xc.mathML = _sc(tc, uc);
        else if (Array.isArray(tc)) {
            xc.atoms = tc;
            let yc = 0;
            for (wc = wc || (tc ? tc.length : 0); xc.index < wc;)
                if (ja(xc, wc, uc) || Ha(xc, wc, uc) || Ra(xc, wc, uc) || Ja(xc, wc, uc) || Wa(xc, wc, uc))
                    yc += 1;
                else if (xc.index < wc) {
                let zc = _sc(xc.atoms[xc.index], uc);
                'mn' === xc.lastType && zc.length > 0 && 'genfrac' === xc.atoms[xc.index].type && (zc = '<mo>&#x2064;</mo>' + zc), 'genfrac' === xc.atoms[xc.index].type ? xc.lastType = 'mfrac' : xc.lastType = '', xc.index += 1, Va(zc, xc, uc) ? yc += 2 : zc.length > 0 && (xc.mathML += zc, yc += 1);
            }
            yc > 1 && (xc.mathML = '<mrow>' + xc.mathML + '</mrow>');
        }
        return xc.mathML;
    }

    function _sc(tc, uc) {
        let vc = '';
        const wc = _sc(tc.value);
        return wc && (vc = '<mo' + Fa(tc.id, uc) + '>' + wc + '</mo>'), vc;
    }

    function _sc(tc) {
        if (!tc)
            return '';
        if ('string' == typeof tc)
            return Pa(tc);
        if (!Array.isArray(tc) && 'string' == typeof tc.body)
            return Pa(tc.body);
        let uc = '';
        for (const vc of tc)
            'string' == typeof vc.value && (uc += vc.value);
        return Pa(uc);
    }

    function _sc(tc, uc) {
        var vc, wc, xc, yc, zc, Ac, Bc, Cc, Dc, Ec, Fc, Gc, Hc, Ic, Jc, Kc, Lc, _Mc, Nc, Oc, Pc, Qc, Rc, Sc, Tc;
        const Uc = {
                widehat: '^',
                widecheck: 'ˇ',
                widetilde: '~',
                utilde: '~',
                overleftarrow: '\u2190',
                underleftarrow: '\u2190',
                xleftarrow: '\u2190',
                overrightarrow: '\u2192',
                underrightarrow: '\u2192',
                xrightarrow: '\u2192',
                underbrace: '\u23DF',
                overbrace: '\u23DE',
                overgroup: '\u23E0',
                undergroup: '\u23E1',
                overleftrightarrow: '\u2194',
                underleftrightarrow: '\u2194',
                xleftrightarrow: '\u2194',
                Overrightarrow: '\u21D2',
                xRightarrow: '\u21D2',
                overleftharpoon: '\u21BC',
                xleftharpoonup: '\u21BC',
                overrightharpoon: '\u21C0',
                xrightharpoonup: '\u21C0',
                xLeftarrow: '\u21D0',
                xLeftrightarrow: '\u21D4',
                xhookleftarrow: '\u21A9',
                xhookrightarrow: '\u21AA',
                xmapsto: '\u21A6',
                xrightharpoondown: '\u21C1',
                xleftharpoondown: '\u21BD',
                xrightleftharpoons: '\u21CC',
                xleftrightharpoons: '\u21CB',
                xtwoheadleftarrow: '\u219E',
                xtwoheadrightarrow: '\u21A0',
                xlongequal: '=',
                xtofrom: '\u21C4',
                xrightleftarrows: '\u21C4',
                xrightequilibrium: '\u21CC',
                xleftequilibrium: '\u21CB'
            },
            Vc = {
                '\\exponentialE': '&#x02147;',
                '\\imaginaryI': '&#x2148;',
                '\\differentialD': '&#x2146;',
                '\\capitalDifferentialD': '&#x2145;',
                '\\alpha': '&#x03b1;',
                '\\pi': '&#x03c0;',
                '\\infty': '&#x221e;',
                '\\forall': '&#x2200;',
                '\\nexists': '&#x2204;',
                '\\exists': '&#x2203;',
                '\\hbar': 'ℏ',
                '\\cdotp': '\u22C5',
                '\\ldots': '\u2026',
                '\\cdots': '\u22EF',
                '\\ddots': '\u22F1',
                '\\vdots': '\u22EE',
                '\\ldotp': '.'
            },
            Wc = {
                '\\!': -3 / 18,
                '\\ ': 6 / 18,
                '\\,': 3 / 18,
                '\\:': 4 / 18,
                '\\;': 5 / 18,
                '\\enspace': 0.5,
                '\\quad': 1,
                '\\qquad': 2,
                '\\enskip': 0.5
            };
        let Xc, Yc, _Zc, _$c, _ad, _bd, cd = '',
            dd = '',
            _ed = null !== (wc = {
                cal: 'script',
                frak: 'fraktur',
                bb: 'double-struck',
                scr: 'script',
                cmtt: 'monospace',
                cmss: 'sans-serif'
            } [null !== (vc = tc.fontFamily) && void 0 !== vc ? vc : tc.font]) && void 0 !== wc ? wc : '';
        _ed && (_ed = ` mathvariant="${ _ed }"`);
        const {
            command: _fd
        } = tc;
        if ('text' === tc.mode)
            cd = `<mi${ Fa(tc.id, uc) }>${ tc.value }</mi>`;
        else
            switch (tc.type) {
                case 'first':
                case 'line':
                case 'overlap':
                case 'msubsup':
                case 'phantom':
                case 'composition':
                case 'rule':
                case 'chem':
                case 'error':
                    break;
                case 'group':
                case 'root':
                    cd = rc[tc.command] ? rc[tc.command] : Ua(tc.body, uc);
                    break;
                case 'array':
                    if ((tc.leftDelim && '.' !== tc.leftDelim || tc.rightDelim && '.' !== tc.rightDelim) && (cd += '<mrow>', tc.leftDelim && '.' !== tc.leftDelim && (cd += '<mo>' + (rc[tc.leftDelim] || tc.leftDelim) + '</mo>')), cd += '<mtable', tc.colFormat) {
                        for (cd += ' columnalign="', _Zc = 0; _Zc < tc.colFormat.length; _Zc++)
                            tc.colFormat[_Zc].align && (cd += {
                                l: 'left',
                                c: 'center',
                                r: 'right'
                            } [tc.colFormat[_Zc].align] + ' ');
                        cd += '"';
                    }
                    for (cd += '>', Yc = 0; Yc < tc.array.length; Yc++) {
                        for (cd += '<mtr>', Xc = 0; Xc < tc.array[Yc].length; Xc++)
                            cd += '<mtd>' + Ua(tc.array[Yc][Xc], uc) + '</mtd>';
                        cd += '</mtr>';
                    }
                    cd += '</mtable>', (tc.leftDelim && '.' !== tc.leftDelim || tc.rightDelim && '.' !== tc.rightDelim) && (tc.rightDelim && '.' !== tc.rightDelim && (cd += '<mo>' + (rc[tc.leftDelim] || tc.rightDelim) + '</mo>'), cd += '</mrow>');
                    break;
                case 'genfrac':
                    (tc.leftDelim || tc.rightDelim) && (cd += '<mrow>'), tc.leftDelim && '.' !== tc.leftDelim && (cd += '<mo' + Fa(tc.id, uc) + '>' + (rc[tc.leftDelim] || tc.leftDelim) + '</mo>'), tc.hasBarLine ? (cd += '<mfrac>', cd += Ua(tc.above, uc) || '<mi>&nbsp;</mi>', cd += Ua(tc.below, uc) || '<mi>&nbsp;</mi>', cd += '</mfrac>') : (cd += '<mtable' + Fa(tc.id, uc) + '>', cd += '<mtr>' + Ua(tc.above, uc) + '</mtr>', cd += '<mtr>' + Ua(tc.below, uc) + '</mtr>', cd += '</mtable>'), tc.rightDelim && '.' !== tc.rightDelim && (cd += '<mo' + Fa(tc.id, uc) + '>' + (rc[tc.rightDelim] || tc.rightDelim) + '</mo>'), (tc.leftDelim || tc.rightDelim) && (cd += '</mrow>');
                    break;
                case 'surd':
                    tc.hasEmptyBranch('above') ? (cd += '<msqrt' + Fa(tc.id, uc) + '>', cd += Ua(tc.body, uc), cd += '</msqrt>') : (cd += '<mroot' + Fa(tc.id, uc) + '>', cd += Ua(tc.body, uc), cd += Ua(tc.above, uc), cd += '</mroot>');
                    break;
                case 'leftright':
                    cd = '<mrow>', tc.leftDelim && '.' !== tc.leftDelim && (cd += '<mo' + Fa(tc.id, uc) + '>' + (null !== (xc = rc[tc.leftDelim]) && void 0 !== xc ? xc : tc.leftDelim) + '</mo>'), tc.body && (cd += Ua(tc.body, uc)), tc.rightDelim && '.' !== tc.rightDelim && (cd += '<mo' + Fa(tc.id, uc) + '>' + (null !== (yc = rc[tc.rightDelim]) && void 0 !== yc ? yc : tc.rightDelim) + '</mo>'), cd += '</mrow>';
                    break;
                case 'sizeddelim':
                case 'delim':
                    cd += '<mo separator="true"' + Fa(tc.id, uc) + '>' + (rc[tc.delim] || tc.delim) + '</mo>';
                    break;
                case 'accent':
                    cd += '<mover accent="true"' + Fa(tc.id, uc) + '>', cd += Ua(tc.body, uc), cd += '<mo>' + (rc[_fd] || tc.accent) + '</mo>', cd += '</mover>';
                    break;
                case 'overunder':
                    _ad = tc.above, _$c = tc.below, (tc.svgAbove || _ad) && (tc.svgBelow || _$c) ? _bd = tc.body : _ad && _ad.length > 0 ? (_bd = tc.body, (null === (Ac = null === (zc = tc.body) || void 0 === zc ? void 0 : zc[0]) || void 0 === Ac ? void 0 : Ac.below) ? (_$c = tc.body[0].below, _bd = tc.body[0].body) : 'first' === (null === (Cc = null === (Bc = tc.body) || void 0 === Bc ? void 0 : Bc[0]) || void 0 === Cc ? void 0 : Cc.type) && (null === (Ec = null === (Dc = tc.body) || void 0 === Dc ? void 0 : Dc[1]) || void 0 === Ec ? void 0 : Ec.below) && (_$c = tc.body[1].below, _bd = tc.body[1].body)) : _$c && _$c.length > 0 && (_bd = tc.body, (null === (Gc = null === (Fc = tc.body) || void 0 === Fc ? void 0 : Fc[0]) || void 0 === Gc ? void 0 : Gc.above) ? (_ad = tc.body[0].above, _bd = tc.body[0].body) : 'first' === (null === (Ic = null === (Hc = tc.body) || void 0 === Hc ? void 0 : Hc[0]) || void 0 === Ic ? void 0 : Ic.type) && (null === (Kc = null === (Jc = tc.body) || void 0 === Jc ? void 0 : Jc[1]) || void 0 === Kc ? void 0 : Kc.above) && (_ad = tc.body[1].overscript, _bd = tc.body[1].body)), (tc.svgAbove || _ad) && (tc.svgBelow || _$c) ? (cd += `<munderover ${ _ed } ${ Fa(tc.id, uc) }>`, cd += null !== (Lc = Uc[tc.svgBody]) && void 0 !== Lc ? Lc : Ua(_bd, uc), cd += null !== (_Mc = Uc[tc.svgBelow]) && void 0 !== _Mc ? _Mc : Ua(_$c, uc), cd += null !== (Nc = Uc[tc.svgAbove]) && void 0 !== Nc ? Nc : Ua(_ad, uc), cd += '</munderover>') : tc.svgAbove || _ad ? (cd += `<mover ${ _ed } ${ Fa(tc.id, uc) }>` + (null !== (Oc = Uc[tc.svgBody]) && void 0 !== Oc ? Oc : Ua(_bd, uc)), cd += null !== (Pc = Uc[tc.svgAbove]) && void 0 !== Pc ? Pc : Ua(_ad, uc), cd += '</mover>') : (tc.svgBelow || _$c) && (cd += `<munder ${ _ed } ${ Fa(tc.id, uc) }>` + (null !== (Qc = Uc[tc.svgBody]) && void 0 !== Qc ? Qc : Ua(_bd, uc)), cd += null !== (Rc = Uc[tc.svgBelow]) && void 0 !== Rc ? Rc : Ua(_$c, uc), cd += '</munder>');
                    break;
                case 'placeholder':
                case 'mord': {
                    cd = Vc[_fd] || _fd || ('string' == typeof tc.value ? tc.value : '');
                    const gd = _fd ? _fd.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null;
                    gd ? cd = '&#x' + gd[1] + ';' : cd.length > 0 && cd.startsWith('\\') && (cd = 'string' == typeof tc.value && tc.value.charCodeAt(0) > 255 ? '&#x' + ('000000' + tc.value.charCodeAt(0).toString(16)).slice(-4) + ';' : 'string' == typeof tc.value ? tc.value.charAt(0) : '');
                    const hd = /\d/.test(cd) ? 'mn' : 'mi';
                    cd = `<${ hd }${ _ed }${ Fa(tc.id, uc) }>${ Pa(cd) }</${ hd }>`;
                    break;
                }
                case 'mbin':
                case 'mrel':
                case 'minner':
                    cd = _fd && Vc[_fd] ? '<mi' + Fa(tc.id, uc) + '>' + Vc[_fd] + '</mi>' : _fd && rc[_fd] ? '<mo' + Fa(tc.id, uc) + '>' + rc[_fd] + '</mo>' : Xa(tc, uc);
                    break;
                case 'mpunct':
                    cd = '<mo separator="true"' + Fa(tc.id, uc) + '>' + (null !== (Sc = rc[_fd]) && void 0 !== Sc ? Sc : _fd) + '</mo>';
                    break;
                case 'mop':
                    '\u200B' !== tc.body && (cd = '<mo' + Fa(tc.id, uc) + '>', cd += '\\operatorname' === _fd ? tc.body : _fd || tc.body, cd += '</mo>');
                    break;
                case 'box':
                    cd = '<menclose notation="box"', tc.backgroundcolor && (cd += ' mathbackground="' + tc.backgroundcolor + '"'), cd += Fa(tc.id, uc) + '>' + Ua(tc.body, uc) + '</menclose>';
                    break;
                case 'spacing':
                    cd += '<mspace width="' + (null !== (Tc = Wc[_fd]) && void 0 !== Tc ? Tc : 0) + 'em"/>';
                    break;
                case 'enclose':
                    cd = '<menclose notation="';
                    for (const gd in tc.notation)
                        Object.prototype.hasOwnProperty.call(tc.notation, gd) && tc.notation[gd] && (cd += dd + gd, dd = ' ');
                    cd += Fa(tc.id, gd) + '">' + Ua(tc.body, gd) + '</menclose>';
                    break;
                case 'space':
                    cd += '&nbsp;';
                    break;
                case 'mopen':
                case 'mclose':
                    cd += Xa(tc, gd);
                    break;
                case 'macro': {
                    const hd = tc.command + Ga(tc.macroArgs);
                    hd && (cd += `<mo ${ Fa(tc.id, gd) }>${ hd }</mo>`);
                }
                break;
                case 'latexgroup':
                case 'tooltip':
                    cd += Ua(tc.body, gd);
                    break;
                case 'latex':
                    cd += '<mtext' + Fa(tc.id, gd) + '>' + tc.value + '</mtext>';
            }
        return cd;
    }
    const sc = {
        '\\alpha': 'alpha ',
        '\\mu': 'mew ',
        '\\sigma': 'sigma ',
        '\\pi': 'pie ',
        '\\imaginaryI': 'eye ',
        '\\sum': 'Summation ',
        '\\prod': 'Product ',
        a: '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
        A: 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
        '+': 'plus ',
        '-': 'minus ',
        ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
        ',': '<break time="150ms"/> comma  <break time="150ms"/>',
        '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
        '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
        ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
        '=': 'equals ',
        '<': 'is less than ',
        '\\lt': 'is less than ',
        '<=': 'is less than or equal to ',
        '\\le': 'is less than or equal to ',
        '\\gt': 'is greater than ',
        '>': 'is greater than ',
        '\\ge': 'is greater than or equal to ',
        '\\geq': 'is greater than or equal to ',
        '\\leq': 'is less than or equal to ',
        '!': 'factorial ',
        '\\sin': 'sine ',
        '\\cos': 'cosine ',
        '\u200B': '',
        '\u2212': 'minus ',
        ':': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\hbar': 'etch bar ',
        '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\land': 'and ',
        '\\lor': 'or ',
        '\\neg': 'not ',
        '\\div': 'divided by ',
        '\\forall': 'for all ',
        '\\exists': 'there exists ',
        '\\nexists': 'there does not exists ',
        '\\in': 'element of ',
        '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
        '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
        '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
        '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
        '\\infty': 'infinity ',
        '\\nabla': 'nabla ',
        '\\partial': 'partial derivative of ',
        '\\cdot': 'times ',
        '\\cdots': 'dot dot dot ',
        '\\Rightarrow': 'implies ',
        '\\lparen': '<break time="150ms"/>open paren<break time="150ms"/>',
        '\\rparen': '<break time="150ms"/>close paren<break time="150ms"/>',
        '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
        '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
        '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
        '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
        '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
        '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
        '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
        '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
        '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
        '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
        '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
        '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
        mm: 'millimeters',
        cm: 'centimeters',
        km: 'kilometers',
        kg: 'kilograms'
    };

    function tc(uc) {
        let vc = 0;
        if (_Cc(uc))
            for (const wc of uc)
                'first' !== wc.type && (vc += 1);
        return 1 === vc;
    }

    function tc(uc) {
        let vc = '';
        if (_Cc(uc))
            for (const wc of uc)
                'first' !== wc.type && 'string' == typeof wc.value && (vc += wc.value);
        return vc;
    }

    function tc(uc, vc, wc) {
        var xc, yc, zc, Ac;

        function Bc(Cc) {
            return '<emphasis>' + Cc + '</emphasis>';
        }
        if (!vc)
            return '';
        let Bc = '';
        if (_Cc(vc)) {
            let _Cc = !1,
                Dc = !1;
            for (let Ec = 0; Ec < vc.length; Ec++)
                'text' !== vc[Ec].mode && (Dc = !1), Ec < vc.length - 2 && 'mopen' === vc[Ec].type && 'mclose' === vc[Ec + 2].type && 'mord' === vc[Ec + 1].type ? (Bc += ' of ', Bc += _Gc(tc(uc, vc[Ec + 1], wc)), Ec += 2) : 'text' === vc[Ec].mode ? Dc ? Bc += null !== (xc = vc[Ec].value) && void 0 !== xc ? xc : ' ' : (Dc = !0, Bc += tc('text', vc[Ec], wc)) : vc[Ec].isDigit() ? _Cc ? Bc += vc[Ec].asDigit() : (_Cc = !0, Bc += tc(uc, vc[Ec], wc)) : (_Cc = !1, Bc += tc(uc, vc[Ec], wc));
        } else if ('text' === vc.mode)
            vc.id && 'math' === uc && (Bc += '<mark name="' + vc.id.toString() + '"/>'), Bc += vc.value;
        else {
            vc.id && 'math' === uc && (Bc += '<mark name="' + vc.id.toString() + '"/>');
            let Cc = '',
                Dc = '',
                Ec = '',
                Fc = !1;
            switch (vc.type) {
                case 'group':
                case 'root':
                    Bc += tc('math', vc.body, wc);
                    break;
                case 'genfrac':
                    if (Cc = tc('math', vc.above, wc), Dc = tc('math', vc.below, wc), Qa(vc.above) && Qa(vc.below)) {
                        const Gc = {
                            '1/2': ' half ',
                            '1/3': ' one third ',
                            '2/3': ' two third',
                            '1/4': ' one quarter ',
                            '3/4': ' three quarter ',
                            '1/5': ' one fifth ',
                            '2/5': ' two fifths ',
                            '3/5': ' three fifths ',
                            '4/5': ' four fifths ',
                            '1/6': ' one sixth ',
                            '5/6': ' five sixths ',
                            '1/8': ' one eight ',
                            '3/8': ' three eights ',
                            '5/8': ' five eights ',
                            '7/8': ' seven eights ',
                            '1/9': ' one ninth ',
                            '2/9': ' two ninths ',
                            '4/9': ' four ninths ',
                            '5/9': ' five ninths ',
                            '7/9': ' seven ninths ',
                            '8/9': ' eight ninths '
                        } [ei(vc.above) + '/' + ei(vc.below)];
                        Gc ? Bc = Gc : Bc += Cc + ' over ' + Dc;
                    } else
                        Bc += ' the fraction <break time="150ms"/>' + Cc + ', over <break time="150ms"/>' + Dc + '.<break time="150ms"/> End fraction.<break time="150ms"/>';
                    break;
                case 'surd':
                    if (Ec = tc('math', vc.body, wc), vc.hasEmptyBranch('above'))
                        Bc += Qa(vc.body) ? ' the square root of ' + Ec + ' , ' : ' the square root of <break time="200ms"/>' + Ec + '. <break time="200ms"/> End square root';
                    else {
                        let Gc = tc('math', vc.above, wc);
                        Gc = Gc.trim();
                        const Hc = Gc.replace(/<mark([^/]*)\/>/g, '');
                        Bc += '3' === Hc ? ' the cube root of <break time="200ms"/>' + Ec + '. <break time="200ms"/> End cube root' : 'n' === Hc ? ' the nth root of <break time="200ms"/>' + Ec + '. <break time="200ms"/> End root' : ' the root with index: <break time="200ms"/>' + Gc + ', of <break time="200ms"/>' + Ec + '. <break time="200ms"/> End root';
                    }
                    break;
                case 'leftright': {
                    const Gc = vc;
                    Bc += null !== (yc = Gc.leftDelim ? sc[Gc.leftDelim] : void 0) && void 0 !== yc ? yc : Gc.leftDelim, Bc += tc('math', vc.body, wc), Bc += null !== (zc = Gc.rightDelim ? sc[Gc.rightDelim] : void 0) && void 0 !== zc ? zc : Gc.rightDelim;
                }
                break;
                case 'rule':
                case 'overunder':
                case 'overlap':
                    break;
                case 'placeholder':
                    Bc += 'placeholder ';
                    break;
                case 'delim':
                case 'sizeddelim':
                case 'mord':
                case 'minner':
                case 'mbin':
                case 'mrel':
                case 'mpunct':
                case 'mopen':
                case 'mclose': {
                    const {
                        command: Gc
                    } = vc;
                    if ('\\mathbin' === Gc || '\\mathrel' === Gc || '\\mathopen' === Gc || '\\mathclose' === Gc || '\\mathpunct' === Gc || '\\mathord' === Gc || '\\mathinner' === Gc) {
                        Bc = tc(uc, vc.body, wc);
                        break;
                    }
                    let Hc = vc.isDigit() ? vc.asDigit() : vc.value,
                        Ic = vc.command;
                    if ('delim' !== vc.type && 'sizeddelim' !== vc.type || (Ic = vc.value, Hc = Ic), 'text' === uc)
                        Bc += Hc;
                    else {
                        if ('mbin' === vc.type && (Bc += '<break time="150ms"/>'), Hc) {
                            const Jc = sc[Hc] || (Ic ? sc[Ic.trim()] : '');
                            if (Jc)
                                Bc += ' ' + Jc;
                            else {
                                const Kc = Ic ? function(Lc) {
                                    let Mc = '';
                                    return Lc.startsWith('\\') && (Mc = ' ' + Lc.replace('\\', '') + ' '), Mc;
                                }(Ic.trim()) : '';
                                Bc += Kc || (_Dc = Hc, wc.textToSpeechMarkup ? /[a-z]/.test(_Dc) ? ` <say-as interpret-as="character">${ _Dc }</say-as>` : /[A-Z]/.test(_Dc) ? `capital <say-as interpret-as="character">${ _Dc.toLowerCase() }</say-as>` : _Dc : /[a-z]/.test(_Dc) ? ' \'' + _Dc.toUpperCase() + '\'' : /[A-Z]/.test(_Dc) ? ' \'capital ' + _Dc.toUpperCase() + '\'' : _Dc);
                            }
                        } else
                            Bc += tc('math', vc.body, wc);
                        'mbin' === vc.type && (Bc += '<break time="150ms"/>');
                    }
                    break;
                }
                case 'mop':
                    if ('\u200B' !== vc.value) {
                        const Gc = vc.command;
                        if ('\\sum' === Gc)
                            if (vc.hasEmptyBranch('superscript') || vc.hasEmptyBranch('subscript'))
                                if (vc.hasEmptyBranch('subscript'))
                                    Bc += ' the summation of';
                                else {
                                    let Hc = tc('math', vc.subscript, wc);
                                    Hc = Hc.trim(), Bc += ' the summation from <break time="200ms"/>' + Hc + '<break time="200ms"/> of <break time="150ms"/>', Fc = !0;
                                }
                        else {
                            let Hc = tc('math', vc.superscript, wc);
                            Hc = Hc.trim();
                            let Ic = tc('math', vc.subscript, wc);
                            Ic = Ic.trim(), Bc += ' the summation from <break time="200ms"/>' + Ic + '<break time="200ms"/> to  <break time="200ms"/>' + Hc + '<break time="200ms"/> of <break time="150ms"/>', Fc = !0;
                        } else if ('\\prod' === Gc)
                            if (vc.hasEmptyBranch('superscript') || vc.hasEmptyBranch('subscript'))
                                if (vc.hasEmptyBranch('subscript'))
                                    Bc += ' the product  of ';
                                else {
                                    let Hc = tc('math', vc.subscript, wc);
                                    Hc = Hc.trim(), Bc += ' the product from <break time="200ms"/>' + Hc + '<break time="200ms"/> of <break time="150ms"/>', Fc = !0;
                                }
                        else {
                            let Hc = tc('math', vc.superscript, wc);
                            Hc = Hc.trim();
                            let Ic = tc('math', vc.subscript, wc);
                            Ic = Ic.trim(), Bc += ' the product from <break time="200ms"/>' + Ic + '<break time="200ms"/> to <break time="200ms"/>' + Hc + '<break time="200ms"/> of <break time="150ms"/>', Fc = !0;
                        } else if ('\\int' === Gc)
                            if (vc.hasEmptyBranch('superscript') || vc.hasEmptyBranch('subscript'))
                                Bc += ' the integral of <break time="200ms"/> ';
                            else {
                                let Hc = tc('math', vc.superscript, wc);
                                Hc = Hc.trim();
                                let Ic = tc('math', vc.subscript, wc);
                                Ic = Ic.trim(), Bc += ' the integral from <break time="200ms"/>' + _Gc(Ic) + '<break time="200ms"/> to <break time="200ms"/>' + _Gc(Hc) + ' <break time="200ms"/> of ', Fc = !0;
                            }
                        else
                            'string' == typeof vc.value ? Bc += (null !== (Ac = sc[vc.value]) && void 0 !== Ac ? Ac : vc.command ? sc[vc.command] : void 0) || ' ' + vc.value : vc.command && ('\\mathop' === vc.command ? Bc += tc('math', vc.body, wc) : '\\operatorname' === vc.command ? Bc += (c = vc.body) ? c.map(Gc => Gc.value).join('') : '' : Bc += vc.command.startsWith('\\') ? ' ' + vc.command.slice(1) : ' ' + vc.command);
                    }
                    break;
                case 'enclose':
                    Ec = tc('math', vc.body, wc), Bc += ' crossed out ' + Ec + '. End crossed out.';
            }
            if (!Fc && !vc.hasEmptyBranch('superscript')) {
                let Gc = tc(uc, vc.superscript, wc);
                Gc = Gc.trim();
                const Hc = Gc.replace(/<[^>]*>/g, '');
                if (Qa(vc.superscript)) {
                    if ('math' === uc) {
                        const Ic = function(Jc) {
                            if (_xc(Jc))
                                for (const Kc of Jc)
                                    if ('first' !== Kc.type && Kc.id)
                                        return Kc.id.toString();
                            return '';
                        }(vc.superscript);
                        Ic && (Bc += '<mark name="' + Ic + '"/>');
                    }
                    '\u2032' === Hc ? Bc += ' prime ' : '2' === Hc ? Bc += ' squared ' : '3' === Hc ? Bc += ' cubed ' : Number.isNaN(Number.parseInt(Hc)) ? Bc += ' to the ' + Gc + '; ' : Bc += ' to the <say-as interpret-as="ordinal">' + Hc + '</say-as> power; ';
                } else
                    Number.isNaN(Number.parseInt(Hc)) ? Bc += ' raised to the ' + Gc + '; ' : Bc += ' raised to the <say-as interpret-as="ordinal">' + Hc + '</say-as> power; ';
            }
            if (!Fc && !vc.hasEmptyBranch('subscript')) {
                let Gc = tc('math', vc.subscript, wc);
                Gc = Gc.trim(), Bc += Qa(vc.subscript) ? ' sub ' + Gc : ' subscript ' + Gc + '. End subscript. ';
            }
        }
        var Cc, _Dc;
        return Bc;
    }

    function tc(uc, vc) {
        var wc;
        const _xc = {
            ...vc,
            textToSpeechRulesOptions: {
                ...vc.textToSpeechRulesOptions
            }
        };
        if ('sre' === _xc.textToSpeechRules && 'sre' in globalThis) {
            const yc = Ua(uc, _xc);
            return yc ? (_xc.textToSpeechMarkup && (_xc.textToSpeechRulesOptions = null !== (wc = _xc.textToSpeechRulesOptions) && void 0 !== wc ? wc : {}, _xc.textToSpeechRulesOptions.markup = _xc.textToSpeechMarkup, 'ssml' === _xc.textToSpeechRulesOptions.markup && (_xc.textToSpeechRulesOptions.markup = 'ssml_step'), _xc.textToSpeechRulesOptions.rate = _xc.speechEngineRate), _xc.textToSpeechRulesOptions && globalThis.sre.System.getInstance().setupEngine(_xc.textToSpeechRulesOptions), globalThis.sre.System.getInstance().toSpeech(yc)) : '';
        }
        let yc = ti('math', uc, _xc);
        if ('ssml' === _xc.textToSpeechMarkup) {
            let zc = '';
            _xc.speechEngineRate && (zc = '<prosody rate="' + _xc.speechEngineRate + '">'), yc = '<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US"><amazon:auto-breaths>' + zc + '<p><s>' + yc + '</s></p>' + (zc ? '</prosody>' : '') + '</amazon:auto-breaths></speak>';
        } else
            yc = 'mac' === _xc.textToSpeechMarkup && 'macos' === _Gc() ? yc.replace(/<mark([^/]*)\/>/g, '').replace(/<emphasis>/g, '[[emph+]]').replace(/<\/emphasis>/g, '').replace(/<break time="(\d*)ms"\/>/g, '[[slc $1]]').replace(/<say-as[^>]*>/g, '').replace(/<\/say-as>/g, '') : yc.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
        return yc;
    }

    function tc(uc, vc, wc, xc) {
        const yc = vc.split(' ');
        for (const zc of yc) {
            const Ac = zc.match(/(.*):(.*)/);
            if (Ac) {
                const Bc = null != xc ? xc : {};
                'active' === Ac[2] ? Bc.passive = !1 : Bc[Ac[2]] = !0, uc.addEventListener(Ac[1], wc, Bc);
            } else
                uc.addEventListener(zc, wc, xc);
        }
    }

    function tc(uc, vc, wc, xc) {
        const yc = vc.split(' ');
        for (const zc of yc) {
            const Ac = zc.match(/(.*):(.*)/);
            if (Ac) {
                const Bc = null != xc ? xc : {};
                'active' === Ac[2] ? Bc.passive = !1 : Bc[Ac[2]] = !0, uc.removeEventListener(Ac[1], wc, Bc);
            } else
                uc.removeEventListener(zc, wc, xc);
        }
    }

    function tc(uc) {
        var vc;
        _zc();
        let wc = document.getElementById(uc);
        return wc ? wc.dataset.refcount = Number(Number.parseInt(null !== (vc = wc.getAttribute('data-refcount')) && void 0 !== vc ? vc : '0') + 1).toString() : (wc = document.createElement('div'), wc.setAttribute('aria-hidden', 'true'), wc.dataset.refcount = '1', wc.id = uc, document.body.append(wc)), wc;
    }

    function tc(uc) {
        var vc;
        if (!uc)
            return;
        const wc = Number.parseInt(null !== (vc = uc.getAttribute('data-refcount')) && void 0 !== vc ? vc : '0');
        wc <= 1 ? uc.remove() : uc.dataset.refcount = Number(wc - 1).toString();
    }

    function tc(uc) {
        var vc;
        return (null === (vc = uc.element) || void 0 === vc ? void 0 : vc.mathfield) === uc;
    }

    function tc(uc) {
        const vc = function(wc) {
            var xc, yc;
            return null !== (yc = null !== (xc = wc.querySelector('.ML__caret')) && void 0 !== xc ? xc : wc.querySelector('.ML__text-caret')) && void 0 !== yc ? yc : wc.querySelector('.ML__latex-caret');
        }(uc);
        if (!vc)
            return null;
        const wc = vc.getBoundingClientRect();
        return {
            x: wc.right,
            y: wc.bottom,
            height: wc.height
        };
    }

    function tc(uc) {
        var vc;
        if (!uc.parent)
            return 'root';
        let wc = null !== (vc = uc.parent.id) && void 0 !== vc ? vc : '';
        return wc += 'string' == typeof uc.treeBranch ? '-' + uc.treeBranch : `-${ uc.treeBranch[0] }/${ uc.treeBranch[0] }`, wc;
    }

    function tc(uc, vc) {
        if (!vc)
            return null;
        const wc = uc.field.getBoundingClientRect(),
            xc = vc.right - vc.left,
            yc = vc.bottom - vc.top,
            _zc = Math.ceil(vc.left - wc.left + uc.field.scrollLeft),
            Ac = Math.ceil(vc.top - wc.top);
        return {
            left: _zc,
            right: _zc + xc,
            top: Ac,
            bottom: Ac + yc
        };
    }

    function tc(uc) {
        const vc = uc.getBoundingClientRect(),
            wc = parseInt(getComputedStyle(uc).marginRight),
            xc = {
                top: vc.top - 1,
                bottom: vc.bottom,
                left: vc.left,
                right: vc.right - 1 + wc
            };
        if (0 === uc.children.length || 'SVG' === uc.tagName.toUpperCase())
            return xc;
        for (const yc of uc.children)
            if (1 === yc.nodeType && 'atomId' in yc.dataset && !yc.classList.contains('pstrut')) {
                const zc = tc(yc);
                xc.left = Math.min(xc.left, zc.left), xc.right = Math.max(xc.right, zc.right), xc.top = Math.min(xc.top, zc.top), xc.bottom = Math.max(xc.bottom, zc.bottom);
            }
        return xc;
    }

    function tc(uc, vc) {
        var wc, xc;
        if (!vc.id)
            return null;
        let yc = null !== (xc = null === (wc = uc.atomBoundsCache) || void 0 === wc ? void 0 : wc.get(vc.id)) && void 0 !== xc ? xc : null;
        if (null !== yc)
            return yc;
        const zc = uc.field.querySelector(`[data-atom-id="${ vc.id }"]`);
        return yc = zc ? ui(zc) : null, uc.atomBoundsCache && (yc ? uc.atomBoundsCache.set(vc.id, yc) : uc.atomBoundsCache.delete(vc.id)), null != yc ? yc : null;
    }

    function tc(uc, vc) {
        return uc.model.selection.ranges.reduce((b, _zc) => b.concat(... function(wc, xc, yc) {
            const _zc = new Map();
            for (const Ac of wc.model.getAtoms(xc, {
                    includeChildren: !0
                })) {
                if ((null == yc ? void 0 : yc.excludeAtomsWithBackground) && Ac.style.backgroundColor)
                    break;
                const Bc = ci(wc, pi(wc, Ac));
                if (Bc) {
                    const Cc = di(Ac);
                    if (_zc.has(Cc)) {
                        const Dc = _zc.get(Cc);
                        _zc.set(Cc, {
                            left: Math.min(Dc.left, Bc.left),
                            right: Math.max(Dc.right, Bc.right),
                            top: Math.min(Dc.top, Bc.top),
                            bottom: Math.max(Dc.bottom, Bc.bottom)
                        });
                    } else
                        _zc.set(Cc, Bc);
                }
            }
            return [..._zc.values()];
        }(uc, _xc, vc)), []);
    }

    function tc(uc, vc) {
        return '*' === uc || 'none' === vc || ('same-origin' === vc ? !globalThis.origin || uc === globalThis.origin : 'function' == typeof vc && vc(uc));
    }

    function tc(uc) {
        let vc = 0,
            wc = 0;
        const _xc = uc.offsetWidth,
            yc = uc.offsetHeight;
        for (; uc instanceof HTMLElement;)
            vc += uc.offsetTop, wc += uc.offsetLeft, uc = uc.offsetParent;
        return new DOMRect(wc, vc, _xc, yc);
    }
    const tc = {
            main: [
                'Main-Regular',
                'ML__cmr'
            ],
            'main-italic': [
                'Main-Italic',
                'ML__cmr ML__it'
            ],
            'main-bold': [
                'Main-Bold',
                'ML__cmr ML__bold'
            ],
            'main-bolditalic': [
                'Main-BoldItalic',
                'ML__cmr ML__bold ML__it'
            ],
            normal: [
                'Main-Regular',
                'ML__cmr'
            ],
            'normal-bold': [
                'Main-Bold',
                'ML__mathbf'
            ],
            'normal-italic': [
                'Math-Italic',
                'ML__mathit'
            ],
            'normal-bolditalic': [
                'Math-BoldItalic',
                'ML__mathbfit'
            ],
            ams: [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bold': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-italic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bolditalic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'sans-serif': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bold': [
                'SansSerif-Regular',
                'ML__sans ML__bold'
            ],
            'sans-serif-italic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bolditalic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            calligraphic: [
                'Caligraphic-Regular',
                'ML__cal'
            ],
            'calligraphic-bold': [
                'Caligraphic-Regular',
                'ML__cal ML__bold'
            ],
            'calligraphic-italic': [
                'Caligraphic-Regular',
                'ML__cal ML__it'
            ],
            'calligraphic-bolditalic': [
                'Caligraphic-Regular',
                'ML__cal ML__bold ML__it'
            ],
            script: [
                'Script-Regular',
                'ML__script'
            ],
            'script-bold': [
                'Script-Regular',
                'ML__script ML__bold'
            ],
            'script-italic': [
                'Script-Regular',
                'ML__script ML__it'
            ],
            'script-bolditalic': [
                'Script-Regular',
                'ML__script ML__bold ML__it'
            ],
            fraktur: [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bold': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-italic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bolditalic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            monospace: [
                'Typewriter-Regular',
                'ML__tt'
            ],
            'monospace-bold': [
                'Typewriter-Regular',
                'ML__tt ML__bold'
            ],
            'monospace-italic': [
                'Typewriter-Regular',
                'ML__tt ML__it'
            ],
            'monospace-bolditalic': [
                'Typewriter-Regular',
                'ML__tt ML__bold ML__it'
            ],
            'double-struck': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bold': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-italic': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bolditalic': [
                'AMS-Regular',
                'ML__bb'
            ]
        },
        uc = {
            'double-struck': /^[A-Z ]$/,
            script: /^[A-Z ]$/,
            calligraphic: /^[\dA-Z ]$/,
            fraktur: /^[\dA-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^\u2019\u2018]$/,
            monospace: /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
            'sans-serif': /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/
        },
        vc = /^[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5]$/,
        wc = [
            /^[a-z]$/,
            /^[A-Z]$/,
            vc,
            /^[\u0393|\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A6\u03A8\u03A9]$/
        ],
        xc = {
            iso: [
                'it',
                'it',
                'it',
                'it'
            ],
            tex: [
                'it',
                'it',
                'it',
                'up'
            ],
            french: [
                'it',
                'up',
                'up',
                'up'
            ],
            upright: [
                'up',
                'up',
                'up',
                'up'
            ]
        };

    function yc(zc) {
        if (!zc)
            return '';
        const {
            style: Ac
        } = zc;
        if (void 0 === Ac.variant)
            return '';
        let Bc = Ac.variant;
        return Ac.variantStyle && 'up' !== Ac.variantStyle && (Bc += '-' + Ac.variantStyle), Bc;
    }

    function yc(zc) {
        return [
            at(zc.map(zc => zc[0])),
            zc.map(zc => zc[1]).some(zc => !0 === zc)
        ];
    }
    new class extends db {
        createAtom(yc, zc, Ac) {
            var Bc, Cc, Dc, Ec, Fc;
            const _Gc = zc.getDefinition(yc, 'math');
            if (null === _Gc)
                return new pb('mord', zc, {
                    mode: 'math',
                    command: yc,
                    value: yc,
                    style: Ac
                });
            if ('symbol' === _Gc.definitionType) {
                const Hc = new pb(null !== (Bc = _Gc.type) && void 0 !== Bc ? Bc : 'mord', zc, {
                    mode: 'math',
                    command: null !== (Cc = _Gc.command) && void 0 !== Cc ? Cc : yc,
                    value: String.fromCodePoint(_Gc.codepoint),
                    style: Ac
                });
                return null !== (Dc = _Gc.isFunction) && void 0 !== Dc && Dc && (Hc.isFunction = !0), yc.startsWith('\\') && (Hc.verbatimLatex = yc), Hc;
            }
            const Hc = new pb('mord', zc, {
                mode: 'math',
                command: null !== (Ec = _Gc.command) && void 0 !== Ec ? Ec : yc,
                value: yc,
                style: Ac
            });
            return null !== (Fc = _Gc.isFunction) && void 0 !== Fc && Fc && (Hc.isFunction = !0), yc.startsWith('\\') && (Hc.verbatimLatex = yc), Hc;
        }
        serialize(yc, zc) {
            const {
                parent: Ac
            } = yc[0], Bc = null == Ac ? void 0 : Ac.computedStyle.fontSize;
            return at(Ke(yc, 'fontSize').map(yc => {
                const Cc = function(Dc, Ec) {
                        const {
                            parent: Fc
                        } = Dc[0], Gc = null == Fc ? void 0 : Fc.computedStyle.backgroundColor;
                        return at(Ke(Dc, 'backgroundColor').map(Dc => {
                            var Hc, Ic;
                            let Jc = function(Kc, Lc) {
                                const {
                                    parent: Mc
                                } = Kc[0], Nc = null == Mc ? void 0 : Mc.computedStyle.color;
                                return at(Ke(Kc, 'color').map(Kc => {
                                    var Oc, Pc;
                                    const Qc = function(Rc, Sc) {
                                            var Tc;
                                            const {
                                                parent: Uc
                                            } = Rc[0], Vc = xi(Uc), Wc = null !== (Tc = null == Uc ? void 0 : Uc.mode) && void 0 !== Tc ? Tc : 'math';
                                            return at(Ke(Rc, 'variant').map(Rc => {
                                                const Xc = xi(Rc[0]);
                                                if (Rc.every(Rc => {
                                                        const Yc = Rc.context.getDefinition(Rc.command, Wc);
                                                        return !(!Yc || 'function' === Yc.definitionType || !Yc.variant) && xi(Rc) === Xc;
                                                    }))
                                                    return at(Rc.map(Rc => pb.serialize(Rc, Sc)));
                                                let Yc = '';
                                                return Xc && Xc !== Vc && (Yc = {
                                                    calligraphic: '\\mathcal{',
                                                    fraktur: '\\mathfrak{',
                                                    'double-struck': '\\mathbb{',
                                                    script: '\\mathscr{',
                                                    monospace: '\\mathtt{',
                                                    'sans-serif': '\\mathsf{',
                                                    normal: '\\mathrm{',
                                                    'normal-italic': '\\mathnormal{',
                                                    'normal-bold': '\\mathbf{',
                                                    'normal-bolditalic': '\\mathbfit{',
                                                    ams: '',
                                                    'ams-italic': '\\mathit{',
                                                    'ams-bold': '\\mathbf{',
                                                    'ams-bolditalic': '\\mathbfit{',
                                                    main: '',
                                                    'main-italic': '\\mathit{',
                                                    'main-bold': '\\mathbf{',
                                                    'main-bolditalic': '\\mathbfit{'
                                                } [Xc]), Yc ? Yc + at(Rc.map(Rc => pb.serialize(Rc, Sc))) + '}' : at(Rc.map(Rc => pb.serialize(Rc, Sc)));
                                            }));
                                        }(Kc, Lc),
                                        Rc = Kc[0].computedStyle;
                                    return null !== (Oc = Lc.skipStyles) && void 0 !== Oc && Oc || !Rc.color || Mc && Nc === Rc.color ? Qc : '\\textcolor{' + (null !== (Pc = Rc.verbatimColor) && void 0 !== Pc ? Pc : Rc.color) + '}{' + Qc + '}';
                                }));
                            }(Dc, Ec);
                            const Kc = Dc[0].computedStyle;
                            return null !== (Hc = Ec.skipStyles) && void 0 !== Hc && Hc || !Jc.trim() || !Kc.backgroundColor || Fc && Gc === Kc.backgroundColor || !(Dc.length > 0) && Dc[0] instanceof Mb || (Jc = `\\ensuremath{${ Jc }}`, Jc = `\\colorbox{${ null !== (Ic = Kc.verbatimBackgroundColor) && void 0 !== Ic ? Ic : Kc.backgroundColor }}{${ Jc }}`), Jc;
                        }));
                    }(yc, zc),
                    Dc = yc[0].computedStyle.fontSize;
                return !Dc || Ac && Bc === Dc ? Cc : '\\' + [
                    '',
                    'tiny',
                    'scriptsize',
                    'footnotesize',
                    'small',
                    'normalsize',
                    'large',
                    'Large',
                    'LARGE',
                    'huge',
                    'Huge'
                ][Dc] + ' ' + Cc;
            }));
        }
        applyStyle(yc, zc) {
            if (void 0 === zc.variant)
                return '';
            const Ac = 'auto' !== zc.letterShapeStyle && zc.letterShapeStyle ? zc.letterShapeStyle : 'tex';
            let {
                variant: Bc
            } = zc, {
                variantStyle: Cc
            } = zc;
            'normal' === Bc && !Cc && /[\u00A3\u0131\u0237]/.test(yc.value) && (Bc = 'main', Cc = 'italic'), 'normal' !== Bc || Cc || 1 !== yc.value.length || wc.forEach((zc, Bc) => {
                zc.test(yc.value) && 'it' === xc[Ac][Bc] && (Cc = 'italic');
            }), 'up' === Cc && (Cc = void 0);
            const Dc = Cc ? Bc + '-' + Cc : Bc,
                [Ec, Fc] = tc[Dc];
            return uc[Bc] && !uc[Bc].test(yc.value) ? (yc.value = function(Gc, Hc, Ic) {
                if (!/[A-Za-z\d]/.test(Gc))
                    return Gc;
                if (!Hc && !Ic)
                    return Gc;
                const Jc = Gc.codePointAt(0);
                if (void 0 === Jc)
                    return Gc;
                for (const Kc of t)
                    if ((!Hc || Kc.variant === Hc) && (!Ic || Kc.style === Ic) && Jc >= Kc.offset && Jc < Kc.offset + Kc.len) {
                        const Lc = Kc.start + Jc - Kc.offset;
                        return String.fromCodePoint(s[Lc] || Lc);
                    }
                return Kc;
            }(yc.value, Bc, Cc), null) : (vc.test(yc.value) && (yc.classes += ' lcGreek'), Fc && (yc.classes += ' ' + Fc), Ec);
        }
        constructor() {
            super('math');
        }
    }();
    const yc = {
        roman: '',
        'sans-serif': 'ML__sans',
        monospace: 'ML__tt'
    };

    function zc(Ac) {
        let Bc = 0;
        for (let Cc = 0; Cc < Ac.length; Cc++)
            Bc = Math.imul(31, Bc) + Ac.charCodeAt(Cc) | 0;
        return Math.abs(Bc);
    }

    function zc(Ac, Bc, Cc) {
        var Dc, Ec;
        if (_Jc(), !Bc)
            return null;
        let Fc = null !== (Dc = null == Ac ? void 0 : Ac.getRootNode()) && void 0 !== Dc ? Dc : null === document || void 0 === document ? void 0 : document.head;
        if (!Fc)
            return null;
        Fc === document && (Fc = document.head);
        const Gc = Fc.querySelector(`style[data-id="${ Cc }"]`);
        if (Gc) {
            const Hc = Number.parseFloat(null !== (Ec = Gc.getAttribute('data-refcount')) && void 0 !== Ec ? Ec : '0');
            Gc.dataset.refcount = Number(Hc + 1).toString();
        } else {
            const Hc = document.createElement('style');
            Hc.dataset.id = Cc, Hc.dataset.refcount = '1', Hc.append(document.createTextNode(Bc)), Fc.appendChild(Hc);
        }
        return {
            release: () => {
                var Hc;
                const Ic = document.head.querySelector(`style[data-id="${ Cc }"]`);
                if (Ic) {
                    const Jc = Number.parseFloat(null !== (Hc = Ic.getAttribute('data-refcount')) && void 0 !== Hc ? Hc : '0');
                    1 === Jc ? Ic.remove() : Ic.dataset.refcount = Number(Jc - 1).toString();
                }
            }
        };
    }

    function zc(Ac) {
        const Bc = Ac.split('+'),
            Cc = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: Bc.pop()
            };
        return Bc.includes('shift') && (Cc.shift = !0), Bc.includes('alt') && (Cc.alt = !0), Bc.includes('ctrl') && (Cc.ctrl = !0), Bc.includes('cmd') && (Cc.cmd = !0), Bc.includes('win') && (Cc.win = !0), Bc.includes('meta') && (Cc.meta = !0), Cc;
    }

    function zc(Ac) {
        let Bc = '';
        return Ac.shift && (Bc += 'shift+'), Ac.alt && (Bc += 'alt+'), Ac.ctrl && (Bc += 'ctrl+'), Ac.cmd && (Bc += 'cmd+'), Ac.win && (Bc += 'win+'), Ac.meta && (Bc += 'meta+'), Bc + Ac.key;
    }
    new class extends db {
        createAtom(zc, Ac, Bc) {
            const Cc = Ac.getDefinition(zc, 'text');
            return Cc && 'symbol' === Cc.definitionType ? new Kb(zc, String.fromCodePoint(Cc.codepoint), null != Bc ? Bc : {}, Ac) : null;
        }
        serialize(zc, Ac) {
            var Bc;
            let [Cc, Dc] = function(Ec, Fc) {
                return wi(Ke(Ec, 'backgroundColor').map(Ec => {
                    var Gc, Hc;
                    const [Ic, _Jc] = function(Kc, Lc) {
                        var Mc;
                        if (!Kc || 0 === Kc.length)
                            return [
                                '',
                                !1
                            ];
                        const Nc = null === (Mc = Kc[0].parent) || void 0 === Mc ? void 0 : Mc.style.color;
                        return wi(Ke(Kc, 'color').map(Kc => {
                            var Oc, Pc;
                            const [Qc, Rc] = function(Sc, Tc) {
                                return function(Uc, Vc) {
                                    return wi(Ke(Uc, 'fontFamily').map(Uc => {
                                        var Wc, Xc;
                                        const [Yc, Zc] = function($c, ad) {
                                            return wi(Ke($c, 'fontSize').map($c => {
                                                var bd, cd;
                                                const [dd, ed] = function(fd, gd) {
                                                    return wi(Ke(fd, 'fontSeries').map(fd => {
                                                        const [hd, id] = function(jd, kd) {
                                                            return wi(Ke(jd, 'fontShape').map(jd => {
                                                                const [ld, md] = function(nd, od) {
                                                                    return [
                                                                        at(nd.map(nd => pb.serialize(nd, od))),
                                                                        !0
                                                                    ];
                                                                }(jd, kd), {
                                                                    fontShape: nd
                                                                } = jd[0].style;
                                                                return 'it' === nd ? [
                                                                    '\\textit{' + ld + '}',
                                                                    !1
                                                                ] : 'sl' === nd ? [
                                                                    '\\textsl{' + ld + '}',
                                                                    !1
                                                                ] : 'sc' === nd ? [
                                                                    '\\textsc{' + ld + '}',
                                                                    !1
                                                                ] : 'n' === nd ? [
                                                                    '\\textup{' + ld + '}',
                                                                    !1
                                                                ] : nd ? [
                                                                    `{\\fontshape{${ jd[0].style.fontShape }}${ ld }`,
                                                                    !1
                                                                ] : [
                                                                    ld,
                                                                    md
                                                                ];
                                                            }));
                                                        }(fd, gd), {
                                                            fontSeries: jd
                                                        } = fd[0].style;
                                                        return 'b' === jd ? [
                                                            `\\textbf{${ hd }}`,
                                                            !1
                                                        ] : 'l' === jd ? [
                                                            `\\textlf{${ hd }}`,
                                                            !1
                                                        ] : 'm' === jd ? [
                                                            `\\textmd{${ hd }}`,
                                                            !1
                                                        ] : jd ? [
                                                            `\\fontseries{${ jd }}${ hd }`,
                                                            !1
                                                        ] : [
                                                            hd,
                                                            id
                                                        ];
                                                    }));
                                                }($c, ad), fd = null !== (cd = [
                                                    '',
                                                    'tiny',
                                                    'scriptsize',
                                                    'footnotesize',
                                                    'small',
                                                    'normalsize',
                                                    'large',
                                                    'Large',
                                                    'LARGE',
                                                    'huge',
                                                    'Huge'
                                                ][null !== (bd = $c[0].style.fontSize) && void 0 !== bd ? bd : '']) && void 0 !== cd ? cd : '';
                                                return fd ? [
                                                    `{\\${ fd } ${ dd }}`,
                                                    ed
                                                ] : [
                                                    dd,
                                                    ed
                                                ];
                                            }));
                                        }(Uc, Vc), $c = null !== (Xc = {
                                            roman: 'textrm',
                                            monospace: 'texttt',
                                            'sans-serif': 'textsf'
                                        } [null !== (Wc = Uc[0].style.fontFamily) && void 0 !== Wc ? Wc : '']) && void 0 !== Xc ? Xc : '';
                                        return $c ? [
                                            `\\${ $c }{${ Yc }}`,
                                            !1
                                        ] : Uc[0].style.fontFamily ? [
                                            `\\fontfamily{${ Uc[0].style.fontFamily }}${ Yc }`,
                                            Zc
                                        ] : [
                                            Yc,
                                            Zc
                                        ];
                                    }));
                                }(Sc, Tc);
                            }(Kc, Lc);
                            return null !== (Oc = Lc.skipStyles) && void 0 !== Oc && Oc || !Kc[0].style.color || 'none' === Kc[0].style.color || Nc === Kc[0].style.color ? [
                                Qc,
                                Rc
                            ] : [
                                `\\textcolor{${ null !== (Pc = Kc[0].style.verbatimColor) && void 0 !== Pc ? Pc : Kc[0].style.color }}{${ Qc }}`,
                                !1
                            ];
                        }));
                    }(Ec, Fc), Kc = Ec[0].computedStyle;
                    return null !== (Gc = Fc.skipStyles) && void 0 !== Gc && Gc || !Kc.backgroundColor || 'none' === Kc.backgroundColor ? [
                        Ic,
                        _Jc
                    ] : [
                        `\\colorbox{${ null !== (Hc = Kc.verbatimBackgroundColor) && void 0 !== Hc ? Hc : Kc.backgroundColor }}{${ Ic }}`,
                        !1
                    ];
                }));
            }(zc, Ac);
            return !0 === (null !== (Bc = Ac.skipModeCommand) && void 0 !== Bc && Bc) && (Dc = !1), Dc && (Cc = `\\text{${ Cc }}`), Cc;
        }
        applyStyle(zc, Ac) {
            var Bc, Cc, Dc, Ec, Fc, Gc;
            const {
                fontFamily: Hc
            } = Ac;
            if (yc[Hc] ? zc.classes += void 0 !== (Bc = ' ' + yc[Hc]) ? Bc : '' : Hc && zc.setStyle('font-family', Hc), Ac.fontShape && (zc.classes += ' ', zc.classes += null !== (Cc = {
                    it: 'ML__it',
                    sl: 'ML__shape_sl',
                    sc: 'ML__shape_sc',
                    ol: 'ML__shape_ol'
                } [Ac.fontShape]) && void 0 !== Cc ? Cc : ''), Ac.fontSeries) {
                const Ic = Ac.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
                Ic && (zc.classes += ' ', zc.classes += null !== (Ec = {
                    ul: 'ML__series_ul',
                    el: 'ML__series_el',
                    l: 'ML__series_l',
                    sl: 'ML__series_sl',
                    m: '',
                    sb: 'ML__series_sb',
                    b: 'ML__bold',
                    eb: 'ML__series_eb',
                    ub: 'ML__series_ub'
                } [null !== (Dc = Ic[1]) && void 0 !== Dc ? Dc : '']) && void 0 !== Ec ? Ec : '', zc.classes += ' ', zc.classes += null !== (Gc = {
                    uc: 'ML__series_uc',
                    ec: 'ML__series_ec',
                    c: 'ML__series_c',
                    sc: 'ML__series_sc',
                    n: '',
                    sx: 'ML__series_sx',
                    x: 'ML__series_x',
                    ex: 'ML__series_ex',
                    ux: 'ML__series_ux'
                } [null !== (Fc = Ic[2]) && void 0 !== Fc ? Fc : '']) && void 0 !== Gc ? Gc : '');
            }
            return 'Main-Regular';
        }
        constructor() {
            super('text');
        }
    }(), new class extends db {
        createAtom(zc, Ac, Bc) {
            return new Wb(zc, Ac);
        }
        serialize(zc, Ac) {
            return zc.filter(zc => zc instanceof Wb && !zc.isSuggestion).map(zc => zc.value).join('');
        }
        applyStyle() {
            return null;
        }
        constructor() {
            super('latex');
        }
    }();
    const zc = 'apple' === _Cc() ? {
            id: 'apple.en-intl',
            displayName: 'English (international)',
            virtualLayout: 'qwerty',
            platform: 'apple',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'å',
                    'Å'
                ],
                KeyB: [
                    'b',
                    'B',
                    '\u222B',
                    'ı'
                ],
                KeyC: [
                    'c',
                    'C',
                    'ç',
                    'Ç'
                ],
                KeyD: [
                    'd',
                    'D',
                    '\u2202',
                    'Î'
                ],
                KeyE: [
                    'e',
                    'E',
                    '\xB4',
                    '\xB4'
                ],
                KeyF: [
                    'f',
                    'F',
                    'ƒ',
                    'Ï'
                ],
                KeyG: [
                    'g',
                    'G',
                    '\xA9',
                    '\u02DD'
                ],
                KeyH: [
                    'h',
                    'H',
                    '\u02D9',
                    'Ó'
                ],
                KeyI: [
                    'i',
                    'I',
                    'ˆ',
                    'ˆ'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '\u2206',
                    'Ô'
                ],
                KeyK: [
                    'k',
                    'K',
                    '\u02DA',
                    '\uF8FF'
                ],
                KeyL: [
                    'l',
                    'L',
                    '\xAC',
                    'Ò'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    'Â'
                ],
                KeyN: [
                    'n',
                    'N',
                    '\u02DC',
                    '\u02DC'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ø',
                    'Ø'
                ],
                KeyP: [
                    'p',
                    'P',
                    'π',
                    '\u220F'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'œ',
                    'Œ'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    '\u2030'
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    'Í'
                ],
                KeyT: [
                    't',
                    'T',
                    '\u2020',
                    'ˇ'
                ],
                KeyU: [
                    'u',
                    'U',
                    '\xA8',
                    '\xA8'
                ],
                KeyV: [
                    'v',
                    'V',
                    '\u221A',
                    '\u25CA'
                ],
                KeyW: [
                    'w',
                    'W',
                    '\u2211',
                    '\u201E'
                ],
                KeyX: [
                    'x',
                    'X',
                    '\u2248',
                    '\u02DB'
                ],
                KeyY: [
                    'y',
                    'Y',
                    '\xA5',
                    'Á'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'Ω',
                    '\xB8'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\u2044'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\u2122',
                    '\u20AC'
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xA3',
                    '\u2039'
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA2',
                    '\u203A'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u221E',
                    'ﬁ'
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xA7',
                    'ﬂ'
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xB6',
                    '\u2021'
                ],
                Digit8: [
                    '8',
                    '*',
                    '\u2022',
                    '\xB0'
                ],
                Digit9: [
                    '9',
                    '(',
                    'ª',
                    '\xB7'
                ],
                Digit0: [
                    '0',
                    ')',
                    'º',
                    '\u201A'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '\u2013',
                    '\u2014'
                ],
                Equal: [
                    '=',
                    '+',
                    '\u2260',
                    '\xB1'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\u201C',
                    '\u201D'
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\u2018',
                    '\u2019'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAB',
                    '\xBB'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\u2026',
                    'Ú'
                ],
                Quote: [
                    '\'',
                    '"',
                    'æ',
                    'Æ'
                ],
                Backquote: [
                    '`',
                    '\u02DC',
                    '`',
                    '`'
                ],
                Comma: [
                    ',',
                    '<',
                    '\u2264',
                    '\xAF'
                ],
                Period: [
                    '.',
                    '>',
                    '\u2265',
                    '\u02D8'
                ],
                Slash: [
                    '/',
                    '?',
                    '\xF7',
                    '\xBF'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                IntlBackslash: [
                    '\xA7',
                    '\xB1',
                    '\xA7',
                    '\xB1'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                AudioVolumeUp: [
                    '',
                    '=',
                    '',
                    '='
                ]
            }
        } : 'windows' === _Cc() ? {
            id: 'windows.en-intl',
            displayName: 'English (international)',
            platform: 'windows',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'á',
                    'Á'
                ],
                KeyB: [
                    'b',
                    'B',
                    '',
                    ''
                ],
                KeyC: [
                    'c',
                    'C',
                    '\xA9',
                    '\xA2'
                ],
                KeyD: [
                    'd',
                    'D',
                    'ð',
                    'Ð'
                ],
                KeyE: [
                    'e',
                    'E',
                    'é',
                    'É'
                ],
                KeyF: [
                    'f',
                    'F',
                    '',
                    ''
                ],
                KeyG: [
                    'g',
                    'G',
                    '',
                    ''
                ],
                KeyH: [
                    'h',
                    'H',
                    '',
                    ''
                ],
                KeyI: [
                    'i',
                    'I',
                    'í',
                    'Í'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '',
                    ''
                ],
                KeyK: [
                    'k',
                    'K',
                    '',
                    ''
                ],
                KeyL: [
                    'l',
                    'L',
                    'ø',
                    'Ø'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    ''
                ],
                KeyN: [
                    'n',
                    'N',
                    'ñ',
                    'Ñ'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ó',
                    'Ó'
                ],
                KeyP: [
                    'p',
                    'P',
                    'ö',
                    'Ö'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'ä',
                    'Ä'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    ''
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    '\xA7'
                ],
                KeyT: [
                    't',
                    'T',
                    'þ',
                    'Þ'
                ],
                KeyU: [
                    'u',
                    'U',
                    'ú',
                    'Ú'
                ],
                KeyV: [
                    'v',
                    'V',
                    '',
                    ''
                ],
                KeyW: [
                    'w',
                    'W',
                    'å',
                    'Å'
                ],
                KeyX: [
                    'x',
                    'X',
                    '',
                    ''
                ],
                KeyY: [
                    'y',
                    'Y',
                    'ü',
                    'Ü'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'æ',
                    'Æ'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\xB9'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\xB2',
                    ''
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xB3',
                    ''
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA4',
                    '\xA3'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u20AC',
                    ''
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xBC',
                    ''
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xBD',
                    ''
                ],
                Digit8: [
                    '8',
                    '*',
                    '\xBE',
                    ''
                ],
                Digit9: [
                    '9',
                    '(',
                    '\u2018',
                    ''
                ],
                Digit0: [
                    '0',
                    ')',
                    '\u2019',
                    ''
                ],
                Space: [
                    ' ',
                    ' ',
                    '',
                    ''
                ],
                Minus: [
                    '-',
                    '_',
                    '\xA5',
                    ''
                ],
                Equal: [
                    '=',
                    '+',
                    '\xD7',
                    '\xF7'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\xAB',
                    ''
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\xBB',
                    ''
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAC',
                    '\xA6'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\xB6',
                    '\xB0'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\xB4',
                    '\xA8'
                ],
                Backquote: [
                    '`',
                    '~',
                    '',
                    ''
                ],
                Comma: [
                    ',',
                    '<',
                    'ç',
                    'Ç'
                ],
                Period: [
                    '.',
                    '>',
                    '',
                    ''
                ],
                Slash: [
                    '/',
                    '?',
                    '\xBF',
                    ''
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '',
                    ''
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '',
                    ''
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '',
                    ''
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '',
                    ''
                ],
                IntlBackslash: [
                    '\\',
                    '|',
                    '',
                    ''
                ]
            }
        } : {
            id: 'linux.en',
            displayName: 'English',
            platform: 'linux',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'a',
                    'A'
                ],
                KeyB: [
                    'b',
                    'B',
                    'b',
                    'B'
                ],
                KeyC: [
                    'c',
                    'C',
                    'c',
                    'C'
                ],
                KeyD: [
                    'd',
                    'D',
                    'd',
                    'D'
                ],
                KeyE: [
                    'e',
                    'E',
                    'e',
                    'E'
                ],
                KeyF: [
                    'f',
                    'F',
                    'f',
                    'F'
                ],
                KeyG: [
                    'g',
                    'G',
                    'g',
                    'G'
                ],
                KeyH: [
                    'h',
                    'H',
                    'h',
                    'H'
                ],
                KeyI: [
                    'i',
                    'I',
                    'i',
                    'I'
                ],
                KeyJ: [
                    'j',
                    'J',
                    'j',
                    'J'
                ],
                KeyK: [
                    'k',
                    'K',
                    'k',
                    'K'
                ],
                KeyL: [
                    'l',
                    'L',
                    'l',
                    'L'
                ],
                KeyM: [
                    'm',
                    'M',
                    'm',
                    'M'
                ],
                KeyN: [
                    'n',
                    'N',
                    'n',
                    'N'
                ],
                KeyO: [
                    'o',
                    'O',
                    'o',
                    'O'
                ],
                KeyP: [
                    'p',
                    'P',
                    'p',
                    'P'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'q',
                    'Q'
                ],
                KeyR: [
                    'r',
                    'R',
                    'r',
                    'R'
                ],
                KeyS: [
                    's',
                    'S',
                    's',
                    'S'
                ],
                KeyT: [
                    't',
                    'T',
                    't',
                    'T'
                ],
                KeyU: [
                    'u',
                    'U',
                    'u',
                    'U'
                ],
                KeyV: [
                    'v',
                    'V',
                    'v',
                    'V'
                ],
                KeyW: [
                    'w',
                    'W',
                    'w',
                    'W'
                ],
                KeyX: [
                    'x',
                    'X',
                    'x',
                    'X'
                ],
                KeyY: [
                    'y',
                    'Y',
                    'y',
                    'Y'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'z',
                    'Z'
                ],
                Digit1: [
                    '1',
                    '!',
                    '1',
                    '!'
                ],
                Digit2: [
                    '2',
                    '@',
                    '2',
                    '@'
                ],
                Digit3: [
                    '3',
                    '#',
                    '3',
                    '#'
                ],
                Digit4: [
                    '4',
                    '$',
                    '4',
                    '$'
                ],
                Digit5: [
                    '5',
                    '%',
                    '5',
                    '%'
                ],
                Digit6: [
                    '6',
                    '^',
                    '6',
                    '^'
                ],
                Digit7: [
                    '7',
                    '&',
                    '7',
                    '&'
                ],
                Digit8: [
                    '8',
                    '*',
                    '8',
                    '*'
                ],
                Digit9: [
                    '9',
                    '(',
                    '9',
                    '('
                ],
                Digit0: [
                    '0',
                    ')',
                    '0',
                    ')'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '-',
                    '_'
                ],
                Equal: [
                    '=',
                    '+',
                    '=',
                    '+'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '[',
                    '{'
                ],
                BracketRight: [
                    ']',
                    '}',
                    ']',
                    '}'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\\',
                    '|'
                ],
                Semicolon: [
                    ';',
                    ':',
                    ';',
                    ':'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\'',
                    '"'
                ],
                Backquote: [
                    '`',
                    '~',
                    '`',
                    '~'
                ],
                Comma: [
                    ',',
                    '<',
                    ',',
                    '<'
                ],
                Period: [
                    '.',
                    '>',
                    '.',
                    '>'
                ],
                Slash: [
                    '/',
                    '?',
                    '/',
                    '?'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '',
                    '.',
                    '',
                    '.'
                ],
                IntlBackslash: [
                    '<',
                    '>',
                    '|',
                    '\xA6'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                NumpadComma: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                NumpadParenLeft: [
                    '(',
                    '(',
                    '(',
                    '('
                ],
                NumpadParenRight: [
                    ')',
                    ')',
                    ')',
                    ')'
                ]
            }
        },
        Ac = {
            enter: '[Enter]',
            escape: '[Escape]',
            backspace: '[Backspace]',
            tab: '[Tab]',
            space: '[Space]',
            pausebreak: '[Pause]',
            insert: '[Insert]',
            home: '[Home]',
            pageup: '[PageUp]',
            delete: '[Delete]',
            end: '[End]',
            pagedown: '[PageDown]',
            right: '[ArrowRight]',
            left: '[ArrowLeft]',
            down: '[ArrowDown]',
            up: '[ArrowUp]',
            numpad0: '[Numpad0]',
            numpad1: '[Numpad1]',
            numpad2: '[Numpad2]',
            numpad3: '[Numpad3]',
            numpad4: '[Numpad4]',
            numpad5: '[Numpad5]',
            numpad6: '[Numpad6]',
            numpad7: '[Numpad7]',
            numpad8: '[Numpad8]',
            numpad9: '[Numpad9]',
            numpad_divide: '[NumpadDivide]',
            numpad_multiply: '[NumpadMultiply]',
            numpad_subtract: '[NumpadSubtract]',
            numpad_add: '[NumpadAdd]',
            numpad_decimal: '[NumpadDecimal]',
            numpad_separator: '[NumpadComma]',
            capslock: '[Capslock]',
            f1: '[F1]',
            f2: '[F2]',
            f3: '[F3]',
            f4: '[F4]',
            f5: '[F5]',
            f6: '[F6]',
            f7: '[F7]',
            f8: '[F8]',
            f9: '[F9]',
            f10: '[F10]',
            f11: '[F11]',
            f12: '[F12]',
            f13: '[F13]',
            f14: '[F14]',
            f15: '[F15]',
            f16: '[F16]',
            f17: '[F17]',
            f18: '[F18]',
            f19: '[F19]'
        },
        Bc = [];

    function _Cc() {
        switch (_Qc()) {
            case 'macos':
            case 'ios':
                return 'apple';
            case 'windows':
                return 'windows';
        }
        return 'linux';
    }

    function Cc(Dc) {
        Dc.platform && Dc.platform !== zi() || Bc.push(Dc);
    }

    function Cc() {
        return Bc[0];
    }
    Bi(zc), Bi({
        id: 'apple.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'apple',
        virtualLayout: 'azerty',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '\u2021',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                '\u222B'
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                '\xA2'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                'ê',
                'Ê'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                '\xB7'
            ],
            KeyG: [
                'g',
                'G',
                'ﬁ',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                'Ì',
                'Î'
            ],
            KeyI: [
                'i',
                'I',
                'î',
                'ï'
            ],
            KeyJ: [
                'j',
                'J',
                'Ï',
                'Í'
            ],
            KeyK: [
                'k',
                'K',
                'È',
                'Ë'
            ],
            KeyL: [
                'l',
                'L',
                '\xAC',
                '|'
            ],
            KeyM: [
                ',',
                '?',
                '\u221E',
                '\xBF'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                'ı'
            ],
            KeyO: [
                'o',
                'O',
                'œ',
                'Œ'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\u201A'
            ],
            KeyS: [
                's',
                'S',
                'Ò',
                '\u2211'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2122'
            ],
            KeyU: [
                'u',
                'U',
                'º',
                'ª'
            ],
            KeyV: [
                'v',
                'V',
                '\u25CA',
                '\u221A'
            ],
            KeyW: [
                'z',
                'Z',
                'Â',
                'Å'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                '\u2044'
            ],
            KeyY: [
                'y',
                'Y',
                'Ú',
                'Ÿ'
            ],
            KeyZ: [
                'w',
                'W',
                '\u2039',
                '\u203A'
            ],
            Digit1: [
                '&',
                '1',
                '\uF8FF',
                '\xB4'
            ],
            Digit2: [
                'é',
                '2',
                'ë',
                '\u201E'
            ],
            Digit3: [
                '"',
                '3',
                '\u201C',
                '\u201D'
            ],
            Digit4: [
                '\'',
                '4',
                '\u2018',
                '\u2019'
            ],
            Digit5: [
                '(',
                '5',
                '{',
                '['
            ],
            Digit6: [
                '\xA7',
                '6',
                '\xB6',
                'å'
            ],
            Digit7: [
                'è',
                '7',
                '\xAB',
                '\xBB'
            ],
            Digit8: [
                '!',
                '8',
                '\xA1',
                'Û'
            ],
            Digit9: [
                'ç',
                '9',
                'Ç',
                'Á'
            ],
            Digit0: [
                'à',
                '0',
                'ø',
                'Ø'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                '}',
                ']'
            ],
            Equal: [
                '-',
                '_',
                '\u2014',
                '\u2013'
            ],
            BracketLeft: [
                '^',
                '\xA8',
                'ô',
                'Ô'
            ],
            BracketRight: [
                '$',
                '*',
                '\u20AC',
                '\xA5'
            ],
            Backslash: [
                '`',
                '\xA3',
                '@',
                '#'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'Ó'
            ],
            Quote: [
                'ù',
                '%',
                'Ù',
                '\u2030'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ';',
                '.',
                '\u2026',
                '\u2022'
            ],
            Period: [
                ':',
                '/',
                '\xF7',
                '\\'
            ],
            Slash: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                '.',
                ',',
                '.'
            ],
            IntlBackslash: [
                '@',
                '#',
                '\u2022',
                'Ÿ'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Bi({
        id: 'apple.spanish',
        locale: 'es',
        displayName: 'Spanish ISO',
        platform: 'apple',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                ' '
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u20AC'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'ﬁ'
            ],
            KeyG: [
                'g',
                'G',
                '\uF8FF',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                '\u2122',
                ' '
            ],
            KeyI: [
                'i',
                'I',
                ' ',
                ' '
            ],
            KeyJ: [
                'j',
                'J',
                '\xB6',
                '\xAF'
            ],
            KeyK: [
                'k',
                'K',
                '\xA7',
                'ˇ'
            ],
            KeyL: [
                'l',
                'L',
                ' ',
                '\u02D8'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02DA'
            ],
            KeyN: [
                'n',
                'N',
                ' ',
                '\u02D9'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                ' '
            ],
            KeyS: [
                's',
                'S',
                '\u222B',
                ' '
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2021'
            ],
            KeyU: [
                'u',
                'U',
                ' ',
                ' '
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                'æ',
                'Æ'
            ],
            KeyX: [
                'x',
                'X',
                '\u2211',
                '\u203A'
            ],
            KeyY: [
                'y',
                'Y',
                '\xA5',
                ' '
            ],
            KeyZ: [
                'z',
                'Z',
                'Ω',
                '\u2039'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                'ı'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u02DD'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\u2022'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                '\u2030'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ' '
            ],
            Digit7: [
                '7',
                '/',
                '\xF7',
                '\u2044'
            ],
            Digit8: [
                '8',
                '(',
                '\u201C',
                '\u2018'
            ],
            Digit9: [
                '9',
                ')',
                '\u201D',
                '\u2019'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\u2248'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\xB4',
                '\xB8'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '\u201A',
                '\u02DB'
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                'ˆ'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '\xB1'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '\xBB'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '\u02DC'
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                '\xAB'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u201E',
                ''
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\u2026'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                ',',
                ',',
                ',',
                ','
            ],
            IntlBackslash: [
                'º',
                'ª',
                '\\',
                '\xB0'
            ]
        }
    }), Bi({
        id: 'windows.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'windows',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'z',
                'Z',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '|',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '@',
                ''
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '~',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '\u20AC',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '',
                ''
            ],
            Digit9: [
                '9',
                ')',
                '',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                '\'',
                '?',
                '',
                ''
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '',
                ''
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                ''
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                ''
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '',
                ''
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                ''
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Bi({
        id: 'linux.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'linux',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'º'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                '\xA1'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u215B'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\xA3'
            ],
            Digit4: [
                '4',
                '$',
                '~',
                '$'
            ],
            Digit5: [
                '5',
                '%',
                '\xBD',
                '\u215C'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                '\u215D'
            ],
            Digit7: [
                '7',
                '/',
                '{',
                '\u215E'
            ],
            Digit8: [
                '8',
                '(',
                '[',
                '\u2122'
            ],
            Digit9: [
                '9',
                ')',
                ']',
                '\xB1'
            ],
            Digit0: [
                '0',
                '=',
                '}',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\\',
                '\xBF'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '̃',
                '~'
            ],
            BracketLeft: [
                '̀',
                '̂',
                '[',
                '̊'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '̄'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '̆'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '̋'
            ],
            Quote: [
                '́',
                '̈',
                '{',
                '{'
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                '\\'
            ],
            Comma: [
                ',',
                ';',
                '\u2500',
                '\xD7'
            ],
            Period: [
                '.',
                ':',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '̣',
                '̇'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadEnter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Numpad1: [
                '',
                '1',
                '',
                '1'
            ],
            Numpad2: [
                '',
                '2',
                '',
                '2'
            ],
            Numpad3: [
                '',
                '3',
                '',
                '3'
            ],
            Numpad4: [
                '',
                '4',
                '',
                '4'
            ],
            Numpad5: [
                '',
                '5',
                '',
                '5'
            ],
            Numpad6: [
                '',
                '6',
                '',
                '6'
            ],
            Numpad7: [
                '',
                '7',
                '',
                '7'
            ],
            Numpad8: [
                '',
                '8',
                '',
                '8'
            ],
            Numpad9: [
                '',
                '9',
                '',
                '9'
            ],
            Numpad0: [
                '',
                '0',
                '',
                '0'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            NumpadComma: [
                '.',
                '.',
                '.',
                '.'
            ],
            NumpadParenLeft: [
                '(',
                '(',
                '(',
                '('
            ],
            NumpadParenRight: [
                ')',
                ')',
                ')',
                ')'
            ]
        }
    }), Bi({
        id: 'linux.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'linux',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                ',',
                '?',
                '́',
                '̋'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            Digit1: [
                '&',
                '1',
                '\xB9',
                '\xA1'
            ],
            Digit2: [
                'é',
                '2',
                '~',
                '\u215B'
            ],
            Digit3: [
                '"',
                '3',
                '#',
                '\xA3'
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                '$'
            ],
            Digit5: [
                '(',
                '5',
                '[',
                '\u215C'
            ],
            Digit6: [
                '-',
                '6',
                '|',
                '\u215D'
            ],
            Digit7: [
                'è',
                '7',
                '`',
                '\u215E'
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                '\u2122'
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                '\xB1'
            ],
            Digit0: [
                'à',
                '0',
                '@',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                '\xBF'
            ],
            Equal: [
                '=',
                '+',
                '}',
                '̨'
            ],
            BracketLeft: [
                '̂',
                '̈',
                '̈',
                '̊'
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                '̄'
            ],
            Backslash: [
                '*',
                'µ',
                '̀',
                '̆'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'º'
            ],
            Quote: [
                'ù',
                '%',
                '̂',
                '̌'
            ],
            Backquote: [
                '\xB2',
                '~',
                '\xAC',
                '\xAC'
            ],
            Comma: [
                ';',
                '.',
                '\u2500',
                '\xD7'
            ],
            Period: [
                ':',
                '/',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '!',
                '\xA7',
                '̣',
                '̇'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ]
        }
    }), Bi({
        id: 'windows.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                ',',
                '?',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'a',
                'A',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'w',
                'W',
                '',
                ''
            ],
            Digit1: [
                '&',
                '1',
                '',
                ''
            ],
            Digit2: [
                'é',
                '2',
                '~',
                ''
            ],
            Digit3: [
                '"',
                '3',
                '#',
                ''
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                ''
            ],
            Digit5: [
                '(',
                '5',
                '[',
                ''
            ],
            Digit6: [
                '-',
                '6',
                '|',
                ''
            ],
            Digit7: [
                'è',
                '7',
                '`',
                ''
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                ''
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                ''
            ],
            Digit0: [
                'à',
                '0',
                '@',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                ''
            ],
            Equal: [
                '=',
                '+',
                '}',
                ''
            ],
            BracketLeft: [
                '^',
                '\xA8',
                '',
                ''
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                ''
            ],
            Backslash: [
                '*',
                'µ',
                '',
                ''
            ],
            Semicolon: [
                'm',
                'M',
                '',
                ''
            ],
            Quote: [
                'ù',
                '%',
                '',
                ''
            ],
            Backquote: [
                '\xB2',
                '',
                '',
                ''
            ],
            Comma: [
                ';',
                '.',
                '',
                ''
            ],
            Period: [
                ':',
                '/',
                '',
                ''
            ],
            Slash: [
                '!',
                '\xA7',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Bi({
        id: 'windows.german',
        locale: 'de',
        displayName: 'German',
        platform: 'windows',
        virtualLayout: 'qwertz',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyZ: [
                'y',
                'Y',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '\xB2',
                ''
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB3',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '{',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '[',
                ''
            ],
            Digit9: [
                '9',
                ')',
                ']',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '}',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                'ß',
                '?',
                '\\',
                'ẞ'
            ],
            Equal: [
                '\xB4',
                '`',
                '',
                ''
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                '~',
                ''
            ],
            Backslash: [
                '#',
                '\'',
                '',
                ''
            ],
            Semicolon: [
                'ö',
                'Ö',
                '',
                ''
            ],
            Quote: [
                'ä',
                'Ä',
                '',
                ''
            ],
            Backquote: [
                '^',
                '\xB0',
                '',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                ''
            ]
        }
    }), Bi({
        id: 'apple.german',
        locale: 'de',
        displayName: 'German',
        virtualLayout: 'qwertz',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                '\u222B',
                '\u2039'
            ],
            KeyC: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2122'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u2030'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyG: [
                'g',
                'G',
                '\xA9',
                'Ì'
            ],
            KeyH: [
                'h',
                'H',
                'ª',
                'Ó'
            ],
            KeyI: [
                'i',
                'I',
                '\u2044',
                'Û'
            ],
            KeyJ: [
                'j',
                'J',
                'º',
                'ı'
            ],
            KeyK: [
                'k',
                'K',
                '\u2206',
                'ˆ'
            ],
            KeyL: [
                'l',
                'L',
                '@',
                'ﬂ'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02D8'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                '\u203A'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                '\xAB',
                '\xBB'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\xB8'
            ],
            KeyS: [
                's',
                'S',
                '\u201A',
                'Í'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u02DD'
            ],
            KeyU: [
                'u',
                'U',
                '\xA8',
                'Á'
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                'Ù'
            ],
            KeyY: [
                'z',
                'Z',
                'Ω',
                'ˇ'
            ],
            KeyZ: [
                'y',
                'Y',
                '\xA5',
                '\u2021'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\xAC'
            ],
            Digit2: [
                '2',
                '"',
                '\u201C',
                '\u201D'
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB6',
                '#'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '[',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '&',
                ']',
                '^'
            ],
            Digit7: [
                '7',
                '/',
                '|',
                '\\'
            ],
            Digit8: [
                '8',
                '(',
                '{',
                '\u02DC'
            ],
            Digit9: [
                '9',
                ')',
                '}',
                '\xB7'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\xAF'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                'ß',
                '?',
                '\xBF',
                '\u02D9'
            ],
            Equal: [
                '\xB4',
                '`',
                '\'',
                '\u02DA'
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '\u2022',
                '\xB0'
            ],
            BracketRight: [
                '+',
                '*',
                '\xB1',
                '\uF8FF'
            ],
            Backslash: [
                '#',
                '\'',
                '\u2018',
                '\u2019'
            ],
            Semicolon: [
                'ö',
                'Ö',
                'œ',
                'Œ'
            ],
            Quote: [
                'ä',
                'Ä',
                'æ',
                'Æ'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u221E',
                '\u02DB'
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                ',',
                '.',
                '.'
            ],
            IntlBackslash: [
                '^',
                '\xB0',
                '\u201E',
                '\u201C'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Bi({
        id: 'dvorak',
        locale: 'en',
        displayName: 'Dvorak',
        virtualLayout: 'dvorak',
        platform: '',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'x',
                'X',
                '\u2248',
                '\u02DB'
            ],
            KeyC: [
                'j',
                'J',
                '\u2206',
                'Ô'
            ],
            KeyD: [
                'e',
                'E',
                '\xB4',
                '\xB4'
            ],
            KeyE: [
                '.',
                '>',
                '\u2265',
                '\u02D8'
            ],
            KeyF: [
                'u',
                'U',
                '\xA8',
                '\xA8'
            ],
            KeyG: [
                'i',
                'I',
                'ˆ',
                'ˆ'
            ],
            KeyH: [
                'd',
                'D',
                '\u2202',
                'Î'
            ],
            KeyI: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyJ: [
                'h',
                'H',
                '\u02D9',
                'Ó'
            ],
            KeyK: [
                't',
                'T',
                '\u2020',
                'ˇ'
            ],
            KeyL: [
                'n',
                'N',
                '\u02DC',
                '\u02DC'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'Â'
            ],
            KeyN: [
                'b',
                'B',
                '\u222B',
                'ı'
            ],
            KeyO: [
                'r',
                'R',
                '\xAE',
                '\u2030'
            ],
            KeyP: [
                'l',
                'L',
                '\xAC',
                'Ò'
            ],
            KeyQ: [
                '\'',
                '"',
                'æ',
                'Æ'
            ],
            KeyR: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyS: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyT: [
                'y',
                'Y',
                '\xA5',
                'Á'
            ],
            KeyU: [
                'g',
                'G',
                '\xA9',
                '\u02DD'
            ],
            KeyV: [
                'k',
                'K',
                '\u02DA',
                '\uF8FF'
            ],
            KeyW: [
                ',',
                '<',
                '\u2264',
                '\xAF'
            ],
            KeyX: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyY: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyZ: [
                ';',
                ':',
                '\u2026',
                'Ú'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\u2044'
            ],
            Digit2: [
                '2',
                '@',
                '\u2122',
                '\u20AC'
            ],
            Digit3: [
                '3',
                '#',
                '\xA3',
                '\u2039'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\u203A'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '^',
                '\xA7',
                'ﬂ'
            ],
            Digit7: [
                '7',
                '&',
                '\xB6',
                '\u2021'
            ],
            Digit8: [
                '8',
                '*',
                '\u2022',
                '\xB0'
            ],
            Digit9: [
                '9',
                '(',
                'ª',
                '\xB7'
            ],
            Digit0: [
                '0',
                ')',
                'º',
                '\u201A'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '[',
                '{',
                '\u201C',
                '\u201D'
            ],
            Equal: [
                ']',
                '}',
                '\u2018',
                '\u2019'
            ],
            BracketLeft: [
                '/',
                '?',
                '\xF7',
                '\xBF'
            ],
            BracketRight: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            Backslash: [
                '\\',
                '|',
                '\xAB',
                '\xBB'
            ],
            Semicolon: [
                's',
                'S',
                'ß',
                'Í'
            ],
            Quote: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            Backquote: [
                '`',
                '~',
                '`',
                '`'
            ],
            Comma: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            Period: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            Slash: [
                'z',
                'Z',
                'Ω',
                '\xB8'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                '.',
                '.',
                '.',
                '.'
            ],
            IntlBackslash: [
                '\xA7',
                '\xB1',
                '\xA7',
                '\xB1'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            AudioVolumeUp: [
                '',
                '=',
                '',
                '='
            ]
        }
    });
    const Cc = [{
                key: 'left',
                command: 'moveToPreviousChar'
            },
            {
                key: 'right',
                command: 'moveToNextChar'
            },
            {
                key: 'up',
                command: 'moveUp'
            },
            {
                key: 'down',
                command: 'moveDown'
            },
            {
                key: 'shift+[ArrowLeft]',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+[ArrowRight]',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+[ArrowUp]',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+[ArrowDown]',
                command: 'extendSelectionDownward'
            },
            {
                key: '[Backspace]',
                command: 'deleteBackward'
            },
            {
                key: 'alt+[Delete]',
                command: 'deleteBackward'
            },
            {
                key: '[Delete]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[Backspace]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[ArrowLeft]',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+[ArrowRight]',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+[ArrowLeft]',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+[ArrowRight]',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+[ArrowLeft]',
                command: 'moveToGroupStart'
            },
            {
                key: 'ctrl+[ArrowRight]',
                command: 'moveToGroupEnd'
            },
            {
                key: 'shift+ctrl+[ArrowLeft]',
                command: 'extendToGroupStart'
            },
            {
                key: 'shift+ctrl+[ArrowRight]',
                command: 'extendToGroupEnd'
            },
            {
                key: '[Space]',
                ifMode: 'math',
                command: 'moveAfterParent'
            },
            {
                key: 'shift+[Space]',
                ifMode: 'math',
                command: 'moveBeforeParent'
            },
            {
                key: '[Home]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'cmd+[ArrowLeft]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'shift+[Home]',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+cmd+[ArrowLeft]',
                command: 'extendToMathFieldStart'
            },
            {
                key: '[End]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'cmd+[ArrowRight]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+[End]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'shift+cmd+[ArrowRight]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: '[Pageup]',
                command: 'moveToGroupStart'
            },
            {
                key: '[Pagedown]',
                command: 'moveToGroupEnd'
            },
            {
                key: '[Tab]',
                ifMode: 'math',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'math',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Tab]',
                ifMode: 'text',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'text',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Escape]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'text',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '\\',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[IntlBackslash]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'complete',
                    {
                        selectItem: 'true'
                    }
                ]
            },
            {
                key: '[Tab]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'accept-suggestion'
                ]
            },
            {
                key: '[Return]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: '[Enter]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: 'shift+[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'reject'
                ]
            },
            {
                key: '[ArrowDown]',
                ifMode: 'latex',
                command: 'nextSuggestion'
            },
            {
                key: '[ArrowUp]',
                ifMode: 'latex',
                command: 'previousSuggestion'
            },
            {
                key: 'ctrl+a',
                ifPlatform: '!macos',
                command: 'selectAll'
            },
            {
                key: 'cmd+a',
                command: 'selectAll'
            },
            {
                key: '[Cut]',
                command: 'cutToClipboard'
            },
            {
                key: '[Copy]',
                command: 'copyToClipboard'
            },
            {
                key: '[Paste]',
                command: 'pasteFromClipboard'
            },
            {
                key: '[Clear]',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+z',
                ifPlatform: '!macos',
                command: 'undo'
            },
            {
                key: 'cmd+z',
                command: 'undo'
            },
            {
                key: '[Undo]',
                command: 'undo'
            },
            {
                key: 'ctrl+y',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+y',
                command: 'redo'
            },
            {
                key: 'shift+ctrl+z',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+z',
                command: 'redo'
            },
            {
                key: '[Redo]',
                command: 'redo'
            },
            {
                key: '[EraseEof]',
                command: 'deleteToGroupEnd'
            },
            {
                key: 'ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousChar'
            },
            {
                key: 'ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextChar'
            },
            {
                key: 'ctrl+p',
                ifPlatform: 'macos',
                command: 'moveUp'
            },
            {
                key: 'ctrl+n',
                ifPlatform: 'macos',
                command: 'moveDown'
            },
            {
                key: 'ctrl+a',
                ifPlatform: 'macos',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'ctrl+e',
                ifPlatform: 'macos',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+ctrl+p',
                ifPlatform: 'macos',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+ctrl+n',
                ifPlatform: 'macos',
                command: 'extendSelectionDownward'
            },
            {
                key: 'shift+ctrl+a',
                ifPlatform: 'macos',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+ctrl+e',
                ifPlatform: 'macos',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+h',
                ifPlatform: 'macos',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+d',
                ifPlatform: 'macos',
                command: 'deleteForward'
            },
            {
                key: 'ctrl+l',
                ifPlatform: 'macos',
                command: 'scrollIntoView'
            },
            {
                key: 'ctrl+[Digit2]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'ctrl+[Digit5]',
                ifMode: 'math',
                command: 'moveToOpposite'
            },
            {
                key: 'ctrl+[Digit6]',
                ifMode: 'math',
                command: 'moveToSuperscript'
            },
            {
                key: 'ctrl+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'ctrl+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\pi'
                ]
            },
            {
                key: 'alt+v',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'alt+w',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sum_{i=#?}^{#?}'
                ]
            },
            {
                key: 'alt+b',
                command: [
                    'insert',
                    '\\int_{#?}^{#?}'
                ]
            },
            {
                key: 'alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cup'
                ]
            },
            {
                key: 'alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cap'
                ]
            },
            {
                key: 'alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\emptyset'
                ]
            },
            {
                key: 'alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\differentialD'
                ]
            },
            {
                key: 'shift+alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\varnothing'
                ]
            },
            {
                key: 'shift+alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\partial'
                ]
            },
            {
                key: 'shift+alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\prod_{i=#?}^{#?}'
                ]
            },
            {
                key: 'shift+alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcup'
                ]
            },
            {
                key: 'shift+alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcap'
                ]
            },
            {
                key: 'shift+alt+a',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\forall'
                ]
            },
            {
                key: 'shift+alt+e',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\exists'
                ]
            },
            {
                key: 'alt+[Backslash]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\backslash'
                ]
            },
            {
                key: '[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#?}{#@}'
                ]
            },
            {
                key: 'shift+alt+k',
                command: 'toggleKeystrokeCaption'
            },
            {
                key: 'alt+[Space]',
                command: 'toggleVirtualKeyboard'
            },
            {
                key: 'alt+ctrl+[ArrowUp]',
                command: [
                    'speak',
                    'all',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+ctrl+[ArrowDown]',
                command: [
                    'speak',
                    'selection',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'applyStyle',
                    {
                        mode: 'text'
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'applyStyle',
                    {
                        mode: 'math'
                    }
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'switchMode',
                    'text',
                    '',
                    ''
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'switchMode',
                    'math',
                    '',
                    ''
                ]
            },
            {
                key: '/',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+/',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\/'
                ]
            },
            {
                key: 'alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrack #0 \\right\\rbrack'
                ]
            },
            {
                key: 'ctrl+[Minus]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'moveToSubscript'
            },
            {
                key: 'shift+alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrace #0 \\right\\rbrace'
                ]
            },
            {
                key: 'ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'shift+ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'shift+cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'ctrl+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'cmd+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'shift+ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+[Backspace]',
                ifMode: 'math',
                command: 'removeColumn'
            },
            {
                key: 'alt+[Digit5]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '$\\infty'
                ]
            },
            {
                key: 'alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\wedge'
                ]
            },
            {
                key: 'shift+alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\vee'
                ]
            },
            {
                key: 'alt+[Digit9]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '('
                ]
            },
            {
                key: 'alt+[Digit0]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    ')'
                ]
            },
            {
                key: 'alt+|',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '|'
                ]
            },
            {
                key: 'shift+[Backquote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\~'
                ]
            },
            {
                key: '[Backquote]',
                ifLayout: [
                    'windows.french',
                    'linux.french'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '^2'
                ]
            }
        ],
        Dc = {
            '\\theta': 'alt+q',
            '\\sqrt': [
                'alt+v',
                'ctrl+[Digit2]'
            ],
            '\\pi': 'alt+p',
            '\\prod': 'shift+alt+p',
            '\\sum': 'alt+w',
            '\\int': 'alt+b',
            '\\cup': 'alt+u',
            '\\cap': 'alt+n',
            '\\bigcup': 'shift+alt+u',
            '\\bigcap': 'shift+alt+n',
            '\\forall': 'shift+alt+a',
            '\\exists': 'shift+alt+e',
            '\\infty': 'alt+[Digit5]',
            '\\wedge': 'alt+[Digit6]',
            '\\vee': 'shift+alt+[Digit6]',
            '\\differentialD': 'alt+d',
            '\\partial': 'shift+alt+d',
            '\\frac': 'Slash',
            '\\emptyset': 'alt+o',
            '\\varnothing': 'shift+alt+o',
            '\\~': '~'
        };

    function Ec(Fc) {
        let Gc = Fc;
        return _Ic(Gc) && (Gc = Gc.length > 0 ? Gc[0] + '(' + Gc.slice(1).join('') + ')' : ''), Gc;
    }

    function Ec(Fc, Gc) {
        let Hc = [];
        if ('string' == typeof Gc) {
            const Ic = Dc[Gc];
            _Ic(Ic) ? Hc = Ic.slice() : Ic && Hc.push(Ic);
        }
        const Ic = Ei(Gc),
            Jc = new RegExp('^' + Ic.replace('\\', '\\\\').replace('|', '\\|').replace('*', '\\*').replace('$', '\\$').replace('^', '\\^') + '([^*a-zA-Z]|$)');
        for (const Kc of Fc)
            Jc.test(Ei(Kc.command)) && Hc.push(Kc.key);
        return Hc.map(_Ec);
    }

    function _Ec(Fc) {
        var Gc;
        const Hc = /macos|ios|/.test(_Qc()),
            _Ic = Fc.split('+');
        let Jc = '';
        for (const Kc of _Ic)
            !Hc && Jc && (Jc += '<span class="ML__shortcut-join">+</span>'), Kc.startsWith('[Key') ? Jc += Kc.slice(4, 5) : Kc.startsWith('Key') ? Jc += Kc.slice(3, 4) : Kc.startsWith('[Digit') ? Jc += Kc.slice(6, 7) : Kc.startsWith('Digit') ? Jc += Kc.slice(5, 6) : Jc += null !== (Gc = {
                cmd: '\u2318',
                meta: Hc ? '\u2318' : 'command',
                shift: Hc ? '\u21E7' : 'shift',
                alt: Hc ? '\u2325' : 'alt',
                ctrl: Hc ? '\u2303' : 'control',
                '\n': Hc ? '\u23CE' : 'return',
                '[return]': Hc ? '\u23CE' : 'return',
                '[enter]': Hc ? '\u2324' : 'enter',
                '[tab]': Hc ? '\u21E5' : 'tab',
                '[escape]': 'esc',
                '[backspace]': Hc ? '\u232B' : 'backspace',
                '[delete]': Hc ? '\u2326' : 'del',
                '[pageup]': Hc ? '\u21DE' : 'page up',
                '[pagedown]': Hc ? '\u21DF' : 'page down',
                '[home]': Hc ? '\u2912' : 'home',
                '[end]': Hc ? '\u2913' : 'end',
                '[space]': 'space',
                '[equal]': '=',
                '[minus]': '-',
                '[comma]': ',',
                '[slash]': '/',
                '[backslash]': '\\',
                '[bracketleft]': '[',
                '[bracketright]': ']',
                semicolon: ';',
                period: '.',
                comma: ',',
                minus: '-',
                equal: '=',
                quote: '\'',
                bracketLeft: '[',
                bracketRight: ']',
                backslash: '\\',
                intlbackslash: '\\',
                backquote: '`',
                slash: '/',
                numpadmultiply: '* &#128290;',
                numpaddivide: '/ &#128290;',
                numpadsubtract: '- &#128290;',
                numpadadd: '+ &#128290;',
                numpaddecimal: '. &#128290;',
                numpadcomma: ', &#128290;',
                help: 'help',
                left: '\u21E0',
                up: '\u21E1',
                right: '\u21E2',
                down: '\u21E3',
                '[arrowleft]': '\u21E0',
                '[arrowup]': '\u21E1',
                '[arrowright]': '\u21E2',
                '[arrowdown]': '\u21E3',
                '[digit0]': '0',
                '[digit1]': '1',
                '[digit2]': '2',
                '[digit3]': '3',
                '[digit4]': '4',
                '[digit5]': '5',
                '[digit6]': '6',
                '[digit7]': '7',
                '[digit8]': '8',
                '[digit9]': '9'
            } [Kc.toLowerCase()]) && void 0 !== Gc ? Gc : Kc.toUpperCase();
        return Jc;
    }

    function Ec(Fc, Gc) {
        if (Fc.ifPlatform && !/^!?(macos|windows|android|ios|chromeos|other)$/.test(Fc.ifPlatform))
            throw new Error(`Unexpected platform "${ Fc.ifPlatform }" for keybinding ${ Fc.key }`);
        if (void 0 !== Fc.ifLayout && (0 === Gc.score || !Fc.ifLayout.includes(Gc.id)))
            return;
        const Hc = Li(Fc.key);
        let Ic = Fc.ifPlatform;
        if (Hc.cmd) {
            if (Ic && 'macos' !== Ic && 'ios' !== Ic)
                throw new Error('Unexpected "cmd" modifier with platform "' + Ic + '"\n"cmd" modifier can only be used with macOS or iOS platform.');
            Ic || (Ic = 'ios' === _Qc() ? 'ios' : 'macos'), Hc.win = !1, Hc.cmd = !1, Hc.meta = !0;
        }
        if (Hc.win) {
            if (Ic && 'windows' !== Ic)
                throw new Error('Unexpected "win" modifier with platform "' + Ic + '"\n"win" modifier can only be used with Windows platform.');
            Ic = 'windows', Hc.win = !1, Hc.cmd = !1, Hc.meta = !0;
        }
        if (Ic && ! function(Jc) {
                if (_Pc()) {
                    const Kc = _Qc(),
                        Lc = Jc.startsWith('!'),
                        Mc = Jc.endsWith(Kc);
                    if (Lc && !Mc)
                        return !0;
                    if (!Lc && Mc)
                        return !0;
                }
                return '!other' !== Jc && 'other' === Jc;
            }(Ic))
            return;
        if (/^\[.+\]$/.test(Hc.key))
            return {
                ...Fc,
                ifPlatform: Ic,
                key: Ci(Hc)
            };
        const Jc = function(Kc, Lc) {
            var Mc;
            const Nc = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: ''
            };
            if (!Kc)
                return Nc;
            for (const [Oc, _Pc] of Object.entries(Lc.mapping)) {
                if (_Pc[0] === Kc)
                    return Nc.key = `[${ Oc }]`, Nc;
                if (_Pc[1] === Kc)
                    return Nc.shift = !0, Nc.key = `[${ Oc }]`, Nc;
                if (_Pc[2] === Kc)
                    return Nc.alt = !0, Nc.key = `[${ Oc }]`, Nc;
                if (_Pc[3] === Kc)
                    return Nc.shift = !0, Nc.alt = !0, Nc.key = `[${ Oc }]`, Nc;
            }
            return Nc.key = null !== (Oc = Ac[Kc]) && void 0 !== Oc ? Oc : '', Nc;
        }(Hc.key, Gc);
        if (!Jc)
            throw new Error('Invalid keybinding key "' + Fc.key + '"');
        if (Jc.shift && Hc.shift || Jc.alt && Hc.alt)
            throw new Error(`The keybinding ${ Fc.key } (${ _Ec(Fc.command) }) is conflicting with the key combination ${ Ci(Jc) } using the ${ Gc.displayName } keyboard layout`);
        return Jc.shift = Jc.shift || Hc.shift, Jc.alt = Jc.alt || Hc.alt, Jc.meta = Hc.meta, Jc.ctrl = Hc.ctrl, {
            ...Fc,
            ifPlatform: Ic,
            key: Ci(Jc)
        };
    }

    function _Ec(Fc) {
        if (Array.isArray(Fc)) {
            const Gc = [...Fc];
            return Gc.shift() + '(' + Gc.map(Fc => 'string' == typeof Fc ? `"${ Fc }"` : Fc.toString()).join(', ') + ')';
        }
        return Fc;
    }
    var Ec = '#mathlive-popover-panel{background-color:rgba(97,97,97,.95);border-radius:8px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);color:#fff;display:flex;flex-direction:column;justify-content:center;position:fixed;text-align:center;transition:all .2s cubic-bezier(.64,.09,.08,1);visibility:hidden;z-index:1}#mathlive-popover-panel:after{border-bottom:5px solid rgba(97,97,97,.9);border-left:5px solid transparent;border-right:5px solid transparent;content:"";font-size:1rem;height:0;left:calc(50% - 3px);position:absolute;top:-5px;width:0}#mathlive-popover-panel.is-visible{animation:ML__fade-in .15s cubic-bezier(0,0,.2,1);visibility:inherit}@keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}#mathlive-popover-panel ul{align-items:flex-start;display:flex;flex-flow:column;justify-content:center;list-style:none;margin:0;padding:0}#mathlive-popover-panel li{border-radius:8px;column-gap:1em;cursor:pointer;display:flex;flex-direction:row;justify-content:space-between;margin:8px;padding:8px;width:calc(100% - 32px)}#mathlive-popover-panel li a{color:#5ea6fd;display:block;margin-top:.4em;padding-top:.3em}#mathlive-popover-panel li a:hover{color:#5ea6fd;text-decoration:underline}#mathlive-popover-panel li.is-active,#mathlive-popover-panel li.is-pressed,#mathlive-popover-panel li:hover{background:hsla(0,0%,100%,.1)}.ML__popover__command{font-family:KaTeX_Main;font-size:1.6rem}.ML__popover__latex{align-self:center;font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace}.ML__popover__keybinding{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:.8em;opacity:.7}.ML__shortcut-join{opacity:.5}',
        Fc = '.ML__sr-only{clip:rect(0,0,0,0);border:0;-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.ML__base,.ML__isInline{display:inline-block}.ML__base{border:0;box-sizing:content-box;cursor:text;font-family:inherit;font-style:inherit;font-weight:inherit;margin:0;outline:0;padding:0;position:relative;text-decoration:none;vertical-align:baseline;visibility:inherit;width:min-content}body.ML__fonts-loading .ML__base{visibility:hidden}.ML__strut,.ML__strut--bottom{display:inline-block;min-height:.5em}.ML__small-delim{font-family:KaTeX_Main}.ML__text{font-family:var(--text-font-family,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif);white-space:pre}.ML__cmr{font-family:KaTeX_Main;font-style:normal}.ML__mathit{font-family:KaTeX_Math;font-style:italic}.ML__mathbf{font-family:KaTeX_Main;font-weight:700}.lcGreek.ML__mathbf{font-family:KaTeX_Math;font-weight:400}.ML__mathbfit{font-family:KaTeX_Math;font-style:italic;font-weight:700}.ML__ams,.ML__bb{font-family:KaTeX_AMS}.ML__cal{font-family:KaTeX_Caligraphic}.ML__frak{font-family:KaTeX_Fraktur}.ML__tt{font-family:KaTeX_Typewriter}.ML__script{font-family:KaTeX_Script}.ML__sans{font-family:KaTeX_SansSerif}.ML__series_el,.ML__series_ul{font-weight:100}.ML__series_l{font-weight:200}.ML__series_sl{font-weight:300}.ML__series_sb{font-weight:500}.ML__bold,.ML__boldsymbol{font-weight:700}.ML__series_eb{font-weight:800}.ML__series_ub{font-weight:900}.ML__series_uc{font-stretch:ultra-condensed}.ML__series_ec{font-stretch:extra-condensed}.ML__series_c{font-stretch:condensed}.ML__series_sc{font-stretch:semi-condensed}.ML__series_sx{font-stretch:semi-expanded}.ML__series_x{font-stretch:expanded}.ML__series_ex{font-stretch:extra-expanded}.ML__series_ux{font-stretch:ultra-expanded}.ML__it{font-style:italic}.ML__shape_ol{-webkit-text-stroke:1px #000;text-stroke:1px #000;color:transparent}.ML__shape_sc{font-variant:small-caps}.ML__shape_sl{font-style:oblique}.ML__emph{color:#bc2612}.ML__emph .ML__emph{color:#0c7f99}.ML__highlight{background:#edd1b0;color:#007cb2}.ML__center{text-align:center}.ML__label_padding{padding:0 .5em}.ML__frac-line{min-height:1px;width:100%}.ML__frac-line:after{background:currentColor;box-sizing:content-box;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt,.ML__sqrt-sign{display:inline-block}.ML__sqrt-sign{font-family:KaTeX_Main;position:relative}.ML__sqrt-line{display:inline-block;height:.04em;width:100%}.ML__sqrt-line:before{background:currentColor;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt-line:after{border-bottom-width:1px;content:" ";display:block;margin-top:-.1em}.ML__sqrt-index{margin-left:.27777778em;margin-right:-.55555556em}.ML__delim-size1{font-family:KaTeX_Size1}.ML__delim-size2{font-family:KaTeX_Size2}.ML__delim-size3{font-family:KaTeX_Size3}.ML__delim-size4{font-family:KaTeX_Size4}.ML__delim-mult .delim-size1>span{font-family:KaTeX_Size1}.ML__delim-mult .delim-size4>span{font-family:KaTeX_Size4}.ML__accent-body>span{font-family:KaTeX_Main;width:0}.ML__accent-vec>span{left:.24em;position:relative}.ML__mathlive{word-wrap:normal;direction:ltr;display:inline-block;font-family:KaTeX_Main,Times New Roman,serif;font-size-adjust:none;font-stretch:normal;font-style:normal;font-variant-caps:normal;letter-spacing:normal;line-height:1.2;text-align:left;text-indent:0;text-rendering:auto;text-shadow:none;-webkit-user-select:none;user-select:none;white-space:nowrap;width:min-content;word-spacing:normal}.ML__mathlive .style-wrap{position:relative}.ML__mathlive .left-right,.ML__mathlive .mfrac{display:inline-block}.ML__mathlive .vlist-t{border-collapse:collapse;display:inline-table;table-layout:fixed}.ML__mathlive .vlist-r{display:table-row}.ML__mathlive .vlist{display:table-cell;position:relative;vertical-align:bottom}.ML__mathlive .vlist>span{display:block;height:0;position:relative}.ML__mathlive .vlist>span>span{display:inline-block}.ML__mathlive .vlist>span>.pstrut{overflow:hidden;width:0}.ML__mathlive .vlist-t2{margin-right:-2px}.ML__mathlive .vlist-s{display:table-cell;font-size:1px;min-width:2px;vertical-align:bottom;width:2px}.ML__mathlive .msubsup{text-align:left}.ML__mathlive .negativethinspace{display:inline-block;height:.71em;margin-left:-.16667em}.ML__mathlive .thinspace{display:inline-block;height:.71em;width:.16667em}.ML__mathlive .mediumspace{display:inline-block;height:.71em;width:.22222em}.ML__mathlive .thickspace{display:inline-block;height:.71em;width:.27778em}.ML__mathlive .enspace{display:inline-block;height:.71em;width:.5em}.ML__mathlive .quad{display:inline-block;height:.71em;width:1em}.ML__mathlive .qquad{display:inline-block;height:.71em;width:2em}.ML__mathlive .llap,.ML__mathlive .rlap{display:inline-block;position:relative;width:0}.ML__mathlive .llap>.inner,.ML__mathlive .rlap>.inner{position:absolute}.ML__mathlive .llap>.fix,.ML__mathlive .rlap>.fix{display:inline-block}.ML__mathlive .llap>.inner{right:0}.ML__mathlive .rlap>.inner{left:0}.ML__mathlive .rule{border:0 solid;box-sizing:border-box;display:inline-block;position:relative}.ML__mathlive .overline .overline-line,.ML__mathlive .underline .underline-line{width:100%}.ML__mathlive .overline .overline-line:before,.ML__mathlive .underline .underline-line:before{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block}.ML__mathlive .overline .overline-line:after,.ML__mathlive .underline .underline-line:after{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block;margin-top:-1px;min-height:thin}.ML__mathlive .stretchy{display:block;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .stretchy:after,.ML__mathlive .stretchy:before{content:""}.ML__mathlive .stretchy svg{fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;display:block;height:inherit;position:absolute;width:100%}.ML__mathlive .slice-1-of-2{left:0}.ML__mathlive .slice-1-of-2,.ML__mathlive .slice-2-of-2{display:inline-flex;overflow:hidden;position:absolute;width:50.2%}.ML__mathlive .slice-2-of-2{right:0}.ML__mathlive .slice-1-of-3{display:inline-flex;left:0;overflow:hidden;position:absolute;width:25.1%}.ML__mathlive .slice-2-of-3{display:inline-flex;left:25%;overflow:hidden;position:absolute;width:50%}.ML__mathlive .slice-3-of-3{display:inline-flex;overflow:hidden;position:absolute;right:0;width:25.1%}.ML__mathlive .slice-1-of-1{display:inline-flex;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .nulldelimiter{display:inline-block;width:.12em}.ML__mathlive .op-group{display:inline-block}.ML__mathlive .op-symbol{position:relative}.ML__mathlive .op-symbol.small-op{font-family:KaTeX_Size1}.ML__mathlive .op-symbol.large-op{font-family:KaTeX_Size2}.ML__mathlive .accent>.vlist>span{text-align:center}.ML__mathlive .mtable .vertical-separator{box-sizing:border-box;display:inline-block;min-width:1px}.ML__mathlive .mtable .arraycolsep{display:inline-block}.ML__mathlive .mtable .col-align-m>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-c>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-l>.vlist-t{text-align:left}.ML__mathlive .mtable .col-align-r>.vlist-t{text-align:right}.ML__error{background-color:rgba(204,0,65,.1);background-image:radial-gradient(ellipse at center,#cc0041,transparent 70%);background-position:0 100%;background-repeat:repeat-x;background-size:3px 3px;display:inline-block;padding-bottom:3px}.ML__error>.ML__error{background:transparent;padding:0}.ML__composition{background:#fff1c2;color:#000;-webkit-text-decoration:underline var(--caret-color-computed,var(--ML__caret-color));text-decoration:underline var(--caret-color-computed,var(--ML__caret-color))}@media (prefers-color-scheme:dark){.ML__composition{background:#69571c;color:#fff}}.ML__placeholder{color:var(--placeholder-color,var(--ML__placeholder-color));font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;opacity:var(--placeholder-opacity,.4);padding-left:.4ex;padding-right:.4ex}.ML__placeholdercontainer{display:none}.ML__placeholdercontainer math-field{border:1px solid var(--editable-border);border-radius:4px;display:inline-block;min-width:32px;padding-left:4px;padding-right:4px;position:absolute;z-index:1001}.ML__isReadOnly .ML__placeholdercontainer{display:block}.ML__container{min-height:auto!important}';

    function Gc(Hc) {
        var Ic;
        'function' != typeof(null === (Ic = Hc.listeners) || void 0 === Ic ? void 0 : Ic.onSelectionDidChange) || Hc.suppressChangeNotifications || (Hc.suppressChangeNotifications = !0, Hc.listeners.onSelectionDidChange(Hc), Hc.suppressChangeNotifications = !1);
    }

    function Gc(Hc, Ic = {}) {
        if (Hc.suppressChangeNotifications || !Hc.mathfield.host)
            return !0;
        Hc.suppressChangeNotifications = !0;
        const Jc = Hc.mathfield.host.dispatchEvent(new InputEvent('beforeinput', {
            ...Ic,
            cancelable: !0,
            bubbles: !0,
            composed: !0
        }));
        return Hc.suppressChangeNotifications = !1, Jc;
    }

    function Gc(Hc, Ic) {
        !Hc.suppressChangeNotifications && Hc.mathfield.host && (Hc.suppressChangeNotifications = !0, Hc.mathfield.host.dispatchEvent(new InputEvent('input', {
            ...Ic,
            bubbles: !0,
            composed: !0
        })), Hc.suppressChangeNotifications = !1);
    }

    function Gc(Hc) {
        var Ic, Jc;
        const Kc = Hc.atoms.find(Hc => Hc instanceof Xb);
        return Kc && null !== (Jc = null === (Ic = Kc.body) || void 0 === Ic ? void 0 : Ic.filter(Hc => Hc instanceof Wb)) && void 0 !== Jc ? Jc : [];
    }

    function Gc(Hc, Ic) {
        var Jc;
        let Kc = 0,
            Lc = !1;
        const Mc = Number.isFinite(null == Ic ? void 0 : Ic.before) ? null !== (Jc = null == Ic ? void 0 : Ic.before) && void 0 !== Jc ? Jc : 0 : Hc.lastOffset;
        for (; Kc <= Mc && !Lc;) {
            const Nc = Hc.at(Kc);
            Lc = Nc instanceof Wb && Nc.isSuggestion, Lc || Kc++;
        }
        if (!Lc)
            return [
                void 0,
                void 0
            ];
        let Nc = Kc,
            Oc = !1;
        for (; Nc <= Mc && !Oc;) {
            const Pc = Hc.at(Nc);
            Oc = !(Pc instanceof Wb && Pc.isSuggestion), Oc || Nc++;
        }
        return [
            Kc - 1,
            Nc - 1
        ];
    }

    function Gc(Hc) {
        const Ic = Wi(Hc.model).filter(Hc => Hc.isSuggestion);
        if (0 !== Ic.length) {
            Hc.model.position = Hc.model.offsetOf(Ic[0].leftSibling);
            for (const Jc of Ic)
                Jc.parent.removeChild(Jc);
        }
    }

    function Gc(Hc, Ic) {
        var Jc;
        const {
            model: Kc
        } = Hc;
        Ui(Hc);
        for (const Lc of Wi(Kc))
            Lc.isError = !1;
        if (!Kc.selectionIsCollapsed)
            return void _Jc(Lc);
        const Mc = [];
        let Nc = Kc.at(Kc.position);
        for (; Nc && Nc instanceof Wb && /^[a-zA-Z\*]$/.test(Nc.value);)
            Nc = Nc.leftSibling;
        if (Nc && Nc instanceof Wb && '\\' === Nc.value)
            for (Mc.push(Nc), Nc = Nc.rightSibling; Nc && Nc instanceof Wb && /^[a-zA-Z\*]$/.test(Nc.value);)
                Mc.push(Nc), Nc = Nc.rightSibling;
        const Oc = Mc.map(Lc => Lc.value).join(''),
            Pc = Oc ? function(Qc, Rc) {
                var Sc, Tc;
                if ('\\' === Rc)
                    return [];
                if (!Rc.startsWith('\\'))
                    return [];
                const Uc = [];
                for (const Vc in l)
                    Vc.startsWith(Rc) && !l[Vc].infix && Uc.push({
                        match: Vc,
                        frequency: null !== (Sc = l[Vc].frequency) && void 0 !== Sc ? Sc : 0
                    });
                for (const Wc in j)
                    Wc.startsWith(Rc) && Uc.push({
                        match: Wc,
                        frequency: null !== (Tc = j[Wc].frequency) && void 0 !== Tc ? Tc : 0
                    });
                const Xc = Rc.substring(1);
                for (const Yc of Object.keys(Wc.options.macros))
                    Yc.startsWith(Xc) && Uc.push({
                        match: '\\' + Yc,
                        frequency: 0
                    });
                return Uc.sort((Wc, Yc) => {
                    var Zc, $c;
                    return Wc.frequency === Yc.frequency ? Wc.match.length === Yc.match.length ? Wc.match < Yc.match ? -1 : 1 : Wc.match.length - Yc.match.length : (null !== (Zc = Yc.frequency) && void 0 !== Zc ? Zc : 0) - (null !== ($c = Wc.frequency) && void 0 !== $c ? $c : 0);
                }), Uc.map(Wc => Wc.match);
            }(Lc, Oc) : [];
        if (0 === Pc.length)
            return /^\\[a-zA-Z\*]+$/.test(Oc) && Mc.forEach(Lc => {
                Lc.isError = !0;
            }), void _Jc(Lc);
        Lc.suggestionIndex = null !== (Jc = null == Ic ? void 0 : Ic.atIndex) && void 0 !== Jc ? Jc : 0, Lc.suggestionIndex < 0 && (Lc.suggestionIndex = Pc.length - 1);
        const _Qc = Pc[Lc.suggestionIndex % Pc.length];
        if (_Qc !== Oc) {
            const Rc = Mc[Mc.length - 1];
            Rc.parent.addChildrenAfter([..._Qc.slice(Oc.length - _Qc.length)].map(Rc => new Wb(Rc, Lc, {
                isSuggestion: !0
            })), Rc), _Jc(Lc);
        }! function(Rc, Sc) {
            if (0 === Sc.length || !1 === Rc.options.enablePopover)
                return void _Jc(Rc);
            Sc = Sc.slice(0, 10);
            let Tc = '<ul>';
            for (const Uc of Sc) {
                const Vc = Uc,
                    Wc = _Jc(Rc, Uc),
                    Xc = Oi(Rc.keybindings, Vc).join('<br>');
                Tc += `<li role="button" data-command="${ Vc }"><span class="ML__popover__latex">${ Vc }</span><span class="ML__popover__command">${ Wc }</span>`, Xc && (Tc += `<span class="ML__popover__keybinding">${ Xc }</span>`), Tc += '</li>';
            }
            Tc += '</ul>', Rc.popover = function(Vc, Wc) {
                return Vc.popover ? (Vc.popover.innerHTML = Vc.options.createHTML(Wc), Vc.popover) : (Vc.popover = ri('mathlive-popover-panel'), void 0 === _Gc && (_Gc = Si(Ec).toString(36)), _Hc = Mi(null, Ec, _Gc), _Ic = Mi(null, Fc, Si(Fc).toString(36)), Vc.popover.innerHTML = Vc.options.createHTML(Wc), Vc.popover);
            }(Rc, Tc);
            const Vc = Rc.popover.querySelectorAll('ul li');
            for (const Wc of Vc)
                Wc.addEventListener('pointerdown', Rc => {
                    Rc.preventDefault();
                }), Wc.addEventListener('click', Tc => {
                    _Gc(Rc, 'reject'), qc.insert('math', Rc.model, Wc.dataset.command, {
                        selectionMode: 'placeholder',
                        format: 'latex'
                    }), Rc.dirty = !0, Rc.scrollIntoView(), Rc.focus();
                });
            setTimeout(() => {
                const Xc = li(Rc.field);
                Xc && _Jc(Rc, Xc), Rc.popover && (Rc.popover.classList.add('is-visible'), Rc.popoverVisible = !0);
            }, 32);
        }(Lc, Pc);
    }

    function Gc(Hc) {
        const [Ic, Jc] = Ji(Hc, {
            before: Hc.position
        });
        if (void 0 === Ic || void 0 === Jc)
            return !1;
        let Kc = !1;
        return Hc.getAtoms([
            Ic,
            Jc
        ]).forEach(Hc => {
            Hc.isSuggestion && (Hc.isSuggestion = !1, Kc = !0);
        }), Kc;
    }

    function _Gc(Hc, Ic = 'accept', Jc) {
        var Kc, Lc;
        _Jc(Hc);
        const Mc = Hc.model.atoms.find(Hc => Hc instanceof Xb);
        if (!Mc)
            return !1;
        if ('accept-suggestion' === Ic) {
            const Nc = Wi(Hc.model).filter(Hc => Hc.isSuggestion);
            if (0 === Nc.length)
                return !1;
            for (const Oc of Nc)
                Oc.isSuggestion = !1;
            return Oc.model.position = Oc.model.offsetOf(Nc[Nc.length - 1]), !0;
        }
        const Nc = Wi(Hc.model).filter(Hc => !Hc.isSuggestion).map(Hc => Hc.value).join(''),
            Oc = Mc.leftSibling;
        return Mc.parent.removeChild(Mc), Hc.model.position = Hc.model.offsetOf(Oc), Hc.mode = null !== (Kc = null == Jc ? void 0 : Jc.mode) && void 0 !== Kc ? Kc : 'math', 'reject' === Ic || (qc.insert('math', Hc.model, Nc, {
            selectionMode: null !== (Lc = null == Jc ? void 0 : Jc.selectItem) && void 0 !== Lc && Lc ? 'item' : 'placeholder',
            format: 'latex'
        }), Hc.snapshot(), Hc.model.announce('replacement')), !0;
    }
    let _Gc;
    new class extends qc {
        createAtom(Hc, Ic, Jc) {
            return new Wb(Hc, Ic);
        }
        onPaste(Hc, Ic) {
            if (!Ic.clipboardData)
                return !1;
            let Jc = Ic.clipboardData.getData('text/x-latex');
            return Jc || (Jc = Ic.clipboardData.getData('text/plain')), !(!Jc || !ji(Hc.model, {
                inputType: 'insertFromPaste',
                data: Jc
            }) || (Hc.snapshot(), this.insert(Hc.model, Jc) && (Hi(Hc.model, {
                inputType: 'insertFromPaste'
            }), _Jc(Hc)), Ic.preventDefault(), Ic.stopPropagation(), 0));
        }
        insert(Hc, Ic, Jc) {
            if (!ji(Hc, {
                    data: Ic,
                    inputType: 'insertText'
                }))
                return !1;
            Jc || (Jc = {}), Jc.insertionMode || (Jc.insertionMode = 'replaceSelection'), Jc.selectionMode || (Jc.selectionMode = 'placeholder');
            const {
                suppressChangeNotifications: Kc
            } = Hc;
            Jc.suppressChangeNotifications && (Hc.suppressChangeNotifications = !0);
            const Lc = Hc.suppressChangeNotifications;
            Hc.suppressChangeNotifications = !0, 'replaceSelection' !== Jc.insertionMode || Hc.selectionIsCollapsed ? 'replaceAll' === Jc.insertionMode ? (Hc.root.setChildren([], 'body'), Hc.position = 0) : 'insertBefore' === Jc.insertionMode ? Hc.collapseSelection('backward') : 'insertAfter' === Jc.insertionMode && Hc.collapseSelection('forward') : Hc.deleteAtoms(Ca(Hc.selection));
            const Mc = [];
            for (const Nc of Ic)
                p.test(Nc) && Mc.push(new Wb(Nc, Hc.mathfield));
            let Oc = Hc.at(Hc.position);
            if (Oc instanceof Xb && (Oc = Oc.lastChild), !(Oc.parent instanceof Xb)) {
                const Pc = new Xb('', Hc.mathfield);
                Oc.parent.addChildAfter(Pc, Oc), Oc = Pc.firstChild;
            }
            const Pc = Oc.parent.addChildrenAfter(Mc, Oc);
            return Hc.suppressChangeNotifications = Lc, 'before' === Nc.selectionMode || ('item' === Nc.selectionMode ? Hc.setSelection(Hc.anchor, Hc.offsetOf(Pc)) : Pc && (Hc.position = Hc.offsetOf(Pc))), Hi(Hc, {
                data: Ic,
                inputType: 'insertText'
            }), Hc.suppressChangeNotifications = Kc, !0;
        }
        constructor() {
            super('latex');
        }
    }();
    let _Hc = null,
        _Ic = null;

    function _Jc(Kc, Lc) {
        const Mc = Kc,
            Nc = new pb('root', Mc);
        return Nc.body = Nt(Lc, Mc, {
            parseMode: 'math'
        }), je(Fe(Ve(new hb(Nc.render(new $({
            registers: Mc.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function Jc(Kc, Lc) {
        var Mc;
        if (Kc.element && Kc.element.mathfield === Kc && Kc.popover && Kc.popoverVisible)
            if (null == Lc ? void 0 : Lc.deferred)
                setTimeout(() => Jc(Kc), 100);
            else if ('latex' !== (null === (Mc = Kc.model.at(Kc.model.position)) || void 0 === Mc ? void 0 : Mc.type))
            _Jc(Kc);
        else {
            const Nc = li(Kc.field);
            Nc && _Jc(Kc, Nc);
        }
    }

    function _Jc(Kc, Lc) {
        if (_Pc(), !Kc.popover || !Kc.popoverVisible)
            return;
        const Mc = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
            Nc = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
            Oc = window.innerWidth - document.documentElement.clientWidth,
            Pc = window.innerHeight - document.documentElement.clientHeight,
            Qc = Kc.virtualKeyboard.height;
        Lc.x + Kc.popover.offsetWidth / 2 > Nc - Oc ? Kc.popover.style.left = Nc - Kc.popover.offsetWidth - Oc + 'px' : Lc.x - Kc.popover.offsetWidth / 2 < 0 ? Kc.popover.style.left = '0' : Kc.popover.style.left = Lc.x - Kc.popover.offsetWidth / 2 + 'px', Lc.y + Kc.popover.offsetHeight + 5 > Mc - Pc - Qc ? (Kc.popover.classList.add('ML__popover--reverse-direction'), Kc.popover.style.top = Lc.y - Lc.height - Kc.popover.offsetHeight - 5 + 'px') : (Kc.popover.classList.remove('ML__popover--reverse-direction'), Kc.popover.style.top = `${ Lc.y + 5 }px`);
    }

    function _Jc(Kc) {
        Kc.suggestionIndex = 0, Kc.popoverVisible = !1, Kc.popover && (Kc.popover.classList.remove('is-visible'), Kc.popover.innerHTML = '');
    }

    function Jc(Kc) {
        let Lc = 0;
        for (let Mc = 0; Mc < Kc.length; Mc++)
            Lc = 31 * Lc + Kc.charCodeAt(Mc), Lc |= 0;
        return Math.abs(Lc);
    }

    function _Jc(Kc, Lc) {
        Kc.dirty || (Kc.dirty = !0, requestAnimationFrame(() => {
            si(Kc) && Kc.dirty && (Kc.atomBoundsCache = new Map(), _Jc(Kc, Lc), Kc.atomBoundsCache = void 0);
        }));
    }

    function _Jc(Kc, Lc) {
        var Mc;
        if (_Pc(), !si(Kc))
            return;
        Lc = null != Lc ? Lc : {};
        const {
            model: Nc
        } = Kc;
        Nc.root.caret = '', Nc.root.isSelected = !1, Nc.root.containsCaret = !0;
        for (const Oc of Nc.atoms)
            Oc.caret = '', Oc.isSelected = !1, Oc.containsCaret = !1;
        const Pc = !Oc.options.readOnly && Oc.hasFocus();
        if (Nc.selectionIsCollapsed)
            Nc.at(Nc.position).caret = Pc ? Oc.mode : '';
        else {
            const Qc = Nc.getAtoms(Nc.selection, {
                includeChildren: !0
            });
            for (const Rc of Qc)
                Rc.isSelected = !0;
        }
        if (Pc) {
            let Qc = Nc.at(Nc.position).parent;
            for (; Qc;)
                Qc.containsCaret = !0, Qc = Qc.parent;
        }
        const Qc = function(Rc, Sc) {
                var Tc;
                return Sc = null != Sc ? Sc : {}, je(Ve(Rc.model.root.render(new $({
                    registers: Rc.registers,
                    atomIdsSettings: {
                        seed: Sc.forHighlighting ? ro(pb.serialize(Rc.model.root, {
                            expandMacro: !1,
                            defaultMode: Rc.options.defaultMode
                        })) : 'random',
                        groupNumbers: null !== (Tc = Sc.forHighlighting) && void 0 !== Tc && Tc
                    },
                    renderPlaceholder: Rc.options.readOnly ? (Sc, Tc) => {
                        if (Tc.placeholderId) {
                            const Uc = Rc.getPlaceholderField(Tc.placeholderId);
                            return Tc.createMathfieldBox(Sc, Uc, Tc.placeholderId);
                        }
                        return Tc.createBox(Sc);
                    } : void 0
                }, {
                    fontSize: 5,
                    letterShapeStyle: Rc.options.letterShapeStyle
                }, 'inline-math' === Rc.options.defaultMode ? 'textstyle' : 'displaystyle')), Rc.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(Oc, Lc),
            Rc = Oc.field,
            Sc = Rc.classList.contains('ML__focused');
        Sc && !Pc ? Rc.classList.remove('ML__focused') : !Sc && Pc && Rc.classList.add('ML__focused'), Rc.innerHTML = Oc.options.createHTML(Qc.toMarkup()), Oc.fieldContent = Rc.querySelector('.ML__mathlive'), Oc.accessibleNode.innerHTML = Oc.options.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' + Ua(Nc.root, Oc.options) + '</math>'), _Jc(Oc), Oc.options.readOnly && Oc.attachNestedMathfield(), null !== (Mc = Lc.interactive) && void 0 !== Mc && Mc || setTimeout(() => _Jc(Oc), 32), Oc.dirty = !1;
    }

    function _Jc(Kc) {
        _Pc();
        const Lc = Kc.field;
        if (!Lc)
            return;
        for (const Mc of Lc.querySelectorAll('.ML__selection, .ML__contains-highlight'))
            Mc.remove();
        if (!Mc.hasFocus())
            return;
        const Nc = Mc.model,
            Oc = parseFloat(getComputedStyle(Lc).width);
        let Pc = Lc.getBoundingClientRect().width / Oc;
        if (Pc = isNaN(Pc) ? 1 : Pc, Nc.selectionIsCollapsed) {
            setTimeout(() => ao(Mc), 32);
            let Qc = Nc.at(Nc.position);
            for (; Qc && (!Qc.containsCaret || !Qc.displayContainsHighlight);)
                Qc = Qc.parent;
            if ((null == Qc ? void 0 : Qc.containsCaret) && Qc.displayContainsHighlight) {
                const Rc = ci(Mc, pi(Mc, Qc));
                if (Rc) {
                    Rc.left /= Pc, Rc.right /= Pc, Rc.top /= Pc, Rc.bottom /= Pc;
                    const Sc = document.createElement('div');
                    Sc.classList.add('ML__contains-highlight'), Sc.style.position = 'absolute', Sc.style.left = `${ Rc.left }px`, Sc.style.top = `${ Rc.top }px`, Sc.style.width = `${ Math.ceil(Rc.right - Rc.left) }px`, Sc.style.height = `${ Math.ceil(Rc.bottom - Rc.top - 1) }px`, Lc.insertBefore(Sc, Lc.childNodes[0]);
                }
            }
        } else
            for (const Qc of function(Rc) {
                    let Sc = [];
                    for (const Tc of Rc) {
                        let Uc = !1;
                        for (const Vc of Sc)
                            if (Tc.left === Vc.left && Tc.right === Vc.right && Tc.top === Vc.top && Tc.bottom === Vc.bottom) {
                                Uc = !0;
                                break;
                            }
                        Uc || Sc.push(Tc);
                    }
                    Rc = Sc, Sc = [];
                    for (const Uc of Rc) {
                        let Vc = 0;
                        for (const Wc of Rc)
                            if (Uc.left >= Wc.left && Uc.right <= Wc.right && Uc.top >= Wc.top && Uc.bottom <= Wc.bottom && (Vc += 1, Vc > 1))
                                break;
                        1 === Vc && Wc.push(Uc);
                    }
                    return Sc;
                }(hi(Mc, {
                    excludeAtomsWithBackground: !0
                }))) {
                Qc.left /= Pc, Qc.right /= Pc, Qc.top /= Pc, Qc.bottom /= Pc;
                const Rc = document.createElement('div');
                Rc.classList.add('ML__selection'), Rc.style.position = 'absolute', Rc.style.left = `${ Qc.left }px`, Rc.style.top = `${ Qc.top }px`, Rc.style.width = `${ Math.ceil(Qc.right - Qc.left) }px`, Rc.style.height = `${ Math.ceil(Qc.bottom - Qc.top - 1) }px`, Lc.insertBefore(Rc, Lc.childNodes[0]);
            }
    }
    const Jc = {};

    function Kc(Lc, Mc) {
        Mc = null != Mc ? Mc : {
            target: 'mathfield',
            canUndo: !1
        };
        for (const Nc of Object.keys(Lc))
            Jc[Nc] = {
                ...Mc,
                fn: Lc[Nc]
            };
    }

    function Kc(Lc) {
        var Mc;
        let Nc;
        return Nc = _Oc(Lc) ? Lc[0] : Lc, Nc = Nc.replace(/-\w/g, Lc => Lc[1].toUpperCase()), null === (Mc = Jc[Nc]) || void 0 === Mc ? void 0 : Mc.target;
    }

    function Kc(Lc, Mc, Nc) {
        return Mc + ai(Nc, {
            ...Lc,
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {
                ...Lc.textToSpeechRulesOptions,
                markup: 'none'
            }
        });
    }

    function Kc(Lc, Mc) {
        var Nc, _Oc, _Pc;
        if (_Rc() && (null != Mc || (Mc = null !== (Nc = _wd().config) && void 0 !== Nc ? Nc : {}), Mc))
            if (Mc.speechEngine && 'local' !== Mc.speechEngine)
                if ('amazon' === Mc.speechEngine) {
                    if ('AWS' in window) {
                        const Qc = new globalThis.AWS.Polly({
                                apiVersion: '2016-06-10'
                            }),
                            _Rc = {
                                OutputFormat: 'mp3',
                                VoiceId: null !== (_Oc = Mc.speechEngineVoice) && void 0 !== _Oc ? _Oc : 'Joanna',
                                Engine: [
                                    'Amy',
                                    'Emma',
                                    'Brian',
                                    'Ivy',
                                    'Joanna',
                                    'Kendra',
                                    'Kimberly',
                                    'Salli',
                                    'Joey',
                                    'Justin',
                                    'Matthew'
                                ].includes(null !== (_Pc = Mc.speechEngineVoice) && void 0 !== _Pc ? _Pc : 'Joanna') ? 'neural' : 'standard',
                                Text: Lc,
                                TextType: 'ssml'
                            };
                        Qc.synthesizeSpeech(_Rc, (Lc, Mc) => {
                            if (Lc);
                            else if (null == Mc ? void 0 : Mc.AudioStream) {
                                const Sc = new Uint8Array(Mc.AudioStream),
                                    Tc = new Blob([Sc.buffer], {
                                        type: 'audio/mpeg'
                                    }),
                                    Uc = URL.createObjectURL(Tc);
                                new Audio(Uc).play().catch(Sc => {});
                            }
                        });
                    }
                } else
                    Mc.speechEngine;
        else {
            const Qc = new SpeechSynthesisUtterance(Lc);
            window.speechSynthesis.speak(Qc);
        }
    }

    function Kc(Lc) {
        if (Lc && (Lc.classList.remove('ML__highlight'), Lc.children))
            for (const Mc of Lc.children)
                Kc(Mc);
    }

    function Kc(Lc, Mc) {
        var Nc;
        Lc && (Mc && (null === (Nc = Lc.dataset) || void 0 === Nc ? void 0 : Nc.atomId) !== Mc ? (Lc.classList.remove('ML__highlight'), Lc.children && Lc.children.length > 0 && [...Lc.children].forEach(Lc => {
            Lc instanceof HTMLElement && Kc(Lc, Mc);
        })) : (Lc.classList.add('ML__highlight'), Lc.children && Lc.children.length > 0 && [...Lc.children].forEach(Lc => {
            Lc instanceof HTMLElement && Kc(Lc);
        })));
    }

    function Kc(Lc, Mc, Nc) {
        var Oc;
        if (!_Vc())
            return;
        if (null != Nc || (Nc = _wd().config), 'amazon' !== Nc.speechEngine)
            return void(Nc.speakHook && Nc.speakHook(Mc, Nc));
        if (!globalThis.AWS)
            return;
        const Pc = new globalThis.AWS.Polly({
                apiVersion: '2016-06-10'
            }),
            Qc = {
                OutputFormat: 'json',
                VoiceId: null !== (Oc = Nc.speechEngineVoice) && void 0 !== Oc ? Oc : 'Joanna',
                Engine: 'standard',
                Text: Mc,
                TextType: 'ssml',
                SpeechMarkTypes: ['ssml']
            };
        _wd().readAloudElement = Lc, Pc.synthesizeSpeech(Qc, (Lc, Mc) => {
            if (Lc)
                return;
            if (!(null == Mc ? void 0 : Mc.AudioStream))
                return;
            const Rc = new TextDecoder('utf-8').decode(new Uint8Array(Mc.AudioStream));
            _wd().readAloudMarks = Rc.split('\n').map(Lc => Lc ? JSON.parse(Lc) : {}), _wd().readAloudTokens = [];
            for (const Sc of _wd().readAloudMarks)
                Sc.value && _wd().readAloudTokens.push(Sc.value);
            _wd().readAloudCurrentMark = '', Qc.OutputFormat = 'mp3', Qc.SpeechMarkTypes = [], Pc.synthesizeSpeech(Qc, (Sc, Mc) => {
                if (Sc)
                    return;
                if (!(null == Mc ? void 0 : Mc.AudioStream))
                    return;
                const Tc = new Uint8Array(Mc.AudioStream),
                    Uc = new Blob([Tc.buffer], {
                        type: 'audio/mpeg'
                    }),
                    _Vc = URL.createObjectURL(Uc),
                    Wc = _wd();
                Wc.readAloudAudio ? Wc.readAloudAudio.pause() : (Wc.readAloudAudio = new Audio(), Wc.readAloudAudio.addEventListener('ended', () => {
                    const Xc = Wc.readAloudMathField;
                    Wc.readAloudStatus = 'ended', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                        bubbles: !0,
                        composed: !0
                    })), Xc ? (so(Xc), Wc.readAloudElement = null, Wc.readAloudMathField = null, Wc.readAloudTokens = [], Wc.readAloudMarks = [], Wc.readAloudCurrentMark = '') : fo(Wc.readAloudElement);
                }), Wc.readAloudAudio.addEventListener('timeupdate', () => {
                    let Xc = '';
                    const Yc = 1000 * Wc.readAloudAudio.currentTime + 100;
                    for (const Zc of Wc.readAloudMarks)
                        Zc.time < Yc && (Xc = Zc.value);
                    Wc.readAloudCurrentMark !== Xc && (Wc.readAloudCurrentToken = Xc, Xc && Xc === Wc.readAloudFinalToken ? Wc.readAloudAudio.pause() : (Wc.readAloudCurrentMark = Xc, yo(Wc.readAloudElement, Wc.readAloudCurrentMark)));
                })), Wc.readAloudAudio.src = _Vc, Wc.readAloudStatus = 'playing', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                    bubbles: !0,
                    composed: !0
                })), Wc.readAloudAudio.play();
            });
        });
    }

    function Kc(Lc, Mc) {
        var Nc, Oc, Pc;
        const Qc = _Kc(Lc, Object.keys(Lc));
        for (const Rc of Object.keys(Mc))
            switch (Rc) {
                case 'scriptDepth':
                    if (_Nc(Mc.scriptDepth))
                        Qc.scriptDepth = [
                            Mc.scriptDepth[0],
                            Mc.scriptDepth[1]
                        ];
                    else {
                        if ('number' != typeof Mc.scriptDepth)
                            throw new TypeError('Unexpected value for scriptDepth');
                        Qc.scriptDepth = [
                            Mc.scriptDepth,
                            Mc.scriptDepth
                        ];
                    }
                    break;
                case 'locale':
                    'auto' === Mc.locale ? Qc.locale = _Oc() ? navigator.language.slice(0, 5) : 'en' : Qc.locale = Mc.locale, c.locale = Qc.locale;
                    break;
                case 'strings':
                    c.merge(Mc.strings), Qc.strings = c.strings;
                    break;
                case 'virtualKeyboardLayout':
                    Qc.virtualKeyboardLayout = Mc.virtualKeyboardLayout;
                    break;
                case 'virtualKeyboardMode':
                    const Sc = Mc.virtualKeyboardMode.toLowerCase();
                    Qc.virtualKeyboardMode = 'auto' === Sc ? _Pc() ? 'onfocus' : 'off' : Sc;
                    break;
                case 'customVirtualKeyboardLayers':
                    Qc.customVirtualKeyboardLayers = {
                        ...Qc.customVirtualKeyboardLayers,
                        ...Mc.customVirtualKeyboardLayers
                    };
                    break;
                case 'customVirtualKeyboards':
                    Qc.customVirtualKeyboards = {
                        ...Qc.customVirtualKeyboards,
                        ...Mc.customVirtualKeyboards
                    };
                    break;
                case 'letterShapeStyle':
                    'auto' === Mc.letterShapeStyle ? c.locale.startsWith('fr') ? Qc.letterShapeStyle = 'french' : Qc.letterShapeStyle = 'tex' : Qc.letterShapeStyle = Mc.letterShapeStyle;
                    break;
                case 'plonkSound':
                    void 0 !== Mc.plonkSound && (Qc.plonkSound = Mc.plonkSound);
                    break;
                case 'keypressSound':
                    null === Mc.keypressSound ? Qc.keypressSound = {
                        default: null,
                        delete: null,
                        return: null,
                        spacebar: null
                    } : 'string' == typeof Mc.keypressSound ? Qc.keypressSound = {
                        delete: Mc.keypressSound,
                        return: Mc.keypressSound,
                        spacebar: Mc.keypressSound,
                        default: Mc.keypressSound
                    } : 'object' == typeof Mc.keypressSound && 'default' in Mc.keypressSound && (Qc.keypressSound = {
                        ...Mc.keypressSound
                    }, Qc.keypressSound.delete = null !== (Nc = Qc.keypressSound.delete) && void 0 !== Nc ? Nc : Mc.keypressSound.default, Qc.keypressSound.return = null !== (Oc = Qc.keypressSound.return) && void 0 !== Oc ? Oc : Mc.keypressSound.default, Qc.keypressSound.spacebar = null !== (Pc = Qc.keypressSound.spacebar) && void 0 !== Pc ? Pc : Mc.keypressSound.default);
                    break;
                case 'computeEngine':
                    Qc.computeEngine = Mc.computeEngine;
                    break;
                case 'virtualKeyboardContainer':
                    Qc.virtualKeyboardContainer = Mc.virtualKeyboardContainer;
                    break;
                case 'macros':
                    Qc.macros = J(Mc.macros);
                    break;
                default:
                    _Nc(Mc[Rc]) ? Qc[Rc] = [...Mc[Rc]] : 'object' == typeof Mc[Rc] ? Qc[Rc] = {
                        ...Mc[Rc]
                    } : Qc[Rc] = Mc[Rc];
            }
        return Qc;
    }

    function _Kc(Lc, Mc) {
        let Nc;
        Nc = 'string' == typeof Mc ? [Mc] : void 0 === Mc ? Object.keys(Lc) : Mc;
        const _Oc = {};
        for (const Pc of Nc)
            null === Lc[Pc] ? _Oc[Pc] = null : _Nc(Lc[Pc]) ? _Oc[Pc] = [...Lc[Pc]] : 'object' != typeof Lc[Pc] || Lc[Pc] instanceof Element || 'computeEngine' === Pc ? _Oc[Pc] = Lc[Pc] : _Oc[Pc] = {
                ...Lc[Pc]
            };
        return 'string' == typeof Pc ? _Oc[Pc] : _Oc;
    }
    uo({
        performWithFeedback: (tb, ub) => function(Kc, Lc) {
            Kc.focus(), Kc.options.keypressVibration && _Qc() && navigator.vibrate(3), 'moveToNextPlaceholder' === (Lc = Lc.replace(/-\w/g, Kc => Kc[1].toUpperCase())) || 'moveToPreviousPlaceholder' === Lc || 'complete' === Lc ? Kc.playSound('return') : 'deleteBackward' === Lc || 'deleteForward' === Lc || 'deletePreviousWord' === Lc || 'deleteNextWord' === Lc || 'deleteToGroupStart' === Lc || 'deleteToGroupEnd' === Lc || 'deleteToMathFieldStart' === Lc || 'deleteToMathFieldEnd' === Lc ? Kc.playSound('delete') : Kc.playSound('keypress');
            const Mc = Kc.executeCommand(Lc);
            return Kc.scrollIntoView(), Mc;
        }(tb, ub)
    }), uo({
        complete: Zi,
        nextSuggestion: function(Kc) {
            return Xi(Kc, {
                atIndex: Kc.suggestionIndex + 1
            }), !1;
        },
        previousSuggestion: function(Kc) {
            return Xi(Kc, {
                atIndex: Kc.suggestionIndex - 1
            }), !1;
        }
    }, {
        target: 'mathfield',
        category: 'autocomplete'
    }), uo({
        speak: (tb, ub, b) => function(Kc, Lc, Mc) {
            var _Nc, Oc;
            Mc = null != Mc ? Mc : {
                withHighlighting: !1
            };
            const {
                model: _Pc
            } = Kc, _Qc = function(Rc) {
                let Sc = null;
                switch (Rc) {
                    case 'all':
                    default:
                        Sc = _Pc.root;
                        break;
                    case 'selection':
                        Sc = _Pc.getAtoms(_Pc.selection);
                        break;
                    case 'left':
                        Sc = _Pc.getAtoms(_Pc.offsetOf(_Pc.at(_Pc.position).leftSibling), _Pc.position);
                        break;
                    case 'right':
                        Sc = _Pc.getAtoms(_Pc.position, _Pc.offsetOf(_Pc.at(_Pc.position).rightSibling));
                        break;
                    case 'group':
                        Sc = _Pc.getAtoms(_Pc.getSiblingsRange(_Pc.position));
                        break;
                    case 'parent': {
                        const {
                            parent: Tc
                        } = _Pc.at(_Pc.position);
                        Sc = Tc && 'root' !== Tc.type ? Tc : _Pc.root;
                        break;
                    }
                }
                return Sc;
            }(Lc);
            if (null === _Qc)
                return null === (Oc = (_Nc = Kc.options).speakHook) || void 0 === Oc || Oc.call(_Nc, function(Rc) {
                    let Sc = '';
                    switch (Rc) {
                        case 'all':
                        case 'group':
                        default:
                            break;
                        case 'selection':
                            Sc = 'no selection';
                            break;
                        case 'left':
                            Sc = 'at start';
                            break;
                        case 'right':
                            Sc = 'at end';
                            break;
                        case 'parent':
                            Sc = 'no parent';
                    }
                    return Sc;
                }(Lc), Kc.options), !1;
            const Rc = {
                ...Kc.options
            };
            (Mc.withHighlighting || 'amazon' === Rc.speechEngine) && (Rc.textToSpeechMarkup = globalThis.sre && 'sre' === Rc.textToSpeechRules ? 'ssml_step' : 'ssml'), Rc.textToSpeechMarkup || /firefox/i.test(navigator.userAgent) || (Rc.textToSpeechMarkup = 'ssml');
            const Sc = ai(_Qc, Rc);
            return _Wc() && Mc.withHighlighting ? (_wd().readAloudMathField = Kc, so(Kc, {
                forHighlighting: !0
            }), Kc.options.readAloudHook && Kc.options.readAloudHook(Kc.field, Sc, Kc.options)) : Kc.options.speakHook && Kc.options.speakHook(Sc, Rc), !1;
        }(tb, ub, b)
    }, {
        target: 'mathfield',
        category: 'speech'
    });
    const Kc = '<span style="width: 21px; margin-top: 4px;"><svg style="width: 21px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>';

    function Lc() {
        var Mc, Nc, Oc;
        return {
            readOnly: !1,
            createHTML: Mc => Mc,
            fontsDirectory: './fonts',
            soundsDirectory: './sounds',
            computeEngine: void 0,
            defaultMode: 'math',
            macros: H(),
            registers: {},
            colorMap: _ld,
            backgroundColorMap: _md,
            horizontalSpacingScale: 1,
            letterShapeStyle: c.locale.startsWith('fr') ? 'french' : 'tex',
            smartMode: !1,
            smartFence: !0,
            smartSuperscript: !0,
            scriptDepth: [
                1 / 0,
                1 / 0
            ],
            removeExtraneousParentheses: !0,
            mathModeSpace: '',
            decimalSeparator: '.',
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            enablePopover: !0,
            locale: c.locale,
            strings: c.strings,
            keybindings: Cc,
            inlineShortcuts: nc,
            inlineShortcutTimeout: 0,
            virtualKeyboardToggleGlyph: Kc,
            virtualKeyboardMode: 'auto',
            virtualKeyboards: 'all',
            virtualKeyboardLayout: 'auto',
            customVirtualKeyboardLayers: {},
            customVirtualKeyboards: {},
            virtualKeyboardTheme: _Wc() && /android|cros/i.test(navigator.userAgent) ? 'material' : 'apple',
            keypressVibration: !0,
            keypressSound: null,
            plonkSound: null,
            virtualKeyboardToolbar: 'default',
            virtualKeyboardContainer: null !== (Nc = null === (Mc = globalThis.document) || void 0 === Mc ? void 0 : Mc.body) && void 0 !== Nc ? Nc : null,
            useSharedVirtualKeyboard: !1,
            sharedVirtualKeyboardTargetOrigin: null === (Oc = globalThis.window) || void 0 === Oc ? void 0 : Oc.origin,
            originValidator: 'same-origin',
            textToSpeechRules: 'mathlive',
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {},
            speechEngine: 'local',
            speechEngineVoice: 'Joanna',
            speechEngineRate: '100%',
            speakHook: mo,
            readAloudHook: bo,
            onInlineShortcut: () => '',
            onExport: pc,
            value: ''
        };
    }

    function Lc(Mc) {
        return 'inline-math' === Mc.defaultMode ? 'math' : Mc.defaultMode;
    }
    var Lc, Mc, Nc = '@keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}.ML__caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:2px;border-right:2px solid var(--caret-color,var(--ML__caret-color));content:"";left:-1px;margin-right:-2px;position:relative}.ML__text-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:1px;border-right:1px solid var(--caret-color,var(--ML__caret-color));content:"";left:0;margin-right:-1px;position:relative}.ML__latex-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;color:var(--caret-color,var(--ML__caret-color));content:"_";margin-right:calc(-1ex - 2px);position:relative}.ML__container{--ML__selection-background-color:hsl(var(--hue,212),97%,85%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.1);--ML__contains-highlight-background-color:hsl(var(--hue,212),40%,95%);--ML__selection-color:currentColor;--ML__caret-color:hsl(var(--hue,212),40%,49%);--ML__smart-fence-color:currentColor;--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),40%,49%);align-items:flex-end;display:flex;flex-flow:row;isolation:isolate;justify-content:space-between;min-height:39px;touch-action:none;width:100%}@media (prefers-color-scheme:dark){.ML__container{--ML__selection-background-color:hsl(var(--hue,212),25%,45%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.2);--ML__contains-highlight-background-color:hsl(var(--hue,212),5%,34%);--ML__caret-color:hsl(var(--hue,212),60%,69%);--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),60%,69%)}}.ML__content{align-items:center;align-self:center;display:flex;overflow:hidden;padding:2px 0 2px 1px;position:relative;width:100%}.ML__virtual-keyboard-toggle{box-sizing:border-box;display:none}.ML__virtual-keyboard-toggle>span{align-items:center;align-self:center;display:flex}.ML__virtual-keyboard-toggle.is-visible{fill:currentColor;align-items:center;align-self:center;background:transparent;border:1px solid transparent;border-radius:8px;color:var(--primary,hsl(var(--hue,212),40%,50%));cursor:pointer;display:flex;flex-direction:column;flex-shrink:0;height:34px;justify-content:center;margin-right:4px;padding:0;transition:background .2s cubic-bezier(.64,.09,.08,1);width:34px}.ML__virtual-keyboard-toggle.is-visible:hover{fill:currentColor;background:hsla(0,0%,70%,.5);border-radius:8px;color:#333}.ML__textarea__textarea{clip:rect(0 0 0 0);border:none;display:inline-block;font-family:KaTeX_Main;font-size:1em;height:1px;outline:none;position:absolute;resize:none;transform:scale(0);width:1px}.ML__focused .ML__text{background:var(--highlight-text,var(--ML__text-highlight-background-color))}.ML__smart-fence__close{color:var(--smart-fence-color,var(--ML__smart-fence-color));opacity:var(--smart-fence-opacity,.5)}.ML__focused .ML__selection{background:var(--selection-background-color-focused,var(--selection-background-color,var(--ML__selection-background-color)))!important}.ML__focused .ML__selected,.ML__focused .ML__selected .ML__contains-caret,.ML__focused .ML__selected .ML__placeholder,.ML__focused .ML__selected .ML__smart-fence__close{color:var(--selection-color-focused,var(--selection-color,var(--ML__selection-color)))!important}.ML__selection{background:var(--selection-background-color,var(--ML__selection-background-color))!important;box-sizing:border-box}.ML__selected,.ML__selected .ML__contains-caret,.ML__selected .ML__placeholder,.ML__selected .ML__smart-fence__close{color:var(--selection-color,var(--ML__selection-color));opacity:1}.ML__contains-caret .ML__sqrt-line,.ML__contains-caret .ML__sqrt-sign,.ML__contains-caret.ML__close,.ML__contains-caret.ML__open,.ML__contains-caret>.ML__close,.ML__contains-caret>.ML__open{color:var(--caret-color,var(--ML__caret-color))}.ML__contains-highlight{background:var(--contains-highlight-backround-color,var(--ML__contains-highlight));box-sizing:border-box}.ML__latex{color:var(--latex-color,var(--ML__latex-color));font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace;font-weight:400}.ML__suggestion{opacity:.5}.ML__virtual-keyboard-toggle.is-visible.is-pressed:hover{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__virtual-keyboard-toggle:focus{border:2px solid var(--primary,hsl(var(--hue,212),40%,50%));border-radius:8px;outline:none}.ML__virtual-keyboard-toggle.is-active,.ML__virtual-keyboard-toggle.is-active:hover,.ML__virtual-keyboard-toggle.is-pressed{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__tooltip-container{position:relative;transform:scale(0)}.ML__tooltip-container .ML__tooltip-content{background:#616161;border-radius:8px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;display:inline-table;max-width:400px;opacity:0;padding:12px;position:fixed;transition:opacity .15s cubic-bezier(.4,0,1,1);visibility:hidden;width:max-content;z-index:2}.ML__tooltip-container .ML__tooltip-content .ML__text{white-space:normal}.ML__tooltip-container .ML__tooltip-content .ML__base{display:contents}.ML__tooltip-container:hover .ML__tooltip-content{font-size:.75em;opacity:1;transform:scale(1) translateY(3em);visibility:visible}[data-ML__tooltip]{position:relative}[data-ML__tooltip][data-placement=top]:after{bottom:100%;top:inherit}[data-ML__tooltip]:after{background:#616161;border-radius:2px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-ML__tooltip);display:none;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;right:110%;text-align:center;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1);width:max-content;z-index:2}@media only screen and (max-width:767px){[data-ML__tooltip]:after{font-size:16px;padding:8px 16px}}:not(.tracking) [data-ML__tooltip]:hover{position:relative}:not(.tracking) [data-ML__tooltip]:hover:after{display:inline-table;opacity:1;transform:scale(1);visibility:visible}[data-ML__tooltip][data-delay]:after{transition-delay:0s}[data-ML__tooltip][data-delay]:hover:after{transition-delay:1s}';
    let Oc = null;

    function Pc(Qc) {
        if (/^(?:[a-z+]+:)?\/\//i.test(Qc))
            return new URL(Qc).href;
        if (null === Oc)
            try {
                const Rc = new XMLHttpRequest();
                Rc.open('HEAD', _Pc, !1), Rc.send(null), 200 === Rc.status && (Oc = Rc.responseURL);
            } catch (Qc) {}
        return Oc ? new URL(Qc, Oc).href : '';
    }
    const _Pc = (null === (Mc = null === (Lc = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === Lc ? void 0 : Lc.currentScript) || void 0 === Mc ? void 0 : Mc.src) || function() {
        const Qc = String(new Error().stack).replace(/^Error.*\n/, '').split('\n');
        if (0 === Qc.length)
            return '';
        let Rc = Qc[1],
            Sc = Rc.match(/http.*\.ts[\?:]/);
        return Sc && (Rc = Qc[2]), Sc = Rc.match(/(https?:.*):[0-9]+:[0-9]+/), Sc || (Sc = Rc.match(/at (.*(\.ts))[\?:]/), Sc || (Sc = Rc.match(/at (.*(\.mjs|\.js))[\?:]/))), Sc ? Sc[1] : '';
    }();
    async function Qc(Rc) {
        var Sc;
        if (_Wc() && !document.body.classList.contains('ML__fonts-loading') && (null === (Sc = getComputedStyle(document.documentElement).getPropertyValue('--ML__static-fonts')) || void 0 === Sc || !Sc) && (document.body.classList.remove('ML__fonts-did-not-load'), 'fonts' in document)) {
            const Tc = [
                    'KaTeX_Main',
                    'KaTeX_Math',
                    'KaTeX_AMS',
                    'KaTeX_Caligraphic',
                    'KaTeX_Fraktur',
                    'KaTeX_SansSerif',
                    'KaTeX_Script',
                    'KaTeX_Typewriter',
                    'KaTeX_Size1',
                    'KaTeX_Size2',
                    'KaTeX_Size3',
                    'KaTeX_Size4'
                ],
                Uc = Array.from(document.fonts).map(Rc => Rc.family);
            if (Tc.every(Rc => Uc.includes(Rc)))
                return;
            const Vc = Co(null != Rc ? Rc : './fonts');
            if (!Vc)
                return;
            document.body.classList.add('ML__fonts-loading');
            const _Wc = [
                ['KaTeX_Main-Regular'],
                [
                    'KaTeX_Main-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                ['KaTeX_AMS-Regular'],
                ['KaTeX_Caligraphic-Regular'],
                [
                    'KaTeX_Caligraphic-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                ['KaTeX_Fraktur-Regular'],
                [
                    'KaTeX_Fraktur-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Regular',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_SansSerif-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Italic',
                    {
                        style: 'italic'
                    }
                ],
                ['KaTeX_Script-Regular'],
                ['KaTeX_Typewriter-Regular'],
                ['KaTeX_Size1-Regular'],
                ['KaTeX_Size2-Regular'],
                ['KaTeX_Size3-Regular'],
                ['KaTeX_Size4-Regular']
            ].map(Rc => function(Xc, Yc, Zc = {}) {
                return new FontFace(Xc, `url(${ Yc }.woff2) format('woff2')`, Zc);
            }(Rc[0].replace(/-[a-zA-Z]+$/, ''), Vc + '/' + Rc[0], Rc[1]));
            try {
                (await Promise.all(_Wc.map(Rc => {
                    try {
                        return Rc.load();
                    } catch {}
                }))).forEach(Rc => document.fonts.add(Rc));
            } catch (Rc) {
                document.body.classList.add('ML__fonts-did-not-load');
            }
            document.body.classList.remove('ML__fonts-loading');
        }
    }

    function Qc(Rc) {
        return 'number' == typeof Rc && !Number.isNaN(Rc);
    }

    function Qc(Rc) {
        return Array.isArray(Rc) && 2 === Rc.length;
    }

    function Qc(Rc) {
        return null != Rc && 'object' == typeof Rc && 'ranges' in Rc && Array.isArray(Rc.ranges);
    }
    const Qc = {
            '\\ne': '\u2260',
            '\\neq': '\u2260',
            '\u2212': '-',
            '-': '-',
            '\\alpha': 'alpha',
            '\\beta': 'beta',
            '\\gamma': 'gamma',
            '\\delta': 'delta',
            '\\epsilon': 'epsilon',
            '\\varepsilon': 'varepsilon',
            '\\zeta': 'zeta',
            '\\eta': 'eta',
            '\\theta': 'theta',
            '\\vartheta': 'vartheta',
            '\\iota': 'iota',
            '\\kappa': 'kappa',
            '\\lambda': 'lambda',
            '\\mu': 'mu',
            '\\nu': 'nu',
            '\\xi': 'xi',
            '\\pi': 'pi',
            '\\rho': 'rho',
            '\\sigma': 'sigma',
            '\\tau': 'tau',
            '\\upsilon': 'upsilon',
            '\\phi': 'phi',
            '\\varphi': 'varphi',
            '\\chi': 'chi',
            '\\psi': 'psi',
            '\\omega': 'omega',
            '\\Gamma': 'Gamma',
            '\\Delta': 'Delta',
            '\\Theta': 'Theta',
            '\\Lambda': 'Lambda',
            '\\Xi': 'Xi',
            '\\Pi': 'Pi',
            '\\Sigma': 'Sigma',
            '\\Phi': 'Phi',
            '\\Psi': 'Psi',
            '\\Omega': 'Omega',
            '\\exponentialE': 'e',
            '\\imaginaryI': 'i',
            '\\imaginaryJ': 'j',
            '\\!': ' ',
            '\\,': ' ',
            '\\:': ' ',
            '\\;': ' ',
            '\\enskip': ' ',
            '\\enspace': ' ',
            '\\qquad': ' ',
            '\\quad': ' '
        },
        Rc = {
            '\\pm': '+-',
            '\\times': 'xx',
            '\\colon': ':',
            '\\vert': '|',
            '\\Vert': '||',
            '\\mid': '|',
            '\\lbrace': '{',
            '\\rbrace': '}',
            '\\lparen': '(',
            '\\rparen': ')',
            '\\langle': '(:',
            '\\rangle': ':)'
        };

    function Sc(Tc) {
        var Uc, Vc, Wc, Xc, Yc, Zc, $c, ad, bd, cd, dd, ed, fd;
        if (!Tc)
            return '';
        if (_id(Tc)) {
            if (0 === Tc.length)
                return '';
            if ('first' === Tc[0].type && (Tc = Tc.slice(1)), 0 === Tc.length)
                return '';
            let gd = '';
            if ('latex' === Tc[0].mode)
                for (const hd of Tc)
                    gd += Sc(hd);
            else if ('text' === Tc[0].mode) {
                let _id = 0;
                for (gd = '"';
                    'text' === (null === (hd = Tc[_id]) || void 0 === hd ? void 0 : hd.mode);)
                    gd += Tc[_id].body ? Sc(Tc[_id].body) : Tc[_id].value, _id++;
                gd += '"' + Sc(Tc.slice(_id));
            } else if ('math' === Tc[0].mode) {
                let id = 0;
                for (; Tc[id] && 'math' === Tc[id].mode;)
                    gd += Sc(Tc[id]), id++;
                gd += Sc(Tc.slice(id));
            }
            return gd.trim();
        }
        if ('text' === Tc.mode)
            return '"' + Tc.value + '"';
        let gd = '';
        const {
            command: hd
        } = Tc;
        let id;
        switch (Tc.type) {
            case 'first':
                return '';
            case 'group':
            case 'root':
                gd = null !== (Vc = Qc[hd]) && void 0 !== Vc ? Vc : Sc(Tc.body);
                break;
            case 'genfrac': {
                const jd = Tc;
                (jd.leftDelim || jd.rightDelim) && (gd += '.' !== jd.leftDelim && jd.leftDelim ? jd.leftDelim : '{:'), jd.hasBarLine ? (gd += '(', gd += Sc(jd.above), gd += ')/(', gd += Sc(jd.below), gd += ')') : (gd += '(' + Sc(jd.above) + '),', gd += '(' + Sc(jd.below) + ')'), (jd.leftDelim || jd.rightDelim) && (gd += '.' !== jd.rightDelim && jd.rightDelim ? jd.rightDelim : '{:');
            }
            break;
            case 'surd':
                gd += Tc.hasEmptyBranch('above') ? 'sqrt(' + Sc(Tc.body) + ')' : 'root(' + Sc(Tc.above) + ')(' + Sc(Tc.body) + ')';
                break;
            case 'latex':
                gd = Tc.value;
                break;
            case 'leftright': {
                const jd = Tc;
                gd += '.' !== jd.leftDelim && jd.leftDelim ? jd.leftDelim : '{:', gd += Sc(jd.body), gd += '.' !== jd.rightDelim && jd.rightDelim ? jd.rightDelim : ':}';
            }
            break;
            case 'sizeddelim':
            case 'delim':
            case 'overlap':
            case 'overunder':
            case 'box':
                break;
            case 'mord':
                gd = null !== (Xc = null !== (Wc = Qc[hd]) && void 0 !== Wc ? Wc : hd) && void 0 !== Xc ? Xc : 'string' == typeof Tc.value ? Tc.value : '', gd.startsWith('\\') && (gd += ' '), id = hd ? hd.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null, id ? gd = String.fromCodePoint(Number.parseInt('0x' + id[1])) : gd.length > 0 && gd.startsWith('\\') && (gd = 'string' == typeof Tc.value ? Tc.value.charAt(0) : Tc.command);
                break;
            case 'mbin':
            case 'mrel':
            case 'minner':
                gd = null !== (Zc = null !== (Yc = Qc[hd]) && void 0 !== Yc ? Yc : Rc[hd]) && void 0 !== Zc ? Zc : Tc.value;
                break;
            case 'mopen':
            case 'mclose':
                gd += Tc.value;
                break;
            case 'mpunct':
                gd = null !== ($c = Rc[hd]) && void 0 !== $c ? $c : hd;
                break;
            case 'mop':
                '\u200B' !== Tc.value && (gd = '', gd += '\\operatorname' === hd ? Sc(Tc.body) : null !== (ad = Tc.value) && void 0 !== ad ? ad : hd, gd += ' ');
                break;
            case 'array':
                const jd = Tc.array,
                    kd = Tc.environmentName,
                    _ld = null !== (bd = {
                        bmatrix: [
                            '[',
                            ']'
                        ],
                        'bmatrix*': [
                            '[',
                            ']'
                        ]
                    } [kd]) && void 0 !== bd ? bd : [
                        '(',
                        ')'
                    ],
                    _md = [];
                for (const nd of jd) {
                    const od = [];
                    for (const pd of nd)
                        od.push(_ld[0] + Sc(pd) + _ld[1]);
                    _md.push(od.join(','));
                }
                const od = null !== (cd = {
                    bmatrix: [
                        '[',
                        ']'
                    ],
                    'bmatrix*': [
                        '[',
                        ']'
                    ],
                    cases: [
                        '{',
                        ':}'
                    ]
                } [kd]) && void 0 !== cd ? cd : [
                    '(',
                    ')'
                ];
                gd = od[0] + _md.join(',') + od[1];
                break;
            case 'spacing':
                gd = null !== (dd = Qc[hd]) && void 0 !== dd ? dd : ' ';
                break;
            case 'enclose':
                gd = '(' + Sc(nd.body) + ')';
                break;
            case 'space':
                gd = ' ';
                break;
            case 'msubsup':
                gd = '';
                break;
            case 'macro':
                gd = null !== (fd = null !== (ed = Qc[hd]) && void 0 !== ed ? ed : Rc[hd]) && void 0 !== fd ? fd : Sc(nd.body);
        }
        if (!Tc.hasEmptyBranch('subscript')) {
            gd += '_';
            const jd = Sc(Tc.subscript);
            gd += jd.length > 1 ? '(' + jd + ')' : jd;
        }
        if (!Tc.hasEmptyBranch('superscript')) {
            gd += '^';
            const jd = Sc(Tc.superscript);
            gd += jd.length > 1 ? '(' + jd + ')' : jd;
        }
        return gd;
    }

    function Sc(Tc) {
        let Uc;
        if ('body' === Tc.treeBranch)
            Uc = {
                enclose: 'cross out',
                leftright: 'delimiter',
                surd: 'square root',
                root: 'math field',
                mop: 'operator'
            } [Tc.type];
        else if ('genfrac' === Tc.parent.type) {
            if ('above' === Tc.treeBranch)
                return 'numerator';
            if ('below' === Tc.treeBranch)
                return 'denominator';
        } else
            'surd' === Tc.parent.type ? 'above' === Tc.treeBranch && (Uc = 'index') : 'superscript' === Tc.treeBranch ? Uc = 'superscript' : 'subscript' === Tc.treeBranch && (Uc = 'subscript');
        return null != Uc ? Uc : 'parent';
    }
    class Sc {
        get atoms() {
            return this.root.children;
        }
        get selection() {
            return this._selection;
        }
        set selection(Tc) {
            this.setSelection(Tc);
        }
        setSelection(Tc, Uc) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Vc = this.normalizeSelection(Tc, Uc);
                if (void 0 === Vc)
                    throw new TypeError('Invalid selection');
                if (1 === Vc.ranges.length && Vc.ranges[0][0] === Vc.ranges[0][1]) {
                    const Wc = Vc.ranges[0][0];
                    this._position = Wc, this._anchor = Wc, this._selection = Vc;
                } else {
                    const Wc = Ca(Vc);
                    'backward' === Vc.direction ? [this._position, this._anchor] = Wc : [this._anchor, this._position] = Wc;
                    const Xc = this.at(Wc[0] + 1),
                        Yc = this.at(Wc[1]),
                        Zc = pb.commonAncestor(Xc, Yc);
                    'array' === (null == Zc ? void 0 : Zc.type) && Xc.parent === Zc && Yc.parent, this._selection = {
                        ranges: [Wc],
                        direction: Vc.direction
                    };
                }
            });
        }
        setPositionHandlingPlaceholder(Tc) {
            var Uc, Vc, Wc;
            'placeholder' === (null === (Uc = this.at(Tc)) || void 0 === Uc ? void 0 : Uc.type) ? this.setSelection(Tc - 1, Tc): 'placeholder' === (null === (Wc = null === (Vc = this.at(Tc)) || void 0 === Vc ? void 0 : Vc.rightSibling) || void 0 === Wc ? void 0 : Wc.type) ? this.setSelection(Tc, Tc + 1) : this.position = Tc;
        }
        getState() {
            return {
                content: this.root.toJson(),
                selection: this.selection
            };
        }
        setState(Tc, Uc) {
            var Vc;
            const Wc = this.suppressChangeNotifications;
            this.suppressChangeNotifications = null === (Vc = null == Uc ? void 0 : Uc.suppressChangeNotifications) || void 0 === Vc || Vc;
            let Xc = {};
            'undo' === (null == Uc ? void 0 : Uc.type) && (Xc = {
                inputType: 'historyUndo'
            }), 'redo' === (null == Uc ? void 0 : Uc.type) && (Xc = {
                inputType: 'historyRedo'
            }), ji(this, Xc) && (this.root = ga(Tc.content, this.mathfield), this.selection = Tc.selection, Hi(this, Xc)), this.suppressChangeNotifications = Wc;
        }
        get position() {
            return this._position;
        }
        set position(Tc) {
            this.setSelection(Tc, Tc);
        }
        get anchor() {
            return this._anchor;
        }
        get selectionIsCollapsed() {
            return this._anchor === this._position;
        }
        get selectionIsPlaceholder() {
            return 1 === Math.abs(this._anchor - this._position) && 'placeholder' === this.at(Math.max(this._anchor, this._position)).type;
        }
        collapseSelection(Tc = 'forward') {
            return this._anchor !== this._position && (this.position = 'backward' === Tc ? Math.min(this._anchor, this._position) : Math.max(this._anchor, this._position), !0);
        }
        get lastOffset() {
            return this.atoms.length - 1;
        }
        at(Tc) {
            return this.atoms[Tc];
        }
        offsetOf(Tc) {
            return this.atoms.indexOf(Tc);
        }
        getSiblingsRange(Tc) {
            const Uc = this.at(Tc),
                {
                    parent: Vc
                } = Uc;
            if (!Vc)
                return [
                    0,
                    this.lastOffset
                ];
            const Wc = Uc.parent.branch(Uc.treeBranch);
            return [
                this.offsetOf(Wc[0]),
                this.offsetOf(Wc[Wc.length - 1])
            ];
        }
        getBranchRange(Tc, Uc) {
            const Vc = this.at(Tc).branch(Uc);
            return [
                this.offsetOf(Vc[0]),
                this.offsetOf(Vc[Vc.length - 1])
            ];
        }
        getAtoms(Tc, Uc, Vc) {
            var Wc, Xc;
            let Yc, Zc, $c = null != Vc ? Vc : {};
            if (Bo(Tc)) {
                if ($c = null !== (Wc = Uc) && void 0 !== Wc ? Wc : {}, Tc.ranges.length > 1)
                    return Tc.ranges.reduce((Tc, Uc) => [
                        ...Tc,
                        ...this.getAtoms(Uc, $c)
                    ], []);
                Tc = Tc.ranges[0];
            }
            if (To(Tc)) {
                if (Yc = Tc, !To(Uc))
                    return [];
                Zc = Uc;
            } else
                [ad, bd] = Tc, $c = null !== (Xc = Uc) && void 0 !== Xc ? Xc : {};
            if (!Number.isFinite(Yc))
                return [];
            void 0 === $c.includeChildren && ($c.includeChildren = !1), Yc < 0 && (Yc = this.lastOffset - Yc + 1), Zc < 0 && (Zc = this.lastOffset - Zc + 1);
            const ad = Math.min(Yc, Zc) + 1,
                bd = Math.max(Yc, Zc);
            if (1 === ad && bd === this.lastOffset)
                return [this.root];
            let cd = [];
            for (let dd = ad; dd <= bd; dd++) {
                const ed = this.atoms[dd];
                _Tc(this, ed, ad, bd) && cd.push(ed);
            }
            return $c.includeChildren || (cd = cd.filter(dd => {
                let ed = !1,
                    {
                        parent: fd
                    } = dd;
                for (; fd && !ed;)
                    ed = _Tc(this, fd, ad, bd), fd = fd.parent;
                return !ed;
            })), cd;
        }
        getAllAtoms(Tc) {
            const Uc = [],
                Vc = this.lastOffset;
            for (let Wc = Tc; Wc <= Vc; Wc++)
                Uc.push(this.atoms[Wc]);
            for (let Xc = 0; Xc < Tc; Xc++)
                Uc.push(this.atoms[Xc]);
            return Uc;
        }
        extractAtoms(Tc) {
            let Uc = this.getAtoms(Tc);
            1 === Uc.length && 'root' === Uc[0].type && (Uc = Uc[0].children);
            for (const Vc of Uc)
                Vc.parent.removeChild(Vc);
            return Uc;
        }
        deleteAtoms(Tc) {
            this.extractAtoms(Tc), this.position = Tc[0];
        }
        atomToString(Tc, Uc) {
            const Vc = null != Uc ? Uc : 'latex';
            if (Vc.startsWith('latex'))
                return db.serialize([Tc], {
                    expandMacro: 'latex-expanded' === Vc,
                    skipStyles: 'latex-unstyled' === Vc,
                    defaultMode: this.mathfield.options.defaultMode
                });
            if ('math-ml' === Vc)
                return Ua(Tc, this.mathfield.options);
            if ('spoken' === Vc)
                return ai(Tc, this.mathfield.options);
            if ('spoken-text' === Vc) {
                const Wc = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = '';
                const Xc = ai(Tc, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Wc, Xc;
            }
            if ('spoken-ssml' === Vc || 'spoken-ssml-with-highlighting' === Vc) {
                const Wc = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = 'ssml';
                const Xc = ai(Tc, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Wc, Xc;
            }
            if ('math-json' === Vc) {
                if (!this.mathfield.computeEngine)
                    return '';
                try {
                    const Wc = this.mathfield.computeEngine.parse(pb.serialize(Tc, {
                        expandMacro: !1,
                        defaultMode: 'math'
                    }));
                    return JSON.stringify(Wc.json);
                } catch (Tc) {
                    return JSON.stringify([
                        'Error',
                        'Nothing',
                        `'${ Tc.toString() }'`
                    ]);
                }
            }
            return 'ascii-math' === Vc ? $o(Tc) : '';
        }
        getValue(Tc, Uc, Vc) {
            if (void 0 === Tc)
                return this.atomToString(this.root, 'latex');
            if ('string' == typeof Tc)
                return this.atomToString(this.root, Tc);
            let Wc, Xc;
            if (To(Tc) && To(Uc) ? (Wc = [this.normalizeRange([
                    Tc,
                    Uc
                ])], Xc = null != Vc ? Vc : 'latex') : zo(Tc) ? (Wc = [this.normalizeRange(Tc)], Xc = Uc) : Bo(Tc) ? (Wc = Tc.ranges, Xc = Uc) : (Wc = [], Xc = 'latex'), Xc.startsWith('latex')) {
                const Yc = {
                    expandMacro: 'latex-expanded' === Xc,
                    skipStyles: 'latex-unstyled' === Xc,
                    defaultMode: this.mathfield.options.defaultMode
                };
                return at(Wc.map(Uc => pb.serialize(this.getAtoms(Uc), Yc)));
            }
            return Wc.map(Tc => this.getAtoms(Tc).map(Tc => this.atomToString(Tc, Xc)).join('')).join('');
        }
        extendSelection(Tc) {
            let Uc = this._anchor;
            if ('forward' === Tc) {
                let Vc = this._position;
                do {
                    let Wc = this.at(Vc + 1);
                    if (null == Wc ? void 0 : Wc.inCaptureSelection) {
                        for (; !Wc.captureSelection;)
                            Wc = Wc.parent;
                        Vc = this.offsetOf(null == Wc ? void 0 : Wc.lastChild) + 1;
                    } else
                        Vc += 1;
                } while (Vc <= this.lastOffset && this.at(Vc).isFirstSibling);
                return Vc === Uc - 1 && 'first' === this.at(Uc).type && (Vc = Uc), this.extendSelectionTo(Uc, Vc);
            }
            let Vc = this._position - 1;
            if (Vc < 0)
                return !1;
            for (; Vc >= 0 && this.at(Vc).isLastSibling;) {
                let Wc = this.at(Vc);
                if (null == Wc ? void 0 : Wc.inCaptureSelection) {
                    for (; !Wc.captureSelection;)
                        Wc = Wc.parent;
                    Vc = this.offsetOf(Wc.firstChild) - 1;
                } else
                    Vc -= 1;
            }
            return Vc < 0 && (Vc = 0), Vc === Uc + 1 && 'first' === this.at(Vc).type && (Uc = Vc), this.extendSelectionTo(Uc, Vc);
        }
        extendSelectionTo(Tc, Uc) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Vc = this.normalizeRange([
                    Tc,
                    Uc
                ]);
                let [Wc, Xc] = Vc, {
                    parent: Yc
                } = this.at(Xc);
                if (Yc && ('genfrac' === Yc.type || 'msubsup' === Yc.type))
                    for (; Yc !== this.root && _Tc(this, Yc, [
                            Wc,
                            Xc
                        ]);)
                        Xc = this.offsetOf(Yc), Yc = Yc.parent;
                for (Yc = this.at(Wc).parent; Yc !== this.root && _Tc(this, Yc, [
                        Wc,
                        Xc
                    ]);)
                    Wc = this.offsetOf(Yc.leftSibling), Yc = Yc.parent;
                if (Yc = this.at(Xc).parent, 'genfrac' === (null == Yc ? void 0 : Yc.type))
                    for (; Yc !== this.root && _Tc(this, Yc, [
                            Wc,
                            Xc
                        ]);)
                        Xc = this.offsetOf(Yc), Yc = Yc.parent;
                this._position = this.normalizeOffset(Uc), this._selection = {
                    ranges: [
                        [
                            Wc,
                            Xc
                        ]
                    ],
                    direction: 'none'
                };
            });
        }
        setListeners(Tc) {
            this.listeners = Tc;
        }
        announce(Tc, Uc, Vc = []) {
            var Wc, Xc;
            null === (Xc = null === (Wc = this.mathfield.host) || void 0 === Wc ? void 0 : Wc.dispatchEvent(new CustomEvent('announce', {
                detail: {
                    command: Tc,
                    previousPosition: Uc,
                    atoms: Vc
                },
                cancelable: !0,
                bubbles: !0,
                composed: !0
            }))) || void 0 === Xc || Xc || function(Yc, Zc, $c, ad) {
                let bd = '';
                'plonk' === Zc ? (Yc.playSound('plonk'), Yc.flushInlineShortcutBuffer()) : 'delete' === Zc ? bd = ho(Yc.options, 'deleted: ', ad) : 'focus' === Zc || Zc.includes('move') ? bd = function(cd, dd) {
                    if (Number.isNaN(dd))
                        return '';
                    const ed = cd.at(dd);
                    if (!ed)
                        return '';
                    if (ed.treeDepth <= cd.at(cd.position).treeDepth)
                        return '';
                    let fd = '',
                        gd = ed.parent;
                    const hd = cd.at(cd.position).parent;
                    for (; gd !== cd.root && gd !== hd;)
                        fd += `out of ${ Eo(gd) };`, gd = gd.parent;
                    return fd;
                }(Yc.model, $c) + (Yc.model.selectionIsCollapsed ? '' : 'selected: ') + function(cd, dd) {
                    if (!cd.selectionIsCollapsed)
                        return ho(dd, '', cd.getAtoms(cd.selection));
                    let ed = '';
                    const fd = cd.at(cd.position),
                        gd = Eo(fd);
                    return fd.isFirstSibling && (ed = (gd ? 'start of ' + gd : 'unknown') + ': '), fd.isLastSibling ? fd.isFirstSibling || (ed += gd ? 'end of ' + gd : 'unknown') : ed += ho(dd, '', fd), ed;
                }(Yc.model, Yc.options) : 'replacement' === Zc ? bd = ho(Yc.options, '', Yc.model.at(Yc.model.position)) : 'line' === Zc ? (bd = ho(Yc.options, '', Yc.model.root), Yc.keyboardDelegate.setAriaLabel('after: ' + bd)) : bd = ad ? ho(Yc.options, Zc + ' ', ad) : Zc;
                const cd = Yc.ariaLiveText.textContent.includes('\xA0') ? ' \u202F ' : ' \xA0 ';
                Yc.ariaLiveText.textContent = bd + cd;
            }(this.mathfield, Tc, Uc, Vc);
        }
        deferNotifications(Tc, Uc) {
            const Vc = this._selection,
                Wc = this._anchor,
                Xc = this._position,
                Yc = this.suppressChangeNotifications;
            this.suppressChangeNotifications = !0;
            const Zc = this.root.changeCounter;
            Uc();
            const $c = this.root.changeCounter !== Zc,
                ad = Wc !== this._anchor || Xc !== this._position || 'different' === function(bd, cd) {
                    if (bd.direction === cd.direction) {
                        const dd = bd.ranges.length;
                        if (cd.ranges.length === dd) {
                            let ed = 0;
                            for (; ed < dd && 'equal' === La(bd.ranges[ed], cd.ranges[ed]);)
                                ed++;
                            return ed === dd ? 'equal' : 'different';
                        }
                    }
                    return 'different';
                }(this._selection, Vc);
            return this.suppressChangeNotifications = Yc, Tc.content && $c && Hi(this, {
                data: Tc.data,
                inputType: Tc.type
            }), Tc.selection && ad && Vi(this), $c || ad;
        }
        normalizeOffset(Tc) {
            return Tc > 0 ? Tc = Math.min(Tc, this.lastOffset) : Tc < 0 && (Tc = this.lastOffset + Tc + 1), Tc;
        }
        normalizeRange(Tc) {
            let [Uc, Vc] = Tc;
            return Uc = this.normalizeOffset(Uc), Vc = this.normalizeOffset(Vc), Uc < Vc ? [
                Uc,
                Vc
            ] : [
                Vc,
                Uc
            ];
        }
        normalizeSelection(Tc, Uc) {
            var Vc;
            let Wc;
            if (To(Tc)) {
                const Xc = this.normalizeOffset(Tc);
                if (To(Uc)) {
                    const Yc = this.normalizeOffset(Uc);
                    Wc = Xc <= Yc ? {
                        ranges: [
                            [
                                Xc,
                                Yc
                            ]
                        ],
                        direction: 'none'
                    } : {
                        ranges: [
                            [
                                Yc,
                                Xc
                            ]
                        ],
                        direction: 'backward'
                    };
                } else
                    Wc = {
                        ranges: [
                            [
                                Xc,
                                Xc
                            ]
                        ],
                        direction: 'none'
                    };
            } else if (zo(Tc)) {
                const Xc = this.normalizeOffset(Tc[0]),
                    Yc = this.normalizeOffset(Tc[1]);
                Wc = Xc <= Yc ? {
                    ranges: [
                        [
                            Xc,
                            Yc
                        ]
                    ],
                    direction: 'none'
                } : {
                    ranges: [
                        [
                            Yc,
                            Xc
                        ]
                    ],
                    direction: 'backward'
                };
            } else
                Bo(Tc) && (Wc = {
                    ranges: Tc.ranges.map(Tc => this.normalizeRange(Tc)),
                    direction: null !== (Vc = Tc.direction) && void 0 !== Vc ? Vc : 'none'
                });
            return Wc;
        }
        constructor(Tc, Uc, Vc) {
            this.options = Tc, this._selection = {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'none'
            }, this._anchor = 0, this._position = 0, this.mathfield = Vc, this.suppressChangeNotifications = !1, this.root = new pb('root', Vc, {
                mode: Tc.mode
            }), this.root.body = [], this.setListeners(Uc);
        }
    }

    function _Tc(Uc, Vc, Wc, Xc) {
        const Yc = Uc.offsetOf(Vc);
        if (Yc < Wc || Yc > Xc)
            return !1;
        if (!Vc.hasChildren)
            return !0;
        const Zc = Uc.offsetOf(Vc.firstChild);
        if (Zc >= Wc && Zc <= Xc) {
            const $c = Uc.offsetOf(Vc.lastChild);
            if ($c >= Wc && $c <= Xc)
                return !0;
        }
        return !1;
    }

    function _Tc(Uc, Vc, Wc) {
        if (!(null == Vc ? void 0 : Vc.hasChildren))
            return !1;
        const [Xc, Yc] = Wc, Zc = Uc.offsetOf(Vc.firstChild), $c = Uc.offsetOf(Vc.lastChild);
        return Zc >= Xc && Zc <= Yc && $c >= Zc && $c <= Yc;
    }

    function Tc(Uc, Vc) {
        let Wc = Uc.at(Uc.position);
        for (; Wc && !(Array.isArray(Wc.treeBranch) && Wc.parent instanceof Nb);)
            Wc = Wc.parent;
        if (Array.isArray(null == Wc ? void 0 : Wc.treeBranch) && (null == Wc ? void 0 : Wc.parent) instanceof Nb) {
            const Xc = Wc.parent;
            let Yc;
            switch (Vc) {
                case 'after row':
                    Xc.addRowAfter(Wc.treeBranch[0]), Yc = Uc.offsetOf(Xc.getCell(Wc.treeBranch[0] + 1, 0)[0]);
                    break;
                case 'after column':
                    if (Xc.maxColumns <= Xc.colCount)
                        return void Uc.announce('plonk');
                    Xc.addColumnAfter(Wc.treeBranch[1]), Yc = Uc.offsetOf(Xc.getCell(Wc.treeBranch[0], Wc.treeBranch[1] + 1)[0]);
                    break;
                case 'before row':
                    Xc.addRowBefore(Wc.treeBranch[0]), Yc = Uc.offsetOf(Xc.getCell(Wc.treeBranch[0] - 1, 0)[0]);
                    break;
                case 'before column':
                    if (Xc.maxColumns <= Xc.colCount)
                        return void Uc.announce('plonk');
                    Xc.addColumnBefore(Wc.treeBranch[1]), Yc = Uc.offsetOf(Xc.getCell(Wc.treeBranch[0], Wc.treeBranch[1] - 1)[0]);
            }
            Uc.setSelection(Yc, Yc + 1);
        }
    }

    function Tc(Uc) {
        return !!ji(Uc, {
            inputType: 'insertText'
        }) && (Fo(Uc, 'after row'), Hi(Uc, {
            inputType: 'insertText'
        }), !0);
    }

    function Tc(Uc) {
        return !!ji(Uc, {
            inputType: 'insertText'
        }) && (Fo(Uc, 'after column'), Hi(Uc, {
            inputType: 'insertText'
        }), !0);
    }

    function Tc(Uc, Vc) {
        let Wc = Uc.at(Uc.position);
        for (; Wc && !(Array.isArray(Wc.treeBranch) && Wc.parent instanceof Nb);)
            Wc = Wc.parent;
        if (Array.isArray(null == Wc ? void 0 : Wc.treeBranch) && (null == Wc ? void 0 : Wc.parent) instanceof Nb) {
            const Xc = Wc.parent,
                Yc = Wc.treeBranch;
            let Zc;
            switch (Vc) {
                case 'row':
                    if (Xc.rowCount > 1) {
                        Xc.removeRow(Yc[0]);
                        const $c = Xc.getCell(Math.max(0, Yc[0] - 1), Yc[1]);
                        Zc = Uc.offsetOf($c[$c.length - 1]);
                    }
                    break;
                case 'column':
                    if (Xc.colCount > Xc.minColumns) {
                        Xc.removeColumn(Yc[1]);
                        const $c = Xc.getCell(Yc[0], Math.max(0, Yc[1] - 1));
                        Zc = Uc.offsetOf($c[$c.length - 1]);
                    }
            }
            Zc && Uc.setPositionHandlingPlaceholder(Zc);
        }
    }

    function Tc(Uc, Vc, Wc, Xc) {
        var Yc, Zc, $c, ad, bd, cd;
        const dd = Wc.parent;
        if (Wc instanceof Fb) {
            const ed = !Xc && 'forward' === Vc || 'body' === Xc && 'backward' === Vc;
            let fd = ed ? Uc.offsetOf(Wc.firstChild) : Uc.offsetOf(Wc.lastChild);
            return ed ? '?' !== Wc.rightDelim && '.' !== Wc.rightDelim ? (Wc.leftDelim = '.', Wc.isDirty = !0) : (dd.addChildrenAfter(Wc.removeBranch('body'), Wc), dd.removeChild(Wc), fd--) : '?' !== Wc.leftDelim && '.' !== Wc.leftDelim ? (Wc.rightDelim = '.', Wc.isDirty = !0) : (dd.addChildrenAfter(Wc.removeBranch('body'), Wc), dd.removeChild(Wc), fd--), Uc.position = fd, !0;
        }
        if ('surd' === Wc.type) {
            if ('forward' === Vc && !Xc || 'backward' === Vc && 'body' === Xc) {
                const ed = Wc.leftSibling;
                Wc.hasChildren && dd.addChildrenAfter(Wc.removeBranch('body'), Wc), dd.removeChild(Wc), Uc.position = Uc.offsetOf(ed);
            } else
                'forward' === Vc && 'body' === Xc ? Uc.position = Uc.offsetOf(Wc) : Xc || 'backward' !== Vc ? 'above' === Xc && (Wc.hasEmptyBranch('above') && Wc.removeBranch('above'), Uc.position = 'backward' === Vc ? Uc.offsetOf(Wc.leftSibling) : Uc.offsetOf(Wc.body[0])) : Wc.hasChildren ? Uc.position = Uc.offsetOf(Wc.lastChild) : (Uc.position = Math.max(0, Uc.offsetOf(Wc) - 1), dd.removeChild(Wc));
            return !0;
        }
        if ('box' === Wc.type || 'enclose' === Wc.type) {
            const ed = Xc && 'backward' === Vc || !Xc && 'forward' === Vc ? Wc.leftSibling : Wc.lastChild;
            return dd.addChildrenAfter(Wc.removeBranch('body'), Wc), dd.removeChild(Wc), Uc.position = Uc.offsetOf(ed), !0;
        }
        if ('genfrac' === Wc.type || 'overunder' === Wc.type) {
            if (!Xc)
                return !('overunder' === Wc.type && Wc.hasEmptyBranch('body') || 'genfrac' === Wc.type && Wc.hasEmptyBranch('below') && Wc.hasEmptyBranch('above') || (Uc.position = Uc.offsetOf('forward' === Vc ? Wc.firstChild : Wc.lastChild), 0));
            const ed = 'numerator-denominator' === Wc.context.fractionNavigationOrder ? 'above' : 'below',
                fd = 'above' === ed ? 'below' : 'above';
            if ('forward' === Vc && Xc === ed || 'backward' === Vc && Xc === fd) {
                const gd = Wc.removeBranch(ed),
                    hd = Wc.removeBranch(fd);
                return dd.addChildrenAfter([
                    ...gd,
                    ...hd
                ], Wc), dd.removeChild(Wc), Uc.position = Uc.offsetOf(gd.length > 0 ? gd[gd.length - 1] : hd[0]), !0;
            }
            return 'backward' === Vc ? (Uc.position = Uc.offsetOf(Wc.leftSibling), !0) : (Uc.position = Uc.offsetOf(Wc), !0);
        }
        if (Wc.isExtensibleSymbol || 'msubsup' === Wc.type) {
            if (!Xc && 'forward' === Vc)
                return !1;
            if (!Xc) {
                if (Wc.subscript || Wc.superscript) {
                    const ed = 'forward' === Vc ? null !== (Zc = null === (Yc = Wc.superscript) || void 0 === Yc ? void 0 : Yc[0]) && void 0 !== Zc ? Zc : null === ($c = Wc.subscript) || void 0 === $c ? void 0 : $c[0] : null !== (bd = null === (ad = Wc.subscript) || void 0 === ad ? void 0 : ad[0].lastSibling) && void 0 !== bd ? bd : null === (cd = Wc.superscript) || void 0 === cd ? void 0 : cd[0].lastSibling;
                    return ed && (Uc.position = Uc.offsetOf(ed)), !0;
                }
                return !1;
            }
            if (Xc && Wc.hasEmptyBranch(Xc) && Wc.removeBranch(Xc), !Wc.hasChildren) {
                const ed = 'forward' === Vc ? Uc.offsetOf(Wc) : Math.max(0, Uc.offsetOf(Wc) - 1);
                return Wc.parent.removeChild(Wc), Uc.position = ed, !0;
            }
            if ('superscript' === Xc)
                if ('backward' === Vc) {
                    const ed = Uc.offsetOf(Wc.firstChild) - 1;
                    Uc.position = ed;
                } else
                    Wc.subscript ? Uc.position = Uc.offsetOf(Wc.subscript[0]) : Uc.position = Uc.offsetOf(Wc);
            else
                'subscript' === Xc && ('backward' === Vc && Wc.superscript ? Uc.position = Uc.offsetOf(Wc.superscript[0].lastSibling) : Uc.position = 'backward' === Vc ? Uc.offsetOf(Wc.firstChild) - 1 : Uc.offsetOf(Wc));
            return !0;
        }
        return !1;
    }

    function Tc(Uc, Vc, Wc) {
        const Xc = Uc.getAtoms(Vc);
        if (Xc.length > 0 && Xc[0].parent) {
            let Yc = Xc[0].parent.firstChild;
            'first' === Yc.type && (Yc = Yc.rightSibling);
            const Zc = Xc[Xc.length - 1].parent.lastChild;
            let $c = Xc[0];
            'first' === $c.type && ($c = $c.rightSibling);
            const ad = Xc[Xc.length - 1];
            if ($c === Yc && ad === Zc) {
                const bd = Xc[0].parent;
                'root' !== bd.type && (Vc = [
                    Uc.offsetOf(bd.leftSibling),
                    Uc.offsetOf(bd.rightSibling)
                ]);
            }
        }
        return Uc.deferNotifications({
            content: !0,
            selection: !0,
            type: Wc
        }, () => Uc.deleteAtoms(Vc));
    }

    function Tc(Uc, Vc) {
        const Wc = Uc.at(Vc);
        let Xc;
        if (Wc) {
            Xc = Wc.mode;
            let Yc = Wc.parent;
            for (; !Xc && Yc;)
                Yc && (Xc = Yc.mode), Yc = Yc.parent;
        }
        return Xc;
    }

    function Tc(Uc, Vc) {
        Uc && Vc && (_Xc(Uc) ? Uc.forEach(Uc => Tc(Uc, Vc)) : 'object' == typeof Uc && (Uc.style.color || Uc.style.backgroundColor || Uc.style.fontFamily || Uc.style.fontShape || Uc.style.fontSeries || Uc.style.fontSize || Uc.style.variant || Uc.style.variantStyle || (Uc.applyStyle(Vc), Tc(Uc.body, Vc), Tc(Uc.above, Vc), Tc(Uc.below, Vc), Tc(Uc.subscript, Vc), Tc(Uc.superscript, Vc))));
    }

    function Tc(Uc, Vc, Wc, _Xc) {
        function Yc(Zc, $c) {
            for (const ad of _Yc)
                if (ad.style[Zc] !== $c)
                    return !1;
            return !0;
        }
        if ((Vc = Uc.normalizeRange(Vc))[0] === Vc[1])
            return !1;
        const _Yc = Uc.getAtoms(Vc, {
            includeChildren: !0
        });
        'toggle' === _Xc.operation && (Wc.color && _Yc('color', Wc.color) && (Wc.color = 'none', Wc.verbatimColor = void 0), Wc.backgroundColor && _Yc('backgroundColor', Wc.backgroundColor) && (Wc.backgroundColor = 'none', Wc.verbatimBackgroundColor = void 0), Wc.fontFamily && _Yc('fontFamily', Wc.fontFamily) && (Wc.fontFamily = 'none'), Wc.fontSeries && _Yc('fontSeries', Wc.fontSeries) && (Wc.fontSeries = 'auto'), Wc.fontShape && _Yc('fontShape', Wc.fontShape) && (Wc.fontShape = 'auto'), Wc.fontSize && _Yc('fontSize', Wc.fontSize) && (Wc.fontSize = 5));
        for (const Zc of _Yc)
            Zc.applyStyle(Wc);
        return !0;
    }

    function Tc(Uc, Vc, Wc) {
        if ('text' !== Uc.at(Vc).mode)
            return Vc;
        const Xc = 'backward' === Wc ? -1 : 1;
        let _Yc;
        if (r.test(Uc.at(Vc).value)) {
            let Zc, $c = Vc;
            do {
                Zc = 'text' === Uc.at($c).mode && r.test(Uc.at($c).value), $c += Xc;
            } while (Uc.at($c) && Zc);
            _Yc = Uc.at($c) ? $c - 2 * Xc : $c - Xc;
        } else if (/\s/.test(Uc.at(Vc).value)) {
            let Zc = Vc;
            for (; Uc.at(Zc) && 'text' === Uc.at(Zc).mode && /\s/.test(Uc.at(Zc).value);)
                Zc += Xc;
            if (Uc.at(Zc)) {
                let $c = !0;
                do {
                    $c = 'text' === Uc.at(Zc).mode && !/\s/.test(Uc.at(Zc).value), Zc += Xc;
                } while (Uc.at(Zc) && $c);
                _Yc = Uc.at(Zc) ? Zc - 2 * Xc : Zc - Xc;
            } else
                _Yc = Zc - Xc;
        } else {
            let Zc = Vc;
            for (; Uc.at(Zc) && 'text' === Uc.at(Zc).mode && !/\s/.test(Uc.at(Zc).value);)
                Zc += Xc;
            _Yc = Uc.at(Zc) ? Zc : Zc - Xc;
            let $c = !0;
            for (; Uc.at(Zc) && $c;)
                $c = 'text' === Uc.at(Zc).mode && /\s/.test(Uc.at(Zc).value), $c && (_Yc = Zc), Zc += Xc;
            _Yc = Uc.at(Zc) ? Zc - 2 * Xc : Zc - Xc;
        }
        return _Yc - (Xc > 0 ? 0 : 1);
    }

    function Tc(Uc, Vc, Wc) {
        var Xc, Yc, Zc, $c, ad, bd, cd;
        const dd = Uc.position;
        null !== (Xc = null == Wc ? void 0 : Wc.extend) && void 0 !== Xc && Xc || Uc.collapseSelection(Vc);
        let ed = Uc.at(Uc.position);
        if ('forward' === Vc && ('msubsup' === ed.type ? (ed = ed.rightSibling, ed || (ed = Uc.at(Uc.position + 1))) : ed = Uc.at(Uc.position + 1)), !ed)
            return Uc.announce('plonk'), !1;
        let fd = Uc.offsetOf(ed);
        if (ed instanceof Kb)
            fd = Xo(Uc, fd, Vc);
        else if (ed instanceof Wb)
            if (ed.isSuggestion)
                for (; ed && ed instanceof Wb;)
                    ed.isSuggestion = !1, fd = Uc.offsetOf(ed), ed = ed.rightSibling;
            else if ('forward' === Vc) {
            if (ed = ed.rightSibling, !(ed && ed instanceof Wb))
                return Uc.announce('plonk'), !1;
            for (; ed && ed instanceof Wb && /[a-zA-Z\*]/.test(ed.value);)
                fd = Uc.offsetOf(ed), ed = ed.rightSibling;
        } else {
            if (ed = ed.leftSibling, !(ed && ed instanceof Wb))
                return Uc.announce('plonk'), !1;
            for (; ed && ed instanceof Wb && /[a-zA-Z\*]/.test(ed.value);)
                fd = Uc.offsetOf(ed), ed = ed.leftSibling;
        } else if ('forward' === Vc && 'mopen' === ed.type) {
            let gd = 0;
            do {
                'mopen' === ed.type ? gd += 1 : 'mclose' === ed.type && (gd -= 1), ed = ed.rightSibling;
            } while (!ed.isLastSibling && 0 !== gd);
            fd = Uc.offsetOf(ed.leftSibling);
        } else if ('backward' === Vc && 'mclose' === ed.type) {
            let gd = 0;
            do {
                'mopen' === ed.type ? gd += 1 : 'mclose' === ed.type && (gd -= 1), ed = ed.leftSibling;
            } while (!ed.isFirstSibling && 0 !== gd);
            fd = Uc.offsetOf(ed);
        } else if ('backward' === Vc)
            if ('first' === ed.type)
                for (; fd > 0 && 'first' === ed.type;)
                    fd -= 1, ed = Uc.at(fd);
            else {
                const gd = ed.type;
                'msubsup' === ed.type && (fd = Uc.offsetOf(Uc.at(fd).leftSibling)), fd -= 1;
                let hd = null === (Yc = Uc.at(fd)) || void 0 === Yc ? void 0 : Yc.type;
                for (; fd >= 0 && hd === gd;)
                    'msubsup' === (null === (Zc = Uc.at(fd)) || void 0 === Zc ? void 0 : Zc.type) ? fd = Uc.offsetOf(Uc.at(fd).leftSibling) : fd -= 1, hd = Uc.at(fd).type;
            }
        else {
            const {
                type: gd
            } = ed;
            let hd = null === ($c = Uc.at(fd)) || void 0 === $c ? void 0 : $c.type;
            const {
                lastOffset: id
            } = Uc;
            for (; fd <= id && (hd === gd || 'msubsup' === hd);) {
                for (;
                    'msubsup' === (null === (ad = Uc.at(fd).rightSibling) || void 0 === ad ? void 0 : ad.type);)
                    fd = Uc.offsetOf(Uc.at(fd).rightSibling);
                fd += 1, hd = null === (bd = Uc.at(fd)) || void 0 === bd ? void 0 : bd.type;
            }
            fd -= 1;
        }
        if (null !== (cd = null == Wc ? void 0 : Wc.extend) && void 0 !== cd && cd) {
            if (!Uc.setSelection(Uc.anchor, fd))
                return Uc.announce('plonk'), !1;
        } else {
            if (fd === Uc.position)
                return Uc.announce('plonk'), !1;
            Uc.position = fd;
        }
        return Uc.announce('move', dd), !0;
    }

    function Tc(Uc, Vc, Wc) {
        var Xc, Yc, Zc, $c, ad, bd, cd, dd;
        if (Wc = null != Wc ? Wc : {
                extend: !1
            }, 'forward' !== Vc) {
            const [ed, fd] = Ji(Uc);
            void 0 !== ed && void 0 !== fd && Uc.deleteAtoms([
                ed,
                fd
            ]);
        }
        if ('upward' === Vc)
            return function(ed, fd) {
                var gd, hd, id, jd;
                const kd = null !== (gd = null == fd ? void 0 : fd.extend) && void 0 !== gd && gd;
                kd || ed.collapseSelection('backward');
                const ld = ed.at(ed.position);
                let md = ld;
                for (; md && 'below' !== md.treeBranch && !(Array.isArray(md.treeBranch) && md.parent instanceof Nb);)
                    md = md.parent;
                if (Array.isArray(null == md ? void 0 : md.treeBranch) && md.parent instanceof Nb) {
                    const nd = md.parent,
                        od = Math.max(0, md.treeBranch[0] - 1);
                    _Tc(ed, ld, nd.array[od][md.treeBranch[1]], kd, 'up');
                } else {
                    if (!md) {
                        let nd = !0;
                        return ed.suppressChangeNotifications || (nd = null === (jd = null === (id = ed.mathfield.host) || void 0 === id ? void 0 : id.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'upward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === jd || jd), ed.announce(nd ? 'plonk' : 'line'), nd;
                    }
                    _Tc(ed, ld, null !== (hd = md.parent.branch('above')) && void 0 !== hd ? hd : md.parent.createBranch('above'), kd, 'up');
                }
                return !0;
            }(Uc, Wc);
        if ('downward' === Vc)
            return function(ed, fd) {
                var gd, hd, id, jd;
                const kd = null !== (gd = null == fd ? void 0 : fd.extend) && void 0 !== gd && gd;
                kd || ed.collapseSelection('forward');
                const ld = ed.at(ed.position);
                let md = ld;
                for (; md && 'above' !== md.treeBranch && !(Array.isArray(md.treeBranch) && md.parent instanceof Nb);)
                    md = md.parent;
                if (Array.isArray(null == md ? void 0 : md.treeBranch) && md.parent instanceof Nb) {
                    const nd = md.parent,
                        od = Math.min(nd.array.length - 1, md.treeBranch[0] + 1);
                    _Tc(ed, ld, nd.array[od][md.treeBranch[1]], kd, 'down');
                } else {
                    if (!md) {
                        let nd = !0;
                        return ed.suppressChangeNotifications || (nd = null === (jd = null === (id = ed.mathfield.host) || void 0 === id ? void 0 : id.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'downward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === jd || jd), ed.announce(nd ? 'plonk' : 'line'), nd;
                    }
                    _Tc(ed, ld, null !== (hd = md.parent.branch('below')) && void 0 !== hd ? hd : md.parent.createBranch('below'), kd, 'down');
                }
                return !0;
            }(Uc, Wc);
        const ed = Uc.position;
        if (Wc.extend)
            return Uc.extendSelection(Vc);
        if (Uc.selectionIsPlaceholder)
            return Uc.collapseSelection(Vc), Tc(Uc, Vc);
        if (!Uc.collapseSelection(Vc)) {
            let fd = Uc.position + ('forward' === Vc ? 1 : -1),
                gd = Uc.at(fd);
            if (fd >= 0 && fd <= Uc.lastOffset)
                if ('forward' === Vc)
                    if (gd.inCaptureSelection) {
                        for (; !gd.captureSelection;)
                            gd = gd.parent;
                        fd = Uc.offsetOf(gd);
                    } else if (!gd.isFirstSibling && gd.isLastSibling && (null === (Xc = gd.parent) || void 0 === Xc ? void 0 : Xc.skipBoundary)) {
                if (fd + 1 !== Uc.lastOffset)
                    return Uc.position = fd, Tc(Uc, 'forward', Wc);
                fd += 1;
            } else
                (null === (Yc = gd.parent) || void 0 === Yc ? void 0 : Yc.skipBoundary) && (null === (Zc = gd.rightSibling) || void 0 === Zc ? void 0 : Zc.isLastSibling) ? fd += 2 : (null === ($c = gd.parent) || void 0 === $c ? void 0 : $c.skipBoundary) && 'first' === gd.type ? fd += 1 : gd instanceof Wb && gd.isSuggestion && (gd.isSuggestion = !1);
            else if ('backward' === Vc)
                if (null === (ad = gd.parent) || void 0 === ad ? void 0 : ad.inCaptureSelection) {
                    for (; !gd.captureSelection;)
                        gd = gd.parent;
                    fd = Math.max(0, Uc.offsetOf(gd.leftSibling));
                } else
                    (gd.skipBoundary || (null === (bd = gd.parent) || void 0 === bd ? void 0 : bd.skipBoundary) && 'first' === gd.type) && (fd = Math.max(0, Uc.position - 2));
            if (fd < 0 || fd > Uc.lastOffset) {
                let hd = !0;
                return Uc.suppressChangeNotifications || (hd = null === (dd = null === (cd = Uc.mathfield.host) || void 0 === cd ? void 0 : cd.dispatchEvent(new CustomEvent('move-out', {
                    detail: {
                        direction: Vc
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) || void 0 === dd || dd), hd && Uc.announce('plonk'), hd;
            }
            Uc.setPositionHandlingPlaceholder(fd);
        }
        return Uc.announce('move', ed), !0;
    }

    function _Tc(Uc, Vc, Wc, Xc, Yc) {
        const Zc = fi(Uc.mathfield.getHTMLElement(Vc)).right,
            $c = Uc.offsetOf(function(ad, bd, cd) {
                let dd = 1 / 0,
                    ed = 0;
                for (; ed < bd.length; ed++) {
                    const fd = fi(ad.getHTMLElement(bd[ed])).right,
                        gd = Math.abs(cd - fd);
                    if (!(gd <= dd))
                        break;
                    dd = gd;
                }
                return bd[ed - 1];
            }(Uc.mathfield, Wc, Zc));
        if (Xc) {
            const [ad, bd] = Uc.selection.ranges[0];
            let cd;
            cd = $c < ('up' === Yc ? ad : bd) ? {
                ranges: [
                    [
                        $c,
                        bd
                    ]
                ],
                direction: 'backward'
            } : {
                ranges: [
                    [
                        ad,
                        $c
                    ]
                ],
                direction: 'forward'
            }, Uc.setSelection(cd);
        } else
            Uc.setPositionHandlingPlaceholder($c);
        Uc.announce(`move ${ Yc }`);
    }

    function Tc(Uc) {
        const Vc = Uc.position,
            Wc = Uc.at(Vc).parent;
        return Wc && 'root' !== Wc.type ? (Uc.position = Uc.offsetOf(Wc), Uc.announce('move', Vc), !0) : (Uc.announce('plonk'), !1);
    }

    function Tc(Uc) {
        var Vc;
        if (Uc.collapseSelection(), function(Wc) {
                let Xc = 0,
                    Yc = Wc.at(Wc.position),
                    Zc = !1;
                for (; Yc;)
                    Yc.hasEmptyBranch('superscript') && Yc.hasEmptyBranch('subscript') || (Xc += 1), Yc.hasEmptyBranch('superscript') ? Yc.hasEmptyBranch('subscript') || (Zc = !1) : Zc = !0, Yc = Yc.parent;
                return Zc ? Xc : 0;
            }(Uc) >= Uc.mathfield.options.scriptDepth[1])
            return Uc.announce('plonk'), !1;
        let Wc = Uc.at(Uc.position);
        return void 0 === Wc.subsupPlacement && ('msubsup' !== (null === (Vc = Wc.rightSibling) || void 0 === Vc ? void 0 : Vc.type) && Wc.parent.addChildAfter(new Gb(Uc.mathfield, {
            style: Wc.computedStyle
        }), Wc), Wc = Wc.rightSibling), Wc.createBranch('superscript'), Uc.setSelection(Uc.getSiblingsRange(Uc.offsetOf(Wc.superscript[0]))), !0;
    }

    function Tc(Uc) {
        var Vc;
        if (Uc.collapseSelection(), function(Wc) {
                let Xc = 0,
                    Yc = Wc.at(Wc.position),
                    Zc = !1;
                for (; Yc;)
                    Yc.hasEmptyBranch('superscript') && Yc.hasEmptyBranch('subscript') || (Xc += 1), Yc.hasEmptyBranch('superscript') ? Yc.hasEmptyBranch('subscript') || (Zc = !0) : Zc = !1, Yc = Yc.parent;
                return Zc ? Xc : 0;
            }(Uc) >= Uc.mathfield.options.scriptDepth[0])
            return Uc.announce('plonk'), !1;
        let Wc = Uc.at(Uc.position);
        return void 0 === Wc.subsupPlacement && ('msubsup' !== (null === (Vc = Uc.at(Uc.position + 1)) || void 0 === Vc ? void 0 : Vc.type) && Wc.parent.addChildAfter(new Gb(Uc.mathfield, {
            style: Uc.at(Uc.position).computedStyle
        }), Wc), Wc = Uc.at(Uc.position + 1)), Wc.createBranch('subscript'), Uc.setSelection(Uc.getSiblingsRange(Uc.offsetOf(Wc.subscript[0]))), !0;
    }

    function Tc(Uc, Vc, Wc = !0) {
        var Xc, Yc;
        const Zc = 'forward' === Vc ? 1 : -1;
        'placeholder' === Uc.at(Uc.anchor).type && Zo(Uc, Vc);
        const $c = Uc.getAllAtoms(Math.max(Uc.position + Zc, 0));
        'backward' === Vc && $c.reverse();
        const ad = $c.filter(Uc => 'placeholder' === Uc.type || Uc.treeDepth > 2 && Uc.isFirstSibling && Uc.isLastSibling);
        if (0 === ad.length) {
            if (!Wc || null !== (Yc = null === (Xc = Uc.mathfield.host) || void 0 === Xc ? void 0 : Xc.dispatchEvent(new CustomEvent('focus-out', {
                    detail: {
                        direction: Vc
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) && void 0 !== Yc && !Yc)
                return Uc.announce('plonk'), !1;
            const bd = function() {
                function cd(dd) {
                    var ed;
                    return !((ed = dd).disabled || 'hidden' === ed.type && 'INPUT' === ed.tagName.toUpperCase() || function(fd) {
                        if (!_ed() || fd === document.activeElement || fd.contains(document.activeElement))
                            return !1;
                        if ('hidden' === getComputedStyle(fd).visibility)
                            return !0;
                        const gd = fd.getBoundingClientRect();
                        if (0 === gd.width || 0 === gd.height)
                            return !0;
                        for (; fd;) {
                            if ('none' === getComputedStyle(fd).display)
                                return !0;
                            fd = fd.parentElement;
                        }
                        return !1;
                    }(ed) || function(fd) {
                        return 'INPUT' === fd.tagName.toUpperCase() && 'radio' === fd.type && ! function(gd) {
                            var hd;
                            if (!gd.name)
                                return !0;
                            const id = function(jd, kd) {
                                for (const ld of jd)
                                    if (ld.checked && ld.form === kd)
                                        return ld;
                                return null;
                            }((null !== (hd = gd.form) && void 0 !== hd ? hd : gd.ownerDocument).querySelectorAll('input[type="radio"][name="' + gd.name + '"]'), gd.form);
                            return !id || id === gd;
                        }(fd);
                    }(dd) || Vc(dd) < 0);
                }

                function cd(dd) {
                    var ed;
                    const fd = Number.parseInt(null !== (ed = dd.getAttribute('tabindex')) && void 0 !== ed ? ed : 'NaN', 10);
                    return Number.isNaN(fd) ? 'true' === dd.contentEditable ? 0 : 'AUDIO' !== dd.nodeName && 'VIDEO' !== dd.nodeName || null !== dd.getAttribute('tabindex') ? dd.tabIndex : 0 : fd;
                }
                return _ed() ? function(cd) {
                    const dd = [],
                        _ed = [];
                    return [...cd.querySelectorAll('input, select, textarea, a[href], button,\n        [tabindex], audio[controls], video[controls],\n        [contenteditable]:not([contenteditable="false"]), details>summary')].filter(Uc).forEach((Uc, cd) => {
                        const fd = Vc(Uc);
                        0 === fd ? dd.push(Uc) : _ed.push({
                            documentOrder: cd,
                            tabIndex: fd,
                            node: Uc
                        });
                    }), _ed.sort((Uc, Vc) => Uc.tabIndex === Vc.tabIndex ? Uc.documentOrder - Vc.documentOrder : Uc.tabIndex - Vc.tabIndex).map(Uc => Uc.node).concat(dd);
                }(document.body) : [];
            }();
            if (!document.activeElement || 1 === bd.length)
                return Uc.announce('plonk'), !1;
            let cd = bd.indexOf(document.activeElement) + Zc;
            return !!(document.activeElement instanceof _ud && _bd(document.activeElement, Vc, Zc)) || (cd < 0 && (cd = bd.length - 1), cd >= bd.length && (cd = 0), !!(bd[cd] instanceof _ud && _bd(bd[cd], Vc, Zc)) || (bd[cd].focus(), 0 !== cd || (Uc.announce('plonk'), !1)));
        }

        function _bd(cd, dd, ed) {
            var fd, gd, hd;
            const id = [...null !== (gd = null === (fd = cd.shadowRoot) || void 0 === fd ? void 0 : fd.querySelectorAll('math-field')) && void 0 !== gd ? gd : []];
            if (id.length) {
                const jd = null === (hd = cd.shadowRoot) || void 0 === hd ? void 0 : hd.activeElement,
                    kd = id.indexOf(jd);
                let ld = kd + ed;
                if (kd < 0 && 'backward' === dd && (ld = id.length - 1), ld >= 0 && ld < id.length)
                    return id[ld].focus(), !0;
            }
            return !1;
        }
        const bd = Uc.position,
            cd = Uc.offsetOf(ad[0]);
        return 'placeholder' === ad[0].type ? Uc.setSelection(cd - 1, cd) : Uc.position = cd, Uc.announce('move', bd), !0;
    }

    function Tc(Uc) {
        var Vc, Wc, Xc, Yc, Zc, $c;
        if ('text' === Wo(Uc, Uc.position)) {
            let ad = Math.min(Uc.anchor, Uc.position),
                bd = Math.max(Uc.anchor, Uc.position),
                cd = !1;
            for (; !cd && ad > 0;) {
                const dd = Uc.at(ad);
                'text' === dd.mode && r.test(dd.value) ? ad -= 1 : cd = !0;
            }
            for (cd = !1; !cd && bd <= Uc.lastOffset;) {
                const dd = Uc.at(bd);
                'text' === dd.mode && r.test(dd.value) ? bd += 1 : cd = !0;
            }
            if (cd && (bd -= 1), ad >= bd)
                return Uc.setSelection(bd - 1, bd), !0;
            Uc.setSelection(ad, bd);
        } else {
            const ad = Uc.at(Uc.position);
            if (ad.isDigit()) {
                let bd = Math.min(Uc.anchor, Uc.position),
                    cd = Math.max(Uc.anchor, Uc.position);
                for (; null === (Vc = Uc.at(bd)) || void 0 === Vc ? void 0 : Vc.isDigit();)
                    bd -= 1;
                for (; null === (Wc = Uc.at(cd)) || void 0 === Wc ? void 0 : Wc.isDigit();)
                    cd += 1;
                Uc.setSelection(bd, cd - 1);
            } else if (ad.style.variant || ad.style.variantStyle) {
                let bd = Math.min(Uc.anchor, Uc.position),
                    cd = Math.max(Uc.anchor, Uc.position),
                    dd = null === (Xc = Uc.at(bd)) || void 0 === Xc ? void 0 : Xc.style;
                for (; dd && dd.variant === ad.style.variant && dd.variantStyle === ad.style.variantStyle;)
                    bd -= 1, dd = null === (Yc = Uc.at(bd)) || void 0 === Yc ? void 0 : Yc.style;
                for (dd = null === (Zc = Uc.at(cd)) || void 0 === Zc ? void 0 : Zc.style; dd && dd.variant === ad.style.variant && dd.variantStyle === ad.style.variantStyle;)
                    cd += 1, dd = null === ($c = Uc.at(cd)) || void 0 === $c ? void 0 : $c.style;
                Uc.setSelection(bd, cd - 1);
            } else
                Uc.setSelection(Uc.offsetOf(ad.firstSibling), Uc.offsetOf(ad.lastSibling));
        }
        return !0;
    }
    uo({
        addRowAfter: Ro,
        addColumnAfter: Io,
        addRowBefore: function(Tc) {
            return !!ji(Tc, {
                inputType: 'insertText'
            }) && (Fo(Tc, 'before row'), Hi(Tc, {
                inputType: 'insertText'
            }), !0);
        },
        addColumnBefore: function(Tc) {
            return !!ji(Tc, {
                inputType: 'insertText'
            }) && (Fo(Tc, 'before column'), Hi(Tc, {
                inputType: 'insertText'
            }), !0);
        },
        removeRow: function(Tc) {
            return !!ji(Tc, {
                inputType: 'deleteContent'
            }) && (Vo(Tc, 'row'), Hi(Tc, {
                inputType: 'deleteContent'
            }), !0);
        },
        removeColumn: function(Tc) {
            return !!ji(Tc, {
                inputType: 'deleteContent'
            }) && (Vo(Tc, 'column'), Hi(Tc, {
                inputType: 'deleteContent'
            }), !0);
        }
    }, {
        target: 'model',
        category: 'array-edit'
    }), uo({
        deleteAll: tb => ji(tb, {
            inputType: 'deleteContent'
        }) && Ho(tb, [
            0,
            -1
        ], 'deleteContent'),
        deleteForward: tb => function(Tc) {
            return !!ji(Tc, {
                inputType: 'deleteContentForward'
            }) && (Tc.selectionIsCollapsed ? Tc.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentForward'
            }, () => {
                var Uc, Vc;
                let Wc = Tc.at(Tc.position).rightSibling;
                if (Wc && jo(Tc, 'forward', Wc))
                    return;
                if (Wc) {
                    if (Tc.at(Tc.position).isLastSibling && jo(Tc, 'forward', Wc.parent, Wc.treeBranch))
                        return;
                } else {
                    if (Wc = Tc.at(Tc.position), Wc.isLastSibling && jo(Tc, 'forward', Wc.parent, Wc.treeBranch))
                        return;
                    Wc = null;
                }
                if (Tc.position === Tc.lastOffset || !Wc)
                    return void Tc.announce('plonk');
                Wc.parent.removeChild(Wc);
                let Xc = null === (Uc = Tc.at(Tc.position)) || void 0 === Uc ? void 0 : Uc.rightSibling;
                for (;
                    'msubsup' === (null == Xc ? void 0 : Xc.type);)
                    Xc.parent.removeChild(Xc), Xc = null === (Vc = Tc.at(Tc.position)) || void 0 === Vc ? void 0 : Vc.rightSibling;
                Tc.announce('delete', void 0, [Wc]);
            }) : Ho(Tc, Ca(Tc.selection), 'deleteContentForward'));
        }(tb),
        deleteBackward: tb => function(Tc) {
            return !!ji(Tc, {
                inputType: 'deleteContentBackward'
            }) && (Tc.selectionIsCollapsed ? Tc.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentBackward'
            }, () => {
                let Uc = Tc.at(Tc.position);
                if (!Uc || !jo(Tc, 'backward', Uc)) {
                    if (null == Uc ? void 0 : Uc.isFirstSibling) {
                        if (jo(Tc, 'backward', Uc.parent, Uc.treeBranch))
                            return;
                        Uc = null;
                    }
                    Uc ? (Tc.position = Tc.offsetOf(Uc.leftSibling), Uc.parent.removeChild(Uc), Tc.announce('delete', void 0, [Uc])) : Tc.announce('plonk');
                }
            }) : Ho(Tc, Ca(Tc.selection), 'deleteContentBackward'));
        }(tb),
        deleteNextWord: tb => ji(tb, {
            inputType: 'deleteWordForward'
        }) && Ho(tb, [
            tb.anchor,
            Xo(tb, tb.position, 'forward')
        ], 'deleteWordForward'),
        deletePreviousWord: tb => ji(tb, {
            inputType: 'deleteWordBackward'
        }) && Ho(tb, [
            tb.anchor,
            Xo(tb, tb.position, 'backward')
        ], 'deleteWordBackward'),
        deleteToGroupStart: tb => ji(tb, {
            inputType: 'deleteSoftLineBackward'
        }) && Ho(tb, [
            tb.anchor,
            tb.offsetOf(tb.at(tb.position).firstSibling)
        ], 'deleteSoftLineBackward'),
        deleteToGroupEnd: tb => ji(tb, {
            inputType: 'deleteSoftLineForward'
        }) && Ho(tb, [
            tb.anchor,
            tb.offsetOf(tb.at(tb.position).lastSibling)
        ], 'deleteSoftLineForward'),
        deleteToMathFieldStart: tb => ji(tb, {
            inputType: 'deleteHardLineBackward'
        }) && Ho(tb, [
            tb.anchor,
            0
        ], 'deleteHardLineBackward'),
        deleteToMathFieldEnd: tb => ji(tb, {
            inputType: 'deleteHardLineForward'
        }) && Ho(tb, [
            tb.anchor,
            -1
        ], 'deleteHardLineForward')
    }, {
        target: 'model',
        category: 'delete'
    }), uo({
        moveToOpposite: tb => {
            const Tc = tb.at(tb.position),
                {
                    parent: Uc
                } = Tc;
            if (!Uc)
                return tb.announce('plonk'), !1;
            const Vc = Tc.treeBranch;
            let Wc;
            return 'string' == typeof Vc && (Wc = {
                superscript: 'subscript',
                subscript: 'superscript',
                above: 'below',
                below: 'above'
            } [Vc]), Wc ? (Uc.branch(Wc) || Uc.createBranch(Wc), tb.setSelection(tb.getBranchRange(tb.offsetOf(Uc), Wc))) : Tc.subsupPlacement ? tr(tb) : er(tb);
        },
        moveBeforeParent: tb => {
            const {
                parent: Tc
            } = tb.at(tb.position);
            return Tc ? (tb.position = tb.offsetOf(Tc), !0) : (tb.announce('plonk'), !1);
        },
        moveAfterParent: tb => Qo(tb),
        moveToNextPlaceholder: tb => ar(tb, 'forward'),
        moveToPreviousPlaceholder: tb => ar(tb, 'backward'),
        moveToNextChar: tb => Zo(tb, 'forward'),
        moveToPreviousChar: tb => Zo(tb, 'backward'),
        moveUp: tb => Zo(tb, 'upward'),
        moveDown: tb => Zo(tb, 'downward'),
        moveToNextWord: tb => Go(tb, 'forward'),
        moveToPreviousWord: tb => Go(tb, 'backward'),
        moveToGroupStart: tb => {
            const Tc = tb.offsetOf(tb.at(tb.position).firstSibling);
            return Tc === tb.position ? (tb.announce('plonk'), !1) : (tb.position = Tc, !0);
        },
        moveToGroupEnd: tb => {
            const Tc = tb.offsetOf(tb.at(tb.position).lastSibling);
            return Tc === tb.position ? (tb.announce('plonk'), !1) : (tb.position = Tc, !0);
        },
        moveToMathFieldStart: tb => 0 === tb.position ? (tb.announce('plonk'), !1) : (tb.position = 0, !0),
        moveToMathFieldEnd: tb => tb.position === tb.lastOffset ? (tb.announce('plonk'), !1) : (tb.position = tb.lastOffset, !0),
        moveToSuperscript: tb => er(tb),
        moveToSubscript: tb => tr(tb)
    }, {
        target: 'model',
        category: 'selection-anchor'
    }), uo({
        selectGroup: tb => {
            const Tc = ir(tb);
            return Tc || tb.announce('plonk'), Tc;
        },
        selectAll: tb => tb.setSelection(0, tb.lastOffset),
        extendSelectionForward: tb => {
            const Tc = tb.extendSelection('forward');
            return Tc || tb.announce('plonk'), Tc;
        },
        extendSelectionBackward: tb => {
            const Tc = tb.extendSelection('backward');
            return Tc || tb.announce('plonk'), Tc;
        },
        extendToNextWord: tb => Go(tb, 'forward', {
            extend: !0
        }),
        extendToPreviousWord: tb => Go(tb, 'backward', {
            extend: !0
        }),
        extendSelectionUpward: tb => Zo(tb, 'upward', {
            extend: !0
        }),
        extendSelectionDownward: tb => Zo(tb, 'downward', {
            extend: !0
        }),
        extendToNextBoundary: tb => Go(tb, 'forward', {
            extend: !0
        }),
        extendToPreviousBoundary: tb => Go(tb, 'backward', {
            extend: !0
        }),
        extendToGroupStart: tb => {
            const Tc = tb.setSelection(tb.anchor, tb.offsetOf(tb.at(tb.position).firstSibling));
            return Tc || tb.announce('plonk'), Tc;
        },
        extendToGroupEnd: tb => {
            const Tc = tb.setSelection(tb.anchor, tb.offsetOf(tb.at(tb.position).lastSibling));
            return Tc || tb.announce('plonk'), Tc;
        },
        extendToMathFieldStart: tb => {
            const Tc = tb.setSelection(tb.anchor, 0);
            return Tc || tb.announce('plonk'), Tc;
        },
        extendToMathFieldEnd: tb => {
            const Tc = tb.setSelection(tb.anchor, tb.lastOffset);
            return Tc || tb.announce('plonk'), Tc;
        }
    }, {
        target: 'model',
        category: 'selection-extend'
    });
    class Tc {
        get element() {
            if (this._element)
                return this._element;
            const Uc = document.createElement('div');
            return Uc.setAttribute('role', 'presentation'), Uc.style.position = 'fixed', Uc.style.contain = 'content', Uc.style.top = '0', Uc.style.left = '0', Uc.style.right = '0', Uc.style.bottom = '0', Uc.style.zIndex = 'var(--scrim-zindex, 10099)', Uc.style.outline = 'none', this.translucent ? (Uc.style.background = 'rgba(255, 255, 255, .2)', Uc.style.backdropFilter = 'contrast(40%)') : Uc.style.background = 'transparent', this._element = Uc, Uc;
        }
        open(Uc) {
            var Vc;
            if ('closed' !== this.state)
                return;
            this.state = 'opening', this.savedActiveElement = _Uc();
            const {
                element: Wc
            } = this;
            (null !== (Vc = null == Uc ? void 0 : Uc.root) && void 0 !== Vc ? Vc : document.body).appendChild(Wc), Wc.addEventListener('click', this), document.addEventListener('touchmove', this, !1), document.addEventListener('scroll', this, !1);
            const Xc = window.innerWidth - document.documentElement.clientWidth;
            this.savedMarginRight = document.body.style.marginRight, this.savedOverflow = document.body.style.overflow, document.body.style.overflow = 'hidden';
            const Yc = Number.parseFloat(getComputedStyle(document.body).marginRight);
            document.body.style.marginRight = `${ Yc + Xc }px`, (null == Uc ? void 0 : Uc.child) && Wc.append(Uc.child), this.state = 'open';
        }
        close() {
            var Uc, Vc, Wc, Xc;
            if ('open' !== this.state)
                return;
            this.state = 'closing', 'function' == typeof this.onClose && this.onClose();
            const {
                element: Yc
            } = this;
            Yc.removeEventListener('click', this), document.removeEventListener('touchmove', this, !1), document.removeEventListener('scroll', this, !1), Yc.remove(), document.body.style.overflow = null !== (Uc = this.savedOverflow) && void 0 !== Uc ? Uc : '', document.body.style.marginRight = null !== (Vc = this.savedMarginRight) && void 0 !== Vc ? Vc : '', _Uc() !== this.savedActiveElement && (null === (Xc = null === (Wc = this.savedActiveElement) || void 0 === Wc ? void 0 : Wc.focus) || void 0 === Xc || Xc.call(Wc)), Yc.innerHTML = '', this.state = 'closed';
        }
        handleEvent(Uc) {
            this.preventOverlayClose || (Uc.target === this._element && 'click' === Uc.type ? (this.close(), Uc.preventDefault(), Uc.stopPropagation()) : Uc.target !== document || 'touchmove' !== Uc.type && 'scroll' !== Uc.type || (this.close(), Uc.preventDefault(), Uc.stopPropagation()));
        }
        constructor(Uc) {
            var Vc, Wc;
            this.preventOverlayClose = null !== (Vc = null == Uc ? void 0 : Uc.preventOverlayClose) && void 0 !== Vc && Vc, this.translucent = null !== (Wc = null == Uc ? void 0 : Uc.translucent) && void 0 !== Wc && Wc, this.state = 'closed';
        }
    }

    function _Uc() {
        var Vc;
        let Wc = document.activeElement;
        for (; null === (Vc = null == Wc ? void 0 : Wc.shadowRoot) || void 0 === Vc ? void 0 : Vc.activeElement;)
            Wc = Wc.shadowRoot.activeElement;
        return Wc;
    }
    const Uc = new Set([
        'Backquote',
        'Digit0',
        'Digit1',
        'Digit2',
        'Digit3',
        'Digit4',
        'Digit5',
        'Digit6',
        'Digit7',
        'Digit8',
        'Digit9',
        'Minus',
        'Equal',
        'IntlYen',
        'KeyQ',
        'KeyW',
        'KeyE',
        'KeyR',
        'KeyT',
        'KeyY',
        'KeyU',
        'KeyI',
        'KeyO',
        'KeyP',
        'BracketLeft',
        'BracketRight',
        'Backslash',
        'KeyA',
        'KeyS',
        'KeyD',
        'KeyF',
        'KeyG',
        'KeyH',
        'KeyJ',
        'KeyK',
        'KeyL',
        'Semicolon',
        'Quote',
        'IntlBackslash',
        'KeyZ',
        'KeyX',
        'KeyC',
        'KeyV',
        'KeyB',
        'KeyN',
        'KeyM',
        'Comma',
        'Period',
        'Slash',
        'IntlRo',
        'Space',
        'Numpad0',
        'Numpad1',
        'Numpad2',
        'Numpad3',
        'Numpad4',
        'Numpad5',
        'Numpad6',
        'Numpad7',
        'Numpad8',
        'Numpad9',
        'NumpadAdd',
        'NumpadComma',
        'NumpadDecimal',
        'NumpadDivide',
        'NumpadEqual',
        'NumpadHash',
        'NumpadMultiply',
        'NumpadParenLeft',
        'NumpadParenRight',
        'NumpadStar',
        'NumpadSubstract'
    ]);

    function Vc(Wc) {
        return !Wc.ctrlKey && !Wc.metaKey && 'Dead' !== Wc.key && ('' === Wc.code || Uc.has(Wc.code));
    }

    function Vc(Wc) {
        const Xc = [];
        return (Wc = function(Yc) {
            if (Yc.code)
                return Yc;
            const Zc = Object.entries(Ki().mapping);
            let $c = !1,
                ad = !1,
                bd = '';
            for (let cd = 0; cd < 4; cd++) {
                for (const [dd, ed] of Zc)
                    if (ed[cd] === Yc.key) {
                        bd = dd, 3 === cd ? ($c = !0, ad = !0) : 2 === cd ? $c = !0 : 1 === cd && (ad = !0);
                        break;
                    }
                if (bd)
                    break;
            }
            return new KeyboardEvent(Yc.type, {
                ...Yc,
                altKey: $c,
                shiftKey: ad,
                code: bd
            });
        }(Wc)).ctrlKey && Xc.push('ctrl'), Wc.metaKey && Xc.push('meta'), Wc.altKey && Xc.push('alt'), Wc.shiftKey && Xc.push('shift'), 0 === Xc.length ? '[' + Wc.code + ']' : (Xc.push('[' + Wc.code + ']'), Xc.join('+'));
    }

    function Vc() {
        var Wc;
        if (!_bd())
            return null;
        let Xc = document.activeElement;
        for (; null === (Wc = null == Xc ? void 0 : Xc.shadowRoot) || void 0 === Wc ? void 0 : Wc.activeElement;)
            Xc = Xc.shadowRoot.activeElement;
        return Xc;
    }

    function Vc(Wc) {
        var Xc;
        if (!Wc)
            return '';
        let Yc;
        return 'Unidentified' === Wc.key && Wc.target && (Yc = Wc.target.value), Yc = null !== (Xc = null != Yc ? Yc : Wc.key) && void 0 !== Xc ? Xc : Wc.code, /^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(Yc) && (Yc = ''), Yc;
    }
    class Vc {
        get maximumDepth() {
            return 1000;
        }
        reset() {
            this.stack = [], this.index = -1;
        }
        startRecording() {
            this.recording = !0;
        }
        canUndo() {
            return this.index > 0;
        }
        canRedo() {
            return this.index !== this.stack.length - 1;
        }
        undo() {
            return !!this.canUndo() && (this.model.setState(this.stack[this.index - 1], {
                suppressChangeNotifications: !1,
                type: 'undo'
            }), this.index -= 1, this.canCoalesce = !1, !0);
        }
        redo() {
            return !!this.canRedo() && (this.index += 1, this.model.setState(this.stack[this.index], {
                suppressChangeNotifications: !1,
                type: 'redo'
            }), this.canCoalesce = !1, !0);
        }
        pop() {
            this.canUndo() && (this.index -= 1, this.stack.pop());
        }
        snapshot() {
            return !!this.recording && (this.stack.splice(this.index + 1, this.stack.length - this.index - 1), this.stack.push(this.model.getState()), this.index++, this.stack.length > this.maximumDepth && this.stack.shift(), this.canCoalesce = !1, !0);
        }
        snapshotAndCoalesce() {
            if (!this.recording)
                return !1;
            this.canCoalesce && this.pop();
            const Wc = this.snapshot();
            return this.canCoalesce = !0, Wc;
        }
        constructor(Wc) {
            this.recording = !1, this.canCoalesce = !1, this.model = Wc, this.reset();
        }
    }
    var Wc = '.ML__keyboard{--hue:206;--keyboard-background:rgba(209,213,217,.97);--keyboard-text:#000;--keyboard-text-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-background-border:#ddd;--keycap-background:#fff;--keycap-background-active:#e5e5e5;--keycap-background-border:#e5e6e9;--keycap-background-border-bottom:#8d8f92;--keycap-text:#000;--keycap-text-active:#fff;--keycap-secondary-text:#000;--keycap-modifier-background:#b9bdc7;--keycap-modifier-border:#c5c9d0;--keycap-modifier-border-bottom:#989da6;--keyboard-alternate-background:#fff;--keyboard-alternate-background-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-alternate-text:var(--keycap-text,#000);--keyboard-alternate-text-active:#fff;--keyboard-alternate-key-length:70px;--keyboard-alternate-key-font-size:30px;--keyboard-alternate-key-aside-font-size:12px;--keyboard-height:276px;--keycap-height:52px;--keycap-font-size:20px;--keycap-small-font-size:calc(var(--keycap-font-size)*0.8);--keycap-extra-small-font-size:calc(var(--keycap-font-size)/1.42);--keycap-tt-font-size:calc(var(--keycap-font-size)*1.5);height:100%;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:var(--keyboard-zindex,105)}.ML__keyboard.is-visible .ML__keyboard--plate{opacity:1;transform:translateY(calc(var(--keyboard-height, 276px)*-1));transition-timing-function:cubic-bezier(.4,0,1,1);visibility:visible}.ML__keyboard.alternate-keys{align-content:center;background-color:var(--keyboard-alternate-background);border-radius:6px;bottom:auto;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);box-sizing:content-box;display:flex;flex-direction:row;justify-content:center;max-width:286px;position:fixed;text-align:center;top:0;transform:none;transition:none;visibility:hidden;z-index:calc(var(--keyboard-zindex, 105) + 1)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys{max-width:320px}}.ML__keyboard.alternate-keys.is-visible{visibility:visible}.ML__keyboard.alternate-keys.compact{--keyboard-alternate-key-length:50px;--keyboard-alternate-key-font-size:24px;--keyboard-alternate-key-aside-font-size:10px}.ML__keyboard.alternate-keys ul{display:flex;flex-flow:row wrap-reverse;justify-content:center;list-style:none;margin:3px;padding:0}.ML__keyboard.alternate-keys ul>li{fill:currentColor;align-items:center;background:transparent;border:1px solid transparent;border-radius:5px;box-sizing:border-box;color:var(--keyboard-alternate-text);display:flex;flex-flow:column;font-size:var(--keyboard-alternate-key-font-size);height:var(--keyboard-alternate-key-length);justify-content:center;margin:0;pointer-events:all;width:var(--keyboard-alternate-key-length)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys ul>li{font-size:24px;height:50px;width:50px}}.ML__keyboard.alternate-keys ul>li.is-active,.ML__keyboard.alternate-keys ul>li.is-pressed,.ML__keyboard.alternate-keys ul>li:hover{background:var(--keyboard-alternate-background-active);color:var(--keyboard-alternate-text-active)}.ML__keyboard.alternate-keys ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard.alternate-keys ul>li.small-button{background:#fbfbfb;height:42px;margin:2px;width:42px}.ML__keyboard.alternate-keys ul>li.small-button:hover{background:var(--keyboard-alternate-background-active)}.ML__keyboard.alternate-keys ul>li.box>div,.ML__keyboard.alternate-keys ul>li.box>span{border:1px dashed rgba(0,0,0,.24)}.ML__keyboard.alternate-keys ul>li .warning{align-items:center;background:#cd0030;border-radius:5px;color:#fff;display:flex;justify-content:center;min-height:60px;min-width:60px;padding:5px}.ML__keyboard.alternate-keys ul>li .warning.is-active,.ML__keyboard.alternate-keys ul>li .warning.is-pressed,.ML__keyboard.alternate-keys ul>li .warning:hover{background:red}.ML__keyboard.alternate-keys ul>li .warning svg.svg-glyph{height:50px;width:50px}.ML__keyboard.alternate-keys ul>li aside{font-size:var(--keyboard-alternate-key-aside-font-size);line-height:12px;opacity:.78;padding-top:2px}.ML__keyboard .ML__keyboard--plate{-webkit-backdrop-filter:grayscale(50%);backdrop-filter:grayscale(50%);background-color:var(--keyboard-background);border:1px solid var(--keyboard-background-border);bottom:calc(var(--keyboard-height, 276px)*-1);box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);box-sizing:border-box;cursor:pointer;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:16px;font-weight:400;left:0;margin:0;opacity:0;padding-top:5px;pointer-events:all;position:absolute;text-shadow:none;touch-action:none;transform:translate(0);transition:.28s cubic-bezier(0,0,.2,1);transition-property:transform,opacity;-webkit-user-select:none;user-select:none;visibility:hidden;width:100%}.ML__keyboard .ML__keyboard--plate .tex{font-family:KaTeX_Math,KaTeX_Main,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tex-math{font-family:KaTeX_Math,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tt{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace!important;font-size:var(--keycap-tt-font-size,30px);font-weight:400}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer{display:none;outline:none}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer.is-visible{display:flex;flex-flow:column}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{align-self:center;display:flex;flex-flow:row;justify-content:space-between;min-width:736px}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{min-width:556px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{max-width:100vw;min-width:365px;width:365px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:20px;width:20px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:13px;width:17px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.left{display:flex;flex-flow:row;justify-content:flex-start;position:relative}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.right{display:flex;flex-flow:row;justify-content:flex-end}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{fill:currentColor;align-items:baseline;background:0;border:none;border-bottom:2px solid transparent;box-shadow:none;color:var(--keyboard-text);cursor:pointer;display:flex;font-size:110%;justify-content:center;margin:7px 4px 6px;min-height:0;padding:4px 10px}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled.is-pressed svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled:hover svg{color:var(--keyboard-text);opacity:.2}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:100%;padding:0 6px 0 0}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:90%;padding-left:4px;padding-right:4px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-pressed,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:hover{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.selected{border-bottom:2px solid var(--keyboard-text-active);color:var(--keyboard-text-active);margin-bottom:8px;padding-bottom:0}.ML__keyboard .ML__keyboard--plate [data-tooltip]{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{background:#616161;border-radius:2px;bottom:100%;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-tooltip);display:inline-table;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;text-align:center;top:inherit;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1) 1s;width:max-content;z-index:2}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{font-size:16px;padding:8px 16px}}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover:after{opacity:1;transform:scale(1)}.ML__keyboard .ML__keyboard--plate div .rows{align-items:center;border:0;border-collapse:separate;clear:both;display:flex;flex-flow:column;margin:auto}.ML__keyboard .ML__keyboard--plate div .rows>ul{height:40px;list-style:none;margin:0 0 3px;padding:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{fill:currentColor;-webkit-tap-highlight-color:transparent;align-items:center;background:var(--keycap-background);border:1px solid var(--keycap-background-border);border-bottom-color:var(--keycap-background-border-bottom);border-radius:5px;box-sizing:border-box;color:var(--keycap-text);display:flex;flex-flow:column;float:left;font-size:var(--keycap-font-size,20px);height:40px;justify-content:center;margin-right:2px;overflow:hidden;padding:8px 0;position:relative;text-align:center;-webkit-user-select:none;user-select:none;vertical-align:top;width:34px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li:last-child{margin-right:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tt{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bottom{justify-content:flex-end}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.left{align-items:flex-start;padding-left:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.right{align-items:flex-end;padding-right:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li svg.svg-glyph{height:20px;width:20px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{align-items:center;background:#cd0030;border-radius:100%;color:#fff;display:flex;height:25px;justify-content:center;margin-bottom:-2px;min-height:25px;min-width:25px;padding:5px;width:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:16px;width:16px}@media only screen and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{height:16px;min-height:16px;min-width:16px;width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:14px;width:14px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w0{width:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w5{width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w15{width:52px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w20{width:70px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w50{width:178px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.separator{background:transparent;border:none;pointer-events:none}@media only screen and (max-width:560px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.if-wide{display:none}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tex-math{font-size:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li:hover{background:var(--keycap-background-active);color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap:active{color:var(--keyboard-text-active);transform:translateY(calc(var(--keycap-height, 52px)*-.2)) scale(1.4);z-index:calc(var(--keyboard-zindex, 105) - 5)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier:active{background:var(--keyboard-text-active);color:var(--keycap-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:18px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:16px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.fnbutton{font-size:12px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:var(--keycap-extra-small-font-size,14px)}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:calc(var(--keycap-extra-small-font-size, 14px)/1.55)}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier{background-color:var(--keycap-modifier-background);border-color:var(--keycap-modifier-border);border-bottom-color:var(--keycap-modifier-border-bottom);font-size:65%;font-weight:100}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:hover,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:hover{color:#fff}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.w50{font-size:80%;font-weight:100;padding-top:10px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{color:#555}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{font-size:9px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{color:#666;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:10px;line-height:10px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{display:none}}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:2px;width:calc(10vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:calc(5vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:calc(15vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:calc(20vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:calc(50vw - 2px)}}@media only screen and (min-width:415px) and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:3px;width:37px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:17px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:57px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:77px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:197px}}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:4px;width:51px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:23.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:78.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:106px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:271px}}@media only screen and (min-width:1025px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:6px;width:66px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>.modifier{font-size:80%}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:30px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:102px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:138px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:354px}}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keyboard{--hue:206;--keyboard-background:#4e6373;--keyboard-background:#4e6073;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}}body[theme=dark] .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}div.ML__keyboard.material{--keyboard-background:rgba(209,213,217,.9);--keyboard-background-border:#ddd;--keycap-background:transparent;--keycap-background-active:#cccfd1;--keycap-background-border:transparent;--keyboard-alternate-background:#efefef;--keyboard-alternate-text:#000;font-family:Roboto,sans-serif}div.ML__keyboard.material.alternate-keys{background:var(--keyboard-alternate-background);border:1px solid transparent;border-radius:5px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}div.ML__keyboard.material.alternate-keys ul li.is-active,div.ML__keyboard.material.alternate-keys ul li.is-pressed,div.ML__keyboard.material.alternate-keys ul li:active,div.ML__keyboard.material.alternate-keys ul li:hover{fill:currentColor;background:#5f97fc;border:1px solid transparent;color:#fff}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>div{font-size:16px}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:hover,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-pressed{fill:currentColor;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>.selected{fill:currentColor;border-bottom:2px solid #5f97fc;color:#5f97fc;margin-bottom:8px;padding-bottom:0}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap{fill:currentColor;background:transparent;border:1px solid transparent;border-radius:5px;color:var(--keycap-text);transition:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap.tt{color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]{background:#e0e0e0;height:20px;margin-bottom:10px;margin-top:10px}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:hover{background:#d0d0d0;box-shadow:none;transform:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):hover{background:var(--keycap-background-active);border:1px solid transparent;box-shadow:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{background:var(--keyboard-alternate-background);box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);color:var(--keyboard-alternate-text)}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);font-size:10px;justify-content:flex-start;margin-left:10px;margin-right:10px;padding:2px 0 0;transform:translateY(-10px) scale(2);transition:none;vertical-align:top;width:19.5px;z-index:calc(var(--ML_keyboard-zindex, 105) - 5)}}@media only screen and (max-width:414px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{width:16.5px}}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child.is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child:active{margin-left:14px;margin-right:0}}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier{fill:currentColor;background:transparent;border:0;color:#869096;font-size:16px;transition:none}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.selected{border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:hover{background:var(--keycap-background-active);border:0;box-shadow:none;color:var(--keycap-text)}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton{background:transparent;border:0}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.selected{fill:currentColor;border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:hover{fill:currentColor;background:var(--keycap-background-active);border:0;box-shadow:none;color:#5f97fc}@media (prefers-color-scheme:dark){body:not([theme=light]) div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}';

    function Xc(Yc, Zc, $c) {
        var ad;
        let _bd, cd, dd, ed, fd;
        'object' == typeof(ad = $c) && ('default' in ad || 'pressed' in ad) ? ($c.default && (Zc.dataset.command = JSON.stringify($c.default)), $c.alt && (Zc.dataset.commandAlt = JSON.stringify($c.alt)), $c.altshift && (Zc.dataset.commandAltshift = JSON.stringify($c.altshift)), $c.shift && (Zc.dataset.commandShift = JSON.stringify($c.shift)), $c.pressed && (Zc.dataset.commandPressed = JSON.stringify($c.pressed)), $c.pressAndHoldStart && (Zc.dataset.commandPressAndHoldStart = JSON.stringify($c.pressAndHoldStart)), $c.pressAndHoldEnd && (Zc.dataset.commandPressAndHoldEnd = JSON.stringify($c.pressAndHoldEnd))) : Zc.dataset.command = JSON.stringify($c), ii(Zc, 'mousedown touchstart:passive', $c => {
            if ('mousedown' !== $c.type || 1 === $c.buttons) {
                $c.stopPropagation(), 'touchstart' !== $c.type && $c.preventDefault(), document.body.style['-webkit-user-select'] = 'none', Zc.classList.add('is-pressed'), _bd = Date.now(), 'touchstart' === $c.type && (dd = $c.changedTouches[0].identifier);
                const gd = Zc.getAttribute('data-command-pressed');
                gd && Yc(JSON.parse(gd));
                const hd = Zc.getAttribute('data-command-press-and-hold-start');
                hd && (cd = Zc, fd && clearTimeout(fd), fd = setTimeout(() => {
                    Zc.classList.contains('is-pressed') && Yc(JSON.parse(hd));
                }, 300));
            }
        }), ii(Zc, 'mouseleave touchcancel', () => {
            Zc.classList.remove('is-pressed');
        }), ii(Zc, 'touchmove:passive', Yc => {
            for (let gd = 0; gd < Yc.changedTouches.length; gd++)
                if (Yc.changedTouches[gd].identifier === dd) {
                    const hd = document.elementsFromPoint(Yc.changedTouches[gd].clientX, Yc.changedTouches[gd].clientY),
                        id = hd[hd.length - 1];
                    id !== ed && ed && (ed.dispatchEvent(new MouseEvent('mouseleave'), {
                        bubbles: !0
                    }), ed = null), id && (ed = id, id.dispatchEvent(new MouseEvent('mouseenter', {
                        bubbles: !0,
                        buttons: 1
                    })));
                }
        }), ii(Zc, 'mouseenter', Yc => {
            1 === Yc.buttons && Zc.classList.add('is-pressed');
        }), ii(Zc, 'mouseup touchend click', $c => {
            if (document.body.style['-webkit-user-select'] = '', ed) {
                $c.stopPropagation(), $c.preventDefault();
                const gd = ed;
                return ed = null, void gd.dispatchEvent(new MouseEvent('mouseup', {
                    bubbles: !0
                }));
            }
            if (Zc.classList.remove('is-pressed'), Zc.classList.add('is-active'), 'click' === $c.type && 0 !== $c.detail)
                return $c.stopPropagation(), void $c.preventDefault();
            setTimeout(() => Zc.classList.remove('is-active'), 150);
            let gd = Zc.getAttribute('data-command-press-and-hold-end');
            const hd = Date.now();
            (Zc !== cd || hd < _bd + 300) && (gd = null), !gd && $c.altKey && $c.shiftKey && (gd = Zc.getAttribute('data-command-altshift')), !gd && $c.altKey && (gd = Zc.getAttribute('data-command-alt')), !gd && $c.shiftKey && (gd = Zc.getAttribute('data-command-shift')), gd || (gd = Zc.getAttribute('data-command')), gd && Yc(JSON.parse(gd)), $c.stopPropagation(), $c.preventDefault();
        });
    }
    let Xc;

    function Yc() {
        var Zc;
        _cd();
        const $c = document.querySelector('#mathlive-alternate-keys-panel');
        return $c && ($c.classList.remove('is-visible'), $c.innerHTML = ''), null === (Zc = Tc.scrim) || void 0 === Zc || Zc.close(), !1;
    }
    class Yc {
        setOptions(Zc) {
            var $c, ad;
            let bd = '';
            if (this._element) {
                const cd = this._element.querySelector('div.keyboard-layer.is-visible');
                cd && (bd = null !== ($c = cd.getAttribute('data-layer')) && void 0 !== $c ? $c : ''), this._element.remove(), this._element = void 0;
            }
            if (this.options = Zc, this.visible) {
                this.buildAndAttachElement(Zc.virtualKeyboardTheme);
                const cd = this.element.querySelector(`.keyboard-layer[data-layer="${ bd }"]`);
                cd && (null === (ad = this.element.querySelector('.keyboard-layer.is-visible')) || void 0 === ad || ad.classList.remove('is-visible'), cd.classList.add('is-visible')), this.element.classList.add('is-visible');
            }
        }
        get element() {
            return this._element;
        }
        set element(Zc) {
            var $c;
            this._element !== Zc && (null === ($c = this._element) || void 0 === $c || $c.remove(), this._element = Zc);
        }
        get visible() {
            return this._visible;
        }
        set visible(Zc) {
            this._visible = Zc;
        }
        get height() {
            var Zc, $c;
            return null !== ($c = null === (Zc = this.element) || void 0 === Zc ? void 0 : Zc.offsetHeight) && void 0 !== $c ? $c : 0;
        }
        buildAndAttachElement(Zc) {
            var $c;
            this.element = function(ad, bd) {
                var cd, dd, ed, fd;
                _cd();
                let gd = '<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\n    <symbol id="svg-delete-backward" viewBox="0 0 576 512">\n      <path d="M432.1 208.1L385.9 256L432.1 303C442.3 312.4 442.3 327.6 432.1 336.1C423.6 346.3 408.4 346.3 399 336.1L352 289.9L304.1 336.1C295.6 346.3 280.4 346.3 271 336.1C261.7 327.6 261.7 312.4 271 303L318.1 256L271 208.1C261.7 199.6 261.7 184.4 271 175C280.4 165.7 295.6 165.7 304.1 175L352 222.1L399 175C408.4 165.7 423.6 165.7 432.1 175C442.3 184.4 442.3 199.6 432.1 208.1V208.1zM512 64C547.3 64 576 92.65 576 128V384C576 419.3 547.3 448 512 448H205.3C188.3 448 172 441.3 160 429.3L9.372 278.6C3.371 272.6 0 264.5 0 256C0 247.5 3.372 239.4 9.372 233.4L160 82.75C172 70.74 188.3 64 205.3 64L512 64zM528 128C528 119.2 520.8 112 512 112H205.3C201 112 196.9 113.7 193.9 116.7L54.63 256L193.9 395.3C196.9 398.3 201 400 205.3 400H512C520.8 400 528 392.8 528 384V128z"/>\n    </symbol>\n\n    <symbol id="svg-shift" viewBox="0 0 384 512">\n      <path d="M2.438 252.3C7.391 264.2 19.06 272 32 272h80v160c0 26.51 21.49 48 48 48h64C250.5 480 272 458.5 272 432v-160H352c12.94 0 24.61-7.797 29.56-19.75c4.953-11.97 2.219-25.72-6.938-34.88l-160-176C208.4 35.13 200.2 32 192 32S175.6 35.13 169.4 41.38l-160 176C.2188 226.5-2.516 240.3 2.438 252.3zM192 86.63L313.4 224H224v208H160V224H70.63L192 86.63z"/>\n    </symbol>\n\n    <symbol id="svg-commit" viewBox="0 0 512 512">\n      <path d="M135 432.1l-128-128C2.344 300.3 0 294.2 0 288s2.344-12.28 7.031-16.97l128-128c9.375-9.375 24.56-9.375 33.94 0s9.375 24.56 0 33.94L81.94 264H464v-208C464 42.75 474.8 32 488 32S512 42.75 512 56V288c0 13.25-10.75 24-24 24H81.94l87.03 87.03c9.375 9.375 9.375 24.56 0 33.94S144.4 442.3 135 432.1z"/>\n    </symbol>\n\n    <symbol id="svg-command" viewBox="0 0 640 512">\n      <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>\n    </symbol>\n\n    <symbol id="svg-undo" viewBox="0 0 512 512">\n      <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>\n    </symbol>\n    <symbol id="svg-redo" viewBox="0 0 512 512">\n      <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-arrow-left" viewBox="0 0 320 512">\n      <path d="M206.7 464.6l-183.1-191.1C18.22 267.1 16 261.1 16 256s2.219-11.97 6.688-16.59l183.1-191.1c9.152-9.594 24.34-9.906 33.9-.7187c9.625 9.125 9.938 24.37 .7187 33.91L73.24 256l168 175.4c9.219 9.5 8.906 24.78-.7187 33.91C231 474.5 215.8 474.2 206.7 464.6z"/>\n    </symbol>\n    <symbol id="svg-arrow-right" viewBox="0 0 320 512">\n      <path d="M113.3 47.41l183.1 191.1c4.469 4.625 6.688 10.62 6.688 16.59s-2.219 11.97-6.688 16.59l-183.1 191.1c-9.152 9.594-24.34 9.906-33.9 .7187c-9.625-9.125-9.938-24.38-.7187-33.91l168-175.4L78.71 80.6c-9.219-9.5-8.906-24.78 .7187-33.91C88.99 37.5 104.2 37.82 113.3 47.41z"/>\n    </symbol>\n    <symbol id="svg-tab" viewBox="0 0 448 512">\n      <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-copy" viewBox="0 0 448 512">\n      <path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z"/>\n    </symbol>\n    <symbol id="svg-angle-double-right" viewBox="0 0 320 512">\n      <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z"/>\n    </symbol>\n    <symbol id="svg-angle-double-left" viewBox="0 0 320 512">\n      <path d="M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z"/>\n    </symbol>\n    <symbol id="svg-trash" viewBox="0 0 448 512">\n      <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>\n    </symbol>\n</svg>\n        ';
                ad.create(), _ad['foreground-color'] = [];
                for (const hd of Object.keys(g))
                    _ad['foreground-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' + g[hd] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                color: hd
                            }
                        ]
                    });
                _ad['background-color'] = [];
                for (const id of Object.keys(f))
                    _ad['background-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; background:' + f[id] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                backgroundColor: id
                            }
                        ]
                    });
                _bd = {
                    ..._ad
                };
                for (const jd of Object.keys(_bd))
                    _bd[jd] = _bd[jd].slice();
                for (let kd = 0; kd < 26; kd++) {
                    const ld = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' [kd];
                    _bd[ld] || (_bd[ld] = []), _bd[ld].unshift({
                        latex: '\\mathbb{' + ld + '}',
                        aside: 'blackboard',
                        insert: '\\mathbb{' + ld + '}'
                    }), _bd[ld].unshift({
                        latex: '\\mathbf{' + ld + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + ld + '}'
                    }), _bd[ld].unshift({
                        latex: '\\mathsf{' + ld + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + ld + '}'
                    }), _bd[ld].unshift({
                        latex: '\\mathtt{' + ld + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + ld + '}'
                    }), _bd[ld].unshift({
                        latex: '\\mathcal{' + ld + '}',
                        aside: 'calligraphy',
                        insert: '\\mathcal{' + ld + '}'
                    }), _bd[ld].unshift({
                        latex: '\\mathfrak{' + ld + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + ld + '}'
                    });
                }
                for (let ld = 0; ld <= 26; ld++) {
                    const md = 'abcdefghijklmnopqrstuvwxyz' [ld];
                    _bd[md] || (_bd[md] = []), _bd[md].unshift({
                        latex: '\\mathsf{' + md + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + md + '}'
                    }), _bd[md].unshift({
                        latex: '\\mathbf{' + md + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + md + '}'
                    }), _bd[md].unshift({
                        latex: '\\mathtt{' + md + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + md + '}'
                    }), _bd[md].unshift({
                        latex: '\\mathfrak{' + md + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + md + '}'
                    });
                }
                for (let md = 0; md < 10; md++) {
                    const nd = '0123456789' [md];
                    _bd[nd] || (_bd[nd] = []), _bd[nd].unshift({
                        latex: '\\mathbf{' + nd + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + nd + '}'
                    }), _bd[nd].unshift({
                        latex: '\\mathsf{' + nd + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + nd + '}'
                    }), _bd[nd].unshift({
                        latex: '\\mathtt{' + nd + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + nd + '}'
                    }), _bd[nd].unshift({
                        latex: '\\mathcal{' + nd + '}',
                        aside: 'script',
                        insert: '\\mathcal{' + nd + '}'
                    }), _bd[nd].unshift({
                        latex: '\\mathfrak{' + nd + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + nd + '}'
                    });
                }
                let nd = md.options.virtualKeyboards;
                nd || (nd = 'all'), nd = nd.replace(/\ball\b/i, 'numeric functions symbols roman  greek');
                const od = {
                        ..._cd,
                        ...null !== (cd = md.options.customVirtualKeyboardLayers) && void 0 !== cd ? cd : {}
                    },
                    pd = {
                        ..._Zc,
                        ...null !== (dd = md.options.customVirtualKeyboards) && void 0 !== dd ? dd : {}
                    },
                    qd = nd.replace(/\s+/g, ' ').split(' ');
                for (const rd of qd) {
                    if (!pd[rd])
                        continue;
                    let sd = null !== (ed = pd[rd].layers) && void 0 !== ed ? ed : [];
                    pd[rd].layer && sd.push(pd[rd].layer), sd = [...new Set(sd)];
                    for (const td of sd) {
                        if (!od[td])
                            break;
                        if ('object' == typeof od[td]) {
                            const ud = od[td];
                            let vd = '';
                            if ('string' == typeof ud.styles ? vd += `<style>${ ud.styles }</style>` : 'object' == typeof ud.styles && (vd += `<style>${ _dd(ud.styles) }</style>`), ud.backdrop && (vd += `<div class='${ ud.backdrop }'>`), ud.container && (vd += `<div class='${ ud.container }'>`), ud.rows) {
                                vd += '<div class=\'rows\'>';
                                for (const wd of ud.rows) {
                                    vd += '<ul>';
                                    for (const xd of wd) {
                                        if (vd += '<li', xd.class) {
                                            let yd = xd.class;
                                            xd.layer && !/layer-switch/.test(yd) && (yd += ' layer-switch'), /separator/.test(yd) || (yd += ' keycap'), vd += ` class="${ yd }"`;
                                        } else
                                            vd += ' class="keycap"';
                                        if (xd.key && (vd += ` data-key="${ xd.key }"`), xd.command && ('string' == typeof xd.command ? vd += ` data-command='"${ xd.command }"'` : (vd += ' data-command=\'', vd += JSON.stringify(xd.command), vd += '\'')), xd.insert && (vd += ` data-insert="${ xd.insert }"`), xd.latex && (vd += ` data-latex="${ xd.latex }"`), xd.aside && (vd += ` data-aside="${ xd.aside }"`), xd.variants) {
                                            const yd = Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                                            _bd[yd] = xd.variants, vd += ` data-alt-keys="${ yd }"`;
                                        }
                                        xd.shifted && (vd += ` data-shifted="${ xd.shifted }"`), xd.shiftedCommand && (vd += ` data-shifted-command="${ xd.shiftedCommand }"`), xd.layer && (vd += ` data-layer="${ xd.layer }"`), vd += `>${ xd.label ? xd.label : '' }</li>`;
                                    }
                                    vd += '</ul>';
                                }
                                vd += '</div>';
                            }
                            ud.container && (vd += '</div>'), ud.backdrop && (vd += '</div>'), od[td] = vd;
                        }
                        gd += `<div tabindex="-1" class='keyboard-layer' data-layer='${ td }'>`, gd += _dd(md.options, nd, rd);
                        const ud = od[td];
                        'string' == typeof ud && (gd += _dd(md.options, ud)), gd += '</div>';
                    }
                }
                const sd = document.createElement('div');
                sd.className = 'ML__keyboard', rd ? sd.classList.add(rd) : md.options.virtualKeyboardTheme && sd.classList.add(md.options.virtualKeyboardTheme);
                const td = document.createElement('div');
                td.className = 'ML__keyboard--plate', td.innerHTML = md.options.createHTML(gd), sd.appendChild(td);
                const ud = sd.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton');
                for (const vd of ud)
                    vd.id = 'ML__k' + Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                _dd(vd, [...ud]);
                const wd = sd.querySelectorAll('.layer-switch');
                for (const xd of wd)
                    xd.classList.contains('shift') ? hr(xd => vd.executeCommand(xd), xd, {
                        pressed: 'shiftKeyboardLayer',
                        default: [
                            'switchKeyboardLayer',
                            xd.getAttribute('data-layer')
                        ],
                        pressAndHoldEnd: 'unshiftKeyboardLayer'
                    }) : hr(xd => vd.executeCommand(xd), xd, {
                        default: [
                            'switchKeyboardLayer',
                            xd.getAttribute('data-layer')
                        ]
                    });
                const yd = sd.querySelectorAll('.keyboard-layer');
                for (const zd of yd)
                    zd.addEventListener('mousedown', zd => {
                        zd.preventDefault(), zd.stopPropagation();
                    }), zd.addEventListener('touchstart', zd => {
                        zd.preventDefault(), zd.stopPropagation();
                    }, {
                        passive: !1
                    });
                return null === (fd = yd[0]) || void 0 === fd || fd.classList.add('is-visible'), sd;
            }(this, null != Zc ? Zc : ''), ii(this.element, 'touchstart:passive mousedown', () => this.focusMathfield()), null === ($c = this.options.virtualKeyboardContainer) || void 0 === $c || $c.appendChild(this.element);
        }
        handleEvent(Zc) {
            if (this.element)
                switch (Zc.type) {
                    case 'mouseup':
                    case 'blur':
                    case 'touchend':
                    case 'touchcancel':
                        document.body.style.userSelect = '', _dd(this);
                }
        }
        focusMathfield() {
            var Zc, $c;
            null === ($c = null === (Zc = this._mathfield) || void 0 === Zc ? void 0 : Zc.focus) || void 0 === $c || $c.call(Zc);
        }
        blurMathfield() {
            var Zc, $c;
            null === ($c = null === (Zc = this._mathfield) || void 0 === Zc ? void 0 : Zc.blur) || void 0 === $c || $c.call(Zc);
        }
        stateChanged() {
            var Zc, $c;
            null === ($c = null === (Zc = this._mathfield) || void 0 === Zc ? void 0 : Zc.element) || void 0 === $c || $c.dispatchEvent(new Event('virtual-keyboard-toggle', {
                bubbles: !0,
                cancelable: !1,
                composed: !0
            }));
        }
        executeCommand(Zc) {
            var $c, ad, bd;
            let _cd, dd = [];
            return _hd(Zc) ? (_cd = Zc[0], dd = Zc.slice(1)) : _cd = Zc, _cd = _cd.replace(/-\w/g, Zc => Zc[1].toUpperCase()), 'virtual-keyboard' === (null === ($c = Jc[_cd]) || void 0 === $c ? void 0 : $c.target) ? Jc[_cd].fn(this, ...dd) : null !== (bd = null === (ad = this._mathfield) || void 0 === ad ? void 0 : ad.executeCommand(Zc)) && void 0 !== bd && bd;
        }
        create() {
            this.virtualKeyboardStylesheet || (Xc || (Xc = Si(Wc).toString(36)), this.virtualKeyboardStylesheet = Mi(null, Wc, Xc)), this.coreStylesheet || (this.coreStylesheet = Mi(null, Fc, Si(Fc).toString(36))), null !== this.options.fontsDirectory && Do(this.options.fontsDirectory);
        }
        enable() {
            _id() && (window.addEventListener('mouseup', this), window.addEventListener('blur', this), window.addEventListener('touchend', this), window.addEventListener('touchcancel', this));
        }
        disable() {
            _id() && (window.removeEventListener('mouseup', this), window.removeEventListener('blur', this), window.removeEventListener('touchend', this), window.removeEventListener('touchcancel', this));
        }
        dispose() {}
        constructor(Zc, $c) {
            this.originalContainerBottomPadding = null, this.options = Zc, this.visible = !1, this._mathfield = $c, this.coreStylesheet = null, this.virtualKeyboardStylesheet = null;
        }
    }
    const _Zc = {
            numeric: {
                tooltip: 'keyboard.tooltip.numeric',
                layer: 'math',
                label: '123',
                layers: ['math']
            },
            roman: {
                tooltip: 'keyboard.tooltip.roman',
                layer: 'lower-roman',
                label: 'ABC',
                layers: [
                    'lower-roman',
                    'upper-roman'
                ]
            },
            greek: {
                tooltip: 'keyboard.tooltip.greek',
                layer: 'lower-greek',
                label: '&alpha;&beta;&gamma;',
                classes: 'tex-math',
                layers: [
                    'lower-greek',
                    'upper-greek'
                ]
            },
            functions: {
                tooltip: 'keyboard.tooltip.functions',
                layer: 'functions',
                label: '<i>f</i>&thinsp;()',
                classes: 'tex',
                layers: ['functions']
            },
            symbols: {
                tooltip: 'keyboard.tooltip.symbols',
                layer: 'symbols',
                label: '&infin;\u2260\u2208',
                classes: 'tex',
                layers: ['symbols']
            },
            latex: {
                tooltip: 'keyboard.tooltip.command',
                command: [
                    'switchMode',
                    'latex'
                ],
                label: '<svg class="svg-glyph"><use xlink:href=\'#svg-command\' /></svg>',
                layers: [
                    'latex-lower',
                    'latex-upper',
                    'latex-symbols'
                ]
            },
            style: {
                tooltip: 'keyboard.tooltip.style',
                layer: 'style',
                label: '<b>b</b><i>i</i>\uD835\uDD39'
            }
        },
        $c = {
            '\\varphi ': [
                '&Phi;',
                '\\Phi '
            ],
            '\\varsigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\epsilon ': [
                '&#x0190;',
                '\\char"0190'
            ],
            '\\rho ': [
                '&#x3A1',
                '\\char"3A1'
            ],
            '\\tau ': [
                '&#x3A4;',
                '\\char"3A4'
            ],
            '\\upsilon ': [
                '&Upsilon;',
                '\\Upsilon '
            ],
            '\\theta ': [
                '&Theta;',
                '\\Theta '
            ],
            '\\iota ': [
                '&Iota;',
                '\\char"399'
            ],
            '\\omicron ': [
                '&#x039F;',
                '\\char"39F'
            ],
            '\\pi ': [
                '&Pi;',
                '\\Pi '
            ],
            '\\alpha ': [
                '&Alpha;',
                '\\char"391'
            ],
            '\\sigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\delta ': [
                '&Delta;',
                '\\Delta '
            ],
            '\\phi ': [
                '&#x03a6;',
                '\\Phi '
            ],
            '\\gamma ': [
                '&Gamma;',
                '\\Gamma '
            ],
            '\\eta ': [
                '&Eta;',
                '\\char"397'
            ],
            '\\xi ': [
                '&Xi;',
                '\\Xi '
            ],
            '\\kappa ': [
                '&Kappa;',
                '\\char"39A'
            ],
            '\\lambda ': [
                '&Lambda;',
                '\\Lambda '
            ],
            '\\zeta ': [
                '&Zeta;',
                '\\char"396'
            ],
            '\\chi ': [
                '&Chi;',
                '\\char"3A7'
            ],
            '\\psi ': [
                '&Psi;',
                '\\Psi '
            ],
            '\\omega ': [
                '&Omega;',
                '\\Omega '
            ],
            '\\beta ': [
                '&Beta;',
                '\\char"392'
            ],
            '\\nu ': [
                '&Nu;',
                '\\char"39D'
            ],
            '\\mu ': [
                '&Mu;',
                '\\char"39C'
            ]
        },
        _ad = {
            0: [
                '\\emptyset',
                '\\varnothing',
                '\\infty',
                {
                    latex: '#?_0',
                    insert: '#@_0'
                },
                '\\circ',
                '\\bigcirc',
                '\\bullet'
            ],
            2: [
                '\\frac{1}{2}',
                {
                    latex: '#?^2',
                    insert: '#@^2'
                }
            ],
            3: [
                '\\frac{1}{3}',
                {
                    latex: '#?^3',
                    insert: '#@^3'
                }
            ],
            '.': [
                '.',
                ',',
                ';',
                '\\colon',
                {
                    latex: ':',
                    aside: 'ratio'
                },
                {
                    latex: '\\cdotp',
                    aside: 'center dot',
                    class: 'box'
                },
                {
                    latex: '\\cdots',
                    aside: 'center ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\ldotp',
                    aside: 'low dot',
                    class: 'box'
                },
                {
                    latex: '\\ldots',
                    aside: 'low ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\vdots',
                    aside: '',
                    class: 'box'
                },
                {
                    latex: '\\ddots',
                    aside: '',
                    class: 'box'
                },
                '\\odot',
                '\\oslash',
                '\\circledcirc'
            ],
            '*': [
                '\\cdot',
                '\\ast',
                '\\star',
                '\\bigstar',
                '\\ltimes',
                '\\rtimes',
                '\\rightthreetimes',
                '\\leftthreetimes',
                '\\intercal',
                '\\prod',
                {
                    latex: '\\prod_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                }
            ],
            '+': [
                '\\pm',
                '\\mp',
                '\\sum',
                {
                    latex: '\\sum_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                },
                '\\dotplus',
                '\\oplus'
            ],
            '-': [
                '\\pm',
                '\\mp',
                '\\ominus',
                '\\vert #0  \\vert'
            ],
            '/': [
                '\\divideontimes',
                '/',
                '\\div',
                '\\%'
            ],
            '(': [
                '\\left( #0\\right)',
                '\\left[ #0\\right]',
                '\\left\\{ #0\\right\\}',
                '\\left\\langle #0\\right\\rangle',
                '\\lfloor',
                '\\llcorner',
                '(',
                '\\lbrack',
                '\\lvert',
                '\\lVert',
                '\\lgroup',
                '\\langle',
                '\\lceil',
                '\\ulcorner',
                '\\lmoustache',
                '\\lbrace'
            ],
            ')': [
                '\\rfloor',
                '\\lrcorner',
                ')',
                '\\rbrack',
                '\\rvert',
                '\\rVert',
                '\\rgroup',
                '\\rangle',
                '\\rceil',
                '\\urcorner',
                '\\rmoustache',
                '\\rbrace'
            ],
            '=': [
                '\\cong',
                '\\asymp',
                '\\equiv',
                '\\differencedelta',
                '\\varpropto',
                '\\thickapprox',
                '\\approxeq',
                '\\thicksim',
                '\\backsim',
                '\\eqsim',
                '\\simeq',
                '\\Bumpeq',
                '\\bumpeq',
                '\\doteq',
                '\\Doteq',
                '\\fallingdotseq',
                '\\risingdotseq',
                '\\coloneq',
                '\\eqcirc',
                '\\circeq',
                '\\triangleq',
                '\\between'
            ],
            '!=': [
                '\\neq',
                '\\ncong',
                '',
                '\\nsim'
            ],
            '<': [
                '\\leq',
                '\\leqq',
                '\\lneqq',
                '\\ll',
                '\\lessgtr',
                '\\nless',
                '\\nleq',
                '\\lesssim',
                '\\precsim',
                '\\prec',
                '\\nprec',
                '\\preccurlyeq',
                '\\lessdot'
            ],
            '>': [
                '\\geq',
                '\\geqq',
                '\\gneqq',
                '\\gg',
                '\\gtrless',
                '\\ngtr',
                '\\ngeq',
                '\\gtrsim',
                '\\succsim',
                '\\succ',
                '\\nsucc',
                '\\succcurlyeq',
                '\\gtrdot'
            ],
            in: ['\\owns'],
            '!in': ['\\backepsilon'],
            subset: [
                '\\subseteq',
                '\\nsubset',
                '\\nsubseteq'
            ],
            superset: [
                '\\supseteq',
                '\\nsupset',
                '\\nsupseteq'
            ],
            infinity: [
                '\\aleph_0',
                '\\aleph_1',
                '\\omega',
                '\\mathfrak{m}'
            ],
            'numeric-pi': [
                '\\prod',
                '\\theta',
                '\\rho',
                '\\sin',
                '\\cos',
                '\\tan'
            ],
            ee: [
                '\\times 10^{#?}',
                '\\ln',
                '\\ln_{10}',
                '\\log'
            ],
            '^': ['_{#?}'],
            int: [{
                    latex: '\\int_{#?}^{#?}',
                    class: 'small'
                },
                {
                    latex: '\\int',
                    class: 'small'
                },
                {
                    latex: '\\smallint',
                    class: 'small'
                },
                {
                    latex: '\\iint',
                    class: 'small'
                },
                {
                    latex: '\\iiint',
                    class: 'small'
                },
                {
                    latex: '\\oint',
                    class: 'small'
                },
                {
                    latex: '\\dfrac{\\rd}{\\rd x}',
                    class: 'small'
                },
                {
                    latex: '\\frac{\\partial}{\\partial x}',
                    class: 'small'
                },
                '\\capitalDifferentialD',
                '\\rd',
                '\\partial'
            ],
            nabla: [
                '\\nabla\\times',
                '\\nabla\\cdot',
                '\\nabla^{2}'
            ],
            '!': [
                '!!',
                '\\Gamma',
                '\\Pi'
            ],
            accents: [
                '\\bar{#@}',
                '\\vec{#@}',
                '\\hat{#@}',
                '\\check{#@}',
                '\\dot{#@}',
                '\\ddot{#@}',
                '\\mathring{#@}',
                '\\breve{#@}',
                '\\acute{#@}',
                '\\tilde{#@}',
                '\\grave{#@}'
            ],
            underline: [
                '\\underbrace{#@}',
                '\\underlinesegment{#@}',
                '\\underleftrightarrow{#@}',
                '\\underrightarrow{#@}',
                '\\underleftarrow{#@}',
                '\\undergroup{#@}'
            ],
            overline: [
                '\\overbrace{#@}',
                '\\overlinesegment{#@}',
                '\\overleftrightarrow{#@}',
                '\\overrightarrow{#@}',
                '\\overleftarrow{#@}',
                '\\overgroup{#@}'
            ],
            xleftarrows: [
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xLeftarrow{#@}',
                '\\xleftharpoonup{#@}',
                '\\xleftharpoondown{#@}',
                '\\xtwoheadleftarrow{#@}',
                '\\xhookleftarrow{#@}',
                '\\xtofrom{#@}',
                '\\xleftequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            xrightarrows: [
                '\\xrightarrow{#@}',
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xRightarrow{#@}',
                '\\xrightharpoonup{#@}',
                '\\xrightharpoondown{#@}',
                '\\xtwoheadrightarrow{#@}',
                '\\xrightleftharpoons{#@}',
                '\\xhookrightarrow{#@}',
                '\\xmapsto{#@}',
                '\\xrightequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            A: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            a: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            b: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            B: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            c: [{
                latex: '\\C',
                aside: 'set of complex numbers'
            }],
            d: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            D: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            e: [{
                    latex: '\\exponentialE',
                    aside: 'exponential e'
                },
                {
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                }
            ],
            g: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            G: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            h: [{
                    latex: '\\hbar',
                    aside: 'h bar'
                },
                {
                    latex: '\\hslash',
                    aside: 'h slash'
                }
            ],
            i: [{
                latex: '\\imaginaryI',
                aside: 'imaginary i'
            }],
            j: [{
                latex: '\\imaginaryJ',
                aside: 'imaginary j'
            }],
            l: [{
                latex: '\\ell',
                aside: 'ell'
            }],
            n: [{
                latex: '\\mathbb{N}',
                aside: 'set of natural numbers'
            }],
            p: [{
                latex: '\\mathbb{P}',
                aside: 'set of primes'
            }],
            q: [{
                latex: '\\mathbb{Q}',
                aside: 'set of rational numbers'
            }],
            r: [{
                latex: '\\mathbb{R}',
                aside: 'set of real numbers'
            }],
            z: [{
                latex: '\\mathbb{Z}',
                aside: 'set of integers'
            }],
            'x-var': [
                'y',
                'z',
                't',
                'r',
                {
                    latex: 'f(#?)',
                    class: 'small'
                },
                {
                    latex: 'g(#?)',
                    class: 'small'
                },
                'x^2',
                'x^n',
                'x_n',
                'x_{n+1}',
                'x_i',
                'x_{i+1}'
            ],
            'n-var': [
                'i',
                'j',
                'p',
                'k',
                'a',
                'u'
            ],
            ii: [
                '\\Re',
                '\\Im',
                '\\imaginaryJ',
                '\\Vert #0 \\Vert'
            ],
            logic: [{
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                },
                {
                    latex: '\\ni',
                    aside: 'such that'
                },
                {
                    latex: '\\Colon',
                    aside: 'such that'
                },
                {
                    latex: '\\implies',
                    aside: 'implies'
                },
                {
                    latex: '\\impliedby',
                    aside: 'implied by'
                },
                {
                    latex: '\\iff',
                    aside: 'if and only if'
                },
                {
                    latex: '\\land',
                    aside: 'and'
                },
                {
                    latex: '\\lor',
                    aside: 'or'
                },
                {
                    latex: '\\oplus',
                    aside: 'xor'
                },
                {
                    latex: '\\lnot',
                    aside: 'not'
                },
                {
                    latex: '\\downarrow',
                    aside: 'nor'
                },
                {
                    latex: '\\uparrow',
                    aside: 'nand'
                },
                {
                    latex: '\\curlywedge',
                    aside: 'nor'
                },
                {
                    latex: '\\bar\\curlywedge',
                    aside: 'nand'
                },
                {
                    latex: '\\therefore',
                    aside: 'therefore'
                },
                {
                    latex: '\\because',
                    aside: 'because'
                },
                {
                    latex: '^\\biconditional',
                    aside: 'biconditional'
                },
                '\\leftrightarrow',
                '\\Leftrightarrow',
                '\\to',
                '\\models',
                '\\vdash',
                '\\gets',
                '\\dashv',
                '\\roundimplies'
            ],
            'set-operators': [
                '\\cap',
                '\\cup',
                '\\setminus',
                '\\smallsetminus',
                '\\complement'
            ],
            'set-relations': [
                '\\in',
                '\\notin',
                '\\ni',
                '\\owns',
                '\\subset',
                '\\supset',
                '\\subseteq',
                '\\supseteq',
                '\\subsetneq',
                '\\supsetneq',
                '\\varsubsetneq',
                '\\subsetneqq',
                '\\nsubset',
                '\\nsupset',
                '\\nsubseteq',
                '\\nsupseteq'
            ],
            space: [{
                    latex: '\\char"203A\\!\\char"2039',
                    insert: '\\!',
                    aside: 'negative thin space<br>\u207B\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\,\\unicode{"2039}',
                    insert: '\\,',
                    aside: 'thin space<br>\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\:\\unicode{"2039}',
                    insert: '\\:',
                    aside: 'medium space<br>\u2074\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\;\\unicode{"2039}',
                    insert: '\\;',
                    aside: 'thick space<br>\u2075\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\ \\unicode{"2039}',
                    insert: '\\ ',
                    aside: '\u2153 em'
                },
                {
                    latex: '\\unicode{"203A}\\enspace\\unicode{"2039}',
                    insert: '\\enspace',
                    aside: '\xBD em'
                },
                {
                    latex: '\\unicode{"203A}\\quad\\unicode{"2039}',
                    insert: '\\quad',
                    aside: '1 em'
                },
                {
                    latex: '\\unicode{"203A}\\qquad\\unicode{"2039}',
                    insert: '\\qquad',
                    aside: '2 em'
                }
            ],
            delete: [{
                label: '<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>',
                command: 'deleteAll'
            }],
            '->|': []
        };
    let _bd = {};
    const _cd = {
        math: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'x-var\'><i>x</i></li>\n                <li class=\'keycap tex\' data-alt-keys=\'n-var\'><i>n</i></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-1\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'\\exponentialE\' data-alt-keys=\'ee\'>e</li>\n                <li class=\'keycap tex\' data-latex=\'\\imaginaryI\' data-alt-keys=\'ii\'>i</li>\n                <li class=\'keycap tex\' data-latex=\'\\pi\' data-alt-keys=\'numeric-pi\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-key=\'<\' data-alt-keys=\'<\'>&lt;</li>\n                <li class=\'keycap tex\' data-key=\'>\' data-alt-keys=\'>\'>&gt;</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-2\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'#@^{2}\' data-latex=\'x^2\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'^\' data-insert=\'#@^{#?}\' data-latex=\'x^\\placeholder\'></li>\n                <li class=\'keycap tex small\' data-insert=\'\\sqrt{#0}\' data-latex=\'\\sqrt{#0}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' >(</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' >)</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-3\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap small\' data-alt-keys=\'int\' data-latex=\'\\int_0^\\infty\'></li>\n                <li class=\'keycap\' data-latex=\'\\forall\' data-alt-keys=\'logic\' ></li>\n                <li class=\'action font-glyph bottom right\' data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box\'></span></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-4\'/>\n                <li class=\'separator w5\'></li>\n                <arrows/>\n            </ul>\n        </div>\n    ',
        'lower-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'lower-1\' shift-layer=\'upper-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'lower-2\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'lower-3\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' >,</li>\n                <li class=\'keycap w50\' data-key=\' \' data-alt-keys=\'space\'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'upper-1\'  shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'upper-2\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'upper-3\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' data-alt-keys=\'.\'>;</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        symbols: '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrace \'>{</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrace \'>}</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xleftarrows\' data-latex=\'\\leftarrow\' ></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xrightarrows\' data-latex=\'\\rightarrow\' ></li>\n                <li class=\'keycap tex\' data-alt-keys=\'overline\' data-latex=\'\\overline{#@}\' data-aside=\'overline\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'underline\' data-latex=\'\\underline{#@}\' data-aside=\'underline\'></li>\n                <li class=\'keycap w15\' data-insert=\'\\ulcorner#0\\urcorner \'><span><sup>&#x250c;</sup><span><span style=\'color:#ddd\'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'nabla\' data-insert=\'\\nabla \'>&#x2207;<aside>nabla</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'infinity\' data-insert=\'\\infty \'>&#x221e;</li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrack \'>[</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrack \'>]</li>\n                <li class=\'separator w5\'></li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'in\' data-insert=\'\\in \'>&#x2208;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'!in\' data-insert=\'\\notin \'>&#x2209;</li>\n                <li class=\'keycap tex\' data-insert=\'\\Re \'>&#x211c;<aside>Real</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Im \'>&#x2111;<aside>Imaginary</aside></li>\n                <li class=\'keycap w15\' data-insert=\'\\llcorner#0\\lrcorner \'><span><sub>&#x2514;</sub><span style=\'color:#ddd\'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>\n\n                <li class=\'keycap tex\' data-insert=\'\\partial \'>&#x2202;<aside>partial<br>derivative</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\emptyset \'>&#x2205;<aside>empty set</aside></li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\langle \'>&#x27e8;</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rangle \'>&#x27e9;</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'subset\' data-insert=\'\\subset \'>&#x2282;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'superset\' data-insert=\'\\supset \'>&#x2283;</li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'accents\' data-insert=\'\\vec{#@}\' data-latex=\'\\vec{#?}\' data-aside=\'vector\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'absnorm\' data-insert=\'\\left| #0 \\right|\' data-latex=\'\\left| #? \\right|\' data-aside=\'abs\'></li>\n\n                <li class=\'keycap tex\' data-key=\'!\' data-alt-keys=\'!\'>!<aside>factorial</aside></li>\n                <li class=\'keycap\' data-latex=\'^{\\prime} \'><span><sup><span><span style=\'color:#ddd\'>o</span>&#x2032</sup></span><aside>prime</aside></li>\n\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-insert=\',\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\cdot \'>&#x22c5;<aside>centered dot</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\colon \'>:<aside>colon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\circ \'>&#x2218;<aside>circle</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\approx \'>&#x2248;<aside>approx.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\ne \'>&#x2260;</li>\n                <li class=\'keycap tex\' data-insert=\'\\pm \'>&#x00b1;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'lower-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\varphi \'><i>&#x03c6;</i><aside>phi var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varsigma \'><i>&#x03c2;</i><aside>sigma var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\epsilon \'><i>&#x03f5;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\rho \'><i>&rho;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\tau \'><i>&tau;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\upsilon \'><i>&upsilon;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\theta \'><i>&theta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\iota \'><i>&iota;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omicron \'>&omicron;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\pi \'><i>&pi;</i></li>\n            </ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\alpha \' data-shifted=\'&Alpha;\' data-shifted-command=\'["insert","\\\\char\\"391"]\'><i>&alpha;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\sigma \'><i>&sigma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\delta \'><i>&delta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\phi \'><i>&#x03d5;</i></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\gamma \'><i>&gamma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\eta \'><i>&eta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\xi \'><i>&xi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\kappa \'><i>&kappa;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\lambda \'><i>&lambda;</i></li>\n            </ul>\n            <ul><li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'upper-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\zeta \'><i>&zeta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\chi \'><i>&chi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\psi \'><i>&psi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omega \'><i>&omega;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\beta \'><i>&beta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\nu \'><i>&nu;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\mu \'><i>&mu;</i></li>\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'keycap \' data-key=\' \'>&nbsp;</li>\n                <li class=\'keycap\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\varepsilon \'><i>&#x03b5;</i><aside>epsilon var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\vartheta \'><i>&#x03d1;</i><aside>theta var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varkappa \'><i>&#x3f0;</i><aside>kappa var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varpi \'><i>&#x03d6;<aside>pi var.</aside></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\varrho \'><i>&#x03f1;</i><aside>rho var.</aside></li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\Phi \'>&Phi;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"0190\'>&#x0190;<aside>epsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A1\'>&#x3A1;<aside>rho</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A4\'>&#x3A4;<aside>tau</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Upsilon \'>&Upsilon;<aside>upsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Theta \'>&Theta;<aside>theta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"399\'>&Iota;<aside>iota</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39F\'>&#x039F;<aside>omicron</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Pi \'>&Pi;<aside>pi</aside></li></ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\char"391\'>&#x391;<aside>alpha</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Delta \'>&Delta;<aside>delta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Phi \'>&#x03a6;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Gamma \'>&Gamma;<aside>gamma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"397\'>&Eta;<aside>eta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Xi \'>&Xi;<aside>xi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39A\'>&Kappa;<aside>kappa</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Lambda \'>&Lambda;<aside>lambda</aside></li></ul>\n            <ul><li class=\'shift modifier font-glyph bottom left selected w15 layer-switch\' data-layer=\'lower-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"396\'>&Zeta;<aside>zeta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A7\'>&Chi;<aside>chi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Psi \'>&Psi;<aside>psi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Omega \'>&Omega;<aside>omega</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"392\'>&Beta;<aside>beta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39D\'>&Nu;<aside>nu</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39C\'>&Mu;<aside>mu</aside></li>\n                <li class=\'action font-glyph bottom right w15\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul>\n                <li class=\'separator w10\'>&nbsp;</li>\n                <li class=\'keycap\'>.</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-lower': '\n        <div class=\'rows\'>\n            <ul><row name=\'lower-1\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-2\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-3\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'>01#</li>\n                <li class=\'keycap tt\' data-shifted=\'[\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "["]\'>{</li>\n                <li class=\'keycap tt\' data-shifted=\']\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "]"]\'>}</li>\n                <li class=\'keycap tt\' data-shifted=\'(\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "("]\'>^</li>\n                <li class=\'keycap tt\' data-shifted=\')\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", ")"]\'>_</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-upper': '\n        <div class=\'rows\'>\n            <ul><row name=\'upper-1\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-2\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-3\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'01#</li>\n                <li class=\'keycap tt\'>[</li>\n                <li class=\'keycap tt\'>]</li>\n                <li class=\'keycap tt\'>(</li>\n                <li class=\'keycap tt\'>)</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-symbols': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tt\'>1</li><li class=\'keycap tt\'>2</li><li class=\'keycap tt\'>3</li><li class=\'keycap tt\'>4</li><li class=\'keycap tt\'>5</li><li class=\'keycap tt\'>6</li><li class=\'keycap tt\'>7</li><li class=\'keycap tt\'>8</li><li class=\'keycap tt\'>9</li><li class=\'keycap tt\'>0</li></ul>\n            <ul><li class=\'keycap tt\'>!</li><li class=\'keycap tt\'>@</li><li class=\'keycap tt\'>#</li><li class=\'keycap tt\'>$</li><li class=\'keycap tt\'>%</li><li class=\'keycap tt\'>^</li><li class=\'keycap tt\'>&</li><li class=\'keycap tt\'>*</li><li class=\'keycap tt\'>+</li><li class=\'keycap tt\'>=</li></ul>\n            <ul>\n                <li class=\'keycap tt\'>\\</li>\n                <li class=\'keycap tt\'>|</li>\n                <li class=\'keycap tt\'>/</li>\n                <li class=\'keycap tt\'>`</li>\n                <li class=\'keycap tt\'>;</li>\n                <li class=\'keycap tt\'>:</li>\n                <li class=\'keycap tt\'>?</li>\n                <li class=\'keycap tt\'>\'</li>\n                <li class=\'keycap tt\'>"</li>\n                <li class=\'action font-glyph bottom right\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-lower\'>abc</li>\n                <li class=\'keycap tt\'>&lt;</li>\n                <li class=\'keycap tt\'>&gt;</li>\n                <li class=\'keycap tt\'>~</li>\n                <li class=\'keycap tt\'>,</li>\n                <li class=\'keycap tt\'>.</li>\n                <li class=\'keycap\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        functions: '\n        <div class=\'rows\'>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin^{-1}\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\ln\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\exponentialE^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{lcm}(#?)\' data-latex=\'\\operatorname{lcm}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{ceil}(#?)\' data-latex=\'\\operatorname{ceil}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\lim_{n\\to\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\int\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{abs}(#?)\' data-latex=\'\\operatorname{abs}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\ln_{10}\'></li>\n                <li class=\'fnbutton\' data-latex=\'10^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{gcd}(#?)\' data-latex=\'\\operatorname{gcd}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{floor}(#?)\' data-latex=\'\\operatorname{floor}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\sum_{n\\mathop=0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\int_{0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{sign}(#?)\' data-latex=\'\\operatorname{sign}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\log_{#?}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\sqrt[#?]{#0}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'#0 \\mod\' data-latex=\'\\mod\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{round}(#?) \' data-latex=\'\\operatorname{round}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\prod_{n\\mathop=0}^{\\infty}\' data-latex=\'{\\scriptstyle \\prod_{n=0}^{\\infty}}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\frac{\\differentialD #0}{\\differentialD x}\'></li>\n                <li class=\'action font-glyph bottom right\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\'>(</li>\n                <li class=\'fnbutton\'>)</li>\n                <li class=\'fnbutton\' data-insert=\'^{#?}\' data-latex=\'x^{#?}\'></li>\n                <li class=\'fnbutton\' data-insert=\'_{#?}\' data-latex=\'x_{#?}\'></li>\n                <li class=\'keycap w20 \' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        style: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590\'></span></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"3"}]\' data-latex=\'\\scriptsize\\text{small}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"5"}]\' data-latex=\'\\scriptsize\\text{normal}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"9"}]\' data-latex=\'\\huge\\text{big}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-latex=\'\\langle\' data-command=\'["insert", "\\\\langle", {"smartFence":true}]\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"l"}]\' data-latex=\'\\fontseries{l}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"m"}]\' data-latex=\'\\fontseries{m}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"b"}]\' data-latex=\'\\fontseries{b}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"bx"}]\' data-latex=\'\\fontseries{bx}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"sb"}]\' data-latex=\'\\fontseries{sb}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"c"}]\' data-latex=\'\\fontseries{c}\\text{Ab}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"up"}]\' data-latex=\'\\textup{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"it"}]\' data-latex=\'\\textit{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sl"}]\' data-latex=\'\\textsl{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sc"}]\' data-latex=\'\\textsc{Ab}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-insert=\'\\emph{#@} \' data-latex=\'\\text{\\emph{emph}}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmr"}]\' data-latex=\'\\textrm{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmtt"}]\' data-latex=\'\\texttt{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmss"}]\' data-latex=\'\\textsf{Az}\'></li>\n\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"bb"}]\'  data-latex=\'\\mathbb{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"scr"}]\'  data-latex=\'\\mathscr{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cal"}]\' data-latex=\'\\mathcal{A1}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"frak"}]\' data-latex=\'\\mathfrak{Az}\'></li>\n            </ul>\n        </div>'
    };

    function dd(ed, fd) {
        ed = ed.replace(/(^|[^\\])#@/g, '$1#?');
        const gd = ma(),
            _hd = new pb('root', gd);
        return _hd.body = Nt(ed, gd, {
            parseMode: 'math',
            args: fd
        }), je(Fe(Ve(new hb(_hd.render(new $({
            registers: gd.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function _dd(ed, fd, gd) {
        var hd, _id, jd;
        let kd = '<div class=\'left\'>';
        const ld = fd.replace(/\s+/g, ' ').split(' ');
        if (ld.length > 1) {
            const md = {
                ..._Zc,
                ...null !== (hd = ed.customVirtualKeyboards) && void 0 !== hd ? hd : {}
            };
            for (const nd of ld) {
                if (!md[nd])
                    break;
                kd += '<div class=\'', nd === gd ? kd += 'selected ' : md[nd].command ? kd += 'action ' : kd += 'layer-switch ', kd += (null !== (_id = md[nd].classes) && void 0 !== _id ? _id : '') + '\'', md[nd].tooltip && (kd += 'data-tooltip=\'' + (null !== (jd = _od(md[nd].tooltip)) && void 0 !== jd ? jd : md[nd].tooltip) + '\' '), nd !== gd && ('string' == typeof md[nd].command ? kd += `data-command='"${ md[nd].command }"'` : Array.isArray(md[nd].command) && (kd += `data-command='"${ md[nd].command.join('') }"'`), md[nd].layer && (kd += 'data-layer=\'' + md[nd].layer + '\'')), kd += '>' + md[nd].label + '</div>';
            }
        }
        kd += '</div>';
        const md = 'default' === ed.virtualKeyboardToolbar ? [
                'copyToClipboard',
                'undo',
                'redo'
            ] : [],
            nd = {
                copyToClipboard: `\n            <div class='action'\n                data-command='"copyToClipboard"'\n                data-tooltip='${ _od('tooltip.copy to clipboard') }'>\n                <svg><use xlink:href='#svg-copy' /></svg>\n            </div>\n        `,
                undo: `\n            <div class='action disabled'\n                data-command='"undo"'\n                data-tooltip='${ _od('tooltip.undo') }'>\n                <svg><use xlink:href='#svg-undo' /></svg>\n            </div>\n        `,
                redo: `\n            <div class='action disabled'\n                data-command='"redo"'\n                data-tooltip='${ _od('tooltip.redo') }'>\n                <svg><use xlink:href='#svg-redo' /></svg>\n            </div>\n        `
            };
        return md.length > 0 && (kd += `\n            <div class='right'>\n                ${ md.map(ed => nd[ed]).join('') }\n            </div>\n        `), '<div class=\'keyboard-toolbar\' role=\'toolbar\'>' + kd + '</div>';
    }

    function _dd(ed, fd, gd) {
        var hd, id;
        for (const jd of fd) {
            let kd;
            jd.getAttribute('data-latex') ? kd = wr(jd.getAttribute('data-latex').replace(/&quot;/g, '"'), () => '\\placeholder{}') : jd.getAttribute('data-insert') && '' === jd.innerHTML ? kd = wr(jd.getAttribute('data-insert').replace(/&quot;/g, '"'), () => '\\placeholder{}') : jd.getAttribute('data-content') && (kd = jd.getAttribute('data-content').replace(/&quot;/g, '"')), jd.getAttribute('data-aside') && (kd = (null != kd ? kd : '') + '<aside>' + jd.getAttribute('data-aside').replace(/&quot;/g, '"') + '</aside>'), void 0 !== kd && (jd.innerHTML = ed.options.createHTML(kd)), jd.getAttribute('data-classes') && jd.classList.add(jd.getAttribute('data-classes'));
            const ld = null === (hd = jd.getAttribute('data-insert')) || void 0 === hd ? void 0 : hd.replace(/&quot;/g, '"');
            let md;
            ld && $c[ld] && (jd.dataset.shifted = $c[ld][0], jd.dataset.shiftedCommand = JSON.stringify([
                'insertAndUnshiftKeyboardLayer',
                $c[ld][1]
            ]));
            const nd = jd.getAttribute('data-command');
            if (nd)
                if (/^[a-zA-Z]+$/.test(nd))
                    md = nd;
                else
                    try {
                        md = JSON.parse(nd);
                    } catch (ed) {}
            else
                md = jd.getAttribute('data-insert') ? [
                    'insert',
                    jd.getAttribute('data-insert'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : jd.getAttribute('data-latex') ? [
                    'insert',
                    jd.getAttribute('data-latex'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : [
                    'typedText',
                    null !== (id = jd.getAttribute('data-key')) && void 0 !== id ? id : jd.textContent,
                    {
                        focus: !0,
                        feedback: !0,
                        simulateKeystroke: !0
                    }
                ];
            if (md) {
                gd && (md = [
                    gd,
                    md
                ]);
                let od = md;
                const pd = jd.getAttribute('data-alt-keys');
                pd && _bd[pd] && (od = {
                    default: md,
                    pressAndHoldStart: [
                        'showAlternateKeys',
                        pd
                    ],
                    pressAndHoldEnd: 'hideAlternateKeys'
                }), hr(od => ed.executeCommand(od), jd, od);
            }
        }
    }

    function _dd(ed, fd) {
        var gd, hd, id, jd;
        const kd = {
            qwerty: {
                'lower-1': 'qwertyuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^zxcvbnm~',
                'upper-1': 'QWERTYUIOP',
                'upper-2': ' ASDFGHJKL ',
                'upper-3': '^ZXCVBNM~',
                'numpad-1': '789/',
                'numpad-2': '456*',
                'numpad-3': '123-',
                'numpad-4': '0.=+'
            },
            azerty: {
                'lower-1': 'azertyuiop',
                'lower-2': 'qsdfghjklm',
                'lower-3': '^ wxcvbn ~',
                'upper-1': 'AZERTYUIOP',
                'upper-2': 'QSDFGHJKLM',
                'upper-3': '^ WXCVBN ~'
            },
            qwertz: {
                'lower-1': 'qwertzuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^yxcvbnm~',
                'upper-1': 'QWERTZUIOP',
                'upper-2': ' ASDFGHJKL',
                'upper-3': '^YXCVBNM~'
            },
            dvorak: {
                'lower-1': '^  pyfgcrl ',
                'lower-2': 'aoeuidhtns',
                'lower-3': 'qjkxbmwvz~',
                'upper-1': '^  PYFGCRL ',
                'upper-2': 'AOEUIDHTNS',
                'upper-3': 'QJKXBMWVZ~'
            },
            colemak: {
                'lower-1': ' qwfpgjluy ',
                'lower-2': 'arstdhneio',
                'lower-3': '^zxcvbkm~',
                'upper-1': ' QWFPGNLUY ',
                'upper-2': 'ARSTDHNEIO',
                'upper-3': '^ZXCVBKM~'
            }
        };
        let ld = ed.virtualKeyboardLayout;
        if ('auto' === ld) {
            const md = Ki();
            md && (ld = md.virtualLayout), ld && 'auto' !== ld || (ld = null !== (gd = {
                fr: 'azerty',
                be: 'azerty',
                al: 'qwertz',
                ba: 'qwertz',
                cz: 'qwertz',
                de: 'qwertz',
                hu: 'qwertz',
                sk: 'qwertz',
                ch: 'qwertz'
            } [c.locale.slice(0, 2)]) && void 0 !== gd ? gd : 'qwerty');
        }
        const md = null !== (hd = kd[ld]) && void 0 !== hd ? hd : kd.qwerty;
        let nd, _od = fd;
        _od = _od.replace(/<arrows\/>/g, '\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToPreviousChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-left" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToPreviousChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-left\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToNextChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-right" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToNextChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-right\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","commit"]\'>\n        <svg class="svg-glyph"><use xlink:href=\'#svg-commit\' /></svg></li>');
        let pd = _od.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        for (; pd;) {
            nd = '';
            const qd = pd[2].match(/[a-zA-Z][a-zA-Z\d-]*=(['"])(.*?)\1/g),
                rd = {};
            if (qd)
                for (const sd of qd) {
                    const td = sd.match(/([a-zA-Z][a-zA-Z\d-]*)=(['"])(.*?)\2/);
                    td && (rd[td[1]] = td[3]);
                }
            let sd = md[rd.name];
            if (sd || (sd = kd.qwerty[rd.name]), sd)
                for (const td of sd) {
                    let ud = null !== (id = rd.class) && void 0 !== id ? id : '';
                    ud && (ud = ` ${ ud }`), '~' === td ? (nd += '<li class=\'action font-glyph bottom right ', nd += sd.length - (sd.match(/ /g) || []).length / 2 == 10 ? 'w10' : 'w15', nd += '\' data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                        data-shifted-command=\'"deleteAll"\'\n                        data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                        ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>') : ' ' === td ? nd += '<li class=\'separator w5\'></li>' : '^' === td ? nd += '<li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'' + rd['shift-layer'] + '\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>' : '/' === td ? nd += '<li class=\'keycap' + ud + '\' data-alt-keys=\'/\' data-insert=\'\\frac{#@}{#?}\'>&divide;</li>' : '*' === td ? nd += '<li class=\'keycap' + ud + '\' data-alt-keys=\'*\' data-insert=\'\\times \'>&times;</li>' : '-' === td ? nd += '<li class=\'keycap' + ud + '\' data-alt-keys=\'-\' data-key=\'-\'>&#x2212;</li>' : '.' === td ? nd += '<li class=\'keycap' + ud + '\' data-alt-keys=\'.\' data-command=\'"insertDecimalSeparator"\'>' + (null !== (jd = ed.decimalSeparator) && void 0 !== jd ? jd : '.') + '</li>' : ud.includes('tt') ? nd += `<li class='keycap${ ud }' data-alt-keys='${ td }' data-command='["typedText","${ td }",{"mode":"command", "focus":true, "feedback":true}]'>${ td }</li>` : nd += '<li class=\'keycap' + ud + '\' data-alt-keys=\'' + td + '\'>' + td + '</li>';
                }
            _od = _od.replace(new RegExp(pd[1] + pd[2] + pd[3]), nd), pd = _od.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        }
        return _od;
    }

    function _dd(ed) {
        fr();
        const fd = ed.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
        if (fd)
            for (const gd of fd) {
                const hd = gd.getAttribute('data-unshifted-content');
                hd && (gd.innerHTML = ed.options.createHTML(hd), gd.dataset.unshiftedContent = '');
                const id = gd.getAttribute('data-unshifted-command');
                id && (gd.dataset.command = id, gd.dataset.unshiftedCommand = '');
            }
        return !1;
    }

    function _dd(ed) {
        return Object.keys(ed).map(ub => `${ ub } {${ function (fd) {
            return 'string' == typeof fd ? fd : Object.entries(fd).map(([gd, hd]) => `${ gd }:${ hd } !important`).join(';');
        }(ed[ub]) }}`).join('');
    }

    function dd(ed, fd) {
        'lower-command' !== fd && 'upper-command' !== fd && 'symbols-command' !== fd && ed.executeCommand('complete'), _dd(ed), fr(), Lr(ed);
        const gd = null == ed ? void 0 : ed.element.querySelectorAll('.keyboard-layer');
        let hd = !1;
        for (const id of gd)
            if (id.dataset.layer === fd) {
                hd = !0;
                break;
            }
        if (hd)
            for (const jd of gd)
                jd.dataset.layer === fd ? jd.classList.add('is-visible') : jd.classList.remove('is-visible');
        return id.focusMathfield(), !0;
    }

    function _dd(ed, fd = '') {
        const gd = ed.options.virtualKeyboardContainer;
        if (!gd)
            return !1;
        if (ed.element ? ed.element.classList.add('is-visible') : ed.buildAndAttachElement(fd), !ed.visible) {
            const hd = _wd();
            hd.visibleVirtualKeyboard && _dd(hd.visibleVirtualKeyboard), hd.visibleVirtualKeyboard = ed;
            const id = gd.style.paddingBottom;
            ed.originalContainerBottomPadding = id, gd.style.paddingBottom = id ? `calc(${ id } + var(--keyboard-height, 276px) - 1px)` : 'calc(var(--keyboard-height, 276px) - 1px)';
        }
        return setTimeout(() => {
            var hd;
            null === (hd = ed.element) || void 0 === hd || hd.classList.add('is-visible'), ed.focusMathfield();
        }, 1), ed.visible = !0, ed.stateChanged(), !1;
    }

    function _dd(ed) {
        var fd, gd, hd;
        const id = ed.options.virtualKeyboardContainer;
        return !!id && (ed.element && (_wd().visibleVirtualKeyboard = void 0, ed.disable(), fr(), ed.visible = !1, null === (fd = ed.coreStylesheet) || void 0 === fd || fd.release(), ed.coreStylesheet = null, null === (gd = ed.virtualKeyboardStylesheet) || void 0 === gd || gd.release(), ed.virtualKeyboardStylesheet = null, null === (hd = ed._element) || void 0 === hd || hd.remove(), ed._element = void 0, null !== ed.originalContainerBottomPadding && (id.style.paddingBottom = ed.originalContainerBottomPadding)), ed.visible = !1, ed.stateChanged(), !1);
    }

    function dd(ed, fd, gd) {
        'function' == typeof fd && (gd = fd, fd = 1 / 0), void 0 === fd && (fd = 1 / 0);
        let hd = ed.position,
            id = !1,
            jd = '';
        for (; !id;) {
            const kd = ed.at(hd);
            id = 0 === fd || void 0 === kd || 'math' !== kd.mode || !(/mord|textord|mpunct/.test(kd.type) || 'mop' === kd.type && /[a-zA-Z]+/.test(kd.value)) || !kd.hasEmptyBranch('superscript') || !kd.hasEmptyBranch('subscript') || 'function' == typeof gd && !gd(kd), id || (kd.mode = 'text', kd.command = kd.value, kd.verbatimLatex = void 0, jd += kd.value), hd -= 1, fd -= 1;
        }
        Hi(ed, {
            data: jd,
            inputType: 'insertText'
        });
    }

    function dd(ed, fd, gd) {
        'function' == typeof fd && (gd = fd, fd = 1 / 0), void 0 === fd && (fd = 1 / 0);
        let hd = ed.position,
            id = !1;
        const jd = [];
        for (; !id;) {
            const kd = ed.at(hd);
            id = 0 === fd || !kd || kd.isFirstSibling || 'text' !== kd.mode || ' ' === kd.value || gd && !gd(kd), id || (jd.push(kd.serialize({
                defaultMode: 'math'
            })), kd.mode = 'math'), hd -= 1, fd -= 1;
        }
        _dd(ed), Hi(ed, {
            data: at(jd),
            inputType: 'insertText'
        });
    }

    function _dd(ed) {
        var fd;
        let gd = ed.position - 1;
        for (; gd >= 0 && 'math' === (null === (fd = ed.at(gd)) || void 0 === fd ? void 0 : fd.mode);)
            gd -= 1;
        if (!(gd < 0) && 'text' === ed.at(gd).mode && ' ' === ed.at(gd).value && 'math' === ed.at(gd - 1).mode) {
            ed.at(gd - 1).parent.removeChild(ed.at(gd - 1));
            const hd = ed.suppressChangeNotifications;
            ed.suppressChangeNotifications = !0, ed.position -= 1, ed.suppressChangeNotifications = hd, Hi(ed, {
                inputType: 'deleteContent'
            });
        }
    }
    uo({
        showAlternateKeys: function(dd, ed) {
            var fd;
            _id();
            const gd = _bd[ed],
                hd = document.createElement('div');
            hd.setAttribute('aria-hidden', 'true'), hd.className = 'ML__keyboard alternate-keys' + (dd.element.classList.contains('material') ? ' material' : ''), hd.id = 'mathlive-alternate-keys-panel', gd.length >= 14 ? hd.style.width = '236px' : gd.length >= 7 ? hd.style.width = '286px' : 4 === gd.length || 2 === gd.length ? hd.style.width = '146px' : 1 === gd.length ? hd.style.width = '86px' : hd.style.width = '146px', hd.style.height = 'auto';
            let id = '';
            for (const jd of gd)
                id += '<li', 'string' == typeof jd ? id += ' data-latex="' + jd.replace(/"/g, '&quot;') + '"' : (jd.latex && (id += ' data-latex="' + jd.latex.replace(/"/g, '&quot;') + '"'), jd.content && (id += ' data-content="' + jd.content.replace(/"/g, '&quot;') + '"'), jd.insert && (id += ' data-insert="' + jd.insert.replace(/"/g, '&quot;') + '"'), jd.command && ('string' == typeof jd.command ? id += ` data-command="${ jd.command.replace(/"/g, '&quot;') }"` : id += ' data-command=\'' + JSON.stringify(jd.command).replace(/"/g, '&quot;') + '\''), jd.aside && (id += ` data-aside="${ jd.aside.replace(/"/g, '&quot;') }"`), jd.class && (id += ` data-classes="${ jd.class }"`)), id += '>', id += 'string' == typeof jd ? jd : null !== (fd = jd.label) && void 0 !== fd ? fd : '', id += '</li>';
            id = '<ul>' + id + '</ul>', hd.innerHTML = jd.options.createHTML(id), Sr(jd, [...hd.querySelectorAll('li')], 'performAlternateKeys'), Tc.scrim || (Tc.scrim = new Tc()), Tc.scrim.open({
                root: jd.options.virtualKeyboardContainer,
                child: hd
            });
            const kd = null == jd ? void 0 : jd.element.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' + ed + '"]'),
                ld = null == kd ? void 0 : kd.getBoundingClientRect();
            if (ld) {
                ld.top - hd.clientHeight < 0 && (hd.style.width = 'auto', gd.length <= 6 ? hd.style.height = '56px' : gd.length <= 12 ? hd.style.height = '108px' : gd.length <= 18 ? hd.style.height = '205px' : hd.classList.add('compact'));
                const md = (ld.top - hd.clientHeight + 5).toString() + 'px',
                    nd = Math.max(0, Math.min(window.innerWidth - hd.offsetWidth, (ld.left + ld.right - hd.offsetWidth) / 2)) + 'px';
                hd.style.transform = 'translate(' + nd + ',' + md + ')', hd.classList.add('is-visible');
            }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), uo({
        shiftKeyboardLayer: function(dd) {
            const ed = null == dd ? void 0 : dd.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
            if (ed)
                for (const fd of ed) {
                    if (fd.dataset.unshiftedContent)
                        return !1;
                    let gd = fd.getAttribute('data-shifted');
                    if (gd || /^[a-z]$/.test(fd.innerHTML)) {
                        fd.dataset.unshiftedContent = fd.innerHTML, gd || (gd = fd.innerHTML.toUpperCase()), fd.innerHTML = dd.options.createHTML(gd);
                        const hd = fd.getAttribute('data-command');
                        if (hd) {
                            fd.dataset.unshiftedCommand = hd;
                            const id = fd.getAttribute('data-shifted-command');
                            if (id)
                                fd.dataset.command = id;
                            else {
                                const jd = JSON.parse(hd);
                                _gd(jd) && (jd[1] = jd[1].toUpperCase()), fd.dataset.command = JSON.stringify(jd);
                            }
                        }
                    }
                }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), uo({
        hideAlternateKeys: () => fr(),
        performAlternateKeys: function(dd, ed) {
            return fr(), dd.executeCommand(ed);
        },
        switchKeyboardLayer: (tb, ub) => Ar(tb, ub),
        unshiftKeyboardLayer: tb => Lr(tb),
        insertAndUnshiftKeyboardLayer: function(dd, ed) {
            return dd.executeCommand([
                'insert',
                ed
            ]), Lr(dd), !0;
        }
    }, {
        target: 'virtual-keyboard'
    }), uo({
        toggleVirtualKeyboardAlt: function(dd) {
            let ed = !1;
            return (null == dd ? void 0 : dd.element) && (ed = null == dd ? void 0 : dd.element.classList.contains('material'), dd.disable()), Dr(dd, ed ? '' : 'material'), !1;
        },
        toggleVirtualKeyboardShift: function(dd) {
            var ed, fd;
            dd.options.virtualKeyboardLayout = {
                qwerty: 'azerty',
                azerty: 'qwertz',
                qwertz: 'dvorak',
                dvorak: 'colemak',
                colemak: 'qwerty'
            } [dd.options.virtualKeyboardLayout];
            const _gd = null !== (fd = null === (ed = null == dd ? void 0 : dd.element.querySelector('div.keyboard-layer.is-visible')) || void 0 === ed ? void 0 : ed.id) && void 0 !== fd ? fd : '';
            return dd && dd.disable(), Dr(dd), _gd && Ar(dd, _gd), !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), uo({
        toggleVirtualKeyboard: (tb, ub) => function(dd, ed) {
            return dd.visible ? Tr(dd) : Dr(dd, ed), !1;
        }(tb, ub),
        hideVirtualKeyboard: tb => Tr(tb),
        showVirtualKeyboard: (tb, ub) => Dr(tb, ub),
        onUndoStateChanged: (tb, ub, b) => function(dd, ed, fd) {
            var gd;
            const hd = null === (gd = dd.element) || void 0 === gd ? void 0 : gd.querySelector('.keyboard-toolbar');
            if (!hd)
                return !1;
            const _id = hd.querySelector('[data-command=\'"undo"\']'),
                jd = hd.querySelector('[data-command=\'"redo"\']');
            return jd && (fd ? jd.classList.remove('disabled') : jd.classList.add('disabled')), _id && (ed ? _id.classList.remove('disabled') : _id.classList.add('disabled')), !1;
        }(tb, ub, b)
    }, {
        target: 'virtual-keyboard'
    });
    var dd = '#mathlive-keystroke-caption-panel{--keystroke:#fff;--on-keystroke:#555;--keystroke-border:#f7f7f7;background:var(--secondary,hsl(var(--hue,212),19%,26%));border-color:var(--secondary-border,#e8e8e8);border-radius:6px;box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);display:flex;flex-direction:row-reverse;justify-content:center;padding:16px;position:absolute;text-align:center;visibility:hidden;z-index:1}@media (prefers-color-scheme:dark){body:not([theme=light]) #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}}body[theme=dark] #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}#mathlive-keystroke-caption-panel>span{fill:currentColor;background-color:var(--keystroke);border:2px solid var(--keystroke-border);border-radius:6px;color:var(--on-keystroke);font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:1em;margin:0 8px 0 0;min-width:14px;padding:4px}';
    let ed, fd = null,
        gd = null;

    function hd(id) {
        return id.keystrokeCaption || (id.keystrokeCaption = ri('mathlive-keystroke-caption-panel'), void 0 === ed && (ed = Si(dd).toString(36)), fd = Mi(null, dd, ed), gd = Mi(null, Fc, Si(Fc).toString(36))), id.keystrokeCaption;
    }

    function hd(id) {
        if (!id)
            return null;
        if (id.length > 1)
            return null;
        const jd = id[0];
        return jd instanceof Fb && '(' === jd.leftDelim && ')' === jd.rightDelim ? jd.removeBranch('body') : null;
    }

    function hd(id) {
        if (id) {
            for (let jd = 0; id[jd]; jd++) {
                const kd = id[jd];
                if (kd instanceof Fb && '(' === kd.leftDelim) {
                    let ld = 0,
                        md = 0,
                        nd = 0;
                    for (let od = 0; kd.body[od]; od++)
                        'genfrac' === kd.body[od].type && (ld++, md = od), nd++;
                    0 === nd && 1 === ld && (od[jd] = kd.body[md]);
                }
            }
            for (const kd of id) {
                for (const ld of kd.branches)
                    if (!kd.hasEmptyBranch(ld)) {
                        hd(kd.branch(ld));
                        const md = Pr(kd.branch(ld));
                        md && kd.setChildren(md, ld);
                    }
                if (kd instanceof Nb)
                    for (const md of kd.cells)
                        hd(md);
            }
        }
    }

    function hd(id) {
        if (!id)
            return [];
        const jd = [];
        for (const kd of id) {
            for (const ld of kd.branches)
                if (!kd.hasEmptyBranch(ld)) {
                    const md = hd(kd.branch(ld));
                    jd.push(...md);
                }
            kd instanceof Hb && jd.push(kd);
        }
        return jd;
    }

    function hd(id) {
        return !!/^(mord|surd|msubsup|leftright|mop|mclose)$/.test(id.type) && !id.isExtensibleSymbol && !id.isFunction;
    }

    function hd(id, jd, kd) {
        const ld = id.at(id.position),
            {
                parent: md
            } = ld;
        let nd = md instanceof Fb ? md.leftDelim + md.rightDelim : '';
        if ('\\lbrace\\rbrace' === nd && (nd = '{}'), '\\{\\}' === nd && (nd = '{}'), '\\lparen\\rparen' === nd && (nd = '()'), '{}' === nd && /\||\\vert|\\Vert|\\mvert|\\mid/.test(jd))
            return qc.insert('math', id, '\\,\\middle' + jd + '\\, ', {
                format: 'latex',
                style: kd
            }), !0;
        if ('{' !== jd && '\\{' !== jd || (jd = '\\lbrace'), '}' !== jd && '\\}' !== jd || (jd = '\\rbrace'), '[' === jd && (jd = '\\lbrack'), ']' === jd && (jd = '\\rbrack'), rb[jd]) {
            const od = md;
            if ('leftright' === od.type && od.firstChild === ld && ('?' === od.leftDelim || '.' === od.leftDelim))
                return od.leftDelim = jd, od.isDirty = !0, !0;
            if (!(md instanceof Fb && '|' === md.leftDelim)) {
                if (qc.insert('math', id, `\\left${ jd }\\right?`, {
                        format: 'latex',
                        style: kd
                    }), 'first' !== ld.lastSibling.type) {
                    const pd = id.offsetOf(ld.lastSibling),
                        qd = id.extractAtoms([
                            id.position,
                            pd
                        ]);
                    id.at(id.position).body = qd, id.position -= 1;
                }
                return !0;
            }
        }
        let od = '';
        if (Object.keys(rb).forEach(id => {
                jd === rb[id] && (od = id);
            }), od) {
            if (md instanceof Fb && ld.isLastSibling)
                return md.isDirty = !0, md.rightDelim = jd, id.position += 1, Hi(id, {
                    data: jd,
                    inputType: 'insertText'
                }), !0;
            const pd = id.offsetOf(ld.firstSibling);
            let qd;
            for (qd = id.position; qd >= pd; qd--) {
                const rd = id.at(qd);
                if (rd instanceof Fb && '?' === rd.rightDelim)
                    break;
            }
            const rd = id.at(qd);
            if (qd >= pd && rd instanceof Fb)
                return rd.rightDelim = jd, rd.addChildren(id.extractAtoms([
                    qd,
                    id.position
                ]), ld.treeBranch), id.position = qd, Hi(id, {
                    data: jd,
                    inputType: 'insertText'
                }), !0;
            if (md instanceof Fb && '?' === md.rightDelim)
                return md.isDirty = !0, md.rightDelim = jd, md.parent.addChildren(id.extractAtoms([
                    id.position,
                    id.offsetOf(ld.lastSibling)
                ]), md.treeBranch), id.position = id.offsetOf(md), Hi(id, {
                    data: jd,
                    inputType: 'insertText'
                }), !0;
            const sd = md.parent;
            return !!(sd instanceof Fb && '?' === sd.rightDelim && id.at(id.position).isLastSibling) && (id.position = id.offsetOf(sd), hd(id, jd, kd));
        }
        return !1;
    }

    function hd(id, jd, kd) {
        var ld, md, nd, od;
        const {
            model: pd
        } = id;
        ! function(qd) {
            var rd, sd;
            if (!qd)
                return;
            if ('Unidentified' === qd.key)
                return;
            if ('Dead' === qd.key)
                return;
            const td = qd.shiftKey && qd.altKey ? 3 : qd.altKey ? 2 : qd.shiftKey ? 1 : 0;
            for (const ud of Bc)
                (null === (rd = ud.mapping[qd.code]) || void 0 === rd ? void 0 : rd[td]) === qd.key ? ud.score += 1 : (null === (sd = ud.mapping[qd.code]) || void 0 === sd ? void 0 : sd[td]) && (ud.score = 0);
            Bc.sort((qd, rd) => rd.score - qd.score);
        }(kd);
        const qd = Ki();
        if (id.keyboardLayout !== qd.id && (id.keyboardLayout = qd.id, id._keybindings = void 0), clearTimeout(id.inlineShortcutBufferFlushTimer), id.inlineShortcutBufferFlushTimer = 0, function(rd, sd) {
                if (rd.options.readOnly || !rd.keystrokeCaptionVisible)
                    return;
                const td = Nr(rd),
                    ud = rd.element.getBoundingClientRect();
                td.style.left = `${ ud.left }px`, td.style.top = ud.top - 64 + 'px', td.innerHTML = rd.options.createHTML('<span>' + (Ni(sd) || sd) + '</span>' + td.innerHTML), td.style.visibility = 'visible', setTimeout(() => {
                    td.childNodes.length > 0 && td.childNodes[td.childNodes.length - 1].remove(), 0 === td.childNodes.length && (td.style.visibility = 'hidden');
                }, 3000);
            }(id, jd), kd.defaultPrevented)
            return id.flushInlineShortcutBuffer(), !1;
        let rd, sd, td = '';
        if (!id.options.readOnly) {
            if ('math' === id.mode && !kd.ctrlKey && !kd.metaKey)
                if ('[Backspace]' === jd)
                    id.inlineShortcutBuffer.pop(), id.flushInlineShortcutBuffer({
                        defer: !0
                    });
                else if (sr(kd)) {
                const ud = cr(kd),
                    vd = (null !== (md = null === (ld = id.inlineShortcutBuffer[id.inlineShortcutBuffer.length - 1]) || void 0 === ld ? void 0 : ld.keystrokes) && void 0 !== md ? md : '') + ud;
                id.inlineShortcutBuffer.push({
                    state: pd.getState(),
                    keystrokes: vd,
                    leftSiblings: _hd(id)
                });
                let wd = 0,
                    xd = '';
                for (; !rd && wd < vd.length;) {
                    sd = id.inlineShortcutBuffer.length - (vd.length - wd), xd = vd.slice(wd);
                    const yd = id.inlineShortcutBuffer[sd].leftSiblings;
                    rd = Aa(yd, xd, id.options.inlineShortcuts), !rd && /^[a-zA-Z][a-zA-Z0-9]+?([_\^][a-zA-Z0-9\*\+\-]+?)?$/.test(xd) && (rd = id.options.onInlineShortcut(id, xd)), wd += 1;
                }
                id.flushInlineShortcutBuffer({
                    defer: !0
                });
            } else
                id.flushInlineShortcutBuffer(), id.snapshot();
            if (id.options.smartMode) {
                const ud = id.mode;
                rd ? id.mode = 'math' : function(vd, wd, xd) {
                    if (vd.smartModeSuppressed)
                        return !1;
                    const {
                        model: yd
                    } = vd;
                    if (!yd.at(yd.position).isLastSibling)
                        return !1;
                    if (!xd || !sr(xd))
                        return !1;
                    const zd = cr(xd);
                    if (!yd.selectionIsCollapsed)
                        return !('text' !== vd.mode || !/[/_^]/.test(zd));
                    const Ad = function(Bd) {
                        let Cd = '',
                            Dd = Bd.position,
                            Ed = !1;
                        for (; !Ed;) {
                            const Fd = Bd.at(Dd);
                            Ed = !(Fd && ('text' === Fd.mode || 'math' === Fd.mode && /mord|textord|mpunct/.test(Fd.type))), Ed || (Cd = Fd.value + Cd), Dd -= 1;
                        }
                        return Cd;
                    }(yd) + zd;
                    if ('text' === vd.mode) {
                        if ('Esc' === wd || /[/\\]/.test(zd))
                            return !0;
                        if (/[\^_]/.test(zd))
                            return /(^|\s)[a-zA-Z][^_]$/.test(Ad) && Br(yd, 1), !0;
                        const Bd = {
                                ')': '(',
                                '}': '{',
                                ']': '['
                            } [zd],
                            {
                                parent: Cd
                            } = yd.at(yd.position);
                        if (Bd && Cd instanceof Fb && Cd.leftDelim === Bd)
                            return !0;
                        if (/(^|[^a-zA-Z])(a|I) $/.test(Ad))
                            return !1;
                        if (/[$\u20ac\xa3\u20a4\u20ba\xa5\xa4\u0e3f\xa2\u20a1\u20a7\u20a8\u20b9\u20a9\u20b1]/u.test(zd))
                            return !0;
                        if (/(^|[^a-zA-Z'\u2019])[a-zA-Z] $/.test(Ad))
                            return Br(yd, 1), !1;
                        if (/\D\.[^\d\s]$/.test(Ad)) {
                            Br(yd, 1);
                            const Dd = yd.at(yd.position);
                            return Dd.value = '\u22C5', Dd.style.variant = 'normal', Dd.command = '\\cdot', Dd.verbatimLatex = void 0, Hi(yd, {
                                data: '\\cdot',
                                inputType: 'insertText'
                            }), !0;
                        }
                        if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(Ad))
                            return Br(yd, 1), !0;
                        if (/\.\d$/.test(Ad))
                            return Br(yd, 1), !0;
                        if (/\([\d+\-.]$/.test(Ad))
                            return Br(yd, 1), !0;
                        if (/\([a-z][,;]$/.test(Ad))
                            return Br(yd, 2), !0;
                        if (/[\d+\-=><*|]$/.test(zd))
                            return Kr(yd), !0;
                    } else {
                        if ('[Space]' === wd)
                            return zr(yd, void 0, vd => /[a-z][:,;.]$/.test(vd.value)), !0;
                        if (/[a-zA-Z]{3,}$/.test(Ad) && !/(dxd|abc|xyz|uvw)$/.test(Ad))
                            return zr(yd, void 0, vd => /[a-zA-Z]/.test(vd.value)), !0;
                        if (/(^|\W)(if)$/i.test(Ad))
                            return zr(yd, 1), !0;
                        if (/(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/u.test(Ad) && !/(\u03b1\u03b2\u03b3)$/.test(Ad))
                            return zr(yd, void 0, vd => /(:|,|;|.|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/u.test(vd.value)), !0;
                        if ('?' === zd)
                            return !0;
                        if ('.' === zd && !/[\d-+]\.$/.test(Ad))
                            return !0;
                    }
                    return !1;
                }(id, jd, kd) && (id.mode = {
                    math: 'text',
                    text: 'math'
                } [id.mode], td = ''), id.mode !== ud && ((null === (nd = id.host) || void 0 === nd ? void 0 : nd.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))) || (id.mode = ud));
            }
        }
        if (!rd) {
            if (td || (td = function(ud, vd, wd) {
                    if (0 === ud.length)
                        return '';
                    const xd = Ci(Li(wd));
                    for (let yd = ud.length - 1; yd >= 0; yd--)
                        if (ud[yd].key === xd && (!ud[yd].ifMode || ud[yd].ifMode === vd))
                            return ud[yd].command;
                    return '';
                }(id.keybindings, id.mode, jd)), !td && ('[Enter]' === jd || '[Return]' === jd)) {
                let ud = !1;
                return ji(pd, {
                    inputType: 'insertLineBreak'
                }) && (id.host && (ud = !id.host.dispatchEvent(new Event('change', {
                    bubbles: !0,
                    composed: !0
                }))), ud || kd.preventDefault && (kd.preventDefault(), kd.stopPropagation()), Hi(pd, {
                    inputType: 'insertLineBreak'
                })), ud;
            }
            if ('math' === id.mode) {
                if ('[Space]' === jd) {
                    if (id.flushInlineShortcutBuffer(), id.options.mathModeSpace)
                        return id.snapshot(), qc.insert('math', pd, id.options.mathModeSpace, {
                            format: 'latex'
                        }), td = '', id.dirty = !0, id.scrollIntoView(), kd.preventDefault && (kd.preventDefault(), kd.stopPropagation()), !1;
                    const ud = pd.at(pd.position + 1),
                        vd = pd.at(pd.position - 1);
                    'text' !== (null == ud ? void 0 : ud.mode) && 'text' !== (null == vd ? void 0 : vd.mode) || (id.snapshot(), qc.insert('text', pd, ' '), id.dirty = !0);
                }
                (null === (od = pd.at(pd.position)) || void 0 === od ? void 0 : od.isDigit()) && ',' === id.options.decimalSeparator && ',' === cr(kd) && (td = 'insertDecimalSeparator');
            }
        }
        if (!rd && !td)
            return !0;
        const ud = pd.at(Math.max(pd.position, pd.anchor)),
            {
                parent: vd
            } = ud;
        if ('moveAfterParent' === td && 'leftright' === (null == vd ? void 0 : vd.type) && ud.isLastSibling && id.options.smartFence && Vr(pd, '.', id.style) && (td = '', no(id)), td)
            id.executeCommand(td);
        else if (rd) {
            id.keyboardDelegate.cancelComposition();
            const wd = {
                ...pd.at(pd.position).computedStyle,
                ...id.style
            };
            if (!/^\\({|}|\[|]|@|#|\$|%|&|\^|_|backslash)$/.test(rd)) {
                const xd = id.mode;
                qc.insert(id.mode, pd, cr(kd), {
                    suppressChangeNotifications: !0,
                    style: wd
                }), id.snapshot(), pd.setState(id.inlineShortcutBuffer[sd].state), id.mode = xd;
            }
            pd.deferNotifications({
                content: !0,
                selection: !0,
                data: null != rd ? rd : null,
                type: 'insertText'
            }, () => (qc.insert(id.mode, pd, rd, {
                format: 'latex',
                style: wd
            }), Kr(id.model), rd.endsWith(' ') && (id.mode = 'text', qc.insert('text', pd, ' ', {
                style: wd
            })), !0)), id.snapshot(), id.dirty = !0, pd.announce('replacement');
        }
        return id.scrollIntoView(), kd.preventDefault && kd.preventDefault(), !1;
    }

    function hd(id, jd, kd) {
        var ld;
        const {
            model: md
        } = id;
        if (id.options.readOnly)
            return void md.announce('plonk');
        if ((kd = null != kd ? kd : {}).focus && id.focus(), kd.feedback && (id.options.keypressVibration && _pd() && navigator.vibrate(3), id.playSound('keypress')), 'string' == typeof kd.mode && id.mode !== kd.mode && id.switchMode(kd.mode), kd.simulateKeystroke) {
            const nd = jd.charAt(0),
                od = new KeyboardEvent('keypress', {
                    key: nd
                });
            if (!jr(id, nd, od))
                return;
        }
        const nd = md.at(md.position),
            od = {
                ...nd.computedStyle,
                ...id.style
            };
        md.selectionIsCollapsed || (md.deleteAtoms(Ca(md.selection)), id.snapshot());
        const pd = Ye(jd);
        if ('latex' === id.mode)
            md.deferNotifications({
                content: !0,
                selection: !0,
                data: jd,
                type: 'insertText'
            }, () => {
                Ui(id);
                for (const qd of pd)
                    qc.insert('latex', md, qd);
                Xi(qd);
            });
        else if ('text' === id.mode)
            for (const qd of pd)
                qc.insert('text', md, qd, {
                    style: od
                });
        else if ('math' === qd.mode)
            for (const rd of pd) {
                let sd = {
                    '^': 'moveToSuperscript',
                    _: 'moveToSubscript',
                    ' ': 'moveAfterParent'
                } [rd];
                ' ' === rd && qd.options.mathModeSpace && (sd = [
                    'insert',
                    qd.options.mathModeSpace
                ]), sd ? qd.executeCommand(sd) : /\d/.test(rd) && qd.options.smartSuperscript && 'superscript' === nd.treeBranch && 'mop' !== (null === (ld = nd.parent) || void 0 === ld ? void 0 : ld.type) && nd.hasNoSiblings ? (qc.insert('math', md, rd, {
                    style: od
                }), Qo(md)) : ('mord' === nd.type && /[a-zA-Z]/.test(nd.value) && /[a-zA-Z]/.test(rd) && (nd.style.variant && (od.variant = nd.style.variant), nd.style.variantStyle && (od.variantStyle = nd.style.variantStyle)), qc.insert('math', md, rd, {
                    style: od
                }));
            }
        id.snapshotAndCoalesce(), id.dirty = !0, id.scrollIntoView();
    }

    function _hd(id) {
        const jd = id.model,
            kd = [];
        let ld = jd.at(Math.min(jd.position, jd.anchor));
        for (;
            'first' !== ld.type;)
            kd.push(ld), ld = ld.leftSibling;
        return kd;
    }

    function hd(id, jd) {
        var kd, ld, md, nd, od, _pd;
        const qd = {};
        'string' == typeof jd.color && (qd.verbatimColor = jd.color, qd.color = null !== (kd = id.colorMap(jd.color)) && void 0 !== kd ? kd : 'none'), 'string' == typeof jd.backgroundColor && (qd.verbatimBackgroundColor = jd.backgroundColor, qd.backgroundColor = null !== (ld = id.backgroundColorMap(jd.backgroundColor)) && void 0 !== ld ? ld : 'none'), 'string' == typeof jd.fontFamily && (qd.fontFamily = jd.fontFamily), 'string' == typeof jd.series && (qd.fontSeries = jd.series), 'string' == typeof jd.fontSeries && (qd.fontSeries = jd.fontSeries.toLowerCase()), qd.fontSeries && (qd.fontSeries = null !== (md = {
            bold: 'b',
            medium: 'm',
            normal: 'm'
        } [qd.fontSeries]) && void 0 !== md ? md : qd.fontSeries), 'string' == typeof jd.shape && (qd.fontShape = jd.shape), 'string' == typeof jd.fontShape && (qd.fontShape = jd.fontShape.toLowerCase()), qd.fontShape && (qd.fontShape = null !== (nd = {
            italic: 'it',
            up: 'n',
            upright: 'n',
            normal: 'n'
        } [qd.fontShape]) && void 0 !== nd ? nd : qd.fontShape);
        const rd = null !== (od = jd.size) && void 0 !== od ? od : jd.fontSize;
        return 'number' == typeof rd ? qd.fontSize = Math.max(1, Math.min(10, rd)) : 'string' == typeof rd && (qd.fontSize = null !== (_pd = {
            size1: 1,
            size2: 2,
            size3: 3,
            size4: 4,
            size5: 5,
            size6: 6,
            size7: 7,
            size8: 8,
            size9: 9,
            size10: 10
        } [rd.toLowerCase()]) && void 0 !== _pd ? _pd : {
            tiny: 1,
            scriptsize: 2,
            footnotesize: 3,
            small: 4,
            normal: 5,
            normalsize: 5,
            large: 6,
            Large: 7,
            LARGE: 8,
            huge: 9,
            Huge: 10
        } [rd]), qd;
    }
    new class extends qc {
        onPaste(hd, id) {
            if (!id.clipboardData)
                return !1;
            if (!ji(hd.model, {
                    dataTransfer: id.clipboardData,
                    inputType: 'insertFromPaste'
                }))
                return !1;
            let jd = '',
                kd = 'auto',
                ld = id.clipboardData.getData('application/json+mathlive');
            if (ld)
                try {
                    const md = JSON.parse(ld);
                    if (md && Array.isArray(md)) {
                        hd.snapshot();
                        const nd = ga(md, hd),
                            {
                                model: od
                            } = hd;
                        od.selectionIsCollapsed || od.deleteAtoms(Ca(od.selection));
                        const pd = od.at(od.position);
                        if (pd.parent instanceof Nb) {
                            const qd = [];
                            let rd = [];
                            'first' === nd[0].type && nd.shift(), 'first' === nd[nd.length - 1].type && nd.pop();
                            for (const sd of nd)
                                'first' === sd.type && rd.length > 0 ? (qd.push(rd), rd = [sd]) : rd.push(sd);
                            rd.length > 0 && qd.push(rd);
                            let td = Number(pd.treeBranch[0]),
                                ud = Number(pd.treeBranch[1]);
                            const vd = pd.parent.maxColumns;
                            for (; pd.parent.colCount - ud < qd.length && pd.parent.colCount < vd;)
                                pd.parent.addColumn();
                            pd.parent.addChildrenAfter(qd[0], pd);
                            for (let wd = 1; wd < qd.length; wd++)
                                ud++, ud >= vd && (ud = 0, pd.parent.addRowAfter(td), td++), pd.parent.setCell(td, ud, qd[wd]);
                        } else
                            pd.parent.addChildrenAfter(nd.filter(hd => 'first' !== hd.type), pd);
                        return od.position = od.offsetOf(nd[nd.length - 1]), Hi(od, {
                            inputType: 'insertFromPaste'
                        }), no(hd), id.preventDefault(), id.stopPropagation(), !0;
                    }
                } catch {}
            if (ld = id.clipboardData.getData('application/json'), ld && hd.computeEngine)
                try {
                    const md = JSON.parse(ld);
                    if ('object' == typeof md && 'latex' in md && md.latex && (jd = md.latex), !jd) {
                        const nd = hd.computeEngine.box(md);
                        nd && !nd.has('Error') && (jd = nd.latex);
                    }
                    jd || (kd = 'latex');
                } catch {}
            if (jd || (jd = id.clipboardData.getData('application/x-latex'), jd && (kd = 'latex')), jd || (jd = id.clipboardData.getData('text/plain')), jd) {
                let md;
                return hd.snapshot(), [nd, od] = $a(od), 'auto' === kd && nd && (kd = 'latex'), this.insert(hd.model, od, {
                    format: kd
                }) && no(hd), id.preventDefault(), id.stopPropagation(), !0;
            }
            return !1;
        }
        insert(hd, id, jd) {
            var kd, ld;
            const md = 'string' == typeof id ? id : null !== (ld = null === (kd = hd.mathfield.computeEngine) || void 0 === kd ? void 0 : kd.box(id).latex) && void 0 !== ld ? ld : '';
            if (!jd.suppressChangeNotifications && !ji(hd, {
                    data: md,
                    inputType: 'insertText'
                }))
                return !1;
            if (jd.insertionMode || (jd.insertionMode = 'replaceSelection'), jd.selectionMode || (jd.selectionMode = 'placeholder'), jd.format || (jd.format = 'auto'), hd.mathfield.smartFence) {
                if (hd.selectionIsCollapsed && 'string' == typeof id && Vr(hd, id, jd.style))
                    return !0;
            } else if ('replaceAll' !== jd.insertionMode) {
                const {
                    parent: nd
                } = hd.at(hd.position);
                if (nd instanceof Fb && '?' === nd.rightDelim && hd.at(hd.position).isLastSibling && 'string' == typeof id && /^[)}\]|]$/.test(id))
                    return nd.isDirty = !0, nd.rightDelim = id, hd.position += 1, Vi(hd), Hi(hd, {
                        data: md,
                        inputType: 'insertText'
                    }), !0;
            }
            const {
                suppressChangeNotifications: nd
            } = hd;
            jd.suppressChangeNotifications && (hd.suppressChangeNotifications = !0);
            const od = hd.suppressChangeNotifications;
            hd.suppressChangeNotifications = !0;
            const pd = {};
            if (pd[0] = 'replaceAll' === jd.insertionMode ? '' : hd.getValue(hd.selection, 'latex-unstyled'), pd['?'] = '\\placeholder{}', pd['@'] = pd['?'], 'replaceSelection' !== jd.insertionMode || hd.selectionIsCollapsed ? 'replaceAll' === jd.insertionMode ? (hd.root.setChildren([], 'body'), hd.position = 0) : 'insertBefore' === jd.insertionMode ? hd.collapseSelection('backward') : 'insertAfter' === jd.insertionMode && hd.collapseSelection('forward') : hd.deleteAtoms(Ca(hd.selection)), hd.at(hd.position).isLastSibling || 'placeholder' !== hd.at(hd.position + 1).type ? 'placeholder' === hd.at(hd.position).type && hd.deleteAtoms([
                    hd.position - 1,
                    hd.position
                ]) : hd.deleteAtoms([
                    hd.position,
                    hd.position + 1
                ]), pd[0])
                pd['@'] = pd[0];
            else if ('string' == typeof id && /(^|[^\\])#@/.test(id)) {
                const qd = function(rd) {
                    let sd = rd.at(rd.position);
                    if ('text' === sd.mode) {
                        for (; !sd.isFirstSibling && 'text' === sd.mode;)
                            sd = sd.leftSibling;
                        return rd.offsetOf(sd);
                    }
                    const td = sd,
                        ud = [];
                    for (; !sd.isFirstSibling && (Ir(sd) || ud.length > 0);)
                        'mclose' === sd.type && ud.unshift(sd.value), 'mopen' === sd.type && ud.length > 0 && sd.value === sb[ud[0]] && ud.shift(), sd = sd.leftSibling;
                    return td === sd ? -1 : rd.offsetOf(sd);
                }(hd);
                qd >= 0 && (pd['@'] = hd.getValue(qd, hd.position, 'latex-unstyled'), hd.deleteAtoms([
                    qd,
                    hd.position
                ]));
            }
            pd[0] || (pd[0] = pd['?']);
            let qd = !1;
            const [rd, sd] = function(td, ud, vd, wd) {
                var xd;
                let yd, zd = [];
                if ('string' != typeof ud || 'math-json' === wd.format) {
                    if (!td.mathfield.computeEngine)
                        return [
                            'math-json',
                            []
                        ];
                    [Ad, Bd] = [
                        'latex',
                        td.mathfield.computeEngine.box(Bd).latex
                    ], zd = Nt(Bd, td.mathfield, {
                        parseMode: 'math'
                    });
                } else
                    'string' == typeof ud && 'ascii-math' === wd.format ? ([Ad, Bd] = Ta(Bd, {
                        format: 'ascii-math',
                        inlineShortcuts: td.mathfield.options.inlineShortcuts
                    }), zd = Nt(Bd, td.mathfield, {
                        parseMode: 'math'
                    }), 'latex' !== Ad && td.options.removeExtraneousParentheses && Fr(zd)) : ('auto' === wd.format || (null === (xd = wd.format) || void 0 === xd ? void 0 : xd.startsWith('latex'))) && ('auto' === wd.format && ([Cd, Dd] = Ta(Dd, {
                        format: 'auto',
                        inlineShortcuts: td.mathfield.options.inlineShortcuts
                    })), 'latex' === wd.format && ([, Ed] = $a(Ed)), zd = Nt(Ed, td.mathfield, {
                        parseMode: 'math',
                        args: td => (qd = !0, pd[td])
                    }), 'latex' !== wd.format && td.options.removeExtraneousParentheses && Fr(zd));
                return Jo(zd, wd.style), [
                    null != yd ? yd : 'latex',
                    zd
                ];
            }(hd, id, 0, jd);
            if (!sd)
                return !1;
            const td = Rr(sd),
                ud = td.filter(id => id.placeholderId && !hd.mathfield.placeholders.has(id.placeholderId)),
                vd = td.map(hd => hd.placeholderId);
            [...hd.mathfield.placeholders.keys()].filter(hd => !vd.includes(hd)).forEach(id => {
                var wd;
                hd.mathfield.placeholders.has(id) && (null === (wd = hd.mathfield.placeholders.get(id)) || void 0 === wd || wd.field.remove(), hd.mathfield.placeholders.delete(id));
            }), ud.forEach(id => {
                var wd, xd;
                let yd = hd.mathfield.options.virtualKeyboardMode;
                'manual' === yd && (yd = 'onfocus');
                const zd = new _ud({
                        ...hd.mathfield.options,
                        virtualKeyboardMode: yd,
                        readOnly: !1
                    }),
                    Ad = id.defaultValue ? pb.serialize(id.defaultValue, {
                        defaultMode: 'math'
                    }) : '';
                zd.value = Ad, zd.addEventListener('input', () => {
                    ! function(Bd, Cd) {
                        !Bd.suppressChangeNotifications && Bd.mathfield.host && (Bd.suppressChangeNotifications = !0, Bd.mathfield.host.dispatchEvent(new CustomEvent('placeholder-change', {
                            detail: {
                                placeholderId: Cd
                            },
                            bubbles: !0,
                            composed: !0
                        })), Bd.suppressChangeNotifications = !1);
                    }(hd, id.placeholderId), setTimeout(() => no(hd.mathfield));
                }), null === (xd = null === (wd = hd.mathfield.element) || void 0 === wd ? void 0 : wd.querySelector('.ML__placeholdercontainer')) || void 0 === xd || xd.appendChild(zd), hd.mathfield.placeholders.set(id.placeholderId, {
                    atom: id,
                    field: zd
                });
            });
            const {
                parent: wd
            } = hd.at(hd.position);
            if ('latex' !== rd && hd.options.removeExtraneousParentheses && wd instanceof Fb && '(' === wd.leftDelim && wd.hasEmptyBranch('body') && 1 === sd.length && 'genfrac' === sd[0].type) {
                const xd = wd.parent,
                    yd = wd.treeBranch;
                xd.removeChild(wd), xd.setChildren(sd, yd);
            }
            const xd = wd.hasEmptyBranch('body'),
                yd = hd.at(hd.position);
            yd.parent.addChildrenAfter(sd, yd), 'latex' === rd && 'string' == typeof id && 'root' === wd.type && xd && !qd && (wd.verbatimLatex = id), hd.suppressChangeNotifications = od;
            const zd = sd[sd.length - 1];
            if ('placeholder' === jd.selectionMode) {
                const Ad = sd.reduce((hd, Ad) => [
                    ...hd,
                    ...Ad.children.filter(hd => 'placeholder' === hd.type)
                ], []);
                if (Ad.length > 0) {
                    const Bd = hd.offsetOf(Ad[0]);
                    hd.setSelection(Bd - 1, Bd), hd.announce('move');
                } else
                    zd && (hd.position = hd.offsetOf(zd));
            } else
                'before' === jd.selectionMode || ('after' === jd.selectionMode ? zd && (hd.position = hd.offsetOf(zd)) : 'item' === jd.selectionMode && hd.setSelection(hd.anchor, hd.offsetOf(zd)));
            return Hi(hd, {
                data: md,
                inputType: 'insertText'
            }), hd.suppressChangeNotifications = nd, !0;
        }
        constructor() {
            super('math');
        }
    }(), uo({
        undo: tb => (Zi(tb, 'accept'), tb.undo(), !0),
        redo: tb => (Zi(tb, 'accept'), tb.redo(), !0),
        scrollIntoView: tb => (tb.scrollIntoView(), !0),
        scrollToStart: tb => (tb.field.scroll(0, 0), !0),
        scrollToEnd: tb => {
            const hd = tb.field.getBoundingClientRect();
            return tb.field.scroll(hd.left - window.scrollX, 0), !0;
        },
        enterLatexMode: tb => (tb.switchMode('latex'), !0),
        toggleKeystrokeCaption: function(hd) {
            return hd.keystrokeCaptionVisible = !hd.keystrokeCaptionVisible, hd.keystrokeCaptionVisible ? (hd.keystrokeCaption = Nr(hd), hd.keystrokeCaption.innerHTML = '') : hd.keystrokeCaption && (hd.keystrokeCaption.style.visibility = 'hidden'), !1;
        },
        plonk: tb => (tb.model.announce('plonk'), !0),
        switchMode: (tb, ub, b, _kd) => (tb.switchMode(ub, b, _kd), !0),
        insert: (tb, ub, b) => tb.insert(ub, b),
        typedText: (tb, ub, b) => (Hr(tb, ub, b), !0),
        insertDecimalSeparator: tb => {
            if ('math' === tb.mode && ',' === tb.options.decimalSeparator) {
                const hd = tb.model;
                if (hd.at(Math.max(hd.position, hd.anchor)).isDigit())
                    return tb.snapshot(), tb.insert('{,}', {
                        format: 'latex'
                    }), !0;
            }
            return tb.insert('.'), !0;
        },
        commit: tb => (ji(tb.model, {
            inputType: 'insertLineBreak'
        }) && (tb.host && tb.host.dispatchEvent(new Event('change', {
            bubbles: !0,
            composed: !0
        })), Hi(tb.model, {
            inputType: 'insertLineBreak'
        })), !0)
    }), uo({
        copyToClipboard: tb => (tb.focus(), tb.model.selectionIsCollapsed && tb.select(), document.execCommand('copy'), !1),
        cutToClipboard: tb => (tb.focus(), document.execCommand('cut'), !0),
        pasteFromClipboard: tb => (tb.focus(), document.execCommand('paste'), !0)
    }, {
        target: 'mathfield',
        category: 'clipboard'
    }), uo({
        applyStyle: function(hd, id) {
            hd.flushInlineShortcutBuffer();
            const jd = Jr(hd, id),
                {
                    model: _kd
                } = hd;
            return _kd.selectionIsCollapsed ? (hd.style.fontSeries && jd.fontSeries === hd.style.fontSeries && (jd.fontSeries = 'auto'), jd.fontShape && jd.fontShape === hd.style.fontShape && (jd.fontShape = 'auto'), jd.color && jd.color === hd.style.color && (jd.color = 'none'), jd.backgroundColor && jd.backgroundColor === hd.style.backgroundColor && (jd.backgroundColor = 'none'), jd.fontSize && jd.fontSize === hd.style.fontSize && (jd.fontSize = 'auto'), hd.style = {
                ...hd.style,
                ...jd
            }) : hd.model.deferNotifications({
                content: !0,
                type: 'insertText'
            }, () => {
                _kd.selection.ranges.forEach(hd => Uo(_kd, hd, jd, {
                    operation: 'toggle'
                })), hd.snapshot();
            }), !0;
        }
    }, {
        target: 'mathfield'
    });
    let hd = null,
        id = 0;

    function jd(kd) {
        return _od() && 'TouchEvent' in globalThis && kd instanceof TouchEvent;
    }

    function jd(kd) {
        return _od() && 'PointerEvent' in globalThis && kd instanceof PointerEvent;
    }

    function jd(kd, ld, md) {
        if (kd >= md.left && kd <= md.right && ld >= md.top && ld <= md.bottom)
            return 0;
        const nd = kd - (md.left + md.right) / 2,
            _od = ld - (md.top + md.bottom) / 2;
        return nd * nd + _od * _od;
    }

    function jd(kd, ld, md, nd, od) {
        if (!md.id)
            return [
                1 / 0,
                null
            ];
        if (ld.has(md.id))
            return ld.get(md.id);
        const pd = pi(kd, md);
        if (!pd)
            return [
                1 / 0,
                null
            ];
        let qd = [
            1 / 0,
            null
        ];
        if (md.hasChildren && !md.captureSelection && nd >= pd.left && nd <= pd.right)
            for (const rd of md.children) {
                const sd = jd(kd, ld, rd, nd, od);
                sd[0] <= qd[0] && (qd = sd);
            }
        return qd[1] || (qd = [
            Yr(nd, od, pd),
            md
        ]), ld.set(md.id, qd), qd;
    }

    function jd(kd, ld, md) {
        const [, nd] = Qr(kd, new Map(), kd.model.root, ld, md);
        return nd;
    }

    function jd(kd, ld, md, nd) {
        var od;
        const pd = kd.fieldContent.getBoundingClientRect();
        if (ld > pd.right || md > pd.bottom + 8)
            return kd.model.lastOffset;
        if (ld < pd.left || md < pd.top - 8)
            return 0;
        (nd = null != nd ? nd : {}).bias = null !== (od = nd.bias) && void 0 !== od ? od : 0;
        let qd = en(kd, ld, md);
        const rd = [];
        let sd = qd;
        for (; sd;)
            rd.unshift(sd), sd = sd.parent;
        for (const td of rd)
            if (td.captureSelection) {
                qd = td;
                break;
            }
        let ud = td.model.offsetOf(qd);
        if (ud < 0)
            return -1;
        if (qd.leftSibling)
            if (0 === nd.bias && 'placeholder' !== qd.type) {
                const vd = pi(td, qd);
                vd && ld < (vd.left + vd.right) / 2 && (ud = td.model.offsetOf(qd.leftSibling));
            } else
                nd.bias < 0 && (ud = td.model.offsetOf(qd.leftSibling));
        return ud;
    }
    new class extends qc {
        onPaste(jd, kd) {
            if (!kd.clipboardData)
                return !1;
            const ld = kd.clipboardData.getData('text/plain');
            return !(!ld || !ji(jd.model, {
                inputType: 'insertFromPaste',
                data: ld
            }) || (jd.snapshot(), this.insert(jd.model, ld) && (Hi(jd.model, {
                inputType: 'insertFromPaste'
            }), no(jd)), kd.preventDefault(), kd.stopPropagation(), 0));
        }
        insert(jd, kd, ld = {}) {
            if (!ji(jd, {
                    data: kd,
                    inputType: 'insertText'
                }))
                return !1;
            ld.insertionMode || (ld.insertionMode = 'replaceSelection'), ld.selectionMode || (ld.selectionMode = 'placeholder'), ld.format || (ld.format = 'auto');
            const {
                suppressChangeNotifications: md
            } = jd;
            ld.suppressChangeNotifications && (jd.suppressChangeNotifications = !0);
            const nd = jd.suppressChangeNotifications;
            jd.suppressChangeNotifications = !0, 'replaceSelection' !== ld.insertionMode || jd.selectionIsCollapsed ? 'replaceAll' === ld.insertionMode ? (jd.root.setChildren([], 'body'), jd.position = 0) : 'insertBefore' === ld.insertionMode ? jd.collapseSelection('backward') : 'insertAfter' === ld.insertionMode && jd.collapseSelection('forward') : jd.deleteAtoms(Ca(jd.selection));
            const od = (_pd = kd, _qd = jd.mathfield, Nt(_pd = (_pd = (_pd = (_pd = (_pd = (_pd = (_pd = (_pd = (_pd = (_pd = (_pd = _pd.replace(/\\/g, '\\textbackslash ')).replace(/#/g, '\\#')).replace(/\$/g, '\\$')).replace(/%/g, '\\%')).replace(/&/g, '\\&')).replace(/_/g, '\\_')).replace(/{/g, '\\textbraceleft ')).replace(/}/g, '\\textbraceright ')).replace(/\^/g, '\\textasciicircum ')).replace(/~/g, '\\textasciitilde ')).replace(/\xa3/g, '\\textsterling '), _qd, {
                parseMode: 'text'
            }));
            var _pd, _qd;
            if (Jo(od, ld.style), !od)
                return !1;
            const rd = jd.at(jd.position),
                sd = rd.parent.addChildrenAfter(od, rd);
            return jd.suppressChangeNotifications = nd, 'before' === ld.selectionMode || ('item' === ld.selectionMode ? jd.setSelection(jd.anchor, jd.offsetOf(sd)) : sd && (jd.position = jd.offsetOf(sd))), Hi(jd, {
                data: kd,
                inputType: 'insertText'
            }), jd.suppressChangeNotifications = md, !0;
        }
        constructor() {
            super('text');
        }
    }();
    const jd = 'mathlive#remote-virtual-keyboard-message';
    class kd {
        get visible() {
            var ld, md;
            return null !== (md = null === (ld = _wd().sharedVirtualKeyboard) || void 0 === ld ? void 0 : ld.visible) && void 0 !== md && md;
        }
        set visible(ld) {
            _wd().sharedVirtualKeyboard && (_wd().sharedVirtualKeyboard.visible = ld);
        }
        setOptions(ld) {
            this.sendMessage('setOptions', {
                options: JSON.stringify(_ld(ld))
            });
        }
        create() {}
        dispose() {
            this.disable();
        }
        enable() {
            this.enabled || (this.enabled = !0, globalThis.addEventListener('message', this));
        }
        disable() {
            this.enabled && (globalThis.removeEventListener('message', this), this.enabled = !1);
        }
        executeCommand(ld) {
            var md, nd, od;
            return 'virtual-keyboard' === po(ld) ? (this._mathfield && (this.setOptions(_ld(this._mathfield.getOptions())), ('showVirtualKeyboard' === ld || 'toggleVirtualKeyboard' === ld && !1 === this.visible) && (null === (nd = (md = this._mathfield).focus) || void 0 === nd || nd.call(md))), this.sendMessage('executeCommand', {
                command: ld
            }), !1) : null === (od = this._mathfield) || void 0 === od ? void 0 : od.executeCommand(ld);
        }
        focusMathfield() {}
        blurMathfield() {}
        stateChanged() {}
        handleEvent(ld) {
            var md, nd, od, pd;
            if ('message' === ld.type && ld.data && ld.data.type === jd) {
                if (!mi(ld.origin, this.originValidator))
                    throw new Error(`Message from unknown origin (${ ld.origin }) cannot be handled`);
                const {
                    action: qd
                } = ld.data;
                if ('executeCommand' === qd) {
                    if ('virtual-keyboard' === po(ld.data.command) && window === globalThis.parent)
                        return;
                    this.executeCommand(ld.data.command);
                } else
                    'updateState' === qd ? (this.visible = ld.data.state.visible, this.height = ld.data.state.height) : 'focus' === qd ? null === (nd = null === (md = this._mathfield) || void 0 === md ? void 0 : md.focus) || void 0 === nd || nd.call(md) : 'blur' === qd && (null === (pd = null === (od = this._mathfield) || void 0 === od ? void 0 : od.blur) || void 0 === pd || pd.call(od));
            }
        }
        sendMessage(ld, md = {}) {
            return !!globalThis.parent && (globalThis.parent.postMessage({
                type: jd,
                action: ld,
                ...md
            }, this.targetOrigin), !0);
        }
        constructor(ld) {
            var md, nd, od;
            this.targetOrigin = null !== (nd = null !== (md = ld.targetOrigin) && void 0 !== md ? md : globalThis.origin) && void 0 !== nd ? nd : '*', this.originValidator = null !== (od = ld.originValidator) && void 0 !== od ? od : 'same-origin', this._mathfield = ld.mathfield;
        }
    }

    function _ld(md) {
        if ('object' != typeof md)
            return {};
        const nd = {};
        return md.fontsDirectory && (nd.fontsDirectory = md.fontsDirectory), md.soundsDirectory && (nd.soundsDirectory = md.soundsDirectory), md.virtualKeyboards && (nd.virtualKeyboards = md.virtualKeyboards), md.virtualKeyboardLayout && (nd.virtualKeyboardLayout = md.virtualKeyboardLayout), md.customVirtualKeyboardLayers && (nd.customVirtualKeyboardLayers = md.customVirtualKeyboardLayers), md.customVirtualKeyboards && (nd.customVirtualKeyboards = md.customVirtualKeyboards), md.virtualKeyboardTheme && (nd.virtualKeyboardTheme = md.virtualKeyboardTheme), md.keypressVibration && (nd.keypressVibration = md.keypressVibration), md.keypressSound && (nd.keypressSound = md.keypressSound), md.plonkSound && (nd.plonkSound = md.plonkSound), md.virtualKeyboardToolbar && (nd.virtualKeyboardToolbar = md.virtualKeyboardToolbar), md.targetOrigin && (nd.targetOrigin = md.targetOrigin), md.originValidator && (nd.originValidator = md.originValidator), nd;
    }
    let ld, md;
    class nd {
        get audioContext() {
            return this._audioContext || (this._audioContext = new AudioContext()), this._audioContext;
        }
        get colorMap() {
            return tb => {
                var od;
                let pd;
                return 'function' == typeof(null === (od = this.options) || void 0 === od ? void 0 : od.colorMap) && (pd = this.options.colorMap(tb)), pd || (pd = g(tb)), pd;
            };
        }
        get backgroundColorMap() {
            return tb => {
                var od;
                let pd;
                return 'function' == typeof(null === (od = this.options) || void 0 === od ? void 0 : od.backgroundColorMap) && (pd = this.options.backgroundColorMap(tb)), pd || 'function' != typeof this.options.colorMap || (pd = this.options.colorMap(tb)), pd || (pd = v(tb)), pd;
            };
        }
        get fractionNavigationOrder() {
            var od, pd;
            return null !== (pd = null === (od = this.options) || void 0 === od ? void 0 : od.fractionNavigationOrder) && void 0 !== pd ? pd : 'numerator-denominator';
        }
        get placeholderSymbol() {
            var od, pd;
            return null !== (pd = null === (od = this.options) || void 0 === od ? void 0 : od.placeholderSymbol) && void 0 !== pd ? pd : '\u25A2';
        }
        get smartFence() {
            var od, pd;
            return null !== (pd = null === (od = this.options) || void 0 === od ? void 0 : od.smartFence) && void 0 !== pd && pd;
        }
        get letterShapeStyle() {
            var od, pd;
            return null !== (pd = null === (od = this.options) || void 0 === od ? void 0 : od.letterShapeStyle) && void 0 !== pd ? pd : 'tex';
        }
        get registers() {
            var od, pd;
            return null !== (pd = null === (od = this.options) || void 0 === od ? void 0 : od.registers) && void 0 !== pd ? pd : {};
        }
        getDefinition(od, pd = 'math') {
            return fa(od, pd);
        }
        getMacro(od) {
            return ya(od, this.options.macros);
        }
        get virtualKeyboard() {
            if (!this.options.readOnly)
                return this._virtualKeyboard || (this.options.useSharedVirtualKeyboard || _wd().sharedVirtualKeyboard ? this._virtualKeyboard = new kd({
                    targetOrigin: this.options.sharedVirtualKeyboardTargetOrigin,
                    originValidator: this.options.originValidator,
                    mathfield: this
                }) : this._virtualKeyboard = new Yc(this.options, this)), this._virtualKeyboard;
        }
        get computeEngine() {
            var od, pd;
            if (void 0 === this._computeEngine) {
                const qd = null === (od = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === od ? void 0 : od.ComputeEngine;
                qd && (this._computeEngine = new qd()), this._computeEngine && ',' === this.options.decimalSeparator && (this._computeEngine.latexOptions.decimalMarker = '{,}');
            }
            return null !== (pd = this._computeEngine) && void 0 !== pd ? pd : null;
        }
        get virtualKeyboardState() {
            var od;
            return (null === (od = this.virtualKeyboard) || void 0 === od ? void 0 : od.visible) ? 'visible' : 'hidden';
        }
        set virtualKeyboardState(od) {
            this.virtualKeyboard && ('hidden' === od ? this.virtualKeyboard.executeCommand('hideVirtualKeyboard') : 'visible' === od && this.virtualKeyboard.executeCommand('showVirtualKeyboard'));
        }
        get keybindings() {
            var od, pd;
            if (this._keybindings)
                return this._keybindings;
            const [qd, rd] = function(sd, td) {
                const ud = [],
                    vd = [];
                for (const wd of sd)
                    try {
                        const xd = Pi(wd, td);
                        if (xd) {
                            const yd = ud.filter(td => td.key === xd.key && td.ifMode === xd.ifMode);
                            if (yd.length > 0)
                                throw new Error(`Ambiguous key binding ${ wd.key } (${ Fi(wd.command) }) matches ${ yd[0].key } (${ Fi(yd[0].command) }) with the ${ td.displayName } keyboard layout`);
                            ud.push(xd);
                        }
                    } catch (sd) {
                        sd instanceof Error && vd.push(sd.message);
                    }
                return [
                    ud,
                    vd
                ];
            }(this.options.keybindings, null !== (od = Ki()) && void 0 !== od ? od : zc);
            return (null === (pd = Ki()) || void 0 === pd ? void 0 : pd.score) > 0 && (this._keybindings = qd, rd.length), qd;
        }
        setOptions(od) {
            var pd, qd;
            if (this.options = go(this.options, od), 'computeEngine' in od && (this._computeEngine = this.options.computeEngine), this._computeEngine && 'decimalSeparator' in od && (this._computeEngine.latexOptions.decimalMarker = ',' === this.options.decimalSeparator ? '{,}' : '.'), this.model.setListeners({
                    onSelectionDidChange: od => this._onSelectionDidChange()
                }), this.model.options.macros = this.options.macros, this._keybindings = void 0, ('soundsDirectory' in od || 'plonkSound' in od || 'keypressSound' in od || 'spacebarKeypressSound' in od || 'returnKeypressSound' in od || 'deleteKeypressSound' in od) && (this.audioBuffers = {}), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.options.readOnly ? (this.hasFocus() && 'visible' === this.virtualKeyboardState && this.executeCommand('hideVirtualKeyboard'), this.onBlur(), this.element.classList.add('ML__isReadOnly')) : this.element.classList.remove('ML__isReadOnly'), null === (pd = this.virtualKeyboard) || void 0 === pd || pd.setOptions(this.options), this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), 'virtualKeyboardToggleGlyph' in od) {
                const rd = null === (qd = this.element) || void 0 === qd ? void 0 : qd.querySelector('.ML__virtual-keyboard-toggle');
                rd && (rd.innerHTML = this.options.createHTML(this.options.virtualKeyboardToggleGlyph));
            }
            const rd = pb.serialize(this.model.root, {
                expandMacro: !1,
                defaultMode: this.options.defaultMode
            });
            ('macros' in od || this.model.getValue() !== rd) && qc.insert('math', this.model, rd, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), no(this);
        }
        getOptions(od) {
            return vo(this.options, od);
        }
        getOption(od) {
            return vo(this.options, od);
        }
        handleEvent(od) {
            if (si(this))
                switch (od.type) {
                    case 'focus':
                        this.onFocus();
                        break;
                    case 'blur':
                        this.onBlur();
                        break;
                    case 'touchstart':
                    case 'mousedown':
                    case 'pointerdown':
                        ! function(pd, qd) {
                            var rd;
                            pd.atomBoundsCache = new Map();
                            const sd = pd;
                            let td, ud = !1,
                                vd = 'none';
                            if (Zr(qd) && qd.buttons > 1)
                                return;
                            let wd = !1,
                                xd = !1;
                            const yd = Gr(qd) ? qd.touches[0].clientX : qd.clientX,
                                zd = Gr(qd) ? qd.touches[0].clientY : qd.clientY,
                                Ad = Date.now(),
                                Bd = sd.field,
                                Cd = setInterval(() => {
                                    wd ? Bd.scroll({
                                        top: 0,
                                        left: Bd.scrollLeft - 16
                                    }) : xd && Bd.scroll({
                                        top: 0,
                                        left: Bd.scrollLeft + 16
                                    });
                                }, 32);

                            function Dd(Ed) {
                                _Gd() && ('PointerEvent' in window ? (oi(Bd, 'pointermove', h), oi(Bd, 'pointerup pointercancel', Dd), Ed instanceof PointerEvent && Bd.releasePointerCapture(Ed.pointerId)) : (oi(Bd, 'touchmove', h), oi(Bd, 'touchcancel touchend', Dd), oi(window, 'mousemove', h), oi(window, 'mouseup blur', Dd)), ud = !1, clearInterval(Cd), pd.element.classList.remove('tracking'), Ed && Ed.preventDefault());
                            }

                            function Dd(Ed) {
                                if (!sd.hasFocus())
                                    return void g(null);
                                const Fd = Gr(Ed) ? Ed.touches[0].clientX : Ed.clientX,
                                    _Gd = Gr(Ed) ? Ed.touches[0].clientY : Ed.clientY,
                                    Hd = Gr(Ed) || 'touch' === Ed.pointerType ? 20 : 5;
                                if (Date.now() < Ad + 500 && Math.abs(yd - Fd) < Hd && Math.abs(zd - _Gd) < Hd)
                                    return Ed.preventDefault(), void Ed.stopPropagation();
                                const Id = Bd.getBoundingClientRect();
                                xd = Fd > Id.right, wd = Fd < Id.left;
                                let Jd = td;
                                Zr(Ed) ? Ed.isPrimary || (Jd = tn(sd, Ed.clientX, Ed.clientY, {
                                    bias: 0
                                })) : Ed.touches && 2 === Ed.touches.length && (Jd = tn(sd, Ed.touches[1].clientX, Ed.touches[1].clientY, {
                                    bias: 0
                                }));
                                const Kd = tn(sd, Fd, _Gd, {
                                    bias: Fd <= yd ? Fd === yd ? 0 : -1 : 1
                                });
                                Jd >= 0 && Kd >= 0 && (sd.model.extendSelectionTo(Jd, Kd), no(pd)), Ed.preventDefault(), Ed.stopPropagation();
                            }
                            hd && Math.abs(hd.x - yd) < 5 && Math.abs(hd.y - zd) < 5 && Date.now() < hd.time + 500 ? (id += 1, hd.time = Ad) : (hd = {
                                x: yd,
                                y: zd,
                                time: Ad
                            }, id = 1);
                            const Dd = Bd.getBoundingClientRect();
                            if (yd >= Dd.left && yd <= Dd.right && zd >= Dd.top && zd <= Dd.bottom) {
                                if (pd.hasFocus() || (vd = 'all', pd.focus({
                                        scrollIntoView: !1
                                    })), pd.flushInlineShortcutBuffer(), pd.smartModeSuppressed = !1, td = tn(pd, yd, zd, {
                                        bias: 0
                                    }), td >= 0) {
                                    if (pd.element.classList.add('tracking'), qd.shiftKey) {
                                        const Ed = pd.model.selectionIsCollapsed;
                                        pd.model.extendSelectionTo(pd.model.anchor, td), vd = Gi(pd.model) || Ed ? 'all' : 'selection';
                                    } else
                                        'placeholder' === pd.model.at(td).type ? (pd.model.setSelection(td - 1, td), vd = 'selection') : 'placeholder' === (null === (rd = pd.model.at(td).rightSibling) || void 0 === rd ? void 0 : rd.type) ? (pd.model.setSelection(td, td + 1), vd = 'selection') : (pd.model.position = td, vd = Gi(pd.model) ? 'all' : 'selection');
                                    pd.style = {}, 3 === qd.detail || id > 2 ? (g(qd), 3 !== qd.detail && 3 !== id || (pd.model.selection = {
                                        ranges: [
                                            [
                                                0,
                                                pd.model.lastOffset
                                            ]
                                        ]
                                    }, vd = 'all')) : ud || (ud = !0, _ud() && 'PointerEvent' in window ? (ii(Bd, 'pointermove', h), ii(Bd, 'pointerup pointercancel', g), qd instanceof PointerEvent && Bd.setPointerCapture(qd.pointerId)) : (ii(window, 'blur', g), Gr(qd) && qd.touches ? (ii(qd.target, 'touchmove', h), ii(qd.target, 'touchcancel touchend', g)) : (ii(window, 'mousemove', h), ii(window, 'mouseup', g))), 2 !== qd.detail && 2 !== id || (ir(pd.model), vd = 'all'));
                                }
                            } else
                                hd = null;
                            'none' !== vd && (pd.model.selectionIsCollapsed && (vd = 'all'), no(pd)), qd.preventDefault();
                        }(this, od);
                        break;
                    case 'resize':
                        this.resizeTimer && cancelAnimationFrame(this.resizeTimer), this.resizeTimer = requestAnimationFrame(() => si(this) && this.onResize());
                        break;
                    case 'wheel':
                        this.onWheel(od);
                }
        }
        dispose() {
            if (!si(this))
                return;
            const od = this.element;
            delete this.element, delete od.mathfield, od.innerHTML = this.model.getValue(), oi(od, 'pointerdown', this), oi(od, 'touchstart:active mousedown', this), oi(od, 'focus', this), oi(od, 'blur', this), oi(window, 'resize', this), window.removeEventListener('blur', this, {
                capture: !0
            }), delete this.accessibleNode, delete this.ariaLiveText, delete this.field, delete this.fieldContent, this.virtualKeyboardToggle.remove(), delete this.virtualKeyboardToggle, this._virtualKeyboard && (this._virtualKeyboard.dispose(), delete this._virtualKeyboard), ni(this.popover), _Hc && _Hc.release(), _Ic && _Ic.release(), delete this.popover, ni(this.keystrokeCaption), fd && fd.release(), gd && gd.release(), delete this.keystrokeCaption, this.stylesheets.forEach(od => null == od ? void 0 : od.release());
        }
        flushInlineShortcutBuffer(od) {
            if (null != od || (od = {
                    defer: !1
                }), !od.defer)
                return this.inlineShortcutBuffer = [], clearTimeout(this.inlineShortcutBufferFlushTimer), void(this.inlineShortcutBufferFlushTimer = 0);
            this.options.inlineShortcutTimeout > 0 && (clearTimeout(this.inlineShortcutBufferFlushTimer), this.inlineShortcutBufferFlushTimer = setTimeout(() => this.flushInlineShortcutBuffer(), this.options.inlineShortcutTimeout));
        }
        executeCommand(od) {
            var pd, qd;
            return 'virtual-keyboard' === po(od) ? null !== (qd = null === (pd = this.virtualKeyboard) || void 0 === pd ? void 0 : pd.executeCommand(od)) && void 0 !== qd && qd : function(rd, sd) {
                var td, _ud, vd;
                if (!sd)
                    return !1;
                let wd, xd = [],
                    yd = !1,
                    zd = !1;
                _rd(sd) ? (wd = sd[0], xd = sd.slice(1)) : wd = sd, wd = wd.replace(/-\w/g, rd => rd[1].toUpperCase());
                const Ad = null === (td = Jc[wd]) || void 0 === td ? void 0 : td.target;
                if ('model' === Ad) {
                    if (rd.options.readOnly && /^(paste|cut|insert|delete|transpose|add)/.test(wd))
                        return rd.model.announce('plonk'), !1;
                    /^(delete|transpose|add)/.test(wd) && 'deleteBackward' !== wd && rd.flushInlineShortcutBuffer(), /^(delete|transpose|add)/.test(wd) && 'latex' !== rd.mode && (rd.popUndoStack(), rd.snapshot()), 'latex' !== rd.mode || /^(complete)/.test(wd) || Ui(rd), Jc[wd].fn(rd.model, ...xd), 'latex' !== rd.mode && /^(delete|transpose|add)/.test(wd) && rd.snapshot(), 'latex' === rd.mode && Xi(rd), zd = !0, yd = !0;
                } else if ('virtual-keyboard' === Ad)
                    zd = null !== (vd = null === (_ud = rd.virtualKeyboard) || void 0 === _ud ? void 0 : _ud.executeCommand(sd)) && void 0 !== vd && vd, yd = !0;
                else {
                    if (!Jc[wd])
                        throw new Error(`Unknown command "${ wd }"`);
                    /^(undo|redo)/.test(wd) && rd.flushInlineShortcutBuffer(), zd = Jc[wd].fn(rd, ...xd), yd = !0;
                }
                return 'virtual-keyboard' !== Ad && (rd.model.selectionIsCollapsed && !/^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(wd) || (rd.flushInlineShortcutBuffer(), rd.style = {})), zd && no(rd), yd;
            }(this, od);
        }
        get errors() {
            return Pt(this.model.getValue(), this);
        }
        getValue(od, pd, qd) {
            return this.model.getValue(od, pd, qd);
        }
        setValue(od, pd) {
            var qd;
            void 0 === (pd = null != pd ? pd : {
                mode: 'math'
            }).insertionMode && (pd.insertionMode = 'replaceAll'), void 0 !== pd.format && 'auto' !== pd.format || (pd.format = 'latex');
            let _rd = 'math';
            void 0 !== pd.mode && 'auto' !== pd.mode || (_rd = null !== (qd = Wo(this.model, this.model.position)) && void 0 !== qd ? qd : 'math'), qc.insert(_rd, this.model, od, pd) && (this.undoManager.snapshot(), no(this));
        }
        get expression() {
            const od = this.computeEngine;
            return od ? od.box(od.parse(this.model.getValue())) : null;
        }
        loadSound(od) {
            var pd, qd, rd, sd, td, ud, vd;
            delete this.audioBuffers[od];
            let wd = '';
            switch (od) {
                case 'keypress':
                    wd = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null === (pd = this.options.keypressSound) || void 0 === pd ? void 0 : pd.default;
                    break;
                case 'spacebar':
                    wd = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (rd = null === (qd = this.options.keypressSound) || void 0 === qd ? void 0 : qd.spacebar) && void 0 !== rd ? rd : null === (sd = this.options.keypressSound) || void 0 === sd ? void 0 : sd.default;
                    break;
                case 'delete':
                    wd = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (ud = null === (td = this.options.keypressSound) || void 0 === td ? void 0 : td.delete) && void 0 !== ud ? ud : null === (vd = this.options.keypressSound) || void 0 === vd ? void 0 : vd.default;
                    break;
                case 'plonk':
                    wd = this.options.plonkSound;
            }
            if ('string' != typeof wd)
                return;
            wd = wd.trim();
            const xd = this.options.soundsDirectory;
            null != xd && 'null' !== xd && 'none' !== wd && 'null' !== wd && fetch(Co(xd + '/' + wd)).then(od => od.arrayBuffer()).then(od => this.audioContext.decodeAudioData(od)).then(pd => {
                this.audioBuffers[od] = pd;
            });
        }
        playSound(od) {
            if (this.audioBuffers[od] || this.loadSound(od), !this.audioBuffers[od])
                return;
            const pd = this.audioContext.createBufferSource();
            pd.buffer = this.audioBuffers[od];
            const qd = this.audioContext.createGain();
            qd.gain.value = 0.5, pd.connect(qd).connect(this.audioContext.destination), pd.start();
        }
        scrollIntoView() {
            var od;
            if (!this.element)
                return;
            null === (od = this.host) || void 0 === od || od.scrollIntoView({
                block: 'nearest',
                inline: 'nearest'
            }), this.dirty && so(this, {
                interactive: !0
            });
            const pd = this.field.getBoundingClientRect();
            let qd = null;
            if (this.model.selectionIsCollapsed)
                qd = li(this.field);
            else {
                const rd = hi(this);
                if (rd.length > 0) {
                    let sd = -1 / 0,
                        td = -1 / 0;
                    for (const ud of rd)
                        ud.right > sd && (sd = ud.right), ud.top < td && (td = ud.top);
                    qd = {
                        x: sd + ud.left - this.field.scrollLeft,
                        y: td + ud.top - this.field.scrollTop,
                        height: 0
                    };
                }
            }
            if (this.host && qd) {
                const rd = this.host.getBoundingClientRect(),
                    sd = qd.y;
                let td = this.host.scrollTop;
                sd < rd.top ? td = sd - rd.top + this.host.scrollTop : sd > rd.bottom && (td = sd - rd.bottom + this.host.scrollTop + qd.height), this.host.scroll({
                    top: td,
                    left: 0
                });
            }
            if (qd) {
                const rd = qd.x - window.scrollX;
                let sd = this.field.scrollLeft;
                rd < pd.left ? sd = rd - pd.left + this.field.scrollLeft - 20 : rd > pd.right && (sd = rd - pd.right + this.field.scrollLeft + 20), this.field.scroll({
                    top: this.field.scrollTop,
                    left: sd
                });
            }
        }
        insert(od, pd) {
            if ('string' == typeof od && od.length > 0) {
                if (this.flushInlineShortcutBuffer(), (pd = null != pd ? pd : {
                        mode: 'math'
                    }).focus && this.focus(), pd.feedback && (this.options.keypressVibration && _td() && navigator.vibrate(3), this.playSound('keypress')), pd.scrollIntoView && this.scrollIntoView(), '\\\\' === od)
                    Ro(this.model);
                else if ('&' === od)
                    Io(this.model);
                else {
                    const qd = this.style;
                    qc.insert(this.mode, this.model, od, {
                        style: this.model.at(this.model.position).computedStyle,
                        ...pd
                    }), pd.resetStyle && (this.style = qd);
                }
                return this.undoManager.snapshot(), no(this), !0;
            }
            return !1;
        }
        switchMode(od, pd = '', qd = '') {
            var rd;
            if (this.mode === od || this.options.readOnly)
                return;
            if (!(null === (rd = this.host) || void 0 === rd ? void 0 : rd.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))))
                return;
            const sd = this.mode,
                {
                    model: td
                } = this;
            td.deferNotifications({
                content: Boolean(qd) || Boolean(pd),
                selection: !0,
                type: 'insertText'
            }, () => {
                var ud;
                let vd = !1;
                if (this.flushInlineShortcutBuffer(), this.smartModeSuppressed = /text|math/.test(this.mode) && /text|math/.test(od), pd && 'latex' !== od) {
                    const wd = Nt(pd, this, {
                        parseMode: od
                    });
                    td.collapseSelection('forward');
                    const xd = td.at(td.position);
                    td.position = td.offsetOf(xd.parent.addChildrenAfter(wd, xd)), vd = !0;
                }
                if (this.mode = od, 'latex' === od) {
                    let wd, xd = td.selectionIsCollapsed;
                    Zi(this, 'accept'), (null === (ud = this.virtualKeyboard) || void 0 === ud ? void 0 : ud.visible) && this.executeCommand([
                        'switchKeyboardLayer',
                        'latex-lower'
                    ]);
                    let yd = td.at(td.position);
                    if (xd)
                        wd = '\\';
                    else {
                        const zd = Ca(td.selection);
                        wd = this.model.getValue(zd, 'latex');
                        const Ad = this.model.extractAtoms(zd);
                        1 === Ad.length && Ad[0] instanceof Hb && (wd = pd, xd = !0), yd = td.at(zd[0]);
                    }
                    const zd = new Xb(wd, this);
                    yd.parent.addChildAfter(zd, yd), xd ? td.position = td.offsetOf(zd.lastChild) : td.setSelection(td.offsetOf(zd.firstChild), td.offsetOf(zd.lastChild));
                } else
                    Wi(td).forEach(od => {
                        od.isError = !1;
                    });
                if (qd) {
                    const wd = Nt(qd, this, {
                        parseMode: sd
                    });
                    td.collapseSelection('forward');
                    const xd = td.at(td.position);
                    td.position = td.offsetOf(xd.parent.addChildrenAfter(wd, xd)), vd = !0;
                }
                return no(this), vd;
            }), this.mode = od;
        }
        hasFocus() {
            return _sd() && this.keyboardDelegate.hasFocus();
        }
        focus(od) {
            var pd;
            this.keyboardDelegate.focus(), this.model.announce('line'), (null === (pd = null == od ? void 0 : od.scrollIntoView) || void 0 === pd || pd) && this.scrollIntoView();
        }
        blur() {
            this.keyboardDelegate.blur();
        }
        select() {
            this.model.selection = {
                ranges: [
                    [
                        0,
                        this.model.lastOffset
                    ]
                ]
            };
        }
        applyStyle(od, pd = {}) {
            var qd, rd;
            const _sd = {
                operation: 'set',
                suppressChangeNotifications: !1
            };
            zo(pd) ? _sd.range = pd : (_sd.range = pd.range, _sd.suppressChangeNotifications = null !== (qd = pd.suppressChangeNotifications) && void 0 !== qd && qd);
            const td = Jr(this, od),
                ud = null !== (rd = _sd.operation) && void 0 !== rd ? rd : 'set';
            this.model.deferNotifications({
                content: !_sd.suppressChangeNotifications,
                type: 'insertText'
            }, () => {
                void 0 === _sd.range ? this.model.selection.ranges.forEach(od => Uo(this.model, od, td, {
                    operation: ud
                })) : Uo(this.model, _sd.range, td, {
                    operation: ud
                });
            }), no(this);
        }
        getCaretPoint() {
            const od = li(this.field);
            return od ? {
                x: od.x,
                y: od.y
            } : null;
        }
        setCaretPoint(od, pd) {
            const qd = tn(this, od, pd, {
                bias: 0
            });
            if (qd < 0)
                return !1;
            const rd = this.model.position;
            return this.model.position = qd, this.model.announce('move', rd), no(this), !0;
        }
        getPlaceholderField(od) {
            var pd;
            return null === (pd = this.placeholders.get(od)) || void 0 === pd ? void 0 : pd.field;
        }
        attachNestedMathfield() {
            let od = !1;
            const pd = this.field.getBoundingClientRect();
            this.placeholders.forEach((b, _rd) => {
                var qd, rd;
                const sd = this.field.querySelector(`[data-placeholder-id=${ _rd }]`);
                if (!sd)
                    return;
                const _td = sd.getBoundingClientRect(),
                    ud = _td.left - pd.left + (null !== (qd = this.element.offsetLeft) && void 0 !== qd ? qd : 0);
                (!b.field.style.left || Math.abs(ud - parseFloat(b.field.style.left)) >= 1) && (od = !0, b.field.style.left = `${ ud }px`);
                const vd = _td.top - pd.top + (null !== (rd = this.element.offsetTop) && void 0 !== rd ? rd : 0);
                (!b.field.style.top || Math.abs(vd - parseFloat(b.field.style.top)) >= 1) && (od = !0, b.field.style.top = `${ vd }px`);
            }), od && no(this);
        }
        canUndo() {
            return this.undoManager.canUndo();
        }
        canRedo() {
            return this.undoManager.canRedo();
        }
        popUndoStack() {
            this.undoManager.pop();
        }
        snapshot() {
            var od, pd;
            this.undoManager.snapshot() && (null === (od = this.virtualKeyboard) || void 0 === od || od.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (pd = this.host) || void 0 === pd || pd.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        snapshotAndCoalesce() {
            var od, pd;
            this.undoManager.snapshotAndCoalesce() && (null === (od = this.virtualKeyboard) || void 0 === od || od.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (pd = this.host) || void 0 === pd || pd.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        undo() {
            var od, pd;
            this.undoManager.undo() && (null === (od = this.virtualKeyboard) || void 0 === od || od.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (pd = this.host) || void 0 === pd || pd.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        redo() {
            var od, pd;
            this.undoManager.redo() && (null === (od = this.virtualKeyboard) || void 0 === od || od.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (pd = this.host) || void 0 === pd || pd.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        resetUndo() {
            var od;
            null === (od = this.undoManager) || void 0 === od || od.reset();
        }
        _onSelectionDidChange() {
            var od, pd, qd;
            this.keyboardDelegate.setValue(this.model.getValue(this.model.selection, 'latex-expanded'));
            const _rd = this.model.getAtoms(this.model.selection);
            if (1 === _rd.length && 'placeholder' === _rd[0].type) {
                const sd = _rd[0];
                this.model.mathfield.placeholders.has(sd.placeholderId) && (null === (od = this.model.mathfield.placeholders.get(sd.placeholderId)) || void 0 === od || od.field.focus());
            } {
                const sd = this.model.at(this.model.position),
                    td = null !== (pd = sd.mode) && void 0 !== pd ? pd : wo(this.options);
                this.mode !== td && ('latex' === this.mode ? (Zi(this, 'accept', {
                    mode: td
                }), this.model.position = this.model.offsetOf(sd)) : this.switchMode(td));
            }
            null === (qd = this.host) || void 0 === qd || qd.dispatchEvent(new Event('selection-change', {
                bubbles: !0,
                composed: !0
            }));
        }
        onFocus() {
            var od, pd, qd;
            !this.focusBlurInProgress && this.blurred && (this.focusBlurInProgress = !0, this.blurred = !1, this.keyboardDelegate.focus(), null === (od = this.virtualKeyboard) || void 0 === od || od.setOptions(this.options), null === (pd = this.virtualKeyboard) || void 0 === pd || pd.enable(), 'onfocus' === this.options.virtualKeyboardMode && this.executeCommand('showVirtualKeyboard'), ao(this), so(this, {
                interactive: !0
            }), null === (qd = this.host) || void 0 === qd || qd.dispatchEvent(new Event('focus', {
                bubbles: !1,
                composed: !0
            })), this.valueOnFocus = this.model.getValue(), this.focusBlurInProgress = !1);
        }
        onBlur() {
            var od, pd;
            this.focusBlurInProgress || this.blurred || (this.focusBlurInProgress = !0, this.blurred = !0, this.ariaLiveText.textContent = '', Zi(this, 'accept'), this.model.getValue() !== this.valueOnFocus && this.executeCommand('commit'), /onfocus|manual/.test(this.options.virtualKeyboardMode) && !_wd().sharedVirtualKeyboard && this.executeCommand('hideVirtualKeyboard'), null === (od = this.virtualKeyboard) || void 0 === od || od.disable(), null === (pd = this.host) || void 0 === pd || pd.dispatchEvent(new Event('blur', {
                bubbles: !1,
                composed: !0
            })), no(this), this.focusBlurInProgress = !1);
        }
        onCompositionStart(od) {
            this.model.deleteAtoms(Ca(this.model.selection)), requestAnimationFrame(() => {
                so(this);
                const pd = li(this.field);
                pd && this.keyboardDelegate.moveTo(pd.x, pd.y);
            });
        }
        onCompositionUpdate(od) {
            ! function(pd, qd) {
                const rd = pd.at(pd.position);
                if ('composition' === rd.type)
                    rd.value = qd;
                else {
                    const {
                        caret: sd
                    } = rd;
                    rd.caret = '';
                    const td = new Ob(qd, pd.mathfield, {
                        mode: rd.mode
                    });
                    td.caret = sd, rd.parent.addChildAfter(td, rd), pd.position += 1;
                }
            }(this.model, od), no(this);
        }
        onCompositionEnd(od) {
            ! function(pd) {
                const qd = pd.at(pd.position);
                'composition' === qd.type && (qd.parent.removeChild(qd), pd.position -= 1);
            }(this.model), Hr(this, od, {
                simulateKeystroke: !0
            });
        }
        onResize() {
            ao(this);
        }
        onWheel(od) {
            const pd = 5 * od.deltaX;
            if (!Number.isFinite(pd) || 0 === pd)
                return;
            const qd = this.field;
            pd < 0 && 0 === qd.scrollLeft || pd > 0 && qd.offsetWidth + qd.scrollLeft >= qd.scrollWidth || (qd.scrollBy({
                top: 0,
                left: pd
            }), od.preventDefault(), od.stopPropagation());
        }
        getHTMLElement(od) {
            let pd = od;
            for (; !pd.id && pd.hasChildren;)
                pd = od.children[0];
            if (pd.id)
                return this.element.querySelector(`[data-atom-id="${ pd.id }"]`);
            throw new TypeError('Could not get an ID from atom');
        }
        constructor(od, pd) {
            var qd, rd, sd;
            this.focusBlurInProgress = !1, this.stylesheets = [], this.audioBuffers = {}, this.options = go({
                ...xo(),
                registers: ha(this)
            }, pd.readOnly ? {
                ...pd,
                virtualKeyboardMode: 'off'
            } : {
                plonkSound: 'plonk.wav',
                keypressSound: {
                    spacebar: 'keypress-spacebar.wav',
                    return: 'keypress-return.wav',
                    delete: 'keypress-delete.wav',
                    default: 'keypress-standard.wav'
                },
                ...pd
            }), 'auto' === this.options.virtualKeyboardMode && (this.options.virtualKeyboardMode = _Dd() ? 'onfocus' : 'off'), void 0 !== this.options.computeEngine && (this._computeEngine = pd.computeEngine), pd.eventSink && (this.host = pd.eventSink), this.placeholders = new Map(), this.element = od, od.mathfield = this;
            let td = null !== (qd = pd.value) && void 0 !== qd ? qd : this.element.textContent;
            td && (td = td.trim()), null !== this.options.fontsDirectory && Do(this.options.fontsDirectory), ld || (ld = Si(Fc).toString(36)), this.stylesheets.push(Mi(od, Fc, ld)), md || (md = Si(Nc).toString(36)), this.stylesheets.push(Mi(od, Nc, md));
            let ud = '<span class=ML__textarea>';
            if (_Dd() ? ud += '<span class=ML__textarea__textarea tabindex=-1 role=textbox></span>' : ud += `<textarea class=ML__textarea__textarea autocapitalize=off autocomplete=off autocorrect=off spellcheck=false inputmode=none aria-hidden="true" tabindex="${ null !== (rd = od.tabIndex) && void 0 !== rd ? rd : 0 }"></textarea>`, ud += '</span>', ud += '<span part="container" class="ML__container"><span part="content" class="ML__content"></span>', ud += `<div part='virtual-keyboard-toggle' class="ML__virtual-keyboard-toggle" role="button" data-ML__tooltip="${ _Gd('tooltip.toggle virtual keyboard') }">`, ud += null !== (sd = this.options.virtualKeyboardToggleGlyph) && void 0 !== sd ? sd : Kc, ud += '</div>', ud += '<div class=\'ML__placeholdercontainer\'></div>', ud += '</span>', ud += '<div class="ML__sr-only"><span aria-role="status" aria-live="assertive" aria-atomic="true"></span><span></span></div>', this.element.innerHTML = this.options.createHTML(ud), !this.element.children)
                return;
            let vd = 0;
            const wd = this.element.children[vd++].firstElementChild;
            this.field = this.element.children[vd].children[0], vd++, this.virtualKeyboardToggle = this.element.querySelector('.ML__virtual-keyboard-toggle'), this.ariaLiveText = this.element.children[vd].children[0], this.accessibleNode = this.element.children[vd++].children[1], this.keystrokeCaptionVisible = !1, this.popoverVisible = !1, this.suggestionIndex = 0, this.inlineShortcutBuffer = [], this.inlineShortcutBufferFlushTimer = 0, this.mode = wo(this.options), this.smartModeSuppressed = !1, this.style = {}, this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), this.options.readOnly ? this.element.classList.add('ML__isReadOnly') : this.element.classList.remove('ML__isReadOnly'), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.element.querySelector('.ML__content').addEventListener('click', od => od.stopImmediatePropagation(), {
                capture: !1
            }), this.field.addEventListener('wheel', this, {
                passive: !1
            }), hr(od => this.executeCommand(od), this.virtualKeyboardToggle, {
                default: 'toggleVirtualKeyboard',
                alt: 'toggleVirtualKeyboardAlt',
                shift: 'toggleVirtualKeyboardShift'
            }), this.blurred = !0, ii(this.element, 'focus', this), ii(this.element, 'blur', this), this.keyboardDelegate = function(xd, yd, zd) {
                let Ad, Bd = null,
                    Cd = null,
                    _Dd = !1,
                    Ed = !1,
                    Fd = !1;

                function Gd(Hd) {
                    clearTimeout(Ad), Ad = setTimeout(() => {
                        clearTimeout(Ad), Hd();
                    });
                }

                function Gd() {
                    if (xd.selectionStart !== xd.selectionEnd)
                        return;
                    const Hd = xd.value;
                    xd.value = '', Hd.length > 0 && zd.typedText(Hd);
                }
                const _Gd = xd;
                return _Gd.addEventListener('keydown', yd => {
                    _Dd || 'Process' === yd.key || 'CapsLock' === yd.code || /(Control|Meta|Alt|Shift)(Left|Right)/.test(yd.code) ? Bd = null : (Bd = yd, Cd = null, zd.keystroke(lr(yd), yd) ? 'textarea' !== xd.tagName.toLowerCase() && (1 === yd.key.length && zd.typedText(yd.key), yd.preventDefault()) : (Bd = null, xd.value = ''));
                }, !0), _Gd.addEventListener('keypress', xd => {
                    _Dd || (Bd && Cd && zd.keystroke(lr(Bd), Bd), Cd = xd, vd(wd));
                }, !0), _Gd.addEventListener('keyup', () => {
                    _Dd || Bd && !Cd && wd();
                }, !0), _Gd.addEventListener('paste', yd => {
                    xd.focus(), xd.value = '', zd.paste(yd) || yd.preventDefault(), yd.stopImmediatePropagation();
                }, !0), _Gd.addEventListener('cut', xd => zd.cut(xd), !0), _Gd.addEventListener('copy', xd => zd.copy(xd), !0), _Gd.addEventListener('blur', Ad => {
                    var Hd, Id, Jd;
                    if ((null === (Id = null === (Hd = Ad.relatedTarget) || void 0 === Hd ? void 0 : Hd._mathfield) || void 0 === Id ? void 0 : Id.element) === yd)
                        return xd.focus(), Ad.preventDefault(), void Ad.stopPropagation();
                    const Kd = null === (Jd = Tc.scrim) || void 0 === Jd ? void 0 : Jd.state;
                    return 'open' === Kd || 'opening' === Kd || Ad.relatedTarget === Ad.target.getRootNode().host ? (Ad.preventDefault(), void Ad.stopPropagation()) : void(Fd || Ed || (Fd = !0, Bd = null, Cd = null, zd.blur && zd.blur(), Fd = !1, Ad.stopPropagation()));
                }, !0), _Gd.addEventListener('focus', yd => {
                    Fd || Ed || (Ed = !0, zd.focus && zd.focus(), dr() === xd && 'function' == typeof xd.select && xd.select(), Ed = !1, yd.stopPropagation());
                }, !0), _Gd.addEventListener('compositionstart', yd => {
                    _Dd = !0, xd.value = '', zd.compositionStart && zd.compositionStart(yd.data);
                }, !0), _Gd.addEventListener('compositionupdate', xd => {
                    _Dd && zd.compositionUpdate && zd.compositionUpdate(xd.data);
                }, !0), _Gd.addEventListener('compositionend', yd => {
                    xd.value = '', _Dd && (_Dd = !1, zd.compositionEnd && zd.compositionEnd(yd.data));
                }, !0), _Gd.addEventListener('beforeinput', xd => {
                    xd.stopImmediatePropagation();
                }), _Gd.addEventListener('input', xd => {
                    if (!_Dd && 'insertCompositionText' !== xd.inputType) {
                        if ('insertFromPaste' === xd.inputType)
                            return xd.preventDefault(), void xd.stopPropagation();
                        vd(wd), xd.preventDefault(), xd.stopPropagation();
                    }
                }), {
                    cancelComposition: () => {
                        const Hd = zd.blur,
                            Id = zd.focus;
                        zd.blur = null, zd.focus = null, xd.blur(), xd.focus(), zd.blur = Hd, zd.focus = Id;
                    },
                    blur: () => {
                        'function' == typeof xd.blur && xd.blur();
                    },
                    focus: () => {
                        'function' == typeof xd.focus && xd.focus();
                    },
                    hasFocus: () => dr() === xd,
                    setValue: yd => {
                        yd ? (xd.value = yd, dr() === xd && 'function' == typeof xd.select && xd.select()) : (xd.value = '', xd.setAttribute('aria-label', ''));
                    },
                    setAriaLabel: yd => {
                        xd.setAttribute('aria-label', 'after: ' + yd);
                    },
                    moveTo: (yd, zd) => {
                        xd.style.top = `${ zd }px`, xd.style.left = `${ yd }px`;
                    }
                };
            }(wd, this.element, {
                typedText: od => Hr(this, od),
                cut: od => {
                    this.options.readOnly ? this.model.announce('plonk') : ji(this.model, {
                        inputType: 'deleteByCut'
                    }) && (this.snapshot(), qc.onCopy(this, od), setTimeout(() => {
                        Ho(this.model, Ca(this.model.selection), 'deleteByCut'), no(this);
                    }, 0));
                },
                copy: od => qc.onCopy(this, od),
                paste: od => {
                    let xd = !0;
                    return this.options.readOnly && (xd = !1), xd && (xd = qc.onPaste(this.model.at(this.model.position).mode, this, od)), xd || this.model.announce('plonk'), xd;
                },
                keystroke: (od, pd) => jr(this, od, pd),
                focus: () => this.onFocus(),
                blur: () => this.onBlur(),
                compositionStart: od => this.onCompositionStart(od),
                compositionUpdate: od => this.onCompositionUpdate(od),
                compositionEnd: od => this.onCompositionEnd(od)
            }), _zd() && 'PointerEvent' in window ? ii(this.field, 'pointerdown', this) : ii(this.field, 'touchstart:active mousedown', this), ii(window, 'resize', this), window.addEventListener('blur', () => {
                si(this) && this.hasFocus() && window.addEventListener('focus', od => {
                    od.target === window && si(this) && this.focus();
                }, {
                    once: !0
                });
            }, {
                capture: !0
            }), this.model = new Sc({
                mode: wo(this.options),
                macros: this.options.macros,
                removeExtraneousParentheses: this.options.removeExtraneousParentheses
            }, {
                onSelectionDidChange: od => this._onSelectionDidChange()
            }, this), this.undoManager = new Vc(this.model), td && qc.insert('math', this.model, td, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), this.undoManager.startRecording(), this.undoManager.snapshot(), this.model.setListeners({
                onSelectionDidChange: od => this._onSelectionDidChange()
            }), no(this), _zd() && document.fonts.ready.then(() => so(this));
        }
    }
    var od, pd, qd, rd;
    const sd = _zd() ? document.createElement('template') : null;
    sd && (sd.innerHTML = '<style>\n:host { display: block; position: relative; overflow: hidden auto;}\n:host([hidden]) { display: none; }\n:host([disabled]) { opacity:  .5; }\n:host(:focus), :host(:focus-within) {\n  outline: Highlight auto 1px;    /* For Firefox */\n  outline: -webkit-focus-ring-color auto 1px;\n}\n:host([readonly]), :host([read-only]) { outline: none; }\n</style>\n<div></div><slot style="display:none"></slot>');
    const td = new WeakMap();
    class _ud extends HTMLElement {
        static get optionsAttributes() {
            return {
                'default-mode': 'string',
                'fonts-directory': 'string',
                'sounds-directory': 'string',
                'horizontal-spacing-scale': 'string',
                'math-mode-space': 'string',
                'inline-shortcut-timeout': 'string',
                'keypress-vibration': 'on/off',
                'keypress-sound': 'string',
                'plonk-sound': 'string',
                'letter-shape-style': 'string',
                locale: 'string',
                'read-only': 'boolean',
                'remove-extraneous-parentheses': 'on/off',
                'smart-fence': 'on/off',
                'smart-mode': 'on/off',
                'smart-superscript': 'on/off',
                'speech-engine': 'string',
                'speech-engine-rate': 'string',
                'speech-engine-voice': 'string',
                'text-to-speech-markup': 'string',
                'text-to-speech-rules': 'string',
                'virtual-keyboard-layout': 'string',
                'virtual-keyboard-mode': 'string',
                'virtual-keyboard-theme': 'string',
                'virtual-keyboards': 'string',
                'use-shared-virtual-keyboard': 'boolean',
                'shared-virtual-keyboard-target-origin': 'string'
            };
        }
        static get observedAttributes() {
            return [
                ...Object.keys(_ud.optionsAttributes),
                'disabled',
                'readonly',
                'read-only'
            ];
        }
        onPointerDown() {
            window.addEventListener('pointerup', tb => {
                tb.target === this && this.dispatchEvent(new MouseEvent('click', {
                    altKey: tb.altKey,
                    button: tb.button,
                    buttons: tb.buttons,
                    clientX: tb.clientX,
                    clientY: tb.clientY,
                    ctrlKey: tb.ctrlKey,
                    metaKey: tb.metaKey,
                    movementX: tb.movementX,
                    movementY: tb.movementY,
                    relatedTarget: tb.relatedTarget,
                    screenX: tb.screenX,
                    screenY: tb.screenY,
                    shiftKey: tb.shiftKey
                }));
            }, {
                once: !0
            });
        }
        getPlaceholderField(vd) {
            var wd;
            return null === (wd = this._mathfield) || void 0 === wd ? void 0 : wd.getPlaceholderField(vd);
        }
        addEventListener(vd, wd, xd) {
            return super.addEventListener(vd, wd, xd);
        }
        removeEventListener(vd, wd, xd) {
            super.removeEventListener(vd, wd, xd);
        }
        get mode() {
            var vd, wd;
            return null !== (wd = null === (vd = this._mathfield) || void 0 === vd ? void 0 : vd.mode) && void 0 !== wd ? wd : 'math';
        }
        set mode(vd) {
            this._mathfield && (this._mathfield.mode = vd);
        }
        get computeEngine() {
            if (this._mathfield)
                return this._mathfield.computeEngine;
        }
        set computeEngine(vd) {
            this._mathfield && this._mathfield.setOptions({
                computeEngine: vd
            });
        }
        get expression() {
            if (this._mathfield)
                return this._mathfield.expression;
        }
        set expression(vd) {
            var wd, xd;
            if (!this._mathfield)
                return;
            const yd = null !== (xd = null === (wd = this.computeEngine) || void 0 === wd ? void 0 : wd.box(vd).latex) && void 0 !== xd ? xd : null;
            null !== yd && this._mathfield.setValue(yd);
        }
        get errors() {
            var vd, wd;
            return null !== (wd = null === (vd = this._mathfield) || void 0 === vd ? void 0 : vd.errors) && void 0 !== wd ? wd : [];
        }
        get placeholders() {
            if (!this._mathfield)
                return {};
            const vd = {};
            for (const [wd, xd] of this._mathfield.placeholders)
                vd[wd] = xd.field;
            return vd;
        }
        getOptions(vd) {
            return this._mathfield ? vo(this._mathfield.options, vd) : td.has(this) ? vo(go(xo(), td.get(this).options), vd) : null;
        }
        getOption(vd) {
            return this.getOptions([vd])[vd];
        }
        setOptions(vd) {
            if (this._mathfield)
                this._mathfield.setOptions(vd), this._mathfield.placeholders.forEach(ub => {
                    ub.field.setOptions({
                        ...vd,
                        readOnly: !1
                    });
                });
            else if (td.has(this)) {
                const wd = {
                    ...td.get(this).options,
                    ...vd
                };
                td.set(this, {
                    ...td.get(this),
                    selection: {
                        ranges: wd.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ]
                    },
                    options: wd
                });
            } else
                td.set(this, {
                    value: void 0,
                    selection: {
                        ranges: [
                            [
                                0,
                                0
                            ]
                        ]
                    },
                    options: vd
                });
            ! function(wd) {
                const xd = xo(),
                    yd = wd.getOptions();
                Object.keys(_ud.optionsAttributes).forEach(_yd => {
                    const _zd = _vd(_yd);
                    'on/off' === _ud.optionsAttributes[_yd] ? xd[_zd] !== yd[_zd] ? wd.setAttribute(_yd, yd[_zd] ? 'on' : 'off') : wd.removeAttribute(_yd) : xd[_zd] !== yd[_zd] && ('boolean' === _ud.optionsAttributes[_yd] ? yd[_zd] ? wd.setAttribute(_yd, '') : wd.removeAttribute(_yd) : 'string' != typeof yd[_zd] && 'number' != typeof yd[_zd] || wd.setAttribute(_yd, yd[_zd].toString()));
                });
            }(this);
        }
        executeCommand(vd) {
            var wd, xd;
            return null !== (xd = null === (wd = this._mathfield) || void 0 === wd ? void 0 : wd.executeCommand(vd)) && void 0 !== xd && xd;
        }
        getValue(vd, wd, xd) {
            var _yd, zd;
            if (this._mathfield)
                return this._mathfield.model.getValue(vd, wd, xd);
            if (td.has(this)) {
                let Ad, Bd, Cd;
                if (Bo(vd) ? ([Dd, Ed] = vd.ranges[0], Cd = wd) : zo(vd) ? ([Fd, Gd] = vd, Cd = wd) : To(vd) && To(wd) ? (Fd = vd, Gd = wd, Cd = xd) : (Fd = 0, Gd = -1, Cd = vd), (void 0 === Cd || 'latex' === Cd) && 0 === Fd && -1 === Gd)
                    return null !== (zd = null !== (_yd = td.get(this).value) && void 0 !== _yd ? _yd : this.textContent) && void 0 !== zd ? zd : '';
            }
            return '';
        }
        setValue(vd, wd) {
            if (this._mathfield && void 0 !== vd)
                return wd || (wd = {
                    suppressChangeNotifications: !0
                }), void this._mathfield.setValue(vd, wd);
            if (td.has(this)) {
                const xd = td.get(this).options;
                return void td.set(this, {
                    value: vd,
                    selection: {
                        ranges: xd.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ],
                        direction: 'forward'
                    },
                    options: xd
                });
            }
            const xd = _vd(this);
            td.set(this, {
                value: vd,
                selection: {
                    ranges: xd.readOnly ? [
                        [
                            0,
                            0
                        ]
                    ] : [
                        [
                            0,
                            -1
                        ]
                    ],
                    direction: 'forward'
                },
                options: xd
            });
        }
        hasFocus() {
            var vd, wd;
            return null !== (wd = null === (vd = this._mathfield) || void 0 === vd ? void 0 : vd.hasFocus()) && void 0 !== wd && wd;
        }
        get virtualKeyboardState() {
            var vd, wd;
            return null !== (wd = null === (vd = this._mathfield) || void 0 === vd ? void 0 : vd.virtualKeyboardState) && void 0 !== wd ? wd : 'hidden';
        }
        set virtualKeyboardState(vd) {
            this._mathfield && (this._mathfield.virtualKeyboardState = vd);
        }
        focus() {
            super.focus();
        }
        blur() {
            var vd;
            null === (vd = this._mathfield) || void 0 === vd || vd.blur(), super.blur();
        }
        select() {
            var vd;
            null === (vd = this._mathfield) || void 0 === vd || vd.select();
        }
        insert(vd, wd) {
            var xd, yd;
            return null !== (yd = null === (xd = this._mathfield) || void 0 === xd ? void 0 : xd.insert(vd, wd)) && void 0 !== yd && yd;
        }
        applyStyle(vd, wd) {
            var xd;
            return null === (xd = this._mathfield) || void 0 === xd ? void 0 : xd.applyStyle(vd, wd);
        }
        get caretPoint() {
            var vd, wd;
            return null !== (wd = null === (vd = this._mathfield) || void 0 === vd ? void 0 : vd.getCaretPoint()) && void 0 !== wd ? wd : null;
        }
        set caretPoint(vd) {
            var wd;
            vd && (null === (wd = this._mathfield) || void 0 === wd || wd.setCaretPoint(vd.x, vd.y));
        }
        setCaretPoint(vd, wd) {
            var xd, yd;
            return null !== (yd = null === (xd = this._mathfield) || void 0 === xd ? void 0 : xd.setCaretPoint(vd, wd)) && void 0 !== yd && yd;
        }
        offsetFromPoint(vd, wd, xd) {
            return this._mathfield ? tn(this._mathfield, vd, wd, xd) : -1;
        }
        hitboxFromOffset(vd) {
            if (!this._mathfield)
                return null;
            const wd = this._mathfield.model.at(vd);
            if (!wd)
                return null;
            const xd = pi(this._mathfield, wd);
            return xd ? new DOMRect(xd.left, xd.top, xd.right - xd.left, xd.bottom - xd.top) : null;
        }
        resetUndo() {
            var vd;
            null === (vd = this._mathfield) || void 0 === vd || vd.resetUndo();
        }
        canUndo() {
            return !!this._mathfield && this._mathfield.canUndo();
        }
        canRedo() {
            return !!this._mathfield && this._mathfield.canRedo();
        }
        connectedCallback() {
            var vd, wd, xd;
            this.hasAttribute('role') || this.setAttribute('role', 'textbox'), this.setAttribute('dir', 'ltr'), this.hasAttribute('aria-label') || this.setAttribute('aria-label', 'math input field'), this.setAttribute('contenteditable', 'true'), this.setAttribute('aria-multiline', 'false'), this.hasAttribute('tabindex') || this.setAttribute('tabindex', '0');
            const yd = this.shadowRoot.querySelector('slot:not([name])');
            try {
                this._style = yd.assignedElements().filter(vd => 'style' === vd.tagName.toLowerCase()).map(vd => vd.textContent).join('');
            } catch (vd) {}
            if (this._style) {
                const zd = document.createElement('style');
                zd.textContent = this._style, this.shadowRoot.appendChild(zd);
            }
            try {
                const zd = yd.assignedElements().filter(zd => 'script' === zd.tagName.toLowerCase() && 'application/json' === zd.type).map(zd => zd.textContent).join('');
                zd && this.setOptions(JSON.parse(zd));
            } catch (vd) {}
            let zd = '';
            if (zd = this.hasAttribute('value') ? null !== (vd = this.getAttribute('value')) && void 0 !== vd ? vd : '' : null !== (wd = null == yd ? void 0 : yd.assignedNodes().map(vd => 3 === vd.nodeType ? vd.textContent : '').join('').trim()) && void 0 !== wd ? wd : '', this._mathfield = new nd(this.shadowRoot.querySelector(':host > div'), {
                    ...td.has(this) ? td.get(this).options : _vd(this),
                    eventSink: this,
                    value: zd
                }), !td.has(this)) {
                this.upgradeProperty('disabled'), this.upgradeProperty('readonly');
                for (const Ad of Object.keys(_ud.optionsAttributes))
                    this.upgradeProperty(_vd(Ad));
            }
            (null === (xd = this._mathfield) || void 0 === xd ? void 0 : xd.model) ? (td.has(this) && this._mathfield.model.deferNotifications({
                content: !1,
                selection: !1
            }, () => {
                const Ad = td.get(this).value;
                void 0 !== Ad && this._mathfield.setValue(Ad), this._mathfield.model.selection = td.get(this).selection, td.delete(this);
            }), yd.addEventListener('slotchange', vd => {
                if (vd.target !== yd)
                    return;
                const Ad = yd.assignedNodes().map(vd => 3 === vd.nodeType ? vd.textContent : '').join('').trim();
                Ad !== this._slotValue && (this._mathfield ? this._mathfield.setValue(Ad) : this.value = Ad);
            }), this.dispatchEvent(new Event('mount', {
                cancelable: !1,
                bubbles: !0,
                composed: !0
            }))) : this._mathfield = null;
        }
        disconnectedCallback() {
            if (this.dispatchEvent(new Event('unmount', {
                    cancelable: !1,
                    bubbles: !0,
                    composed: !0
                })), !this._mathfield)
                return;
            const vd = vo(this._mathfield.options, Object.keys(_ud.optionsAttributes).map(vd => _vd(vd)));
            td.set(this, {
                value: this._mathfield.getValue(),
                selection: this._mathfield.model.selection,
                options: vd
            }), this._mathfield.dispose(), this._mathfield = null;
        }
        upgradeProperty(vd) {
            if (this.hasOwnProperty(vd)) {
                const wd = this[vd];
                delete this[vd], 'readonly' !== vd && 'read-only' !== vd || (vd = 'readOnly'), this[vd] = wd;
            }
        }
        attributeChangedCallback(vd, wd, xd) {
            if (wd === xd)
                return;
            const yd = null !== xd;
            switch (vd) {
                case 'disabled':
                    this.disabled = yd;
                    break;
                case 'read-only':
                case 'readonly':
                    this.readOnly = yd;
            }
        }
        get readonly() {
            return this.hasAttribute('readonly') || this.hasAttribute('read-only');
        }
        set readonly(vd) {
            const wd = Boolean(vd);
            wd ? (this.setAttribute('readonly', ''), this.setAttribute('disabled', ''), this.setAttribute('aria-readonly', 'true')) : (this.removeAttribute('readonly'), this.removeAttribute('read-only'), this.removeAttribute('disabled'), this.removeAttribute('aria-readonly')), this.setOptions({
                readOnly: wd
            });
        }
        get disabled() {
            return this.hasAttribute('disabled');
        }
        set disabled(vd) {
            const wd = Boolean(vd);
            wd ? this.setAttribute('disabled', '') : this.removeAttribute('disabled'), this.setAttribute('aria-disabled', wd ? 'true' : 'false'), this.setOptions({
                readOnly: wd
            });
        }
        get value() {
            return this.getValue();
        }
        set value(vd) {
            this.setValue(vd);
        }
        get defaultMode() {
            return this.getOption('defaultMode');
        }
        set defaultMode(vd) {
            this.setOptions({
                defaultMode: vd
            });
        }
        get fontsDirectory() {
            return this.getOption('fontsDirectory');
        }
        set fontsDirectory(vd) {
            this.setOptions({
                fontsDirectory: vd
            });
        }
        get mathModeSpace() {
            return this.getOption('mathModeSpace');
        }
        set mathModeSpace(vd) {
            this.setOptions({
                mathModeSpace: vd
            });
        }
        get inlineShortcutTimeout() {
            return this.getOption('inlineShortcutTimeout');
        }
        set inlineShortcutTimeout(vd) {
            this.setOptions({
                inlineShortcutTimeout: vd
            });
        }
        get keypressVibration() {
            return this.getOption('keypressVibration');
        }
        set keypressVibration(vd) {
            this.setOptions({
                keypressVibration: vd
            });
        }
        get keypressSound() {
            return this.getOption('keypressSound');
        }
        set keypressSound(vd) {
            this.setOptions({
                keypressSound: vd
            });
        }
        get plonkSound() {
            var vd;
            return null !== (vd = this.getOption('plonkSound')) && void 0 !== vd ? vd : null;
        }
        set plonkSound(vd) {
            this.setOptions({
                plonkSound: vd
            });
        }
        get letterShapeStyle() {
            return this.getOption('letterShapeStyle');
        }
        set letterShapeStyle(vd) {
            this.setOptions({
                letterShapeStyle: vd
            });
        }
        get locale() {
            return this.getOption('locale');
        }
        set locale(vd) {
            this.setOptions({
                locale: vd
            });
        }
        get readOnly() {
            return this.getOption('readOnly');
        }
        set readOnly(vd) {
            this.setOptions({
                readOnly: vd
            });
        }
        get removeExtraneousParentheses() {
            return this.getOption('removeExtraneousParentheses');
        }
        set removeExtraneousParentheses(vd) {
            this.setOptions({
                removeExtraneousParentheses: vd
            });
        }
        get smartFence() {
            return this.getOption('smartFence');
        }
        set smartFence(vd) {
            this.setOptions({
                smartFence: vd
            });
        }
        get smartMode() {
            return this.getOption('smartMode');
        }
        set smartMode(vd) {
            this.setOptions({
                smartMode: vd
            });
        }
        get smartSuperscript() {
            return this.getOption('smartSuperscript');
        }
        set smartSuperscript(vd) {
            this.setOptions({
                smartSuperscript: vd
            });
        }
        get speechEngine() {
            return this.getOption('speechEngine');
        }
        set speechEngine(vd) {
            this.setOptions({
                speechEngine: vd
            });
        }
        get speechEngineRate() {
            return this.getOption('speechEngineRate');
        }
        set speechEngineRate(vd) {
            this.setOptions({
                speechEngineRate: vd
            });
        }
        get speechEngineVoice() {
            return this.getOption('speechEngineVoice');
        }
        set speechEngineVoice(vd) {
            this.setOptions({
                speechEngineVoice: vd
            });
        }
        get textToSpeechMarkup() {
            return this.getOption('textToSpeechMarkup');
        }
        set textToSpeechMarkup(vd) {
            this.setOptions({
                textToSpeechMarkup: vd
            });
        }
        get textToSpeechRules() {
            return this.getOption('textToSpeechRules');
        }
        set textToSpeechRule(vd) {
            this.setOptions({
                textToSpeechRules: vd
            });
        }
        get virtualKeyboardLayout() {
            return this.getOption('virtualKeyboardLayout');
        }
        set virtualKeyboardLayout(vd) {
            this.setOptions({
                virtualKeyboardLayout: vd
            });
        }
        get virtualKeyboardMode() {
            return this.getOption('virtualKeyboardMode');
        }
        set virtualKeyboardMode(vd) {
            this.setOptions({
                virtualKeyboardMode: vd
            });
        }
        get virtualKeyboardTheme() {
            return this.getOption('virtualKeyboardTheme');
        }
        set virtualKeyboardTheme(vd) {
            this.setOptions({
                virtualKeyboardTheme: vd
            });
        }
        get virtualKeyboards() {
            return this.getOption('virtualKeyboards');
        }
        set virtualKeyboards(vd) {
            this.setOptions({
                virtualKeyboards: vd
            });
        }
        get useSharedVirtualKeyboard() {
            return this.getOption('useSharedVirtualKeyboard');
        }
        set useSharedVirtualKeyboard(vd) {
            this.setOptions({
                useSharedVirtualKeyboard: vd
            });
        }
        get sharedVirtualKeyboardTargetOrigin() {
            return this.getOption('sharedVirtualKeyboardTargetOrigin');
        }
        set sharedVirtualKeyboardTargetOrigin(vd) {
            this.setOptions({
                sharedVirtualKeyboardTargetOrigin: vd
            });
        }
        get selection() {
            return this._mathfield ? this._mathfield.model.selection : td.has(this) ? td.get(this).selection : {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'forward'
            };
        }
        set selection(vd) {
            'number' == typeof vd && (vd = {
                ranges: [
                    [
                        vd,
                        vd
                    ]
                ]
            }), this._mathfield ? this._mathfield.model.selection = vd : td.has(this) ? td.set(this, {
                ...td.get(this),
                selection: vd
            }) : td.set(this, {
                value: void 0,
                selection: vd,
                options: _vd(this)
            });
        }
        get selectionIsCollapsed() {
            const vd = this.selection;
            return 1 === vd.ranges.length && vd.ranges[0][0] === vd.ranges[0][1];
        }
        get position() {
            return this._mathfield ? this._mathfield.model.position : td.has(this) ? td.get(this).selection.ranges[0][0] : 0;
        }
        set position(vd) {
            this._mathfield && (this._mathfield.model.position = vd), td.has(this) ? td.set(this, {
                ...td.get(this),
                selection: {
                    ranges: [
                        [
                            vd,
                            vd
                        ]
                    ]
                }
            }) : td.set(this, {
                value: void 0,
                selection: {
                    ranges: [
                        [
                            vd,
                            vd
                        ]
                    ]
                },
                options: _vd(this)
            });
        }
        getOffsetDepth(vd) {
            var wd, xd;
            return this._mathfield && (xd = (null === (wd = this._mathfield.model.at(vd)) || void 0 === wd ? void 0 : wd.treeDepth) - 2, 1) && void 0 !== xd ? xd : 0;
        }
        get lastOffset() {
            var vd, wd;
            return null !== (wd = null === (vd = this._mathfield) || void 0 === vd ? void 0 : vd.model.lastOffset) && void 0 !== wd ? wd : -1;
        }
        constructor(vd) {
            _Bd(), super(), this.attachShadow({
                mode: 'open'
            }), this.shadowRoot.append(sd.content.cloneNode(!0));
            const wd = this.shadowRoot.querySelector('slot:not([name])');
            this._slotValue = wd.assignedNodes().map(vd => 3 === vd.nodeType ? vd.textContent : '').join('').trim(), vd && this.setOptions(vd), this.shadowRoot.host.addEventListener('pointerdown', vd => this.onPointerDown(), !0), this.shadowRoot.host.addEventListener('focus', () => {
                var xd;
                return null === (xd = this._mathfield) || void 0 === xd ? void 0 : xd.focus();
            }, !0), this.shadowRoot.host.addEventListener('blur', () => {
                var xd;
                return null === (xd = this._mathfield) || void 0 === xd ? void 0 : xd.blur();
            }, !0);
        }
    }

    function _vd(wd) {
        return wd.toLowerCase().replace(/[^a-zA-Z\d]+(.)/g, (wd, ub) => ub.toUpperCase());
    }

    function _vd(wd) {
        const xd = {},
            yd = _ud.optionsAttributes;
        return Object.keys(yd).forEach(_zd => {
            if (wd.hasAttribute(_zd)) {
                const zd = wd.getAttribute(_zd);
                'boolean' === yd[_zd] ? xd[yn(_zd)] = !0 : 'on/off' === yd[_zd] ? xd[yn(_zd)] = 'on' === zd || 'off' !== zd && void 0 : 'number' === yd[_zd] ? xd[yn(_zd)] = Number.parseFloat(null != zd ? zd : '0') : xd[yn(_zd)] = zd;
            } else
                'boolean' === yd[_zd] && (xd[yn(_zd)] = !1);
        }), xd;
    }

    function vd(wd, xd, yd) {
        let _zd = yd,
            Ad = 0;
        const _Bd = wd.length;
        for (; _zd < xd.length;) {
            const Cd = xd[_zd];
            if (Ad <= 0 && xd.slice(_zd, _zd + _Bd) === wd)
                return _zd;
            '\\' === Cd ? _zd++ : '{' === Cd ? Ad++ : '}' === Cd && Ad--, _zd++;
        }
        return -1;
    }

    function vd(wd, xd, yd, zd, Ad = 'latex') {
        const Bd = [];
        for (const Cd of wd)
            if ('text' === Cd.type) {
                const Dd = Cd.data;
                let Ed, Fd = !0,
                    Gd = 0;
                Ed = Dd.indexOf(xd), -1 !== Ed && (Gd = Ed, Gd > 0 && Bd.push({
                    type: 'text',
                    data: Dd.slice(0, Gd)
                }), Fd = !1);
                let Hd = !1;
                for (; !Hd;) {
                    if (Fd) {
                        if (Ed = Dd.indexOf(xd, Gd), -1 === Ed) {
                            Hd = !0;
                            break;
                        }
                        Gd !== Ed && Bd.push({
                            type: 'text',
                            data: Dd.slice(Gd, Ed)
                        }), Gd = Ed;
                    } else {
                        if (Ed = gn(yd, Dd, Gd + xd.length), -1 === Ed) {
                            Hd = !0;
                            break;
                        }
                        let Id = Dd.slice(Gd + xd.length, Ed);
                        'ascii-math' === Ad && ([, Jd] = Ta(Jd, {
                            format: 'ascii-math'
                        })), Bd.push({
                            type: 'math',
                            data: Jd,
                            rawData: Dd.slice(Gd, Ed + yd.length),
                            mathstyle: zd
                        }), Gd = Ed + yd.length;
                    }
                    Fd = !Fd;
                }
                Gd < Dd.length && Bd.push({
                    type: 'text',
                    data: Dd.slice(Gd)
                });
            } else
                Bd.push(Cd);
        return Bd;
    }

    function vd(wd, xd, yd) {
        let zd = [{
            type: 'text',
            data: wd
        }];
        return (null == xd ? void 0 : xd.inline) && xd.inline.forEach(([Ad, Bd]) => {
            zd = vn(zd, Ad, Bd, 'textstyle');
        }), (null == Bd ? void 0 : Bd.display) && Bd.display.forEach(([Cd, Dd]) => {
            zd = vn(zd, Cd, Dd, 'displaystyle');
        }), (null == yd ? void 0 : yd.inline) && yd.inline.forEach(([Ed, Fd]) => {
            zd = vn(zd, Ed, Fd, 'textstyle', 'ascii-math');
        }), (null == yd ? void 0 : yd.display) && yd.display.forEach(([Gd, Hd]) => {
            zd = vn(zd, Gd, Hd, 'displaystyle', 'ascii-math');
        }), zd;
    }

    function vd(wd, xd, yd, zd) {
        var Ad;
        const Bd = function(Cd, Dd, Ed, Fd) {
                _Bd();
                try {
                    const Gd = Dd.renderToMarkup(Cd, {
                            mathstyle: Ed,
                            format: 'html'
                        }),
                        Hd = document.createElement('displaystyle' === Ed ? 'div' : 'span');
                    return Hd.setAttribute('aria-hidden', 'true'), Hd.innerHTML = Dd.createHTML ? Dd.createHTML(Gd) : Gd, Hd;
                } catch (Dd) {
                    if (Fd)
                        return document.createTextNode(Cd);
                }
                return null;
            }(wd, yd, xd || 'displaystyle', zd),
            Cd = null !== (Ad = yd.renderAccessibleContent) && void 0 !== Ad ? Ad : '';
        if (Bd && /\b(mathml|speakable-text)\b/i.test(Cd)) {
            _Bd();
            const Dd = document.createElement('span');
            if (/\bmathml\b/i.test(Cd) && yd.renderToMathML && Dd.append(function(Ed, Fd) {
                    _Bd();
                    const Gd = document.createElement('span');
                    try {
                        const Hd = '<math xmlns=\'http://www.w3.org/1998/Math/MathML\'>' + Fd.renderToMathML(Ed) + '</math>';
                        Gd.innerHTML = Fd.createHTML ? Fd.createHTML(Hd) : Hd;
                    } catch (Fd) {
                        Gd.textContent = Ed;
                    }
                    return Gd.className = 'ML__sr-only', Gd;
                }(wd, yd)), /\bspeakable-text\b/i.test(Cd) && yd.renderToSpeakableText) {
                const Ed = document.createElement('span'),
                    Fd = yd.renderToSpeakableText(wd, yd);
                Ed.innerHTML = yd.createHTML ? yd.createHTML(Fd) : Fd, Ed.className = 'ML__sr-only', Dd.append(Ed);
            }
            return Dd.append(Bd), Dd;
        }
        return Bd;
    }

    function vd(wd, xd) {
        var yd, zd, Ad;
        _Bd();
        let Bd = null;
        if ((null === (yd = xd.TeX) || void 0 === yd ? void 0 : yd.processEnvironments) && /^\s*\\begin/.test(wd)) {
            Bd = document.createDocumentFragment();
            const Cd = xn(wd, '', xd, !0);
            Cd && Bd.appendChild(Cd);
        } else {
            if (!wd.trim())
                return null;
            const Cd = kn(wd, null === (zd = xd.TeX) || void 0 === zd ? void 0 : zd.delimiters, null === (Ad = xd.asciiMath) || void 0 === Ad ? void 0 : Ad.delimiters);
            if (1 === Cd.length && 'text' === Cd[0].type)
                return null;
            Bd = document.createDocumentFragment();
            for (const Dd of Cd)
                if ('text' === Dd.type)
                    Bd.appendChild(document.createTextNode(Dd.data));
                else {
                    const Ed = xn(Dd.data, 'textstyle' === Dd.mathstyle ? 'textstyle' : 'displaystyle', xd, !0);
                    Ed && Bd.appendChild(Ed);
                }
        }
        return Bd;
    }

    function vd(wd, xd) {
        var yd, zd, Ad, _Bd, Cd, Dd, Ed, Fd, Gd, Hd, Id, Jd, Kd, Ld, Md, Nd;
        if (1 === wd.childNodes.length && 3 === wd.childNodes[0].nodeType) {
            const Od = null !== (yd = wd.childNodes[0].textContent) && void 0 !== yd ? yd : '';
            if ((null === (zd = xd.TeX) || void 0 === zd ? void 0 : zd.processEnvironments) && /^\s*\\begin/.test(Od)) {
                wd.textContent = '';
                const Pd = xn(Od, '', xd, !0);
                return void(Pd && wd.append(Pd));
            }
            const Pd = kn(Od, null === (Ad = xd.TeX) || void 0 === Ad ? void 0 : Ad.delimiters, null === (_Bd = xd.asciiMath) || void 0 === _Bd ? void 0 : _Bd.delimiters);
            if (1 === Pd.length && 'math' === Pd[0].type) {
                wd.textContent = '';
                const Qd = xn(Pd[0].data, 'textstyle' === Pd[0].mathstyle ? 'textstyle' : 'displaystyle', xd, !0);
                return void(Qd && wd.append(Qd));
            }
            if (1 === Pd.length && 'text' === Pd[0].type)
                return;
        }
        for (let Od = wd.childNodes.length - 1; Od >= 0; Od--) {
            const Pd = wd.childNodes[Od];
            if (3 === Pd.nodeType) {
                const Qd = wn(null !== (Cd = Pd.textContent) && void 0 !== Cd ? Cd : '', xd);
                Qd && (Od += Qd.childNodes.length - 1, Pd.replaceWith(Qd));
            } else if (1 === Pd.nodeType) {
                const Qd = Pd,
                    Rd = Pd.nodeName.toLowerCase();
                if ('script' === Rd) {
                    const Sd = Pd;
                    let Td;
                    if (null === (Dd = xd.processScriptTypePattern) || void 0 === Dd ? void 0 : Dd.test(Sd.type))
                        Td = null !== (Ed = Sd.textContent) && void 0 !== Ed ? Ed : '';
                    else if (null === (Fd = xd.processMathJSONScriptTypePattern) || void 0 === Fd ? void 0 : Fd.test(Sd.type))
                        try {
                            Td = null === (Gd = xd.serializeToLatex) || void 0 === Gd ? void 0 : Gd.call(xd, JSON.parse(null !== (Hd = Sd.textContent) && void 0 !== Hd ? Hd : ''));
                        } catch (wd) {}
                    if (Td) {
                        let Ud = 'displaystyle';
                        for (const Vd of Sd.type.split(';')) {
                            const [Wd, Xd] = Vd.toLowerCase().split('=');
                            'mode' === Wd.trim() && (Ud = 'display' === Xd.trim() ? 'displaystyle' : 'textstyle');
                        }
                        const Wd = xn(Td, Ud, Vd, !0);
                        Wd && Sd.parentNode.replaceChild(Wd, Sd);
                    }
                } else if (null !== (Jd = null === (Id = xd.processClassPattern) || void 0 === Id ? void 0 : Id.test(Qd.className)) && void 0 !== Jd && Jd || !(null !== (Ld = null === (Kd = xd.skipTags) || void 0 === Kd ? void 0 : Kd.includes(Rd)) && void 0 !== Ld && Ld || null !== (Nd = null === (Md = xd.ignoreClassPattern) || void 0 === Md ? void 0 : Md.test(Qd.className)) && void 0 !== Nd && Nd))
                    if (1 === wd.childNodes.length && 3 === wd.childNodes[0].nodeType) {
                        const Sd = wd.textContent;
                        wd.textContent = '';
                        const Td = xn(null != Sd ? Sd : '', 'displaystyle', xd, !0);
                        Td && wd.append(Td);
                    } else
                        vd(Qd, xd);
            }
        }
    }
    _Bd() && !(null === (od = window.customElements) || void 0 === od ? void 0 : od.get('math-field')) && (null !== (pd = globalThis[rd = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== pd || (globalThis[rd] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')].version = '0.86.0', window.MathfieldElement = _ud, null === (qd = window.customElements) || void 0 === qd || qd.define('math-field', _ud));
    const vd = {
        skipTags: [
            'math-field',
            'noscript',
            'style',
            'textarea',
            'pre',
            'code',
            'annotation',
            'annotation-xml'
        ],
        processScriptType: 'math/tex',
        processMathJSONScriptType: 'math/json',
        ignoreClass: 'tex2jax_ignore',
        processClass: 'tex2jax_process',
        renderAccessibleContent: 'mathml',
        asciiMath: {
            delimiters: {
                display: [
                    [
                        '`',
                        '`'
                    ]
                ]
            }
        },
        TeX: {
            processEnvironments: !0,
            delimiters: {
                inline: [
                    [
                        '\\(',
                        '\\)'
                    ]
                ],
                display: [
                    [
                        '$$',
                        '$$'
                    ],
                    [
                        '\\[',
                        '\\]'
                    ]
                ]
            }
        }
    };

    function wd(xd, yd) {
        var zd, Ad, _Bd, Cd;
        try {
            const Dd = {
                ...vd,
                ...yd
            };
            Dd.ignoreClassPattern = new RegExp(null !== (zd = Dd.ignoreClass) && void 0 !== zd ? zd : ''), Dd.processClassPattern = new RegExp(null !== (Ad = Dd.processClass) && void 0 !== Ad ? Ad : ''), Dd.processScriptTypePattern = new RegExp(null !== (_Bd = Dd.processScriptType) && void 0 !== _Bd ? _Bd : ''), Dd.processMathJSONScriptTypePattern = new RegExp(null !== (Cd = Dd.processMathJSONScriptType) && void 0 !== Cd ? Cd : ''), null !== Dd.fontsDirectory && Do(Dd.fontsDirectory), Mi(null, Fc, Si(Fc).toString(36)), _n(xd, Dd);
        } catch (xd) {
            Error;
        }
    }

    function wd(xd, yd, zd = 3000, Ad = '$0') {
        for (const Bd of yd)
            j[Bd] && (j[Bd].frequency = zd, j[Bd].category = xd, j[Bd].template = Ad.replace(/\$0/g, Bd)), l[Bd] && (l[Bd] = {
                ...l[Bd],
                frequency: zd,
                category: xd,
                template: Ad.replace(/\$0/g, Bd)
            });
    }

    function _wd() {
        var xd, yd;
        return null !== (xd = globalThis[yd = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== xd || (globalThis[yd] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')];
    }

    function wd(xd, yd) {
        var zd;
        (yd = null != yd ? yd : {}).mathstyle = null !== (zd = yd.mathstyle) && void 0 !== zd ? zd : 'displaystyle';
        const Ad = ma(),
            Bd = new pb('root', Ad);
        Bd.body = Nt(xd, Ad, {
            parseMode: 'math',
            mathstyle: yd.mathstyle
        });
        const Cd = Bd.render(new $({
            registers: Ad.registers,
            renderPlaceholder: () => new hb(160, {
                maxFontSize: 1
            })
        }, {
            fontSize: 5,
            letterShapeStyle: Ad.letterShapeStyle
        }, yd.mathstyle));
        return Cd ? (Ve(Cd), Fe(Cd), je(Cd, {
            classes: 'ML__mathlive'
        }).toMarkup()) : '';
    }

    function wd(xd, yd = {}) {
        return Ua(Nt(xd, ma(), {
            parseMode: 'math',
            args: () => '',
            mathstyle: 'displaystyle'
        }), yd);
    }

    function wd(xd, yd = {}) {
        return ai(Nt(xd, ma(), {
            parseMode: 'math',
            mathstyle: 'displaystyle'
        }), yd);
    }
    let wd;

    function xd(yd) {
        var zd, Ad;
        if (!wd) {
            const Bd = null === (zd = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === zd ? void 0 : zd.ComputeEngine;
            Bd && (wd = new Bd());
        }
        return null !== (Ad = null == wd ? void 0 : wd.box(yd).latex) && void 0 !== Ad ? Ad : '';
    }

    function _xd(yd, zd) {
        var Ad, Bd, Cd, Dd;
        const Ed = function(Fd) {
            if ('string' == typeof Fd && o()) {
                const Gd = document.getElementById(Fd);
                if (null === Gd)
                    throw new Error(`The element with ID "${ Fd }" could not be found.`);
                return Gd;
            }
            return 'string' == typeof Fd ? null : Fd;
        }(yd);
        if (!Ed)
            return;
        const Fd = null != zd ? zd : {};
        null !== (Ad = Fd.renderToMarkup) && void 0 !== Ad || (Fd.renderToMarkup = An), null !== (Bd = Fd.renderToMathML) && void 0 !== Bd || (Fd.renderToMathML = Dn), null !== (Cd = Fd.renderToSpeakableText) && void 0 !== Cd || (Fd.renderToSpeakableText = Tn), null !== (Dd = Fd.serializeToLatex) && void 0 !== Dd || (Fd.serializeToLatex = Bn), Mn(Ed, Fd);
    }
    Ln('Trigonometry', [
        '\\cos',
        '\\sin',
        '\\tan'
    ], 4000), Ln('Trigonometry', [
        '\\arccos',
        '\\arcsin',
        '\\arctan',
        '\\arctg',
        '\\arcctg',
        '\\arcsec',
        '\\arccsc',
        '\\arsinh',
        '\\arcosh',
        '\\artanh',
        '\\arcsech',
        '\\arccsch',
        '\\arg',
        '\\ch',
        '\\cosec',
        '\\cosh',
        '\\cot',
        '\\cotg',
        '\\coth',
        '\\csc',
        '\\ctg',
        '\\cth',
        '\\lg',
        '\\lb',
        '\\sec',
        '\\sinh',
        '\\sh',
        '\\tanh',
        '\\tg',
        '\\th'
    ], 2000), Ln('Functions', [
        '\\ln',
        '\\log',
        '\\exp',
        '\\lim'
    ], 4000), Ln('Functions', [
        '\\dim',
        '\\ker',
        '\\deg',
        '\\det',
        '\\mod',
        '\\min',
        '\\max'
    ], 3000), Ln('Functions', ['\\hom'], 1200), Ln('Decoration', ['\\rule'], 200, '$0{2em}{1em}'), Ln('Decoration', [
        '\\color',
        '\\textcolor'
    ], 200, '{$0{m0}A}{$0{m1}B}{$0{m2}C }{$0{m3}a}{$0{m4}b}{$0{m5}c}{$0{m6}8}'), Ln('Decoration', [
        '\\overline',
        '\\underline'
    ], 3000, '$0{\\placeholder{}}'), Ln('Decoration', ['\\enclose'], 1200, '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{x=0}'), Ln('Decoration', ['\\fcolorbox'], 1200, '\\fcolorbox{#cd0030}{#ffd400}{\\unicode{"2B1A}}'), Ln('Decoration', ['\\colorbox'], 1200, '\\colorbox{#fbc0bd}{\\unicode{"2B1A}}'), Ln('Decoration', [
        '\\boxed',
        '\\cancel',
        '\\bcancel',
        '\\xcancel'
    ], 1200, '$0{\\placeholder{}}'), Ln('Decoration', ['\\bbox'], 1200, '\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{"2B1A}}'), Ln('Styling', ['\\mathbb'], 4000, '$0{Don Knuth}'), Ln('Styling', [
        '\\textbf',
        '\\textup',
        '\\textit',
        '\\textrm',
        '\\textsf',
        '\\texttt',
        '\\textnormal',
        '\\textmd',
        '\\textsl',
        '\\textsc',
        '\\mathsf',
        '\\mathtt',
        '\\mathrm',
        '\\mathfrak',
        '\\mathcal',
        '\\mathscr',
        '\\mathbf',
        '\\mathmd',
        '\\mathit',
        '\\text',
        '\\mbox',
        '\\Bbb',
        '\\bold',
        '\\bm',
        '\\boldsymbol'
    ], 3000, '$0{Don Knuth}'), Ln('Styling', [
        '\\frak',
        '\\tt',
        '\\bf',
        '\\it',
        '\\rmfamily',
        '\\sffamily',
        '\\ttfamily',
        '\\class',
        '\\cssId',
        '\\htmlData',
        '\\htmlStyle'
    ], 1200, '{$0 Don Knuth}'), Ln('Styling', [
        '\\bfseries',
        '\\mdseries',
        '\\upshape',
        '\\slshape',
        '\\scshape'
    ], 1200, '\\text{$0 Don Knuth}'), Ln('Styling', [
        '\\class',
        '\\cssId'
    ], 1200, '$0{testIdentifier}{Don Knuth}'), Ln('Styling', ['\\fontseries'], 1200, '\\text{$0{b}Don Knuth}'), Ln('Styling', ['\\fontfamily'], 1200, '\\text{$0{cmtt}Don Knuth}'), Ln('Styling', ['\\fontshape'], 1200, '\\text{$0{sc}Don Knuth}'), Ln('Styling', ['\\selectfont'], 1200, '\\text{$0}'), Ln('Styling', ['\\emph'], 1200, 'Don$0{Knuth}'), Ln('Styling', ['\\em'], 1200, 'Don{$0 Knuth}'), Ln('Layout', [
        '\\mathop',
        '\\mathbin',
        '\\mathrel',
        '\\mathopen',
        '\\mathclose',
        '\\mathpunct',
        '\\mathord',
        '\\mathinner',
        '\\operatorname',
        '\\operatorname*'
    ], 1200, 'x=$0{arg}=0'), Ln('Layout', ['\\middle'], 1200, '\\left\\{x$0|x>0\\right\\}'), Ln('Layout', [
        '\\overset',
        '\\underset',
        '\\stackrel',
        '\\stackbin'
    ], 1200, '$0{arg}{x=0}'), Ln('Layout', [
        '\\rlap',
        '\\mathrlap'
    ], 1200, '$0{/}0'), Ln('Layout', [
        '\\llap',
        '\\mathllap'
    ], 1200, 'o$0{/}'), Ln('Fractions', ['\\frac'], 4000, '$0{\\placeholder{}}{\\placeholder{}}'), Ln('Fractions', [
        '\\binom',
        '\\dfrac',
        '\\tfrac',
        '\\dbinom',
        '\\tbinom',
        '\\pdiff',
        '\\cfrac'
    ], 1200, '$0{\\placeholder{}}{\\placeholder{}}'), Ln('Fractions', [
        '\\over',
        '\\atop',
        '\\choose'
    ], 1200, '\\unicode{"2B1A} $0 \\unicode{"2B1A}'), Ln('Fractions', [
        '\\overwithdelims',
        '\\atopwithdelims'
    ], 1200, '{\\unicode{"2B1A} $0{\\lbrace}{\\rbrace} \\unicode{"2B1A}}'), Ln('Extensible Operators', [
        '\\sum',
        '\\prod',
        '\\bigcap',
        '\\bigcup',
        '\\int'
    ], 4000), Ln('Extensible Operators', [
        '\\bigoplus',
        '\\smallint',
        '\\iint',
        '\\oint'
    ], 3000), Ln('Extensible Operators', [
        '\\bigwedge',
        '\\bigvee',
        '\\coprod',
        '\\bigsqcup',
        '\\bigotimes',
        '\\bigodot',
        '\\biguplus',
        '\\intop',
        '\\sqcup',
        '\\sqcap',
        '\\uplus',
        '\\wr',
        '\\Cap',
        '\\Cup',
        '\\doublecap',
        '\\doublecup',
        '\\amalg',
        '\\iiint',
        '\\oiint',
        '\\oiiint',
        '\\intclockwise',
        '\\varointclockwise',
        '\\ointctrclockwise',
        '\\intctrclockwise'
    ], 1200), Ln('Accents', ['\\vec'], 4000), Ln('Accents', [
        '\\bar',
        '\\ddot',
        '\\acute',
        '\\tilde',
        '\\check'
    ], 3000, '$0{\\placeholder{}}'), Ln('Accents', [
        '\\^',
        '\\`',
        '\\\''
    ], 1200, '$0{e}'), Ln('Accents', ['\\c'], 1200, '$0{c}'), Ln('Accents', ['\\~'], 1200, '$0{n}'), Ln('Accents', [
        '\\mathring',
        '\\hat',
        '\\dot',
        '\\breve',
        '\\grave'
    ], 1200, '$0{\\placeholder{}}'), Ln('Extensible Symbols', [
        '\\overrightarrow',
        '\\overleftarrow',
        '\\Overrightarrow',
        '\\overleftharpoon',
        '\\overrightharpoon',
        '\\overleftrightarrow',
        '\\overbrace',
        '\\overlinesegment',
        '\\overgroup',
        '\\widehat',
        '\\widecheck',
        '\\widetilde'
    ], 3000, '$0{ABC}'), Ln('Extensible Symbols', [
        '\\underrightarrow',
        '\\underleftarrow',
        '\\underleftrightarrow',
        '\\underbrace',
        '\\underlinesegment',
        '\\undergroup',
        '\\utilde'
    ], 3000, '$0{ABC}'), Ln('Sizing', [
        '\\tiny',
        '\\scriptsize',
        '\\footnotesize',
        '\\small',
        '\\normalsize',
        '\\large',
        '\\Large',
        '\\LARGE',
        '\\huge',
        '\\Huge'
    ], 1200, '$0{x=0}'), Ln('Sizing', [
        '\\big',
        '\\Big',
        '\\bigg',
        '\\Bigg'
    ], 1200, '$0($0)'), Ln('Sizing', [
        '\\bigl',
        '\\Bigl',
        '\\biggl',
        '\\Biggl'
    ], 1200, '$0('), Ln('Sizing', [
        '\\bigr',
        '\\Bigr',
        '\\biggr',
        '\\Biggr'
    ], 1200, '$0)'), Ln('Sizing', [
        '\\bigm',
        '\\Bigm',
        '\\biggm',
        '\\Biggm'
    ], 1200, '$0|'), Ln('Letterlike Symbols', [
        '\\nabla',
        '\\partial',
        '\\N',
        '\\R',
        '\\Q',
        '\\C',
        '\\Z',
        '\\exponentialE',
        '\\forall',
        '\\exists',
        '\\nexists'
    ], 4000), Ln('Letterlike Symbols', [
        '\\doubleStruckCapitalP',
        '\\P',
        '\\ell',
        '\\hbar',
        '\\hslash',
        '\\imath',
        '\\jmath',
        '\\imaginaryI',
        '\\imaginaryJ',
        '\\differentialD',
        '\\rd',
        '\\capitalDifferentialD',
        '\\doubleStruckCapitalN',
        '\\doubleStruckCapitalR',
        '\\doubleStruckCapitalQ',
        '\\doubleStruckCapitalC',
        '\\doubleStruckCapitalZ',
        '\\rD',
        '\\differencedelta',
        '\\mid',
        '@',
        '\\Re',
        '\\Im',
        '\\$',
        '\\%',
        '\\And',
        '\\degree'
    ], 3000), Ln('Letterlike Symbols', [
        '\\top',
        '\\bot',
        '\\scriptCapitalE',
        '\\scriptCapitalH',
        '\\scriptCapitalL',
        '\\gothicCapitalC',
        '\\gothicCapitalH',
        '\\gothicCapitalI',
        '\\gothicCapitalR',
        '\\Bbbk',
        '\\Finv',
        '\\Game',
        '\\wp',
        '\\eth',
        '\\mho',
        '\\pounds',
        '\\yen',
        '\\euro'
    ], 1200), Ln('Crosses', [
        '\\dagger',
        '\\dag'
    ], 4000), Ln('Crosses', [
        '\\ddag',
        '\\ddagger',
        '\\maltese',
        '\\textdagger',
        '\\textdaggerdbl'
    ], 1200), Ln('Various', [
        '\\checkmark',
        '\\diagup',
        '\\diagdown',
        '\\angle',
        '\\measuredangle',
        '\\sphericalangle',
        '\\prime',
        '\\doubleprime',
        '\\backprime',
        '\\backdoubleprime',
        '\\sharp',
        '\\flat',
        '\\natural',
        '\\&',
        '\\#',
        '\\clubsuit',
        '\\spadesuit',
        '\\diamondsuit',
        '\\heartsuit',
        '\\backslash',
        '\\infty',
        '/',
        '\\_',
        '\\/',
        '|',
        '\''
    ], 1200), Ln('Various', ['\\unicode'], 1200, '$0{"2B1A}'), Ln('Arrows', [
        '\\longrightarrow',
        '\\rightarrow',
        '\\Longrightarrow',
        '\\Rightarrow'
    ], 4000), Ln('Arrows', [
        '\\longmapsto',
        '\\mapsto',
        '\\Longleftrightarrow',
        '\\rightleftarrows',
        '\\leftarrow',
        '\\curvearrowleft',
        '\\uparrow',
        '\\downarrow',
        '\\hookrightarrow',
        '\\rightharpoonup',
        '\\rightleftharpoons'
    ], 3000), Ln('Arrows', [
        '\\Leftarrow',
        '\\longleftrightarrow',
        '\\longleftarrow',
        '\\Longleftarrow',
        '\\searrow',
        '\\nearrow',
        '\\swarrow',
        '\\nwarrow',
        '\\Uparrow',
        '\\Downarrow',
        '\\updownarrow',
        '\\Updownarrow',
        '\\hookleftarrow',
        '\\leftharpoonup',
        '\\leftharpoondown',
        '\\rightharpoondown',
        '\\leftrightarrows',
        '\\dashrightarrow',
        '\\dashleftarrow',
        '\\leftleftarrows',
        '\\Lleftarrow',
        '\\twoheadleftarrow',
        '\\leftarrowtail',
        '\\looparrowleft',
        '\\leftrightharpoons',
        '\\circlearrowleft',
        '\\Lsh',
        '\\upuparrows',
        '\\downharpoonleft',
        '\\multimap',
        '\\leftrightsquigarrow',
        '\\twoheadrightarrow',
        '\\rightarrowtail',
        '\\looparrowright',
        '\\curvearrowright',
        '\\circlearrowright',
        '\\Rsh',
        '\\downdownarrows',
        '\\upharpoonright',
        '\\downharpoonright',
        '\\rightsquigarrow',
        '\\leadsto',
        '\\Rrightarrow',
        '\\restriction'
    ], 1200), Ln('Arrows', [
        '\\upharpoonleft',
        '\\rightrightarrows'
    ], 0), Ln('Negated Arrows', [
        '\\nrightarrow',
        '\\nRightarrow',
        '\\nleftrightarrow',
        '\\nLeftrightarrow',
        '\\nleftarrow',
        '\\nLeftarrow'
    ], 1200), Ln('Extensible Symbols', [
        '\\xrightarrow',
        '\\xleftarrow',
        '\\xRightarrow',
        '\\xLeftarrow',
        '\\xleftharpoonup',
        '\\xleftharpoondown',
        '\\xrightharpoonup',
        '\\xrightharpoondown',
        '\\xlongequal',
        '\\xtwoheadleftarrow',
        '\\xtwoheadrightarrow',
        '\\xleftrightarrow',
        '\\xLeftrightarrow',
        '\\xrightleftharpoons',
        '\\xleftrightharpoons',
        '\\xhookleftarrow',
        '\\xhookrightarrow',
        '\\xmapsto',
        '\\xtofrom',
        '\\xrightleftarrows',
        '\\xrightequilibrium',
        '\\xleftequilibrium'
    ], 1200, '$0[below]{above}=0'), Ln('Negated Relations', [
        '\\nless',
        '\\nleqslant',
        '\\lneq',
        '\\lneqq',
        '\\nleqq',
        '\\unlhd',
        '\\unrhd',
        '\\lvertneqq',
        '\\lnsim',
        '\\lnapprox',
        '\\nprec',
        '\\npreceq',
        '\\precnsim',
        '\\precnapprox',
        '\\nsim',
        '\\nshortmid',
        '\\nmid',
        '\\nvdash',
        '\\nvDash',
        '\\ngtr',
        '\\ngeqslant',
        '\\ngeqq',
        '\\gneq',
        '\\gneqq',
        '\\gvertneqq',
        '\\gnsim',
        '\\nsucc',
        '\\succnsim',
        '\\ncong',
        '\\nshortparallel',
        '\\nparallel',
        '\\nVDash',
        '\\nVdash',
        '\\precneqq',
        '\\succneqq',
        '\\gnapprox',
        '\\succnapprox',
        '\\nsucceq'
    ], 1200), Ln('Hebrew', [
        '\\aleph',
        '\\beth',
        '\\daleth',
        '\\gimel'
    ], 1200), Ln('Fences', [
        '\\lbrace',
        '\\rbrace',
        '\\vert',
        '\\Vert',
        '\\{',
        '\\}',
        '(',
        ')',
        '[',
        ']'
    ], 4000), Ln('Fences', [
        '\\langle',
        '\\rangle',
        '\\lfloor',
        '\\rfloor',
        '\\lceil',
        '\\rceil',
        '\\mvert',
        '\\|',
        '\\mVert'
    ], 3000), Ln('Fences', [
        '\\lvert',
        '\\rvert',
        '\\lVert',
        '\\rVert',
        '\\lbrack',
        '\\rbrack',
        '\\ulcorner',
        '\\urcorner',
        '\\llcorner',
        '\\lrcorner',
        '\\lgroup',
        '\\rgroup',
        '\\lmoustache',
        '\\rmoustache'
    ], 1200), Ln('Relations', [
        '=',
        '\\ne',
        '\\neq',
        '<',
        '>',
        '\\leqslant',
        '\\geqslant',
        '\\approx'
    ], 4000), Ln('Relations', [
        '\\lt',
        '\\gt',
        '\\le',
        '\\ge',
        '\\leq',
        '\\geq',
        '\\gg',
        '\\cong',
        '\\equiv',
        '\\prec',
        '\\preceq',
        '\\succ',
        '\\perp',
        '\\parallel',
        '\\propto',
        '\\smile',
        '\\frown',
        '\\sim',
        '\\gtrsim'
    ], 3000), Ln('Relations', [
        '\\coloneq',
        '\\succeq',
        '\\approxeq',
        '\\thickapprox',
        '\\lessapprox',
        '\\gtrapprox',
        '\\precapprox',
        '\\succapprox',
        '\\thicksim',
        '\\succsim',
        '\\precsim',
        '\\backsim',
        '\\eqsim',
        '\\backsimeq',
        '\\simeq',
        '\\lesssim',
        '\\nleq',
        '\\ngeq',
        '\\smallsmile',
        '\\smallfrown',
        '\\bowtie',
        '\\asymp',
        '\\leqq',
        '\\eqslantless',
        '\\ll',
        '\\lll',
        '\\lessgtr',
        '\\lesseqgtr',
        '\\lesseqqgtr',
        '\\risingdotseq',
        '\\fallingdotseq',
        '\\preccurlyeq',
        '\\curlyeqprec',
        '\\vDash',
        '\\Vvdash',
        '\\bumpeq',
        '\\Bumpeq',
        '\\geqq',
        '\\eqslantgtr',
        '\\ggg',
        '\\gtrless',
        '\\gtreqless',
        '\\gtreqqless',
        '\\succcurlyeq',
        '\\curlyeqsucc',
        '\\Vdash',
        '\\shortmid',
        '\\shortparallel',
        '\\between',
        '\\pitchfork',
        '\\varpropto',
        '\\backepsilon',
        '\\llless',
        '\\gggtr',
        '\\lhd',
        '\\rhd',
        '\\Join',
        '\\doteq',
        '\\doteqdot',
        '\\Doteq',
        '\\eqcirc',
        '\\circeq',
        '\\lessdot',
        '\\gtrdot',
        '\\measeq',
        '\\eqdef',
        '\\questeq'
    ], 1200), Ln('Logic', [
        '\\leftrightarrow',
        '\\Leftrightarrow',
        '\\to'
    ], 4000), Ln('Logic', [
        '\\models',
        '\\vdash'
    ], 3000), Ln('Logic', [
        '\\therefore',
        '\\because',
        '\\implies',
        '\\gets',
        '\\dashv',
        '\\impliedby',
        '\\biconditional',
        '\\roundimplies'
    ], 1200), Ln('Operators', [
        '+',
        '-',
        '*',
        '\\cdot'
    ], 4000), Ln('Operators', ['\\sqrt'], 4000, '$0{\\placeholder{}}'), Ln('Operators', [
        '\\pm',
        '\\mp',
        '\\times',
        '\\div',
        '\\surd'
    ], 3000), Ln('Operators', [
        '\\ltimes',
        '\\rtimes',
        '\\leftthreetimes',
        '\\rightthreetimes',
        '\\intercal',
        '\\dotplus',
        '\\centerdot',
        '\\doublebarwedge',
        '\\divideontimes',
        '\\divides'
    ], 1200), Ln('Logic', [
        '\\wedge',
        '\\vee',
        '\\neg'
    ], 4000), Ln('Logic', ['\\lnot'], 3000), Ln('Logic', [
        '\\land',
        '\\lor',
        '\\barwedge',
        '\\veebar',
        '\\nor',
        '\\curlywedge',
        '\\curlyvee'
    ], 1200), Ln('Greek', [
        '\\alpha',
        '\\beta',
        '\\gamma',
        '\\delta',
        '\\epsilon',
        '\\varepsilon',
        '\\zeta',
        '\\eta',
        '\\theta',
        '\\vartheta',
        '\\iota',
        '\\kappa',
        '\\varkappa',
        '\\lambda',
        '\\mu',
        '\\nu',
        '\\xi',
        '\\pi',
        '\\varpi',
        '\\rho',
        '\\varrho',
        '\\sigma',
        '\\varsigma',
        '\\tau',
        '\\phi',
        '\\varphi',
        '\\upsilon',
        '\\chi',
        '\\psi',
        '\\omega',
        '\\Gamma',
        '\\Delta',
        '\\Theta',
        '\\Lambda',
        '\\Xi',
        '\\Pi',
        '\\Sigma',
        '\\Upsilon',
        '\\Phi',
        '\\Psi',
        '\\Omega',
        '\\digamma',
        '\\omicron'
    ], 3000), Ln('Sets', [
        '\\emptyset',
        '\\varnothing',
        '\\cap',
        '\\cup',
        '\\in',
        '\\notin',
        '\\subset',
        '\\supset',
        '\\subseteq',
        '\\supseteq',
        '\\sqsubseteq'
    ], 4000), Ln('Sets', [
        '\\setminus',
        '\\not',
        '\\ni',
        '\\sqsupseteq',
        '\\nsupseteqq',
        '\\supsetneq',
        '\\varsupsetneq',
        '\\supsetneqq',
        '\\varsupsetneqq'
    ], 3000), Ln('Sets', [
        '\\smallsetminus',
        '\\complement',
        '\\owns',
        '\\subsetneq',
        '\\varsubsetneq',
        '\\subsetneqq',
        '\\varsubsetneqq',
        '\\nsubset',
        '\\nsupset',
        '\\nsubseteq',
        '\\nsupseteq',
        '\\nsubseteqq',
        '\\subseteqq',
        '\\Subset',
        '\\sqsubset',
        '\\supseteqq',
        '\\Supset',
        '\\sqsupset'
    ], 1200), Ln('Spacing', [
        '\\space',
        '\\quad',
        '\\qquad'
    ], 3000, '\\unicode{"203A}$0\\unicode{"2039}'), Ln('Spacing', [
        '\\!',
        '\\,',
        '\\:',
        '\\;',
        '\\enskip',
        '\\enspace'
    ], 1200, '\\unicode{"203A}$0\\unicode{"2039}'), Ln('Spacing', [
        '\\hspace',
        '\\hspace*'
    ], 1200, '\\unicode{"203A}$0{1em}\\unicode{"2039}'), Ln('Punctuation', [
        '\\colon',
        '\\cdotp',
        '\\ldots',
        '\\cdots',
        '\\ddots',
        '\\vdots',
        '?',
        '!',
        ':',
        '"',
        ',',
        '.',
        ';'
    ], 3000), Ln('Punctuation', [
        '\\mathellipsis',
        '\\ldotp',
        '\\Colon'
    ], 1200), Ln('Boxes', [
        '\\square',
        '\\Box'
    ], 3000), Ln('Boxes', [
        '\\blacksquare',
        '\\boxminus',
        '\\boxplus',
        '\\boxtimes',
        '\\boxdot'
    ], 1200), Ln('Circles', [
        '\\circ',
        '\\bullet',
        '\\circleddash',
        '\\oplus',
        '\\otimes'
    ], 3000), Ln('Circles', [
        '\\bigcirc',
        '\\circledast',
        '\\ominus',
        '\\circledcirc',
        '\\oslash',
        '\\circledS',
        '\\circledR',
        '\\odot'
    ], 1200), Ln('Triangles', [
        '\\triangle',
        '\\triangleq'
    ], 3000), Ln('Triangles', [
        '\\bigtriangleup',
        '\\vartriangle',
        '\\triangledown',
        '\\bigtriangledown',
        '\\triangleleft',
        '\\vartriangleleft',
        '\\trianglelefteq',
        '\\ntriangleleft',
        '\\ntrianglelefteq',
        '\\triangleright',
        '\\vartriangleright',
        '\\trianglerighteq',
        '\\ntriangleright',
        '\\ntrianglerighteq',
        '\\blacktriangle',
        '\\blacktriangledown',
        '\\blacktriangleleft',
        '\\blacktriangleright'
    ], 1200), Ln('Shapes', [
        '\\ast',
        '\\star'
    ], 3000), Ln('Shapes', [
        '\\diamond',
        '\\Diamond',
        '\\lozenge',
        '\\blacklozenge',
        '\\bigstar'
    ], 1200);
});