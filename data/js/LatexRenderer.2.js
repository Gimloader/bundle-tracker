function a(b, c, d, e) {
    Object.defineProperty(b, c, {
        get: d,
        set: e,
        enumerable: !0,
        configurable: !0
    });
}
('undefined' != typeof globalThis ? globalThis : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : 'undefined' != typeof global ? global : {}).parcelRequire388b.register('YbZFB', function(b, c) {
    function d(e) {
        return Array.isArray(e);
    }

    function e() {
        return 'window' in globalThis && 'document' in globalThis;
    }

    function f() {
        if (!e())
            throw new Error('<math-field> is an interactive component that needs to run in a browser environment\nIf you are using nextjs, see https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr');
    }

    function g() {
        return !!e() && ('matchMedia' in globalThis ? globalThis.matchMedia('(any-pointer: coarse)').matches : 'ontouchstart' in globalThis || navigator.maxTouchPoints > 0);
    }

    function h() {
        return e() && 'function' == typeof navigator.vibrate;
    }

    function i() {
        var j, k;
        if (!e())
            return 'other';
        const l = null !== (k = null === (j = navigator.userAgentData) || void 0 === j ? void 0 : j.platform) && void 0 !== k ? k : navigator.platform;
        return /^mac/i.test(l) ? 5 === navigator.maxTouchPoints ? 'ios' : 'macos' : /^win/i.test(l) ? 'windows' : /android/i.test(navigator.userAgent) ? 'android' : /iphone|ipod|ipad/i.test(navigator.userAgent) ? 'ios' : /\bcros\b/i.test(navigator.userAgent) ? 'chromeos' : 'other';
    }

    function j() {
        if (!e())
            return !0;
        if (/firefox/i.test(navigator.userAgent)) {
            const k = navigator.userAgent.match(/firefox\/(\d+)/i);
            return !!k && parseInt(k[1]) >= 78;
        }
        if (/trident/i.test(navigator.userAgent))
            return !1;
        if (/edge/i.test(navigator.userAgent)) {
            const k = navigator.userAgent.match(/edg\/(\d+)/i);
            return !!k && parseInt(k[1]) >= 79;
        }
        return !0;
    }
    a(b.exports, 'MathfieldElement', function() {
        return _yh;
    }), a(b.exports, 'renderMathInElement', function() {
        return _Qh;
    });
    const k = {
        strings: {
            en: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symbols',
                'keyboard.tooltip.greek': 'Greek Letters',
                'keyboard.tooltip.command': 'LaTeX Command Mode',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Roman Letters',
                'tooltip.copy to clipboard': 'Copy to Clipboard',
                'tooltip.redo': 'Redo',
                'tooltip.toggle virtual keyboard': 'Toggle Virtual Keyboard',
                'tooltip.undo': 'Undo',
                'menu.insert matrix': 'Insert Matrix',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Delimiters',
                'menu.array.add row above': 'Add Row After',
                'menu.array.add row below': 'Add Row Before',
                'menu.array.add column after': 'Add Column After',
                'menu.array.add column before': 'Add Column Before',
                'menu.array.delete row': 'Delete Row',
                'menu.array.delete rows': 'Delete Selected Rows',
                'menu.array.delete column': 'Delete Column',
                'menu.array.delete columns': 'Delete Selected Columns',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Insert Table',
                'submenu.table style': 'Table Style'
            },
            ar: {
                'keyboard.tooltip.functions': 'مهام',
                'keyboard.tooltip.symbols': 'حرف او رمز',
                'keyboard.tooltip.greek': 'حروف يونانية',
                'keyboard.tooltip.command': 'حالة تلقي الأوامر اللاتك',
                'keyboard.tooltip.numeric': 'الرقمية',
                'keyboard.tooltip.roman': 'رموز الاحرف الرومانية',
                'tooltip.copy to clipboard': 'نسخ إلى الحافظة',
                'tooltip.redo': 'الإعادة',
                'tooltip.toggle virtual keyboard': 'تبديل لوحة المفاتيح الإفتراضية',
                'tooltip.undo': 'إلغاء',
                'menu.insert matrix': 'أدخل المصفوفة',
                'menu.insert vector': 'أدخل متجه',
                'submenu.array.matrix delimiters': 'محددات المصفوفة',
                'menu.array.add row above': 'أضف صفًا بعد ذلك',
                'menu.array.add row below': 'أضف الصف قبل',
                'menu.array.add column after': 'أضف العمود بعد ذلك',
                'menu.array.add column before': 'أضف العمود قبل',
                'menu.array.delete row': 'احذف صف',
                'menu.array.delete rows': 'حذف الصفوف المحددة',
                'menu.array.delete column': 'حذف العمود',
                'menu.array.delete columns': 'حذف الأعمدة المحددة',
                'submenu.array.insert separator': 'أدخل فاصل',
                'menu.insert table': 'إدراج جدول',
                'submenu.table style': 'نمط الجدول'
            },
            bg: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Гръцки букви',
                'keyboard.tooltip.command': 'Команден режим на латекс',
                'keyboard.tooltip.numeric': 'Числови',
                'keyboard.tooltip.roman': 'Римски букви',
                'tooltip.copy to clipboard': 'Копиране в клипборда',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Превключване на виртуална клавиатура',
                'tooltip.undo': 'Отмяна',
                'menu.insert matrix': 'Вмъкване на матрица',
                'menu.insert vector': 'Вмъкване на вектор',
                'submenu.array.matrix delimiters': 'Матрични разделители',
                'menu.array.add row above': 'Добавяне на ред след',
                'menu.array.add row below': 'Добавяне на ред преди',
                'menu.array.add column after': 'Добавяне на колона след',
                'menu.array.add column before': 'Добавяне на колона преди',
                'menu.array.delete row': 'Изтриване на реда',
                'menu.array.delete rows': 'Изтриване на избраните редове',
                'menu.array.delete column': 'Изтриване на колона',
                'menu.array.delete columns': 'Изтриване на избраните колони',
                'submenu.array.insert separator': 'Поставете разделител',
                'menu.insert table': 'Вмъкване на таблица',
                'submenu.table style': 'Табличен стил'
            },
            bs: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u clipboard',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj red prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši red',
                'menu.array.delete rows': 'Izbriši odabrane redove',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Ubaci tabelu',
                'submenu.table style': 'Stil tabele'
            },
            cs: {
                'keyboard.tooltip.functions': 'Funkce',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Řecké dopisy',
                'keyboard.tooltip.command': 'Příkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Číselné',
                'keyboard.tooltip.roman': 'Římské dopisy',
                'tooltip.copy to clipboard': 'Zkopírovat do schránky',
                'tooltip.redo': 'Předělat',
                'tooltip.toggle virtual keyboard': 'Přepnout virtuální klávesnici',
                'tooltip.undo': 'Vrátit',
                'menu.insert matrix': 'Vložte matici',
                'menu.insert vector': 'Vložit vektor',
                'submenu.array.matrix delimiters': 'Oddělovače matic',
                'menu.array.add row above': 'Přidat řádek za',
                'menu.array.add row below': 'Přidat řádek před',
                'menu.array.add column after': 'Přidat sloupec za',
                'menu.array.add column before': 'Přidat sloupec dříve',
                'menu.array.delete row': 'Odstranit řádek',
                'menu.array.delete rows': 'Odstranit vybrané řádky',
                'menu.array.delete column': 'Odstranit sloupec',
                'menu.array.delete columns': 'Odstranit vybrané sloupce',
                'submenu.array.insert separator': 'Vložte oddělovač',
                'menu.insert table': 'Vložit tabulku',
                'submenu.table style': 'Styl tabulky'
            },
            da: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Græske bogstaver',
                'keyboard.tooltip.command': 'LaTeX kommandotilstand',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske breve',
                'tooltip.copy to clipboard': 'Kopier til udklipsholder',
                'tooltip.redo': 'Gentag igen',
                'tooltip.toggle virtual keyboard': 'Skift virtuelt tastatur',
                'tooltip.undo': 'Fortryd',
                'menu.insert matrix': 'Indsæt matrix',
                'menu.insert vector': 'Indsæt vektor',
                'submenu.array.matrix delimiters': 'Matrixafgrænsere',
                'menu.array.add row above': 'Tilføj række efter',
                'menu.array.add row below': 'Tilføj række før',
                'menu.array.add column after': 'Tilføj kolonne efter',
                'menu.array.add column before': 'Tilføj kolonne før',
                'menu.array.delete row': 'Slet række',
                'menu.array.delete rows': 'Slet valgte rækker',
                'menu.array.delete column': 'Slet kolonne',
                'menu.array.delete columns': 'Slet valgte kolonner',
                'submenu.array.insert separator': 'Indsæt separator',
                'menu.insert table': 'Indsæt tabel',
                'submenu.table style': 'Tabelstil'
            },
            de: {
                'keyboard.tooltip.functions': 'Funktionen',
                'keyboard.tooltip.symbols': 'Symbole',
                'keyboard.tooltip.greek': 'Griechische Buchstaben',
                'keyboard.tooltip.command': 'LaTeX-Befehlsmodus',
                'keyboard.tooltip.numeric': 'Numerisch',
                'keyboard.tooltip.roman': 'Römische Buchstaben',
                'tooltip.copy to clipboard': 'In die Zwischenablage kopieren',
                'tooltip.redo': 'Wiederholen',
                'tooltip.toggle virtual keyboard': 'Virtuelle Tastatur umschalten',
                'tooltip.undo': 'Widerrufen',
                'menu.insert matrix': 'Matrix einfügen',
                'menu.insert vector': 'Vektor einfügen',
                'submenu.array.matrix delimiters': 'Matrixtrennzeichen',
                'menu.array.add row above': 'Zeile hinzufügen nach',
                'menu.array.add row below': 'Zeile hinzufügen vor',
                'menu.array.add column after': 'Spalte hinzufügen nach',
                'menu.array.add column before': 'Spalte hinzufügen vor',
                'menu.array.delete row': 'Zeile löschen',
                'menu.array.delete rows': 'Ausgewählte Zeilen löschen',
                'menu.array.delete column': 'Spalte löschen',
                'menu.array.delete columns': 'Ausgewählte Spalten löschen',
                'submenu.array.insert separator': 'Trennzeichen einfügen',
                'menu.insert table': 'Tabelle einfügen',
                'submenu.table style': 'Tabellenstil'
            },
            el: {
                'keyboard.tooltip.functions': 'συναρτήσεις',
                'keyboard.tooltip.symbols': 'σύμβολα',
                'keyboard.tooltip.greek': 'ελληνικά γράμματα',
                'keyboard.tooltip.command': 'Λειτουργία εντολών LaTeX',
                'keyboard.tooltip.numeric': 'Αριθμητικός',
                'keyboard.tooltip.roman': 'Ρωμαϊκά γράμματα',
                'tooltip.copy to clipboard': 'Αντιγραφή στο πρόχειρο',
                'tooltip.redo': 'Ξανακάνω',
                'tooltip.toggle virtual keyboard': 'Εναλλαγή εικονικού πληκτρολογίου',
                'tooltip.undo': 'Ξεκάνω',
                'menu.insert matrix': 'Εισαγωγή Matrix',
                'menu.insert vector': 'Εισαγωγή διανύσματος',
                'submenu.array.matrix delimiters': 'Οριοθέτες Matrix',
                'menu.array.add row above': 'Προσθήκη σειράς μετά',
                'menu.array.add row below': 'Προσθήκη σειράς πριν',
                'menu.array.add column after': 'Προσθήκη στήλης μετά',
                'menu.array.add column before': 'Προσθήκη στήλης πριν',
                'menu.array.delete row': 'Διαγραφή σειράς',
                'menu.array.delete rows': 'Διαγραφή επιλεγμένων σειρών',
                'menu.array.delete column': 'Διαγραφή στήλης',
                'menu.array.delete columns': 'Διαγραφή επιλεγμένων στηλών',
                'submenu.array.insert separator': 'Εισαγωγή διαχωριστικού',
                'menu.insert table': 'Εισαγωγή πίνακα',
                'submenu.table style': 'Στυλ πίνακα'
            },
            es: {
                'keyboard.tooltip.functions': 'Funciones',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras griegas',
                'keyboard.tooltip.command': 'Modo Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar al portapapeles',
                'tooltip.redo': 'Rehacer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Deshacer',
                'menu.insert matrix': 'Añadir Matriz',
                'menu.insert vector': 'Añadir vector',
                'submenu.array.matrix delimiters': 'Delimitadores de Matriz',
                'menu.array.add row above': 'Añadir Línea Antes',
                'menu.array.add row below': 'Añadir Línea Despues',
                'menu.array.add column after': 'Añadir Columna Despues',
                'menu.array.add column before': 'Añadir Columna Antes',
                'menu.array.delete row': 'Borrar Línea',
                'menu.array.delete rows': 'Borrar Líneas Seleccionadas',
                'menu.array.delete column': 'Borrar Columna',
                'menu.array.delete columns': 'Borrar Columnas Seleccionadas',
                'submenu.array.insert separator': 'Insertar un Separador',
                'menu.insert table': 'Insertar Tabla',
                'submenu.table style': 'Estilo de Tabla'
            },
            et: {
                'keyboard.tooltip.functions': 'Funktsioonid',
                'keyboard.tooltip.symbols': 'Sümbolid',
                'keyboard.tooltip.greek': 'Kreeka kirjad',
                'keyboard.tooltip.command': 'LaTeXi käsurežiim',
                'keyboard.tooltip.numeric': 'Numbriline',
                'keyboard.tooltip.roman': 'Rooma kirjad',
                'tooltip.copy to clipboard': 'Kopeerida lõikelauale',
                'tooltip.redo': 'Tee uuesti',
                'tooltip.toggle virtual keyboard': 'Lülitage sisse virtuaalne klaviatuur',
                'tooltip.undo': 'Võta tagasi',
                'menu.insert matrix': 'Sisesta maatriks',
                'menu.insert vector': 'Sisesta vektor',
                'submenu.array.matrix delimiters': 'Maatriksi eraldajad',
                'menu.array.add row above': 'Lisa rida pärast',
                'menu.array.add row below': 'Lisa rida enne',
                'menu.array.add column after': 'Lisa veerg pärast',
                'menu.array.add column before': 'Lisa veerg enne',
                'menu.array.delete row': 'Kustuta rida',
                'menu.array.delete rows': 'Kustuta valitud read',
                'menu.array.delete column': 'Kustuta veerg',
                'menu.array.delete columns': 'Kustuta valitud veerud',
                'submenu.array.insert separator': 'Sisestage eraldaja',
                'menu.insert table': 'Sisesta tabeli',
                'submenu.table style': 'Tabeli stiilis'
            },
            fa: {
                'keyboard.tooltip.functions': 'توابع',
                'keyboard.tooltip.symbols': 'نمادها',
                'keyboard.tooltip.greek': 'حروف یونانی',
                'keyboard.tooltip.command': 'حالت دستور لاتک',
                'keyboard.tooltip.numeric': 'عددی',
                'keyboard.tooltip.roman': 'حروف رومی',
                'tooltip.copy to clipboard': 'کپی به کلیپبورد',
                'tooltip.redo': 'بازگشت به بعد',
                'tooltip.toggle virtual keyboard': 'نمایش/نهفتن کیبورد مجازی',
                'tooltip.undo': 'بازگشت به قبل',
                'menu.insert matrix': 'ماتریس را وارد کنید',
                'menu.insert vector': 'درج بردار',
                'submenu.array.matrix delimiters': 'مرزهای ماتریس',
                'menu.array.add row above': 'بعد از آن ردیف اضافه کنید',
                'menu.array.add row below': 'ردیف را قبل اضافه کنید',
                'menu.array.add column after': 'اضافه کردن ستون بعد',
                'menu.array.add column before': 'ستون قبل را اضافه کنید',
                'menu.array.delete row': 'ردیف را حذف کنید',
                'menu.array.delete rows': 'ردیف های انتخاب شده را حذف کنید',
                'menu.array.delete column': 'حذف ستون',
                'menu.array.delete columns': 'ستون های انتخاب شده را حذف کنید',
                'submenu.array.insert separator': 'درج جدا کننده',
                'menu.insert table': 'قرار دادن جدول',
                'submenu.table style': 'سبک میز'
            },
            fi: {
                'keyboard.tooltip.functions': 'Toiminnot',
                'keyboard.tooltip.symbols': 'Symbolit',
                'keyboard.tooltip.greek': 'Kreikkalaiset kirjeet',
                'keyboard.tooltip.command': 'LaTeX-komentotila',
                'keyboard.tooltip.numeric': 'Numeerinen',
                'keyboard.tooltip.roman': 'Roomalaiset kirjeet',
                'tooltip.copy to clipboard': 'Kopioi leikepöydälle',
                'tooltip.redo': 'Tee uudelleen',
                'tooltip.toggle virtual keyboard': 'Vaihda virtuaalinäppäimistö',
                'tooltip.undo': 'Kumoa',
                'menu.insert matrix': 'Lisää matriisi',
                'menu.insert vector': 'Lisää vektori',
                'submenu.array.matrix delimiters': 'Matriisin erottimet',
                'menu.array.add row above': 'Lisää rivi jälkeen',
                'menu.array.add row below': 'Lisää rivi ennen',
                'menu.array.add column after': 'Lisää sarake jälkeen',
                'menu.array.add column before': 'Lisää sarake ennen',
                'menu.array.delete row': 'Poista rivi',
                'menu.array.delete rows': 'Poista valitut rivit',
                'menu.array.delete column': 'Poista sarake',
                'menu.array.delete columns': 'Poista valitut sarakkeet',
                'submenu.array.insert separator': 'Aseta erotin',
                'menu.insert table': 'Lisää taulukko',
                'submenu.table style': 'Taulukon tyyli'
            },
            fr: {
                'keyboard.tooltip.functions': 'Fonctions',
                'keyboard.tooltip.symbols': 'Symboles',
                'keyboard.tooltip.greek': 'Lettres grecques',
                'keyboard.tooltip.command': 'Mode de commandes LaTeX',
                'keyboard.tooltip.numeric': 'Numérique',
                'keyboard.tooltip.roman': 'Lettres romaines',
                'tooltip.copy to clipboard': 'Copier dans le presse-papiers',
                'tooltip.redo': 'Rétablir',
                'tooltip.toggle virtual keyboard': 'Afficher/Masquer le clavier virtuel',
                'tooltip.undo': 'Annuler',
                'menu.insert matrix': 'Insérer une Matrice',
                'menu.insert vector': 'Insérer un Vecteur',
                'submenu.array.matrix delimiters': 'Délimiteurs de la Matrice',
                'menu.array.add row above': 'Ajouter une Ligne Avant',
                'menu.array.add row below': 'Ajouter une Ligne Après',
                'menu.array.add column before': 'Ajouter une Colonne Avant',
                'menu.array.add column after': 'Ajouter une Colonne Après',
                'menu.array.delete row': 'Enlever une Ligne',
                'menu.array.delete rows': 'Enlever les Lignes Sélectionées',
                'menu.array.delete column': 'Enlever une Colone',
                'menu.array.delete columns': 'Enlever les Colonnes Sélectionées',
                'submenu.array.insert separator': 'Insérer un Séparateur',
                'menu.insert table': 'Insérer une Table',
                'submenu.table style': 'Style de la  Table'
            },
            ga: {
                'keyboard.tooltip.functions': 'Feidhmeanna',
                'keyboard.tooltip.symbols': 'Siombailí',
                'keyboard.tooltip.greek': 'Litreacha na Gréige',
                'keyboard.tooltip.command': 'Mód Ordú LaTeX',
                'keyboard.tooltip.numeric': 'Uimhriúil',
                'keyboard.tooltip.roman': 'Litreacha Rómhánacha',
                'tooltip.copy to clipboard': 'Cóipeáil chuig an Ghearrthaisce',
                'tooltip.redo': 'Athdhéan',
                'tooltip.toggle virtual keyboard': 'Méarchláir Fíorúil a Fháil',
                'tooltip.undo': 'Cealaigh',
                'menu.insert matrix': 'Cuir isteach Maitrís',
                'menu.insert vector': 'Cuir isteach Veicteoir',
                'submenu.array.matrix delimiters': 'Delimiters Maitrís',
                'menu.array.add row above': 'Cuir Rae Tar éis',
                'menu.array.add row below': 'Cuir Rae Roimh',
                'menu.array.add column after': 'Cuir Colún Tar éis',
                'menu.array.add column before': 'Cuir Colún Roimh',
                'menu.array.delete row': 'Scrios Rae',
                'menu.array.delete rows': 'Scrios Sraitheanna Roghnaithe',
                'menu.array.delete column': 'Scrios Colún',
                'menu.array.delete columns': 'Scrios Colúin Roghnaithe',
                'submenu.array.insert separator': 'Cuir Deighilteoir isteach',
                'menu.insert table': 'Ionsáigh Tábla',
                'submenu.table style': 'Stíl Tábla'
            },
            he: {
                'keyboard.tooltip.functions': 'פונקציות',
                'keyboard.tooltip.symbols': 'סמלים',
                'keyboard.tooltip.greek': 'אותיות יווניות',
                'keyboard.tooltip.command': 'מצב פקודה לטקס',
                'keyboard.tooltip.numeric': 'מספרי',
                'keyboard.tooltip.roman': 'מכתבים רומיים',
                'tooltip.copy to clipboard': 'העתק ללוח',
                'tooltip.redo': 'לַעֲשׂוֹת שׁוּב',
                'tooltip.toggle virtual keyboard': 'החלף את המקלדת הווירטואלית',
                'tooltip.undo': 'לבטל',
                'menu.insert matrix': 'הכנס מטריקס',
                'menu.insert vector': 'הכנס וקטור',
                'submenu.array.matrix delimiters': 'מפרידי מטריקס',
                'menu.array.add row above': 'הוסף שורה אחרי',
                'menu.array.add row below': 'הוסף שורה לפני',
                'menu.array.add column after': 'הוסף עמודה אחרי',
                'menu.array.add column before': 'הוסף עמודה לפני',
                'menu.array.delete row': 'מחק שורה',
                'menu.array.delete rows': 'מחק שורות שנבחרו',
                'menu.array.delete column': 'מחק עמודה',
                'menu.array.delete columns': 'מחק עמודות שנבחרו',
                'submenu.array.insert separator': 'הכנס מפריד',
                'menu.insert table': 'הכנס טבלה',
                'submenu.table style': 'טבלה סִגְנוֹן'
            },
            hr: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u međuspremnik',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj redak prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši redak',
                'menu.array.delete rows': 'Izbriši odabrane retke',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Umetni tablicu',
                'submenu.table style': 'Stil tabele'
            },
            id: {
                'keyboard.tooltip.functions': 'Fungsi',
                'keyboard.tooltip.symbols': 'Simbol',
                'keyboard.tooltip.greek': 'Huruf Yunani',
                'keyboard.tooltip.command': 'Mode Perintah LaTeX',
                'keyboard.tooltip.numeric': 'Numerik',
                'keyboard.tooltip.roman': 'Surat Romawi',
                'tooltip.copy to clipboard': 'Menyalin ke clipboard',
                'tooltip.redo': 'Mengulangi',
                'tooltip.toggle virtual keyboard': 'Alihkan Keyboard Virtual',
                'tooltip.undo': 'Membuka',
                'menu.insert matrix': 'Sisipkan Matriks',
                'menu.insert vector': 'Sisipkan Vektor',
                'submenu.array.matrix delimiters': 'Pembatas Matriks',
                'menu.array.add row above': 'Tambahkan Baris Setelah',
                'menu.array.add row below': 'Tambahkan Baris Sebelumnya',
                'menu.array.add column after': 'Tambahkan Kolom Setelah',
                'menu.array.add column before': 'Tambahkan Kolom Sebelumnya',
                'menu.array.delete row': 'Hapus Baris',
                'menu.array.delete rows': 'Hapus Baris yang Dipilih',
                'menu.array.delete column': 'Hapus Kolom',
                'menu.array.delete columns': 'Hapus Kolom yang Dipilih',
                'submenu.array.insert separator': 'Sisipkan Pemisah',
                'menu.insert table': 'Sisipkan Tabel',
                'submenu.table style': 'Gaya Tabel'
            },
            hi: {
                'keyboard.tooltip.functions': 'कार्यों',
                'keyboard.tooltip.symbols': 'प्रतीक',
                'keyboard.tooltip.greek': 'ग्रीक अक्षर',
                'keyboard.tooltip.command': 'लाटेक्स कमांड मोड',
                'keyboard.tooltip.numeric': 'संख्यात्मक',
                'keyboard.tooltip.roman': 'रोमन पत्र',
                'tooltip.copy to clipboard': 'क्लिपबोर्ड पर कॉपी करें',
                'tooltip.redo': 'फिर से करें',
                'tooltip.toggle virtual keyboard': 'वर्चुअल कीबोर्ड टॉगल करें',
                'tooltip.undo': 'पूर्ववत',
                'menu.insert matrix': 'मैट्रिक्स डालें',
                'menu.insert vector': 'वेक्टर डालें',
                'submenu.array.matrix delimiters': 'मैट्रिक्स सीमांकक',
                'menu.array.add row above': 'बाद में पंक्ति जोड़ें',
                'menu.array.add row below': 'पहले पंक्ति जोड़ें',
                'menu.array.add column after': 'बाद में कॉलम जोड़ें',
                'menu.array.add column before': 'पहले कॉलम जोड़ें',
                'menu.array.delete row': 'पंक्ति को हटाएं',
                'menu.array.delete rows': 'चयनित पंक्तियों को हटाएं',
                'menu.array.delete column': 'कॉलम हटाएं',
                'menu.array.delete columns': 'चयनित कॉलम हटाएं',
                'submenu.array.insert separator': 'विभाजक डालें',
                'menu.insert table': 'टेबल इंसर्ट करें',
                'submenu.table style': 'टेबल स्टाइल'
            },
            hu: {
                'keyboard.tooltip.functions': 'Funkciók',
                'keyboard.tooltip.symbols': 'Szimbólumok',
                'keyboard.tooltip.greek': 'Görög levelek',
                'keyboard.tooltip.command': 'LaTeX Parancs mód',
                'keyboard.tooltip.numeric': 'Numerikus',
                'keyboard.tooltip.roman': 'Római levelek',
                'tooltip.copy to clipboard': 'Másolja a vágólapra',
                'tooltip.redo': 'Újra',
                'tooltip.toggle virtual keyboard': 'Váltás a virtuális billentyűzetre',
                'tooltip.undo': 'Visszavonás',
                'menu.insert matrix': 'Helyezze be a Mátrixot',
                'menu.insert vector': 'Vektor beszúrása',
                'submenu.array.matrix delimiters': 'Mátrixhatárolók',
                'menu.array.add row above': 'Sor hozzáadása után',
                'menu.array.add row below': 'Add Add Sor előtt',
                'menu.array.add column after': 'Oszlop hozzáadása után',
                'menu.array.add column before': 'Add oszlop előtt',
                'menu.array.delete row': 'Sor törlése',
                'menu.array.delete rows': 'Kijelölt sorok törlése',
                'menu.array.delete column': 'Oszlop törlése',
                'menu.array.delete columns': 'A kijelölt oszlopok törlése',
                'submenu.array.insert separator': 'Helyezze be az elválasztót',
                'menu.insert table': 'Helyezze be a táblázatot',
                'submenu.table style': 'Táblázatos stílus'
            },
            it: {
                'keyboard.tooltip.functions': 'Funzioni',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Lettere greche',
                'keyboard.tooltip.command': 'Modalità di comando LaTeX',
                'keyboard.tooltip.numeric': 'Numerico',
                'keyboard.tooltip.roman': 'Lettere romane',
                'tooltip.copy to clipboard': 'Copia negli appunti',
                'tooltip.redo': 'Rifare',
                'tooltip.toggle virtual keyboard': 'Attiva / disattiva la tastiera virtuale',
                'tooltip.undo': 'Disfare',
                'menu.insert matrix': 'Inserisci una Matrice',
                'menu.insert vector': 'Inserisci Vettore',
                'submenu.array.matrix delimiters': 'Delimitatori di Matrice',
                'menu.array.add row above': 'Aggiungi una Riga Prima',
                'menu.array.add row below': 'Aggiungi una Riga Dopo',
                'menu.array.add column before': 'Aggiungi una Colonna Prima',
                'menu.array.add column after': 'Aggiungi una Colonna Dopo',
                'menu.array.delete row': 'Rimuovi una Riga',
                'menu.array.delete rows': 'Rimuovi le Righe Selezionate',
                'menu.array.delete column': 'Rimuovi una Colonna',
                'menu.array.delete columns': 'Rimuovi le Colonne Selezionate',
                'submenu.array.insert separator': 'Inserisci un Separatore',
                'menu.insert table': 'Inserisci Tabella',
                'submenu.table style': 'Stile tabella'
            },
            is: {
                'keyboard.tooltip.functions': 'Aðgerðir',
                'keyboard.tooltip.symbols': 'Tákn',
                'keyboard.tooltip.greek': 'Grísk bréf',
                'keyboard.tooltip.command': 'LaTeX stjórnunarstilling',
                'keyboard.tooltip.numeric': 'Tölulegt',
                'keyboard.tooltip.roman': 'Rómversk bréf',
                'tooltip.copy to clipboard': 'Afritaðu á klemmuspjald',
                'tooltip.redo': 'Endurtaka',
                'tooltip.toggle virtual keyboard': 'Skiptu um sýndarlyklaborð',
                'tooltip.undo': 'Afturkalla',
                'menu.insert matrix': 'Settu fylki inn',
                'menu.insert vector': 'Settu inn Vector',
                'submenu.array.matrix delimiters': 'Matrix afmörkun',
                'menu.array.add row above': 'Bæta við röð á eftir',
                'menu.array.add row below': 'Bæta við röð áður',
                'menu.array.add column after': 'Bæta við dálki á eftir',
                'menu.array.add column before': 'Bæta við dálki áður',
                'menu.array.delete row': 'Eyða röð',
                'menu.array.delete rows': 'Eyða völdum línum',
                'menu.array.delete column': 'Eyða dálki',
                'menu.array.delete columns': 'Eyða völdum dálkum',
                'submenu.array.insert separator': 'Settu skiljuna í',
                'menu.insert table': 'Settu inn töflu',
                'submenu.table style': 'Töflu stíl'
            },
            ja: {
                'keyboard.tooltip.functions': '関数',
                'keyboard.tooltip.symbols': 'シンボル',
                'keyboard.tooltip.greek': 'ギリシャ文字',
                'keyboard.tooltip.command': 'ラテックスコマンドモード',
                'keyboard.tooltip.numeric': '数値',
                'keyboard.tooltip.roman': 'ローマ字',
                'tooltip.copy to clipboard': 'クリップボードにコピー',
                'tooltip.redo': 'やり直し',
                'tooltip.toggle virtual keyboard': '仮想キーボードの切り替え',
                'tooltip.undo': '元に戻す',
                'menu.insert matrix': 'マトリックスを挿入',
                'menu.insert vector': 'ベクトルを挿入',
                'submenu.array.matrix delimiters': '行列区切り文字',
                'menu.array.add row above': '後に行を追加',
                'menu.array.add row below': '前に行を追加',
                'menu.array.add column after': '後に列を追加',
                'menu.array.add column before': '前に列を追加',
                'menu.array.delete row': '行を削除',
                'menu.array.delete rows': '選択した行を削除する',
                'menu.array.delete column': '列を削除',
                'menu.array.delete columns': '選択した列を削除する',
                'submenu.array.insert separator': 'セパレーターを挿入',
                'menu.insert table': 'テーブルを挿入',
                'submenu.table style': 'テーブルスタイル'
            },
            ko: {
                'keyboard.tooltip.functions': '기능',
                'keyboard.tooltip.symbols': '기호',
                'keyboard.tooltip.greek': '그리스 문자',
                'keyboard.tooltip.command': '유액 명령 모드',
                'keyboard.tooltip.numeric': '숫자',
                'keyboard.tooltip.roman': '로마 문자',
                'tooltip.copy to clipboard': '클립 보드에 복사',
                'tooltip.redo': '다시 하다',
                'tooltip.toggle virtual keyboard': '가상 키보드 전환',
                'tooltip.undo': '실행 취소',
                'menu.insert matrix': '매트릭스 삽입',
                'menu.insert vector': '벡터 삽입',
                'submenu.array.matrix delimiters': '행렬 구분 기호',
                'menu.array.add row above': '뒤에 행 추가',
                'menu.array.add row below': '앞에 행 추가',
                'menu.array.add column after': '뒤에 열 추가',
                'menu.array.add column before': '앞에 열 추가',
                'menu.array.delete row': '행 삭제',
                'menu.array.delete rows': '선택한 행 삭제',
                'menu.array.delete column': '열 삭제',
                'menu.array.delete columns': '선택한 열 삭제',
                'submenu.array.insert separator': '구분자 삽입',
                'menu.insert table': '표 삽입',
                'submenu.table style': '테이블 스타일'
            },
            lv: {
                'keyboard.tooltip.functions': 'Funkcijas',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grieķu burti',
                'keyboard.tooltip.command': 'LaTeX komandu režīms',
                'keyboard.tooltip.numeric': 'Ciparu skaitlis',
                'keyboard.tooltip.roman': 'Romiešu vēstules',
                'tooltip.copy to clipboard': 'Kopēt starpliktuvē',
                'tooltip.redo': 'Pārtaisīt',
                'tooltip.toggle virtual keyboard': 'Pārslēgt virtuālo tastatūru',
                'tooltip.undo': 'Atsaukt',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Galda stils'
            },
            lt: {
                'keyboard.tooltip.functions': 'Funkcijos',
                'keyboard.tooltip.symbols': 'Simboliai',
                'keyboard.tooltip.greek': 'Graikiškos raidės',
                'keyboard.tooltip.command': 'LaTeX komandų režimas',
                'keyboard.tooltip.numeric': 'Skaitmeninis',
                'keyboard.tooltip.roman': 'Romos laiškai',
                'tooltip.copy to clipboard': 'Nukopijuoti į iškarpinę',
                'tooltip.redo': 'Perdaryti',
                'tooltip.toggle virtual keyboard': 'Perjungti virtualiąją klaviatūrą',
                'tooltip.undo': 'Atšaukti',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Tabulas stili'
            },
            lu: {
                'keyboard.tooltip.functions': 'Funktiounen',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Griichesch Bréiwer',
                'keyboard.tooltip.command': 'LaTeX Kommando Modus',
                'keyboard.tooltip.numeric': 'Numeresch',
                'keyboard.tooltip.roman': 'Réimesch Bréiwer',
                'tooltip.copy to clipboard': 'Kopéiert op Clipboard',
                'tooltip.redo': 'Nees nei maachen',
                'tooltip.toggle virtual keyboard': 'Wiesselt Virtuell Tastatur',
                'tooltip.undo': 'Undoen',
                'menu.insert matrix': 'Matrix asetzen',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Ofgrenzer',
                'menu.array.add row above': 'Dobäizemaachen Rei No',
                'menu.array.add row below': 'Füügt Rei vir',
                'menu.array.add column after': 'Dobäizemaachen Kolonn No',
                'menu.array.add column before': 'Kolonn derbäi Virun',
                'menu.array.delete row': 'Rad läschen',
                'menu.array.delete rows': 'Läscht Ausgewielte Reien',
                'menu.array.delete column': 'Läscht Kolonn',
                'menu.array.delete columns': 'Läscht Ausgewielte Kolonnen',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Dësch anzeginn',
                'submenu.table style': 'Dësch Style'
            },
            nl: {
                'keyboard.tooltip.functions': 'Functies',
                'keyboard.tooltip.symbols': 'Symbolen',
                'keyboard.tooltip.greek': 'Griekse letters',
                'keyboard.tooltip.command': 'LaTeX commando mode',
                'keyboard.tooltip.numeric': 'Numeriek',
                'keyboard.tooltip.roman': 'Romeinse letters',
                'tooltip.copy to clipboard': 'Kopiëren naar klembord',
                'tooltip.redo': 'Opnieuw',
                'tooltip.toggle virtual keyboard': 'Schakel naar virtueel toetsenbord',
                'tooltip.undo': 'Ongedaan maken',
                'menu.insert matrix': 'Matrix invoegen',
                'menu.insert vector': 'Vector invoegen',
                'submenu.array.matrix delimiters': 'Matrixscheidingstekens',
                'menu.array.add row above': 'Rij toevoegen na',
                'menu.array.add row below': 'Rij toevoegen eerder',
                'menu.array.add column after': 'Kolom toevoegen na',
                'menu.array.add column before': 'Kolom toevoegen voor',
                'menu.array.delete row': 'Verwijder rij',
                'menu.array.delete rows': 'Geselecteerde rijen verwijderen',
                'menu.array.delete column': 'Kolom verwijderen',
                'menu.array.delete columns': 'Geselecteerde kolommen verwijderen',
                'submenu.array.insert separator': 'Scheidingsteken invoegen',
                'menu.insert table': 'Tabel invoegen',
                'submenu.table style': 'Tabelstijl'
            },
            no: {
                'keyboard.tooltip.functions': 'Funksjoner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Greske bokstaver',
                'keyboard.tooltip.command': 'LaTeX kommandomodus',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske bokstaver',
                'tooltip.copy to clipboard': 'Kopiere til utklippstavle',
                'tooltip.redo': 'Gjøre om',
                'tooltip.toggle virtual keyboard': 'Bytt virtuelt tastatur',
                'tooltip.undo': 'Angre',
                'menu.insert matrix': 'Sett inn matrise',
                'menu.insert vector': 'Sett inn vektor',
                'submenu.array.matrix delimiters': 'Matrix avgrensere',
                'menu.array.add row above': 'Legg til rad etter',
                'menu.array.add row below': 'Legg til rad før',
                'menu.array.add column after': 'Legg til kolonne etter',
                'menu.array.add column before': 'Legg til kolonne før',
                'menu.array.delete row': 'Slett rad',
                'menu.array.delete rows': 'Slett valgte rader',
                'menu.array.delete column': 'Slett kolonne',
                'menu.array.delete columns': 'Slett valgte kolonner',
                'submenu.array.insert separator': 'Sett inn skilletegn',
                'menu.insert table': 'Sett inn tabell',
                'submenu.table style': 'Tabellstil'
            },
            mk: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Грчки букви',
                'keyboard.tooltip.command': 'Режим на команда во латекс',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римски писма',
                'tooltip.copy to clipboard': 'Копирајте во клипборд',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Вклучете ја виртуелната тастатура',
                'tooltip.undo': 'Врати',
                'menu.insert matrix': 'Вметнете матрица',
                'menu.insert vector': 'Вметни вектор',
                'submenu.array.matrix delimiters': 'Разграничувачи на матрица',
                'menu.array.add row above': 'Додадете ред после',
                'menu.array.add row below': 'Додади ред пред тоа',
                'menu.array.add column after': 'Додадете колона после',
                'menu.array.add column before': 'Додадете колона пред тоа',
                'menu.array.delete row': 'Избриши го редот',
                'menu.array.delete rows': 'Избришете ги избраните редови',
                'menu.array.delete column': 'Избриши ја колоната',
                'menu.array.delete columns': 'Избриши ја колоната',
                'submenu.array.insert separator': 'Вметнете сепаратор',
                'menu.insert table': 'Вметни табела',
                'submenu.table style': 'Табела стил'
            },
            pl: {
                'keyboard.tooltip.functions': 'Funkcje',
                'keyboard.tooltip.symbols': 'Symbolika',
                'keyboard.tooltip.greek': 'Litery greckie',
                'keyboard.tooltip.command': 'Tryb poleceń LaTeX',
                'keyboard.tooltip.numeric': 'Numeryczne',
                'keyboard.tooltip.roman': 'Litery rzymskie',
                'tooltip.copy to clipboard': 'Kopiuj do Schowka',
                'tooltip.redo': 'Przywróć',
                'tooltip.toggle virtual keyboard': 'Przełącz wirtualną klawiaturę',
                'tooltip.undo': 'Cofnij',
                'menu.insert matrix': 'Wstaw macierz',
                'menu.insert vector': 'Wstaw wektor',
                'submenu.array.matrix delimiters': 'Ograniczniki macierzy',
                'menu.array.add row above': 'Dodaj wiersz po',
                'menu.array.add row below': 'Dodaj wiersz przed',
                'menu.array.add column after': 'Dodaj kolumnę po',
                'menu.array.add column before': 'Dodaj kolumnę przed',
                'menu.array.delete row': 'Usuń wiersz',
                'menu.array.delete rows': 'Usuń wybrane wiersze',
                'menu.array.delete column': 'Usuń kolumnę',
                'menu.array.delete columns': 'Usuń wybrane kolumny',
                'submenu.array.insert separator': 'Wstaw separator',
                'menu.insert table': 'Wypełnij tabelę',
                'submenu.table style': 'Styl tabelę'
            },
            pt: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras gregas',
                'keyboard.tooltip.command': 'Modo de Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar para área de transferência',
                'tooltip.redo': 'Refazer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Desfazer',
                'menu.insert matrix': 'Inserir Matriz',
                'menu.insert vector': 'Inserir vetor',
                'submenu.array.matrix delimiters': 'Delimitadores de matriz',
                'menu.array.add row above': 'Adicionar linha depois',
                'menu.array.add row below': 'Adicionar linha antes',
                'menu.array.add column after': 'Adicionar coluna depois',
                'menu.array.add column before': 'Adicionar coluna antes',
                'menu.array.delete row': 'Excluir linha',
                'menu.array.delete rows': 'Excluir linhas selecionadas',
                'menu.array.delete column': 'Apagar Coluna',
                'menu.array.delete columns': 'Excluir Colunas Selecionadas',
                'submenu.array.insert separator': 'Inserir Separador',
                'menu.insert table': 'Insira a tabela',
                'submenu.table style': 'Estilo tabela'
            },
            ro: {
                'keyboard.tooltip.functions': 'Funcții',
                'keyboard.tooltip.symbols': 'Simboluri',
                'keyboard.tooltip.greek': 'Scrisori grecești',
                'keyboard.tooltip.command': 'Modul de comandă latex',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Scrisori romane',
                'tooltip.copy to clipboard': 'Copiați în clipboard',
                'tooltip.redo': 'A reface',
                'tooltip.toggle virtual keyboard': 'Comutați tastatura virtuală',
                'tooltip.undo': 'Anula',
                'menu.insert matrix': 'Introduceți Matrix',
                'menu.insert vector': 'Inserați Vector',
                'submenu.array.matrix delimiters': 'Delimitatori de matrice',
                'menu.array.add row above': 'Adăugați rândul după',
                'menu.array.add row below': 'Adăugați rândul înainte',
                'menu.array.add column after': 'Adăugați o coloană după',
                'menu.array.add column before': 'Adăugați o coloană înainte',
                'menu.array.delete row': 'Ștergeți rândul',
                'menu.array.delete rows': 'Ștergeți rândurile selectate',
                'menu.array.delete column': 'Ștergeți coloana',
                'menu.array.delete columns': 'Ștergeți coloanele selectate',
                'submenu.array.insert separator': 'Introduceți separatorul',
                'menu.insert table': 'Introduceți tabelul',
                'submenu.table style': 'Table style'
            },
            ru: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символы',
                'keyboard.tooltip.greek': 'Греческие буквы',
                'keyboard.tooltip.command': 'Режим командной строки Латекс',
                'keyboard.tooltip.numeric': 'числовой',
                'keyboard.tooltip.roman': 'Латинские буквы',
                'tooltip.copy to clipboard': 'Скопировать в буфер обмена',
                'tooltip.redo': 'переделывать',
                'tooltip.toggle virtual keyboard': 'Переключить виртуальную клавиатуру',
                'tooltip.undo': 'расстегивать',
                'menu.insert matrix': 'Вставить матрицу',
                'menu.insert vector': 'Вставить вектор',
                'submenu.array.matrix delimiters': 'Матричные разделители',
                'menu.array.add row above': 'Добавить строку после',
                'menu.array.add row below': 'Добавить строку перед',
                'menu.array.add column after': 'Добавить столбец после',
                'menu.array.add column before': 'Добавить столбец перед',
                'menu.array.delete row': 'Удалить строку',
                'menu.array.delete rows': 'Удалить выбранные строки',
                'menu.array.delete column': 'Удалить столбец',
                'menu.array.delete columns': 'Удалить выбранные столбцы',
                'submenu.array.insert separator': 'Вставить разделитель',
                'menu.insert table': 'Вставить таблицу',
                'submenu.table style': 'Табличный стиль'
            },
            sk: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Grécke listy',
                'keyboard.tooltip.command': 'Príkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Numerické',
                'keyboard.tooltip.roman': 'Rímske listy',
                'tooltip.copy to clipboard': 'Skopírovať do schránky',
                'tooltip.redo': 'Znova',
                'tooltip.toggle virtual keyboard': 'Prepnúť virtuálnu klávesnicu',
                'tooltip.undo': 'Vrátenie späť',
                'menu.insert matrix': 'Vložte maticu',
                'menu.insert vector': 'Vložte vektor',
                'submenu.array.matrix delimiters': 'Oddeľovače matíc',
                'menu.array.add row above': 'Pridajte riadok za',
                'menu.array.add row below': 'Pridajte riadok pred',
                'menu.array.add column after': 'Pridať stĺpec za',
                'menu.array.add column before': 'Pridajte stĺpec predtým',
                'menu.array.delete row': 'Odstrániť riadok',
                'menu.array.delete rows': 'Odstrániť vybraté riadky',
                'menu.array.delete column': 'Odstrániť stĺpec',
                'menu.array.delete columns': 'Odstrániť vybraté stĺpce',
                'submenu.array.insert separator': 'Vložte oddeľovač',
                'menu.insert table': 'Vložte tabuľku',
                'submenu.table style': 'Štýl tabuľky'
            },
            sl: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grška pisma',
                'keyboard.tooltip.command': 'Ukazni način LaTeX',
                'keyboard.tooltip.numeric': 'Številsko',
                'keyboard.tooltip.roman': 'Rimska pisma',
                'tooltip.copy to clipboard': 'Kopirati v odložišče',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Preklop navidezne tipkovnice',
                'tooltip.undo': 'Razveljavi',
                'menu.insert matrix': 'Vstavi matrico',
                'menu.insert vector': 'Vstavi vektor',
                'submenu.array.matrix delimiters': 'Matrični ločevalniki',
                'menu.array.add row above': 'Dodaj vrstico po',
                'menu.array.add row below': 'Dodaj vrstico prej',
                'menu.array.add column after': 'Dodaj stolpec po',
                'menu.array.add column before': 'Dodaj stolpec prej',
                'menu.array.delete row': 'Izbriši vrstico',
                'menu.array.delete rows': 'Izbriši izbrane vrstice',
                'menu.array.delete column': 'Izbriši stolpec',
                'menu.array.delete columns': 'Izbriši izbrane stolpce',
                'submenu.array.insert separator': 'Vstavi ločilo',
                'menu.insert table': 'Vstavi tabelo',
                'submenu.table style': 'Tabela slog'
            },
            sq: {
                'keyboard.tooltip.functions': 'Funksione',
                'keyboard.tooltip.symbols': 'Simbolet',
                'keyboard.tooltip.greek': 'Letrat Greke',
                'keyboard.tooltip.command': 'Modaliteti i komandës latex',
                'keyboard.tooltip.numeric': 'Numerike',
                'keyboard.tooltip.roman': 'Letrat romake',
                'tooltip.copy to clipboard': 'Kopjoni në Clipboard',
                'tooltip.redo': 'Riparo',
                'tooltip.toggle virtual keyboard': 'Aktivizo tastierën virtuale',
                'tooltip.undo': 'Zhbëj',
                'menu.insert matrix': 'Vendosni Matricën',
                'menu.insert vector': 'Vendos vektorin',
                'submenu.array.matrix delimiters': 'Përcaktuesit e matricës',
                'menu.array.add row above': 'Shto Rreshtin Pas',
                'menu.array.add row below': 'Shto Rreshtin Para',
                'menu.array.add column after': 'Shto kolonën pas',
                'menu.array.add column before': 'Shto kolonën para',
                'menu.array.delete row': 'Fshi Rreshtin',
                'menu.array.delete rows': 'Fshi rreshtat e zgjedhur',
                'menu.array.delete column': 'Fshi kolonën',
                'menu.array.delete columns': 'Fshi kolonat e zgjedhura',
                'submenu.array.insert separator': 'Vendos Ndarësin',
                'menu.insert table': 'Vendos tabelën',
                'submenu.table style': 'Stili tabelën'
            },
            sr: {
                'keyboard.tooltip.functions': 'Функције',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Греек Леттерс',
                'keyboard.tooltip.command': 'ЛаТеКс командни режим',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римска писма',
                'tooltip.copy to clipboard': 'Копирајте у међуспремник',
                'tooltip.redo': 'Понови',
                'tooltip.toggle virtual keyboard': 'Укључи / искључи виртуелну тастатуру',
                'tooltip.undo': 'Опозови',
                'menu.insert matrix': 'Уметни матрицу',
                'menu.insert vector': 'Уметни вектор',
                'submenu.array.matrix delimiters': 'Матрик Делимитерс',
                'menu.array.add row above': 'Додај ред после',
                'menu.array.add row below': 'Додај ред пре',
                'menu.array.add column after': 'Додај колону после',
                'menu.array.add column before': 'Додај колону пре',
                'menu.array.delete row': 'Избриши ред',
                'menu.array.delete rows': 'Избриши изабране редове',
                'menu.array.delete column': 'Избриши колону',
                'menu.array.delete columns': 'Избриши изабране колоне',
                'submenu.array.insert separator': 'Уметни сепаратор',
                'menu.insert table': 'Убаци табелу',
                'submenu.table style': 'Табеларни стил'
            },
            sv: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Grekiska bokstäver',
                'keyboard.tooltip.command': 'LaTeX kommandoläge',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerska bokstäver',
                'tooltip.copy to clipboard': 'Kopiera till Urklipp',
                'tooltip.redo': 'Göra om',
                'tooltip.toggle virtual keyboard': 'Växla virtuellt tangentbord',
                'tooltip.undo': 'Ångra',
                'menu.insert matrix': 'Sätt in matris',
                'menu.insert vector': 'Infoga vektor',
                'submenu.array.matrix delimiters': 'Matrisavgränsare',
                'menu.array.add row above': 'Lägg till rad efter',
                'menu.array.add row below': 'Lägg till rad före',
                'menu.array.add column after': 'Lägg till kolumn efter',
                'menu.array.add column before': 'Lägg till kolumn före',
                'menu.array.delete row': 'Radera rad',
                'menu.array.delete rows': 'Ta bort valda rader',
                'menu.array.delete column': 'Ta bort kolumn',
                'menu.array.delete columns': 'Ta bort valda kolumner',
                'submenu.array.insert separator': 'Sätt i separator',
                'menu.insert table': 'Infoga tabell',
                'submenu.table style': 'Tabellstil'
            },
            th: {
                'keyboard.tooltip.functions': 'ฟังก์ชั่น',
                'keyboard.tooltip.symbols': 'สัญลักษณ์',
                'keyboard.tooltip.greek': 'อักษรกรีก',
                'keyboard.tooltip.command': 'โหมดคำสั่ง น้ำยาง',
                'keyboard.tooltip.numeric': 'ตัวเลข',
                'keyboard.tooltip.roman': 'อักษรโรมัน',
                'tooltip.copy to clipboard': 'คัดลอกไปที่คลิปบอร์ด',
                'tooltip.redo': 'ทำซ้ำ',
                'tooltip.toggle virtual keyboard': 'สลับแป้นพิมพ์เสมือน',
                'tooltip.undo': 'เลิกทำ',
                'menu.insert matrix': 'แทรกเมทริกซ์',
                'menu.insert vector': 'แทรกเวกเตอร์',
                'submenu.array.matrix delimiters': 'ตัวคั่นเมทริกซ์',
                'menu.array.add row above': 'เพิ่มแถวหลัง',
                'menu.array.add row below': 'เพิ่มแถวก่อน',
                'menu.array.add column after': 'เพิ่มคอลัมน์หลัง',
                'menu.array.add column before': 'เพิ่มคอลัมน์ก่อน',
                'menu.array.delete row': 'ลบแถว',
                'menu.array.delete rows': 'ลบแถวที่เลือก',
                'menu.array.delete column': 'ลบคอลัมน์',
                'menu.array.delete columns': 'ลบคอลัมน์ที่เลือก',
                'submenu.array.insert separator': 'ตัวคั่นแทรก',
                'menu.insert table': 'แทรกตาราง',
                'submenu.table style': 'สไตล์ตาราง'
            },
            tr: {
                'keyboard.tooltip.functions': 'Fonksiyonlar',
                'keyboard.tooltip.symbols': 'Semboller',
                'keyboard.tooltip.greek': 'Yunan harfleri',
                'keyboard.tooltip.command': 'LaTeX Komut Modu',
                'keyboard.tooltip.numeric': 'Sayısal',
                'keyboard.tooltip.roman': 'Roma Harfleri',
                'tooltip.copy to clipboard': 'Panoya kopyala',
                'tooltip.redo': 'Yeniden yap',
                'tooltip.toggle virtual keyboard': 'Sanal Klavyeyi Aç/Kapat',
                'tooltip.undo': 'Geri alma',
                'menu.insert matrix': 'Matris Ekle',
                'menu.insert vector': 'Vektör Ekle',
                'submenu.array.matrix delimiters': 'Matris Sınırlayıcılar',
                'menu.array.add row above': 'Satırdan Sonra Ekle',
                'menu.array.add row below': 'Önce Satır Ekle',
                'menu.array.add column after': 'Sonra Sütun Ekle',
                'menu.array.add column before': 'Önce Sütun Ekle',
                'menu.array.delete row': 'Sırayı sil',
                'menu.array.delete rows': 'Seçili Satırları Sil',
                'menu.array.delete column': 'Sütunu Sil',
                'menu.array.delete columns': 'Seçili Sütunları Sil',
                'submenu.array.insert separator': 'Ayırıcı Ekle',
                'menu.insert table': 'Tablo Ekle',
                'submenu.table style': 'Tablo Stili'
            },
            uk: {
                'keyboard.tooltip.functions': 'Функції',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Грецькі літери',
                'keyboard.tooltip.command': 'Командний режим латексу',
                'keyboard.tooltip.numeric': 'Числовий',
                'keyboard.tooltip.roman': 'Римські літери',
                'tooltip.copy to clipboard': 'Копіювати в буфер обміну',
                'tooltip.redo': 'Повторити',
                'tooltip.toggle virtual keyboard': 'Переключити віртуальну клавіатуру',
                'tooltip.undo': 'Скасувати',
                'menu.insert matrix': 'Вставити матрицю',
                'menu.insert vector': 'Вставити вектор',
                'submenu.array.matrix delimiters': 'Матричні роздільники',
                'menu.array.add row above': 'Додати рядок після',
                'menu.array.add row below': 'Додати рядок до',
                'menu.array.add column after': 'Додати стовпець після',
                'menu.array.add column before': 'Додати стовпець перед',
                'menu.array.delete row': 'Видалити рядок',
                'menu.array.delete rows': 'Видалити вибрані рядки',
                'menu.array.delete column': 'Видалити стовпець',
                'menu.array.delete columns': 'Видалити вибрані стовпці',
                'submenu.array.insert separator': 'Вставте роздільник',
                'menu.insert table': 'Вставити таблицю',
                'submenu.table style': 'Стиль таблиці'
            },
            vi: {
                'keyboard.tooltip.functions': 'Chức năng',
                'keyboard.tooltip.symbols': 'Ký hiệu',
                'keyboard.tooltip.greek': 'Chữ Hy Lạp',
                'keyboard.tooltip.command': 'Chế độ lệnh LaTeX',
                'keyboard.tooltip.numeric': 'Số',
                'keyboard.tooltip.roman': 'Chữ cái La mã',
                'tooltip.copy to clipboard': 'Sao chép vào clipboard',
                'tooltip.redo': 'Làm lại',
                'tooltip.toggle virtual keyboard': 'Chuyển đổi bàn phím ảo',
                'tooltip.undo': 'Hoàn tác',
                'menu.insert matrix': 'Chèn ma trận',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Dấu phân cách ma trận',
                'menu.array.add row above': 'Thêm hàng sau',
                'menu.array.add row below': 'Thêm hàng trước',
                'menu.array.add column after': 'Thêm cột sau',
                'menu.array.add column before': 'Thêm cột trước',
                'menu.array.delete row': 'Xóa hàng',
                'menu.array.delete rows': 'Xóa hàng đã chọn',
                'menu.array.delete column': 'Xóa cột',
                'menu.array.delete columns': 'Xóa các cột đã chọn',
                'submenu.array.insert separator': 'Chèn dấu phân cách',
                'menu.insert table': 'Chèn bảng',
                'submenu.table style': 'Kiểu bảng'
            },
            zh_cn: {
                'keyboard.tooltip.functions': '职能',
                'keyboard.tooltip.symbols': '符号',
                'keyboard.tooltip.greek': '希腊字母',
                'keyboard.tooltip.command': '乳胶 命令模式',
                'keyboard.tooltip.numeric': '数字',
                'keyboard.tooltip.roman': '罗马字母',
                'tooltip.copy to clipboard': '复制到剪贴板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切换虚拟键盘',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩阵',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩阵分隔符',
                'menu.array.add row above': '在后面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在后面添加列r',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '删除行',
                'menu.array.delete rows': '删除选定行',
                'menu.array.delete column': '删除列',
                'menu.array.delete columns': '删除选定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格样式'
            },
            zh_tw: {
                'keyboard.tooltip.functions': '職能',
                'keyboard.tooltip.symbols': '符號',
                'keyboard.tooltip.greek': '希臘字母',
                'keyboard.tooltip.command': '乳膠命令模式',
                'keyboard.tooltip.numeric': '數字',
                'keyboard.tooltip.roman': '羅馬字母',
                'tooltip.copy to clipboard': '複製到剪貼板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切換虛擬鍵盤',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩陣',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩陣分隔符',
                'menu.array.add row above': '在後面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在後面添加列',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '刪除行',
                'menu.array.delete rows': '刪除選定行',
                'menu.array.delete column': '刪除列',
                'menu.array.delete columns': '刪除選定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格樣式'
            }
        },
        _locale: '',
        get locale() {
            return k._locale || (k._locale = e() ? navigator.language.slice(0, 5) : 'en'), k._locale;
        },
        set locale(l) {
            k._locale = l;
        },
        merge(l, m) {
            if (l && m) {
                const n = k._locale;
                k.locale = l, k.strings[l] = {
                    ...k.strings[l],
                    ...m
                }, k.locale = n;
            } else if (l && !m)
                for (const n of Object.keys(l))
                    k.merge(n, l[n]);
        }
    };

    function l(m) {
        if (void 0 === m)
            return;
        const n = k.locale.slice(0, 2);
        let o = '';
        return k.strings[k.locale] && (o = k.strings[k.locale][m]), !o && k.strings[n] && (o = k.strings[n][m]), o || (o = k.strings.en[m]), o || void 0;
    }
    const m = {
            m0: '#3F3D99',
            m1: '#993D71',
            m2: '#998B3D',
            m3: '#3D9956',
            m4: '#3D5A99',
            m5: '#993D90',
            m6: '#996D3D',
            m7: '#43993D',
            m8: '#3D7999',
            m9: '#843D99'
        },
        n = {
            blue: '#0072BD',
            orange: '#D95319',
            yellow: '#EDB120',
            purple: '#7E2F8E',
            green: '#77AC30',
            cyan: '#4DBEEE',
            red: '#A2142F'
        },
        o = {
            red: '#fbbbb6',
            orange: '#ffe0c2',
            yellow: '#fff1c2',
            lime: '#d0e8b9',
            green: '#bceac4',
            teal: '#b9f1f1',
            blue: '#b6d9fb',
            indigo: '#d1c2f0',
            purple: '#e3baf8',
            magenta: '#f9c8e0',
            black: '#353535',
            'dark-grey': '#8C8C8C',
            grey: '#D0D0D0',
            'light-grey': '#F0F0F0',
            white: '#ffffff'
        },
        p = {
            red: '#d7170b',
            orange: '#fe8a2b',
            yellow: '#ffc02b',
            lime: '#63b215',
            green: '#21ba3a',
            teal: '#17cfcf',
            blue: '#0d80f2',
            indigo: '#63c',
            purple: '#a219e6',
            magenta: '#eb4799',
            black: '#000',
            'dark-grey': '#666',
            grey: '#A6A6A6',
            'light-grey': '#d4d5d2',
            white: '#ffffff'
        },
        q = {
            Red: 'red',
            Orange: 'orange',
            Yellow: 'yellow',
            LimeGreen: 'lime',
            Green: 'green',
            TealBlue: 'teal',
            Blue: 'blue',
            Violet: 'indigo',
            Purple: 'purple',
            Magenta: 'magenta',
            Black: 'black',
            Gray: 'grey',
            White: 'white'
        },
        r = {
            Apricot: '#FBB982',
            Aquamarine: '#00B5BE',
            Bittersweet: '#C04F17',
            Black: '#221E1F',
            Blue: '#2D2F92',
            BlueGreen: '#00B3B8',
            BlueViolet: '#473992',
            BrickRed: '#B6321C',
            Brown: '#792500',
            BurntOrange: '#F7921D',
            CadetBlue: '#74729A',
            CarnationPink: '#F282B4',
            Cerulean: '#00A2E3',
            CornflowerBlue: '#41B0E4',
            Cyan: '#00AEEF',
            Dandelion: '#FDBC42',
            DarkOrchid: '#A4538A',
            Emerald: '#00A99D',
            ForestGreen: '#009B55',
            Fuchsia: '#8C368C',
            Goldenrod: '#FFDF42',
            Gray: '#949698',
            Green: '#00A64F',
            GreenYellow: '#DFE674',
            JungleGreen: '#00A99A',
            Lavender: '#F49EC4',
            Limegreen: '#8DC73E',
            Magenta: '#EC008C',
            Mahogany: '#A9341F',
            Maroon: '#AF3235',
            Melon: '#F89E7B',
            MidnightBlue: '#006795',
            Mulberry: '#A93C93',
            NavyBlue: '#006EB8',
            OliveGreen: '#3C8031',
            Orange: '#F58137',
            OrangeRed: '#ED135A',
            Orchid: '#AF72B0',
            Peach: '#F7965A',
            Periwinkle: '#7977B8',
            PineGreen: '#008B72',
            Plum: '#92268F',
            ProcessBlue: '#00B0F0',
            Purple: '#99479B',
            RawSienna: '#974006',
            Red: '#ED1B23',
            RedOrange: '#F26035',
            RedViolet: '#A1246B',
            Rhodamine: '#EF559F',
            RoyalBlue: '#0071BC',
            RoyalPurple: '#613F99',
            RubineRed: '#ED017D',
            Salmon: '#F69289',
            SeaGreen: '#3FBC9D',
            Sepia: '#671800',
            SkyBlue: '#46C5DD',
            SpringGreen: '#C6DC67',
            Tan: '#DA9D76',
            TealBlue: '#00AEB3',
            Thistle: '#D883B7',
            Turquoise: '#00B4CE',
            Violet: '#58429B',
            VioletRed: '#EF58A0',
            White: '#FFFFFF',
            WildStrawberry: '#EE2967',
            Yellow: '#FFF200',
            YellowGreen: '#98CC70',
            YellowOrange: '#FAA21A'
        };

    function s(t) {
        var u, v, w, x, y, z;
        const A = t.split('!');
        let B, C, D, E = 255,
            F = 255,
            G = 255,
            H = -1;
        const I = A.length > 0 && A[0].startsWith('-');
        I && (A[0] = A[0].slice(1));
        for (let J = 0; J < A.length; J++) {
            B = E, C = F, D = G;
            const K = null === (u = A[J].trim().match(/^([A-Za-z\d]+)/)) || void 0 === u ? void 0 : u[1],
                L = null == K ? void 0 : K.toLowerCase(),
                M = K && null !== (z = null !== (y = null !== (x = null !== (w = null !== (v = p[L]) && void 0 !== v ? v : p[q[K]]) && void 0 !== w ? w : n[K]) && void 0 !== x ? x : r[K]) && void 0 !== y ? y : m[K]) && void 0 !== z ? z : A[J].trim();
            let N = M.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);
            if ((null == N ? void 0 : N[1]) && N[2] && N[3])
                E = Math.max(0, Math.min(255, Number.parseInt(N[1], 16))), F = Math.max(0, Math.min(255, Number.parseInt(N[2], 16))), G = Math.max(0, Math.min(255, Number.parseInt(N[3], 16)));
            else if (N = M.match(/^#([\da-f]{3})$/i), null == N ? void 0 : N[1]) {
                const O = Number.parseInt(N[1][0], 16),
                    P = Number.parseInt(N[1][1], 16),
                    Q = Number.parseInt(N[1][2], 16);
                E = Math.max(0, Math.min(255, 16 * O + O)), F = Math.max(0, Math.min(255, 16 * P + P)), G = Math.max(0, Math.min(255, 16 * Q + Q));
            } else {
                if (N = M.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i), !((null == N ? void 0 : N[1]) && N[2] && N[3]))
                    return;
                E = Math.max(0, Math.min(255, Number.parseInt(N[1]))), F = Math.max(0, Math.min(255, Number.parseInt(N[2]))), G = Math.max(0, Math.min(255, Number.parseInt(N[3])));
            }
            H >= 0 && (E = (1 - H) * E + H * B, F = (1 - H) * F + H * C, G = (1 - H) * G + H * D, H = -1), J + 1 < A.length && (H = Math.max(0, Math.min(100, Number.parseInt(A[++J]))) / 100);
        }
        return H >= 0 && (E = H * E + (1 - H) * B, F = H * F + (1 - H) * C, G = H * G + (1 - H) * D), I && (E = 255 - E, F = 255 - F, G = 255 - G), '#' + ('00' + Math.round(E).toString(16)).slice(-2) + ('00' + Math.round(F).toString(16)).slice(-2) + ('00' + Math.round(G).toString(16)).slice(-2);
    }

    function t(u) {
        var v, w;
        return u = u.trim(), null !== (w = null !== (v = o[u.toLowerCase()]) && void 0 !== v ? v : o[q[u]]) && void 0 !== w ? w : s(u);
    }

    function u(v, w, x) {
        return x < 0 && (x += 6), x >= 6 && (x -= 6), x < 1 ? (w - v) * x + v : x < 3 ? w : x < 4 ? (w - v) * (4 - x) + v : v;
    }

    function v(w) {
        return w < 0 ? 0 : w > 255 ? 255 : Math.round(w);
    }

    function w(x) {
        let y = function(z) {
            if (!z)
                return;
            if ('#' !== z[0])
                return;
            let A;
            return (z = z.slice(1)).length <= 4 ? (A = {
                r: parseInt(z[0] + z[0], 16),
                g: parseInt(z[1] + z[1], 16),
                b: parseInt(z[2] + z[2], 16)
            }, 4 === z.length && (A.a = parseInt(z[3] + z[3], 16) / 255)) : (A = {
                r: parseInt(z[0] + z[1], 16),
                g: parseInt(z[2] + z[3], 16),
                b: parseInt(z[4] + z[5], 16)
            }, 8 === z.length && (A.a = parseInt(z[6] + z[7], 16) / 255)), A && void 0 === A.a && (A.a = 1), A;
        }(x);
        if (!y)
            return x;
        let {
            h: z,
            s: A,
            l: B
        } = function(C) {
            let {
                r: D,
                g: E,
                b: F
            } = C;
            D /= 255, E /= 255, F /= 255;
            const G = Math.min(D, E, F),
                H = Math.max(D, E, F),
                I = H - G;
            let J, K;
            H === G ? J = 0 : D === H ? J = (E - F) / I : E === H ? J = 2 + (F - D) / I : F === H && (J = 4 + (D - E) / I), J = Math.min(60 * J, 360), J < 0 && (J += 360);
            const L = (G + H) / 2;
            return K = H === G ? 0 : L <= 0.5 ? I / (H + G) : I / (2 - H - G), {
                h: J,
                s: K,
                l: L
            };
        }(y);
        return A += 0.1, B -= 0.1,
            function(C) {
                const {
                    r: D,
                    g: E,
                    b: F
                } = C;
                let G = (16777216 + (v(D) << 16) + (v(E) << 8) + v(F)).toString(16).slice(1);
                return G[0] === G[1] && G[2] === G[3] && G[4] === G[5] && G[6] === G[7] && (G = G[0] + G[2] + G[4]), '#' + G;
            }(function(C) {
                let [D, E, F] = [
                    C.h,
                    C.s,
                    C.l
                ];
                D = (D + 360) % 360 / 60, F = Math.max(0, Math.min(F, 1)), E = Math.max(0, Math.min(E, 1));
                const G = F <= 0.5 ? F * (E + 1) : F + E - F * E,
                    H = 2 * F - G;
                return {
                    r: Math.round(255 * u(H, G, D + 2)),
                    g: Math.round(255 * u(H, G, D)),
                    b: Math.round(255 * u(H, G, D - 2))
                };
            }({
                h: z,
                s: A,
                l: B
            }));
    }
    const x = {},
        y = {
            60: '\\lt',
            62: '\\gt',
            111: 'o',
            38: '\\&',
            123: '\\lbrace',
            125: '\\rbrace',
            91: '\\lbrack',
            93: '\\rbrack',
            58: '\\colon',
            160: '~',
            172: '\\neg',
            183: '\\cdot',
            188: '\\frac{1}{4}',
            189: '\\frac{1}{2}',
            190: '\\frac{3}{4}',
            8304: '^{0}',
            8305: '^{i}',
            185: '^{1}',
            178: '^{2}',
            179: '^{3}',
            8224: '\\dagger',
            8225: '\\ddagger',
            8230: '\\ldots',
            8308: '^{4}',
            8309: '^{5}',
            8310: '^{6}',
            8311: '^{7}',
            8312: '^{8}',
            8313: '^{9}',
            8314: '^{+}',
            8315: '^{-}',
            8316: '^{=}',
            8319: '^{n}',
            8320: '_{0}',
            8321: '_{1}',
            8322: '_{2}',
            8323: '_{3}',
            8324: '_{4}',
            8325: '_{5}',
            8326: '_{6}',
            8327: '_{7}',
            8328: '_{8}',
            8329: '_{9}',
            8330: '_{+}',
            8331: '_{-}',
            8332: '_{=}',
            8336: '_{a}',
            8337: '_{e}',
            8338: '_{o}',
            8339: '_{x}',
            8242: '\\prime',
            39: '\\prime',
            8592: '\\gets',
            8594: '\\to',
            9651: '\\triangle',
            9661: '\\triangledown',
            8715: '\\owns',
            8727: '\\ast',
            8739: '\\vert',
            8741: '\\Vert',
            8743: '\\land',
            8744: '\\lor',
            8901: '\\cdot',
            8904: '\\bowtie',
            8800: '\\ne',
            8804: '\\le',
            8805: '\\ge',
            8869: '\\bot',
            10231: '\\biconditional',
            10232: '\\impliedby',
            10233: '\\implies',
            10234: '\\iff',
            8450: '\\mathbb{C}',
            8469: '\\mathbb{N}',
            8473: '\\mathbb{P}',
            8474: '\\mathbb{Q}',
            8477: '\\mathbb{R}',
            8484: '\\mathbb{Z}',
            8461: '\\mathbb{H}',
            8476: '\\Re',
            8465: '\\Im',
            42: '\\ast',
            11036: '\\square',
            9633: '\\square',
            8720: '\\coprod',
            8716: '\\not\\ni',
            9671: '\\diamond',
            8846: '\\uplus',
            8851: '\\sqcap',
            8852: '\\sqcup',
            8768: '\\wr',
            8750: '\\oint',
            8226: '\\textbullet',
            8722: '-',
            978: '\\Upsilon'
        },
        z = {},
        A = {},
        B = {
            iff: '\\;\u27FA\\;',
            nicefrac: '^{#1}\\!\\!/\\!_{#2}',
            rd: '\\mathrm{d}',
            rD: '\\mathrm{D}',
            doubleStruckCapitalN: '\\mathbb{N}',
            doubleStruckCapitalR: '\\mathbb{R}',
            doubleStruckCapitalQ: '\\mathbb{Q}',
            doubleStruckCapitalZ: '\\mathbb{Z}',
            doubleStruckCapitalP: '\\mathbb{P}',
            scriptCapitalE: '\\mathscr{E}',
            scriptCapitalH: '\\mathscr{H}',
            scriptCapitalL: '\\mathscr{L}',
            gothicCapitalC: '\\mathfrak{C}',
            gothicCapitalH: '\\mathfrak{H}',
            gothicCapitalI: '\\mathfrak{I}',
            gothicCapitalR: '\\mathfrak{R}',
            imaginaryI: '\\mathrm{i}',
            imaginaryJ: '\\mathrm{j}',
            exponentialE: '\\mathrm{e}',
            differentialD: '\\mathrm{d}',
            capitalDifferentialD: '\\mathrm{D}',
            'braket.sty': {
                package: {
                    bra: '\\mathinner{\\langle{#1}|}',
                    ket: '\\mathinner{|{#1}\\rangle}',
                    braket: '\\mathinner{\\langle{#1}\\rangle}',
                    set: '\\mathinner{\\lbrace #1 \\rbrace}',
                    Bra: '\\left\\langle #1\\right|',
                    Ket: '\\left|#1\\right\\rangle',
                    Braket: '\\left\\langle{#1}\\right\\rangle',
                    Set: '\\left\\lbrace #1 \\right\\rbrace'
                }
            },
            'amsmath.sty': {
                package: {
                    varGamma: '\\mathit{\\Gamma}',
                    varDelta: '\\mathit{\\Delta}',
                    varTheta: '\\mathit{\\Theta}',
                    varLambda: '\\mathit{\\Lambda}',
                    varXi: '\\mathit{\\Xi}',
                    varPi: '\\mathit{\\Pi}',
                    varSigma: '\\mathit{\\Sigma}',
                    varUpsilon: '\\mathit{\\Upsilon}',
                    varPhi: '\\mathit{\\Phi}',
                    varPsi: '\\mathit{\\Psi}',
                    varOmega: '\\mathit{\\Omega}',
                    pmod: {
                        def: '\\quad(\\operatorname{mod}\\ #1)',
                        args: 1,
                        expand: !1
                    },
                    mod: {
                        def: '\\quad\\operatorname{mod}\\,\\,#1',
                        args: 1,
                        expand: !1
                    },
                    bmod: {
                        def: '\\;\\mathbin{\\operatorname{mod }}',
                        expand: !1
                    }
                },
                expand: !1
            },
            'texvc.sty': {
                package: {
                    darr: '\\downarrow',
                    dArr: '\\Downarrow',
                    Darr: '\\Downarrow',
                    lang: '\\langle',
                    rang: '\\rangle',
                    uarr: '\\uparrow',
                    uArr: '\\Uparrow',
                    Uarr: '\\Uparrow',
                    N: '\\mathbb{N}',
                    R: '\\mathbb{R}',
                    Z: '\\mathbb{Z}',
                    alef: '\\aleph',
                    alefsym: '\\aleph',
                    Alpha: '\\mathrm{A}',
                    Beta: '\\mathrm{B}',
                    bull: '\\bullet',
                    Chi: '\\mathrm{X}',
                    clubs: '\\clubsuit',
                    cnums: '\\mathbb{C}',
                    Complex: '\\mathbb{C}',
                    Dagger: '\\ddagger',
                    diamonds: '\\diamondsuit',
                    empty: '\\emptyset',
                    Epsilon: '\\mathrm{E}',
                    Eta: '\\mathrm{H}',
                    exist: '\\exists',
                    harr: '\\leftrightarrow',
                    hArr: '\\Leftrightarrow',
                    Harr: '\\Leftrightarrow',
                    hearts: '\\heartsuit',
                    image: '\\Im',
                    infin: '\\infty',
                    Iota: '\\mathrm{I}',
                    isin: '\\in',
                    Kappa: '\\mathrm{K}',
                    larr: '\\leftarrow',
                    lArr: '\\Leftarrow',
                    Larr: '\\Leftarrow',
                    lrarr: '\\leftrightarrow',
                    lrArr: '\\Leftrightarrow',
                    Lrarr: '\\Leftrightarrow',
                    Mu: '\\mathrm{M}',
                    natnums: '\\mathbb{N}',
                    Nu: '\\mathrm{N}',
                    Omicron: '\\mathrm{O}',
                    plusmn: '\\pm',
                    rarr: '\\rightarrow',
                    rArr: '\\Rightarrow',
                    Rarr: '\\Rightarrow',
                    real: '\\Re',
                    reals: '\\mathbb{R}',
                    Reals: '\\mathbb{R}',
                    Rho: '\\mathrm{P}',
                    sdot: '\\cdot',
                    sect: '\\S',
                    spades: '\\spadesuit',
                    sub: '\\subset',
                    sube: '\\subseteq',
                    supe: '\\supseteq',
                    Tau: '\\mathrm{T}',
                    thetasym: '\\vartheta',
                    weierp: '\\wp',
                    Zeta: '\\mathrm{Z}'
                },
                expand: !1
            }
        },
        C = {
            ' ': 32,
            '\\#': 35,
            '\\&': 38,
            '\\$': 36,
            '\\%': 37,
            '\\_': 95,
            '\\euro': 8364,
            '\\maltese': 10016,
            '\\{': 123,
            '\\}': 125,
            '\\nobreakspace': 160,
            '\\ldots': 8230,
            '\\textellipsis': 8230,
            '\\backslash': 92,
            '`': 8216,
            '\'': 8217,
            '``': 8220,
            '\'\'': 8221,
            '\\degree': 176,
            '\\textasciicircum': 94,
            '\\textasciitilde': 126,
            '\\textasteriskcentered': 42,
            '\\textbackslash': 92,
            '\\textbraceleft': 123,
            '\\textbraceright': 125,
            '\\textbullet': 8226,
            '\\textdollar': 36,
            '\\textsterling': 163,
            '\\textdagger': 8224,
            '\\textdaggerdbl': 8225,
            '\u2013': 8211,
            '\u2014': 8212,
            '\u2018': 8216,
            '\u2019': 8217,
            '\u201C': 8220,
            '\u201D': 8221,
            '"': 8221,
            '\\ss': 223,
            '\\ae': 230,
            '\\oe': 339,
            '\\AE': 198,
            '\\OE': 338,
            '\\O': 216,
            '\\i': 305,
            '\\j': 567,
            '\\aa': 229,
            '\\AA': 197
        },
        D = /[\w!@*()-=+{}[\]\\';:?/.,~<>`|$%#&^" ]/,
        E = j() ? new RegExp('\\p{Letter}', 'u') : /[a-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/,
        F = j() ? new RegExp('[0-9\\p{Letter}]', 'u') : /[\da-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/;

    function G(H, I, J = 'mord', K) {
        void 0 !== I && (x[H] = {
            definitionType: 'symbol',
            type: J,
            variant: K,
            codepoint: I
        }, y[I] || (y[I] = H), C[H] || (C[H] = I));
    }

    function H(I, J, K) {
        if ('string' != typeof I)
            for (const [L, M, N, O] of I)
                G(L, M, null != N ? N : J, null != O ? O : K);
        else
            for (let P = 0; P < I.length; P++) {
                const Q = I.charAt(P);
                G(Q, Q.codePointAt(0));
            }
    }

    function I(J, K) {
        for (let L = J; L <= K; L++)
            G(String.fromCodePoint(L), L);
    }

    function J(K, L) {
        if (void 0 === L)
            return '';
        if ('math' === K && y[L])
            return y[L];
        if ('text' === K) {
            let M = Object.keys(C).find(M => C[M] === L);
            if (!M) {
                const N = L.toString(16);
                M = '^'.repeat(N.length) + N;
            }
            return M;
        }
        return String.fromCodePoint(L);
    }
    const K = {
            119893: 8462,
            119965: 8492,
            119968: 8496,
            119969: 8497,
            119971: 8459,
            119972: 8464,
            119975: 8466,
            119976: 8499,
            119981: 8475,
            119994: 8495,
            119996: 8458,
            120004: 8500,
            120070: 8493,
            120075: 8460,
            120076: 8465,
            120085: 8476,
            120093: 8488,
            120122: 8450,
            120127: 8461,
            120133: 8469,
            120135: 8473,
            120136: 8474,
            120137: 8477,
            120145: 8484
        },
        L = [{
                start: 119808,
                len: 26,
                offset: 65,
                style: 'bold'
            },
            {
                start: 119834,
                len: 26,
                offset: 97,
                style: 'bold'
            },
            {
                start: 119860,
                len: 26,
                offset: 65,
                style: 'italic'
            },
            {
                start: 119886,
                len: 26,
                offset: 97,
                style: 'italic'
            },
            {
                start: 119912,
                len: 26,
                offset: 65,
                style: 'bolditalic'
            },
            {
                start: 119938,
                len: 26,
                offset: 97,
                style: 'bolditalic'
            },
            {
                start: 119964,
                len: 26,
                offset: 65,
                variant: 'script'
            },
            {
                start: 119990,
                len: 26,
                offset: 97,
                variant: 'script'
            },
            {
                start: 120016,
                len: 26,
                offset: 65,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120042,
                len: 26,
                offset: 97,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120068,
                len: 26,
                offset: 65,
                variant: 'fraktur'
            },
            {
                start: 120094,
                len: 26,
                offset: 97,
                variant: 'fraktur'
            },
            {
                start: 120172,
                len: 26,
                offset: 65,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120198,
                len: 26,
                offset: 97,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120120,
                len: 26,
                offset: 65,
                variant: 'double-struck'
            },
            {
                start: 120146,
                len: 26,
                offset: 97,
                variant: 'double-struck'
            },
            {
                start: 120224,
                len: 26,
                offset: 65,
                variant: 'sans-serif'
            },
            {
                start: 120250,
                len: 26,
                offset: 97,
                variant: 'sans-serif'
            },
            {
                start: 120276,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120302,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120328,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120354,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120380,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120406,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120432,
                len: 26,
                offset: 65,
                variant: 'monospace'
            },
            {
                start: 120458,
                len: 26,
                offset: 97,
                variant: 'monospace'
            },
            {
                start: 120488,
                len: 25,
                offset: 913,
                style: 'bold'
            },
            {
                start: 120514,
                len: 25,
                offset: 945,
                style: 'bold'
            },
            {
                start: 120546,
                len: 25,
                offset: 913,
                style: 'italic'
            },
            {
                start: 120572,
                len: 25,
                offset: 945,
                style: 'italic'
            },
            {
                start: 120604,
                len: 25,
                offset: 913,
                style: 'bolditalic'
            },
            {
                start: 120630,
                len: 25,
                offset: 945,
                style: 'bolditalic'
            },
            {
                start: 120662,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120688,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120720,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120746,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120782,
                len: 10,
                offset: 48,
                variant: 'main',
                style: 'bold'
            },
            {
                start: 120792,
                len: 10,
                offset: 48,
                variant: 'double-struck'
            },
            {
                start: 120803,
                len: 10,
                offset: 48,
                variant: 'sans-serif'
            },
            {
                start: 120812,
                len: 10,
                offset: 48,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120822,
                len: 10,
                offset: 48,
                variant: 'monospace'
            }
        ];

    function M(N) {
        let O = 'auto';
        const P = N.match(/:([^=]+)/);
        return P && (O = P[1].trim()), O;
    }

    function N(O) {
        if (!O)
            return [];
        const P = [];
        let Q = O.split(']');
        if (Q[0].startsWith('[')) {
            P.push({
                isOptional: !0,
                type: M(Q[0].slice(1))
            });
            for (let R = 1; R <= Q.length; R++)
                P.push(...N(Q[R]));
        } else if (Q = O.split('}'), Q[0].startsWith('{')) {
            P.push({
                isOptional: !1,
                type: M(Q[0].slice(1))
            });
            for (let R = 1; R <= Q.length; R++)
                P.push(...N(Q[R]));
        }
        return P;
    }

    function O(P) {
        if (!P)
            return '';
        let Q = '',
            R = !0;
        for (const S of P)
            'string' == typeof S.value ? Q += S.value : R = !1;
        return R ? Q : '';
    }

    function P(Q, R, S, T = !1) {
        'string' == typeof Q && (Q = [Q]);
        const U = {
            tabular: T,
            params: N(R),
            createAtom: S
        };
        for (const V of Q)
            A[V] = U;
    }

    function Q(R, S, T) {
        P(R, S, T, !0);
    }

    function R(S, T, U) {
        var V, W;
        U || (U = {});
        const X = {
            definitionType: 'function',
            params: N(T),
            ifMode: U.ifMode,
            isFunction: null !== (V = U.isFunction) && void 0 !== V && V,
            applyMode: U.applyMode,
            infix: null !== (W = U.infix) && void 0 !== W && W,
            createAtom: U.createAtom,
            applyStyle: U.applyStyle
        };
        if ('string' == typeof S)
            z['\\' + S] = X;
        else
            for (const Y of S)
                z['\\' + Y] = X;
    }
    let S;

    function T(U) {
        return S || (S = _V(B)), U ? _V({
            ...S,
            ...U
        }) : S;
    }

    function U(V, W) {
        var X, Y, Z, $;
        if ('string' == typeof V) {
            let ab = 0;
            const bb = V;
            return /(^|[^\\])#1/.test(bb) && (ab = 1), /(^|[^\\])#2/.test(bb) && (ab = 2), /(^|[^\\])#3/.test(bb) && (ab = 3), /(^|[^\\])#4/.test(bb) && (ab = 4), /(^|[^\\])#5/.test(bb) && (ab = 5), /(^|[^\\])#6/.test(bb) && (ab = 6), /(^|[^\\])#7/.test(bb) && (ab = 7), /(^|[^\\])#8/.test(bb) && (ab = 8), /(^|[^\\])#9/.test(bb) && (ab = 9), {
                expand: null === (X = null == W ? void 0 : W.expand) || void 0 === X || X,
                captureSelection: null === (Y = null == W ? void 0 : W.captureSelection) || void 0 === Y || Y,
                args: ab,
                def: bb
            };
        }
        return {
            expand: null === (Z = null == W ? void 0 : W.expand) || void 0 === Z || Z,
            captureSelection: null === ($ = null == W ? void 0 : W.captureSelection) || void 0 === $ || $,
            args: 0,
            ...V
        };
    }

    function _V(W) {
        if (!W)
            return {};
        const X = {};
        for (const Y of Object.keys(W)) {
            const Z = W[Y];
            if (null == Z)
                delete X[Y];
            else if ('object' == typeof Z && 'package' in Z)
                for (const $ of Object.keys(Z.package))
                    X[$] = U(Z.package[$], {
                        expand: Z.expand,
                        captureSelection: Z.captureSelection
                    });
            else
                X[Y] = U(Z);
        }
        return X;
    }
    const W = [
            0,
            0.69444,
            0,
            0
        ],
        X = [
            0,
            0.61111,
            0,
            0
        ],
        Y = [
            0.25,
            0.75,
            0,
            0
        ],
        Z = [
            0,
            0.44444,
            0,
            0
        ],
        $ = [
            0,
            0.68611,
            0,
            0
        ],
        ab = [
            0.19444,
            0.69444,
            0,
            0
        ],
        bb = [
            0,
            0.68333,
            0,
            0
        ],
        cb = [
            0,
            0.68889,
            0,
            0
        ],
        db = [
            0,
            0.69141,
            0,
            0
        ],
        eb = [
            0,
            0,
            0,
            0
        ],
        fb = [
            0,
            0.64444,
            0,
            0
        ],
        gb = [
            0,
            0.69224,
            0,
            0
        ],
        hb = [
            0.19444,
            0.44444,
            0,
            0
        ],
        ib = [
            0.65002,
            1.15,
            0,
            0
        ],
        jb = [
            0,
            0.55556,
            0,
            0
        ],
        kb = [
            0.35001,
            0.85,
            0,
            0
        ],
        lb = [
            1.25003,
            1.75,
            0,
            0
        ],
        mb = [
            0.95003,
            1.45,
            0,
            0
        ],
        nb = [
            0,
            0.75,
            0,
            0
        ],
        ob = [
            0,
            0.47534,
            0,
            0
        ],
        pb = [
            0.25001,
            0.75,
            0,
            0
        ],
        qb = [
            0.55001,
            1.05,
            0,
            0
        ],
        rb = [
            0.16667,
            0.68889,
            0,
            0
        ],
        sb = [
            0.08167,
            0.58167,
            0,
            0
        ];
    var tb = {
        'AMS-Regular': {
            32: eb,
            65: cb,
            66: cb,
            67: cb,
            68: cb,
            69: cb,
            70: cb,
            71: cb,
            72: cb,
            73: cb,
            74: rb,
            75: cb,
            76: cb,
            77: cb,
            78: cb,
            79: rb,
            80: cb,
            81: rb,
            82: cb,
            83: cb,
            84: cb,
            85: cb,
            86: cb,
            87: cb,
            88: cb,
            89: cb,
            90: cb,
            107: cb,
            160: eb,
            165: [
                0,
                0.675,
                0.025,
                0
            ],
            174: [
                0.15559,
                0.69224,
                0,
                0
            ],
            240: cb,
            295: cb,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.9,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.9,
                0,
                0
            ],
            989: sb,
            1008: [
                0,
                0.43056,
                0.04028,
                0
            ],
            8245: [
                0,
                0.54986,
                0,
                0
            ],
            8463: cb,
            8487: cb,
            8498: cb,
            8502: cb,
            8503: cb,
            8504: cb,
            8513: cb,
            8592: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8594: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8602: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8603: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8606: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8608: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8610: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8611: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8619: [
                0,
                0.54986,
                0,
                0
            ],
            8620: [
                0,
                0.54986,
                0,
                0
            ],
            8621: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8622: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8624: gb,
            8625: gb,
            8630: [
                0,
                0.43056,
                0,
                0
            ],
            8631: [
                0,
                0.43056,
                0,
                0
            ],
            8634: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8635: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8638: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8639: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8642: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8643: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8644: [
                0.1808,
                0.675,
                0,
                0
            ],
            8646: [
                0.1808,
                0.675,
                0,
                0
            ],
            8647: [
                0.1808,
                0.675,
                0,
                0
            ],
            8648: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8649: [
                0.1808,
                0.675,
                0,
                0
            ],
            8650: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8651: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8652: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8653: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8654: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8655: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8666: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8667: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8669: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8672: [
                -0.064,
                0.437,
                0,
                0
            ],
            8674: [
                -0.064,
                0.437,
                0,
                0
            ],
            8705: [
                0,
                0.825,
                0,
                0
            ],
            8708: cb,
            8709: sb,
            8717: [
                0,
                0.43056,
                0,
                0
            ],
            8722: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8724: [
                0.08198,
                0.69224,
                0,
                0
            ],
            8726: sb,
            8733: gb,
            8736: gb,
            8737: gb,
            8738: [
                0.03517,
                0.52239,
                0,
                0
            ],
            8739: sb,
            8740: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8741: sb,
            8742: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8756: gb,
            8757: gb,
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8765: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8769: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8770: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8774: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8778: sb,
            8782: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8783: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8785: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8786: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8787: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8790: gb,
            8791: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8796: [
                0.08198,
                0.91667,
                0,
                0
            ],
            8806: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8807: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8808: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8809: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8812: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8814: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8815: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8816: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8817: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8818: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8819: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8822: [
                0.1808,
                0.675,
                0,
                0
            ],
            8823: [
                0.1808,
                0.675,
                0,
                0
            ],
            8828: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8829: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8830: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8831: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8832: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8833: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8840: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8841: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8842: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8843: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8847: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8848: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8858: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8859: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8861: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8862: [
                0,
                0.675,
                0,
                0
            ],
            8863: [
                0,
                0.675,
                0,
                0
            ],
            8864: [
                0,
                0.675,
                0,
                0
            ],
            8865: [
                0,
                0.675,
                0,
                0
            ],
            8872: gb,
            8873: gb,
            8874: gb,
            8876: cb,
            8877: cb,
            8878: cb,
            8879: cb,
            8882: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8883: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8884: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8885: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8888: [
                0,
                0.54986,
                0,
                0
            ],
            8890: [
                0.19444,
                0.43056,
                0,
                0
            ],
            8891: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8892: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8901: [
                0,
                0.54986,
                0,
                0
            ],
            8903: sb,
            8905: sb,
            8906: sb,
            8907: gb,
            8908: gb,
            8909: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8910: [
                0,
                0.54986,
                0,
                0
            ],
            8911: [
                0,
                0.54986,
                0,
                0
            ],
            8912: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8913: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8914: [
                0,
                0.54986,
                0,
                0
            ],
            8915: [
                0,
                0.54986,
                0,
                0
            ],
            8916: gb,
            8918: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8919: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8920: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8921: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8922: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8923: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8926: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8927: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8928: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8929: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8934: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8935: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8936: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8937: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8938: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8939: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8940: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8941: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8994: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8995: [
                0.19444,
                0.69224,
                0,
                0
            ],
            9416: [
                0.15559,
                0.69224,
                0,
                0
            ],
            9484: gb,
            9488: gb,
            9492: [
                0,
                0.37788,
                0,
                0
            ],
            9496: [
                0,
                0.37788,
                0,
                0
            ],
            9585: [
                0.19444,
                0.68889,
                0,
                0
            ],
            9586: [
                0.19444,
                0.74111,
                0,
                0
            ],
            9632: [
                0,
                0.675,
                0,
                0
            ],
            9633: [
                0,
                0.675,
                0,
                0
            ],
            9650: [
                0,
                0.54986,
                0,
                0
            ],
            9651: [
                0,
                0.54986,
                0,
                0
            ],
            9654: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9660: [
                0,
                0.54986,
                0,
                0
            ],
            9661: [
                0,
                0.54986,
                0,
                0
            ],
            9664: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9674: [
                0.11111,
                0.69224,
                0,
                0
            ],
            9733: [
                0.19444,
                0.69224,
                0,
                0
            ],
            10003: gb,
            10016: gb,
            10731: [
                0.11111,
                0.69224,
                0,
                0
            ],
            10846: [
                0.19444,
                0.75583,
                0,
                0
            ],
            10877: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10878: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10885: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10886: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10887: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10888: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10889: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10890: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10891: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10892: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10901: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10902: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10933: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10934: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10935: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10936: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10937: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10938: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10949: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10950: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10955: [
                0.28481,
                0.79383,
                0,
                0
            ],
            10956: [
                0.28481,
                0.79383,
                0,
                0
            ],
            57350: sb,
            57351: sb,
            57352: sb,
            57353: [
                0,
                0.43056,
                0.04028,
                0
            ],
            57356: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57357: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57358: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57359: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57360: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57361: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57366: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57367: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57368: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57369: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57370: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57371: [
                0.13597,
                0.63597,
                0,
                0
            ]
        },
        'Caligraphic-Regular': {
            32: eb,
            65: [
                0,
                0.68333,
                0,
                0.19445
            ],
            66: [
                0,
                0.68333,
                0.03041,
                0.13889
            ],
            67: [
                0,
                0.68333,
                0.05834,
                0.13889
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            69: [
                0,
                0.68333,
                0.08944,
                0.11111
            ],
            70: [
                0,
                0.68333,
                0.09931,
                0.11111
            ],
            71: [
                0.09722,
                0.68333,
                0.0593,
                0.11111
            ],
            72: [
                0,
                0.68333,
                0.00965,
                0.11111
            ],
            73: [
                0,
                0.68333,
                0.07382,
                0
            ],
            74: [
                0.09722,
                0.68333,
                0.18472,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.01445,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.13889
            ],
            77: [
                0,
                0.68333,
                0,
                0.13889
            ],
            78: [
                0,
                0.68333,
                0.14736,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.11111
            ],
            80: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            81: [
                0.09722,
                0.68333,
                0,
                0.11111
            ],
            82: [
                0,
                0.68333,
                0,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.075,
                0.13889
            ],
            84: [
                0,
                0.68333,
                0.25417,
                0
            ],
            85: [
                0,
                0.68333,
                0.09931,
                0.08334
            ],
            86: [
                0,
                0.68333,
                0.08222,
                0
            ],
            87: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            88: [
                0,
                0.68333,
                0.14643,
                0.13889
            ],
            89: [
                0.09722,
                0.68333,
                0.08222,
                0.08334
            ],
            90: [
                0,
                0.68333,
                0.07944,
                0.13889
            ],
            160: eb
        },
        'Fraktur-Regular': {
            32: eb,
            33: db,
            34: db,
            38: db,
            39: db,
            40: [
                0.24982,
                0.74947,
                0,
                0
            ],
            41: [
                0.24982,
                0.74947,
                0,
                0
            ],
            42: [
                0,
                0.62119,
                0,
                0
            ],
            43: [
                0.08319,
                0.58283,
                0,
                0
            ],
            44: [
                0,
                0.10803,
                0,
                0
            ],
            45: [
                0.08319,
                0.58283,
                0,
                0
            ],
            46: [
                0,
                0.10803,
                0,
                0
            ],
            47: [
                0.24982,
                0.74947,
                0,
                0
            ],
            48: ob,
            49: ob,
            50: ob,
            51: [
                0.18906,
                0.47534,
                0,
                0
            ],
            52: [
                0.18906,
                0.47534,
                0,
                0
            ],
            53: [
                0.18906,
                0.47534,
                0,
                0
            ],
            54: db,
            55: [
                0.18906,
                0.47534,
                0,
                0
            ],
            56: db,
            57: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58: ob,
            59: [
                0.12604,
                0.47534,
                0,
                0
            ],
            61: [
                -0.13099,
                0.36866,
                0,
                0
            ],
            63: db,
            65: db,
            66: db,
            67: db,
            68: db,
            69: db,
            70: [
                0.12604,
                0.69141,
                0,
                0
            ],
            71: db,
            72: [
                0.06302,
                0.69141,
                0,
                0
            ],
            73: db,
            74: [
                0.12604,
                0.69141,
                0,
                0
            ],
            75: db,
            76: db,
            77: db,
            78: db,
            79: db,
            80: [
                0.18906,
                0.69141,
                0,
                0
            ],
            81: [
                0.03781,
                0.69141,
                0,
                0
            ],
            82: db,
            83: db,
            84: db,
            85: db,
            86: db,
            87: db,
            88: db,
            89: [
                0.18906,
                0.69141,
                0,
                0
            ],
            90: [
                0.12604,
                0.69141,
                0,
                0
            ],
            91: [
                0.24982,
                0.74947,
                0,
                0
            ],
            93: [
                0.24982,
                0.74947,
                0,
                0
            ],
            94: db,
            97: ob,
            98: db,
            99: ob,
            100: [
                0,
                0.62119,
                0,
                0
            ],
            101: ob,
            102: [
                0.18906,
                0.69141,
                0,
                0
            ],
            103: [
                0.18906,
                0.47534,
                0,
                0
            ],
            104: [
                0.18906,
                0.69141,
                0,
                0
            ],
            105: db,
            106: db,
            107: db,
            108: db,
            109: ob,
            110: ob,
            111: ob,
            112: [
                0.18906,
                0.52396,
                0,
                0
            ],
            113: [
                0.18906,
                0.47534,
                0,
                0
            ],
            114: ob,
            115: ob,
            116: [
                0,
                0.62119,
                0,
                0
            ],
            117: ob,
            118: [
                0,
                0.52396,
                0,
                0
            ],
            119: [
                0,
                0.52396,
                0,
                0
            ],
            120: [
                0.18906,
                0.47534,
                0,
                0
            ],
            121: [
                0.18906,
                0.47534,
                0,
                0
            ],
            122: [
                0.18906,
                0.47534,
                0,
                0
            ],
            160: eb,
            8216: db,
            8217: db,
            58112: [
                0,
                0.62119,
                0,
                0
            ],
            58113: [
                0,
                0.62119,
                0,
                0
            ],
            58114: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58115: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58116: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58117: db,
            58118: [
                0,
                0.62119,
                0,
                0
            ],
            58119: ob
        },
        'Main-Bold': {
            32: eb,
            33: W,
            34: W,
            35: ab,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: nb,
            43: [
                0.13333,
                0.63333,
                0,
                0
            ],
            44: [
                0.19444,
                0.15556,
                0,
                0
            ],
            45: Z,
            46: [
                0,
                0.15556,
                0,
                0
            ],
            47: Y,
            48: fb,
            49: fb,
            50: fb,
            51: fb,
            52: fb,
            53: fb,
            54: fb,
            55: fb,
            56: fb,
            57: fb,
            58: Z,
            59: hb,
            60: [
                0.08556,
                0.58556,
                0,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            62: [
                0.08556,
                0.58556,
                0,
                0
            ],
            63: W,
            64: W,
            65: $,
            66: $,
            67: $,
            68: $,
            69: $,
            70: $,
            71: $,
            72: $,
            73: $,
            74: $,
            75: $,
            76: $,
            77: $,
            78: $,
            79: $,
            80: $,
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: $,
            83: $,
            84: $,
            85: $,
            86: [
                0,
                0.68611,
                0.01597,
                0
            ],
            87: [
                0,
                0.68611,
                0.01597,
                0
            ],
            88: $,
            89: [
                0,
                0.68611,
                0.02875,
                0
            ],
            90: $,
            91: Y,
            92: Y,
            93: Y,
            94: W,
            95: [
                0.31,
                0.13444,
                0.03194,
                0
            ],
            97: Z,
            98: W,
            99: Z,
            100: W,
            101: Z,
            102: [
                0,
                0.69444,
                0.10903,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            104: W,
            105: W,
            106: ab,
            107: W,
            108: W,
            109: Z,
            110: Z,
            111: Z,
            112: hb,
            113: hb,
            114: Z,
            115: Z,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: Z,
            118: [
                0,
                0.44444,
                0.01597,
                0
            ],
            119: [
                0,
                0.44444,
                0.01597,
                0
            ],
            120: Z,
            121: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            122: Z,
            123: Y,
            124: Y,
            125: Y,
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: eb,
            163: W,
            168: W,
            172: Z,
            176: W,
            177: [
                0.13333,
                0.63333,
                0,
                0
            ],
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: $,
            215: [
                0.13333,
                0.63333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0,
                0
            ],
            223: W,
            230: Z,
            247: [
                0.13333,
                0.63333,
                0,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0,
                0
            ],
            305: Z,
            338: $,
            339: Z,
            567: hb,
            710: W,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.59611,
                0,
                0
            ],
            714: W,
            715: W,
            728: W,
            729: W,
            730: W,
            732: W,
            733: W,
            915: $,
            916: $,
            920: $,
            923: $,
            926: $,
            928: $,
            931: $,
            933: $,
            934: $,
            936: $,
            937: $,
            8211: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8212: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W,
            8224: ab,
            8225: ab,
            8242: jb,
            8407: [
                0,
                0.72444,
                0.15486,
                0
            ],
            8463: W,
            8465: W,
            8467: W,
            8472: hb,
            8476: W,
            8501: W,
            8592: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8593: ab,
            8594: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8595: ab,
            8596: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8597: Y,
            8598: ab,
            8599: ab,
            8600: ab,
            8601: ab,
            8636: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8637: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8640: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8641: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8656: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8657: ab,
            8658: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8659: ab,
            8660: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8661: Y,
            8704: W,
            8706: [
                0,
                0.69444,
                0.06389,
                0
            ],
            8707: W,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: $,
            8712: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8715: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8722: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8723: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8725: Y,
            8726: Y,
            8727: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8728: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8729: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8730: [
                0.18,
                0.82,
                0,
                0
            ],
            8733: Z,
            8734: Z,
            8736: gb,
            8739: Y,
            8741: Y,
            8743: jb,
            8744: jb,
            8745: jb,
            8746: jb,
            8747: [
                0.19444,
                0.69444,
                0.12778,
                0
            ],
            8764: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8768: ab,
            8771: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8776: [
                0.02444,
                0.52444,
                0,
                0
            ],
            8781: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8801: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8804: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8805: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8810: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8811: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8826: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8827: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8834: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8835: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8838: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8839: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8846: jb,
            8849: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8850: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8851: jb,
            8852: jb,
            8853: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8854: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8855: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8856: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8857: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8866: W,
            8867: W,
            8868: W,
            8869: W,
            8900: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8901: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8902: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8968: Y,
            8969: Y,
            8970: Y,
            8971: Y,
            8994: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            8995: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            9651: ab,
            9657: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9661: ab,
            9667: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9711: ab,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: nb,
            9838: ab,
            9839: ab,
            10216: Y,
            10217: Y,
            10815: $,
            10927: [
                0.19667,
                0.69667,
                0,
                0
            ],
            10928: [
                0.19667,
                0.69667,
                0,
                0
            ],
            57376: ab
        },
        'Main-BoldItalic': {
            32: eb,
            33: [
                0,
                0.69444,
                0.11417,
                0
            ],
            34: [
                0,
                0.69444,
                0.07939,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06833,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.12861,
                0
            ],
            38: [
                0,
                0.69444,
                0.08528,
                0
            ],
            39: [
                0,
                0.69444,
                0.12945,
                0
            ],
            40: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03306,
                0
            ],
            42: [
                0,
                0.75,
                0.14333,
                0
            ],
            43: [
                0.10333,
                0.60333,
                0.03306,
                0
            ],
            44: [
                0.19444,
                0.14722,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.02611,
                0
            ],
            46: [
                0,
                0.14722,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            48: [
                0,
                0.64444,
                0.13167,
                0
            ],
            49: [
                0,
                0.64444,
                0.13167,
                0
            ],
            50: [
                0,
                0.64444,
                0.13167,
                0
            ],
            51: [
                0,
                0.64444,
                0.13167,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            53: [
                0,
                0.64444,
                0.13167,
                0
            ],
            54: [
                0,
                0.64444,
                0.13167,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            56: [
                0,
                0.64444,
                0.13167,
                0
            ],
            57: [
                0,
                0.64444,
                0.13167,
                0
            ],
            58: [
                0,
                0.44444,
                0.06695,
                0
            ],
            59: [
                0.19444,
                0.44444,
                0.06695,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0.06833,
                0
            ],
            63: [
                0,
                0.69444,
                0.11472,
                0
            ],
            64: [
                0,
                0.69444,
                0.09208,
                0
            ],
            65: $,
            66: [
                0,
                0.68611,
                0.0992,
                0
            ],
            67: [
                0,
                0.68611,
                0.14208,
                0
            ],
            68: [
                0,
                0.68611,
                0.09062,
                0
            ],
            69: [
                0,
                0.68611,
                0.11431,
                0
            ],
            70: [
                0,
                0.68611,
                0.12903,
                0
            ],
            71: [
                0,
                0.68611,
                0.07347,
                0
            ],
            72: [
                0,
                0.68611,
                0.17208,
                0
            ],
            73: [
                0,
                0.68611,
                0.15681,
                0
            ],
            74: [
                0,
                0.68611,
                0.145,
                0
            ],
            75: [
                0,
                0.68611,
                0.14208,
                0
            ],
            76: $,
            77: [
                0,
                0.68611,
                0.17208,
                0
            ],
            78: [
                0,
                0.68611,
                0.17208,
                0
            ],
            79: [
                0,
                0.68611,
                0.09062,
                0
            ],
            80: [
                0,
                0.68611,
                0.0992,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0.09062,
                0
            ],
            82: [
                0,
                0.68611,
                0.02559,
                0
            ],
            83: [
                0,
                0.68611,
                0.11264,
                0
            ],
            84: [
                0,
                0.68611,
                0.12903,
                0
            ],
            85: [
                0,
                0.68611,
                0.17208,
                0
            ],
            86: [
                0,
                0.68611,
                0.18625,
                0
            ],
            87: [
                0,
                0.68611,
                0.18625,
                0
            ],
            88: [
                0,
                0.68611,
                0.15681,
                0
            ],
            89: [
                0,
                0.68611,
                0.19803,
                0
            ],
            90: [
                0,
                0.68611,
                0.14208,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.09972,
                0
            ],
            94: [
                0,
                0.69444,
                0.06709,
                0
            ],
            95: [
                0.31,
                0.13444,
                0.09811,
                0
            ],
            97: [
                0,
                0.44444,
                0.09426,
                0
            ],
            98: [
                0,
                0.69444,
                0.07861,
                0
            ],
            99: [
                0,
                0.44444,
                0.05222,
                0
            ],
            100: [
                0,
                0.69444,
                0.10861,
                0
            ],
            101: [
                0,
                0.44444,
                0.085,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21778,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            104: [
                0,
                0.69444,
                0.09426,
                0
            ],
            105: [
                0,
                0.69326,
                0.11387,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.1672,
                0
            ],
            107: [
                0,
                0.69444,
                0.11111,
                0
            ],
            108: [
                0,
                0.69444,
                0.10861,
                0
            ],
            109: [
                0,
                0.44444,
                0.09426,
                0
            ],
            110: [
                0,
                0.44444,
                0.09426,
                0
            ],
            111: [
                0,
                0.44444,
                0.07861,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.07861,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            114: [
                0,
                0.44444,
                0.11111,
                0
            ],
            115: [
                0,
                0.44444,
                0.08167,
                0
            ],
            116: [
                0,
                0.63492,
                0.09639,
                0
            ],
            117: [
                0,
                0.44444,
                0.09426,
                0
            ],
            118: [
                0,
                0.44444,
                0.11111,
                0
            ],
            119: [
                0,
                0.44444,
                0.11111,
                0
            ],
            120: [
                0,
                0.44444,
                0.12583,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            122: [
                0,
                0.44444,
                0.13889,
                0
            ],
            126: [
                0.35,
                0.34444,
                0.11472,
                0
            ],
            160: eb,
            168: [
                0,
                0.69444,
                0.11473,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68611,
                0.11431,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0.09062,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.09736,
                0
            ],
            230: [
                0,
                0.44444,
                0.085,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0.09458,
                0
            ],
            305: [
                0,
                0.44444,
                0.09426,
                0
            ],
            338: [
                0,
                0.68611,
                0.11431,
                0
            ],
            339: [
                0,
                0.44444,
                0.085,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04611,
                0
            ],
            710: [
                0,
                0.69444,
                0.06709,
                0
            ],
            711: [
                0,
                0.63194,
                0.08271,
                0
            ],
            713: [
                0,
                0.59444,
                0.10444,
                0
            ],
            714: [
                0,
                0.69444,
                0.08528,
                0
            ],
            715: W,
            728: [
                0,
                0.69444,
                0.10333,
                0
            ],
            729: [
                0,
                0.69444,
                0.12945,
                0
            ],
            730: W,
            732: [
                0,
                0.69444,
                0.11472,
                0
            ],
            733: [
                0,
                0.69444,
                0.11472,
                0
            ],
            915: [
                0,
                0.68611,
                0.12903,
                0
            ],
            916: $,
            920: [
                0,
                0.68611,
                0.09062,
                0
            ],
            923: $,
            926: [
                0,
                0.68611,
                0.15092,
                0
            ],
            928: [
                0,
                0.68611,
                0.17208,
                0
            ],
            931: [
                0,
                0.68611,
                0.11431,
                0
            ],
            933: [
                0,
                0.68611,
                0.10778,
                0
            ],
            934: [
                0,
                0.68611,
                0.05632,
                0
            ],
            936: [
                0,
                0.68611,
                0.10778,
                0
            ],
            937: [
                0,
                0.68611,
                0.0992,
                0
            ],
            8211: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8212: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8220: [
                0,
                0.69444,
                0.16772,
                0
            ],
            8221: [
                0,
                0.69444,
                0.07939,
                0
            ]
        },
        'Main-Italic': {
            32: eb,
            33: [
                0,
                0.69444,
                0.12417,
                0
            ],
            34: [
                0,
                0.69444,
                0.06961,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06616,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.13639,
                0
            ],
            38: [
                0,
                0.69444,
                0.09694,
                0
            ],
            39: [
                0,
                0.69444,
                0.12417,
                0
            ],
            40: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03694,
                0
            ],
            42: [
                0,
                0.75,
                0.14917,
                0
            ],
            43: [
                0.05667,
                0.56167,
                0.03694,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0.02826,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            48: [
                0,
                0.64444,
                0.13556,
                0
            ],
            49: [
                0,
                0.64444,
                0.13556,
                0
            ],
            50: [
                0,
                0.64444,
                0.13556,
                0
            ],
            51: [
                0,
                0.64444,
                0.13556,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            53: [
                0,
                0.64444,
                0.13556,
                0
            ],
            54: [
                0,
                0.64444,
                0.13556,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            56: [
                0,
                0.64444,
                0.13556,
                0
            ],
            57: [
                0,
                0.64444,
                0.13556,
                0
            ],
            58: [
                0,
                0.43056,
                0.0582,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0.0582,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0.06616,
                0
            ],
            63: [
                0,
                0.69444,
                0.1225,
                0
            ],
            64: [
                0,
                0.69444,
                0.09597,
                0
            ],
            65: bb,
            66: [
                0,
                0.68333,
                0.10257,
                0
            ],
            67: [
                0,
                0.68333,
                0.14528,
                0
            ],
            68: [
                0,
                0.68333,
                0.09403,
                0
            ],
            69: [
                0,
                0.68333,
                0.12028,
                0
            ],
            70: [
                0,
                0.68333,
                0.13305,
                0
            ],
            71: [
                0,
                0.68333,
                0.08722,
                0
            ],
            72: [
                0,
                0.68333,
                0.16389,
                0
            ],
            73: [
                0,
                0.68333,
                0.15806,
                0
            ],
            74: [
                0,
                0.68333,
                0.14028,
                0
            ],
            75: [
                0,
                0.68333,
                0.14528,
                0
            ],
            76: bb,
            77: [
                0,
                0.68333,
                0.16389,
                0
            ],
            78: [
                0,
                0.68333,
                0.16389,
                0
            ],
            79: [
                0,
                0.68333,
                0.09403,
                0
            ],
            80: [
                0,
                0.68333,
                0.10257,
                0
            ],
            81: [
                0.19444,
                0.68333,
                0.09403,
                0
            ],
            82: [
                0,
                0.68333,
                0.03868,
                0
            ],
            83: [
                0,
                0.68333,
                0.11972,
                0
            ],
            84: [
                0,
                0.68333,
                0.13305,
                0
            ],
            85: [
                0,
                0.68333,
                0.16389,
                0
            ],
            86: [
                0,
                0.68333,
                0.18361,
                0
            ],
            87: [
                0,
                0.68333,
                0.18361,
                0
            ],
            88: [
                0,
                0.68333,
                0.15806,
                0
            ],
            89: [
                0,
                0.68333,
                0.19383,
                0
            ],
            90: [
                0,
                0.68333,
                0.14528,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.10528,
                0
            ],
            94: [
                0,
                0.69444,
                0.06646,
                0
            ],
            95: [
                0.31,
                0.12056,
                0.09208,
                0
            ],
            97: [
                0,
                0.43056,
                0.07671,
                0
            ],
            98: [
                0,
                0.69444,
                0.06312,
                0
            ],
            99: [
                0,
                0.43056,
                0.05653,
                0
            ],
            100: [
                0,
                0.69444,
                0.10333,
                0
            ],
            101: [
                0,
                0.43056,
                0.07514,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21194,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            104: [
                0,
                0.69444,
                0.07671,
                0
            ],
            105: [
                0,
                0.65536,
                0.1019,
                0
            ],
            106: [
                0.19444,
                0.65536,
                0.14467,
                0
            ],
            107: [
                0,
                0.69444,
                0.10764,
                0
            ],
            108: [
                0,
                0.69444,
                0.10333,
                0
            ],
            109: [
                0,
                0.43056,
                0.07671,
                0
            ],
            110: [
                0,
                0.43056,
                0.07671,
                0
            ],
            111: [
                0,
                0.43056,
                0.06312,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0.06312,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            114: [
                0,
                0.43056,
                0.10764,
                0
            ],
            115: [
                0,
                0.43056,
                0.08208,
                0
            ],
            116: [
                0,
                0.61508,
                0.09486,
                0
            ],
            117: [
                0,
                0.43056,
                0.07671,
                0
            ],
            118: [
                0,
                0.43056,
                0.10764,
                0
            ],
            119: [
                0,
                0.43056,
                0.10764,
                0
            ],
            120: [
                0,
                0.43056,
                0.12042,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            122: [
                0,
                0.43056,
                0.12292,
                0
            ],
            126: [
                0.35,
                0.31786,
                0.11585,
                0
            ],
            160: eb,
            168: [
                0,
                0.66786,
                0.10474,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68333,
                0.12028,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0.09403,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.10514,
                0
            ],
            230: [
                0,
                0.43056,
                0.07514,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0.09194,
                0
            ],
            338: [
                0,
                0.68333,
                0.12028,
                0
            ],
            339: [
                0,
                0.43056,
                0.07514,
                0
            ],
            710: [
                0,
                0.69444,
                0.06646,
                0
            ],
            711: [
                0,
                0.62847,
                0.08295,
                0
            ],
            713: [
                0,
                0.56167,
                0.10333,
                0
            ],
            714: [
                0,
                0.69444,
                0.09694,
                0
            ],
            715: W,
            728: [
                0,
                0.69444,
                0.10806,
                0
            ],
            729: [
                0,
                0.66786,
                0.11752,
                0
            ],
            730: W,
            732: [
                0,
                0.66786,
                0.11585,
                0
            ],
            733: [
                0,
                0.69444,
                0.1225,
                0
            ],
            915: [
                0,
                0.68333,
                0.13305,
                0
            ],
            916: bb,
            920: [
                0,
                0.68333,
                0.09403,
                0
            ],
            923: bb,
            926: [
                0,
                0.68333,
                0.15294,
                0
            ],
            928: [
                0,
                0.68333,
                0.16389,
                0
            ],
            931: [
                0,
                0.68333,
                0.12028,
                0
            ],
            933: [
                0,
                0.68333,
                0.11111,
                0
            ],
            934: [
                0,
                0.68333,
                0.05986,
                0
            ],
            936: [
                0,
                0.68333,
                0.11111,
                0
            ],
            937: [
                0,
                0.68333,
                0.10257,
                0
            ],
            8211: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8212: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8220: [
                0,
                0.69444,
                0.1685,
                0
            ],
            8221: [
                0,
                0.69444,
                0.06961,
                0
            ],
            8463: cb
        },
        'Main-Regular': {
            32: eb,
            33: W,
            34: W,
            35: ab,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: nb,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: Y,
            48: fb,
            49: fb,
            50: fb,
            51: fb,
            52: fb,
            53: fb,
            54: fb,
            55: fb,
            56: fb,
            57: fb,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0,
                0
            ],
            60: [
                0.0391,
                0.5391,
                0,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            62: [
                0.0391,
                0.5391,
                0,
                0
            ],
            63: W,
            64: W,
            65: bb,
            66: bb,
            67: bb,
            68: bb,
            69: bb,
            70: bb,
            71: bb,
            72: bb,
            73: bb,
            74: bb,
            75: bb,
            76: bb,
            77: bb,
            78: bb,
            79: bb,
            80: bb,
            81: [
                0.19444,
                0.68333,
                0,
                0
            ],
            82: bb,
            83: bb,
            84: bb,
            85: bb,
            86: [
                0,
                0.68333,
                0.01389,
                0
            ],
            87: [
                0,
                0.68333,
                0.01389,
                0
            ],
            88: bb,
            89: [
                0,
                0.68333,
                0.025,
                0
            ],
            90: bb,
            91: Y,
            92: Y,
            93: Y,
            94: W,
            95: [
                0.31,
                0.12056,
                0.02778,
                0
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: W,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: W,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07778,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            104: W,
            105: [
                0,
                0.66786,
                0,
                0
            ],
            106: [
                0.19444,
                0.66786,
                0,
                0
            ],
            107: W,
            108: W,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.61508,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0.01389,
                0
            ],
            119: [
                0,
                0.43056,
                0.01389,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: Y,
            124: Y,
            125: Y,
            126: [
                0.35,
                0.31786,
                0,
                0
            ],
            160: eb,
            163: W,
            167: ab,
            168: [
                0,
                0.66786,
                0,
                0
            ],
            172: [
                0,
                0.43056,
                0,
                0
            ],
            176: W,
            177: [
                0.08333,
                0.58333,
                0,
                0
            ],
            182: ab,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: bb,
            215: [
                0.08333,
                0.58333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0,
                0
            ],
            223: W,
            230: [
                0,
                0.43056,
                0,
                0
            ],
            247: [
                0.08333,
                0.58333,
                0,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            338: bb,
            339: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.19444,
                0.43056,
                0,
                0
            ],
            710: W,
            711: [
                0,
                0.62847,
                0,
                0
            ],
            713: [
                0,
                0.56778,
                0,
                0
            ],
            714: W,
            715: W,
            728: W,
            729: [
                0,
                0.66786,
                0,
                0
            ],
            730: W,
            732: [
                0,
                0.66786,
                0,
                0
            ],
            733: W,
            915: bb,
            916: bb,
            920: bb,
            923: bb,
            926: bb,
            928: bb,
            931: bb,
            933: bb,
            934: bb,
            936: bb,
            937: bb,
            8211: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8212: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W,
            8224: ab,
            8225: ab,
            8230: [
                0,
                0.12,
                0,
                0
            ],
            8242: jb,
            8407: [
                0,
                0.71444,
                0.15382,
                0
            ],
            8463: cb,
            8465: W,
            8467: [
                0,
                0.69444,
                0,
                0.11111
            ],
            8472: [
                0.19444,
                0.43056,
                0,
                0.11111
            ],
            8476: W,
            8501: W,
            8592: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8593: ab,
            8594: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8595: ab,
            8596: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8597: Y,
            8598: ab,
            8599: ab,
            8600: ab,
            8601: ab,
            8614: [
                0.011,
                0.511,
                0,
                0
            ],
            8617: [
                0.011,
                0.511,
                0,
                0
            ],
            8618: [
                0.011,
                0.511,
                0,
                0
            ],
            8636: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8637: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8640: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8641: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8652: [
                0.011,
                0.671,
                0,
                0
            ],
            8656: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8657: ab,
            8658: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8659: ab,
            8660: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8661: Y,
            8704: W,
            8706: [
                0,
                0.69444,
                0.05556,
                0.08334
            ],
            8707: W,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: bb,
            8712: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8715: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8722: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8723: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8725: Y,
            8726: Y,
            8727: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8728: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8729: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8730: [
                0.2,
                0.8,
                0,
                0
            ],
            8733: [
                0,
                0.43056,
                0,
                0
            ],
            8734: [
                0,
                0.43056,
                0,
                0
            ],
            8736: gb,
            8739: Y,
            8741: Y,
            8743: jb,
            8744: jb,
            8745: jb,
            8746: jb,
            8747: [
                0.19444,
                0.69444,
                0.11111,
                0
            ],
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8768: ab,
            8771: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8773: [
                -0.022,
                0.589,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8781: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8784: [
                -0.133,
                0.67,
                0,
                0
            ],
            8801: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8804: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8805: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8810: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8811: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8826: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8827: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8834: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8835: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8838: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8839: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8846: jb,
            8849: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8850: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8851: jb,
            8852: jb,
            8853: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8854: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8855: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8856: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8857: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8866: W,
            8867: W,
            8868: W,
            8869: W,
            8872: [
                0.249,
                0.75,
                0,
                0
            ],
            8900: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8901: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8902: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8904: [
                0.005,
                0.505,
                0,
                0
            ],
            8942: [
                0.03,
                0.9,
                0,
                0
            ],
            8943: [
                -0.19,
                0.31,
                0,
                0
            ],
            8945: [
                -0.1,
                0.82,
                0,
                0
            ],
            8968: Y,
            8969: Y,
            8970: Y,
            8971: Y,
            8994: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            8995: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            9136: [
                0.244,
                0.744,
                0,
                0
            ],
            9137: [
                0.244,
                0.744,
                0,
                0
            ],
            9651: ab,
            9657: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9661: ab,
            9667: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9711: ab,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: nb,
            9838: ab,
            9839: ab,
            10216: Y,
            10217: Y,
            10222: [
                0.244,
                0.744,
                0,
                0
            ],
            10223: [
                0.244,
                0.744,
                0,
                0
            ],
            10229: [
                0.011,
                0.511,
                0,
                0
            ],
            10230: [
                0.011,
                0.511,
                0,
                0
            ],
            10231: [
                0.011,
                0.511,
                0,
                0
            ],
            10232: [
                0.024,
                0.525,
                0,
                0
            ],
            10233: [
                0.024,
                0.525,
                0,
                0
            ],
            10234: [
                0.024,
                0.525,
                0,
                0
            ],
            10236: [
                0.011,
                0.511,
                0,
                0
            ],
            10815: bb,
            10927: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10928: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57376: ab
        },
        'Math-BoldItalic': {
            32: eb,
            48: Z,
            49: Z,
            50: Z,
            51: hb,
            52: hb,
            53: hb,
            54: fb,
            55: hb,
            56: fb,
            57: hb,
            65: $,
            66: [
                0,
                0.68611,
                0.04835,
                0
            ],
            67: [
                0,
                0.68611,
                0.06979,
                0
            ],
            68: [
                0,
                0.68611,
                0.03194,
                0
            ],
            69: [
                0,
                0.68611,
                0.05451,
                0
            ],
            70: [
                0,
                0.68611,
                0.15972,
                0
            ],
            71: $,
            72: [
                0,
                0.68611,
                0.08229,
                0
            ],
            73: [
                0,
                0.68611,
                0.07778,
                0
            ],
            74: [
                0,
                0.68611,
                0.10069,
                0
            ],
            75: [
                0,
                0.68611,
                0.06979,
                0
            ],
            76: $,
            77: [
                0,
                0.68611,
                0.11424,
                0
            ],
            78: [
                0,
                0.68611,
                0.11424,
                0
            ],
            79: [
                0,
                0.68611,
                0.03194,
                0
            ],
            80: [
                0,
                0.68611,
                0.15972,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: [
                0,
                0.68611,
                0.00421,
                0
            ],
            83: [
                0,
                0.68611,
                0.05382,
                0
            ],
            84: [
                0,
                0.68611,
                0.15972,
                0
            ],
            85: [
                0,
                0.68611,
                0.11424,
                0
            ],
            86: [
                0,
                0.68611,
                0.25555,
                0
            ],
            87: [
                0,
                0.68611,
                0.15972,
                0
            ],
            88: [
                0,
                0.68611,
                0.07778,
                0
            ],
            89: [
                0,
                0.68611,
                0.25555,
                0
            ],
            90: [
                0,
                0.68611,
                0.06979,
                0
            ],
            97: Z,
            98: W,
            99: Z,
            100: W,
            101: Z,
            102: [
                0.19444,
                0.69444,
                0.11042,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            104: W,
            105: [
                0,
                0.69326,
                0,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.0622,
                0
            ],
            107: [
                0,
                0.69444,
                0.01852,
                0
            ],
            108: [
                0,
                0.69444,
                0.0088,
                0
            ],
            109: Z,
            110: Z,
            111: Z,
            112: hb,
            113: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            114: [
                0,
                0.44444,
                0.03194,
                0
            ],
            115: Z,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: Z,
            118: [
                0,
                0.44444,
                0.03704,
                0
            ],
            119: [
                0,
                0.44444,
                0.02778,
                0
            ],
            120: Z,
            121: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            122: [
                0,
                0.44444,
                0.04213,
                0
            ],
            160: eb,
            915: [
                0,
                0.68611,
                0.15972,
                0
            ],
            916: $,
            920: [
                0,
                0.68611,
                0.03194,
                0
            ],
            923: $,
            926: [
                0,
                0.68611,
                0.07458,
                0
            ],
            928: [
                0,
                0.68611,
                0.08229,
                0
            ],
            931: [
                0,
                0.68611,
                0.05451,
                0
            ],
            933: [
                0,
                0.68611,
                0.15972,
                0
            ],
            934: $,
            936: [
                0,
                0.68611,
                0.11653,
                0
            ],
            937: [
                0,
                0.68611,
                0.04835,
                0
            ],
            945: Z,
            946: [
                0.19444,
                0.69444,
                0.03403,
                0
            ],
            947: [
                0.19444,
                0.44444,
                0.06389,
                0
            ],
            948: [
                0,
                0.69444,
                0.03819,
                0
            ],
            949: Z,
            950: [
                0.19444,
                0.69444,
                0.06215,
                0
            ],
            951: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            952: [
                0,
                0.69444,
                0.03194,
                0
            ],
            953: Z,
            954: Z,
            955: W,
            956: hb,
            957: [
                0,
                0.44444,
                0.06898,
                0
            ],
            958: [
                0.19444,
                0.69444,
                0.03021,
                0
            ],
            959: Z,
            960: [
                0,
                0.44444,
                0.03704,
                0
            ],
            961: hb,
            962: [
                0.09722,
                0.44444,
                0.07917,
                0
            ],
            963: [
                0,
                0.44444,
                0.03704,
                0
            ],
            964: [
                0,
                0.44444,
                0.13472,
                0
            ],
            965: [
                0,
                0.44444,
                0.03704,
                0
            ],
            966: hb,
            967: hb,
            968: [
                0.19444,
                0.69444,
                0.03704,
                0
            ],
            969: [
                0,
                0.44444,
                0.03704,
                0
            ],
            977: W,
            981: ab,
            982: [
                0,
                0.44444,
                0.03194,
                0
            ],
            1009: hb,
            1013: Z,
            57649: Z,
            57911: hb
        },
        'Math-Italic': {
            32: eb,
            48: [
                0,
                0.43056,
                0,
                0
            ],
            49: [
                0,
                0.43056,
                0,
                0
            ],
            50: [
                0,
                0.43056,
                0,
                0
            ],
            51: [
                0.19444,
                0.43056,
                0,
                0
            ],
            52: [
                0.19444,
                0.43056,
                0,
                0
            ],
            53: [
                0.19444,
                0.43056,
                0,
                0
            ],
            54: fb,
            55: [
                0.19444,
                0.43056,
                0,
                0
            ],
            56: fb,
            57: [
                0.19444,
                0.43056,
                0,
                0
            ],
            65: [
                0,
                0.68333,
                0,
                0.13889
            ],
            66: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            67: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.05556
            ],
            69: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            70: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            71: [
                0,
                0.68333,
                0,
                0.08334
            ],
            72: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            73: [
                0,
                0.68333,
                0.07847,
                0.11111
            ],
            74: [
                0,
                0.68333,
                0.09618,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.07153,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.02778
            ],
            77: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            78: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            80: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            81: [
                0.19444,
                0.68333,
                0,
                0.08334
            ],
            82: [
                0,
                0.68333,
                0.00773,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            84: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            85: [
                0,
                0.68333,
                0.10903,
                0.02778
            ],
            86: [
                0,
                0.68333,
                0.22222,
                0
            ],
            87: [
                0,
                0.68333,
                0.13889,
                0
            ],
            88: [
                0,
                0.68333,
                0.07847,
                0.08334
            ],
            89: [
                0,
                0.68333,
                0.22222,
                0
            ],
            90: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: W,
            99: [
                0,
                0.43056,
                0,
                0.05556
            ],
            100: [
                0,
                0.69444,
                0,
                0.16667
            ],
            101: [
                0,
                0.43056,
                0,
                0.05556
            ],
            102: [
                0.19444,
                0.69444,
                0.10764,
                0.16667
            ],
            103: [
                0.19444,
                0.43056,
                0.03588,
                0.02778
            ],
            104: W,
            105: [
                0,
                0.65952,
                0,
                0
            ],
            106: [
                0.19444,
                0.65952,
                0.05724,
                0
            ],
            107: [
                0,
                0.69444,
                0.03148,
                0
            ],
            108: [
                0,
                0.69444,
                0.01968,
                0.08334
            ],
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0.05556
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            113: [
                0.19444,
                0.43056,
                0.03588,
                0.08334
            ],
            114: [
                0,
                0.43056,
                0.02778,
                0.05556
            ],
            115: [
                0,
                0.43056,
                0,
                0.05556
            ],
            116: [
                0,
                0.61508,
                0,
                0.08334
            ],
            117: [
                0,
                0.43056,
                0,
                0.02778
            ],
            118: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            119: [
                0,
                0.43056,
                0.02691,
                0.08334
            ],
            120: [
                0,
                0.43056,
                0,
                0.02778
            ],
            121: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            122: [
                0,
                0.43056,
                0.04398,
                0.05556
            ],
            160: eb,
            915: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            916: [
                0,
                0.68333,
                0,
                0.16667
            ],
            920: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            923: [
                0,
                0.68333,
                0,
                0.16667
            ],
            926: [
                0,
                0.68333,
                0.07569,
                0.08334
            ],
            928: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            931: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            933: [
                0,
                0.68333,
                0.13889,
                0.05556
            ],
            934: [
                0,
                0.68333,
                0,
                0.08334
            ],
            936: [
                0,
                0.68333,
                0.11,
                0.05556
            ],
            937: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            945: [
                0,
                0.43056,
                0.0037,
                0.02778
            ],
            946: [
                0.19444,
                0.69444,
                0.05278,
                0.08334
            ],
            947: [
                0.19444,
                0.43056,
                0.05556,
                0
            ],
            948: [
                0,
                0.69444,
                0.03785,
                0.05556
            ],
            949: [
                0,
                0.43056,
                0,
                0.08334
            ],
            950: [
                0.19444,
                0.69444,
                0.07378,
                0.08334
            ],
            951: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            952: [
                0,
                0.69444,
                0.02778,
                0.08334
            ],
            953: [
                0,
                0.43056,
                0,
                0.05556
            ],
            954: [
                0,
                0.43056,
                0,
                0
            ],
            955: W,
            956: [
                0.19444,
                0.43056,
                0,
                0.02778
            ],
            957: [
                0,
                0.43056,
                0.06366,
                0.02778
            ],
            958: [
                0.19444,
                0.69444,
                0.04601,
                0.11111
            ],
            959: [
                0,
                0.43056,
                0,
                0.05556
            ],
            960: [
                0,
                0.43056,
                0.03588,
                0
            ],
            961: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            962: [
                0.09722,
                0.43056,
                0.07986,
                0.08334
            ],
            963: [
                0,
                0.43056,
                0.03588,
                0
            ],
            964: [
                0,
                0.43056,
                0.1132,
                0.02778
            ],
            965: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            966: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            967: [
                0.19444,
                0.43056,
                0,
                0.05556
            ],
            968: [
                0.19444,
                0.69444,
                0.03588,
                0.11111
            ],
            969: [
                0,
                0.43056,
                0.03588,
                0
            ],
            977: [
                0,
                0.69444,
                0,
                0.08334
            ],
            981: [
                0.19444,
                0.69444,
                0,
                0.08334
            ],
            982: [
                0,
                0.43056,
                0.02778,
                0
            ],
            1009: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            1013: [
                0,
                0.43056,
                0,
                0.05556
            ],
            57649: [
                0,
                0.43056,
                0,
                0.02778
            ],
            57911: [
                0.19444,
                0.43056,
                0,
                0.08334
            ]
        },
        'SansSerif-Bold': {
            32: eb,
            33: W,
            34: W,
            35: ab,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: nb,
            43: [
                0.11667,
                0.61667,
                0,
                0
            ],
            44: [
                0.10556,
                0.13056,
                0,
                0
            ],
            45: [
                0,
                0.45833,
                0,
                0
            ],
            46: [
                0,
                0.13056,
                0,
                0
            ],
            47: Y,
            48: W,
            49: W,
            50: W,
            51: W,
            52: W,
            53: W,
            54: W,
            55: W,
            56: W,
            57: W,
            58: [
                0,
                0.45833,
                0,
                0
            ],
            59: [
                0.10556,
                0.45833,
                0,
                0
            ],
            61: [
                -0.09375,
                0.40625,
                0,
                0
            ],
            63: W,
            64: W,
            65: W,
            66: W,
            67: W,
            68: W,
            69: W,
            70: W,
            71: W,
            72: W,
            73: W,
            74: W,
            75: W,
            76: W,
            77: W,
            78: W,
            79: W,
            80: W,
            81: [
                0.10556,
                0.69444,
                0,
                0
            ],
            82: W,
            83: W,
            84: W,
            85: W,
            86: [
                0,
                0.69444,
                0.01528,
                0
            ],
            87: [
                0,
                0.69444,
                0.01528,
                0
            ],
            88: W,
            89: [
                0,
                0.69444,
                0.0275,
                0
            ],
            90: W,
            91: Y,
            93: Y,
            94: W,
            95: [
                0.35,
                0.10833,
                0.03056,
                0
            ],
            97: [
                0,
                0.45833,
                0,
                0
            ],
            98: W,
            99: [
                0,
                0.45833,
                0,
                0
            ],
            100: W,
            101: [
                0,
                0.45833,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07639,
                0
            ],
            103: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            104: W,
            105: W,
            106: ab,
            107: W,
            108: W,
            109: [
                0,
                0.45833,
                0,
                0
            ],
            110: [
                0,
                0.45833,
                0,
                0
            ],
            111: [
                0,
                0.45833,
                0,
                0
            ],
            112: [
                0.19444,
                0.45833,
                0,
                0
            ],
            113: [
                0.19444,
                0.45833,
                0,
                0
            ],
            114: [
                0,
                0.45833,
                0.01528,
                0
            ],
            115: [
                0,
                0.45833,
                0,
                0
            ],
            116: [
                0,
                0.58929,
                0,
                0
            ],
            117: [
                0,
                0.45833,
                0,
                0
            ],
            118: [
                0,
                0.45833,
                0.01528,
                0
            ],
            119: [
                0,
                0.45833,
                0.01528,
                0
            ],
            120: [
                0,
                0.45833,
                0,
                0
            ],
            121: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            122: [
                0,
                0.45833,
                0,
                0
            ],
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: eb,
            168: W,
            176: W,
            180: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.45833,
                0,
                0
            ],
            567: [
                0.19444,
                0.45833,
                0,
                0
            ],
            710: W,
            711: [
                0,
                0.63542,
                0,
                0
            ],
            713: [
                0,
                0.63778,
                0,
                0
            ],
            728: W,
            729: W,
            730: W,
            732: W,
            733: W,
            915: W,
            916: W,
            920: W,
            923: W,
            926: W,
            928: W,
            931: W,
            933: W,
            934: W,
            936: W,
            937: W,
            8211: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8212: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W
        },
        'SansSerif-Italic': {
            32: eb,
            33: [
                0,
                0.69444,
                0.05733,
                0
            ],
            34: [
                0,
                0.69444,
                0.00316,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.05087,
                0
            ],
            36: [
                0.05556,
                0.75,
                0.11156,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.03126,
                0
            ],
            38: [
                0,
                0.69444,
                0.03058,
                0
            ],
            39: [
                0,
                0.69444,
                0.07816,
                0
            ],
            40: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            41: [
                0.25,
                0.75,
                0.02536,
                0
            ],
            42: [
                0,
                0.75,
                0.11775,
                0
            ],
            43: [
                0.08333,
                0.58333,
                0.02536,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.01946,
                0
            ],
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            48: [
                0,
                0.65556,
                0.11156,
                0
            ],
            49: [
                0,
                0.65556,
                0.11156,
                0
            ],
            50: [
                0,
                0.65556,
                0.11156,
                0
            ],
            51: [
                0,
                0.65556,
                0.11156,
                0
            ],
            52: [
                0,
                0.65556,
                0.11156,
                0
            ],
            53: [
                0,
                0.65556,
                0.11156,
                0
            ],
            54: [
                0,
                0.65556,
                0.11156,
                0
            ],
            55: [
                0,
                0.65556,
                0.11156,
                0
            ],
            56: [
                0,
                0.65556,
                0.11156,
                0
            ],
            57: [
                0,
                0.65556,
                0.11156,
                0
            ],
            58: [
                0,
                0.44444,
                0.02502,
                0
            ],
            59: [
                0.125,
                0.44444,
                0.02502,
                0
            ],
            61: [
                -0.13,
                0.37,
                0.05087,
                0
            ],
            63: [
                0,
                0.69444,
                0.11809,
                0
            ],
            64: [
                0,
                0.69444,
                0.07555,
                0
            ],
            65: W,
            66: [
                0,
                0.69444,
                0.08293,
                0
            ],
            67: [
                0,
                0.69444,
                0.11983,
                0
            ],
            68: [
                0,
                0.69444,
                0.07555,
                0
            ],
            69: [
                0,
                0.69444,
                0.11983,
                0
            ],
            70: [
                0,
                0.69444,
                0.13372,
                0
            ],
            71: [
                0,
                0.69444,
                0.11983,
                0
            ],
            72: [
                0,
                0.69444,
                0.08094,
                0
            ],
            73: [
                0,
                0.69444,
                0.13372,
                0
            ],
            74: [
                0,
                0.69444,
                0.08094,
                0
            ],
            75: [
                0,
                0.69444,
                0.11983,
                0
            ],
            76: W,
            77: [
                0,
                0.69444,
                0.08094,
                0
            ],
            78: [
                0,
                0.69444,
                0.08094,
                0
            ],
            79: [
                0,
                0.69444,
                0.07555,
                0
            ],
            80: [
                0,
                0.69444,
                0.08293,
                0
            ],
            81: [
                0.125,
                0.69444,
                0.07555,
                0
            ],
            82: [
                0,
                0.69444,
                0.08293,
                0
            ],
            83: [
                0,
                0.69444,
                0.09205,
                0
            ],
            84: [
                0,
                0.69444,
                0.13372,
                0
            ],
            85: [
                0,
                0.69444,
                0.08094,
                0
            ],
            86: [
                0,
                0.69444,
                0.1615,
                0
            ],
            87: [
                0,
                0.69444,
                0.1615,
                0
            ],
            88: [
                0,
                0.69444,
                0.13372,
                0
            ],
            89: [
                0,
                0.69444,
                0.17261,
                0
            ],
            90: [
                0,
                0.69444,
                0.11983,
                0
            ],
            91: [
                0.25,
                0.75,
                0.15942,
                0
            ],
            93: [
                0.25,
                0.75,
                0.08719,
                0
            ],
            94: [
                0,
                0.69444,
                0.0799,
                0
            ],
            95: [
                0.35,
                0.09444,
                0.08616,
                0
            ],
            97: [
                0,
                0.44444,
                0.00981,
                0
            ],
            98: [
                0,
                0.69444,
                0.03057,
                0
            ],
            99: [
                0,
                0.44444,
                0.08336,
                0
            ],
            100: [
                0,
                0.69444,
                0.09483,
                0
            ],
            101: [
                0,
                0.44444,
                0.06778,
                0
            ],
            102: [
                0,
                0.69444,
                0.21705,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            104: [
                0,
                0.69444,
                0.01778,
                0
            ],
            105: [
                0,
                0.67937,
                0.09718,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0.09162,
                0
            ],
            107: [
                0,
                0.69444,
                0.08336,
                0
            ],
            108: [
                0,
                0.69444,
                0.09483,
                0
            ],
            109: [
                0,
                0.44444,
                0.01778,
                0
            ],
            110: [
                0,
                0.44444,
                0.01778,
                0
            ],
            111: [
                0,
                0.44444,
                0.06613,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.0389,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            114: [
                0,
                0.44444,
                0.10836,
                0
            ],
            115: [
                0,
                0.44444,
                0.0778,
                0
            ],
            116: [
                0,
                0.57143,
                0.07225,
                0
            ],
            117: [
                0,
                0.44444,
                0.04169,
                0
            ],
            118: [
                0,
                0.44444,
                0.10836,
                0
            ],
            119: [
                0,
                0.44444,
                0.10836,
                0
            ],
            120: [
                0,
                0.44444,
                0.09169,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            122: [
                0,
                0.44444,
                0.08752,
                0
            ],
            126: [
                0.35,
                0.32659,
                0.08826,
                0
            ],
            160: eb,
            168: [
                0,
                0.67937,
                0.06385,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.44444,
                0.04169,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            710: [
                0,
                0.69444,
                0.0799,
                0
            ],
            711: [
                0,
                0.63194,
                0.08432,
                0
            ],
            713: [
                0,
                0.60889,
                0.08776,
                0
            ],
            714: [
                0,
                0.69444,
                0.09205,
                0
            ],
            715: W,
            728: [
                0,
                0.69444,
                0.09483,
                0
            ],
            729: [
                0,
                0.67937,
                0.07774,
                0
            ],
            730: W,
            732: [
                0,
                0.67659,
                0.08826,
                0
            ],
            733: [
                0,
                0.69444,
                0.09205,
                0
            ],
            915: [
                0,
                0.69444,
                0.13372,
                0
            ],
            916: W,
            920: [
                0,
                0.69444,
                0.07555,
                0
            ],
            923: W,
            926: [
                0,
                0.69444,
                0.12816,
                0
            ],
            928: [
                0,
                0.69444,
                0.08094,
                0
            ],
            931: [
                0,
                0.69444,
                0.11983,
                0
            ],
            933: [
                0,
                0.69444,
                0.09031,
                0
            ],
            934: [
                0,
                0.69444,
                0.04603,
                0
            ],
            936: [
                0,
                0.69444,
                0.09031,
                0
            ],
            937: [
                0,
                0.69444,
                0.08293,
                0
            ],
            8211: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8212: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8216: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8217: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8220: [
                0,
                0.69444,
                0.14205,
                0
            ],
            8221: [
                0,
                0.69444,
                0.00316,
                0
            ]
        },
        'SansSerif-Regular': {
            32: eb,
            33: W,
            34: W,
            35: ab,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: W,
            39: W,
            40: Y,
            41: Y,
            42: nb,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: Z,
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: Y,
            48: [
                0,
                0.65556,
                0,
                0
            ],
            49: [
                0,
                0.65556,
                0,
                0
            ],
            50: [
                0,
                0.65556,
                0,
                0
            ],
            51: [
                0,
                0.65556,
                0,
                0
            ],
            52: [
                0,
                0.65556,
                0,
                0
            ],
            53: [
                0,
                0.65556,
                0,
                0
            ],
            54: [
                0,
                0.65556,
                0,
                0
            ],
            55: [
                0,
                0.65556,
                0,
                0
            ],
            56: [
                0,
                0.65556,
                0,
                0
            ],
            57: [
                0,
                0.65556,
                0,
                0
            ],
            58: Z,
            59: [
                0.125,
                0.44444,
                0,
                0
            ],
            61: [
                -0.13,
                0.37,
                0,
                0
            ],
            63: W,
            64: W,
            65: W,
            66: W,
            67: W,
            68: W,
            69: W,
            70: W,
            71: W,
            72: W,
            73: W,
            74: W,
            75: W,
            76: W,
            77: W,
            78: W,
            79: W,
            80: W,
            81: [
                0.125,
                0.69444,
                0,
                0
            ],
            82: W,
            83: W,
            84: W,
            85: W,
            86: [
                0,
                0.69444,
                0.01389,
                0
            ],
            87: [
                0,
                0.69444,
                0.01389,
                0
            ],
            88: W,
            89: [
                0,
                0.69444,
                0.025,
                0
            ],
            90: W,
            91: Y,
            93: Y,
            94: W,
            95: [
                0.35,
                0.09444,
                0.02778,
                0
            ],
            97: Z,
            98: W,
            99: Z,
            100: W,
            101: Z,
            102: [
                0,
                0.69444,
                0.06944,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            104: W,
            105: [
                0,
                0.67937,
                0,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0,
                0
            ],
            107: W,
            108: W,
            109: Z,
            110: Z,
            111: Z,
            112: hb,
            113: hb,
            114: [
                0,
                0.44444,
                0.01389,
                0
            ],
            115: Z,
            116: [
                0,
                0.57143,
                0,
                0
            ],
            117: Z,
            118: [
                0,
                0.44444,
                0.01389,
                0
            ],
            119: [
                0,
                0.44444,
                0.01389,
                0
            ],
            120: Z,
            121: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            122: Z,
            126: [
                0.35,
                0.32659,
                0,
                0
            ],
            160: eb,
            168: [
                0,
                0.67937,
                0,
                0
            ],
            176: W,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: Z,
            567: hb,
            710: W,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.60889,
                0,
                0
            ],
            714: W,
            715: W,
            728: W,
            729: [
                0,
                0.67937,
                0,
                0
            ],
            730: W,
            732: [
                0,
                0.67659,
                0,
                0
            ],
            733: W,
            915: W,
            916: W,
            920: W,
            923: W,
            926: W,
            928: W,
            931: W,
            933: W,
            934: W,
            936: W,
            937: W,
            8211: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8212: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8216: W,
            8217: W,
            8220: W,
            8221: W
        },
        'Script-Regular': {
            32: eb,
            65: [
                0,
                0.7,
                0.22925,
                0
            ],
            66: [
                0,
                0.7,
                0.04087,
                0
            ],
            67: [
                0,
                0.7,
                0.1689,
                0
            ],
            68: [
                0,
                0.7,
                0.09371,
                0
            ],
            69: [
                0,
                0.7,
                0.18583,
                0
            ],
            70: [
                0,
                0.7,
                0.13634,
                0
            ],
            71: [
                0,
                0.7,
                0.17322,
                0
            ],
            72: [
                0,
                0.7,
                0.29694,
                0
            ],
            73: [
                0,
                0.7,
                0.19189,
                0
            ],
            74: [
                0.27778,
                0.7,
                0.19189,
                0
            ],
            75: [
                0,
                0.7,
                0.31259,
                0
            ],
            76: [
                0,
                0.7,
                0.19189,
                0
            ],
            77: [
                0,
                0.7,
                0.15981,
                0
            ],
            78: [
                0,
                0.7,
                0.3525,
                0
            ],
            79: [
                0,
                0.7,
                0.08078,
                0
            ],
            80: [
                0,
                0.7,
                0.08078,
                0
            ],
            81: [
                0,
                0.7,
                0.03305,
                0
            ],
            82: [
                0,
                0.7,
                0.06259,
                0
            ],
            83: [
                0,
                0.7,
                0.19189,
                0
            ],
            84: [
                0,
                0.7,
                0.29087,
                0
            ],
            85: [
                0,
                0.7,
                0.25815,
                0
            ],
            86: [
                0,
                0.7,
                0.27523,
                0
            ],
            87: [
                0,
                0.7,
                0.27523,
                0
            ],
            88: [
                0,
                0.7,
                0.26006,
                0
            ],
            89: [
                0,
                0.7,
                0.2939,
                0
            ],
            90: [
                0,
                0.7,
                0.24037,
                0
            ],
            160: eb
        },
        'Size1-Regular': {
            32: eb,
            40: kb,
            41: kb,
            47: kb,
            91: kb,
            92: kb,
            93: kb,
            123: kb,
            125: kb,
            160: eb,
            710: [
                0,
                0.72222,
                0,
                0
            ],
            732: [
                0,
                0.72222,
                0,
                0
            ],
            770: [
                0,
                0.72222,
                0,
                0
            ],
            771: [
                0,
                0.72222,
                0,
                0
            ],
            8214: [
                -0.00099,
                0.601,
                0,
                0
            ],
            8593: [
                0.00001,
                0.6,
                0,
                0
            ],
            8595: [
                0.00001,
                0.6,
                0,
                0
            ],
            8657: [
                0.00001,
                0.6,
                0,
                0
            ],
            8659: [
                0.00001,
                0.6,
                0,
                0
            ],
            8719: pb,
            8720: pb,
            8721: pb,
            8730: kb,
            8739: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8741: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8747: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8748: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8749: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8750: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8896: pb,
            8897: pb,
            8898: pb,
            8899: pb,
            8968: kb,
            8969: kb,
            8970: kb,
            8971: kb,
            9168: [
                -0.00099,
                0.601,
                0,
                0
            ],
            10216: kb,
            10217: kb,
            10752: pb,
            10753: pb,
            10754: pb,
            10756: pb,
            10758: pb
        },
        'Size2-Regular': {
            32: eb,
            40: ib,
            41: ib,
            47: ib,
            91: ib,
            92: ib,
            93: ib,
            123: ib,
            125: ib,
            160: eb,
            710: nb,
            732: nb,
            770: nb,
            771: nb,
            8719: qb,
            8720: qb,
            8721: qb,
            8730: ib,
            8747: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8748: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8749: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8750: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8896: qb,
            8897: qb,
            8898: qb,
            8899: qb,
            8968: ib,
            8969: ib,
            8970: ib,
            8971: ib,
            10216: ib,
            10217: ib,
            10752: qb,
            10753: qb,
            10754: qb,
            10756: qb,
            10758: qb
        },
        'Size3-Regular': {
            32: eb,
            40: mb,
            41: mb,
            47: mb,
            91: mb,
            92: mb,
            93: mb,
            123: mb,
            125: mb,
            160: eb,
            710: nb,
            732: nb,
            770: nb,
            771: nb,
            8730: mb,
            8968: mb,
            8969: mb,
            8970: mb,
            8971: mb,
            10216: mb,
            10217: mb
        },
        'Size4-Regular': {
            32: eb,
            40: lb,
            41: lb,
            47: lb,
            91: lb,
            92: lb,
            93: lb,
            123: lb,
            125: lb,
            160: eb,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.825,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.825,
                0,
                0
            ],
            8730: lb,
            8968: lb,
            8969: lb,
            8970: lb,
            8971: lb,
            9115: [
                0.64502,
                1.155,
                0,
                0
            ],
            9116: [
                0.00001,
                0.6,
                0,
                0
            ],
            9117: [
                0.64502,
                1.155,
                0,
                0
            ],
            9118: [
                0.64502,
                1.155,
                0,
                0
            ],
            9119: [
                0.00001,
                0.6,
                0,
                0
            ],
            9120: [
                0.64502,
                1.155,
                0,
                0
            ],
            9121: [
                0.64502,
                1.155,
                0,
                0
            ],
            9122: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9123: [
                0.64502,
                1.155,
                0,
                0
            ],
            9124: [
                0.64502,
                1.155,
                0,
                0
            ],
            9125: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9126: [
                0.64502,
                1.155,
                0,
                0
            ],
            9127: [
                0.00001,
                0.9,
                0,
                0
            ],
            9128: ib,
            9129: [
                0.90001,
                0,
                0,
                0
            ],
            9130: [
                0,
                0.3,
                0,
                0
            ],
            9131: [
                0.00001,
                0.9,
                0,
                0
            ],
            9132: ib,
            9133: [
                0.90001,
                0,
                0,
                0
            ],
            9143: [
                0.88502,
                0.915,
                0,
                0
            ],
            10216: lb,
            10217: lb,
            57344: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57345: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57680: [
                0,
                0.12,
                0,
                0
            ],
            57681: [
                0,
                0.12,
                0,
                0
            ],
            57682: [
                0,
                0.12,
                0,
                0
            ],
            57683: [
                0,
                0.12,
                0,
                0
            ]
        },
        'Typewriter-Regular': {
            32: eb,
            33: X,
            34: X,
            35: X,
            36: [
                0.08333,
                0.69444,
                0,
                0
            ],
            37: [
                0.08333,
                0.69444,
                0,
                0
            ],
            38: X,
            39: X,
            40: [
                0.08333,
                0.69444,
                0,
                0
            ],
            41: [
                0.08333,
                0.69444,
                0,
                0
            ],
            42: [
                0,
                0.52083,
                0,
                0
            ],
            43: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            44: [
                0.13889,
                0.125,
                0,
                0
            ],
            45: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            46: [
                0,
                0.125,
                0,
                0
            ],
            47: [
                0.08333,
                0.69444,
                0,
                0
            ],
            48: X,
            49: X,
            50: X,
            51: X,
            52: X,
            53: X,
            54: X,
            55: X,
            56: X,
            57: X,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.13889,
                0.43056,
                0,
                0
            ],
            60: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            61: [
                -0.19549,
                0.41562,
                0,
                0
            ],
            62: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            63: X,
            64: X,
            65: X,
            66: X,
            67: X,
            68: X,
            69: X,
            70: X,
            71: X,
            72: X,
            73: X,
            74: X,
            75: X,
            76: X,
            77: X,
            78: X,
            79: X,
            80: X,
            81: [
                0.13889,
                0.61111,
                0,
                0
            ],
            82: X,
            83: X,
            84: X,
            85: X,
            86: X,
            87: X,
            88: X,
            89: X,
            90: X,
            91: [
                0.08333,
                0.69444,
                0,
                0
            ],
            92: [
                0.08333,
                0.69444,
                0,
                0
            ],
            93: [
                0.08333,
                0.69444,
                0,
                0
            ],
            94: X,
            95: [
                0.09514,
                0,
                0,
                0
            ],
            96: X,
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: X,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: X,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: X,
            103: [
                0.22222,
                0.43056,
                0,
                0
            ],
            104: X,
            105: X,
            106: [
                0.22222,
                0.61111,
                0,
                0
            ],
            107: X,
            108: X,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.22222,
                0.43056,
                0,
                0
            ],
            113: [
                0.22222,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.55358,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0,
                0
            ],
            119: [
                0,
                0.43056,
                0,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.22222,
                0.43056,
                0,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: [
                0.08333,
                0.69444,
                0,
                0
            ],
            124: [
                0.08333,
                0.69444,
                0,
                0
            ],
            125: [
                0.08333,
                0.69444,
                0,
                0
            ],
            126: X,
            127: X,
            160: eb,
            176: X,
            184: [
                0.19445,
                0,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.22222,
                0.43056,
                0,
                0
            ],
            711: [
                0,
                0.56597,
                0,
                0
            ],
            713: [
                0,
                0.56555,
                0,
                0
            ],
            714: X,
            715: X,
            728: X,
            730: X,
            770: X,
            771: X,
            776: X,
            915: X,
            916: X,
            920: X,
            923: X,
            926: X,
            928: X,
            931: X,
            933: X,
            934: X,
            936: X,
            937: X,
            8216: X,
            8217: X,
            8242: X,
            9251: [
                0.11111,
                0.21944,
                0,
                0
            ]
        }
    };
    const ub = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/,
        vb = {
            slant: [
                0.25,
                0.25,
                0.25
            ],
            space: [
                0,
                0,
                0
            ],
            stretch: [
                0,
                0,
                0
            ],
            shrink: [
                0,
                0,
                0
            ],
            xHeight: [
                0.431,
                0.431,
                0.431
            ],
            quad: [
                1,
                1.171,
                1.472
            ],
            extraSpace: [
                0,
                0,
                0
            ],
            num1: [
                0.677,
                0.732,
                0.925
            ],
            num2: [
                0.394,
                0.384,
                0.387
            ],
            num3: [
                0.444,
                0.471,
                0.504
            ],
            denom1: [
                0.686,
                0.752,
                1.025
            ],
            denom2: [
                0.345,
                0.344,
                0.532
            ],
            sup1: [
                0.413,
                0.503,
                0.504
            ],
            sup2: [
                0.363,
                0.431,
                0.404
            ],
            sup3: [
                0.289,
                0.286,
                0.294
            ],
            sub1: [
                0.15,
                0.143,
                0.2
            ],
            sub2: [
                0.247,
                0.286,
                0.4
            ],
            supDrop: [
                0.386,
                0.353,
                0.494
            ],
            subDrop: [
                0.05,
                0.071,
                0.1
            ],
            delim1: [
                2.39,
                1.7,
                1.98
            ],
            delim2: [
                1.01,
                1.157,
                1.42
            ],
            axisHeight: [
                0.25,
                0.25,
                0.25
            ],
            defaultRuleThickness: [
                0.04,
                0.049,
                0.049
            ],
            bigOpSpacing1: [
                0.111,
                0.111,
                0.111
            ],
            bigOpSpacing2: [
                0.166,
                0.166,
                0.166
            ],
            bigOpSpacing3: [
                0.2,
                0.2,
                0.2
            ],
            bigOpSpacing4: [
                0.6,
                0.611,
                0.611
            ],
            bigOpSpacing5: [
                0.1,
                0.143,
                0.143
            ],
            sqrtRuleThickness: [
                0.04,
                0.04,
                0.04
            ]
        },
        wb = [
            0,
            0.5,
            0.7,
            0.8,
            0.9,
            1,
            1.2,
            1.44,
            1.728,
            2.074,
            2.488
        ],
        xb = {
            '\xA0': ' ',
            '\u200B': ' ',
            'Å': 'A',
            'Ç': 'C',
            'Ð': 'D',
            'Þ': 'o',
            'å': 'a',
            'ç': 'c',
            'ð': 'd',
            'þ': 'o',
            'А': 'A',
            'Б': 'B',
            'В': 'B',
            'Г': 'F',
            'Д': 'A',
            'Е': 'E',
            'Ж': 'K',
            'З': '3',
            'И': 'N',
            'Й': 'N',
            'К': 'K',
            'Л': 'N',
            'М': 'M',
            'Н': 'H',
            'О': 'O',
            'П': 'N',
            'Р': 'P',
            'С': 'C',
            'Т': 'T',
            'У': 'y',
            'Ф': 'O',
            'Х': 'X',
            'Ц': 'U',
            'Ч': 'h',
            'Ш': 'W',
            'Щ': 'W',
            'Ъ': 'B',
            'Ы': 'X',
            'Ь': 'B',
            'Э': '3',
            'Ю': 'X',
            'Я': 'R',
            'а': 'a',
            'б': 'b',
            'в': 'a',
            'г': 'r',
            'д': 'y',
            'е': 'e',
            'ж': 'm',
            'з': 'e',
            'и': 'n',
            'й': 'n',
            'к': 'n',
            'л': 'n',
            'м': 'm',
            'н': 'n',
            'о': 'o',
            'п': 'n',
            'р': 'p',
            'с': 'c',
            'т': 'o',
            'у': 'y',
            'ф': 'b',
            'х': 'x',
            'ц': 'n',
            'ч': 'n',
            'ш': 'w',
            'щ': 'w',
            'ъ': 'a',
            'ы': 'm',
            'ь': 'a',
            'э': 'e',
            'ю': 'm',
            'я': 'r'
        };

    function yb(zb, Ab) {
        void 0 === zb && (zb = 77);
        const Bb = tb[Ab][zb];
        if (Bb)
            return {
                defaultMetrics: !1,
                depth: Bb[0],
                height: Bb[1],
                italic: Bb[2],
                skew: Bb[3]
            };
        if (11034 === zb)
            return {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.8,
                italic: 0,
                skew: 0
            };
        const Cb = String.fromCodePoint(zb);
        if (Cb in xb)
            zb = xb[Cb].codePointAt(0);
        else if (ub.test(Cb))
            return zb = 77, {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.9,
                italic: 0,
                skew: 0
            };
        return {
            defaultMetrics: !0,
            depth: 0.2,
            height: 0.7,
            italic: 0,
            skew: 0
        };
    }
    class zb {
        getFontSize(Ab) {
            return Math.max(1, Ab + this.sizeDelta);
        }
        get sup() {
            return _Ab[[
                0,
                1,
                0,
                1,
                2,
                3,
                2,
                3
            ][this.id]];
        }
        get sub() {
            return _Ab[[
                0,
                0,
                0,
                0,
                2,
                2,
                2,
                2
            ][this.id]];
        }
        get fracNum() {
            return _Ab[[
                0,
                1,
                0,
                1,
                2,
                3,
                4,
                5
            ][this.id]];
        }
        get fracDen() {
            return _Ab[[
                0,
                0,
                0,
                0,
                2,
                2,
                4,
                4
            ][this.id]];
        }
        get cramp() {
            return _Ab[[
                0,
                0,
                2,
                2,
                4,
                4,
                6,
                6
            ][this.id]];
        }
        get isTight() {
            return this.sizeDelta < 0;
        }
        constructor(Ab, Bb, Cb) {
            this.id = Ab, this.sizeDelta = Bb, this.cramped = Cb;
            const Db = {
                '-4': 2,
                '-3': 1,
                0: 0
            } [Bb];
            this.metrics = Object.keys(vb).reduce((Ab, Bb) => ({
                ...Ab,
                [Bb]: vb[Bb][Db]
            }), {});
        }
    }
    const _Ab = {
        7: new zb(7, 0, !1),
        6: new zb(6, 0, !0),
        5: new zb(5, 0, !1),
        4: new zb(4, 0, !0),
        3: new zb(3, -3, !1),
        2: new zb(2, -3, !0),
        1: new zb(1, -4, !1),
        0: new zb(0, -4, !0)
    };

    function Bb(Cb, Db) {
        return null === Cb ? 0 : function(Eb, Fb) {
            var Gb;
            if (!Eb)
                return 0;
            const Hb = {
                pt: 1,
                mm: 7227 / 2540,
                cm: 7227 / 254,
                ex: 35271 / 8192,
                px: 3 / 4,
                em: 10,
                bp: 1.00375,
                dd: 1238 / 1157,
                pc: 12,
                in: 72.27,
                mu: 10 / 18
            } [null !== (Gb = Eb.unit) && void 0 !== Gb ? Gb : 'pt'];
            if (Number.isFinite(Fb)) {
                const Ib = 10 ** Fb;
                return Math.round(Eb.dimension / 10 * Hb * Ib) / Ib;
            }
            return Eb.dimension * Hb;
        }(Cb, Db) / 10;
    }

    function Cb(Db) {
        var Eb;
        return `${ Db.dimension }${ null !== (Eb = Db.unit) && void 0 !== Eb ? Eb : 'pt' }`;
    }
    _Ab.displaystyle = _Ab[7], _Ab.textstyle = _Ab[5], _Ab.scriptstyle = _Ab[3], _Ab.scriptscriptstyle = _Ab[1];
    class Db {
        get mathstyle() {
            let Eb = this._mathstyle,
                Fb = this.parent;
            for (; !Eb;)
                Eb = Fb._mathstyle, Fb = Fb.parent;
            return Eb;
        }
        getRegister(Eb) {
            var Fb;
            return (null === (Fb = this.registers) || void 0 === Fb ? void 0 : Fb[Eb]) ? this.registers[Eb] : this.parent ? this.parent.getRegister(Eb) : void 0;
        }
        getRegisterAsGlue(Eb) {
            var Fb;
            if (null === (Fb = this.registers) || void 0 === Fb ? void 0 : Fb[Eb]) {
                const Gb = this.registers[Eb];
                return 'object' == typeof Gb && 'glue' in Gb ? Gb : 'object' == typeof Gb && 'dimension' in Gb ? {
                    glue: {
                        dimension: Gb.dimension
                    }
                } : 'number' == typeof Gb ? {
                    glue: {
                        dimension: Gb
                    }
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsGlue(Eb);
        }
        getRegisterAsEm(Eb) {
            return Bb(this.getRegisterAsDimension(Eb));
        }
        getRegisterAsDimension(Eb) {
            var Fb;
            if (null === (Fb = this.registers) || void 0 === Fb ? void 0 : Fb[Eb]) {
                const Gb = this.registers[Eb];
                return 'object' == typeof Gb && 'glue' in Gb ? Gb.glue : 'object' == typeof Gb && 'dimension' in Gb ? Gb : 'number' == typeof Gb ? {
                    dimension: Gb
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsDimension(Eb);
        }
        setRegister(Eb, Fb) {
            void 0 !== Fb ? this.registers[Eb] = Fb : delete this.registers[Eb];
        }
        setGlobalRegister(Eb, Fb) {
            let Gb = this;
            for (; Gb.parent;)
                Gb.setRegister(Eb, void 0), Gb = Gb.parent;
            Gb.setRegister(Eb, Fb);
        }
        get size() {
            let Eb = this._size,
                Fb = this.parent;
            for (; !Eb;)
                Eb = Fb._size, Fb = Fb.parent;
            return Eb;
        }
        makeID() {
            if (!this.atomIdsSettings)
                return;
            if (this.atomIdsSettings.overrideID)
                return this.atomIdsSettings.overrideID;
            if ('number' != typeof this.atomIdsSettings.seed)
                return Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
            const Eb = this.atomIdsSettings.seed.toString(36);
            return this.atomIdsSettings.seed += 1, Eb;
        }
        scale(Eb) {
            return Eb * this.effectiveFontSize;
        }
        get scalingFactor() {
            return this.parent ? this.effectiveFontSize / this.parent.effectiveFontSize : 1;
        }
        get isDisplayStyle() {
            return 7 === this.mathstyle.id || 6 === this.mathstyle.id;
        }
        get isCramped() {
            return this.mathstyle.cramped;
        }
        get isTight() {
            return this.mathstyle.isTight;
        }
        get effectiveFontSize() {
            return wb[Math.max(1, this.size + this.mathstyle.sizeDelta)];
        }
        get computedColor() {
            let Eb = this.color,
                Fb = this.parent;
            return !Eb && Fb && (Eb = Fb.color, Fb = Fb.parent), null != Eb ? Eb : '';
        }
        get computedBackgroundColor() {
            let Eb = this.backgroundColor,
                Fb = this.parent;
            return !Eb && Fb && (Eb = Fb.backgroundColor, Fb = Fb.parent), null != Eb ? Eb : '';
        }
        get metrics() {
            return this.mathstyle.metrics;
        }
        constructor(Eb, Fb, Gb) {
            var Hb, Ib, Jb, Kb, Lb, Mb;
            Eb instanceof Db && (this.parent = Eb), Eb instanceof Db || (this.registers = null !== (Hb = Eb.registers) && void 0 !== Hb ? Hb : {}), this.isPhantom = null !== (Kb = null !== (Ib = null == Fb ? void 0 : Fb.isPhantom) && void 0 !== Ib ? Ib : null === (Jb = this.parent) || void 0 === Jb ? void 0 : Jb.isPhantom) && void 0 !== Kb && Kb;
            const Nb = {
                ...Eb
            };
            let Ob;
            if (Fb && (Fb.letterShapeStyle && 'auto' !== Fb.letterShapeStyle && (Nb.letterShapeStyle = Fb.letterShapeStyle), Fb.color && 'none' !== Fb.color && (Nb.color = Fb.color), Fb.backgroundColor && 'none' !== Fb.backgroundColor && (Nb.backgroundColor = Fb.backgroundColor), Fb.fontSize && 'auto' !== Fb.fontSize && Fb.fontSize !== (null === (Lb = this.parent) || void 0 === Lb ? void 0 : Lb._size) && (this._size = Fb.fontSize)), this.letterShapeStyle = null !== (Mb = Nb.letterShapeStyle) && void 0 !== Mb ? Mb : 'tex', this.color = Nb.color, this.backgroundColor = Nb.backgroundColor, 'string' == typeof Gb) {
                if (Eb instanceof Db)
                    switch (Gb) {
                        case 'cramp':
                            Ob = Eb.mathstyle.cramp;
                            break;
                        case 'superscript':
                            Ob = Eb.mathstyle.sup;
                            break;
                        case 'subscript':
                            Ob = Eb.mathstyle.sub;
                            break;
                        case 'numerator':
                            Ob = Eb.mathstyle.fracNum;
                            break;
                        case 'denominator':
                            Ob = Eb.mathstyle.fracDen;
                    }
                switch (Gb) {
                    case 'textstyle':
                        Ob = _Ab.textstyle;
                        break;
                    case 'displaystyle':
                        Ob = _Ab.displaystyle;
                        break;
                    case 'scriptstyle':
                        Ob = _Ab.scriptstyle;
                        break;
                    case 'scriptscriptstyle':
                        Ob = _Ab.scriptscriptstyle;
                }
            }
            this._mathstyle = Ob, this.atomIdsSettings = Eb.atomIdsSettings, this.renderPlaceholder = Nb.renderPlaceholder;
        }
    }
    const Eb = {
            overrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            overleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            underrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            underleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            xrightarrow: [
                ['rightarrow'],
                1.469,
                522,
                'xMaxYMin'
            ],
            xleftarrow: [
                ['leftarrow'],
                1.469,
                522,
                'xMinYMin'
            ],
            Overrightarrow: [
                ['doublerightarrow'],
                0.888,
                560,
                'xMaxYMin'
            ],
            xRightarrow: [
                ['doublerightarrow'],
                1.526,
                560,
                'xMaxYMin'
            ],
            xLeftarrow: [
                ['doubleleftarrow'],
                1.526,
                560,
                'xMinYMin'
            ],
            overleftharpoon: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoonup: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoondown: [
                ['leftharpoondown'],
                0.888,
                522,
                'xMinYMin'
            ],
            overrightharpoon: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoonup: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoondown: [
                ['rightharpoondown'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xlongequal: [
                ['longequal'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadleftarrow: [
                ['twoheadleftarrow'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadrightarrow: [
                ['twoheadrightarrow'],
                0.888,
                334,
                'xMaxYMin'
            ],
            overleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            overbrace: [
                [
                    'leftbrace',
                    'midbrace',
                    'rightbrace'
                ],
                1.6,
                548
            ],
            underbrace: [
                [
                    'leftbraceunder',
                    'midbraceunder',
                    'rightbraceunder'
                ],
                1.6,
                548
            ],
            underleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            xleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                1.75,
                522
            ],
            xLeftrightarrow: [
                [
                    'doubleleftarrow',
                    'doublerightarrow'
                ],
                1.75,
                560
            ],
            xrightleftharpoons: [
                [
                    'leftharpoondownplus',
                    'rightharpoonplus'
                ],
                1.75,
                716
            ],
            xleftrightharpoons: [
                [
                    'leftharpoonplus',
                    'rightharpoondownplus'
                ],
                1.75,
                716
            ],
            xhookleftarrow: [
                [
                    'leftarrow',
                    'righthook'
                ],
                1.08,
                522
            ],
            xhookrightarrow: [
                [
                    'lefthook',
                    'rightarrow'
                ],
                1.08,
                522
            ],
            overlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            underlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            overgroup: [
                [
                    'leftgroup',
                    'rightgroup'
                ],
                0.888,
                342
            ],
            undergroup: [
                [
                    'leftgroupunder',
                    'rightgroupunder'
                ],
                0.888,
                342
            ],
            xmapsto: [
                [
                    'leftmapsto',
                    'rightarrow'
                ],
                1.5,
                522
            ],
            xtofrom: [
                [
                    'leftToFrom',
                    'rightToFrom'
                ],
                1.75,
                528
            ],
            xrightleftarrows: [
                [
                    'baraboveleftarrow',
                    'rightarrowabovebar'
                ],
                1.75,
                901
            ],
            xrightequilibrium: [
                [
                    'baraboveshortleftharpoon',
                    'rightharpoonaboveshortbar'
                ],
                1.75,
                716
            ],
            xleftequilibrium: [
                [
                    'shortbaraboveleftharpoon',
                    'shortrightharpoonabovebar'
                ],
                1.75,
                716
            ]
        },
        Fb = {
            widehat1: [
                1062,
                239,
                0.24
            ],
            widehat2: [
                2364,
                300,
                0.3
            ],
            widehat3: [
                2364,
                360,
                0.36
            ],
            widehat4: [
                2364,
                420,
                0.42
            ],
            widecheck1: [
                1062,
                239,
                0.24
            ],
            widecheck2: [
                2364,
                300,
                0.3
            ],
            widecheck3: [
                2364,
                360,
                0.36
            ],
            widecheck4: [
                2364,
                420,
                0.42
            ],
            widetilde1: [
                600,
                260,
                0.26
            ],
            widetilde2: [
                1033,
                286,
                0.286
            ],
            widetilde3: [
                2339,
                306,
                0.306
            ],
            widetilde4: [
                2340,
                312,
                0.34
            ],
            overarc: [
                1061,
                159,
                0.3
            ],
            underarc: [
                1061,
                159,
                0.3
            ]
        },
        Gb = {
            doubleleftarrow: 'M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z',
            doublerightarrow: 'M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z',
            leftarrow: 'M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z',
            leftbrace: 'M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z',
            leftbraceunder: 'M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z',
            overarc: 'M529 0c179 0 524 115 524 115 5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2s-338-93-512-92c-174 0-513 92-513 92h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13 0 0 342-115 520-115z',
            underarc: 'm 529 160\n  c -179 0 -524 -115 -524 -115\n  c -5 -1 -9 -5 -9 -10\n  c 0 -1 1 -2 1 -3\n  l 4 -22\n  c 1 -5 5 -9 11 -9\n  h 2\n  s 338 93 512 92\n  c 174 0 513 -92 513 -92\n  h 2\n  c 5 0 9 4 11 9\n  l 5 22\n  c 1 6 -2 12 -8 13\n  c 0 0 -342 115 -520 115\n  z\n  ',
            leftgroup: 'M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z',
            leftgroupunder: 'M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z',
            leftharpoon: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z',
            leftharpoonplus: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z',
            leftharpoondown: 'M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z',
            leftharpoondownplus: 'M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z',
            lefthook: 'M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z',
            leftlinesegment: 'M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z',
            leftmapsto: 'M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z',
            leftToFrom: 'M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z',
            longequal: 'M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z',
            midbrace: 'M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z',
            midbraceunder: 'M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z',
            oiintSize1: 'M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z',
            oiintSize2: 'M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z',
            oiiintSize1: 'M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z',
            oiiintSize2: 'M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z',
            rightarrow: 'M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z',
            rightbrace: 'M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z',
            rightbraceunder: 'M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z',
            rightgroup: 'M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z',
            rightgroupunder: 'M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z',
            rightharpoon: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z',
            rightharpoonplus: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z',
            rightharpoondown: 'M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z',
            rightharpoondownplus: 'M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z',
            righthook: 'M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z',
            rightlinesegment: 'M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z',
            rightToFrom: 'M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z',
            twoheadleftarrow: 'M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z',
            twoheadrightarrow: 'M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z',
            widetilde1: 'M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z',
            widetilde2: 'M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z',
            widetilde3: 'M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z',
            widetilde4: 'M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z',
            vec: 'M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z',
            widehat1: 'M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z',
            widehat2: 'M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat3: 'M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat4: 'M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widecheck1: 'M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z',
            widecheck2: 'M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck3: 'M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck4: 'M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            baraboveleftarrow: 'M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z',
            rightarrowabovebar: 'M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z',
            baraboveshortleftharpoon: 'M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z',
            rightharpoonaboveshortbar: 'M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z',
            shortbaraboveleftharpoon: 'M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z',
            shortrightharpoonabovebar: 'M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z'
        };
    class Hb {
        static createAtom(Ib, Jb, Kb, Lb) {
            return Hb._registry[Ib].createAtom(Jb, Kb, Lb);
        }
        static serialize(Ib, Jb) {
            return Hb._registry[Ib[0].mode].serialize(Ib, Jb);
        }
        static applyStyle(Ib, Jb, Kb) {
            return Hb._registry[Ib].applyStyle(Jb, Kb);
        }
        constructor(Ib) {
            Hb._registry[Ib] = this;
        }
    }

    function Ib(Jb, Kb) {
        const Lb = [];
        let Mb, Nb = [];
        for (const Ob of Jb)
            if ('first' !== Ob.type && Ob.style) {
                let Pb;
                'variant' === Kb ? (Pb = Ob.style.variant, Ob.style.variantStyle && 'up' !== Ob.style.variantStyle && (Pb += '-' + Ob.style.variantStyle)) : 'cssClass' === Kb ? 'group' === Ob.type && (Pb = Ob.customClass) : Pb = Ob.style[Kb], Pb === Mb ? Nb.push(Ob) : (Nb.length > 0 && Lb.push(Nb), Nb = [Ob], Mb = Pb);
            }
        return Nb.length > 0 && Lb.push(Nb), Lb;
    }
    Hb._registry = {};
    const Jb = [
            '',
            'chem',
            'mord',
            'mbin',
            'mop',
            'mrel',
            'mopen',
            'mclose',
            'mpunct',
            'minner',
            'spacing',
            'first',
            'latex',
            'composition',
            'error',
            'placeholder',
            'supsub',
            'none',
            'mathfield'
        ],
        Kb = {
            mord: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mop: {
                mord: 3,
                mop: 3,
                rel: 5,
                minner: 3
            },
            mbin: {
                mord: 4,
                mop: 4,
                mopen: 4,
                minner: 4
            },
            mrel: {
                mord: 5,
                mop: 5,
                mopen: 5,
                minner: 5
            },
            mclose: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mpunct: {
                mord: 3,
                mop: 3,
                mrel: 3,
                mopen: 3,
                mpunct: 3,
                minner: 3
            },
            minner: {
                mord: 3,
                mop: 3,
                mbin: 4,
                mrel: 5,
                mopen: 3,
                mpunct: 3,
                minner: 3
            }
        },
        Lb = {
            mord: {
                mop: 3
            },
            mop: {
                mord: 3,
                mop: 3
            },
            mclose: {
                mop: 3
            },
            minner: {
                mop: 3
            }
        };

    function Mb(Nb, Ob) {
        if ('string' == typeof Nb)
            return Nb;
        if ('number' == typeof Nb) {
            const Pb = Math.ceil(100 * Nb) / 100;
            return 0 === Pb ? '0' : Pb.toString() + (null != Ob ? Ob : '');
        }
        return '';
    }
    class Nb {
        set atomID(Ob) {
            void 0 !== Ob && 0 !== Ob.length && (this.attributes || (this.attributes = {}), this.attributes['data-atom-id'] = Ob);
        }
        selected(Ob) {
            if (this.isSelected !== Ob && (this.isSelected = Ob, this.children))
                for (const Pb of this.children)
                    Pb.selected(Ob);
        }
        setStyle(Ob, Pb, Qb) {
            if (void 0 === Pb)
                return;
            const Rb = Mb(Pb, Qb);
            Rb.length > 0 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties[Ob] = Rb);
        }
        setTop(Ob) {
            Number.isFinite(Ob) && Math.abs(Ob) > 0.01 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties.top = Mb(Ob, 'em'), this.height -= Ob, this.depth += Ob);
        }
        get left() {
            var Ob;
            return (null === (Ob = this.cssProperties) || void 0 === Ob ? void 0 : Ob['margin-left']) ? Number.parseFloat(this.cssProperties['margin-left']) : 0;
        }
        set left(Ob) {
            Number.isFinite(Ob) && (0 === Ob ? this.cssProperties && delete this.cssProperties['margin-left'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-left'] = Mb(Ob, 'em')));
        }
        set right(Ob) {
            Number.isFinite(Ob) && (0 === Ob ? this.cssProperties && delete this.cssProperties['margin-right'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-right'] = Mb(Ob, 'em')));
        }
        set width(Ob) {
            Number.isFinite(Ob) && (0 === Ob ? this.cssProperties && delete this.cssProperties.width : (this.cssProperties || (this.cssProperties = {}), this.cssProperties.width = Mb(Ob, 'em')));
        }
        wrap(Ob, Pb) {
            const Qb = Ob.parent;
            if (!Qb)
                return this;
            Ob.isPhantom && this.setStyle('opacity', 0);
            let Rb = Ob.computedColor;
            Rb === Qb.computedColor && (Rb = ''), this.setStyle('color', Rb);
            const Sb = Ob.effectiveFontSize === Qb.effectiveFontSize ? void 0 : Ob.effectiveFontSize;
            let Tb, Ub = Ob.computedBackgroundColor;
            if (this.isSelected && (Ub = w(Ub)), Ub === Qb.computedBackgroundColor && (Ub = ''), !(Sb || Ub || Pb && (Pb.classes || Pb.type)))
                return this;
            Ub ? (Tb = _Tb(this, Pb), Tb.selected(this.isSelected), Tb.setStyle('background-color', Ub), Tb.setStyle('display', 'inline-block')) : Tb = new Nb(this, Pb);
            const Vb = Ob.scalingFactor;
            return 1 !== Vb && (Tb.setStyle('font-size', 100 * Vb, '%'), Tb.height *= Vb, Tb.depth *= Vb, Tb.italic *= Vb, Tb.skew *= Vb), Tb;
        }
        wrapSelect(Ob) {
            if (!this.isSelected)
                return this;
            if (!Ob.parent)
                return this;
            const Pb = w(Ob.computedBackgroundColor),
                Qb = _Tb(this);
            return Qb.selected(!0), Qb.setStyle('background-color', Pb), Qb.setStyle('display', 'inline-block'), Qb;
        }
        toMarkup() {
            var Ob, Pb, Qb;
            let Rb = null !== (Ob = this.value) && void 0 !== Ob ? Ob : '';
            if (this.children)
                for (const Sb of this.children)
                    Rb += Sb.toMarkup();
            const Sb = this.classes.split(' ');
            Sb.push(null !== (Pb = {
                latex: 'ML__latex',
                placeholder: 'ML__placeholder',
                error: 'ML__error'
            } [this.type]) && void 0 !== Pb ? Pb : ''), 'latex' === this.caret && Sb.push('ML__latex-caret');
            const Tb = 1 === Sb.length ? Sb[0] : Sb.filter((Ob, Pb, Qb) => Ob.length > 0 && Qb.indexOf(Ob) === Pb).join(' ');
            let Ub = '';
            if (Rb.length > 0 && '\u200B' !== Rb || Tb.length > 0 || this.cssId || this.htmlData || this.htmlStyle || this.attributes || this.cssProperties || this.svgBody || this.svgOverlay) {
                let Vb = '';
                if (this.cssId && (Vb += ` id=${ this.cssId.replace(/ /g, '-') } `), this.htmlData) {
                    const Wb = this.htmlData.split(',');
                    for (const Xb of Wb) {
                        const Yb = Xb.match(/([^=]+)=(.+$)/);
                        if (Yb) {
                            const Zb = Yb[1].trim().replace(/ /g, '-');
                            Zb && (Vb += ` data-${ Zb }=${ Yb[2] } `);
                        } else {
                            const Zb = Xb.trim().replace(/ /g, '-');
                            Zb && (Vb += ` data-${ Zb } `);
                        }
                    }
                }
                if (this.htmlStyle) {
                    const Wb = this.htmlStyle.split(';');
                    let Xb = '';
                    for (const Yb of Wb) {
                        const Zb = Yb.match(/([^=]+):(.+$)/);
                        if (Zb) {
                            const $b = Zb[1].trim().replace(/ /g, '-');
                            $b && (Xb += `${ $b }:${ Zb[2] };`);
                        }
                    }
                    Xb && (Yb += ` style="${ Xb }"`);
                }
                if (this.attributes && (Vb += ' ' + Object.keys(this.attributes).map(Vb => `${ Vb }="${ this.attributes[Vb] }"`).join(' ')), Tb.length > 0 && (Vb += ` class="${ Tb }"`), this.cssProperties) {
                    const Wb = Object.keys(this.cssProperties).map(Vb => `${ Vb }:${ this.cssProperties[Vb] }`).join(';');
                    Wb.length > 0 && (Vb += ` style="${ Wb }"`);
                }
                let Wb = '';
                this.svgBody ? Wb = function(Xb) {
                    if (Fb[Xb]) {
                        const [Yb, Zb, $b] = Fb[Xb];
                        return `<span style="display:inline-block;height:${ $b / 2 }em;min-width:0"><span class="stretchy" style="height:${ $b }em"><svg width="100%" height="${ $b }em" viewBox="0 0 ${ Yb } ${ Zb }" preserveAspectRatio="none" ><path fill="currentcolor" d="${ Gb[Xb] }"></path></svg></span></span>`;
                    }
                    const [Yb, Zb, $b, ac] = Eb[Xb];
                    let bc, cc;
                    const dc = $b / 1000;
                    3 === Yb.length ? (bc = [
                        'slice-1-of-3',
                        'slice-2-of-3',
                        'slice-3-of-3'
                    ], cc = [
                        'xMinYMin',
                        'xMidYMin',
                        'xMaxYMin'
                    ]) : 2 === Yb.length ? (bc = [
                        'slice-1-of-2',
                        'slice-2-of-2'
                    ], cc = [
                        'xMinYMin',
                        'xMaxYMin'
                    ]) : (bc = ['slice-1-of-1'], cc = [ac]);
                    const ec = Yb.map((Xb, Yb) => `<span class="${ bc[Yb] }" style=height:${ dc }em><svg width=400em height=${ dc }em viewBox="0 0 400000 ${ $b }" preserveAspectRatio="${ cc[Yb] } slice"><path fill="currentcolor" d="${ Gb[Xb] }"></path></svg></span>`).join('');
                    return `<span style="display:inline-block;height:${ dc }em;min-width:${ Zb }em;">${ ec }</span>`;
                }(this.svgBody) : this.svgOverlay && (Wb = '<span style="', Wb += 'display: inline-block;', Wb += `height:${ this.height + this.depth }em;`, Wb += `vertical-align:${ this.depth }em;`, Wb += '">', Wb += Rb, Wb += '</span>', Wb += '<svg style="position:absolute;overflow:overlay;', Wb += `height:${ this.height + this.depth }em;`, (null === (Qb = this.cssProperties) || void 0 === Qb ? void 0 : Qb.padding) ? (Wb += `top:${ this.cssProperties.padding }em;`, Wb += `left:${ this.cssProperties.padding }em;`, Wb += `width:calc(100% - 2 * ${ this.cssProperties.padding }em );`) : Wb += 'top:0;left:0;width:100%;', Wb += 'z-index:2;', Wb += '"', this.svgStyle && (Wb += ` style="${ this.svgStyle }"`), Wb += `>${ this.svgOverlay }</svg>`), Ub = `<span${ Vb }>${ Rb }${ Wb }</span>`;
            }
            return 'text' === this.caret ? Ub += '<span class="ML__text-caret"></span>' : 'math' === this.caret && (Ub += '<span class="ML__caret"></span>'), Ub;
        }
        tryCoalesceWith(Ob) {
            if (this.type !== Ob.type)
                return !1;
            if (!/ML__text/.test(this.classes) && ![
                    'mord',
                    'mbin',
                    'mrel'
                ].includes(this.type))
                return !1;
            if (this.svgBody || !this.value)
                return !1;
            if (Ob.svgBody || !Ob.value)
                return !1;
            const Pb = this.children && this.children.length > 0,
                Qb = Ob.children && Ob.children.length > 0;
            if (Pb || Qb)
                return !1;
            const Rb = this.cssProperties ? Object.keys(this.cssProperties).length : 0;
            if (Rb !== (Ob.cssProperties ? Object.keys(Ob.cssProperties).length : 0))
                return !1;
            if (Rb > 0)
                for (const Sb of Object.keys(this.cssProperties))
                    if (this.cssProperties[Sb] !== Ob.cssProperties[Sb])
                        return !1;
            const Sb = this.classes.trim().replace(/\s+/g, ' ').split(' '),
                Tb = Ob.classes.trim().replace(/\s+/g, ' ').split(' ');
            if (Sb.length !== Tb.length)
                return !1;
            Sb.sort(), Tb.sort();
            for (const [Ub, Vb] of Sb.entries()) {
                if ('vertical-separator' === Vb)
                    return !1;
                if (Vb !== Tb[Ub])
                    return !1;
            }
            return this.value += Ub.value, this.height = Math.max(this.height, Ub.height), this.depth = Math.max(this.depth, Ub.depth), this.maxFontSize = Math.max(this.maxFontSize, Ub.maxFontSize), this.italic = Ub.italic, !0;
        }
        constructor(Ob, Pb) {
            var Qb, Rb, Sb, Tb, Ub, Vb;
            if ('number' == typeof Ob ? this.value = String.fromCodePoint(Ob) : 'string' == typeof Ob ? this.value = Ob : d(Ob) ? this.children = Ob.filter(Ob => null !== Ob) : Ob && Ob instanceof Nb && (this.children = [Ob]), this.type = null !== (Qb = null == Pb ? void 0 : Pb.type) && void 0 !== Qb ? Qb : '', this.isSelected = !1, this.isTight = null !== (Rb = null == Pb ? void 0 : Pb.isTight) && void 0 !== Rb && Rb, this.newList = null !== (Sb = null == Pb ? void 0 : Pb.newList) && void 0 !== Sb && Sb, null == Pb ? void 0 : Pb.properties)
                for (const Wb of Object.keys(Pb.properties))
                    this.setStyle(Wb, Pb.properties[Wb]);
            (null == Pb ? void 0 : Pb.attributes) && (this.attributes = Pb.attributes), this.classes = null !== (Tb = null == Pb ? void 0 : Pb.classes) && void 0 !== Tb ? Tb : '';
            let Wb = (null == Pb ? void 0 : Pb.fontFamily) || 'Main-Regular';
            if ((null == Pb ? void 0 : Pb.style) && this.value && (Wb = Hb.applyStyle(null !== (Ub = Pb.mode) && void 0 !== Ub ? Ub : 'math', this, Pb.style) || 'Main-Regular'), this.height = 0, this.depth = 0, this.skew = 0, this.italic = 0, this.maxFontSize = 0, 'latex' === this.type)
                this.height = 0.8, this.depth = 0.2;
            else if ('number' == typeof Ob) {
                const Xb = yb(Ob, Wb);
                this.height = Xb.height, this.depth = Xb.depth, this.skew = Xb.skew, this.italic = Xb.italic;
            } else if (this.value) {
                this.height = -1 / 0, this.depth = -1 / 0, this.skew = -1 / 0, this.italic = -1 / 0;
                for (let Xb = 0; Xb < this.value.length; Xb++) {
                    const Yb = yb(this.value.codePointAt(Xb), Wb || 'Main-Regular');
                    this.height = Math.max(this.height, Yb.height), this.depth = Math.max(this.depth, Yb.depth), this.skew = Yb.skew, this.italic = Yb.italic;
                }
            } else if (this.children && this.children.length > 0)
                if (1 === this.children.length) {
                    const Xb = this.children[0];
                    this.height = Xb.height, this.depth = Xb.depth, this.maxFontSize = Xb.maxFontSize, this.skew = Xb.skew, this.italic = Xb.italic;
                } else {
                    let Xb = -1 / 0,
                        Yb = -1 / 0,
                        Zb = 0;
                    for (const $b of this.children)
                        $b.height > Xb && (Xb = $b.height), $b.depth > Yb && (Yb = $b.depth), Zb = Math.max(Zb, null !== (Vb = $b.maxFontSize) && void 0 !== Vb ? Vb : 0);
                    this.height = Xb, this.depth = Yb, this.maxFontSize = Zb;
                }
            void 0 !== (null == Pb ? void 0 : Pb.height) && (this.height = Pb.height), void 0 !== (null == Pb ? void 0 : Pb.depth) && (this.depth = Pb.depth), void 0 !== (null == Pb ? void 0 : Pb.maxFontSize) && (this.maxFontSize = Pb.maxFontSize);
        }
    }

    function Ob(Pb) {
        if (!Pb || 0 === Pb.length)
            return [];
        Pb[0].children = Ob(Pb[0].children);
        const Qb = [Pb[0]];
        for (let Rb = 1; Rb < Pb.length; Rb++)
            Qb[Qb.length - 1].tryCoalesceWith(Pb[Rb]) || (Pb[Rb].children = Ob(Pb[Rb].children), Qb.push(Pb[Rb]));
        return Qb;
    }

    function Pb(Qb) {
        return Qb.children && (Qb.children = Ob(Qb.children)), Qb;
    }

    function Qb(Rb, Sb, Tb) {
        Sb.newList && (Rb = null);
        const Ub = Sb.type;
        if ('first' === Ub)
            return null;
        if ('spacing' === Ub)
            return Rb;
        if (Tb(Rb, Sb), Sb.children) {
            let Vb = null;
            void 0 !== Ub && 0 !== Ub.length || (Vb = Rb);
            for (const Wb of Sb.children)
                Vb = Qb(Vb, Wb, Tb);
            void 0 !== Ub && 0 !== Ub.length || (Wb = Vb);
        }
        return 'supsub' !== Ub && void 0 !== Ub && Ub.length > 0 && (Rb = Sb), Rb;
    }

    function Rb(Sb, Tb) {
        Sb && Qb(null, Sb, Tb);
    }

    function Sb(Tb, Ub = 1) {
        return function(Vb) {
                Rb(Vb, (Vb, Ub) => {
                    'mbin' !== Ub.type || Vb && !/first|none|mbin|mop|mrel|mopen|mpunct/.test(Vb.type) || (Ub.type = 'mord'), Vb && 'mbin' === Vb.type && /mrel|mclose|mpunct|placeholder/.test(Ub.type) && (Vb.type = 'mord');
                });
            }(Tb),
            function(Vb, Wb) {
                Rb(Vb, (Vb, c) => {
                    var Xb, Yb, Zb, $b;
                    const ac = null !== (Xb = null == Vb ? void 0 : Vb.type) && void 0 !== Xb ? Xb : 'none',
                        bc = c.isTight ? null !== (Yb = Lb[ac]) && void 0 !== Yb ? Yb : null : null !== (Zb = Kb[ac]) && void 0 !== Zb ? Zb : null,
                        cc = bc && null !== ($b = bc[c.type]) && void 0 !== $b ? $b : 0;
                    cc && (c.left += Wb * (cc / 18));
                });
            }(Tb, Ub), Tb;
    }

    function _Tb(Ub, Vb) {
        if (!Ub)
            return new Nb(null, Vb);
        const Wb = new Nb(null, {
            classes: 'ML__strut'
        });
        Wb.setStyle('height', Math.max(0, Ub.height), 'em');
        const Xb = [Wb];
        if (0 !== Ub.depth) {
            const Yb = new Nb(null, {
                classes: 'ML__strut--bottom'
            });
            Yb.setStyle('height', Ub.height + Ub.depth, 'em'), Yb.setStyle('vertical-align', -Ub.depth, 'em'), Xb.push(Yb);
        }
        return Xb.push(Ub), new Nb(Xb, Vb);
    }

    function Ub(Vb) {
        const Wb = function(Xb) {
                return Eb[Xb] ? Eb[Xb][2] / 1000 : Fb[Xb][2];
            }(Vb) / 2,
            Xb = new Nb(null, {
                height: Wb + 0.166,
                depth: Wb - 0.166,
                maxFontSize: 0
            });
        return Xb.svgBody = Vb, Xb;
    }
    class Vb extends Nb {
        constructor(Wb, Xb) {
            var Yb;
            const [Zb, $b, ac] = function(bc) {
                var cc;
                const [dc, ec] = function(fc) {
                    if ('individualShift' in fc) {
                        const gc = fc.individualShift;
                        let hc = gc[0];
                        const ic = [hc],
                            jc = -hc.shift - hc.box.depth;
                        let kc = jc;
                        for (let lc = 1; lc < gc.length; lc++) {
                            const mc = gc[lc],
                                nc = -mc.shift - kc - mc.box.depth,
                                oc = nc - (hc.box.height + hc.box.depth);
                            kc += nc, ic.push(oc), ic.push(mc), hc = mc;
                        }
                        return [
                            ic,
                            jc
                        ];
                    }
                    if ('top' in fc) {
                        let gc = fc.top;
                        for (const hc of fc.children)
                            gc -= 'number' == typeof hc ? hc : hc.box.height + hc.box.depth;
                        return [
                            fc.children,
                            gc
                        ];
                    }
                    if ('bottom' in fc)
                        return [
                            fc.children,
                            -fc.bottom
                        ];
                    if ('firstBaseline' in fc) {
                        const gc = fc.firstBaseline[0];
                        if ('number' == typeof gc)
                            throw new Error('First child must be an element.');
                        return [
                            fc.firstBaseline,
                            -gc.box.depth
                        ];
                    }
                    if ('shift' in fc) {
                        const gc = fc.children[0];
                        if ('number' == typeof gc)
                            throw new Error('First child must be an element.');
                        return [
                            fc.children,
                            -gc.box.depth - fc.shift
                        ];
                    }
                    return [
                        null,
                        0
                    ];
                }(bc);
                if (!dc)
                    return [
                        [],
                        0,
                        0
                    ];
                let fc = 0;
                for (const gc of dc)
                    if ('number' != typeof gc) {
                        const hc = gc.box;
                        fc = Math.max(fc, hc.maxFontSize, hc.height);
                    }
                fc += 2;
                const hc = new Nb(null, {
                    classes: 'pstrut'
                });
                hc.setStyle('height', fc, 'em');
                const ic = [];
                let jc = ec,
                    kc = ec,
                    lc = ec;
                for (const mc of dc) {
                    if ('number' == typeof mc)
                        lc += mc;
                    else {
                        const nc = mc.box,
                            oc = null !== (cc = mc.classes) && void 0 !== cc ? cc : [],
                            pc = new Nb([
                                hc,
                                nc
                            ], {
                                classes: oc.join(' '),
                                style: mc.style
                            });
                        pc.setStyle('top', -fc - lc - nc.depth, 'em'), mc.marginLeft && pc.setStyle('margin-left', mc.marginLeft, 'em'), mc.marginRight && pc.setStyle('margin-right', mc.marginRight, 'em'), ic.push(pc), lc += nc.height + nc.depth;
                    }
                    jc = Math.min(jc, lc), kc = Math.max(kc, lc);
                }
                const nc = new Nb(ic, {
                    classes: 'vlist'
                });
                if (nc.setStyle('height', kc, 'em'), jc >= 0)
                    return [
                        [new Nb(nc, {
                            classes: 'vlist-r'
                        })],
                        kc,
                        -jc
                    ];
                const oc = new Nb(new Nb(null), {
                    classes: 'vlist'
                });
                oc.setStyle('height', -jc, 'em');
                const pc = new Nb(8203, {
                    classes: 'vlist-s',
                    maxFontSize: 0,
                    height: 0,
                    depth: 0
                });
                return [
                    [
                        new Nb([
                            nc,
                            pc
                        ], {
                            classes: 'vlist-r'
                        }),
                        new Nb(oc, {
                            classes: 'vlist-r'
                        })
                    ],
                    kc,
                    -jc
                ];
            }(Wb);
            super(1 === Zb.length ? Zb[0] : Zb, {
                classes: (null !== (Yb = null == Xb ? void 0 : Xb.classes) && void 0 !== Yb ? Yb : '') + ' vlist-t' + (2 === Zb.length ? ' vlist-t2' : ''),
                height: $b,
                depth: ac,
                type: null == Xb ? void 0 : Xb.type
            });
        }
    }
    const Wb = [
        [
            8205,
            1
        ],
        [
            65038,
            2
        ],
        [
            127995,
            5
        ],
        [
            129456,
            4
        ],
        [
            917536,
            96
        ]
    ];
    let Xb;
    const Yb = [
        127462,
        127487
    ];

    function Zb($b) {
        var ac;
        if (void 0 === Xb) {
            Xb = {};
            for (const bc of Wb)
                for (let cc = bc[0]; cc <= bc[0] + bc[1] - 1; cc++)
                    Xb[cc] = !0;
        }
        return null !== (ac = Xb[$b]) && void 0 !== ac && ac;
    }

    function $b(ac) {
        return ac >= Yb[0] && ac <= Yb[1];
    }

    function ac(bc) {
        if (/^[\u0020-\u00FF]*$/.test(bc))
            return bc;
        const cc = [],
            dc = function(ec) {
                const fc = [];
                for (let gc = 0; gc < ec.length; gc++) {
                    let hc = ec.charCodeAt(gc);
                    if (13 === hc && 10 === ec.charCodeAt(gc + 1) && (hc = 10, gc++), 13 !== hc && 12 !== hc || (hc = 10), 0 === hc && (hc = 65533), hc >= 55296 && hc <= 56319) {
                        const ic = ec.charCodeAt(gc + 1);
                        ic >= 56320 && ic <= 57343 && (hc = 65536 + 1024 * (hc - 55296) + (ic - 56320), gc++);
                    }
                    fc.push(hc);
                }
                return fc;
            }(bc);
        let ec = 0;
        for (; ec < dc.length;) {
            const fc = dc[ec++],
                gc = dc[ec];
            if (8205 === gc) {
                const hc = ec - 1;
                for (ec += 2; 8205 === dc[ec];)
                    ec += 2;
                cc.push(String.fromCodePoint(...dc.slice(hc, ec - hc + 1)));
            } else if (Zb(gc)) {
                const hc = ec - 1;
                for (; Zb(dc[ec]);)
                    ec += 8205 === dc[ec] ? 2 : 1;
                cc.push(String.fromCodePoint(...dc.slice(hc, 2 * ec - hc - 1)));
            } else
                $b(fc) ? (ec += 1, cc.push(String.fromCodePoint(...dc.slice(ec - 2, 2)))) : cc.push(String.fromCodePoint(fc));
        }
        return cc;
    }
    class bc {
        end() {
            return this.pos >= this.s.length;
        }
        get() {
            return this.pos < this.s.length ? this.s[this.pos++] : '';
        }
        peek() {
            return this.s[this.pos];
        }
        match(cc) {
            const dc = 'string' == typeof this.s ? cc.exec(this.s.slice(this.pos)) : cc.exec(this.s.slice(this.pos).join(''));
            return (null == dc ? void 0 : dc[0]) ? (this.pos += dc[0].length, dc[0]) : '';
        }
        next() {
            if (this.end())
                return null;
            if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]+/))
                return '<space>';
            if (this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]/))
                return '<space>';
            const cc = this.get();
            if ('\\' === cc) {
                if (!this.end()) {
                    let dc = this.match(/^[a-zA-Z\*]+/);
                    if (dc)
                        this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]*/);
                    else if (dc = this.get(), ' ' === dc)
                        return '<space>';
                    return '\\' + dc;
                }
            } else {
                if ('{' === cc)
                    return '<{>';
                if ('}' === cc)
                    return '<}>';
                if ('^' === cc) {
                    if ('^' === this.peek()) {
                        this.get();
                        const dc = this.match(/^(\^(\^(\^(\^[\da-f])?[\da-f])?[\da-f])?[\da-f])?[\da-f]{2}/);
                        if (dc)
                            return String.fromCodePoint(Number.parseInt(dc.slice(dc.lastIndexOf('^') + 1), 16));
                    }
                    return cc;
                }
                if ('#' === cc) {
                    if (!this.end()) {
                        let dc = !1;
                        if (/[\d?@]/.test(this.peek()) && (dc = !0, this.pos + 1 < this.s.length)) {
                            const ec = this.s[this.pos + 1];
                            dc = /[^\dA-Za-z]/.test(ec);
                        }
                        return dc ? '#' + this.get() : '#';
                    }
                } else if ('$' === cc)
                    return '$' === this.peek() ? (this.get(), '<$$>') : '<$>';
            }
            return cc;
        }
        constructor(cc) {
            this.s = ac(cc), this.pos = 0, this.obeyspaces = !1;
        }
    }

    function cc(dc, ec) {
        var fc, gc, hc, ic;
        const jc = [];
        let kc = dc.next();
        if (kc)
            if ('\\relax' === kc);
            else if ('\\noexpand' === kc)
            kc = dc.next(), kc && jc.push(kc);
        else if ('\\obeyspaces' === kc)
            dc.obeyspaces = !0;
        else if ('\\space' === kc || '~' === kc)
            jc.push('<space>');
        else if ('\\bgroup' === kc)
            jc.push('<{>');
        else if ('\\egroup' === kc)
            jc.push('<}>');
        else if ('\\string' === kc) {
            if (kc = dc.next(), kc)
                if (kc.startsWith('\\'))
                    for (const lc of kc)
                        jc.push('\\' === lc ? '\\backslash' : lc);
                else
                    '<{>' === kc ? jc.push('\\{') : '<space>' === kc ? jc.push('~') : '<}>' === kc && jc.push('\\}');
        } else if ('\\csname' === kc) {
            for (;
                '<space>' === dc.peek();)
                dc.next();
            let lc = '',
                mc = !1,
                nc = [];
            do {
                if (0 === nc.length)
                    if (/^#[\d?@]$/.test(dc.peek())) {
                        const oc = dc.get().slice(1);
                        nc = _dc(null !== (gc = null !== (fc = null == ec ? void 0 : ec(oc)) && void 0 !== fc ? fc : null == ec ? void 0 : ec('?')) && void 0 !== gc ? gc : '\\placeholder{}', ec), kc = nc[0];
                    } else
                        kc = dc.next(), nc = kc ? [kc] : [];
                mc = 0 === nc.length, mc || '\\endcsname' !== kc || (mc = !0, nc.shift()), mc || (mc = '<$>' === kc || '<$$>' === kc || '<{>' === kc || '<}>' === kc || 'string' == typeof kc && kc.length > 1 && kc.startsWith('\\')), mc || (lc += nc.shift());
            } while (!mc);
            lc && jc.push('\\' + lc), jc.push(...nc);
        } else if ('\\endcsname' === kc);
        else if (kc.length > 1 && kc.startsWith('#')) {
            const lc = kc.slice(1);
            jc.push(..._dc(null !== (ic = null !== (hc = null == ec ? void 0 : ec(lc)) && void 0 !== hc ? hc : null == ec ? void 0 : ec('?')) && void 0 !== ic ? ic : '\\placeholder{}', ec));
        } else
            jc.push(kc);
        return jc;
    }

    function _dc(ec, fc = null) {
        const gc = [];
        let hc = '';
        for (const ic of ec.toString().split(/\r?\n/)) {
            hc && gc.push(hc), hc = ' ';
            const jc = ic.match(/((?:\\%)|[^%])*/);
            null !== jc && gc.push(jc[0]);
        }
        const jc = new bc(gc.join('')),
            kc = [];
        do {
            kc.push(...cc(jc, ic));
        } while (!jc.end());
        return kc;
    }

    function ec(fc) {
        let gc = '';
        const hc = [];
        for (const ic of fc)
            ic && (/[a-zA-Z\*]/.test(ic[0]) && hc.push(gc), hc.push(ic), /\\[a-zA-Z]+\*?[\"\'][^\ ]+$/.test(ic) && hc.push(' '), gc = /\\[a-zA-Z]+\*?$/.test(ic) ? ' ' : '');
        return hc.join('');
    }

    function fc(gc) {
        return ec(gc.map(gc => {
            var hc;
            return null !== (hc = {
                '<space>': ' ',
                '<$$>': '$$',
                '<$>': '$',
                '<{>': '{',
                '<}>': '}'
            } [gc]) && void 0 !== hc ? hc : gc;
        }));
    }
    class gc extends Nb {
        toMarkup() {
            const hc = [],
                ic = this.classes.split(' '),
                jc = 1 === ic.length ? ic[0] : ic.filter((hc, ic, jc) => hc.length > 0 && jc.indexOf(hc) === ic).join(' ');
            if (this.cssId && hc.push(`id=${ this.cssId.replace(/ /g, '-') }`), this.htmlData) {
                const kc = this.htmlData.split(',');
                for (const lc of kc) {
                    const mc = lc.match(/([^=]+)=(.+$)/);
                    if (mc) {
                        const nc = mc[1].trim().replace(/ /g, '-');
                        nc && hc.push(`data-${ nc }=${ mc[2] }`);
                    } else {
                        const nc = lc.trim().replace(/ /g, '-');
                        nc && hc.push(`data-${ nc }`);
                    }
                }
            }
            if (this.htmlStyle) {
                const kc = this.htmlStyle.split(';');
                let lc = '';
                for (const mc of kc) {
                    const nc = mc.match(/([^=]+):(.+$)/);
                    if (nc) {
                        const oc = nc[1].trim().replace(/ /g, '-');
                        oc && (lc += `${ oc }:${ nc[2] };`);
                    }
                }
                lc && mc.push(`style="${ lc }"`);
            }
            this.attributes && hc.push(...Object.keys(this.attributes).map(hc => `${ hc }="${ this.attributes[hc] }"`)), jc.length > 0 && hc.push(`class="${ jc }"`);
            const kc = this.mathfield;
            return hc.push(`style="display:inline-block; width:${ kc.clientWidth }px; height:${ kc.clientHeight }px;" `), `<span ${ hc.join(' ') }></span>`;
        }
        constructor(hc, ic, jc) {
            super(null, jc), this.mathfield = ic, this.htmlData = `placeholder-id=${ hc } `;
            const kc = function(lc) {
                return _Tb(Sb(lc.model.root.render(new Db({
                    registers: lc.registers
                }, {
                    fontSize: 5,
                    letterShapeStyle: lc.options.letterShapeStyle
                }, 'inline-math' === lc.options.defaultMode ? 'textstyle' : 'displaystyle')), lc.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(ic._mathfield);
            this.height = kc.height, this.depth = kc.depth;
        }
    }
    const hc = [
        'above',
        'body',
        'below',
        'superscript',
        'subscript'
    ];

    function ic(jc) {
        return 'string' == typeof jc && hc.includes(jc);
    }

    function jc(kc) {
        return void 0 !== kc && Array.isArray(kc) && 2 === kc.length;
    }
    class kc {
        static createBox(lc, mc, nc) {
            var oc, pc, qc;
            if (!mc)
                return null;
            const rc = function(sc) {
                let tc;
                const uc = [];
                let vc = [];
                for (const wc of sc)
                    if (tc || wc.style) {
                        const xc = wc.computedStyle;
                        tc && xc.color === tc.color && xc.backgroundColor === tc.backgroundColor && xc.fontSize === tc.fontSize ? vc.push(wc) : (vc.length > 0 && uc.push(vc), vc = [wc], tc = xc);
                    } else
                        vc.push(wc);
                return vc.length > 0 && uc.push(vc), uc;
            }(mc);
            if (1 === rc.length) {
                const sc = rc[0];
                return sc[0].style ? _mc(lc, sc, {
                    ...nc,
                    style: {
                        color: sc[0].style.color,
                        backgroundColor: sc[0].style.backgroundColor,
                        fontSize: sc[0].style.fontSize
                    }
                }) : _mc(lc, sc, nc);
            }
            const sc = [];
            let tc = null == nc ? void 0 : nc.newList;
            for (const uc of rc) {
                const vc = _mc(new Db(lc, {
                    color: null === (oc = uc[0].style) || void 0 === oc ? void 0 : oc.color,
                    backgroundColor: null === (pc = uc[0].style) || void 0 === pc ? void 0 : pc.backgroundColor,
                    fontSize: null === (qc = uc[0].style) || void 0 === qc ? void 0 : qc.fontSize
                }), uc, {
                    newList: tc
                });
                vc && (tc = !1, sc.push(vc));
            }
            return 0 === sc.length ? null : 1 !== sc.length || (null == nc ? void 0 : nc.classes) || (null == nc ? void 0 : nc.type) ? new Nb(sc, {
                classes: null == nc ? void 0 : nc.classes,
                type: null == nc ? void 0 : nc.type,
                newList: null == nc ? void 0 : nc.newList
            }).wrap(lc) : sc[0].wrap(lc);
        }
        static serialize(lc, mc) {
            return d(lc) ? _lc(lc, mc) : 'number' == typeof lc || 'boolean' == typeof lc ? lc.toString() : 'string' == typeof lc ? lc.replace(/\s/g, '~') : void 0 === lc ? '' : mc.expandMacro || 'string' != typeof lc.verbatimLatex ? lc.command && kc.customSerializer[lc.command] ? kc.customSerializer[lc.command](lc, mc) : lc.serialize(mc) : lc.verbatimLatex;
        }
        static commonAncestor(lc, mc) {
            if (lc === mc)
                return lc.parent;
            if (lc.parent === mc.parent)
                return lc.parent;
            const nc = new WeakSet();
            let {
                parent: oc
            } = lc;
            for (; oc;)
                nc.add(oc), oc = oc.parent;
            for (oc = mc.parent; oc;) {
                if (nc.has(oc))
                    return oc;
                oc = oc.parent;
            }
        }
        static fromJson(lc, mc) {
            const nc = new kc(lc.type, mc, lc);
            for (const oc of hc)
                lc[oc] && nc.setChildren(lc[oc], oc);
            return nc;
        }
        toJson() {
            const lc = {
                type: this.type
            };
            if ('math' !== this.mode && (lc.mode = this.mode), this.command && this.command !== this.value && (lc.command = this.command), void 0 !== this.value && (lc.value = this.value), this.style && Object.keys(this.style).length > 0 && (lc.style = {
                    ...this.style
                }), void 0 !== this.verbatimLatex && (lc.verbatimLatex = this.verbatimLatex), this.subsupPlacement && (lc.subsupPlacement = this.subsupPlacement), this.explicitSubsupPlacement && (lc.explicitSubsupPlacement = !0), this.isFunction && (lc.isFunction = !0), this.displayContainsHighlight && (lc.displayContainsHighlight = !0), this.isExtensibleSymbol && (lc.isExtensibleSymbol = !0), this.skipBoundary && (lc.skipBoundary = !0), this.captureSelection && (lc.captureSelection = !0), this._branches)
                for (const mc of Object.keys(this._branches))
                    this._branches[mc] && (lc[mc] = this._branches[mc].filter(lc => 'first' !== lc.type).map(lc => lc.toJson()));
            return lc;
        }
        get changeCounter() {
            return this._changeCounter;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(lc) {
            if (this._isDirty = lc, lc) {
                this._changeCounter++, this.verbatimLatex = void 0, this._children = void 0;
                let {
                    parent: mc
                } = this;
                for (; mc;)
                    mc._isDirty = !0, mc._changeCounter++, mc.verbatimLatex = void 0, mc._children = void 0, mc = mc.parent;
            }
        }
        serialize(lc) {
            var mc;
            return this.body && this.command ? ec([
                this.command,
                '{',
                this.bodyToLatex(lc),
                '}',
                this.supsubToLatex(lc)
            ]) : this.body ? ec([
                this.bodyToLatex(lc),
                this.supsubToLatex(lc)
            ]) : this.value && '\u200B' !== this.value ? null !== (mc = this.command) && void 0 !== mc ? mc : function(nc, oc) {
                var pc;
                if ('text' === nc)
                    return null !== (pc = J(nc, oc.codePointAt(0))) && void 0 !== pc ? pc : oc;
                let qc;
                if (qc = J(nc, oc.codePointAt(0)), qc)
                    return qc;
                const rc = function(sc) {
                    var tc;
                    if ((sc < 119808 || sc > 120831) && (sc < 8448 || sc > 8527))
                        return {
                            char: String.fromCodePoint(sc)
                        };
                    for (const uc in K)
                        if (K[uc] === sc) {
                            sc = null !== (tc = uc.codePointAt(0)) && void 0 !== tc ? tc : 0;
                            break;
                        }
                    for (const vc of L)
                        if (sc >= vc.start && sc < vc.start + vc.len)
                            return {
                                char: String.fromCodePoint(sc - vc.start + vc.offset),
                                variant: vc.variant,
                                style: vc.style
                            };
                    return {
                        char: String.fromCodePoint(sc)
                    };
                }(oc.codePointAt(0));
                return rc.style || rc.variant ? (qc = rc.char, rc.variant && (qc = '\\' + rc.variant + '{' + qc + '}'), 'bold' === rc.style ? qc = '\\mathbf{' + qc + '}' : 'italic' === rc.style ? qc = '\\mathit{' + qc + '}' : 'bolditalic' === rc.style && (qc = '\\mathbfit{' + qc + '}'), '\\mathord{' + qc + '}') : '';
            }(this.mode, this.value) : '';
        }
        bodyToLatex(lc) {
            return _lc(this.body, lc);
        }
        aboveToLatex(lc) {
            return _lc(this.above, lc);
        }
        belowToLatex(lc) {
            return _lc(this.below, lc);
        }
        supsubToLatex(lc) {
            let mc = '';
            if (void 0 !== this.branch('subscript')) {
                const nc = _lc(this.subscript, lc);
                0 === nc.length ? mc += '_{}' : 1 === nc.length ? mc += '_' + nc : mc += `_{${ nc }}`;
            }
            if (void 0 !== this.branch('superscript')) {
                const nc = _lc(this.superscript, lc);
                0 === nc.length ? mc += '^{}' : 1 === nc.length ? mc += '\u2032' === nc ? '^\\prime ' : '\u2033' === nc ? '^\\doubleprime ' : '^' + nc : mc += `^{${ nc }}`;
            }
            return mc;
        }
        get treeDepth() {
            let lc = 1,
                mc = this.parent;
            for (; mc;)
                mc = mc.parent, lc += 1;
            return lc;
        }
        get inCaptureSelection() {
            let lc = !1,
                mc = this;
            for (; mc;) {
                if (mc.captureSelection) {
                    lc = !0;
                    break;
                }
                mc = mc.parent;
            }
            return lc;
        }
        branch(lc) {
            if (ic(lc) && this._branches)
                return this._branches[lc];
        }
        get branches() {
            if (!this._branches)
                return [];
            const lc = [];
            for (const mc of hc)
                this._branches[mc] && lc.push(mc);
            return lc;
        }
        createBranch(lc) {
            return ic(lc) ? (this._branches ? this._branches[lc] || (this._branches[lc] = [this.makeFirstAtom(lc)]) : this._branches = {
                [lc]: [this.makeFirstAtom(lc)]
            }, this.isDirty = !0, this._branches[lc]) : [];
        }
        get row() {
            return jc(this.treeBranch) ? this.treeBranch[0] : -1;
        }
        get col() {
            return jc(this.treeBranch) ? this.treeBranch[1] : -1;
        }
        get body() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.body;
        }
        set body(lc) {
            this.setChildren(lc, 'body');
        }
        get superscript() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.superscript;
        }
        set superscript(lc) {
            this.setChildren(lc, 'superscript');
        }
        get subscript() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.subscript;
        }
        set subscript(lc) {
            this.setChildren(lc, 'subscript');
        }
        get above() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.above;
        }
        set above(lc) {
            this.setChildren(lc, 'above');
        }
        get below() {
            var lc;
            return null === (lc = this._branches) || void 0 === lc ? void 0 : lc.below;
        }
        set below(lc) {
            this.setChildren(lc, 'below');
        }
        get computedStyle() {
            var lc;
            if (!this.parent)
                return {
                    ...null !== (lc = this.style) && void 0 !== lc ? lc : {}
                };
            const mc = void 0 !== this.style.verbatimColor,
                nc = void 0 !== this.style.verbatimBackgroundColor,
                oc = {
                    ...this.parent.computedStyle,
                    ...this.style
                };
            return delete oc.variant, delete oc.variantStyle, nc || delete oc.verbatimBackgroundColor, mc || delete oc.verbatimColor, oc;
        }
        applyStyle(lc) {
            this.isDirty = !0, this.style = {
                ...this.style,
                ...lc
            }, 'none' === this.style.fontFamily && delete this.style.fontFamily, 'auto' === this.style.fontShape && delete this.style.fontShape, 'auto' === this.style.fontSeries && delete this.style.fontSeries, 'none' === this.style.color && (delete this.style.color, delete this.style.verbatimColor), 'none' === this.style.backgroundColor && (delete this.style.backgroundColor, delete this.style.verbatimBackgroundColor), 'auto' === this.style.fontSize && delete this.style.fontSize;
            for (const mc of this.children)
                mc.applyStyle(lc);
        }
        getInitialBaseElement() {
            let lc;
            return this.hasEmptyBranch('body') || (lc = this.body[1].getInitialBaseElement()), null != lc ? lc : this;
        }
        getFinalBaseElement() {
            return this.hasEmptyBranch('body') ? this : this.body[this.body.length - 1].getFinalBaseElement();
        }
        isCharacterBox() {
            if ('leftright' === this.type)
                return !1;
            const lc = this.getInitialBaseElement();
            return /mord/.test(lc.type);
        }
        hasEmptyBranch(lc) {
            const mc = this.branch(lc);
            return !mc || 1 === mc.length;
        }
        setChildren(lc, mc) {
            if (!lc)
                return;
            if (!ic(mc))
                return;
            const nc = [
                this.makeFirstAtom(mc),
                ...lc
            ];
            this._branches ? this._branches[mc] = nc : this._branches = {
                [mc]: nc
            };
            for (const oc of lc)
                oc.parent = this, oc.treeBranch = mc;
            this.isDirty = !0;
        }
        makeFirstAtom(lc) {
            const mc = new kc('first', this.context, {
                mode: this.mode
            });
            return mc.parent = this, mc.treeBranch = lc, mc;
        }
        addChild(lc, mc) {
            this.createBranch(mc).push(lc), this.isDirty = !0, lc.parent = this, lc.treeBranch = mc;
        }
        addChildBefore(lc, mc) {
            const nc = this.createBranch(mc.treeBranch);
            nc.splice(nc.indexOf(mc), 0, lc), this.isDirty = !0, lc.parent = this, lc.treeBranch = mc.treeBranch;
        }
        addChildAfter(lc, mc) {
            const nc = this.createBranch(mc.treeBranch);
            nc.splice(nc.indexOf(mc) + 1, 0, lc), this.isDirty = !0, lc.parent = this, lc.treeBranch = mc.treeBranch;
        }
        addChildren(lc, mc) {
            for (const nc of lc)
                this.addChild(nc, mc);
        }
        addChildrenAfter(lc, mc) {
            const nc = this.createBranch(mc.treeBranch);
            nc.splice(nc.indexOf(mc) + 1, 0, ...lc), this.isDirty = !0;
            for (const oc of lc)
                oc.parent = this, oc.treeBranch = mc.treeBranch;
            return lc[lc.length - 1];
        }
        removeBranch(lc) {
            const mc = this.branch(lc);
            if (ic(lc) && (this._branches[lc] = void 0), !mc)
                return [];
            for (const nc of mc)
                nc.parent = void 0, nc.treeBranch = void 0;
            return mc.shift(), this.isDirty = !0, mc;
        }
        removeChild(lc) {
            if ('first' === lc.type)
                return;
            const mc = this.branch(lc.treeBranch),
                nc = mc.indexOf(lc);
            mc.splice(nc, 1), this.isDirty = !0, lc.parent = void 0, lc.treeBranch = void 0;
        }
        get siblings() {
            return 'root' === this.type ? [] : this.parent.branch(this.treeBranch);
        }
        get firstSibling() {
            return this.siblings[0];
        }
        get lastSibling() {
            const {
                siblings: lc
            } = this;
            return lc[lc.length - 1];
        }
        get isFirstSibling() {
            return this === this.firstSibling;
        }
        get isLastSibling() {
            return this === this.lastSibling;
        }
        get hasNoSiblings() {
            return 1 === this.siblings.length;
        }
        get leftSibling() {
            const lc = this.parent.branch(this.treeBranch);
            return lc[lc.indexOf(this) - 1];
        }
        get rightSibling() {
            const lc = this.parent.branch(this.treeBranch);
            return lc[lc.indexOf(this) + 1];
        }
        get hasChildren() {
            return Boolean(this._branches && this.children.length > 0);
        }
        get firstChild() {
            return this.children[0];
        }
        get lastChild() {
            const {
                children: lc
            } = this;
            return lc[lc.length - 1];
        }
        get children() {
            if (this._children)
                return this._children;
            if (!this._branches)
                return [];
            const lc = [];
            for (const mc of hc)
                if (this._branches[mc])
                    for (const nc of this._branches[mc])
                        lc.push(...nc.children), lc.push(nc);
            return this._children = lc, lc;
        }
        render(lc, mc) {
            if ('first' === this.type && !lc.atomIdsSettings)
                return null;
            const nc = new Db(lc, this.style);
            let oc = '';
            'root' === this.type && (oc += ' ML__base'), this.isSelected && (oc += ' ML__selected');
            let pc = this.createBox(nc, {
                classes: oc,
                newList: !0 === (null == mc ? void 0 : mc.newList) || 'first' === this.type
            });
            return pc ? (this.subsupPlacement || !this.superscript && !this.subscript || (pc = this.attachSupsub(nc, {
                base: pc
            })), pc.wrap(nc)) : null;
        }
        attachSupsub(lc, mc) {
            var nc, oc;
            const pc = mc.base,
                qc = this.superscript,
                rc = this.subscript;
            if (!qc && !rc)
                return pc;
            let sc = null,
                tc = null;
            const uc = null !== (nc = mc.isCharacterBox) && void 0 !== nc ? nc : this.isCharacterBox();
            let vc = 0;
            if (qc) {
                const wc = new Db(lc, void 0, 'superscript');
                sc = kc.createBox(wc, qc, {
                    newList: !0
                }), uc || (vc = pc.height - lc.metrics.supDrop * wc.scalingFactor);
            }
            let wc, xc = 0;
            if (rc) {
                const yc = new Db(lc, void 0, 'subscript');
                tc = kc.createBox(yc, rc, {
                    newList: !0
                }), uc || (xc = pc.depth + lc.metrics.subDrop * yc.scalingFactor);
            }
            wc = lc.isDisplayStyle ? lc.metrics.sup1 : lc.isCramped ? lc.metrics.sup3 : lc.metrics.sup2;
            const yc = 0.05 / lc.scalingFactor;
            let zc = null;
            if (tc && sc) {
                vc = Math.max(vc, wc, sc.depth + 0.25 * lc.metrics.xHeight), xc = Math.max(xc, lc.metrics.sub2);
                const Ac = lc.metrics.defaultRuleThickness;
                if (vc - sc.depth - (tc.height - xc) < 4 * Ac) {
                    xc = 4 * Ac - (vc - sc.depth) + tc.height;
                    const Bc = 0.8 * lc.metrics.xHeight - (vc - sc.depth);
                    Bc > 0 && (vc += Bc, xc -= Bc);
                }
                const Bc = this.isExtensibleSymbol && pc.italic ? -pc.italic : 0;
                zc = new Vb({
                    individualShift: [{
                            box: tc,
                            shift: xc,
                            marginLeft: Bc
                        },
                        {
                            box: sc,
                            shift: -vc
                        }
                    ]
                }).wrap(lc);
            } else
                tc && !sc ? (xc = Math.max(xc, lc.metrics.sub1, tc.height - 0.3448), zc = new Vb({
                    shift: xc,
                    children: [{
                        box: tc,
                        marginRight: yc,
                        marginLeft: this.isCharacterBox() ? -(null !== (oc = pc.italic) && void 0 !== oc ? oc : 0) : 0
                    }]
                })) : !tc && sc && (vc = Math.max(vc, wc, sc.depth + 0.10775), zc = new Vb({
                    shift: -vc,
                    children: [{
                        box: sc,
                        marginRight: yc
                    }]
                }), zc.wrap(lc));
            const Ac = new Nb(zc, {
                classes: 'msubsup' + (this.isSelected ? ' ML__selected' : '')
            });
            return this.caret && (Ac.caret = this.caret), new Nb([
                pc,
                Ac
            ], {
                type: mc.type
            });
        }
        attachLimits(lc, mc) {
            var nc;
            const oc = this.superscript ? kc.createBox(new Db(lc, this.style, 'superscript'), this.superscript, {
                    newList: !0
                }) : null,
                pc = this.subscript ? kc.createBox(new Db(lc, this.style, 'subscript'), this.subscript, {
                    newList: !0
                }) : null;
            return oc || pc ? function(qc, rc) {
                var sc, tc, uc, vc, wc;
                const xc = qc.metrics,
                    yc = new Nb(rc.base),
                    zc = null !== (sc = rc.baseShift) && void 0 !== sc ? sc : 0,
                    Ac = null !== (tc = rc.slant) && void 0 !== tc ? tc : 0;
                let Bc = 0,
                    Cc = 0;
                rc.above && (Bc = null !== (uc = rc.aboveShift) && void 0 !== uc ? uc : Math.max(xc.bigOpSpacing1, xc.bigOpSpacing3 - rc.above.depth)), rc.below && (Cc = null !== (vc = rc.belowShift) && void 0 !== vc ? vc : Math.max(xc.bigOpSpacing2, xc.bigOpSpacing4 - rc.below.height));
                let Dc = null;
                if (rc.below && rc.above) {
                    const Ec = xc.bigOpSpacing5 + rc.below.height + rc.below.depth + Cc + yc.depth + zc;
                    Dc = new Vb({
                        bottom: Ec,
                        children: [
                            xc.bigOpSpacing5,
                            {
                                box: rc.below,
                                marginLeft: -Ac,
                                classes: ['ML__center']
                            },
                            Cc,
                            {
                                box: yc,
                                classes: ['ML__center']
                            },
                            Bc,
                            {
                                box: rc.above,
                                marginLeft: Ac,
                                classes: ['ML__center']
                            },
                            xc.bigOpSpacing5
                        ]
                    }).wrap(qc);
                } else if (rc.below && !rc.above)
                    Dc = new Vb({
                        top: yc.height - zc,
                        children: [
                            xc.bigOpSpacing5,
                            {
                                box: rc.below,
                                marginLeft: -Ac,
                                classes: ['ML__center']
                            },
                            Cc,
                            {
                                box: yc,
                                classes: ['ML__center']
                            }
                        ]
                    }).wrap(qc);
                else if (!rc.below && rc.above) {
                    const Ec = yc.depth + zc;
                    Dc = new Vb({
                        bottom: Ec,
                        children: [{
                                box: yc,
                                classes: ['ML__center']
                            },
                            Bc,
                            {
                                box: rc.above,
                                marginLeft: Ac,
                                classes: ['ML__center']
                            },
                            xc.bigOpSpacing5
                        ]
                    }).wrap(qc);
                } else {
                    const Ec = yc.depth + zc;
                    Dc = new Vb({
                        bottom: Ec,
                        children: [{
                                box: yc
                            },
                            xc.bigOpSpacing5
                        ]
                    }).wrap(qc);
                }
                return new Nb(Dc, {
                    type: null !== (wc = rc.type) && void 0 !== wc ? wc : 'mop'
                });
            }(lc, {
                ...mc,
                above: oc,
                below: pc,
                type: null !== (nc = null == mc ? void 0 : mc.type) && void 0 !== nc ? nc : 'mop'
            }) : mc.base.wrap(lc);
        }
        bind(lc, mc) {
            if (!mc || lc.isPhantom || '\u200B' === this.value)
                return mc;
            let nc = this.parent;
            for (; nc && !nc.captureSelection;)
                nc = nc.parent;
            return (null == nc ? void 0 : nc.captureSelection) || (this.id || (this.id = lc.makeID()), mc.atomID = this.id), mc;
        }
        createMathfieldBox(lc, mc, nc) {
            const oc = new gc(nc, mc, {
                type: 'mathfield',
                mode: this.mode,
                maxFontSize: lc.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: lc.letterShapeStyle,
                    fontSize: Math.max(1, lc.size + lc.mathstyle.sizeDelta)
                },
                classes: ''
            });
            return lc.isTight && (oc.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (oc.italic = 0), oc.right = oc.italic, this.bind(lc, oc), _Tb(oc, {
                type: 'mord'
            });
        }
        createBox(lc, mc) {
            var nc, oc, pc, qc;
            const rc = null !== (nc = this.value) && void 0 !== nc ? nc : this.body,
                sc = function(tc) {
                    return Jb.includes(tc);
                }(this.type) ? this.type : void 0;
            let tc = null !== (oc = null == mc ? void 0 : mc.classes) && void 0 !== oc ? oc : '';
            'text' === this.mode && (tc += ' ML__text');
            const uc = 'string' == typeof rc || void 0 === rc ? new Nb(null !== (pc = rc) && void 0 !== pc ? pc : null, {
                type: sc,
                mode: this.mode,
                maxFontSize: lc.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: lc.letterShapeStyle,
                    fontSize: Math.max(1, lc.size + lc.mathstyle.sizeDelta)
                },
                classes: tc,
                newList: null == mc ? void 0 : mc.newList
            }) : null !== (qc = kc.createBox(lc, rc, {
                type: sc,
                mode: this.mode,
                style: this.style,
                classes: tc,
                newList: null == mc ? void 0 : mc.newList
            })) && void 0 !== qc ? qc : new Nb(null);
            return lc.isTight && (uc.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (uc.italic = 0), uc.right = uc.italic, this.bind(lc, uc), this.caret && (this.superscript || this.subscript || (uc.caret = this.caret)), uc;
        }
        isDigit() {
            var lc;
            return 'mord' === this.type && this.value ? /^[\d,.]$/.test(this.value) : 'group' === this.type && 2 === (null === (lc = this.body) || void 0 === lc ? void 0 : lc.length) && 'first' === this.body[0].type && ',' === this.body[1].value;
        }
        asDigit() {
            var lc;
            return 'mord' === this.type && this.value && /^[\d,.]$/.test(this.value) ? this.value : 'group' === this.type && 2 === (null === (lc = this.body) || void 0 === lc ? void 0 : lc.length) && 'first' === this.body[0].type && ',' === this.body[1].value ? '.' : '';
        }
        constructor(lc, mc, nc) {
            var oc, pc, qc, rc, sc, tc;
            this.id = void 0, this.verbatimLatex = void 0, this._isDirty = !1, this._changeCounter = 0, this.subsupPlacement = void 0, this.explicitSubsupPlacement = !1, this.skipBoundary = !1, this.captureSelection = !1, this.type = lc, this.context = mc, 'string' == typeof(null == nc ? void 0 : nc.value) && (this.value = nc.value), this.command = null !== (pc = null !== (oc = null == nc ? void 0 : nc.command) && void 0 !== oc ? oc : this.value) && void 0 !== pc ? pc : '', this.mode = null !== (qc = null == nc ? void 0 : nc.mode) && void 0 !== qc ? qc : 'math', this.isFunction = null !== (rc = null == nc ? void 0 : nc.isFunction) && void 0 !== rc && rc, this.subsupPlacement = null == nc ? void 0 : nc.limits, this.style = null !== (sc = null == nc ? void 0 : nc.style) && void 0 !== sc ? sc : {}, this.displayContainsHighlight = null !== (tc = null == nc ? void 0 : nc.displayContainsHighlight) && void 0 !== tc && tc, (null == nc ? void 0 : nc.serialize) && (kc.customSerializer[nc.command] = nc.serialize);
        }
    }

    function _lc(mc, nc) {
        if (!mc || 0 === mc.length)
            return '';
        if ('first' === mc[0].type) {
            if (1 === mc.length)
                return '';
            mc = mc.slice(1);
        }
        return 0 === mc.length ? '' : ec(Ib(mc, 'cssClass').map(mc => ec(Ib(mc, 'color').map(mc => ec(function(oc) {
            const pc = [];
            let qc = [],
                rc = 'NONE';
            for (const sc of oc)
                'first' !== sc.type && (sc.mode !== rc ? (qc.length > 0 && pc.push(qc), qc = [sc], rc = sc.mode) : qc.push(sc));
            return qc.length > 0 && pc.push(qc), pc;
        }(mc).map(mc => Hb.serialize(mc, nc)))))));
    }

    function _mc(nc, oc, pc) {
        var qc, rc, sc, tc;

        function uc(vc) {
            return 'text' === vc.mode;
        }
        if (!oc || 0 === oc.length)
            return null;
        const vc = new Db(nc, null == pc ? void 0 : pc.style),
            wc = !vc.atomIdsSettings || !vc.atomIdsSettings.groupNumbers;
        let xc, yc = [],
            zc = null !== (qc = null == pc ? void 0 : pc.newList) && void 0 !== qc && qc;
        if (1 === oc.length) {
            const Ac = oc[0],
                Bc = Ac.render(vc, {
                    newList: zc
                });
            Bc && (wc && Ac.isSelected && Bc.selected(!0), yc = [Bc]);
        } else {
            let Ac = '',
                Bc = !0;
            for (const Cc of oc) {
                (null === (rc = vc.atomIdsSettings) || void 0 === rc ? void 0 : rc.groupNumbers) && Ac && (Bc && Cc.isDigit() || !Bc && uc(Cc)) && (vc.atomIdsSettings.overrideID = Ac);
                const Dc = Cc.render(vc, {
                    newList: zc
                });
                vc.atomIdsSettings && (vc.atomIdsSettings.overrideID = void 0), Dc && (zc = 'group' === Cc.type && !Cc.boxType, (null === (sc = vc.atomIdsSettings) || void 0 === sc ? void 0 : sc.groupNumbers) && ((Cc.isDigit() || uc(Cc)) && (Ac && Bc === Cc.isDigit() || (Bc = Cc.isDigit(), Ac = null !== (tc = Cc.id) && void 0 !== tc ? tc : '')), !Ac || (Cc.isDigit() || uc(Cc)) && Cc.hasEmptyBranch('superscript') && Cc.hasEmptyBranch('subscript') || (Ac = '')), wc && Cc.isSelected && Dc.selected(!0), yc.push(Dc));
            }
        }
        return 0 === yc.length ? null : (pc || vc.isTight || yc.length > 1 ? (xc = new Nb(yc, {
            isTight: vc.isTight,
            ...null != pc ? pc : {}
        }), xc.isSelected = yc.every(nc => nc.isSelected)) : xc = yc[0], xc.wrap(vc).wrap(nc));
    }
    kc.customSerializer = {};
    class nc extends kc {
        static fromJson(oc, pc) {
            return new nc(oc.command, oc.body, pc, {
                accentChar: oc.accentChar,
                svgAccent: oc.svgAccent,
                style: oc.style
            });
        }
        toJson() {
            return {
                ...super.toJson(),
                accentChar: this.accent,
                svgAccent: this.svgAccent
            };
        }
        render(oc) {
            var pc;
            const qc = new Db(oc, this.style, 'cramp'),
                rc = null !== (pc = kc.createBox(qc, this.body)) && void 0 !== pc ? pc : new Nb(null);
            let sc = 0;
            !this.hasEmptyBranch('body') && 2 === this.body.length && this.body[1].isCharacterBox() && (sc = rc.skew);
            let tc, uc = Math.min(rc.height, 0.431);
            if (this.svgAccent)
                tc = Ub(this.svgAccent), uc = qc.metrics.bigOpSpacing1 - uc;
            else if (this.accent) {
                const vc = new Nb(this.accent, {
                    fontFamily: 'Main-Regular'
                });
                vc.italic = 0;
                const wc = 8407 === this.accent ? ' ML__accent-vec' : '';
                tc = new Nb(new Nb(vc), {
                    classes: 'ML__accent-body' + wc
                });
            }
            tc = new Vb({
                shift: 0,
                children: [{
                        box: new Nb(rc)
                    },
                    -uc,
                    {
                        box: tc,
                        marginLeft: rc.left + 2 * sc,
                        classes: ['ML__center']
                    }
                ]
            });
            const vc = new Nb(tc, {
                newList: !0,
                type: 'mord'
            });
            return this.caret && (vc.caret = this.caret), this.bind(qc, vc.wrap(qc)), this.attachSupsub(qc, {
                base: vc
            });
        }
        constructor(oc, pc, qc, rc) {
            super('accent', qc, {
                command: oc,
                style: rc.style
            }), rc.accentChar ? this.accent = rc.accentChar : this.svgAccent = null == rc ? void 0 : rc.svgAccent, this.body = pc, this.skipBoundary = !0;
        }
    }
    const oc = {
            '(': ')',
            '{': '}',
            '[': ']',
            '|': '|',
            '\\lbrace': '\\rbrace',
            '\\lparen': '\\rparen',
            '\\{': '\\}',
            '\\langle': '\\rangle',
            '\\lfloor': '\\rfloor',
            '\\lceil': '\\rceil',
            '\\vert': '\\vert',
            '\\lvert': '\\rvert',
            '\\Vert': '\\Vert',
            '\\lVert': '\\rVert',
            '\\lbrack': '\\rbrack',
            '\\ulcorner': '\\urcorner',
            '\\llcorner': '\\lrcorner',
            '\\lgroup': '\\rgroup',
            '\\lmoustache': '\\rmoustache'
        },
        pc = Object.fromEntries(Object.entries(oc).map(([qc, rc]) => [
            rc,
            qc
        ]));

    function sc(tc) {
        var uc;
        return null !== (uc = {
            '[': 91,
            ']': 93,
            '(': 40,
            ')': 41,
            '\\mid': 8739,
            '|': 8739,
            '\u2223': 8739,
            '\u2225': 8741,
            '\\|': 8739,
            '\\{': 123,
            '\\}': 125,
            '\\lbrace': 123,
            '\\rbrace': 125,
            '\\lparen': 40,
            '\\rparen': 41,
            '\\lbrack': 91,
            '\\rbrack': 93,
            '\\vert': 8739,
            '\\lvert': 8739,
            '\\mvert': 8739,
            '\\rvert': 8739,
            '\\Vert': 8741,
            '\\lVert': 8741,
            '\\mVert': 8741,
            '\\rVert': 8741,
            '\\parallel': 8741,
            '\\shortparallel': 8741,
            '\\langle': 10216,
            '\\rangle': 10217,
            '\\lfloor': 8970,
            '\\rfloor': 8971,
            '\\lceil': 8968,
            '\\rceil': 8969,
            '\\ulcorner': 9484,
            '\\urcorner': 9488,
            '\\llcorner': 9492,
            '\\lrcorner': 9496,
            '\\lgroup': 10222,
            '\\rgroup': 10223,
            '\\lmoustache': 9136,
            '\\rmoustache': 9137,
            '\\surd': 8730
        } [tc]) && void 0 !== uc ? uc : tc.codePointAt(0);
    }

    function tc(uc, vc, wc, xc, yc) {
        const zc = new Db(xc, null == yc ? void 0 : yc.style, 'textstyle'),
            Ac = new Nb(sc(uc), {
                fontFamily: 'Size' + vc + '-Regular',
                classes: 'ML__delim-size' + vc
            }).wrap(zc);
        return wc && Ac.setTop(0.25 * (1 - zc.scalingFactor)), Ac;
    }

    function uc(vc, wc, xc, yc, zc) {
        var Ac;
        let Bc, Cc, Dc, Ec;
        Bc = Dc = Ec = sc(vc), Cc = null;
        let Fc = 'Size1-Regular';
        '\\vert' === vc || '\\lvert' === vc || '\\rvert' === vc || '\\mvert' === vc || '\\mid' === vc ? Dc = Bc = Ec = 8739 : '\\Vert' === vc || '\\lVert' === vc || '\\rVert' === vc || '\\mVert' === vc || '\\|' === vc ? Dc = Bc = Ec = 8741 : '\\uparrow' === vc ? Dc = Ec = 9168 : '\\Uparrow' === vc ? Dc = Ec = 8214 : '\\downarrow' === vc ? Bc = Dc = 9168 : '\\Downarrow' === vc ? Bc = Dc = 8214 : '\\updownarrow' === vc ? (Bc = 8593, Dc = 9168, Ec = 8595) : '\\Updownarrow' === vc ? (Bc = 8657, Dc = 8214, Ec = 8659) : '[' === vc || '\\lbrack' === vc ? (Bc = 9121, Dc = 9122, Ec = 9123, Fc = 'Size4-Regular') : ']' === vc || '\\rbrack' === vc ? (Bc = 9124, Dc = 9125, Ec = 9126, Fc = 'Size4-Regular') : '\\lfloor' === vc || '\u230A' === vc ? (Dc = Bc = 9122, Ec = 9123, Fc = 'Size4-Regular') : '\\lceil' === vc || '\u2308' === vc ? (Bc = 9121, Dc = Ec = 9122, Fc = 'Size4-Regular') : '\\rfloor' === vc || '\u230B' === vc ? (Dc = Bc = 9125, Ec = 9126, Fc = 'Size4-Regular') : '\\rceil' === vc || '\u2309' === vc ? (Bc = 9124, Dc = Ec = 9125, Fc = 'Size4-Regular') : '(' === vc || '\\lparen' === vc ? (Bc = 9115, Dc = 9116, Ec = 9117, Fc = 'Size4-Regular') : ')' === vc || '\\rparen' === vc ? (Bc = 9118, Dc = 9119, Ec = 9120, Fc = 'Size4-Regular') : '\\{' === vc || '\\lbrace' === vc ? (Bc = 9127, Cc = 9128, Ec = 9129, Dc = 9130, Fc = 'Size4-Regular') : '\\}' === vc || '\\rbrace' === vc ? (Bc = 9131, Cc = 9132, Ec = 9133, Dc = 9130, Fc = 'Size4-Regular') : '\\lgroup' === vc || '\u27EE' === vc ? (Bc = 9127, Ec = 9129, Dc = 9130, Fc = 'Size4-Regular') : '\\rgroup' === vc || '\u27EF' === vc ? (Bc = 9131, Ec = 9133, Dc = 9130, Fc = 'Size4-Regular') : '\\lmoustache' === vc || '\u23B0' === vc ? (Bc = 9127, Ec = 9133, Dc = 9130, Fc = 'Size4-Regular') : '\\rmoustache' === vc || '\u23B1' === vc ? (Bc = 9131, Ec = 9129, Dc = 9130, Fc = 'Size4-Regular') : '\\surd' === vc ? (Bc = 57345, Ec = 9143, Dc = 57344, Fc = 'Size4-Regular') : '\\ulcorner' === vc ? (Bc = 9484, Dc = Ec = 32) : '\\urcorner' === vc ? (Bc = 9488, Dc = Ec = 32) : '\\llcorner' === vc ? (Ec = 9492, Dc = Bc = 32) : '\\lrcorner' === vc && (Bc = 9496, Dc = Bc = 32);
        const Gc = yb(Bc, Fc),
            Hc = Gc.height + Gc.depth,
            Ic = yb(Dc, Fc),
            Jc = Ic.height + Ic.depth,
            Kc = yb(Ec, Fc),
            Lc = Kc.height + Kc.depth;
        let Mc = 0,
            Nc = 1;
        if (null !== Cc) {
            const Oc = yb(Cc, Fc);
            Mc = Oc.height + Oc.depth, Nc = 2;
        }
        const Oc = Hc + Lc + Mc,
            Pc = Math.max(0, Math.ceil((wc - Oc) / (Nc * Jc))),
            Qc = Oc + Pc * Nc * Jc;
        let Rc = 0.25;
        xc && (Rc *= yc.scalingFactor);
        const Sc = Qc / 2 - Rc,
            Tc = [];
        Tc.push({
            box: new Nb(Ec, {
                fontFamily: Fc
            })
        }), Tc.push(-0.008);
        const Uc = new Nb(Dc, {
            fontFamily: Fc
        });
        if (null === Cc)
            for (let Vc = 0; Vc < Pc; Vc++)
                Tc.push({
                    box: Uc
                });
        else {
            for (let Wc = 0; Wc < Pc; Wc++)
                Tc.push({
                    box: Uc
                });
            Tc.push(-0.008), Tc.push({
                box: new Nb(Cc, {
                    fontFamily: Fc
                })
            }), Tc.push(-0.008);
            for (let Xc = 0; Xc < Pc; Xc++)
                Tc.push({
                    box: Uc
                });
        }
        Tc.push(-0.008), Tc.push({
            box: new Nb(Bc, {
                fontFamily: Fc
            })
        });
        let Vc = '';
        'Size1-Regular' === Fc ? Vc = ' delim-size1' : 'Size4-Regular' === Fc && (Vc = ' delim-size4');
        const Wc = new Vb({
            bottom: Sc,
            children: Tc
        }, {
            classes: Vc
        });
        return new Nb(Wc, {
            ...null != zc ? zc : {},
            classes: (null !== (Ac = null == zc ? void 0 : zc.classes) && void 0 !== Ac ? Ac : '') + ' ML__delim-mult'
        });
    }
    const vc = new Set([
            '(',
            ')',
            '\\lparen',
            '\\rparen',
            '[',
            ']',
            '\\lbrack',
            '\\rbrack',
            '\\{',
            '\\}',
            '\\lbrace',
            '\\rbrace',
            '\\lfloor',
            '\\rfloor',
            '\\lceil',
            '\\rceil',
            '\\surd',
            '\u230A',
            '\u230B',
            '\u2308',
            '\u2309'
        ]),
        wc = new Set([
            '\\uparrow',
            '\\downarrow',
            '\\updownarrow',
            '\\Uparrow',
            '\\Downarrow',
            '\\Updownarrow',
            '|',
            '\\|',
            '\\vert',
            '\\Vert',
            '\\lvert',
            '\\rvert',
            '\\lVert',
            '\\rVert',
            '\\mvert',
            '\\mid',
            '\\lgroup',
            '\\rgroup',
            '\\lmoustache',
            '\\rmoustache',
            '\u27EE',
            '\u27EF',
            '\u23B0',
            '\u23B1'
        ]),
        xc = new Set([
            '<',
            '>',
            '\\langle',
            '\\rangle',
            '/',
            '\\backslash',
            '\\lt',
            '\\gt'
        ]),
        yc = [
            0,
            1.2,
            1.8,
            2.4,
            3
        ],
        zc = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            }
        ],
        Ac = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'stack'
            }
        ],
        Bc = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            },
            {
                type: 'stack'
            }
        ];

    function Cc(Dc, Ec, Fc, Gc, Hc, Ic) {
        var Jc;
        if (!Ec || 0 === Ec.length || '.' === Ec)
            return _Ec(Hc, Dc, Dc);
        let Kc;
        '<' === Ec || '\\lt' === Ec ? Ec = '\\langle' : '>' !== Ec && '\\gt' !== Ec || (Ec = '\\rangle'), Kc = xc.has(Ec) ? zc : vc.has(Ec) ? Bc : Ac;
        const Lc = function(Mc, Nc, Oc, Pc) {
                for (let Qc = {
                        '-4': 0,
                        '-3': 1,
                        0: 2
                    } [Pc.mathstyle.sizeDelta]; Qc < Oc.length && 'stack' !== Oc[Qc].type; Qc++) {
                    const Rc = yb(Mc, 'small' === (Hc = Oc[Qc]).type ? 'Main-Regular' : 'large' === Hc.type ? 'Size' + Hc.size + '-Regular' : 'Size4-Regular');
                    if (Rc.defaultMetrics)
                        return {
                            type: 'small',
                            mathstyle: 'scriptstyle'
                        };
                    let Sc = Rc.height + Rc.depth;
                    if ('small' === Oc[Qc].type && ('scriptscriptstyle' === Oc[Qc].mathstyle ? Sc *= wb[Math.max(1, Pc.size - 2)] : 'scriptstyle' === Oc[Qc].mathstyle && (Sc *= wb[Math.max(1, Pc.size - 1)])), Sc > Nc)
                        return Oc[Qc];
                }
                var Rc;
                return Oc[Oc.length - 1];
            }(sc(Ec), Fc, Kc, Hc),
            Mc = new Db(Hc, null == Ic ? void 0 : Ic.style, Lc.mathstyle);
        return 'small' === Lc.type ? function(Nc, Oc, Pc, Qc) {
            const Rc = new Nb(sc(Nc), {
                fontFamily: 'Main-Regular'
            }).wrap(Oc, Qc);
            return Pc && Rc.setTop(0.25 * (1 - Oc.scalingFactor)), Rc;
        }(Ec, Mc, Gc, {
            type: Dc,
            classes: 'ML__small-delim ' + (null !== (Jc = null == Ic ? void 0 : Ic.classes) && void 0 !== Jc ? Jc : '')
        }) : 'large' === Lc.type ? tc(Ec, Lc.size, Gc, Mc, {
            ...Ic,
            type: Dc
        }) : uc(Ec, Fc, Gc, Mc, {
            ...Ic,
            type: Dc
        });
    }

    function Dc(Ec, Fc, Gc, Hc, Ic, Jc) {
        if ('.' === Fc)
            return _Ec(Ic, Ec, null == Jc ? void 0 : Jc.classes);
        const Kc = 0.25 * Ic.scalingFactor,
            Lc = Math.max(Gc - Kc, Hc + Kc);
        return Cc(Ec, Fc, Math.max(Lc / 500 * 901, 2 * Lc - 0.5), !0, Ic, Jc);
    }

    function _Ec(Fc, Gc, Hc) {
        const Ic = new Db(Fc, void 0, 'textstyle');
        return new Nb(null, {
            classes: ' nulldelimiter ' + (null != Hc ? Hc : ''),
            type: Gc
        }).wrap(Ic);
    }
    class Fc extends kc {
        static fromJson(Gc, Hc) {
            return new Fc(Gc.command, Hc, Gc);
        }
        toJson() {
            const Gc = {};
            return this.skipBoundary || (Gc.skipBoundary = !1), this.subsupPlacement && (Gc.subsupPlacement = this.subsupPlacement), this.svgAbove && (Gc.svgAbove = this.svgAbove), this.svgBelow && (Gc.svgBelow = this.svgBelow), this.svgBody && (Gc.svgBody = this.svgBody), 'mord' !== this.boxType && (Gc.boxType = this.boxType), this.paddedBody && (Gc.paddedBody = !0), this.paddedLabels && (Gc.paddedLabels = !0), {
                ...super.toJson(),
                ...Gc
            };
        }
        render(Gc) {
            let Hc = this.svgBody ? Ub(this.svgBody) : kc.createBox(Gc, this.body, {
                newList: !0
            });
            const Ic = new Db(Gc, this.style, 'scriptstyle');
            let Jc = null;
            this.svgAbove ? Jc = Ub(this.svgAbove) : this.above && (Jc = kc.createBox(Ic, this.above, {
                newList: !0
            }));
            let Kc = null;
            this.svgBelow ? Kc = Ub(this.svgBelow) : this.below && (Kc = kc.createBox(Ic, this.below, {
                newList: !0
            })), this.paddedBody && (Hc = new Nb([
                _Ec(Gc, 'mopen'),
                Hc,
                _Ec(Gc, 'mclose')
            ], {
                newList: !0
            }));
            let Lc = function(Mc, Nc) {
                if (!Nc.base)
                    return null;
                if (!Nc.above && !Nc.below) {
                    const Oc = new Nb(Nc.base, {
                        type: Nc.type
                    });
                    return Oc.setStyle('position', 'relative'), Oc;
                }
                let Oc = 0;
                Nc.above && (Oc = -Nc.above.depth + Mc.metrics.bigOpSpacing2);
                let Pc = null;
                const Qc = Nc.base,
                    Rc = ['ML__center'];
                if (Nc.paddedAboveBelow && Rc.push('ML__label_padding'), Nc.below && Nc.above) {
                    const Sc = Mc.metrics.bigOpSpacing5 + Nc.below.height + Nc.below.depth + Qc.depth + 0;
                    Pc = new Vb({
                        bottom: Sc,
                        children: [
                            Mc.metrics.bigOpSpacing5,
                            {
                                box: Nc.below,
                                classes: Rc
                            },
                            {
                                box: Qc,
                                classes: ['ML__center']
                            },
                            Oc,
                            {
                                box: Nc.above,
                                classes: Rc
                            },
                            Mc.metrics.bigOpSpacing5
                        ]
                    });
                } else
                    Nc.below ? Pc = new Vb({
                        top: Qc.height - 0,
                        children: [
                            Mc.metrics.bigOpSpacing5,
                            {
                                box: Nc.below,
                                classes: Rc
                            },
                            {
                                box: Qc,
                                classes: ['ML__center']
                            }
                        ]
                    }) : Nc.above && (Pc = new Vb({
                        bottom: Qc.depth + 0,
                        children: [{
                                box: Qc,
                                classes: ['ML__center']
                            },
                            Oc,
                            {
                                box: Nc.above,
                                classes: Rc
                            },
                            Mc.metrics.bigOpSpacing5
                        ]
                    }));
                return new Nb(Pc, {
                    type: Nc.type
                });
            }(Gc, {
                base: Hc,
                above: Jc,
                below: Kc,
                type: 'mbin' === this.boxType || 'mrel' === this.boxType ? this.boxType : 'mord',
                paddedAboveBelow: this.paddedLabels
            });
            return Lc ? (Lc = 'over-under' === this.subsupPlacement ? this.attachLimits(Gc, {
                base: Lc,
                type: Lc.type
            }) : this.attachSupsub(Gc, {
                base: Lc
            }), this.caret && (Lc.caret = this.caret), this.bind(Gc, Lc)) : null;
        }
        constructor(Gc, Hc, Ic) {
            var Jc, Kc, Lc, Mc;
            super('overunder', Hc, {
                command: Gc,
                serialize: Ic.serialize,
                style: Ic.style
            }), this.skipBoundary = null === (Jc = Ic.skipBoundary) || void 0 === Jc || Jc, this.subsupPlacement = Ic.supsubPlacement, this.body = Ic.body, this.svgAbove = Ic.svgAbove, this.svgBelow = Ic.svgBelow, this.svgBody = Ic.svgBody, this.above = Ic.above, this.below = Ic.below, this.boxType = null !== (Kc = Ic.boxType) && void 0 !== Kc ? Kc : 'mord', this.paddedBody = null !== (Lc = Ic.paddedBody) && void 0 !== Lc && Lc, this.paddedLabels = null !== (Mc = Ic.paddedLabels) && void 0 !== Mc && Mc;
        }
    }
    class Gc extends kc {
        static fromJson(Hc, Ic) {
            return new Gc(Hc.body, Ic, Hc);
        }
        toJson() {
            const Hc = {};
            return this.mathstyleName && (Hc.mathstyleName = this.mathstyleName), this.latexOpen && (Hc.latexOpen = this.latexOpen), this.latexClose && (Hc.latexClose = this.latexClose), this.cssId && (Hc.cssId = this.cssId), this.htmlData && (Hc.htmlData = this.htmlData), this.htmlStyle && (Hc.htmlStyle = this.htmlStyle), this.customClass && (Hc.customClass = this.customClass), this.boxType && (Hc.boxType = this.boxType), this.captureSelection && (Hc.captureSelection = !0), this.changeMode && (Hc.changeMode = !0), {
                ...super.toJson(),
                ...Hc
            };
        }
        render(Hc) {
            const Ic = new Db(Hc, this.style, this.mathstyleName),
                Jc = kc.createBox(Ic, this.body, {
                    type: this.boxType,
                    classes: this.customClass,
                    mode: this.mode,
                    style: {
                        backgroundColor: this.style.backgroundColor
                    },
                    newList: !this.boxType
                });
            return Jc ? (this.cssId && (Jc.cssId = this.cssId), this.htmlData && (Jc.htmlData = this.htmlData), this.htmlStyle && (Jc.htmlStyle = this.htmlStyle), this.caret && (Jc.caret = this.caret), this.bind(Hc, Jc)) : null;
        }
        serialize(Hc) {
            let Ic = this.bodyToLatex(Hc);
            return 'string' == typeof this.latexOpen && (Ic = this.latexOpen + Ic + this.latexClose), this.htmlData && (Ic = `\\htmlData{${ this.htmlData }}{${ Ic }}`), this.htmlStyle && (Ic = `\\htmlStyle{${ this.htmlStyle }}{${ Ic }}`), this.customClass && (Ic = `\\class{${ this.customClass }}{${ Ic }}`), this.cssId && (Ic = `\\cssId{${ this.cssId }}{${ Ic }}`), Ic;
        }
        constructor(Hc, Ic, Jc) {
            var Kc, Lc, Mc;
            super('group', Ic, {
                command: null == Jc ? void 0 : Jc.command,
                mode: null !== (Kc = null == Jc ? void 0 : Jc.mode) && void 0 !== Kc ? Kc : 'math',
                serialize: null == Jc ? void 0 : Jc.serialize,
                style: null == Jc ? void 0 : Jc.style
            }), this.body = Hc, this.mathstyleName = null == Jc ? void 0 : Jc.mathstyleName, this.latexOpen = null == Jc ? void 0 : Jc.latexOpen, this.latexClose = null == Jc ? void 0 : Jc.latexClose, this.cssId = null == Jc ? void 0 : Jc.cssId, this.htmlData = null == Jc ? void 0 : Jc.htmlData, this.htmlStyle = null == Jc ? void 0 : Jc.htmlStyle, this.customClass = null == Jc ? void 0 : Jc.customClass, this.boxType = null == Jc ? void 0 : Jc.boxType, this.skipBoundary = !0, this.captureSelection = null !== (Lc = null == Jc ? void 0 : Jc.captureSelection) && void 0 !== Lc && Lc, this.changeMode = null !== (Mc = null == Jc ? void 0 : Jc.changeMode) && void 0 !== Mc && Mc, this.displayContainsHighlight = !1, Hc && 1 === Hc.length && ',' === Hc[0].command && (this.captureSelection = !0);
        }
    }
    class Hc extends kc {
        static fromJson(Ic, Jc) {
            return new Hc(Ic.command, Ic.style, Jc, Ic.width);
        }
        toJson() {
            const Ic = {};
            return this.width && (Ic.width = this.width), {
                ...super.toJson(),
                ...Ic
            };
        }
        render(Ic) {
            var Jc;
            let Kc;
            if (this.width)
                Kc = new Nb(null, {
                    classes: 'mspace'
                }), Kc.left = Bb(this.width.glue);
            else {
                const Lc = null !== (Jc = {
                    '\\qquad': 'qquad',
                    '\\quad': 'quad',
                    '\\enspace': 'enspace',
                    '\\;': 'thickspace',
                    '\\:': 'mediumspace',
                    '\\,': 'thinspace',
                    '\\!': 'negativethinspace'
                } [this.command]) && void 0 !== Jc ? Jc : 'mediumspace';
                Kc = new Nb(null, {
                    classes: Lc
                });
            }
            return Kc = this.bind(Ic, Kc), this.caret && (Kc.caret = this.caret), Kc;
        }
        serialize(Ic) {
            var Jc;
            let Kc = null !== (Jc = this.command) && void 0 !== Jc ? Jc : '';
            return '\\hspace' === this.command || '\\hspace*' === this.command ? Number.isFinite(this.width) ? Kc += `{${ this.width }em'}` : Kc += '{0pt}' : Number.isFinite(this.width) && (Kc += ` ${ this.width }em`), Kc;
        }
        constructor(Ic, Jc, Kc, Lc) {
            super('spacing', Kc, {
                command: Ic,
                style: Jc
            }), this.width = Lc;
        }
    }
    class Ic extends kc {
        static fromJson(Jc, Kc) {
            var Lc;
            return new Ic(null !== (Lc = Jc.variant) && void 0 !== Lc ? Lc : '', Jc.body, Kc, Jc);
        }
        toJson() {
            const Jc = super.toJson();
            return this.variant && (Jc.variant = this.variant), this.leftDelim && (Jc.leftDelim = this.leftDelim), this.rightDelim && (Jc.rightDelim = this.rightDelim), Jc;
        }
        serialize(Jc) {
            var Kc, Lc;
            const Mc = this.matchingRightDelim();
            return 'left...right' === this.variant ? ec([
                '\\left' + (null !== (Kc = this.leftDelim) && void 0 !== Kc ? Kc : '.'),
                this.bodyToLatex(Jc),
                '\\right' + Mc
            ]) : 'mleft...mright' === this.variant ? ec([
                '\\mleft' + (null !== (Lc = this.leftDelim) && void 0 !== Lc ? Lc : '.'),
                this.bodyToLatex(Jc),
                '\\mright' + Mc
            ]) : ec([
                this.leftDelim && '.' !== this.leftDelim ? this.leftDelim : '',
                this.bodyToLatex(Jc),
                Mc
            ]);
        }
        matchingRightDelim() {
            var Jc, Kc;
            if (this.rightDelim && '?' !== this.rightDelim)
                return this.rightDelim;
            const Lc = null !== (Jc = this.leftDelim) && void 0 !== Jc ? Jc : '.';
            return null !== (Kc = oc[Lc]) && void 0 !== Kc ? Kc : Lc;
        }
        render(Jc) {
            var Kc, Lc, Mc;
            const Nc = new Db(Jc, this.style),
                Oc = new Db(Jc, this.style, 'textstyle'),
                Pc = null !== (Kc = kc.createBox(Nc, this.body, {
                    newList: !0
                })) && void 0 !== Kc ? Kc : new Nb(null, {
                    newList: !0
                }),
                Qc = Pc.height / Oc.scalingFactor,
                Rc = Pc.depth / Oc.scalingFactor,
                Sc = [];
            if (this.leftDelim && Sc.push(this.bind(Oc, Dc('mopen', this.leftDelim, Qc, Rc, Oc, {
                    classes: 'ML__open' + (this.containsCaret ? ' ML__contains-caret' : ''),
                    mode: this.mode,
                    style: this.style
                }))), Pc) {
                if (Pc.children)
                    for (let Tc = 0; Tc < Pc.children.length; Tc++) {
                        const Uc = Pc.children[Tc];
                        if (Uc.delim) {
                            const Vc = Uc.caret;
                            Pc.children[Tc] = this.bind(Nc, Dc('minner', Uc.delim, Qc, Rc, Nc)), Pc.children[Tc].caret = Vc;
                        }
                    }
                Sc.push(Pc);
            }
            if (this.rightDelim) {
                let Tc = this.containsCaret ? ' ML__contains-caret' : '',
                    Uc = this.rightDelim;
                '?' === Uc && (this.context.smartFence ? (Uc = this.matchingRightDelim(), Tc += ' ML__smart-fence__close') : Uc = '.'), Sc.push(this.bind(Oc, Dc('mclose', Uc, Qc, Rc, Oc, {
                    classes: Tc + ' ML__close',
                    mode: this.mode,
                    style: this.style
                })));
            }
            const Tc = null !== (Mc = 'mleft...mright' === this.variant || (null === (Lc = this.leftSibling) || void 0 === Lc ? void 0 : Lc.isFunction)) && void 0 !== Mc && Mc,
                Uc = new Nb(Sc, {
                    type: Tc ? 'mclose' : 'minner',
                    classes: 'left-right'
                });
            return this.caret && (Uc.caret = this.caret), this.bind(Nc, Uc.wrap(Nc));
        }
        constructor(Jc, Kc, Lc, Mc) {
            super('leftright', Lc, {
                style: Mc.style,
                displayContainsHighlight: !0
            }), this.variant = Jc, this.body = Kc, this.leftDelim = Mc.leftDelim, this.rightDelim = Mc.rightDelim;
        }
    }
    class Jc extends kc {
        static fromJson(Kc, Lc) {
            const Mc = new Jc(Lc, Kc);
            for (const Nc of hc)
                Kc[Nc] && Mc.setChildren(Kc[Nc], Nc);
            return Mc;
        }
        toJson() {
            return super.toJson();
        }
        render(Kc) {
            var Lc;
            const Mc = this.leftSibling,
                Nc = new Db(Kc, {
                    isPhantom: !0
                }),
                Oc = null !== (Lc = Mc.render(Nc)) && void 0 !== Lc ? Lc : new Nb(null),
                Pc = new Nb(null, {
                    height: Oc.height,
                    depth: Oc.depth
                });
            return this.attachSupsub(Kc, {
                base: Pc,
                isCharacterBox: Mc.isCharacterBox(),
                type: 'supsub'
            });
        }
        serialize(Kc) {
            return this.supsubToLatex(Kc);
        }
        constructor(Kc, Lc) {
            super('msubsup', Kc, {
                style: null == Lc ? void 0 : Lc.style
            });
        }
    }
    class Kc extends kc {
        static fromJson(Lc, Mc) {
            return new Kc(Mc, Lc);
        }
        toJson() {
            const Lc = super.toJson();
            return this.placeholderId && (Lc.placeholderId = this.placeholderId), this.value === this.context.placeholderSymbol && delete Lc.value, this.defaultValue && (Lc.defaultValue = this.defaultValue.map(Lc => Lc.toJson())), Lc;
        }
        render(Lc) {
            if ('function' == typeof Lc.renderPlaceholder)
                return Lc.renderPlaceholder(Lc, this);
            let Mc = '';
            return this.caret && (Mc += 'ML__placeholder-selected '), this.isSelected && (Mc += ' ML__selected '), this.createBox(Lc, {
                classes: Mc
            });
        }
        serialize(Lc) {
            var Mc;
            let Nc = null !== (Mc = this.value) && void 0 !== Mc ? Mc : '';
            return Nc === this.context.placeholderSymbol && (Nc = ''), `\\placeholder${ this.placeholderId ? `[${ this.placeholderId }]` : '' }${ this.defaultValue ? `[${ kc.serialize(this.defaultValue, Lc) }]` : '' }{${ Nc }}`;
        }
        constructor(Lc, Mc) {
            var Nc;
            const Oc = (null == Mc ? void 0 : Mc.value) || Lc.placeholderSymbol;
            super('placeholder', Lc, {
                mode: null !== (Nc = null == Mc ? void 0 : Mc.mode) && void 0 !== Nc ? Nc : 'math',
                style: null == Mc ? void 0 : Mc.style,
                value: Oc,
                command: '\\placeholder'
            }), this.captureSelection = !0, this.placeholderId = null == Mc ? void 0 : Mc.placeholderId, (null == Mc ? void 0 : Mc.default) && (this.defaultValue = null == Mc ? void 0 : Mc.default);
        }
    }
    class Lc extends kc {
        static fromJson(Mc, Nc) {
            return new Lc(Mc.command, Nc);
        }
        toJson() {
            return super.toJson();
        }
        render(Mc) {
            const Nc = this.createBox(Mc, {
                classes: 'ML__error'
            });
            return this.caret && (Nc.caret = this.caret), Nc;
        }
        constructor(Mc, Nc) {
            super('error', Nc, {
                value: Mc,
                command: Mc,
                mode: 'math'
            }), this.verbatimLatex = Mc;
        }
    }
    class Mc extends kc {
        static fromJson(Nc, Oc) {
            return new Mc(Nc.command, Oc, Nc);
        }
        toJson() {
            const Nc = super.toJson();
            return this.expand && (Nc.expand = !0), void 0 !== this.captureSelection && (Nc.captureSelection = this.captureSelection), this.macroArgs && (Nc.args = this.macroArgs), Nc;
        }
        serialize(Nc) {
            return Nc.expandMacro && this.expand ? this.bodyToLatex(Nc) : this.command + this.macroArgs;
        }
        render(Nc) {
            const Oc = kc.createBox(Nc, this.body);
            return Oc ? (this.caret && (Oc.caret = this.caret), this.bind(Nc, Oc)) : null;
        }
        constructor(Nc, Oc, Pc) {
            var Qc, Rc;
            super('macro', Oc, {
                command: Nc
            }), this.body = Pc.body, void 0 === Pc.captureSelection ? Pc.args ? this.captureSelection = !1 : this.captureSelection = !0 : this.captureSelection = Pc.captureSelection, this.macroArgs = null !== (Qc = Pc.args) && void 0 !== Qc ? Qc : '', this.expand = null !== (Rc = Pc.expand) && void 0 !== Rc && Rc;
        }
    }
    class Nc extends kc {
        static fromJson(Oc, Pc) {
            return new Nc(Oc.command, Oc.value, Oc.style, Pc);
        }
        toJson() {
            return super.toJson();
        }
        render(Oc) {
            const Pc = this.createBox(Oc);
            return this.caret && (Pc.caret = this.caret), Pc;
        }
        serialize(Oc) {
            var Pc;
            return null !== (Pc = this.verbatimLatex) && void 0 !== Pc ? Pc : J('text', this.value.codePointAt(0));
        }
        constructor(Oc, Pc, Qc, Rc) {
            super('text', Rc, {
                command: Oc,
                mode: 'text',
                displayContainsHighlight: !0
            }), this.value = Pc, this.verbatimLatex = Pc, this.applyStyle(Qc);
        }
    }

    function Oc(Pc) {
        return !/^<({|}|\$|\$\$|space)>$/.test(Pc);
    }
    class Pc {
        get currentContext() {
            return this._currentParsingContext;
        }
        get rootContext() {
            let Qc = this._currentParsingContext;
            for (; Qc.parent;)
                Qc = Qc.parent;
            return Qc;
        }
        beginContext(Qc) {
            var Rc, Sc, Tc;
            const Uc = {
                parent: this.currentContext,
                mathlist: [],
                style: {
                    ...this.currentContext.style
                },
                parseMode: null !== (Rc = null == Qc ? void 0 : Qc.mode) && void 0 !== Rc ? Rc : this.currentContext.parseMode,
                mathstyle: null !== (Sc = null == Qc ? void 0 : Qc.mathstyle) && void 0 !== Sc ? Sc : this.currentContext.mathstyle,
                registers: null,
                tabular: null !== (Tc = null == Qc ? void 0 : Qc.tabular) && void 0 !== Tc && Tc
            };
            this._currentParsingContext = Uc;
        }
        endContext() {
            this._currentParsingContext = this._currentParsingContext.parent;
        }
        onError(Qc) {
            this.errors.push({
                before: fc(this.tokens.slice(this.index, this.index + 10)),
                after: fc(this.tokens.slice(Math.max(0, this.index - 10), this.index)),
                ...Qc
            });
        }
        get mathlist() {
            return this.currentContext.mathlist;
        }
        set mathlist(Qc) {
            this.currentContext.mathlist = Qc;
        }
        get parseMode() {
            return this.currentContext.parseMode;
        }
        set parseMode(Qc) {
            this.currentContext.parseMode = Qc;
        }
        get tabularMode() {
            return this.currentContext.tabular;
        }
        get style() {
            let Qc = this.currentContext;
            for (; Qc;) {
                if (Qc.style)
                    return Qc.style;
                Qc = Qc.parent;
            }
            return {};
        }
        set style(Qc) {
            this.currentContext.style = Qc;
        }
        getRegister(Qc) {
            var Rc, Sc, Tc;
            if (Qc.startsWith('global '))
                return null !== (Sc = null === (Rc = this.rootContext.registers) || void 0 === Rc ? void 0 : Rc[Qc.slice(7)]) && void 0 !== Sc ? Sc : 0;
            let Uc = this.currentContext;
            for (; Uc;) {
                if (null === (Tc = Uc.registers) || void 0 === Tc ? void 0 : Tc[Qc])
                    return Uc.registers[Qc];
                Uc = Uc.parent;
            }
            return 0;
        }
        setRegister(Qc, Rc) {
            var Sc;
            if (Qc.startsWith('global ')) {
                Qc = Qc.slice(7);
                let Tc = this.currentContext;
                for (; Tc;)
                    (null === (Sc = Tc.registers) || void 0 === Sc ? void 0 : Sc[Qc]) && delete Tc.registers[Qc], Tc = Tc.parent;
                this.rootContext.registers[Qc] = Rc;
            } else
                this.currentContext.registers || (this.currentContext.registers = {}), this.currentContext.registers[Qc] = Rc;
        }
        end() {
            return this.endCount++, this.index >= this.tokens.length || this.endCount > 1000;
        }
        get() {
            return this.endCount = 0, this.index < this.tokens.length ? this.tokens[this.index++] : '';
        }
        peek() {
            return this.tokens[this.index];
        }
        match(Qc) {
            return this.tokens[this.index] === Qc && (this.index++, !0);
        }
        lastSubsupAtom() {
            let Qc;
            if (this.mathlist.length > 0) {
                if (Qc = this.mathlist[this.mathlist.length - 1], 'msubsup' === Qc.type)
                    return Qc;
                if (void 0 !== Qc.subsupPlacement)
                    return Qc;
            }
            return Qc = new Jc(this.context, {
                style: this.style
            }), this.mathlist.push(Qc), Qc;
        }
        hasPattern(Qc) {
            return Qc.test(this.tokens[this.index]);
        }
        hasInfixCommand() {
            var Qc;
            const {
                index: Rc
            } = this;
            if (Rc < this.tokens.length && this.tokens[Rc].startsWith('\\')) {
                const Sc = this.context.getDefinition(this.tokens[Rc], this.parseMode);
                return !(!Sc || 'symbol' === Sc.definitionType) && !(Sc.ifMode && !Sc.ifMode.includes(this.parseMode)) && null !== (Qc = Sc.infix) && void 0 !== Qc && Qc;
            }
            return !1;
        }
        matchColumnSeparator() {
            const {
                index: Qc
            } = this;
            return !(!this.tabularMode || '&' !== this.tokens[Qc] || (this.index++, 0));
        }
        matchRowSeparator() {
            const {
                index: Qc
            } = this;
            return !(!this.tabularMode || '\\\\' !== this.tokens[Qc] && '\\cr' !== this.tokens[Qc] || (this.index++, 0));
        }
        placeholder() {
            var Qc;
            const Rc = null === (Qc = this.args) || void 0 === Qc ? void 0 : Qc.call(this, '?');
            return Rc ? _Qc(Rc, this.context, {
                parseMode: this.parseMode,
                mathstyle: 'textstyle'
            }) : [new Kc(this.context, {
                mode: this.parseMode,
                style: this.style
            })];
        }
        matchWhitespace() {
            let Qc = !1;
            for (; this.match('<space>');)
                Qc = !0;
            return Qc;
        }
        skipUntilToken(Qc) {
            let Rc = this.tokens[this.index];
            for (; Rc && Rc !== Qc;)
                Rc = this.tokens[++this.index];
            Rc === Qc && this.index++;
        }
        skipFiller() {
            let Qc = !1;
            do {
                const Rc = this.matchWhitespace(),
                    Sc = this.match('\\relax');
                Qc = !Rc && !Sc;
            } while (!Qc);
        }
        matchKeyword(Qc) {
            const Rc = this.index;
            let Sc = this.end(),
                Tc = '';
            for (; !Sc;) {
                const Uc = this.get();
                Oc(Uc) ? (Tc += Uc, Sc = this.end() || Tc.length >= Qc.length) : Sc = !0;
            }
            const Uc = Qc.toUpperCase() === Tc.toUpperCase();
            return Uc || (this.index = Rc), Uc;
        }
        scanString() {
            let Qc = '';
            for (; !this.end();)
                if (this.match('<space>'))
                    Qc += ' ';
                else {
                    const Rc = this.peek();
                    if (']' === Rc)
                        break;
                    if (Oc(Rc))
                        Qc += this.get();
                    else {
                        if (!Rc.startsWith('\\'))
                            break;
                        this.onError({
                            code: 'unbalanced-braces'
                        }), Qc += this.get();
                    }
                }
            return Qc;
        }
        scanBalancedString() {
            let Qc = '',
                Rc = this.end(),
                Sc = 1;
            for (; !Rc;) {
                if (this.match('<space>'))
                    Qc += ' ';
                else {
                    const Tc = this.get();
                    '<{>' === Tc ? (Qc += '{', Sc += 1) : '<}>' === Tc ? (Sc -= 1, Sc > 0 ? Qc += '}' : this.index -= 1) : Qc += '<$>' === Tc ? '$' : '<$$>' === Tc ? '$$' : Tc;
                }
                Rc = 0 === Sc || this.end();
            }
            return Qc;
        }
        matchLiteralArg() {
            var Qc;
            let Rc = '';
            if (this.match('<{>')) {
                let Sc = 1;
                for (; Sc > 0 && !this.end();) {
                    const Tc = this.get();
                    '<}>' === Tc ? (Sc -= 1, Sc > 0 && (Rc += '}')) : '<{>' === Tc ? (Sc += 1, Rc += '{') : Rc += null !== (Qc = {
                        '<space>': ' ',
                        '<$$>': '$$',
                        '<$>': '$'
                    } [Tc]) && void 0 !== Qc ? Qc : Tc;
                }
            }
            return Rc;
        }
        scanNumber(Qc = !0) {
            var Rc, Sc;
            let Tc = !1,
                Uc = this.peek();
            for (;
                '<space>' === Uc || '+' === Uc || '-' === Uc;)
                this.get(), '-' === Uc && (Tc = !Tc), Uc = this.peek();
            Qc = Boolean(Qc);
            let Vc = 10,
                Wc = /\d/;
            if (this.match('\''))
                Vc = 8, Wc = /[0-7]/, Qc = !0;
            else if (this.match('"') || this.match('x'))
                Vc = 16, Wc = /[\dA-F]/, Qc = !0;
            else if (this.match('`'))
                return Uc = this.get(), Uc ? Uc.startsWith('\\') && 2 === Uc.length ? (Tc ? -1 : 1) * (null !== (Rc = Uc.codePointAt(1)) && void 0 !== Rc ? Rc : 0) : (Tc ? -1 : 1) * (null !== (Sc = Uc.codePointAt(0)) && void 0 !== Sc ? Sc : 0) : null;
            let Xc = '';
            for (; this.hasPattern(Wc);)
                Xc += this.get();
            if (!Qc && (this.match('.') || this.match(',')))
                for (Xc += '.'; this.hasPattern(Wc);)
                    Xc += this.get();
            const Yc = Qc ? Number.parseInt(Xc, Vc) : Number.parseFloat(Xc);
            return Number.isNaN(Yc) ? null : Tc ? -Yc : Yc;
        }
        scanDimen() {
            var Qc, Rc, Sc;
            let Tc, Uc = this.scanNumber(!1);
            if (null === Uc) {
                if (!(null === (Qc = this.peek()) || void 0 === Qc ? void 0 : Qc.startsWith('\\')))
                    return null;
                Uc = 1;
            }
            return this.matchWhitespace(), this.matchKeyword('pt') ? Tc = {
                dimension: Uc,
                unit: 'pt'
            } : this.matchKeyword('mm') ? Tc = {
                dimension: Uc,
                unit: 'mm'
            } : this.matchKeyword('cm') ? Tc = {
                dimension: Uc,
                unit: 'cm'
            } : this.matchKeyword('ex') ? Tc = {
                dimension: Uc,
                unit: 'ex'
            } : this.matchKeyword('px') ? Tc = {
                dimension: Uc,
                unit: 'px'
            } : this.matchKeyword('em') ? Tc = {
                dimension: Uc,
                unit: 'em'
            } : this.matchKeyword('bp') ? Tc = {
                dimension: Uc,
                unit: 'bp'
            } : this.matchKeyword('dd') ? Tc = {
                dimension: Uc,
                unit: 'dd'
            } : this.matchKeyword('pc') ? Tc = {
                dimension: Uc,
                unit: 'pc'
            } : this.matchKeyword('in') ? Tc = {
                dimension: Uc,
                unit: 'in'
            } : this.matchKeyword('mu') ? Tc = {
                dimension: Uc,
                unit: 'mu'
            } : (null === (Rc = this.peek()) || void 0 === Rc ? void 0 : Rc.startsWith('\\')) ? (Tc = null !== (Sc = _Tc(this.getRegister(this.get().slice(1)), this.context)) && void 0 !== Sc ? Sc : {
                dimension: 0
            }, Tc.dimension *= Uc) : (this.match('\\relax') || this.onError({
                code: 'missing-unit'
            }), Tc = {
                dimension: Uc,
                unit: 'pt'
            }), Tc;
        }
        scanGlue() {
            const Qc = this.scanDimen();
            if (null === Qc)
                return null;
            const Rc = {
                glue: Qc
            };
            return this.matchWhitespace(), this.match('\\relax') || (this.matchKeyword('plus') && this.scanDimen(), this.matchWhitespace(), this.match('\\relax') || (this.matchWhitespace(), this.matchKeyword('minus') && this.scanDimen())), Rc;
        }
        scanColspec() {
            this.matchWhitespace();
            const Qc = [];
            for (; !this.end() && '<}>' !== this.peek() && ']' !== this.peek();) {
                const Rc = this.get();
                'c' === Rc || 'r' === Rc || 'l' === Rc ? Qc.push({
                    align: Rc
                }) : '|' === Rc ? Qc.push({
                    separator: 'solid'
                }) : ':' === Rc ? Qc.push({
                    separator: 'dashed'
                }) : '@' === Rc && (this.match('<{>') && (this.beginContext({
                    mode: 'math'
                }), Qc.push({
                    gap: this.parse(Qc => '<}>' === Qc)
                }), this.endContext()), this.match('<}>') || this.onError({
                    code: 'unbalanced-braces'
                }));
            }
            return Qc;
        }
        parseModeSet() {
            let Qc = '';
            if (this.match('\\(') && (Qc = '\\)'), !Qc && this.match('\\[') && (Qc = '\\]'), !Qc)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: '\\)' === Qc ? 'textstyle' : 'displaystyle'
            });
            const Rc = new Gc(this.parse(Rc => Rc === Qc), this.context, {
                mathstyleName: '\\)' === Qc ? 'textstyle' : 'displaystyle',
                latexOpen: '\\]' === Qc ? '\\[' : '\\(',
                latexClose: Qc,
                boxType: 'mord'
            });
            return this.match(Qc) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), Rc.hasEmptyBranch('body') ? null : Rc;
        }
        parseModeShift() {
            let Qc = '';
            if (this.match('<$>') && (Qc = '<$>'), !Qc && this.match('<$$>') && (Qc = '<$$>'), !Qc)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: 'textstyle'
            });
            const Rc = new Gc(this.parse(Rc => Rc === Qc), this.context, {
                mathstyleName: '<$>' === Qc ? 'textstyle' : 'displaystyle',
                latexOpen: '<$>' === Qc ? '$ ' : '$$ ',
                latexClose: '<$>' === Qc ? ' $' : ' $$'
            });
            return this.match(Qc) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), Rc.hasEmptyBranch('body') ? null : Rc;
        }
        parseEnvironment() {
            if (!this.match('\\begin'))
                return null;
            const Qc = this.parseArgument('string');
            if (!Qc)
                return null;
            const Rc = function(Sc) {
                var Tc;
                return null !== (Tc = A[Sc]) && void 0 !== Tc ? Tc : null;
            }(Qc);
            if (!Rc)
                return this.onError({
                    code: 'unknown-environment',
                    arg: Qc
                }), null;
            const Sc = [];
            if (Rc.params)
                for (const Tc of Rc.params)
                    if (Tc.isOptional)
                        Sc.push(this.parseOptionalArgument(Tc.type));
                    else {
                        const Uc = this.parseArgument(Tc.type);
                        Uc || this.onError({
                            code: 'missing-argument',
                            arg: Qc
                        }), Sc.push(Uc);
                    }
            this.beginContext({
                tabular: Rc.tabular
            });
            const Tc = [],
                Uc = [];
            let Vc = [],
                Wc = !1;
            do {
                if (this.end() && (this.onError({
                        code: 'unbalanced-environment',
                        arg: Qc
                    }), Wc = !0), !Wc && this.match('\\end') && (this.parseArgument('string') !== Qc && this.onError({
                        code: 'unbalanced-environment',
                        arg: Qc
                    }), Wc = !0), !Wc)
                    if (this.matchColumnSeparator())
                        Vc.push(this.mathlist), this.mathlist = [];
                    else if (this.matchRowSeparator()) {
                    Vc.push(this.mathlist), this.mathlist = [];
                    let Xc = null;
                    this.matchWhitespace(), this.match('[') && (Xc = this.scanDimen(), this.matchWhitespace(), this.match(']')), Uc.push(null != Xc ? Xc : {
                        dimension: 0
                    }), Tc.push(Vc), Vc = [];
                } else
                    this.mathlist.push(...this.parse(Qc => '<}>' === Qc || '&' === Qc || '\\end' === Qc || '\\cr' === Qc || '\\\\' === Qc));
            } while (!Wc);
            return Vc.push(this.mathlist), Vc.length > 0 && Tc.push(Vc), this.endContext(), Rc.createAtom(this.context, Qc, Tc, Uc, Sc);
        }
        parse(Qc) {
            this.beginContext(), Qc || (Qc = Qc => '<}>' === Qc);
            let Rc = '',
                Sc = null,
                Tc = [],
                Uc = null;
            const Vc = this.mathlist;
            for (this.mathlist = []; !this.end() && !Qc(this.peek());)
                this.hasInfixCommand() && !Rc ? (Rc = this.get(), Sc = this.context.getDefinition(Rc, 'math'), Sc && (Tc = this.parseArguments(Sc)[1]), Uc = this.mathlist, this.mathlist = []) : this.parseToken();
            let Wc;
            return Rc ? (Tc.unshift(this.mathlist), this.mathlist = Vc, Uc && Tc.unshift(Uc), Wc = [Sc.createAtom(Rc, Tc, this.style, this.context)]) : (Wc = this.mathlist, this.mathlist = Vc), this.endContext(), Wc;
        }
        parseGroup() {
            if (!this.match('<{>'))
                return null;
            const Qc = new Gc(this.parse(Qc => '<}>' === Qc), this.context, {
                mode: this.parseMode,
                latexOpen: '{',
                latexClose: '}'
            });
            return this.match('<}>') || this.onError({
                code: 'unbalanced-braces'
            }), Qc;
        }
        scanSmartFence() {
            if (this.matchWhitespace(), !this.match('('))
                return null;
            this.beginContext();
            let Qc = 1;
            for (; !this.end() && 0 !== Qc;)
                this.match('(') && (Qc += 1), this.match(')') && (Qc -= 1), 0 !== Qc && this.parseToken();
            0 === Qc && this.match(')');
            const Rc = new Ic('', this.mathlist, this.context, {
                leftDelim: '(',
                rightDelim: 0 === Qc ? ')' : '?'
            });
            return this.endContext(), Rc;
        }
        scanDelim() {
            this.matchWhitespace();
            const Qc = this.get();
            if (!Qc)
                return this.onError({
                    code: 'unexpected-end-of-string'
                }), null;
            let Rc = '.';
            (Qc.startsWith('\\') || Oc(Qc)) && (Rc = Qc);
            const Sc = this.context.getDefinition(Rc, 'math');
            return Sc ? 'function' === Sc.definitionType && Sc.ifMode && !Sc.ifMode.includes(this.parseMode) ? (this.onError({
                code: 'unexpected-delimiter',
                arg: Rc
            }), null) : 'symbol' !== Sc.definitionType || 'mopen' !== Sc.type && 'mclose' !== Sc.type ? /^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(Rc) ? Rc : (this.onError({
                code: 'unexpected-delimiter',
                arg: Rc
            }), null) : Rc : (this.onError({
                code: 'unknown-command',
                arg: Rc
            }), null);
        }
        parseLeftRight() {
            var Qc;
            if (this.match('\\right') || this.match('\\mright'))
                return this.onError({
                    code: 'unbalanced-braces'
                }), null;
            let Rc = '\\right';
            if (!this.match('\\left')) {
                if (!this.match('\\mleft'))
                    return null;
                Rc = '\\mright';
            }
            const Sc = this.scanDelim();
            if (!Sc)
                return null;
            for (this.beginContext(); !this.end() && !this.match(Rc);)
                this.parseToken();
            const Tc = this.mathlist;
            this.endContext();
            const Uc = null !== (Qc = this.scanDelim()) && void 0 !== Qc ? Qc : '.';
            return new Ic('\\right' === Rc ? 'left...right' : 'mleft...mright', Tc, this.context, {
                leftDelim: Sc,
                rightDelim: Uc,
                style: this.style
            });
        }
        parseSupSub() {
            if ('math' !== this.parseMode)
                return !1;
            let Qc = this.peek();
            if ('^' !== Qc && '_' !== Qc && '\'' !== Qc)
                return !1;
            for (;
                '^' === Qc || '_' === Qc || '\'' === Qc;) {
                if (this.match('\''))
                    this.match('\'') ? this.lastSubsupAtom().addChild(new kc('mord', this.context, {
                        command: '\\doubleprime',
                        mode: 'math',
                        value: '\u2032\u2032'
                    }), 'superscript') : this.lastSubsupAtom().addChild(new kc('mord', this.context, {
                        command: '\\prime',
                        mode: 'math',
                        value: '\u2032'
                    }), 'superscript');
                else if (this.match('^') || this.match('_')) {
                    const Rc = this.parseArgument('math');
                    Rc ? this.lastSubsupAtom().addChildren(Rc, '_' === Qc ? 'subscript' : 'superscript') : this.lastSubsupAtom().createBranch('_' === Qc ? 'subscript' : 'superscript');
                }
                Qc = this.peek();
            }
            return !0;
        }
        parseLimits() {
            const Qc = this.match('\\limits'),
                Rc = !Qc && this.match('\\nolimits'),
                Sc = !Rc && !Qc && this.match('\\displaylimits');
            if (!Qc && !Rc && !Sc)
                return !1;
            const Tc = this.mathlist.length > 0 ? this.mathlist[this.mathlist.length - 1] : null;
            return !(null === Tc || 'mop' !== Tc.type || (Qc ? (Tc.subsupPlacement = 'over-under', Tc.explicitSubsupPlacement = !0, 0) : Rc ? (Tc.subsupPlacement = 'adjacent', Tc.explicitSubsupPlacement = !0, 0) : !Sc || (Tc.subsupPlacement = 'auto', Tc.explicitSubsupPlacement = !0, 0)));
        }
        parseArguments(Qc) {
            if (!(null == Qc ? void 0 : Qc.params))
                return [
                    void 0,
                    []
                ];
            let Rc;
            const Sc = [];
            let Tc = Qc.infix ? 2 : 0;
            for (; Tc < Qc.params.length;) {
                const Uc = Qc.params[Tc];
                if ('rest' === Uc.type)
                    Sc.push(this.parse(Qc => '<}>' === Qc || '&' === Qc || '\\end' === Qc || '\\cr' === Qc || '\\\\' === Qc));
                else if (Uc.isOptional)
                    Sc.push(this.parseOptionalArgument(Uc.type));
                else if (Uc.type.endsWith('*'))
                    Rc = Uc.type.slice(0, -1);
                else {
                    const Vc = this.parseArgument(Uc.type);
                    if (null !== Vc)
                        Sc.push(Vc);
                    else
                        switch (this.onError({
                                code: 'missing-argument'
                            }), Uc.type) {
                            case 'number':
                                Sc.push(0);
                                break;
                            case 'dimen':
                                Sc.push({
                                    dimension: 0,
                                    unit: 'pt'
                                });
                                break;
                            case 'glue':
                                Sc.push({
                                    glue: {
                                        dimension: 0,
                                        unit: 'pt'
                                    }
                                });
                                break;
                            case 'string':
                            case 'balanced-string':
                                Sc.push('');
                                break;
                            case 'delim':
                                Sc.push('.');
                                break;
                            case 'colspec':
                                Sc.push('llllllllll');
                                break;
                            default:
                                Sc.push(this.placeholder());
                        }
                }
                Tc += 1;
            }
            return [
                Rc,
                Sc
            ];
        }
        parseArgument(Qc) {
            var Rc, Sc;
            this.skipFiller(), 'auto' === Qc && (Qc = this.parseMode);
            let Tc = null;
            const Uc = '<{>' === this.peek();
            if (!Uc) {
                if ('delim' === Qc)
                    return null !== (Rc = this.scanDelim()) && void 0 !== Rc ? Rc : '.';
                if ('text' === Qc || 'math' === Qc) {
                    this.beginContext();
                    const Vc = this.parseSimpleToken();
                    return this.endContext(), Vc;
                }
            }
            if (Uc && this.get(), 'text' === Qc || 'math' === Qc) {
                this.beginContext({
                    mode: Qc
                });
                do {
                    this.mathlist.push(...this.parse());
                } while (!this.match('<}>') && !this.end());
            } else if (this.beginContext(), 'string' === Qc ? Tc = this.scanString() : 'balanced-string' === Qc ? Tc = this.scanBalancedString() : 'number' === Qc ? Tc = this.scanNumber() : 'colspec' === Qc ? Tc = this.scanColspec() : 'dimen' === Qc ? Tc = this.scanDimen() : 'glue' === Qc ? Tc = this.scanGlue() : 'delim' === Qc && (Tc = null !== (Sc = this.scanDelim()) && void 0 !== Sc ? Sc : '.'), Uc && this.skipUntilToken('<}>'), null === Tc)
                return this.endContext(), null;
            const Vc = this.mathlist;
            return this.endContext(), null != Tc ? Tc : Vc;
        }
        parseOptionalArgument(Qc) {
            var Rc, Sc;
            if (Qc = 'auto' === Qc ? this.parseMode : Qc, this.matchWhitespace(), !this.match('['))
                return null;
            let Tc = null;
            for (; !this.end() && !this.match(']');)
                if ('string' === Qc)
                    Tc = this.scanString();
                else if ('number' === Qc)
                Tc = this.scanNumber();
            else if ('dimen' === Qc)
                Tc = this.scanDimen();
            else if ('glue' === Qc)
                Tc = this.scanGlue();
            else if ('colspec' === Qc)
                Tc = this.scanColspec();
            else if ('bbox' === Qc) {
                const Uc = this.scanString().toLowerCase().trim().split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/),
                    Vc = {};
                for (const Wc of Uc) {
                    const Xc = null === (Sc = (Rc = this.context).backgroundColorMap) || void 0 === Sc ? void 0 : Sc.call(Rc, Wc);
                    if (Xc)
                        Vc.backgroundcolor = Xc;
                    else {
                        const Yc = Wc.match(/^\s*([\d.]+)\s*([a-z]{2})/);
                        if (Yc)
                            Vc.padding = Yc[0];
                        else {
                            const Zc = Wc.match(/^\s*border\s*:\s*(.*)/);
                            Zc && (Vc.border = Zc[1]);
                        }
                    }
                }
                Wc = Vc;
            } else
                'math' === Qc && (this.beginContext({
                    mode: 'math'
                }), Tc = this.mathlist.concat(this.parse(Qc => ']' === Qc)), this.endContext());
            return Tc;
        }
        parseCommand(Qc) {
            var Rc, Sc, Tc, Uc, Vc, Wc, Xc;
            if ('\\placeholder' === Qc) {
                const Yc = this.parseOptionalArgument('string'),
                    Zc = this.parseOptionalArgument('math'),
                    $c = null !== (Rc = this.parseArgument('string')) && void 0 !== Rc ? Rc : void 0;
                return [new Kc(this.context, {
                    mode: this.parseMode,
                    placeholderId: Yc,
                    value: $c,
                    default: Zc,
                    style: this.style
                })];
            }
            let Yc = null;
            if ('\\char' === Qc) {
                const Zc = this.index;
                let $c = Math.floor(null !== (Sc = this.scanNumber(!0)) && void 0 !== Sc ? Sc : Number.NaN);
                (!Number.isFinite($c) || $c < 0 || $c > 1114111) && ($c = 10067);
                const ad = '\\char' + fc(this.tokens.slice(Zc, this.index));
                return Yc = new kc('math' === this.parseMode ? 'mord' : 'text', this.context, {
                    command: '\\char',
                    mode: this.parseMode,
                    value: String.fromCodePoint($c),
                    serialize: () => ad
                }), Yc.verbatimLatex = ad, [Yc];
            }
            if ('\\hskip' === Qc || '\\kern' === Qc) {
                const Zc = this.scanGlue();
                return Zc ? [new Hc(Qc, this.style, this.context, Zc)] : null;
            }
            if (Yc = this.scanMacro(Qc), Yc)
                return [Yc];
            const Zc = this.context.getDefinition(Qc, this.parseMode);
            if (!Zc)
                return this.onError({
                    code: 'unknown-command',
                    arg: Qc
                }), [new Lc(Qc, this.context)];
            const $c = this.index;
            if ('symbol' === Zc.definitionType) {
                const ad = {
                    ...this.style
                };
                Zc.variant && (ad.variant = Zc.variant), Yc = new kc(null !== (Tc = Zc.type) && void 0 !== Tc ? Tc : 'mop', this.context, {
                    command: Qc,
                    style: ad,
                    value: String.fromCodePoint(Zc.codepoint),
                    mode: this.parseMode
                });
            } else {
                if (Zc.ifMode && !Zc.ifMode.includes(this.parseMode))
                    return [];
                const ad = this.parseMode;
                Zc.applyMode && (this.parseMode = Zc.applyMode);
                const [bd, cd] = this.parseArguments(Zc);
                if (this.parseMode = ad, !cd)
                    return null;
                if (Zc.applyMode && !Zc.applyStyle && !Zc.createAtom)
                    return cd[0];
                if (Zc.infix)
                    return this.onError({
                        code: 'too-many-infix-commands',
                        arg: Qc
                    }), null;
                if ('function' == typeof Zc.createAtom)
                    Yc = Zc.createAtom(Qc, cd, this.style, this.context), bd && (Yc.body = null !== (Uc = this.parseArgument(bd)) && void 0 !== Uc ? Uc : void 0);
                else if ('function' == typeof Zc.applyStyle) {
                    const dd = Zc.applyStyle(Qc, cd, this.context),
                        ed = this.parseMode;
                    if (Zc.applyMode && (this.parseMode = Zc.applyMode), bd) {
                        const fd = this.style;
                        this.style = {
                            ...this.style,
                            ...dd
                        };
                        const gd = this.parseArgument(bd);
                        return this.style = fd, this.parseMode = ed, gd;
                    }
                    this.style = {
                        ...this.style,
                        ...dd
                    }, this.parseMode = ed;
                } else
                    Yc = new kc('mop', this.context, {
                        command: null !== (Vc = Zc.command) && void 0 !== Vc ? Vc : Qc,
                        style: {
                            ...this.style
                        },
                        value: Qc,
                        mode: null !== (Wc = Zc.applyMode) && void 0 !== Wc ? Wc : this.parseMode
                    });
            }
            if (Yc instanceof kc && void 0 === Yc.verbatimLatex && !/^\\(llap|rlap|class|cssId|htmlData)$/.test(Qc) && (Yc.verbatimLatex = (null !== (Xc = Yc.command) && void 0 !== Xc ? Xc : '') + fc(this.tokens.slice($c, this.index)), 0 === Yc.verbatimLatex.length && (Yc.verbatimLatex = void 0), Yc.isFunction && this.smartFence)) {
                const ad = this.scanSmartFence();
                if (ad)
                    return [
                        Yc,
                        ad
                    ];
            }
            return Yc ? [Yc] : null;
        }
        parseLiteral(Qc) {
            const Rc = Hb.createAtom(this.parseMode, Qc, this.context, {
                ...this.style
            });
            if (!Rc)
                return null;
            if (Rc.isFunction && this.smartFence) {
                const Sc = this.scanSmartFence();
                if (Sc)
                    return [
                        Rc,
                        Sc
                    ];
            }
            return [Rc];
        }
        parseSimpleToken() {
            const Qc = this.get();
            return Qc ? '<space>' === Qc ? 'text' === this.parseMode ? [new Nc(' ', ' ', this.style, this.context)] : null : Qc.startsWith('\\') ? this.parseCommand(Qc) : Oc(Qc) ? this.parseLiteral(Qc) : ('<}>' === Qc ? this.onError({
                latex: '',
                code: 'unbalanced-braces'
            }) : this.onError({
                latex: '',
                code: 'unexpected-token',
                arg: Qc
            }), null) : null;
        }
        scanMacro(Qc) {
            var Rc;
            const Sc = this.context.getMacro(Qc);
            if (!Sc)
                return null;
            const Tc = this.index,
                Uc = Sc.args,
                Vc = {
                    '?': null === (Rc = this.args) || void 0 === Rc ? void 0 : Rc.call(this, '?')
                };
            for (let Wc = 1; Wc <= Uc; Wc++)
                Vc[Wc] = this.matchLiteralArg();
            return new Mc(Wc, this.context, {
                expand: Sc.expand,
                captureSelection: Sc.captureSelection,
                args: fc(this.tokens.slice(Tc, this.index)),
                body: _Qc(Sc.def, this.context, {
                    parseMode: this.parseMode,
                    args: Wc => Vc[Wc],
                    mathstyle: this.currentContext.mathstyle
                })
            });
        }
        parseToken() {
            var Qc, Rc, Sc, Tc;
            let Uc = null !== (Tc = null !== (Sc = null !== (Rc = null !== (Qc = this.parseEnvironment()) && void 0 !== Qc ? Qc : this.parseModeShift()) && void 0 !== Rc ? Rc : this.parseModeSet()) && void 0 !== Sc ? Sc : this.parseGroup()) && void 0 !== Tc ? Tc : this.parseLeftRight();
            if (null === Uc) {
                if (this.parseSupSub())
                    return !0;
                if (this.parseLimits())
                    return !0;
                Uc = this.parseSimpleToken();
            }
            return d(Uc) ? this.mathlist.push(...Uc) : Uc && this.mathlist.push(Uc), null !== Uc;
        }
        constructor(Qc, Rc, Sc) {
            var Tc, Uc, Vc, Wc, Xc, Yc;
            this.index = 0, this.endCount = 0, this.tokens = Qc, this.context = Rc, this.errors = [], this.args = null !== (Tc = Sc.args) && void 0 !== Tc ? Tc : null, this.smartFence = null !== (Uc = Sc.smartFence) && void 0 !== Uc ? Uc : Rc.smartFence, this._currentParsingContext = {
                parent: void 0,
                mathlist: [],
                style: null !== (Vc = Sc.style) && void 0 !== Vc ? Vc : {},
                parseMode: null !== (Wc = Sc.parseMode) && void 0 !== Wc ? Wc : 'math',
                mathstyle: null !== (Xc = Sc.mathstyle) && void 0 !== Xc ? Xc : 'displaystyle',
                registers: null !== (Yc = Sc.registers) && void 0 !== Yc ? Yc : Rc.registers,
                tabular: !1
            };
        }
    }

    function _Qc(Rc, Sc, Tc) {
        var Uc, Vc, Wc;
        const Xc = null !== (Uc = null == Tc ? void 0 : Tc.args) && void 0 !== Uc ? Uc : null,
            Yc = new Pc(_dc(Rc, Xc), Sc, {
                args: Xc,
                mathstyle: null !== (Vc = null == Tc ? void 0 : Tc.mathstyle) && void 0 !== Vc ? Vc : 'displaystyle',
                parseMode: null !== (Wc = null == Tc ? void 0 : Tc.parseMode) && void 0 !== Wc ? Wc : 'math'
            }),
            Zc = [];
        for (; !Yc.end();)
            Zc.push(...Yc.parse());
        return Zc;
    }

    function Rc(Sc, Tc, Uc) {
        var Vc;
        const Wc = new Pc(_dc(Sc, null), Tc, {
            args: null,
            mathstyle: 'displaystyle',
            parseMode: null !== (Vc = null == Uc ? void 0 : Uc.parseMode) && void 0 !== Vc ? Vc : 'math'
        });
        for (; !Wc.end();)
            Wc.parse();
        return Wc.errors;
    }

    function Sc(Tc, Uc, Vc) {
        return 'object' == typeof Tc && 'glue' in Tc ? Tc : 'object' == typeof Tc && 'dimension' in Tc ? {
            glue: Tc
        } : 'number' == typeof Tc ? {
            glue: {
                dimension: Tc
            }
        } : new Pc(_dc(Tc), Uc, {
            registers: Vc
        }).scanGlue();
    }

    function _Tc(Uc, Vc, Wc) {
        return 'number' == typeof Uc ? {
            dimension: Uc,
            unit: 'pt'
        } : ('object' == typeof Uc && 'glue' in Uc && (Uc = Uc.glue), 'object' == typeof Uc && 'dimension' in Uc ? Uc : new Pc(_dc(Uc), Vc, {
            registers: Wc
        }).scanDimen());
    }
    class Uc extends kc {
        static fromJson(Vc, Wc) {
            return new Uc(Vc.command, Vc.body, Wc, Vc);
        }
        toJson() {
            return {
                ...super.toJson(),
                framecolor: this.framecolor,
                verbatimFramecolor: this.verbatimFramecolor,
                backgroundcolor: this.backgroundcolor,
                verbatimBackgroundcolor: this.verbatimBackgroundcolor,
                padding: this.padding,
                border: this.border
            };
        }
        render(Vc) {
            const Wc = new Db(Vc, this.style),
                Xc = Bb(Wc.getRegisterAsDimension('fboxsep')),
                Yc = void 0 === this.padding ? Xc : Bb(_Tc(this.padding, {
                    ...this.context,
                    registers: Vc.registers
                })),
                Zc = kc.createBox(Vc, this.body);
            if (!Zc)
                return null;
            Zc.setStyle('vertical-align', -Zc.height, 'em');
            const $c = new Nb(Zc, {
                    type: 'mord'
                }),
                ad = new Nb(null, {
                    classes: 'ML__box'
                });
            ad.height = $c.height + Yc, ad.depth = $c.depth + Yc, ad.setStyle('box-sizing', 'border-box'), ad.setStyle('position', 'absolute'), ad.setStyle('height', $c.height + $c.depth + 2 * Yc, 'em'), 0 === Yc ? ad.setStyle('width', '100%') : (ad.setStyle('width', `calc(100% + ${ 2 * Yc }em)`), ad.setStyle('top', Xc, 'em'), ad.setStyle('left', -Yc, 'em')), ad.setStyle('z-index', '-1'), this.backgroundcolor && ad.setStyle('background-color', this.backgroundcolor), this.framecolor && ad.setStyle('border', `${ Bb(Wc.getRegisterAsDimension('fboxrule')) }em solid ${ this.framecolor }`), this.border && ad.setStyle('border', this.border), $c.setStyle('display', 'inline-block'), $c.setStyle('height', Zc.height + Zc.depth, 'em'), $c.setStyle('vertical-align', -Yc, 'em');
            const bd = new Nb([
                ad,
                $c
            ]);
            return bd.setStyle('position', 'relative'), bd.setStyle('display', 'inline-block'), bd.setStyle('line-height', 0), bd.height = $c.height + Yc, bd.depth = $c.depth + Yc, bd.left = Yc, bd.right = Yc, bd.setStyle('height', $c.height + Yc, 'em'), bd.setStyle('top', $c.depth - $c.height, 'em'), bd.setStyle('vertical-align', $c.depth + Yc, 'em'), this.caret && (bd.caret = this.caret), this.attachSupsub(Vc, {
                base: bd
            });
        }
        constructor(Vc, Wc, Xc, Yc) {
            super('box', Xc, {
                command: Vc,
                serialize: Yc.serialize,
                style: Yc.style
            }), this.body = Wc, this.framecolor = Yc.framecolor, this.verbatimFramecolor = Yc.verbatimBackgroundcolor, this.backgroundcolor = Yc.backgroundcolor, this.verbatimBackgroundcolor = Yc.verbatimBackgroundcolor, this.padding = Yc.padding, this.border = Yc.border;
        }
    }
    class Vc extends kc {
        static fromJson(Wc, Xc) {
            return new Vc(Xc, Wc.environmentName, Wc.array, Wc.rowGaps, Wc);
        }
        toJson() {
            const Wc = {
                ...super.toJson(),
                environmentName: this.environmentName,
                array: this.array.map(Wc => Wc.map(Wc => Wc.map(Wc => Wc.toJson()))),
                rowGaps: this.rowGaps,
                columns: this.colFormat,
                colSeparationType: this.colSeparationType
            };
            return 1 !== this.arraystretch && (Wc.arraystretch = this.arraystretch), this.arraycolsep && (Wc.arraycolsep = this.arraycolsep), this.leftDelim && (Wc.leftDelim = this.leftDelim), this.rightDelim && (Wc.rightDelim = this.rightDelim), void 0 !== this.jot && (Wc.jot = this.jot), Wc;
        }
        branch(Wc) {
            var Xc;
            if (jc(Wc))
                return null !== (Xc = this.array[Wc[0]][Wc[1]]) && void 0 !== Xc ? Xc : void 0;
        }
        get branches() {
            const Wc = super.branches;
            return this.array.forEach((rc, c) => {
                this.array[c].forEach((rc, d) => {
                    this.array[c][d] && Wc.push([
                        c,
                        d
                    ]);
                });
            }), Wc;
        }
        createBranch(Wc) {
            var Xc;
            return jc(Wc) ? (this.isDirty = !0, null !== (Xc = this.branch(Wc)) && void 0 !== Xc ? Xc : []) : [];
        }
        get rowCount() {
            return this.array.length;
        }
        get colCount() {
            return this.array[0].length;
        }
        get maxColumns() {
            return this.colFormat.filter(qc => Boolean(qc.align)).length;
        }
        removeBranch(Wc) {
            if (ic(Wc))
                return super.removeBranch(Wc);
            const Xc = this.branch(Wc);
            return this.array[Wc[0]][Wc[1]] = void 0, Xc.forEach(Wc => {
                Wc.parent = void 0, Wc.treeBranch = void 0;
            }), Xc.shift(), this.isDirty = !0, Xc;
        }
        get hasChildren() {
            return this.children.length > 0;
        }
        get children() {
            const Wc = [];
            for (const Xc of this.array)
                for (const Yc of Xc)
                    if (Yc)
                        for (const Zc of Yc)
                            Wc.push(...Zc.children), Wc.push(Zc);
            return [
                ...Wc,
                ...super.children
            ];
        }
        render(Wc) {
            var Xc, Yc, Zc, $c, ad;
            const bd = new Db(Wc, this.style, this.mathstyleName),
                cd = bd.getRegisterAsEm('arrayrulewidth'),
                dd = bd.getRegisterAsEm('arraycolsep'),
                ed = bd.getRegisterAsEm('doublerulesep'),
                fd = null !== (Xc = this.arraystretch) && void 0 !== Xc ? Xc : 1;
            let gd = 'number' == typeof this.arraycolsep ? this.arraycolsep : dd;
            'small' === this.colSeparationType && (gd = new Db(Wc, void 0, 'scriptstyle').scalingFactor / Wc.scalingFactor * 0.2778);
            const hd = 1.2 * fd,
                id = 0.7 * hd,
                jd = 0.3 * hd;
            let kd = 0;
            const ld = [];
            let md = 0;
            const nd = this.array.length;
            for (let od = 0; od < nd; ++od) {
                const pd = this.array[od];
                md = Math.max(md, pd.length);
                const qd = new Db(bd, this.style, this.mathstyleName);
                let rd = id / qd.scalingFactor,
                    sd = jd / qd.scalingFactor;
                const td = {
                    cells: [],
                    height: 0,
                    depth: 0,
                    pos: 0
                };
                for (const ud of pd) {
                    const vd = null !== (Yc = kc.createBox(qd, ud, {
                        newList: !0
                    })) && void 0 !== Yc ? Yc : new Nb(null, {
                        newList: !0
                    });
                    sd = Math.max(sd, vd.depth), rd = Math.max(rd, vd.height), td.cells.push(vd);
                }
                let vd = null !== (Zc = Bb(this.rowGaps[ud])) && void 0 !== Zc ? Zc : 0;
                vd > 0 && (vd += jd, sd = Math.max(sd, vd), vd = 0), void 0 !== this.jot && (sd += this.jot), td.height = rd, td.depth = sd, kd += rd, td.pos = kd, kd += sd + vd, ld.push(td);
            }
            const pd = kd / 2 + 0.25,
                qd = [];
            for (let rd = 0; rd < md; rd++) {
                const sd = [];
                for (const td of ld) {
                    const ud = td.cells[rd];
                    ud.depth = td.depth, ud.height = td.height, sd.push({
                        box: ud,
                        shift: td.pos - pd
                    });
                }
                sd.length > 0 && qd.push(new Vb({
                    individualShift: sd
                }));
            }
            const sd = [];
            let td = !1,
                ud = !1,
                vd = 0,
                wd = !this.leftDelim;
            const {
                colFormat: xd
            } = this;
            for (const yd of xd) {
                if ('align' in yd && vd >= qd.length)
                    break;
                if ('align' in yd)
                    td ? sd.push(_Xc(2 * gd)) : (ud || wd) && sd.push(_Xc(gd)), sd.push(new Nb(qd[vd], {
                        classes: 'col-align-' + yd.align
                    })), vd++, td = !0, ud = !1, wd = !1;
                else if ('gap' in yd) {
                    if ('number' == typeof yd.gap)
                        sd.push(_Xc(yd.gap));
                    else {
                        const zd = _Yc(rd, ld, pd, yd.gap);
                        zd && sd.push(zd);
                    }
                    td = !1, ud = !1, wd = !1;
                } else if ('separator' in yd) {
                    const zd = new Nb(null, {
                        classes: 'vertical-separator'
                    });
                    zd.setStyle('height', kd, 'em'), zd.setStyle('border-right', `${ cd }em ${ yd.separator } currentColor`), zd.setStyle('vertical-align', -(kd - pd), 'em');
                    let Ad = 0;
                    ud ? Ad = ed - cd : td && (Ad = gd - cd), zd.left = Ad, sd.push(zd), td = !1, ud = !0, wd = !1;
                }
            }
            td && !this.rightDelim && sd.push(_Xc(gd));
            const zd = new Nb(sd, {
                classes: 'mtable'
            });
            if (!(this.leftDelim && '.' !== this.leftDelim || this.rightDelim && '.' !== this.rightDelim))
                return this.caret && (zd.caret = this.caret), zd;
            const Ad = zd.height,
                Bd = zd.depth,
                Cd = this.bind(rd, new Nb([
                    this.bind(rd, Dc('mopen', null !== ($c = this.leftDelim) && void 0 !== $c ? $c : '.', Ad, Bd, bd)),
                    zd,
                    this.bind(rd, Dc('mclose', null !== (ad = this.rightDelim) && void 0 !== ad ? ad : '.', Ad, Bd, bd))
                ], {
                    type: 'mord'
                }));
            return Cd ? (this.caret && (Cd.caret = this.caret), this.attachSupsub(rd, {
                base: Cd
            })) : null;
        }
        serialize(Wc) {
            let Xc = '\\begin{' + this.environmentName + '}';
            if ('array' === this.environmentName) {
                if (Xc += '{', void 0 !== this.colFormat)
                    for (const Yc of this.colFormat)
                        'align' in Yc ? Xc += Yc.align : 'separator' in Yc && 'solid' === Yc.separator ? Xc += '|' : 'separator' in Yc && 'dashed' === Yc.separator && (Xc += ':');
                Xc += '}';
            }
            for (let Yc = 0; Yc < this.array.length; Yc++) {
                for (let Zc = 0; Zc < this.array[Yc].length; Zc++)
                    Zc > 0 && (Xc += ' & '), Xc = ec([
                        Xc,
                        kc.serialize(this.array[Yc][Zc], Wc)
                    ]);
                Yc < this.array.length - 1 && (Xc += ' \\\\ ');
            }
            return Xc += '\\end{' + this.environmentName + '}', Xc;
        }
        getCell(Wc, Xc) {
            return this.array[Wc][Xc];
        }
        setCell(Wc, Xc, Yc) {
            for (const Zc of this.array[Wc][Xc])
                Zc.parent = void 0, Zc.treeBranch = void 0;
            let $c = Zc;
            0 !== Zc.length && 'first' === Zc[0].type || ($c = [
                new kc('first', this.context, {
                    mode: this.mode
                }),
                ...Zc
            ]), this.array[Wc][Xc] = $c;
            for (const ad of $c)
                ad.parent = this, ad.treeBranch = [
                    Wc,
                    Xc
                ];
            this.isDirty = !0;
        }
        addRowBefore(Wc) {
            const Xc = [];
            for (let Yc = 0; Yc < this.colCount; Yc++)
                Xc.push(_Wc(this));
            this.array.splice(Yc, 0, Xc);
            for (let Zc = Yc; Zc < this.rowCount; Zc++)
                for (let $c = 0; $c < this.colCount; $c++) {
                    const ad = this.array[Zc][$c];
                    if (ad)
                        for (const bd of ad)
                            bd.treeBranch = [
                                Zc,
                                $c
                            ];
                }
            this.isDirty = !0;
        }
        addRowAfter(Wc) {
            const Xc = [];
            for (let Yc = 0; Yc < this.colCount; Yc++)
                Xc.push(_Wc(this));
            this.array.splice(Yc + 1, 0, Xc);
            for (let Zc = Yc + 1; Zc < this.rowCount; Zc++)
                for (let $c = 0; $c < this.colCount; $c++) {
                    const ad = this.array[Zc][$c];
                    if (ad)
                        for (const bd of ad)
                            bd.treeBranch = [
                                Zc,
                                $c
                            ];
                }
            this.isDirty = !0;
        }
        removeRow(Wc) {
            const Xc = this.array.splice(Wc, 1);
            for (const Yc of Xc)
                for (const Zc of Yc)
                    if (Zc)
                        for (const $c of Zc)
                            $c.parent = void 0, $c.treeBranch = void 0;
            for (let $c = Yc; $c < this.rowCount; $c++)
                for (let ad = 0; ad < this.colCount; ad++) {
                    const bd = this.array[$c][ad];
                    if (bd)
                        for (const cd of bd)
                            cd.treeBranch = [
                                $c,
                                ad
                            ];
                }
            this.isDirty = !0;
        }
        addColumnBefore(Wc) {
            for (const Xc of this.array)
                Xc.splice(Wc, 0, _Wc(this));
            for (let Yc = 0; Yc < this.rowCount; Yc++)
                for (let Zc = Wc; Zc < this.colCount; Zc++) {
                    const $c = this.array[Yc][Zc];
                    if ($c)
                        for (const ad of $c)
                            ad.treeBranch = [
                                Yc,
                                Zc
                            ];
                }
            this.isDirty = !0;
        }
        addColumnAfter(Wc) {
            for (const Xc of this.array)
                Xc.splice(Wc + 1, 0, _Wc(this));
            for (let Yc = 0; Yc < this.rowCount; Yc++)
                for (let Zc = Wc + 1; Zc < this.colCount; Zc++) {
                    const $c = this.array[Yc][Zc];
                    if ($c)
                        for (const ad of $c)
                            ad.treeBranch = [
                                Yc,
                                Zc
                            ];
                }
            this.isDirty = !0;
        }
        addColumn() {
            this.addColumnAfter(this.colCount - 1);
        }
        removeColumn(Wc) {
            for (const Xc of this.array) {
                const Yc = Xc.splice(Wc, 1);
                for (const Zc of Yc)
                    if (Zc)
                        for (const $c of Zc)
                            $c.parent = void 0, $c.treeBranch = void 0;
            }
            for (let Yc = 0; Yc < this.rowCount; Yc++)
                for (let Zc = Wc; Zc < this.colCount; Zc++) {
                    const $c = this.array[Yc][Zc];
                    if ($c)
                        for (const ad of $c)
                            ad.treeBranch = [
                                Yc,
                                Zc
                            ];
                }
            this.isDirty = !0;
        }
        get cells() {
            const Wc = [];
            for (const Xc of this.array)
                for (const Yc of Xc)
                    Yc && Wc.push(Yc);
            return Wc;
        }
        constructor(Wc, Xc, Yc, Zc, $c = {}) {
            var ad, bd;
            super('array', Wc), this.environmentName = Xc, this.rowGaps = Zc, $c.mathstyleName && (this.mathstyleName = $c.mathstyleName), $c.columns && (0 === $c.columns.length ? this.colFormat = [{
                align: 'l'
            }] : this.colFormat = $c.columns), this.colFormat || (this.colFormat = [{
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                }
            ]), this.array = function(cd, dd, ed, fd) {
                let gd = 0;
                for (const hd of fd)
                    'align' in hd && (gd += 1);
                let id = 0;
                const jd = [];
                for (const kd of ed) {
                    let ld = 0;
                    for (id = Math.max(id, Math.min(kd.length, gd)); ld < kd.length;) {
                        const md = [],
                            nd = Math.min(kd.length, ld + gd);
                        for (; ld < nd;)
                            0 === kd[ld].length ? md.push([new kc('first', hd, {
                                mode: dd.mode
                            })]) : 'first' !== kd[ld][0].type ? md.push([
                                new kc('first', hd, {
                                    mode: dd.mode
                                }),
                                ...kd[ld]
                            ]) : md.push(kd[ld]), ld += 1;
                        jd.push(md);
                    }
                }
                1 === jd[jd.length - 1].length && 0 === jd[jd.length - 1][0].length && jd.pop();
                const ld = [];
                for (const md of jd) {
                    if (md.length !== id)
                        for (let nd = md.length; nd < id; nd++)
                            md.push([
                                new kc('first', hd, {
                                    mode: dd.mode
                                }),
                                new Kc(hd)
                            ]);
                    ld.push(md);
                }
                let nd = 0,
                    od = 0;
                for (const pd of ld) {
                    od = 0;
                    for (const qd of pd) {
                        for (const rd of qd)
                            rd.parent = dd, rd.treeBranch = [
                                nd,
                                od
                            ];
                        od += 1;
                    }
                    nd += 1;
                }
                return dd.isDirty = !0, ld;
            }(Wc, this, Yc, this.colFormat), $c.leftDelim && (this.leftDelim = $c.leftDelim), $c.rightDelim && (this.rightDelim = $c.rightDelim), void 0 !== $c.jot && (this.jot = $c.jot), $c.arraycolsep && (this.arraycolsep = $c.arraycolsep), this.colSeparationType = $c.colSeparationType, this.arraystretch = null !== (ad = $c.arraystretch) && void 0 !== ad ? ad : 1, this.minColumns = null !== (bd = $c.minColumns) && void 0 !== bd ? bd : 1;
        }
    }

    function _Wc(Xc) {
        const Yc = new kc('first', Xc.context, {
            mode: Xc.mode
        });
        Yc.parent = Xc;
        const Zc = new Kc(Xc.context, {
            mode: Xc.mode
        });
        return Zc.parent = Xc, [
            Yc,
            Zc
        ];
    }

    function _Xc(Yc) {
        const Zc = new Nb(null, {
            classes: 'arraycolsep'
        });
        return Zc.width = Yc, Zc;
    }

    function _Yc(Zc, $c, ad, bd) {
        if (!bd)
            return null;
        const cd = [];
        for (const dd of $c) {
            const ed = kc.createBox(Zc, bd, {
                newList: !0
            });
            ed && (ed.depth = dd.depth, ed.height = dd.height, cd.push({
                box: ed,
                shift: dd.pos - ad
            }));
        }
        return new Vb({
            individualShift: cd
        }).wrap(Zc);
    }
    class Zc extends kc {
        static fromJson($c, ad) {
            return new Zc($c.value, ad, $c);
        }
        toJson() {
            return super.toJson();
        }
        get computedStyle() {
            return {};
        }
        render($c) {
            const ad = new Nb(this.value, {
                classes: 'ML__composition',
                type: 'composition'
            });
            return this.bind($c, ad), this.caret && (ad.caret = this.caret), ad;
        }
        serialize($c) {
            return '';
        }
        constructor($c, ad, bd) {
            var cd;
            super('composition', ad, {
                mode: null !== (cd = null == bd ? void 0 : bd.mode) && void 0 !== cd ? cd : 'math',
                value: $c
            });
        }
    }
    class $c extends kc {
        static fromJson(ad, bd) {
            return new $c(ad.command, ad.arg, bd);
        }
        toJson() {
            return {
                ...super.toJson(),
                arg: this.arg
            };
        }
        render(ad) {
            const bd = kc.createBox(ad, this.body, {
                type: 'chem',
                newList: !0
            });
            return this.caret && (bd.caret = this.caret), this.bind(ad, bd);
        }
        serialize(ad) {
            return this.verbatimLatex;
        }
        constructor(ad, bd, cd) {
            super('chem', cd, {
                command: ad,
                mode: 'math'
            });
            const dd = _bd.go(_ad.go(bd, '\\pu' === ad ? 'pu' : 'ce'), !1);
            this.body = _Qc(dd, cd), this.verbatimLatex = ad + '{' + bd + '}', this.arg = bd, this.captureSelection = !0;
        }
    }
    R([
        'ce',
        'pu'
    ], '{chemformula:balanced-string}', {
        createAtom: (qc, rc, c, d) => new $c(qc, rc[0], d)
    });
    var _ad = {
        go: function(bd, cd) {
            if (!bd)
                return [];
            void 0 === cd && (cd = 'ce');
            var dd, ed = '0',
                fd = {
                    parenthesisLevel: 0
                };
            bd = (bd = (bd = bd.replace(/\n/g, ' ')).replace(/[\u2212\u2013\u2014\u2010]/g, '-')).replace(/[\u2026]/g, '...');
            for (var gd = 10, hd = [];;) {
                dd !== bd ? (gd = 10, dd = bd) : gd--;
                var id = _ad.stateMachines[cd],
                    jd = id.transitions[ed] || id.transitions['*'];
                e:
                    for (var kd = 0; kd < jd.length; kd++) {
                        var ld = _ad.patterns.match_(jd[kd].pattern, bd);
                        if (ld) {
                            for (var md = jd[kd].task, nd = 0; nd < md.action_.length; nd++) {
                                var od;
                                if (id.actions[md.action_[nd].type_])
                                    od = id.actions[md.action_[nd].type_](fd, ld.match_, md.action_[nd].option);
                                else {
                                    if (!_ad.actions[md.action_[nd].type_])
                                        throw [
                                            'MhchemBugA',
                                            'mhchem bug A. Please report. (' + md.action_[nd].type_ + ')'
                                        ];
                                    od = _ad.actions[md.action_[nd].type_](fd, ld.match_, md.action_[nd].option);
                                }
                                _ad.concatArray(hd, od);
                            }
                            if (ed = md.nextState || ed, !(bd.length > 0))
                                return hd;
                            if (md.revisit || (bd = ld.remainder), !md.toContinue)
                                break e;
                        }
                    }
                if (gd <= 0)
                    throw [
                        'MhchemBugU',
                        'mhchem bug U. Please report.'
                    ];
            }
        },
        concatArray: function(bd, cd) {
            if (cd)
                if (Array.isArray(cd))
                    for (var dd = 0; dd < cd.length; dd++)
                        bd.push(cd[dd]);
                else
                    bd.push(cd);
        },
        patterns: {
            patterns: {
                empty: /^$/,
                else: /^./,
                else2: /^./,
                space: /^\s/,
                'space A': /^\s(?=[A-Z\\$])/,
                space$: /^\s$/,
                'a-z': /^[a-z]/,
                x: /^x/,
                x$: /^x$/,
                i$: /^i$/,
                letters: /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
                '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
                'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
                '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
                'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
                digits: /^[0-9]+/,
                '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
                '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
                '(-)(9.,9)(e)(99)': function(bd) {
                    var cd = bd.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
                    return cd && cd[0] ? {
                        match_: cd.splice(1),
                        remainder: bd.substr(cd[0].length)
                    } : null;
                },
                '(-)(9)^(-9)': function(bd) {
                    var cd = bd.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);
                    return cd && cd[0] ? {
                        match_: cd.splice(1),
                        remainder: bd.substr(cd[0].length)
                    } : null;
                },
                'state of aggregation $': function(bd) {
                    var cd = _ad.patterns.findObserveGroups(bd, '', /^\([a-z]{1,3}(?=[\),])/, ')', '');
                    if (cd && cd.remainder.match(/^($|[\s,;\)\]\}])/))
                        return cd;
                    var dd = bd.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);
                    return dd ? {
                        match_: dd[0],
                        remainder: bd.substr(dd[0].length)
                    } : null;
                },
                '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
                '{[(': /^(?:\\\{|\[|\()/,
                ')]}': /^(?:\)|\]|\\\})/,
                ', ': /^[,;]\s*/,
                ',': /^[,;]/,
                '.': /^[.]/,
                '. ': /^([.\u22C5\u00B7\u2022])\s*/,
                '...': /^\.\.\.(?=$|[^.])/,
                '* ': /^([*])\s*/,
                '^{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '^{', '', '', '}');
                },
                '^($...$)': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '^', '$', '$', '');
                },
                '^a': /^\^([0-9]+|[^\\_])/,
                '^\\x{}{}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '^', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '^\\x{}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '^', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
                '^(-1)': /^\^(-?\d+)/,
                '\'': /^'/,
                '_{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '_{', '', '', '}');
                },
                '_($...$)': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '_', '$', '$', '');
                },
                _9: /^_([+\-]?[0-9]+|[^\\])/,
                '_\\x{}{}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '_', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '_\\x{}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '_', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '_\\x': /^_(\\[a-zA-Z]+)\s*/,
                '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
                '{}': /^\{\}/,
                '{...}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '', '{', '}', '');
                },
                '{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '{', '', '', '}');
                },
                '$...$': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '', '$', '$', '');
                },
                '${(...)}$': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '${', '', '', '}$');
                },
                '$(...)$': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '$', '', '', '$');
                },
                '=<>': /^[=<>]/,
                '#': /^[#\u2261]/,
                '+': /^\+/,
                '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
                '-9': /^-(?=[0-9])/,
                '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
                '-': /^-/,
                'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
                operator: /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
                arrowUpDown: /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
                '\\bond{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\bond{', '', '', '}');
                },
                '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
                CMT: /^[CMT](?=\[)/,
                '[(...)]': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '[', '', '', ']');
                },
                '1st-level escape': /^(&|\\\\|\\hline)\s*/,
                '\\,': /^(?:\\[,\ ;:])/,
                '\\x{}{}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '\\x{}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
                '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
                orbital: /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
                others: /^[\/~|]/,
                '\\frac{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\frac{', '', '', '}', '{', '', '', '}');
                },
                '\\overset{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\overset{', '', '', '}', '{', '', '', '}');
                },
                '\\underset{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\underset{', '', '', '}', '{', '', '', '}');
                },
                '\\underbrace{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\underbrace{', '', '', '}_', '{', '', '', '}');
                },
                '\\color{(...)}0': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\color{', '', '', '}');
                },
                '\\color{(...)}{(...)}1': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\color{', '', '', '}', '{', '', '', '}');
                },
                '\\color(...){(...)}2': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\color', '\\', '', /^(?=\{)/, '{', '', '', '}');
                },
                '\\ce{(...)}': function(bd) {
                    return _ad.patterns.findObserveGroups(bd, '\\ce{', '', '', '}');
                },
                oxidation$: /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'd-oxidation$': /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'roman numeral': /^[IVX]+/,
                '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
                amount: function(bd) {
                    var cd;
                    if (cd = bd.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/))
                        return {
                            match_: cd[0],
                            remainder: bd.substr(cd[0].length)
                        };
                    var dd = _ad.patterns.findObserveGroups(bd, '', '$', '$', '');
                    return dd && (cd = dd.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/)) ? {
                        match_: cd[0],
                        remainder: bd.substr(cd[0].length)
                    } : null;
                },
                amount2: function(bd) {
                    return this.amount(bd);
                },
                '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
                formula$: function(bd) {
                    if (bd.match(/^\([a-z]+\)$/))
                        return null;
                    var cd = bd.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
                    return cd ? {
                        match_: cd[0],
                        remainder: bd.substr(cd[0].length)
                    } : null;
                },
                uprightEntities: /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
                '/': /^\s*(\/)\s*/,
                '//': /^\s*(\/\/)\s*/,
                '*': /^\s*[*.]\s*/
            },
            findObserveGroups: function(bd, cd, dd, ed, fd, gd, hd, id, jd, kd) {
                var ld = function(md, nd) {
                        if ('string' == typeof nd)
                            return 0 !== md.indexOf(nd) ? null : nd;
                        var od = md.match(nd);
                        return od ? od[0] : null;
                    },
                    md = ld(bd, cd);
                if (null === md)
                    return null;
                if (bd = bd.substr(md.length), null === (md = ld(bd, dd)))
                    return null;
                var nd = function(od, pd, qd) {
                    for (var rd = 0; pd < od.length;) {
                        var sd = od.charAt(pd),
                            td = ld(od.substr(pd), qd);
                        if (null !== td && 0 === rd)
                            return {
                                endMatchBegin: pd,
                                endMatchEnd: pd + td.length
                            };
                        if ('{' === sd)
                            rd++;
                        else if ('}' === sd) {
                            if (0 === rd)
                                throw [
                                    'ExtraCloseMissingOpen',
                                    'Extra close brace or missing open brace'
                                ];
                            rd--;
                        }
                        pd++;
                    }
                    return null;
                }(bd, md.length, ed || fd);
                if (null === nd)
                    return null;
                var od = bd.substring(0, ed ? nd.endMatchEnd : nd.endMatchBegin);
                if (gd || hd) {
                    var pd = this.findObserveGroups(bd.substr(nd.endMatchEnd), gd, hd, id, jd);
                    if (null === pd)
                        return null;
                    var qd = [
                        od,
                        pd.match_
                    ];
                    return {
                        match_: kd ? qd.join('') : qd,
                        remainder: pd.remainder
                    };
                }
                return {
                    match_: od,
                    remainder: bd.substr(nd.endMatchEnd)
                };
            },
            match_: function(bd, cd) {
                var dd = _ad.patterns.patterns[bd];
                if (void 0 === dd)
                    throw [
                        'MhchemBugP',
                        'mhchem bug P. Please report. (' + bd + ')'
                    ];
                if ('function' == typeof dd)
                    return _ad.patterns.patterns[bd](cd);
                var ed = cd.match(dd);
                return ed ? {
                    match_: ed[2] ? [
                        ed[1],
                        ed[2]
                    ] : ed[1] ? ed[1] : ed[0],
                    remainder: cd.substr(ed[0].length)
                } : null;
            }
        },
        actions: {
            'a=': function(bd, cd) {
                bd.a = (bd.a || '') + cd;
            },
            'b=': function(bd, cd) {
                bd.b = (bd.b || '') + cd;
            },
            'p=': function(bd, cd) {
                bd.p = (bd.p || '') + cd;
            },
            'o=': function(bd, cd) {
                bd.o = (bd.o || '') + cd;
            },
            'q=': function(bd, cd) {
                bd.q = (bd.q || '') + cd;
            },
            'd=': function(bd, cd) {
                bd.d = (bd.d || '') + cd;
            },
            'rm=': function(bd, cd) {
                bd.rm = (bd.rm || '') + cd;
            },
            'text=': function(bd, cd) {
                bd.text_ = (bd.text_ || '') + cd;
            },
            insert: function(bd, cd, dd) {
                return {
                    type_: dd
                };
            },
            'insert+p1': function(bd, cd, dd) {
                return {
                    type_: dd,
                    p1: cd
                };
            },
            'insert+p1+p2': function(bd, cd, dd) {
                return {
                    type_: dd,
                    p1: cd[0],
                    p2: cd[1]
                };
            },
            copy: function(bd, cd) {
                return cd;
            },
            rm: function(bd, cd) {
                return {
                    type_: 'rm',
                    p1: cd || ''
                };
            },
            text: function(bd, cd) {
                return _ad.go(cd, 'text');
            },
            '{text}': function(bd, cd) {
                var dd = ['{'];
                return _ad.concatArray(dd, _ad.go(cd, 'text')), dd.push('}'), dd;
            },
            'tex-math': function(bd, cd) {
                return _ad.go(cd, 'tex-math');
            },
            'tex-math tight': function(bd, cd) {
                return _ad.go(cd, 'tex-math tight');
            },
            bond: function(bd, cd, dd) {
                return {
                    type_: 'bond',
                    kind_: dd || cd
                };
            },
            'color0-output': function(bd, cd) {
                return {
                    type_: 'color0',
                    color: cd[0]
                };
            },
            ce: function(bd, cd) {
                return _ad.go(cd);
            },
            '1/2': function(bd, cd) {
                var dd = [];
                cd.match(/^[+\-]/) && (dd.push(cd.substr(0, 1)), cd = cd.substr(1));
                var ed = cd.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
                return ed[1] = ed[1].replace(/\$/g, ''), dd.push({
                    type_: 'frac',
                    p1: ed[1],
                    p2: ed[2]
                }), ed[3] && (ed[3] = ed[3].replace(/\$/g, ''), dd.push({
                    type_: 'tex-math',
                    p1: ed[3]
                })), dd;
            },
            '9,9': function(bd, cd) {
                return _ad.go(cd, '9,9');
            }
        },
        createTransitions: function(bd) {
            var cd, dd, ed, fd, gd = {};
            for (cd in bd)
                for (dd in bd[cd])
                    for (ed = dd.split('|'), bd[cd][dd].stateArray = ed, fd = 0; fd < ed.length; fd++)
                        gd[ed[fd]] = [];
            for (cd in bd)
                for (dd in bd[cd])
                    for (ed = bd[cd][dd].stateArray || [], fd = 0; fd < ed.length; fd++) {
                        var hd = bd[cd][dd];
                        if (hd.action_) {
                            hd.action_ = [].concat(hd.action_);
                            for (var id = 0; id < hd.action_.length; id++)
                                'string' == typeof hd.action_[id] && (hd.action_[id] = {
                                    type_: hd.action_[id]
                                });
                        } else
                            hd.action_ = [];
                        for (var id = cd.split('|'), jd = 0; jd < id.length; jd++)
                            if ('*' === ed[fd])
                                for (var kd in gd)
                                    gd[kd].push({
                                        pattern: id[jd],
                                        task: hd
                                    });
                            else
                                gd[ed[fd]].push({
                                    pattern: id[jd],
                                    task: hd
                                });
                    }
            return gd;
        },
        stateMachines: {}
    };
    _ad.stateMachines = {
        ce: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                else: {
                    '0|1|2': {
                        action_: 'beginsWithBond=false',
                        revisit: !0,
                        toContinue: !0
                    }
                },
                oxidation$: {
                    0: {
                        action_: 'oxidation-output'
                    }
                },
                CMT: {
                    r: {
                        action_: 'rdt=',
                        nextState: 'rt'
                    },
                    rd: {
                        action_: 'rqt=',
                        nextState: 'rdt'
                    }
                },
                arrowUpDown: {
                    '0|1|2|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '1'
                    }
                },
                uprightEntities: {
                    '0|1|2': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '1'
                    }
                },
                orbital: {
                    '0|1|2|3': {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                '->': {
                    '0|1|2|3': {
                        action_: 'r=',
                        nextState: 'r'
                    },
                    'a|as': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    },
                    '*': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    }
                },
                '+': {
                    o: {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    'd|D': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qd|qD': {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    3: {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                amount: {
                    '0|2': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                'pm-operator': {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            {
                                type_: 'operator',
                                option: '\\pm'
                            }
                        ],
                        nextState: '0'
                    }
                },
                operator: {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                '-$': {
                    'o|q': {
                        action_: [
                            'charge or bond',
                            'output'
                        ],
                        nextState: 'qd'
                    },
                    d: {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    D: {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    qd: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qD|dq': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '-9': {
                    '3|o': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '- orbital overlap': {
                    o: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    d: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    }
                },
                '-': {
                    '0|1|2': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'beginsWithBond=true',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    3: {
                        action_: {
                            type_: 'bond',
                            option: '-'
                        }
                    },
                    a: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    as: {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    b: {
                        action_: 'b='
                    },
                    o: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    q: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    'd|qd|dq': {
                        action_: {
                            type_: '- after o/d',
                            option: !0
                        },
                        nextState: '2'
                    },
                    'D|qD|p': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                amount2: {
                    '1|3': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                letters: {
                    '0|1|2|3|a|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'q|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    'd|D|qd|qD': {
                        action_: 'o after d',
                        nextState: 'o'
                    }
                },
                digits: {
                    o: {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    q: {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    a: {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                'space A': {
                    'b|p|bp': {}
                },
                space: {
                    a: {
                        nextState: 'as'
                    },
                    0: {
                        action_: 'sb=false'
                    },
                    '1|2': {
                        action_: 'sb=true'
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: 'output',
                        nextState: '0'
                    },
                    '*': {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1'
                    }
                },
                '1st-level escape': {
                    '1|2': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ]
                    },
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ],
                        nextState: '0'
                    }
                },
                '[(...)]': {
                    'r|rt': {
                        action_: 'rd=',
                        nextState: 'rd'
                    },
                    'rd|rdt': {
                        action_: 'rq=',
                        nextState: 'rdq'
                    }
                },
                '...': {
                    'o|d|D|dq|qd|qD': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '...'
                            }
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            {
                                type_: 'insert',
                                option: 'ellipsis'
                            }
                        ],
                        nextState: '1'
                    }
                },
                '. |* ': {
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'addition compound'
                            }
                        ],
                        nextState: '1'
                    }
                },
                'state of aggregation $': {
                    '*': {
                        action_: [
                            'output',
                            'state of aggregation'
                        ],
                        nextState: '1'
                    }
                },
                '{[(': {
                    'a|as|o': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '0|1|2|3': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    }
                },
                ')]}': {
                    '0|1|2|3|b|p|bp|o': {
                        action_: [
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    },
                    'a|as|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    }
                },
                ', ': {
                    '*': {
                        action_: [
                            'output',
                            'comma'
                        ],
                        nextState: '0'
                    }
                },
                '^_': {
                    '*': {}
                },
                '^{(...)}|^($...$)': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'D'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qD'
                    },
                    'd|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'D'
                    }
                },
                '^a|^\\x{}{}|^\\x{}|^\\x|\'': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'd|qd|D|qD': {
                        action_: 'd='
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    }
                },
                '_{(state of aggregation)}$': {
                    'd|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
                    '0|1|2|as': {
                        action_: 'p=',
                        nextState: 'p'
                    },
                    b: {
                        action_: 'p=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    'q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '=<>': {
                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '#': {
                    '0|1|2|3|a|as|o': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '#'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '{}': {
                    '*': {
                        action_: {
                            type_: 'output',
                            option: 1
                        },
                        nextState: '1'
                    }
                },
                '{...}': {
                    '0|1|2|3|a|as|b|p|bp': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'o|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '$...$': {
                    a: {
                        action_: 'a='
                    },
                    '0|1|2|3|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'as|o': {
                        action_: 'o='
                    },
                    'q|d|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '\\bond{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '\\frac{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'frac-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\overset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'overset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underbrace{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underbrace-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color0-output'
                        ]
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'ce'
                        ],
                        nextState: '3'
                    }
                },
                '\\,': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '1'
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '0|1|2|3|a|as|b|p|bp|o|c0': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    }
                },
                others: {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '3'
                    }
                },
                else2: {
                    a: {
                        action_: 'a to o',
                        nextState: 'o',
                        revisit: !0
                    },
                    as: {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1',
                        revisit: !0
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: ['output'],
                        nextState: '0',
                        revisit: !0
                    },
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ],
                        nextState: '3'
                    }
                }
            }),
            actions: {
                'o after d': function(bd, cd) {
                    var dd;
                    if ((bd.d || '').match(/^[0-9]+$/)) {
                        var ed = bd.d;
                        bd.d = void 0, dd = this.output(bd), bd.b = ed;
                    } else
                        dd = this.output(bd);
                    return _ad.actions['o='](bd, cd), dd;
                },
                'd= kv': function(bd, cd) {
                    bd.d = cd, bd.dType = 'kv';
                },
                'charge or bond': function(bd, cd) {
                    if (bd.beginsWithBond) {
                        var dd = [];
                        return _ad.concatArray(dd, this.output(bd)), _ad.concatArray(dd, _ad.actions.bond(bd, cd, '-')), dd;
                    }
                    bd.d = cd;
                },
                '- after o/d': function(bd, cd, dd) {
                    var ed = _ad.patterns.match_('orbital', bd.o || ''),
                        fd = _ad.patterns.match_('one lowercase greek letter $', bd.o || ''),
                        gd = _ad.patterns.match_('one lowercase latin letter $', bd.o || ''),
                        hd = _ad.patterns.match_('$one lowercase latin letter$ $', bd.o || ''),
                        id = '-' === cd && (ed && '' === ed.remainder || fd || gd || hd);
                    !id || bd.a || bd.b || bd.p || bd.d || bd.q || ed || !gd || (bd.o = '$' + bd.o + '$');
                    var jd = [];
                    return id ? (_ad.concatArray(jd, this.output(bd)), jd.push({
                        type_: 'hyphen'
                    })) : (ed = _ad.patterns.match_('digits', bd.d || ''), dd && ed && '' === ed.remainder ? (_ad.concatArray(jd, _ad.actions['d='](bd, cd)), _ad.concatArray(jd, this.output(bd))) : (_ad.concatArray(jd, this.output(bd)), _ad.concatArray(jd, _ad.actions.bond(bd, cd, '-')))), jd;
                },
                'a to o': function(bd) {
                    bd.o = bd.a, bd.a = void 0;
                },
                'sb=true': function(bd) {
                    bd.sb = !0;
                },
                'sb=false': function(bd) {
                    bd.sb = !1;
                },
                'beginsWithBond=true': function(bd) {
                    bd.beginsWithBond = !0;
                },
                'beginsWithBond=false': function(bd) {
                    bd.beginsWithBond = !1;
                },
                'parenthesisLevel++': function(bd) {
                    bd.parenthesisLevel++;
                },
                'parenthesisLevel--': function(bd) {
                    bd.parenthesisLevel--;
                },
                'state of aggregation': function(bd, cd) {
                    return {
                        type_: 'state of aggregation',
                        p1: _ad.go(cd, 'o')
                    };
                },
                comma: function(bd, cd) {
                    var dd = cd.replace(/\s*$/, '');
                    return dd !== cd && 0 === bd.parenthesisLevel ? {
                        type_: 'comma enumeration L',
                        p1: dd
                    } : {
                        type_: 'comma enumeration M',
                        p1: dd
                    };
                },
                output: function(bd, cd, dd) {
                    var ed, fd, gd;
                    for (var hd in (bd.r ? (fd = 'M' === bd.rdt ? _ad.go(bd.rd, 'tex-math') : 'T' === bd.rdt ? [{
                            type_: 'text',
                            p1: bd.rd || ''
                        }] : _ad.go(bd.rd), gd = 'M' === bd.rqt ? _ad.go(bd.rq, 'tex-math') : 'T' === bd.rqt ? [{
                            type_: 'text',
                            p1: bd.rq || ''
                        }] : _ad.go(bd.rq), ed = {
                            type_: 'arrow',
                            r: bd.r,
                            rd: fd,
                            rq: gd
                        }) : (ed = [], (bd.a || bd.b || bd.p || bd.o || bd.q || bd.d || dd) && (bd.sb && ed.push({
                            type_: 'entitySkip'
                        }), bd.o || bd.q || bd.d || bd.b || bd.p || 2 === dd ? bd.o || bd.q || bd.d || !bd.b && !bd.p ? bd.o && 'kv' === bd.dType && _ad.patterns.match_('d-oxidation$', bd.d || '') ? bd.dType = 'oxidation' : bd.o && 'kv' === bd.dType && !bd.q && (bd.dType = void 0) : (bd.o = bd.a, bd.d = bd.b, bd.q = bd.p, bd.a = bd.b = bd.p = void 0) : (bd.o = bd.a, bd.a = void 0), ed.push({
                            type_: 'chemfive',
                            a: _ad.go(bd.a, 'a'),
                            b: _ad.go(bd.b, 'bd'),
                            p: _ad.go(bd.p, 'pq'),
                            o: _ad.go(bd.o, 'o'),
                            q: _ad.go(bd.q, 'pq'),
                            d: _ad.go(bd.d, 'oxidation' === bd.dType ? 'oxidation' : 'bd'),
                            dType: bd.dType
                        }))), bd))
                        'parenthesisLevel' !== hd && 'beginsWithBond' !== hd && delete bd[hd];
                    return ed;
                },
                'oxidation-output': function(bd, cd) {
                    var dd = ['{'];
                    return _ad.concatArray(dd, _ad.go(cd, 'oxidation')), dd.push('}'), dd;
                },
                'frac-output': function(bd, cd) {
                    return {
                        type_: 'frac-ce',
                        p1: _ad.go(cd[0]),
                        p2: _ad.go(cd[1])
                    };
                },
                'overset-output': function(bd, cd) {
                    return {
                        type_: 'overset',
                        p1: _ad.go(cd[0]),
                        p2: _ad.go(cd[1])
                    };
                },
                'underset-output': function(bd, cd) {
                    return {
                        type_: 'underset',
                        p1: _ad.go(cd[0]),
                        p2: _ad.go(cd[1])
                    };
                },
                'underbrace-output': function(bd, cd) {
                    return {
                        type_: 'underbrace',
                        p1: _ad.go(cd[0]),
                        p2: _ad.go(cd[1])
                    };
                },
                'color-output': function(bd, cd) {
                    return {
                        type_: 'color',
                        color1: cd[0],
                        color2: _ad.go(cd[1])
                    };
                },
                'r=': function(bd, cd) {
                    bd.r = cd;
                },
                'rdt=': function(bd, cd) {
                    bd.rdt = cd;
                },
                'rd=': function(bd, cd) {
                    bd.rd = cd;
                },
                'rqt=': function(bd, cd) {
                    bd.rqt = cd;
                },
                'rq=': function(bd, cd) {
                    bd.rq = cd;
                },
                operator: function(bd, cd, dd) {
                    return {
                        type_: 'operator',
                        kind_: dd || cd
                    };
                }
            }
        },
        a: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                '$(...)$': {
                    '*': {
                        action_: 'tex-math tight',
                        nextState: '1'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'commaDecimal'
                        }
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        o: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\\ca': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'circa'
                        }
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: '{text}'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        text: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '{...}': {
                    '*': {
                        action_: 'text='
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '\\greek': {
                    '*': {
                        action_: [
                            'output',
                            'rm'
                        ]
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ]
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                output: function(bd) {
                    if (bd.text_) {
                        var cd = {
                            type_: 'text',
                            p1: bd.text_
                        };
                        for (var dd in bd)
                            delete bd[dd];
                        return cd;
                    }
                }
            }
        },
        pq: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {}
                },
                'state of aggregation $': {
                    '*': {
                        action_: 'state of aggregation'
                    }
                },
                i$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '(KV letters),': {
                    0: {
                        action_: 'rm',
                        nextState: '0'
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '-9.,9': {
                    '*': {
                        action_: '9,9'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert+p1',
                            option: 'comma enumeration S'
                        }
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'state of aggregation': function(bd, cd) {
                    return {
                        type_: 'state of aggregation subscript',
                        p1: _ad.go(cd, 'o')
                    };
                },
                'color-output': function(bd, cd) {
                    return {
                        type_: 'color',
                        color1: cd[0],
                        color2: _ad.go(cd[1], 'pq')
                    };
                }
            }
        },
        bd: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {}
                },
                x$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '-9.,9 no missing 0': {
                    '*': {
                        action_: '9,9'
                    }
                },
                '.': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'electron dot'
                        }
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                x: {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'KV x'
                        }
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\'': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'prime'
                        }
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'color-output': function(bd, cd) {
                    return {
                        type_: 'color',
                        color1: cd[0],
                        color2: _ad.go(cd[1], 'bd')
                    };
                }
            }
        },
        oxidation: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {}
                },
                'roman numeral': {
                    '*': {
                        action_: 'roman-numeral'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'roman-numeral': function(bd, cd) {
                    return {
                        type_: 'roman numeral',
                        p1: cd || ''
                    };
                }
            }
        },
        'tex-math': {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                output: function(bd) {
                    if (bd.o) {
                        var cd = {
                            type_: 'tex-math',
                            p1: bd.o
                        };
                        for (var dd in bd)
                            delete bd[dd];
                        return cd;
                    }
                }
            }
        },
        'tex-math tight': {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                '-|+': {
                    '*': {
                        action_: 'tight operator'
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                'tight operator': function(bd, cd) {
                    bd.o = (bd.o || '') + '{' + cd + '}';
                },
                output: function(bd) {
                    if (bd.o) {
                        var cd = {
                            type_: 'tex-math',
                            p1: bd.o
                        };
                        for (var dd in bd)
                            delete bd[dd];
                        return cd;
                    }
                }
            }
        },
        '9,9': {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {}
                },
                ',': {
                    '*': {
                        action_: 'comma'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                }
            }
        },
        pu: {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                space$: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ]
                    }
                },
                '{[(|)]}': {
                    '0|a': {
                        action_: 'copy'
                    }
                },
                '(-)(9)^(-9)': {
                    0: {
                        action_: 'number^',
                        nextState: 'a'
                    }
                },
                '(-)(9.,9)(e)(99)': {
                    0: {
                        action_: 'enumber',
                        nextState: 'a'
                    }
                },
                space: {
                    '0|a': {}
                },
                'pm-operator': {
                    '0|a': {
                        action_: {
                            type_: 'operator',
                            option: '\\pm'
                        },
                        nextState: '0'
                    }
                },
                operator: {
                    '0|a': {
                        action_: 'copy',
                        nextState: '0'
                    }
                },
                '//': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '/': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '{...}|else': {
                    '0|d': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    a: {
                        action_: [
                            'space',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    '/|q': {
                        action_: 'q=',
                        nextState: 'q'
                    }
                }
            }),
            actions: {
                enumber: function(bd, cd) {
                    var dd = [];
                    return '+-' === cd[0] || '+/-' === cd[0] ? dd.push('\\pm ') : cd[0] && dd.push(cd[0]), cd[1] && (_ad.concatArray(dd, _ad.go(cd[1], 'pu-9,9')), cd[2] && (cd[2].match(/[,.]/) ? _ad.concatArray(dd, _ad.go(cd[2], 'pu-9,9')) : dd.push(cd[2])), cd[3] = cd[4] || cd[3], cd[3] && (cd[3] = cd[3].trim(), 'e' === cd[3] || '*' === cd[3].substr(0, 1) ? dd.push({
                        type_: 'cdot'
                    }) : dd.push({
                        type_: 'times'
                    }))), cd[3] && dd.push('10^{' + cd[5] + '}'), dd;
                },
                'number^': function(bd, cd) {
                    var dd = [];
                    return '+-' === cd[0] || '+/-' === cd[0] ? dd.push('\\pm ') : cd[0] && dd.push(cd[0]), _ad.concatArray(dd, _ad.go(cd[1], 'pu-9,9')), dd.push('^{' + cd[2] + '}'), dd;
                },
                operator: function(bd, cd, dd) {
                    return {
                        type_: 'operator',
                        kind_: dd || cd
                    };
                },
                space: function() {
                    return {
                        type_: 'pu-space-1'
                    };
                },
                output: function(bd) {
                    var cd, dd = _ad.patterns.match_('{(...)}', bd.d || '');
                    dd && '' === dd.remainder && (bd.d = dd.match_);
                    var ed = _ad.patterns.match_('{(...)}', bd.q || '');
                    if (ed && '' === ed.remainder && (bd.q = ed.match_), bd.d && (bd.d = bd.d.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), bd.d = bd.d.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F')), bd.q) {
                        bd.q = bd.q.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), bd.q = bd.q.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F');
                        var fd = {
                            d: _ad.go(bd.d, 'pu'),
                            q: _ad.go(bd.q, 'pu')
                        };
                        '//' === bd.o ? cd = {
                            type_: 'pu-frac',
                            p1: fd.d,
                            p2: fd.q
                        } : (cd = fd.d, fd.d.length > 1 || fd.q.length > 1 ? cd.push({
                            type_: ' / '
                        }) : cd.push({
                            type_: '/'
                        }), _ad.concatArray(cd, fd.q));
                    } else
                        cd = _ad.go(bd.d, 'pu-2');
                    for (var fd in bd)
                        delete bd[fd];
                    return cd;
                }
            }
        },
        'pu-2': {
            transitions: _ad.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '*': {
                    '*': {
                        action_: [
                            'output',
                            'cdot'
                        ],
                        nextState: '0'
                    }
                },
                '\\x': {
                    '*': {
                        action_: 'rm='
                    }
                },
                space: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ],
                        nextState: '0'
                    }
                },
                '^{(...)}|^(-1)': {
                    1: {
                        action_: '^(-1)'
                    }
                },
                '-9.,9': {
                    0: {
                        action_: 'rm=',
                        nextState: '0'
                    },
                    1: {
                        action_: '^(-1)',
                        nextState: '0'
                    }
                },
                '{...}|else': {
                    '*': {
                        action_: 'rm=',
                        nextState: '1'
                    }
                }
            }),
            actions: {
                cdot: function() {
                    return {
                        type_: 'tight cdot'
                    };
                },
                '^(-1)': function(bd, cd) {
                    bd.rm += '^{' + cd + '}';
                },
                space: function() {
                    return {
                        type_: 'pu-space-2'
                    };
                },
                output: function(bd) {
                    var cd = [];
                    if (bd.rm) {
                        var dd = _ad.patterns.match_('{(...)}', bd.rm || '');
                        cd = dd && '' === dd.remainder ? _ad.go(dd.match_, 'pu') : {
                            type_: 'rm',
                            p1: bd.rm
                        };
                    }
                    for (var dd in bd)
                        delete bd[dd];
                    return cd;
                }
            }
        },
        'pu-9,9': {
            transitions: _ad.createTransitions({
                empty: {
                    0: {
                        action_: 'output-0'
                    },
                    o: {
                        action_: 'output-o'
                    }
                },
                ',': {
                    0: {
                        action_: [
                            'output-0',
                            'comma'
                        ],
                        nextState: 'o'
                    }
                },
                '.': {
                    0: {
                        action_: [
                            'output-0',
                            'copy'
                        ],
                        nextState: 'o'
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                },
                'output-0': function(bd) {
                    var cd = [];
                    if (bd.text_ = bd.text_ || '', bd.text_.length > 4) {
                        var dd = bd.text_.length % 3;
                        0 === dd && (dd = 3);
                        for (var ed = bd.text_.length - 3; ed > 0; ed -= 3)
                            cd.push(bd.text_.substr(ed, 3)), cd.push({
                                type_: '1000 separator'
                            });
                        cd.push(bd.text_.substr(0, dd)), cd.reverse();
                    } else
                        cd.push(bd.text_);
                    for (var dd in bd)
                        delete bd[dd];
                    return cd;
                },
                'output-o': function(bd) {
                    var cd = [];
                    if (bd.text_ = bd.text_ || '', bd.text_.length > 4) {
                        for (var dd = bd.text_.length - 3, ed = 0; ed < dd; ed += 3)
                            cd.push(bd.text_.substr(ed, 3)), cd.push({
                                type_: '1000 separator'
                            });
                        cd.push(bd.text_.substr(ed));
                    } else
                        cd.push(bd.text_);
                    for (var dd in bd)
                        delete bd[dd];
                    return cd;
                }
            }
        }
    };
    var _bd = {
        go: function(cd, dd) {
            if (!cd)
                return '';
            for (var ed = '', fd = !1, gd = 0; gd < cd.length; gd++) {
                var hd = cd[gd];
                'string' == typeof hd ? ed += hd : (ed += _bd._go2(hd), '1st-level escape' === hd.type_ && (fd = !0));
            }
            return dd || fd || !ed || (ed = '{' + ed + '}'), ed;
        },
        _goInner: function(cd) {
            return cd ? _bd.go(cd, !0) : cd;
        },
        _go2: function(cd) {
            var dd;
            switch (cd.type_) {
                case 'chemfive':
                    dd = '';
                    var ed = {
                        a: _bd._goInner(cd.a),
                        b: _bd._goInner(cd.b),
                        p: _bd._goInner(cd.p),
                        o: _bd._goInner(cd.o),
                        q: _bd._goInner(cd.q),
                        d: _bd._goInner(cd.d)
                    };
                    ed.a && (ed.a.match(/^[+\-]/) && (ed.a = '{' + ed.a + '}'), dd += ed.a + '\\,'), (ed.b || ed.p) && (dd += '{\\vphantom{X}}', dd += '^{\\hphantom{' + (ed.b || '') + '}}_{\\hphantom{' + (ed.p || '') + '}}', dd += '{\\vphantom{X}}', dd += '^{\\smash[t]{\\vphantom{2}}\\mathllap{' + (ed.b || '') + '}}', dd += '_{\\vphantom{2}\\mathllap{\\smash[t]{' + (ed.p || '') + '}}}'), ed.o && (ed.o.match(/^[+\-]/) && (ed.o = '{' + ed.o + '}'), dd += ed.o), 'kv' === cd.dType ? ((ed.d || ed.q) && (dd += '{\\vphantom{X}}'), ed.d && (dd += '^{' + ed.d + '}'), ed.q && (dd += '_{\\smash[t]{' + ed.q + '}}')) : 'oxidation' === cd.dType ? (ed.d && (dd += '{\\vphantom{X}}', dd += '^{' + ed.d + '}'), ed.q && (dd += '{\\vphantom{X}}', dd += '_{\\smash[t]{' + ed.q + '}}')) : (ed.q && (dd += '{\\vphantom{X}}', dd += '_{\\smash[t]{' + ed.q + '}}'), ed.d && (dd += '{\\vphantom{X}}', dd += '^{' + ed.d + '}'));
                    break;
                case 'rm':
                case 'roman numeral':
                    dd = '\\mathrm{' + cd.p1 + '}';
                    break;
                case 'text':
                    cd.p1.match(/[\^_]/) ? (cd.p1 = cd.p1.replace(' ', '~').replace('-', '\\text{-}'), dd = '\\mathrm{' + cd.p1 + '}') : dd = '\\text{' + cd.p1 + '}';
                    break;
                case 'state of aggregation':
                    dd = '\\mskip2mu ' + _bd._goInner(cd.p1);
                    break;
                case 'state of aggregation subscript':
                    dd = '\\mskip1mu ' + _bd._goInner(cd.p1);
                    break;
                case 'bond':
                    if (!(dd = _bd._getBond(cd.kind_)))
                        throw [
                            'MhchemErrorBond',
                            'mhchem Error. Unknown bond type (' + cd.kind_ + ')'
                        ];
                    break;
                case 'frac':
                    var fd = '\\frac{' + cd.p1 + '}{' + cd.p2 + '}';
                    dd = '\\mathchoice{\\textstyle' + fd + '}{' + fd + '}{' + fd + '}{' + fd + '}';
                    break;
                case 'pu-frac':
                    var gd = '\\frac{' + _bd._goInner(cd.p1) + '}{' + _bd._goInner(cd.p2) + '}';
                    dd = '\\mathchoice{\\textstyle' + gd + '}{' + gd + '}{' + gd + '}{' + gd + '}';
                    break;
                case 'tex-math':
                case '1st-level escape':
                    dd = cd.p1 + ' ';
                    break;
                case 'frac-ce':
                    dd = '\\frac{' + _bd._goInner(cd.p1) + '}{' + _bd._goInner(cd.p2) + '}';
                    break;
                case 'overset':
                    dd = '\\overset{' + _bd._goInner(cd.p1) + '}{' + _bd._goInner(cd.p2) + '}';
                    break;
                case 'underset':
                    dd = '\\underset{' + _bd._goInner(cd.p1) + '}{' + _bd._goInner(cd.p2) + '}';
                    break;
                case 'underbrace':
                    dd = '\\underbrace{' + _bd._goInner(cd.p1) + '}_{' + _bd._goInner(cd.p2) + '}';
                    break;
                case 'color':
                    dd = '{\\color{' + cd.color1 + '}{' + _bd._goInner(cd.color2) + '}}';
                    break;
                case 'color0':
                    dd = '\\color{' + cd.color + '}';
                    break;
                case 'arrow':
                    var hd = {
                            rd: _bd._goInner(cd.rd),
                            rq: _bd._goInner(cd.rq)
                        },
                        id = '\\x' + _bd._getArrow(cd.r);
                    hd.rq && (id += '[{' + hd.rq + '}]'), dd = id += hd.rd ? '{' + hd.rd + '}' : '{}';
                    break;
                case 'operator':
                    dd = _bd._getOperator(cd.kind_);
                    break;
                case 'space':
                    dd = ' ';
                    break;
                case 'entitySkip':
                case 'pu-space-1':
                    dd = '~';
                    break;
                case 'pu-space-2':
                    dd = '\\mkern3mu ';
                    break;
                case '1000 separator':
                    dd = '\\mkern2mu ';
                    break;
                case 'commaDecimal':
                    dd = '{,}';
                    break;
                case 'comma enumeration L':
                    dd = '{' + cd.p1 + '}\\mkern6mu ';
                    break;
                case 'comma enumeration M':
                    dd = '{' + cd.p1 + '}\\mkern3mu ';
                    break;
                case 'comma enumeration S':
                    dd = '{' + cd.p1 + '}\\mkern1mu ';
                    break;
                case 'hyphen':
                    dd = '\\text{-}';
                    break;
                case 'addition compound':
                    dd = '\\,{\\cdot}\\,';
                    break;
                case 'electron dot':
                    dd = '\\mkern1mu \\bullet\\mkern1mu ';
                    break;
                case 'KV x':
                    dd = '{\\times}';
                    break;
                case 'prime':
                    dd = '\\prime ';
                    break;
                case 'cdot':
                    dd = '\\cdot ';
                    break;
                case 'tight cdot':
                    dd = '\\mkern1mu{\\cdot}\\mkern1mu ';
                    break;
                case 'times':
                    dd = '\\times ';
                    break;
                case 'circa':
                    dd = '{\\sim}';
                    break;
                case '^':
                    dd = 'uparrow';
                    break;
                case 'v':
                    dd = 'downarrow';
                    break;
                case 'ellipsis':
                    dd = '\\ldots ';
                    break;
                case '/':
                    dd = '/';
                    break;
                case ' / ':
                    dd = '\\,/\\,';
                    break;
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
            return dd;
        },
        _getArrow: function(cd) {
            switch (cd) {
                case '->':
                case '\u2192':
                case '\u27F6':
                    return 'rightarrow';
                case '<-':
                    return 'leftarrow';
                case '<->':
                    return 'leftrightarrow';
                case '<-->':
                    return 'rightleftarrows';
                case '<=>':
                case '\u21CC':
                    return 'rightleftharpoons';
                case '<=>>':
                    return 'rightequilibrium';
                case '<<=>':
                    return 'leftequilibrium';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getBond: function(cd) {
            switch (cd) {
                case '-':
                case '1':
                    return '{-}';
                case '=':
                case '2':
                    return '{=}';
                case '#':
                case '3':
                    return '{\\equiv}';
                case '~':
                    return '{\\tripledash}';
                case '~-':
                    return '{\\mathrlap{\\raisebox{-.1em}{$-$}}\\raisebox{.1em}{$\\tripledash$}}';
                case '~=':
                case '~--':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$\\tripledash$}}-}';
                case '-~-':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$-$}}\\tripledash}';
                case '...':
                    return '{{\\cdot}{\\cdot}{\\cdot}}';
                case '....':
                    return '{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}';
                case '->':
                    return '{\\rightarrow}';
                case '<-':
                    return '{\\leftarrow}';
                case '<':
                    return '{<}';
                case '>':
                    return '{>}';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getOperator: function(cd) {
            switch (cd) {
                case '+':
                    return ' {}+{} ';
                case '-':
                    return ' {}-{} ';
                case '=':
                    return ' {}={} ';
                case '<':
                    return ' {}<{} ';
                case '>':
                    return ' {}>{} ';
                case '<<':
                    return ' {}\\ll{} ';
                case '>>':
                    return ' {}\\gg{} ';
                case '\\pm':
                    return ' {}\\pm{} ';
                case '\\approx':
                case '$\\approx$':
                    return ' {}\\approx{} ';
                case 'v':
                case '(v)':
                    return ' \\downarrow{} ';
                case '^':
                case '(^)':
                    return ' \\uparrow{} ';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        }
    };
    class cd extends kc {
        static fromJson(dd, ed) {
            return new cd(dd.command, dd.delim, ed, dd);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size
            };
        }
        render(dd) {
            const ed = new Nb(null);
            return ed.delim = this.value, ed;
        }
        serialize(dd) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(dd, ed, fd, gd) {
            super('delim', fd, {
                command: dd,
                style: null == gd ? void 0 : gd.style
            }), this.value = ed, this.size = null == gd ? void 0 : gd.size;
        }
    }
    class dd extends kc {
        static fromJson(ed, fd) {
            return new dd(ed.command, ed.delim, fd, ed);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size,
                delimClass: this.delimClass
            };
        }
        render(ed) {
            let fd = function(gd, hd, id, jd) {
                var kd;
                return void 0 === gd || '.' === gd ? _Ec(id, null !== (kd = jd.type) && void 0 !== kd ? kd : 'minner', jd.classes) : ('<' === gd || '\\lt' === gd || '\u27E8' === gd ? gd = '\\langle' : '>' !== gd && '\\gt' !== gd && '\u27E9' !== gd || (gd = '\\rangle'), vc.has(gd) || xc.has(gd) ? tc(gd, hd, !1, id, jd) : wc.has(gd) ? uc(gd, yc[hd], !1, id, jd) : null);
            }(this.value, this.size, ed, {
                classes: this.delimClass
            });
            return fd ? (fd = this.bind(ed, fd), this.caret && (fd.caret = this.caret), fd) : null;
        }
        serialize(ed) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(ed, fd, gd, hd) {
            super('sizeddelim', gd, {
                command: ed,
                style: hd.style
            }), this.value = fd, this.delimClass = hd.delimClass, this.size = hd.size;
        }
    }
    class ed extends kc {
        static fromJson(fd, gd) {
            return new ed(fd.command, fd.body, fd.notation, gd, fd);
        }
        toJson() {
            const fd = {};
            return this.notation.downdiagonalstrike && (fd.downdiagonalstrike = !0), this.notation.updiagonalstrike && (fd.downdiagonalstrike = !0), this.notation.verticalstrike && (fd.downdiagonalstrike = !0), this.notation.horizontalstrike && (fd.downdiagonalstrike = !0), this.notation.updiagonalarrow && (fd.downdiagonalstrike = !0), this.notation.right && (fd.downdiagonalstrike = !0), this.notation.bottom && (fd.downdiagonalstrike = !0), this.notation.left && (fd.downdiagonalstrike = !0), this.notation.top && (fd.downdiagonalstrike = !0), this.notation.circle && (fd.downdiagonalstrike = !0), this.notation.roundedbox && (fd.downdiagonalstrike = !0), this.notation.madruwb && (fd.downdiagonalstrike = !0), this.notation.actuarial && (fd.downdiagonalstrike = !0), this.notation.box && (fd.downdiagonalstrike = !0), {
                ...super.toJson(),
                notation: fd,
                shadow: this.shadow,
                strokeWidth: this.strokeWidth,
                strokeStyle: this.strokeStyle,
                svgStrokeStyle: this.svgStrokeStyle,
                strokeColor: this.strokeColor,
                borderStyle: this.borderStyle,
                padding: this.padding
            };
        }
        serialize(fd) {
            var gd;
            let hd = null !== (gd = this.command) && void 0 !== gd ? gd : '';
            if ('\\enclose' === this.command) {
                hd += '{' + Object.keys(this.notation).join(' ') + '}';
                let id = '',
                    jd = '';
                this.backgroundcolor && 'transparent' !== this.backgroundcolor && (id += jd + 'mathbackground="' + this.backgroundcolor + '"', jd = ','), this.shadow && 'auto' !== this.shadow && (id += jd + 'shadow="' + this.shadow + '"', jd = ','), this.strokeWidth || 'solid' !== this.strokeStyle ? (id += jd + this.borderStyle, jd = ',') : this.strokeColor && 'currentColor' !== this.strokeColor && (id += jd + 'mathcolor="' + this.strokeColor + '"', jd = ','), id && (hd += `[${ id }]`);
            }
            return hd += `{${ this.bodyToLatex(fd) }}`, hd;
        }
        render(fd) {
            var gd;
            const hd = new Db(fd, this.style),
                id = kc.createBox(hd, this.body);
            if (!id)
                return null;
            const jd = null !== (gd = Bb(this.padding && 'auto' !== this.padding ? _Tc(this.padding, {
                    ...this.context,
                    registers: fd.registers
                }) : hd.getRegisterAsDimension('fboxsep'))) && void 0 !== gd ? gd : 0,
                kd = function(ld) {
                    if (!ld)
                        return '1px';
                    const md = ld.match(/([0-9][a-zA-Z\%]+)/);
                    return null === md ? '1px' : md[1];
                }(this.borderStyle),
                ld = new Nb(null, {
                    classes: 'ML__notation'
                });
            ld.setStyle('position', 'absolute'), ld.setStyle('z-index', '-1'), ld.setStyle('box-sizing', 'border-box'), ld.setStyle('top', `calc(-${ kd } / 2 - ${ jd }em)`), ld.setStyle('left', `calc(-${ kd } / 2 - ${ jd }em)`), ld.setStyle('height', `calc(100% + ${ 2 * jd }em + 2 * ${ kd })`), ld.height = id.height + jd, ld.depth = id.depth + jd, ld.setStyle('width', `calc(100% + ${ 2 * jd }em + 2 * ${ kd })`), this.backgroundcolor && ld.setStyle('background-color', this.backgroundcolor), this.notation.box && ld.setStyle('border', this.borderStyle), this.notation.actuarial && (ld.setStyle('border-top', this.borderStyle), ld.setStyle('border-right', this.borderStyle)), this.notation.madruwb && (ld.setStyle('border-bottom', this.borderStyle), ld.setStyle('border-right', this.borderStyle)), this.notation.roundedbox && (ld.setStyle('border-radius', '8px'), ld.setStyle('border', this.borderStyle)), this.notation.circle && (ld.setStyle('border-radius', '50%'), ld.setStyle('border', this.borderStyle)), this.notation.top && ld.setStyle('border-top', this.borderStyle), this.notation.left && ld.setStyle('border-left', this.borderStyle), this.notation.right && ld.setStyle('border-right', this.borderStyle), this.notation.bottom && ld.setStyle('border-bottom', this.borderStyle);
            let md = '';
            if (this.notation.horizontalstrike && (md += '<line x1="3%"  y1="50%" x2="97%" y2="50%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), this.notation.verticalstrike && (md += '<line x1="50%"  y1="3%" x2="50%" y2="97%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), this.notation.updiagonalstrike && (md += '<line x1="3%"  y1="97%" x2="97%" y2="3%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), this.notation.downdiagonalstrike && (md += '<line x1="3%"  y1="3%" x2="97%" y2="97%"', md += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, md += ' stroke-linecap="round"', this.svgStrokeStyle && (md += ` stroke-dasharray="${ this.svgStrokeStyle }"`), md += '/>'), md) {
                let nd;
                'none' !== this.shadow && (nd = 'auto' === this.shadow ? 'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)' : 'filter: drop-shadow(' + this.shadow + ')'),
                    function(od, pd, qd) {
                        od.svgOverlay = pd, od.svgStyle = qd;
                    }(ld, md, nd);
            }
            const nd = new Nb([
                ld,
                id
            ]);
            return nd.setStyle('position', 'relative'), nd.setStyle('display', 'inline'), nd.height = id.height + jd, nd.depth = id.depth + jd, nd.left = jd, nd.right = jd, this.caret && (nd.caret = this.caret), nd.wrap(hd);
        }
        constructor(fd, gd, hd, id, jd) {
            super('enclose', id, {
                command: fd,
                style: jd.style
            }), this.body = gd, this.backgroundcolor = jd.backgroundcolor, hd.updiagonalarrow && (hd.updiagonalstrike = !1), hd.box && (hd.left = !1, hd.right = !1, hd.bottom = !1, hd.top = !1), this.notation = hd, this.shadow = jd.shadow, this.strokeWidth = jd.strokeWidth, this.strokeStyle = jd.strokeStyle, this.svgStrokeStyle = jd.svgStrokeStyle, this.strokeColor = jd.strokeColor, this.borderStyle = jd.borderStyle, this.padding = jd.padding, this.captureSelection = !0;
        }
    }
    class fd extends kc {
        static fromJson(gd, hd) {
            return new fd(gd.command, gd.above, gd.below, hd, gd);
        }
        toJson() {
            const gd = {};
            return this.continuousFraction && (gd.continuousFraction = !0), this.numerPrefix && (gd.numerPrefix = this.numerPrefix), this.denomPrefix && (gd.denomPrefix = this.denomPrefix), this.leftDelim && (gd.leftDelim = this.leftDelim), this.rightDelim && (gd.rightDelim = this.rightDelim), this.hasBarLine || (gd.hasBarLine = !1), this.mathstyleName && (gd.mathstyleName = this.mathstyleName), {
                ...super.toJson(),
                ...gd
            };
        }
        serialize(gd) {
            return this.command + `{${ this.aboveToLatex(gd) }}` + `{${ this.belowToLatex(gd) }}`;
        }
        get children() {
            if (this._children)
                return this._children;
            const gd = [];
            if ('numerator-denominator' === this.context.fractionNavigationOrder) {
                for (const hd of this.above)
                    gd.push(...hd.children), gd.push(hd);
                for (const id of this.below)
                    gd.push(...id.children), gd.push(id);
            } else {
                for (const hd of this.below)
                    gd.push(...hd.children), gd.push(hd);
                for (const id of this.above)
                    gd.push(...id.children), gd.push(id);
            }
            return this._children = gd, gd;
        }
        render(gd) {
            var hd, id;
            const jd = new Db(gd, this.style, this.mathstyleName),
                kd = jd.metrics,
                ld = new Db(jd, this.style, this.continuousFraction ? '' : 'numerator'),
                md = this.numerPrefix ? new Nb([
                    new Nb(this.numerPrefix),
                    kc.createBox(ld, this.above)
                ], {
                    isTight: ld.isTight,
                    newList: !0
                }) : null !== (hd = kc.createBox(ld, this.above, {
                    newList: !0
                })) && void 0 !== hd ? hd : new Nb(null, {
                    newList: !0
                }),
                nd = new Db(jd, this.style, this.continuousFraction ? '' : 'denominator'),
                od = this.denomPrefix ? new Nb([
                    new Nb(this.denomPrefix),
                    kc.createBox(nd, this.below, {
                        newList: !0
                    })
                ]) : null !== (id = kc.createBox(nd, this.below, {
                    newList: !0
                })) && void 0 !== id ? id : new Nb(null, {
                    newList: !0
                }),
                pd = this.hasBarLine ? kd.defaultRuleThickness : 0;
            let qd, rd, sd = 0;
            jd.isDisplayStyle ? (qd = kd.num1, sd = pd > 0 ? 3 * pd : 7 * pd, rd = kd.denom1) : (pd > 0 ? (qd = kd.num2, sd = pd) : (qd = kd.num3, sd = 3 * pd), rd = kd.denom2);
            const td = [];
            this.isSelected && td.push('ML__selected');
            const ud = md.depth,
                vd = od.height;
            let wd;
            if (pd <= 0) {
                const xd = qd - ud - (vd - rd);
                xd < sd && (qd += (sd - xd) / 2, rd += (sd - xd) / 2), wd = new Vb({
                    individualShift: [{
                            box: md,
                            shift: -qd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        },
                        {
                            box: od,
                            shift: rd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(jd);
            } else {
                const xd = 0.25 + pd / 2,
                    yd = 0.25 - pd / 2;
                qd < sd + ud + xd && (qd = sd + ud + xd), rd < sd + vd - yd && (rd = sd + vd - yd);
                const zd = new Nb(null, {
                    classes: 'ML__frac-line',
                    mode: this.mode,
                    style: this.style
                });
                zd.height = pd / 2, zd.depth = pd / 2, wd = new Vb({
                    individualShift: [{
                            box: od,
                            shift: rd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        },
                        {
                            box: zd,
                            shift: pd / 2 - yd,
                            classes: td
                        },
                        {
                            box: md,
                            shift: -qd,
                            classes: [
                                ...td,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(jd);
            }
            const xd = jd.isDisplayStyle ? kd.delim1 : kd.delim2,
                yd = this.isSelected ? ' ML__selected' : '',
                zd = this.leftDelim ? this.bind(gd, Cc('mopen', this.leftDelim, xd, !0, gd, {
                    style: this.style,
                    mode: this.mode,
                    classes: yd
                })) : _Ec(jd, 'mopen');
            let Ad = null;
            Ad = this.continuousFraction ? new Nb(null, {
                type: 'mclose'
            }) : this.rightDelim ? this.bind(gd, Cc('mclose', this.rightDelim, xd, !0, gd, {
                style: this.style,
                mode: this.mode,
                classes: yd
            })) : _Ec(jd, 'mclose');
            const Bd = this.bind(gd, new Nb([
                zd,
                wd,
                Ad
            ], {
                isTight: jd.isTight,
                type: 'mord',
                classes: 'mfrac'
            }));
            return Bd ? (this.caret && (Bd.caret = this.caret), this.attachSupsub(gd, {
                base: Bd
            })) : null;
        }
        constructor(gd, hd, id, jd, kd) {
            var ld, md;
            super('genfrac', jd, {
                style: kd.style,
                command: gd,
                serialize: kd.serialize,
                displayContainsHighlight: !0
            }), this.above = hd, this.below = id, this.hasBarLine = null === (ld = null == kd ? void 0 : kd.hasBarLine) || void 0 === ld || ld, this.continuousFraction = null !== (md = null == kd ? void 0 : kd.continuousFraction) && void 0 !== md && md, this.numerPrefix = null == kd ? void 0 : kd.numerPrefix, this.denomPrefix = null == kd ? void 0 : kd.denomPrefix, this.mathstyleName = null == kd ? void 0 : kd.mathstyleName, this.leftDelim = null == kd ? void 0 : kd.leftDelim, this.rightDelim = null == kd ? void 0 : kd.rightDelim;
        }
    }
    class gd extends kc {
        static fromJson(hd, id) {
            const jd = new gd(hd.command, id);
            return hd.isSuggestion && (jd.isSuggestion = !0), hd.isError && (jd.isError = !0), jd;
        }
        toJson() {
            const hd = {};
            return this.isSuggestion && (hd.isSuggestion = !0), this.isError && (hd.isError = !0), {
                ...super.toJson(),
                ...hd
            };
        }
        get computedStyle() {
            return {};
        }
        render(hd) {
            const id = new Nb(this.value, {
                classes: this.isSuggestion ? 'ML__suggestion' : this.isError ? 'ML__error' : '',
                type: 'latex',
                maxFontSize: 1
            });
            return id ? (this.caret && (id.caret = this.caret), this.bind(hd, id)) : null;
        }
        constructor(hd, id, jd) {
            var kd;
            super('latex', id, {
                value: hd,
                mode: 'latex'
            }), this.isSuggestion = null !== (kd = null == jd ? void 0 : jd.isSuggestion) && void 0 !== kd && kd, this.isError = !1, this.verbatimLatex = hd;
        }
    }
    class hd extends kc {
        static fromJson(id, jd) {
            return new hd('', jd);
        }
        toJson() {
            return super.toJson();
        }
        render(id) {
            const jd = kc.createBox(id, this.body, {
                newList: !0
            });
            return jd ? (this.caret && (jd.caret = this.caret), this.bind(id, jd)) : null;
        }
        serialize(id) {
            var jd, kd;
            return null !== (kd = null === (jd = this.body) || void 0 === jd ? void 0 : jd.map(id => id.value).join('')) && void 0 !== kd ? kd : '';
        }
        constructor(id, jd) {
            super('latexgroup', jd, {
                mode: 'latex'
            }), this.body = [...id].map(id => new gd(id, jd)), this.skipBoundary = !1;
        }
    }
    class id extends kc {
        static fromJson(jd, kd) {
            return new id(jd.command, jd.body, kd, jd);
        }
        toJson() {
            return {
                ...super.toJson(),
                position: this.position
            };
        }
        render(jd) {
            const kd = new Db(jd, this.style, 'cramp'),
                ld = kc.createBox(kd, this.body);
            if (!ld)
                return null;
            const md = kd.metrics.defaultRuleThickness / kd.scalingFactor,
                nd = new Nb(null, {
                    classes: this.position + '-line'
                });
            let od;
            return nd.height = md, nd.maxFontSize = 1.125 * md * kd.scalingFactor, od = 'overline' === this.position ? new Vb({
                shift: 0,
                children: [{
                        box: ld
                    },
                    3 * md,
                    {
                        box: nd
                    },
                    md
                ]
            }) : new Vb({
                top: ld.height,
                children: [
                    md,
                    {
                        box: nd
                    },
                    3 * md,
                    {
                        box: ld
                    }
                ]
            }), this.caret && (od.caret = this.caret), new Nb(od, {
                classes: this.position,
                type: 'mord'
            });
        }
        constructor(jd, kd, ld, md) {
            super('line', ld, {
                command: jd,
                style: md.style
            }), this.skipBoundary = !0, this.body = kd, this.position = md.position;
        }
    }
    class jd extends kc {
        static fromJson(kd, ld) {
            return new jd(kd.command, kd.body ? kd.body : kd.value, ld, kd);
        }
        toJson() {
            const kd = super.toJson();
            return this.hasArgument && (kd.hasArgument = !0), this.variant && (kd.variant = this.variant), this.variantStyle && (kd.variantStyle = this.variantStyle), this.subsupPlacement && (kd.limits = this.subsupPlacement), this.isExtensibleSymbol && (kd.isExtensibleSymbol = !0), this.value && (kd.symbol = this.value), kd;
        }
        render(kd) {
            var ld;
            let md, nd = 0,
                od = 0;
            if (this.isExtensibleSymbol) {
                const pd = kd.isDisplayStyle && '\\smallint' !== this.value;
                if (md = new Nb(this.value, {
                        fontFamily: pd ? 'Size2-Regular' : 'Size1-Regular',
                        classes: 'op-symbol ' + (pd ? 'large-op' : 'small-op'),
                        type: 'mop',
                        maxFontSize: kd.scalingFactor
                    }), !md)
                    return null;
                md.right = md.italic, nd = (md.height - md.depth) / 2 - 0.25 * kd.scalingFactor, od = md.italic, md.setStyle('color', this.style.color), md.setStyle('background-color', this.style.backgroundColor);
            } else if (this.body) {
                if (md = kc.createBox(kd, this.body, {
                        newList: !0
                    }), !md)
                    return null;
                md.setStyle('color', this.style.color), md.setStyle('background-color', this.style.backgroundColor);
            } else
                md = new Nb(this.value, {
                    type: 'mop',
                    mode: 'math',
                    maxFontSize: kd.scalingFactor,
                    style: {
                        color: this.style.color,
                        backgroundColor: this.style.backgroundColor,
                        letterShapeStyle: kd.letterShapeStyle,
                        variant: this.variant,
                        variantStyle: this.variantStyle
                    }
                });
            this.isExtensibleSymbol && md.setTop(nd);
            let pd = md;
            if (this.superscript || this.subscript) {
                const qd = null !== (ld = this.subsupPlacement) && void 0 !== ld ? ld : 'auto';
                pd = 'over-under' === qd || 'auto' === qd && kd.isDisplayStyle ? this.attachLimits(kd, {
                    base: md,
                    baseShift: nd,
                    slant: od
                }) : this.attachSupsub(kd, {
                    base: md
                });
            }
            return this.caret && (pd.caret = this.caret), new Nb(this.bind(kd, pd), {
                type: 'mop',
                classes: 'op-group' + (this.isSelected ? ' ML__selected' : '')
            });
        }
        serialize(kd) {
            if ('\u200B' === this.value)
                return this.supsubToLatex(kd);
            const ld = [];
            return ld.push(this.command), this.hasArgument && ld.push(`{${ this.bodyToLatex(kd) }}`), this.explicitSubsupPlacement && ('over-under' === this.subsupPlacement && ld.push('\\limits'), 'adjacent' === this.subsupPlacement && ld.push('\\nolimits'), 'auto' === this.subsupPlacement && ld.push('\\displaylimits')), ld.push(this.supsubToLatex(kd)), ec(ld);
        }
        constructor(kd, ld, md, nd) {
            var od, pd, qd, rd;
            super(null !== (od = nd.type) && void 0 !== od ? od : 'mop', md, {
                command: kd,
                style: nd.style,
                isFunction: null == nd ? void 0 : nd.isFunction
            }), 'string' == typeof ld ? this.value = ld : this.body = ld, this.captureSelection = null !== (pd = nd.captureSelection) && void 0 !== pd && pd, this.hasArgument = null !== (qd = nd.hasArgument) && void 0 !== qd && qd, this.variant = null == nd ? void 0 : nd.variant, this.variantStyle = null == nd ? void 0 : nd.variantStyle, this.subsupPlacement = null == nd ? void 0 : nd.limits, this.isExtensibleSymbol = null !== (rd = null == nd ? void 0 : nd.isExtensibleSymbol) && void 0 !== rd && rd;
        }
    }
    class kd extends kc {
        static fromJson(ld, md) {
            return new kd(ld.command, ld.body, md, ld);
        }
        toJson() {
            const ld = {};
            return this.align && (ld.align = this.align), this.boxType && (ld.boxType = this.boxType), {
                ...super.toJson(),
                ...ld
            };
        }
        render(ld) {
            const md = kc.createBox(ld, this.body, {
                classes: 'inner'
            });
            return md ? (this.caret && (md.caret = this.caret), this.bind(ld, new Nb([
                md,
                new Nb(null, {
                    classes: 'fix'
                })
            ], {
                classes: 'left' === this.align ? 'llap' : 'rlap',
                type: this.boxType
            }))) : null;
        }
        constructor(ld, md, nd, od) {
            var pd, qd;
            super('overlap', nd, {
                command: ld,
                style: null == od ? void 0 : od.style
            }), this.skipBoundary = !0, this.body = 'string' == typeof md ? [new kc('mord', nd, {
                value: md
            })] : md, this.align = null !== (pd = null == od ? void 0 : od.align) && void 0 !== pd ? pd : 'left', this.boxType = null !== (qd = null == od ? void 0 : od.boxType) && void 0 !== qd ? qd : 'mord';
        }
    }
    class ld extends kc {
        static fromJson(md, nd) {
            return new ld(md.command, md.body, nd, md);
        }
        toJson() {
            const md = {};
            return this.isInvisible && (md.isInvisible = !0), this.smashDepth && (md.smashDepth = !0), this.smashHeight && (md.smashHeight = !0), this.smashWidth && (md.smashWidth = !0), {
                ...super.toJson(),
                ...md
            };
        }
        render(md) {
            const nd = new Db(md, {
                isPhantom: !0
            });
            if (!this.smashDepth && !this.smashHeight && !this.smashWidth)
                return kc.createBox(nd, this.body, {
                    classes: 'inner'
                });
            const od = kc.createBox(this.isInvisible ? nd : md, this.body);
            if (!od)
                return null;
            if (this.smashWidth) {
                const pd = new Nb(null, {
                    classes: 'fix'
                });
                return new Nb([
                    od,
                    pd
                ], {
                    classes: 'rlap'
                }).wrap(md);
            }
            if (!this.smashHeight && !this.smashDepth)
                return od;
            if (this.smashHeight && (od.height = 0), this.smashDepth && (od.depth = 0), od.children)
                for (const pd of od.children)
                    this.smashHeight && (pd.height = 0), this.smashDepth && (pd.depth = 0);
            return new Vb({
                firstBaseline: [{
                    box: od
                }]
            }, {
                type: 'mord'
            }).wrap(md);
        }
        constructor(md, nd, od, pd) {
            var qd, rd, sd, td;
            super('phantom', od, {
                command: md,
                style: pd.style
            }), this.captureSelection = !0, this.body = nd, this.isInvisible = null !== (qd = pd.isInvisible) && void 0 !== qd && qd, this.smashDepth = null !== (rd = pd.smashDepth) && void 0 !== rd && rd, this.smashHeight = null !== (sd = pd.smashHeight) && void 0 !== sd && sd, this.smashWidth = null !== (td = pd.smashWidth) && void 0 !== td && td;
        }
    }
    class md extends kc {
        static fromJson(nd, od) {
            return new md(nd.command, od, nd);
        }
        toJson() {
            const nd = {
                height: this.height,
                width: this.width
            };
            return this.shift && (nd.shift = this.shift), {
                ...super.toJson(),
                ...nd
            };
        }
        render(nd) {
            const od = new Db(nd, this.style, 'textstyle'),
                pd = Bb(this.shift),
                qd = Bb(this.width),
                rd = Bb(this.height),
                sd = new Nb(null, {
                    classes: 'rule',
                    type: 'mord'
                });
            return sd.setStyle('border-right-width', qd, 'em'), sd.setStyle('border-top-width', rd, 'em'), sd.setStyle('border-color', this.style.color), sd.setStyle('vertical-align', pd, 'em'), this.isSelected && sd.setStyle('opacity', '50%'), sd.width = qd, sd.height = rd + pd, sd.depth = -pd, this.bind(nd, sd), this.caret && (sd.caret = this.caret), sd.wrap(od);
        }
        serialize(nd) {
            var od;
            let pd = null !== (od = this.command) && void 0 !== od ? od : '';
            return this.shift && (pd += `[${ Cb(this.shift) }]`), pd += `{${ Cb(this.width) }}{${ Cb(this.height) }}`, pd;
        }
        constructor(nd, od, pd) {
            var qd;
            super('rule', od, {
                command: nd,
                style: pd.style
            }), this.shift = null !== (qd = pd.shift) && void 0 !== qd ? qd : {
                dimension: 0
            }, this.height = pd.height, this.width = pd.width;
        }
    }
    class nd extends kc {
        static fromJson(od, pd) {
            return new nd(od.command, pd, {
                ...od,
                index: od.above
            });
        }
        toJson() {
            return super.toJson();
        }
        serialize(od) {
            let pd = '';
            return this.above && (pd += `[${ this.aboveToLatex(od) }]`), pd += `{${ this.bodyToLatex(od) }}`, this.command + pd;
        }
        render(od) {
            var pd;
            const qd = new Db(od, this.style, 'cramp'),
                rd = null !== (pd = kc.createBox(qd, this.body, {
                    style: this.style,
                    newList: !0
                })) && void 0 !== pd ? pd : new Nb(null),
                sd = qd.scalingFactor,
                td = qd.metrics.defaultRuleThickness / sd,
                ud = od.isDisplayStyle ? 0.431 : td,
                vd = new Nb(null, {
                    classes: 'ML__sqrt-line',
                    style: this.style,
                    height: td
                });
            let wd = sd * (td + ud / 4);
            const xd = Math.max(2 * sd * ud, rd.height + rd.depth) + wd + td,
                yd = new Db(od, this.style),
                zd = this.isSelected ? ' ML__selected' : '',
                Ad = this.bind(yd, new Nb(Cc('', '\\surd', xd, !1, yd, {
                    classes: zd
                }), {
                    classes: 'ML__sqrt-sign' + zd,
                    style: this.style
                }));
            if (!Ad)
                return null;
            const Bd = Ad.height + Ad.depth - td;
            Bd > rd.height + rd.depth + wd && (wd = (wd + Bd - (rd.height + rd.depth)) / 2), Ad.setTop(Ad.height - rd.height - wd);
            const Cd = this.bind(od, new Vb({
                    firstBaseline: [{
                            box: new Nb(rd)
                        },
                        wd - 2 * td,
                        {
                            box: vd
                        },
                        td
                    ]
                }).wrap(od)),
                Dd = kc.createBox(new Db(od, this.style, 'scriptscriptstyle'), this.above, {
                    style: this.style,
                    newList: !0
                });
            if (!Dd) {
                const Ed = new Nb([
                    Ad,
                    Cd
                ], {
                    classes: this.containsCaret ? 'ML__contains-caret' : '',
                    type: 'mord'
                });
                return this.caret && (Ed.caret = this.caret), this.bind(od, Ed.wrap(od));
            }
            const Ed = new Vb({
                    shift: -0.6 * (Math.max(Ad.height, Cd.height) - Math.max(Ad.depth, Cd.depth)),
                    children: [{
                        box: Dd
                    }]
                }),
                Fd = new Nb([
                    new Nb(Ed, {
                        classes: 'ML__sqrt-index'
                    }),
                    Ad,
                    Cd
                ], {
                    type: 'mord',
                    classes: this.containsCaret ? 'ML__contains-caret' : ''
                });
            return Fd.height = Ad.height, Fd.depth = Ad.depth, this.caret && (Fd.caret = this.caret), this.bind(od, Fd.wrap(od));
        }
        constructor(od, pd, qd) {
            var rd;
            super('surd', pd, {
                command: od,
                mode: null !== (rd = qd.mode) && void 0 !== rd ? rd : 'math',
                style: qd.style,
                displayContainsHighlight: !0
            }), this.body = qd.body, this.above = qd.index;
        }
    }
    const od = {
            'p@': '1pt ',
            'z@': '0pt',
            maxdimen: '16383.99999pt',
            hfuzz: '0.1pt',
            vfuzz: '0.1pt',
            overfullrule: '5pt',
            hsize: '6.5in',
            vsize: '8.9in',
            parindent: '20pt',
            maxdepth: '4pt',
            splitmaxdepth: '\\maxdimen',
            boxmaxdepth: '\\maxdimen',
            delimitershortfall: '5pt',
            nulldelimiterspace: '1.2pt',
            scriptspace: '0.5pt',
            topskip: '10pt',
            splittopskip: '10pt',
            normalbaselineskip: '12pt',
            normallineskip: '1pt',
            normallineskiplimit: '0pt',
            jot: '3pt',
            doublerulesep: '2pt',
            arrayrulewidth: '0.4pt',
            arraycolsep: '5pt',
            fboxsep: '3pt',
            fboxrule: '0.4pt'
        },
        pd = {
            'z@skip': '0pt plust0pt minus0pt',
            hideskip: '-1000pt plust 1fill',
            '@flushglue': '0pt plust 1fill',
            parskip: '0pt plus 1pt',
            abovedisplayskip: '12pt plus 3pt minus 9pt',
            abovedisplayshortskip: '0pt plus 3pt',
            belowdisplayskip: '12pt plus 3pt minus 9pt',
            belowdisplayshortskip: '7pt plus 3pt minus 4pt',
            parfillskip: '0pt plus 1fil',
            thinmuskip: '3mu',
            medmuskip: '4mu plus 2mu minus 4mu',
            thickmuskip: '5mu plus 5mu',
            smallskipamount: '3pt plus1pt minus1pt',
            medskipamount: '6pt plus2pt minus2pt',
            bigskipamount: '12pt plus4pt minus4pt'
        },
        qd = {
            pretolerance: 100,
            tolerance: 200,
            hbadness: 1000,
            vbadness: 1000,
            linepenalty: 10,
            hyphenpenalty: 50,
            exhyphenpenalty: 50,
            binoppenalty: 700,
            relpenalty: 500,
            clubpenalty: 150,
            widowpenalty: 150,
            displaywidowpenalty: 50,
            brokenpenalty: 100,
            predisplaypenalty: 10000,
            doublehyphendemerits: 10000,
            finalhyphendemerits: 5000,
            adjdemerits: 10000,
            tracinglostchars: 1,
            uchyph: 1,
            delimiterfactor: 901,
            defaulthyphenchar: '\\-',
            defaultskewchar: -1,
            newlinechar: -1,
            showboxbreadth: 5,
            showboxdepth: 3,
            errorcontextlines: 5,
            interdisplaylinepenalty: 100,
            interfootnotelinepenalty: 100,
            baselineSkip: 1.2,
            arraystretch: '',
            month: new Date().getMonth() + 1,
            day: new Date().getDate(),
            year: new Date().getFullYear()
        };
    let rd;

    function sd(td) {
        var ud, vd;
        if (rd)
            return rd;
        rd = {
            ...qd
        };
        for (const wd of Object.keys(od))
            rd[wd] = null !== (ud = _Tc(od[wd], td, rd)) && void 0 !== ud ? ud : 0;
        for (const xd of Object.keys(pd))
            rd[xd] = null !== (wd = Sc(pd[xd], td, rd)) && void 0 !== wd ? wd : 0;
        return rd;
    }

    function td() {
        const ud = {
            registers: {},
            smartFence: !1,
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            letterShapeStyle: k.locale.startsWith('fr') ? 'french' : 'tex',
            colorMap: s,
            backgroundColorMap: t,
            getDefinition: _ud,
            getMacro: ud => _vd(ud, T())
        };
        return {
            ...ud,
            registers: sd(ud)
        };
    }

    function _ud(vd, wd = 'math') {
        if (!vd || 0 === vd.length)
            return null;
        let xd = null;
        if (vd.startsWith('\\')) {
            if (xd = z[vd], xd)
                return xd;
            'math' === wd ? xd = x[vd] : C[vd] && (xd = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: C[vd]
            });
        } else if ('math' === wd) {
            if (xd = x[vd], !xd && 1 === vd.length) {
                const yd = J('math', vd.codePointAt(0));
                return yd.startsWith('\\') ? {
                    ..._ud(yd, 'math'),
                    command: yd
                } : null;
            }
        } else
            C[vd] ? xd = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: C[vd]
            } : 'text' === wd && (xd = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: vd.codePointAt(0)
            });
        return !xd || 'symbol' !== xd.definitionType || 'mord' !== xd.type || 102 !== xd.codepoint && 103 !== xd.codepoint && 104 !== xd.codepoint || (xd.isFunction = !0), null != xd ? xd : null;
    }

    function _vd(wd, xd) {
        return wd.startsWith('\\') ? xd[wd.slice(1)] : null;
    }
    class wd extends kc {
        static fromJson(xd, yd) {
            return new wd(xd.body, _xd(xd.tooltip, yd), yd, xd);
        }
        toJson() {
            var xd;
            const yd = null === (xd = this.tooltip.body) || void 0 === xd ? void 0 : xd.filter(xd => 'first' !== xd.type).map(xd => xd.toJson());
            return {
                ...super.toJson(),
                tooltip: yd
            };
        }
        render(xd) {
            const yd = kc.createBox(xd, this.body, {
                style: this.style
            });
            if (!yd)
                return null;
            const zd = Pb(Sb(new Nb(this.tooltip.render(new Db({
                    registers: xd.registers
                }, {
                    fontSize: 5
                }, 'displaystyle')), {
                    classes: 'ML__tooltip-content'
                }))),
                Ad = new Nb([
                    zd,
                    yd
                ], {
                    classes: 'ML__tooltip-container'
                });
            return this.caret && (Ad.caret = this.caret), this.bind(xd, Ad);
        }
        serialize(xd) {
            return `${ this.command }{${ this.bodyToLatex(xd) }}{${ kc.serialize(this.tooltip.body, xd) }}`;
        }
        constructor(xd, yd, zd, Ad) {
            super('tooltip', zd, {
                command: null == Ad ? void 0 : Ad.command,
                mode: 'math',
                serialize: null == Ad ? void 0 : Ad.serialize,
                style: null == Ad ? void 0 : Ad.style,
                displayContainsHighlight: !0
            }), this.body = xd;
            const Bd = td();
            this.tooltip = new kc('root', Bd, {
                style: {}
            }), this.tooltip.body = yd, this.skipBoundary = !0, this.captureSelection = !1;
        }
    }

    function _xd(yd, zd) {
        if (d(yd))
            return yd.map(yd => _xd(yd, zd));
        yd = {
            ...yd
        };
        for (const Ad of hc)
            yd[Ad] && (yd[Ad] = _xd(yd[Ad], zd));
        yd.array && (yd.array = _xd(yd.array, zd));
        const Bd = yd.type;
        let Cd;
        'accent' === Bd && (Cd = nc.fromJson(yd, zd)), 'array' === Bd && (Cd = Vc.fromJson(yd, zd)), 'box' === Bd && (Cd = Uc.fromJson(yd, zd)), 'composition' === Bd && (Cd = Zc.fromJson(yd, zd)), 'chem' === Bd && (Cd = $c.fromJson(yd, zd)), 'choice' === Bd && (Cd = _yd.fromJson(yd, zd)), 'delim' === Bd && (Cd = cd.fromJson(yd, zd)), 'enclose' === Bd && (Cd = ed.fromJson(yd, zd)), 'error' === Bd && (Cd = Lc.fromJson(yd, zd)), 'genfrac' === Bd && (Cd = fd.fromJson(yd, zd)), 'group' === Bd && (Cd = Gc.fromJson(yd, zd)), 'latex' === Bd && (Cd = gd.fromJson(yd, zd)), 'latexgroup' === Bd && (Cd = hd.fromJson(yd, zd)), 'leftright' === Bd && (Cd = Ic.fromJson(yd, zd)), 'line' === Bd && (Cd = id.fromJson(yd, zd)), 'macro' === Bd && (Cd = Mc.fromJson(yd, zd)), 'msubsup' === Bd && (Cd = Jc.fromJson(yd, zd)), 'overlap' === Bd && (Cd = kd.fromJson(yd, zd)), 'overunder' === Bd && (Cd = Fc.fromJson(yd, zd)), 'placeholder' === Bd && (yd.defaultValue && (yd.defaultValue = _xd(yd.defaultValue, zd)), Cd = Kc.fromJson(yd, zd)), 'phantom' === Bd && (Cd = ld.fromJson(yd, zd)), 'rule' === Bd && (Cd = md.fromJson(yd, zd)), 'sizeddelim' === Bd && (Cd = dd.fromJson(yd, zd)), 'spacing' === Bd && (Cd = Hc.fromJson(yd, zd)), 'surd' === Bd && (Cd = nd.fromJson(yd, zd)), 'text' === Bd && (Cd = Nc.fromJson(yd, zd)), 'tooltip' === Bd && (Cd = wd.fromJson(yd, zd)), 'mop' === Bd && (Cd = jd.fromJson(yd, zd)), Cd || (Cd = kc.fromJson(yd, zd));
        for (const Dd of hc)
            yd[Dd] && Cd.setChildren(yd[Dd], Dd);
        return void 0 !== yd.verbatimLatex && (Cd.verbatimLatex = yd.verbatimLatex), yd.subsupPlacement && (Cd.subsupPlacement = yd.subsupPlacement), yd.explicitSubsupPlacement && (Cd.explicitSubsupPlacement = !0), yd.isFunction && (Cd.isFunction = !0), yd.isExtensibleSymbol && (Cd.isExtensibleSymbol = !0), yd.skipBoundary && (Cd.skipBoundary = !0), yd.captureSelection && (Cd.captureSelection = !0), Cd;
    }
    class _yd extends kc {
        static fromJson(zd, Ad) {
            return new _yd([
                _xd(zd.choices[0], Ad),
                _xd(zd.choices[1], Ad),
                _xd(zd.choices[2], Ad),
                _xd(zd.choices[3], Ad)
            ], Ad);
        }
        toJson() {
            const zd = [];
            for (const Ad of this.choices)
                zd.push(Ad.filter(zd => 'first' !== zd.type).map(zd => zd.toJson()));
            return {
                ...super.toJson(),
                choices: zd
            };
        }
        render(zd) {
            const Ad = kc.createBox(zd, this.choices[Math.floor(zd.mathstyle.id / 2)]);
            return Ad ? (this.caret && (Ad.caret = this.caret), this.bind(zd, Ad)) : null;
        }
        serialize(zd) {
            return `\\mathchoice{${ kc.serialize(this.choices[0], zd) }}{${ kc.serialize(this.choices[1], zd) }}{${ kc.serialize(this.choices[2], zd) }}{${ kc.serialize(this.choices[3], zd) }}`;
        }
        constructor(zd, Ad) {
            super('choice', Ad), this.choices = zd, this.skipBoundary = !0;
        }
    }
    R('mathtip', '{:math}{:math}', {
        createAtom: (qc, rc, c, d) => new wd(rc[0], rc[1], d, {
            command: qc,
            content: 'math',
            style: c
        })
    }), R('texttip', '{:math}{:text}', {
        createAtom: (qc, rc, c, d) => new wd(rc[0], rc[1], d, {
            command: qc,
            content: 'text',
            style: c
        })
    }), R('error', '{:math}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            mode: 'math',
            command: '\\error',
            customClass: 'ML__error',
            style: c,
            serialize: (qc, rc) => `\\error{${ qc.bodyToLatex(rc) }}`
        })
    }), R('ensuremath', '{:math}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            mode: 'math',
            latexOpen: '\\ensuremath{',
            latexClose: '}',
            style: c
        })
    }), R('color', '{:string}', {
        applyStyle: (qc, rc, c) => {
            var zd, Ad;
            const Bd = rc[0];
            return {
                verbatimColor: rc[0],
                color: null !== (Ad = null === (zd = c.colorMap) || void 0 === zd ? void 0 : zd.call(c, Bd)) && void 0 !== Ad ? Ad : Bd
            };
        }
    }), R('textcolor', '{:string}{content:auto*}', {
        applyStyle: (qc, rc, c) => {
            var zd, Ad;
            const Bd = rc[0];
            return {
                verbatimColor: Bd,
                color: null !== (Ad = null === (zd = c.colorMap) || void 0 === zd ? void 0 : zd.call(c, Bd)) && void 0 !== Ad ? Ad : Bd
            };
        }
    }), R('boxed', '{content:math}', {
        createAtom: (qc, rc, c, d) => new Uc(qc, rc[0], d, {
            framecolor: 'black',
            style: c
        })
    }), R('colorbox', '{:string}{content:auto*}', {
        applyMode: 'text',
        applyStyle: (qc, rc, c) => {
            var zd, Ad;
            const Bd = rc[0];
            return {
                verbatimBackgroundColor: rc[0],
                backgroundColor: null !== (Ad = null === (zd = c.backgroundColorMap) || void 0 === zd ? void 0 : zd.call(c, Bd)) && void 0 !== Ad ? Ad : Bd
            };
        }
    }), R('fcolorbox', '{frame-color:string}{background-color:string}{content:auto}', {
        applyMode: 'text',
        createAtom: (qc, rc, c, d) => {
            var zd, Ad, Bd, Cd;
            const Dd = rc[0],
                Ed = rc[1];
            return new Uc(qc, rc[2], d, {
                verbatimFramecolor: Dd,
                framecolor: null !== (Ad = null === (zd = d.colorMap) || void 0 === zd ? void 0 : zd.call(d, Dd)) && void 0 !== Ad ? Ad : Dd,
                verbatimBackgroundcolor: rc[1],
                backgroundcolor: null !== (Cd = null === (Bd = d.backgroundColorMap) || void 0 === Bd ? void 0 : Bd.call(d, Ed)) && void 0 !== Cd ? Cd : Ed,
                style: c,
                serialize: (qc, rc) => {
                    var Fd, Gd;
                    return `${ qc.command }{${ null !== (Fd = qc.verbatimFramecolor) && void 0 !== Fd ? Fd : qc.framecolor }{${ null !== (Gd = qc.verbatimBackgroundcolor) && void 0 !== Gd ? Gd : qc.backgroundcolor }}{${ qc.bodyToLatex(rc) }}`;
                }
            });
        }
    }), R('bbox', '[:bbox]{body:auto}', {
        createAtom: (qc, rc, c, d) => {
            if (rc[0]) {
                const zd = rc[0];
                return new Uc(qc, rc[1], d, {
                    padding: zd.padding,
                    border: zd.border,
                    backgroundcolor: zd.backgroundcolor,
                    style: c,
                    serialize: (rc, c) => {
                        var Ad;
                        let Bd = qc;
                        if (Number.isFinite(rc.padding) || void 0 !== rc.border || void 0 !== rc.backgroundcolor) {
                            const Cd = [];
                            rc.padding && Cd.push(rc.padding), rc.border && Cd.push(`border: ${ rc.border }`), (rc.verbatimBackgroundcolor || rc.backgroundcolor) && Cd.push(null !== (Ad = rc.verbatimBackgroundcolor) && void 0 !== Ad ? Ad : rc.backgroundcolor), Bd += `[${ Cd.join(',') }]`;
                        }
                        return Bd + `{${ rc.bodyToLatex(c) }}`;
                    }
                });
            }
            return new Uc(qc, rc[1], d, {
                style: c
            });
        }
    }), R([
        'displaystyle',
        'textstyle',
        'scriptstyle',
        'scriptscriptstyle'
    ], '{:rest}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            latexOpen: `{${ qc } `,
            latexClose: '}',
            style: c,
            mathstyleName: qc.slice(1)
        })
    }), R([
        'tiny',
        'scriptsize',
        'footnotesize',
        'small',
        'normalsize',
        'large',
        'Large',
        'LARGE',
        'huge',
        'Huge'
    ], '', {
        applyStyle: (qc, rc) => ({
            fontSize: {
                '\\tiny': 1,
                '\\scriptsize': 2,
                '\\footnotesize': 3,
                '\\small': 4,
                '\\normalsize': 5,
                '\\large': 6,
                '\\Large': 7,
                '\\LARGE': 8,
                '\\huge': 9,
                '\\Huge': 10
            } [qc]
        })
    }), R('fontseries', '{:string}', {
        ifMode: 'text',
        applyStyle: (qc, rc) => ({
            fontSeries: rc[0]
        })
    }), R('fontshape', '{:string}', {
        ifMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: rc[0]
        })
    }), R('fontfamily', '{:string}', {
        ifMode: 'text',
        applyStyle: (qc, rc) => ({
            fontFamily: rc[0]
        })
    }), R('selectfont', '', {
        ifMode: 'text',
        applyStyle: (qc, rc) => ({})
    }), R('bf', '', {
        applyStyle: (qc, rc) => ({
            fontSeries: 'b',
            fontShape: 'n',
            fontFamily: 'cmr'
        })
    }), R([
        'boldsymbol',
        'bm'
    ], '{:math*}', {
        applyMode: 'math',
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            latexOpen: `${ qc }{`,
            latexClose: '}',
            style: c,
            customClass: 'ML__boldsymbol'
        })
    }), R('bold', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variantStyle: 'bold'
        })
    }), R('bfseries', '', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontSeries: 'b'
        })
    }), R('mdseries', '', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontSeries: 'm'
        })
    }), R('upshape', '', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'n'
        })
    }), R('slshape', '', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'sl'
        })
    }), R('scshape', '', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'sc'
        })
    }), R('textbf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontSeries: 'b'
        })
    }), R('textmd', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontSeries: 'm'
        })
    }), R('textup', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'n'
        })
    }), R('textnormal', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'n',
            fontSeries: 'm'
        })
    }), R('textsl', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'sl'
        })
    }), R('textit', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'it'
        })
    }), R('textsc', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontShape: 'sc'
        })
    }), R('textrm', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontFamily: 'roman'
        })
    }), R('textsf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontFamily: 'sans-serif'
        })
    }), R('texttt', '{:text*}', {
        applyMode: 'text',
        applyStyle: (qc, rc) => ({
            fontFamily: 'monospace'
        })
    }), R('mathbf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'normal',
            variantStyle: 'bold'
        })
    }), R('mathit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'main',
            variantStyle: 'italic'
        })
    }), R('mathnormal', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'normal',
            variantStyle: 'italic'
        })
    }), R('mathbfit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'main',
            variantStyle: 'bolditalic'
        })
    }), R('mathrm', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'normal',
            variantStyle: 'up'
        })
    }), R('mathsf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'sans-serif',
            variantStyle: 'up'
        })
    }), R('mathtt', '{:math*}', {
        applyMode: 'math',
        applyStyle: (qc, rc) => ({
            variant: 'monospace',
            variantStyle: 'up'
        })
    }), R('it', '', {
        applyStyle: (qc, rc) => ({
            fontSeries: 'm',
            fontShape: 'it',
            fontFamily: 'cmr',
            variantStyle: 'italic'
        })
    }), R('rmfamily', '', {
        applyStyle: (qc, rc) => ({
            fontFamily: 'roman'
        })
    }), R('sffamily', '', {
        applyStyle: (qc, rc) => ({
            fontFamily: 'sans-serif'
        })
    }), R('ttfamily', '', {
        applyStyle: (qc, rc) => ({
            fontFamily: 'monospace'
        })
    }), R([
        'Bbb',
        'mathbb'
    ], '{:math*}', {
        applyStyle: (qc, rc) => ({
            variant: 'double-struck',
            variantStyle: 'up'
        })
    }), R([
        'frak',
        'mathfrak'
    ], '{:math*}', {
        applyStyle: (qc, rc) => ({
            variant: 'fraktur',
            variantStyle: 'up'
        })
    }), R('mathcal', '{:math*}', {
        applyStyle: (qc, rc) => ({
            variant: 'calligraphic',
            variantStyle: 'up'
        })
    }), R('mathscr', '{:math*}', {
        applyStyle: (qc, rc) => ({
            variant: 'script',
            variantStyle: 'up'
        })
    }), R('mbox', '{:text}', {
        ifMode: 'math',
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            changeMode: !0,
            style: c,
            mode: 'text',
            command: qc,
            serialize: (qc, rc) => `\\mbox{${ qc.bodyToLatex({
                ...rc,
                skipModeCommand: !0
            }) }}`
        })
    }), R('text', '{:text}', {
        ifMode: 'math',
        applyMode: 'text'
    }), R('class', '{name:string}{content:auto*}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[1], d, {
            customClass: rc[0],
            style: c
        })
    }), R('cssId', '{id:string}{content:auto}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[1], d, {
            cssId: rc[0],
            style: c
        })
    }), R('htmlData', '{data:string}{content:auto}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[1], d, {
            htmlData: rc[0],
            style: c
        })
    }), R('htmlStyle', '{data:string}{content:auto}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[1], d, {
            htmlStyle: rc[0],
            style: c
        })
    }), R('em', '{:auto*}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            latexOpen: '\\em',
            latexClose: '',
            customClass: 'ML__emph',
            style: c
        })
    }), R('emph', '{:auto}', {
        createAtom: (qc, rc, c, d) => new Gc(rc[0], d, {
            latexOpen: '\\emph{',
            latexClose: '}',
            customClass: 'ML__emph',
            style: c
        })
    });
    const zd = {
        '\\bigl': {
            mclass: 'mopen',
            size: 1
        },
        '\\Bigl': {
            mclass: 'mopen',
            size: 2
        },
        '\\biggl': {
            mclass: 'mopen',
            size: 3
        },
        '\\Biggl': {
            mclass: 'mopen',
            size: 4
        },
        '\\bigr': {
            mclass: 'mclose',
            size: 1
        },
        '\\Bigr': {
            mclass: 'mclose',
            size: 2
        },
        '\\biggr': {
            mclass: 'mclose',
            size: 3
        },
        '\\Biggr': {
            mclass: 'mclose',
            size: 4
        },
        '\\bigm': {
            mclass: 'mrel',
            size: 1
        },
        '\\Bigm': {
            mclass: 'mrel',
            size: 2
        },
        '\\biggm': {
            mclass: 'mrel',
            size: 3
        },
        '\\Biggm': {
            mclass: 'mrel',
            size: 4
        },
        '\\big': {
            mclass: 'mord',
            size: 1
        },
        '\\Big': {
            mclass: 'mord',
            size: 2
        },
        '\\bigg': {
            mclass: 'mord',
            size: 3
        },
        '\\Bigg': {
            mclass: 'mord',
            size: 4
        }
    };
    R([
        'bigl',
        'Bigl',
        'biggl',
        'Biggl',
        'bigr',
        'Bigr',
        'biggr',
        'Biggr',
        'bigm',
        'Bigm',
        'biggm',
        'Biggm',
        'big',
        'Big',
        'bigg',
        'Bigg'
    ], '{:delim}', {
        createAtom: (qc, rc, c, d) => new dd(qc, rc[0], d, {
            size: zd[qc].size,
            delimClass: zd[qc].mclass,
            style: c
        })
    }), R([
        'hspace',
        'hspace*'
    ], '{width:glue}', {
        createAtom: (qc, rc, c, d) => {
            var Ad;
            return new Hc(qc, c, d, null !== (Ad = rc[0]) && void 0 !== Ad ? Ad : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), R([
        'mkern',
        'kern'
    ], '{width:glue}', {
        createAtom: (qc, rc, c, d) => {
            var Ad;
            return new Hc(qc, c, d, null !== (Ad = rc[0]) && void 0 !== Ad ? Ad : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), R('mspace', '{width:glue}', {
        createAtom: (qc, rc, c, d) => {
            var Ad;
            return new Hc(qc, c, d, null !== (Ad = rc[0]) && void 0 !== Ad ? Ad : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), R('mathop', '{:auto}', {
        createAtom: (qc, rc, c, d) => new jd(qc, rc[0], d, {
            type: 'mop',
            captureSelection: !0,
            limits: 'over-under',
            isFunction: !0,
            hasArgument: !0,
            style: c
        })
    }), R('mathchoice', '{:math}{:math}{:math}{:math}', {
        createAtom: (qc, rc, c, d) => new _yd(rc, d)
    }), R([
        'mathbin',
        'mathrel',
        'mathopen',
        'mathclose',
        'mathpunct',
        'mathord',
        'mathinner'
    ], '{:auto}', {
        createAtom: (qc, rc, c, d) => new jd(qc, rc[0], d, {
            type: {
                '\\mathbin': 'mbin',
                '\\mathrel': 'mrel',
                '\\mathopen': 'mopen',
                '\\mathclose': 'mclose',
                '\\mathpunct': 'mpunct',
                '\\mathord': 'mord',
                '\\mathinner': 'minner'
            } [qc],
            captureSelection: !0,
            hasArgument: !0,
            style: c
        })
    }), R([
        'operatorname',
        'operatorname*'
    ], '{operator:math}', {
        createAtom: (qc, rc, c, d) => {
            const Ad = new jd(qc, rc[0], d, {
                isFunction: !0,
                hasArgument: !0,
                limits: '\\operatorname' === qc ? 'adjacent' : 'over-under',
                style: c
            });
            return Ad.captureSelection = !0, Ad.body && Ad.body.forEach(qc => {
                var Bd;
                'first' !== qc.type && (qc.type = 'mord', qc.value = null !== (Bd = {
                    '\u2217': '*',
                    '\u2212': '-'
                } [qc.value]) && void 0 !== Bd ? Bd : qc.value, qc.isFunction = !1, qc.style.variant || qc.style.variantStyle || (qc.style.variant = 'main', qc.style.variantStyle = 'up'));
            }), Ad;
        }
    });
    class Ad extends kc {
        serialize(Bd) {
            return '\\unicode"' + ('000000' + this.codepoint.toString(16)).toUpperCase().slice(-6);
        }
        constructor(Bd, Cd, Dd) {
            let Ed = Number.parseInt(Bd);
            Number.isFinite(Ed) || (Ed = 10067), super('mord', Dd, {
                value: String.fromCodePoint(Ed),
                style: Cd
            }), this.codepoint = Ed;
        }
    }

    function Bd(Cd) {
        if (1 === Cd.length) {
            const Dd = Cd[0];
            if ('mbin' === Dd.type)
                return 'mbin';
            if ('mrel' === Dd.type)
                return 'mrel';
        }
        return 'mord';
    }
    R('unicode', '{charcode:number}', {
        createAtom: (qc, rc, c, d) => new Ad(rc[0], c, d)
    }), R('rule', '[raise:dimen]{width:dimen}{thickness:dimen}', {
        createAtom: (qc, rc, c, d) => new md(qc, d, {
            shift: rc[0],
            width: rc[1],
            height: rc[2],
            style: c
        })
    }), R('overline', '{:auto}', {
        createAtom: (qc, rc, c, d) => new id(qc, rc[0], d, {
            position: 'overline',
            style: c
        })
    }), R('underline', '{:auto}', {
        createAtom: (qc, rc, c, d) => new id(qc, rc[0], d, {
            position: 'underline',
            style: c
        })
    }), R('overset', '{above:auto}{base:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            above: rc[0],
            body: rc[1],
            skipBoundary: !1,
            style: c,
            boxType: Bd(rc[1]),
            serialize: (qc, rc) => `${ qc.command }{${ qc.aboveToLatex(rc) }}{${ qc.bodyToLatex(rc) }}`
        })
    }), R('underset', '{below:auto}{base:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            below: rc[0],
            body: rc[1],
            skipBoundary: !1,
            style: c,
            boxType: Bd(rc[1]),
            serialize: (rc, c) => `${ qc }{${ rc.belowToLatex(c) }}{${ rc.bodyToLatex(c) }}`
        })
    }), R('overunderset', '{above:auto}{below:auto}{base:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            above: rc[0],
            below: rc[1],
            body: rc[2],
            skipBoundary: !1,
            style: c,
            boxType: Bd(rc[2]),
            serialize: (qc, rc) => `${ qc.command }{${ qc.aboveToLatex(rc) }}{${ qc.bodyToLatex(rc) }}`
        })
    }), R([
        'stackrel',
        'stackbin'
    ], '[below:auto]{above:auto}{base:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            body: rc[2],
            above: rc[1],
            below: rc[0],
            skipBoundary: !1,
            style: c,
            boxType: '\\stackrel' === qc ? 'mrel' : 'mbin',
            serialize: (qc, rc) => `${ qc.command }{${ qc.aboveToLatex(rc) }}{${ qc.bodyToLatex(rc) }}`
        })
    }), R('smash', '[:string]{:auto}', {
        createAtom: (qc, rc, c, d) => rc[0] ? new ld(qc, rc[1], d, {
            smashHeight: rc[0].includes('t'),
            smashDepth: rc[0].includes('b'),
            style: c
        }) : new ld(qc, rc[1], d, {
            smashHeight: !0,
            smashDepth: !0,
            style: c
        })
    }), R(['vphantom'], '{:auto*}', {
        createAtom: (qc, rc, c, d) => new ld(qc, rc[1], d, {
            isInvisible: !0,
            smashWidth: !0,
            style: c
        })
    }), R(['hphantom'], '{:auto*}', {
        createAtom: (qc, rc, c, d) => new ld(qc, rc[1], d, {
            isInvisible: !0,
            smashHeight: !0,
            smashDepth: !0,
            style: c
        })
    }), R(['phantom'], '{:auto*}', {
        createAtom: (qc, rc, c, d) => new ld(qc, rc[1], d, {
            isInvisible: !0,
            style: c
        })
    }), R('not', '{:math}', {
        createAtom: (qc, rc, c, d) => {
            if (rc.length < 1 || null === rc[0])
                return new kc('mrel', d, {
                    command: qc,
                    style: c,
                    value: '\uE020'
                });
            const Cd = rc[0];
            return new Gc([
                new kd(qc, '\uE020', d, {
                    align: 'right',
                    style: c,
                    boxType: 'mrel'
                }),
                ...Cd
            ], d, {
                boxType: 'mrel',
                captureSelection: !0,
                command: '\\not',
                serialize: (qc, rc) => {
                    const Dd = kc.serialize(Cd, rc);
                    return 1 !== Dd.length || /[a-zA-Z]/.test(Dd) ? `\\not{${ Dd }}` : '\\not' + Dd;
                }
            });
        }
    }), R([
        'ne',
        'neq'
    ], '', {
        createAtom: (qc, rc, c, d) => new Gc([
            new kd(qc, '\uE020', d, {
                align: 'right',
                style: c,
                boxType: 'mrel'
            }),
            new kc('mrel', d, {
                style: c,
                value: '='
            })
        ], d, {
            boxType: 'mrel',
            captureSelection: !0,
            serialize: () => qc,
            command: qc
        })
    }), R('rlap', '{:auto}', {
        createAtom: (qc, rc, c, d) => new kd(qc, rc[0], d, {
            align: 'right',
            style: c
        })
    }), R('llap', '{:auto}', {
        createAtom: (qc, rc, c, d) => new kd(qc, rc[0], d, {
            style: c
        })
    }), R('mathllap', '{:auto}', {
        createAtom: (qc, rc, c, d) => new kd(qc, rc[0], d, {
            style: c
        })
    }), R('mathrlap', '{:auto}', {
        createAtom: (qc, rc, c, d) => new kd(qc, rc[0], d, {
            align: 'right',
            style: c
        })
    });
    const Cd = {
        acute: 714,
        grave: 715,
        dot: 729,
        ddot: 168,
        mathring: 730,
        tilde: 126,
        bar: 713,
        breve: 728,
        check: 711,
        hat: 94,
        vec: 8407
    };

    function Dd(Ed) {
        for (const Fd of Ed)
            for (const Gd of Fd)
                if (Gd.length > 0)
                    return !1;
        return !0;
    }
    R(Object.keys(Cd), '{body:auto}', {
        createAtom: (qc, rc, c, d) => new nc(qc, rc[0], d, {
            accentChar: Cd[qc.slice(1)],
            style: c
        })
    }), R([
        'widehat',
        'widecheck',
        'widetilde'
    ], '{body:auto}', {
        createAtom: (qc, rc, c, d) => {
            const Ed = O(rc[0]);
            return new nc(qc, rc[0], d, {
                style: c,
                svgAccent: qc.slice(1) + (Ed.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][Ed.length])
            });
        }
    }), R([
        'overarc',
        'overparen',
        'wideparen'
    ], '{body:auto}', {
        createAtom: (qc, rc, c, d) => new nc(qc, rc[0], d, {
            style: c,
            svgAccent: 'overarc'
        })
    }), R([
        'underarc',
        'underparen'
    ], '{body:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            body: rc[0],
            style: c,
            svgBelow: 'underarc'
        })
    }), R('utilde', '{body:auto}', {
        createAtom: (qc, rc, c, d) => {
            const Ed = O(rc[0]),
                Fd = 'widetilde' + (Ed.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][Ed.length]);
            return new Fc(qc, d, {
                body: rc[0],
                svgBelow: Fd,
                style: c,
                boxType: Bd(rc[0])
            });
        }
    }), R('^', '{:string}', {
        createAtom: (qc, rc, c, d) => {
            var Ed;
            return new kc('mord', d, {
                command: qc,
                isFunction: !1,
                limits: 'adjacent',
                style: c,
                value: rc[0] && null !== (Ed = {
                    a: 'â',
                    e: 'ê',
                    i: 'î',
                    o: 'ô',
                    u: 'û',
                    A: 'Â',
                    E: 'Ê',
                    I: 'Î',
                    O: 'Ô',
                    U: 'Û'
                } [rc[0]]) && void 0 !== Ed ? Ed : '^'
            });
        }
    }), R('`', '{:string}', {
        createAtom: (qc, rc, c, d) => {
            var Ed;
            return new kc('mord', d, {
                command: qc,
                isFunction: !1,
                limits: 'adjacent',
                style: c,
                value: rc[0] && null !== (Ed = {
                    a: 'à',
                    e: 'è',
                    i: 'ì',
                    o: 'ò',
                    u: 'ù',
                    A: 'À',
                    E: 'È',
                    I: 'Ì',
                    O: 'Ò',
                    U: 'Ù'
                } [rc[0]]) && void 0 !== Ed ? Ed : '`'
            });
        }
    }), R('\'', '{:string}', {
        createAtom: (qc, rc, c, d) => {
            var Ed;
            return new kc('mord', d, {
                command: qc,
                isFunction: !1,
                limits: 'adjacent',
                style: c,
                value: rc[0] && null !== (Ed = {
                    a: 'á',
                    e: 'é',
                    i: 'í',
                    o: 'ó',
                    u: 'ú',
                    A: 'Á',
                    E: 'É',
                    I: 'Í',
                    O: 'Ó',
                    U: 'Ú'
                } [rc[0]]) && void 0 !== Ed ? Ed : '^'
            });
        }
    }), R('~', '{:string}', {
        createAtom: (qc, rc, c, d) => {
            var Ed;
            return new kc('mord', d, {
                command: qc,
                isFunction: !1,
                limits: 'adjacent',
                style: c,
                value: rc[0] && null !== (Ed = {
                    n: 'ñ',
                    N: 'Ñ',
                    a: 'ã',
                    o: 'õ',
                    A: 'Ã',
                    O: 'Õ'
                } [rc[0]]) && void 0 !== Ed ? Ed : '\xB4'
            });
        }
    }), R('c', '{:string}', {
        createAtom: (qc, rc, c, d) => {
            var Ed;
            return new kc('mord', d, {
                command: qc,
                isFunction: !1,
                limits: 'adjacent',
                style: c,
                value: rc[0] && null !== (Ed = {
                    c: 'ç',
                    C: 'Ç'
                } [rc[0]]) && void 0 !== Ed ? Ed : ''
            });
        }
    }), R('enclose', '{notation:string}[style:string]{body:auto}', {
        createAtom: (qc, rc, c, d) => {
            var Ed;
            const Fd = {
                strokeColor: 'currentColor',
                strokeWidth: '',
                strokeStyle: 'solid',
                backgroundcolor: 'transparent',
                padding: 'auto',
                shadow: 'auto',
                svgStrokeStyle: void 0,
                borderStyle: void 0,
                style: c
            };
            if (rc[1]) {
                const Gd = rc[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
                for (const Hd of Gd) {
                    const Id = Hd.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                    if (Id)
                        Fd.strokeWidth = Id[1], Fd.strokeStyle = Id[2], Fd.strokeColor = Id[3];
                    else {
                        const Jd = Hd.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                        Jd && ('mathbackground' === Jd[1] ? Fd.backgroundcolor = Jd[2] : 'mathcolor' === Jd[1] ? Fd.strokeColor = Jd[2] : 'padding' === Jd[1] ? Fd.padding = Jd[2] : 'shadow' === Jd[1] && (Fd.shadow = Jd[2]));
                    }
                }
                'dashed' === Fd.strokeStyle ? Fd.svgStrokeStyle = '5,5' : 'dotted' === Fd.strokeStyle && (Fd.svgStrokeStyle = '1,5');
            }
            Fd.borderStyle = `${ Fd.strokeWidth } ${ Fd.strokeStyle } ${ Fd.strokeColor }`;
            const Gd = {};
            return (null !== (Ed = rc[0]) && void 0 !== Ed ? Ed : '').split(/[, ]/).filter(qc => qc.length > 0).forEach(qc => {
                Gd[qc.toLowerCase()] = !0;
            }), new ed(qc, rc[2], Gd, d, Fd);
        }
    }), R('cancel', '{body:auto}', {
        createAtom: (qc, rc, c, d) => new ed(qc, rc[0], {
            updiagonalstrike: !0
        }, d, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: c
        })
    }), R('bcancel', '{body:auto}', {
        createAtom: (qc, rc, c, d) => new ed(qc, rc[0], {
            downdiagonalstrike: !0
        }, d, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: c
        })
    }), R('xcancel', '{body:auto}', {
        createAtom: (qc, rc, c, d) => new ed(qc, rc[0], {
            updiagonalstrike: !0,
            downdiagonalstrike: !0
        }, d, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: c
        })
    }), P('math', '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        mathstyleName: 'textstyle'
    }))), P('displaymath', '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        mathstyleName: 'textstyle'
    }))), Q('array', '{columns:colspec}', (qc, rc, c, d, e) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        columns: e[0],
        mathstyleName: 'textstyle'
    }))), Q([
        'equation',
        'equation*',
        'subequations'
    ], '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        columns: [{
            align: 'c'
        }]
    }))), Q('multline', '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        columns: [{
            align: 'm'
        }]
    }))), Q([
        'align',
        'align*',
        'aligned',
        'eqnarray'
    ], '', (qc, rc, c, d) => {
        let Ed = 0;
        Dd(c) && (c = [
            [
                [
                    new kc('first', qc),
                    new Kc(qc)
                ],
                [
                    new kc('first', qc),
                    new Kc(qc)
                ]
            ]
        ]);
        for (const Fd of c)
            Ed = Math.max(Ed, Fd.length);
        const Gd = [{
                gap: 0
            },
            {
                align: 'r'
            },
            {
                gap: 0.25
            },
            {
                align: 'l'
            }
        ];
        let Hd = 2;
        for (; Hd < Ed;)
            Gd.push({
                gap: 1
            }), Gd.push({
                align: 'r'
            }), Gd.push({
                gap: 0.25
            }), Gd.push({
                align: 'l'
            }), Hd += 2;
        return Gd.push({
            gap: 0
        }), new Vc(Fd, rc, c, d, {
            arraycolsep: 0,
            columns: Gd,
            colSeparationType: 'align',
            jot: 0.3,
            minColumns: 2
        });
    }), Q('split', '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ],
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        columns: [{
                align: 'r'
            },
            {
                align: 'l'
            }
        ],
        minColumns: 2
    }))), Q([
        'gather',
        'gathered'
    ], '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        columns: [{
                gap: 0.25
            },
            {
                align: 'c'
            },
            {
                gap: 0
            }
        ],
        colSeparationType: 'gather'
    }))), Q([
        'matrix',
        'pmatrix',
        'bmatrix',
        'Bmatrix',
        'vmatrix',
        'Vmatrix',
        'matrix*',
        'pmatrix*',
        'bmatrix*',
        'Bmatrix*',
        'vmatrix*',
        'Vmatrix*'
    ], '[columns:colspec]', (qc, rc, c, d, e) => {
        var Ed;
        Dd(c) && (c = [
            [
                [
                    new kc('first', qc),
                    new Kc(qc)
                ]
            ]
        ]);
        let Fd = '.',
            Gd = '.';
        switch (rc) {
            case 'pmatrix':
            case 'pmatrix*':
                Fd = '(', Gd = ')';
                break;
            case 'bmatrix':
            case 'bmatrix*':
                Fd = '[', Gd = ']';
                break;
            case 'Bmatrix':
            case 'Bmatrix*':
                Fd = '\\lbrace', Gd = '\\rbrace';
                break;
            case 'vmatrix':
            case 'vmatrix*':
                Fd = '\\vert', Gd = '\\vert';
                break;
            case 'Vmatrix':
            case 'Vmatrix*':
                Fd = '\\Vert', Gd = '\\Vert';
                break;
            case 'matrix':
            case 'matrix*':
                Fd = '.', Gd = '.';
        }
        return new Vc(qc, rc, c, d, {
            mathstyleName: 'textstyle',
            leftDelim: Fd,
            rightDelim: Gd,
            columns: null !== (Ed = e[0]) && void 0 !== Ed ? Ed : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ]
        });
    }), Q([
        'smallmatrix',
        'smallmatrix*'
    ], '[columns:colspec]', (qc, rc, c, d, e) => {
        var Ed;
        return Dd(c) && (c = [
            [
                [
                    new kc('first', qc),
                    new Kc(qc)
                ]
            ]
        ]), new Vc(qc, rc, c, d, {
            mathstyleName: 'scriptstyle',
            columns: null !== (Ed = e[0]) && void 0 !== Ed ? Ed : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ],
            colSeparationType: 'small',
            arraystretch: 0.5
        });
    }), Q([
        'cases',
        'dcases'
    ], '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        mathstyleName: 'dcases' === rc ? 'displaystyle' : 'textstyle',
        arraystretch: 1.2,
        leftDelim: '\\lbrace',
        rightDelim: '.',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), Q('rcases', '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        arraystretch: 1.2,
        leftDelim: '.',
        rightDelim: '\\rbrace',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), P('center', '', (qc, rc, c, d) => (Dd(c) && (c = [
        [
            [
                new kc('first', qc),
                new Kc(qc)
            ]
        ]
    ]), new Vc(qc, rc, c, d, {
        columns: [{
            align: 'c'
        }]
    }))), R([
        'overrightarrow',
        'overleftarrow',
        'Overrightarrow',
        'overleftharpoon',
        'overrightharpoon',
        'overleftrightarrow',
        'overlinesegment',
        'overgroup'
    ], '{:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            body: rc[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: c,
            svgAbove: qc.slice(1)
        })
    }), R('overbrace', '{:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            body: rc[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: c,
            svgAbove: qc.slice(1)
        })
    }), R([
        'underrightarrow',
        'underleftarrow',
        'underleftrightarrow',
        'underlinesegment',
        'undergroup'
    ], '{:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            body: rc[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: c,
            svgBelow: qc.slice(1)
        })
    }), R(['underbrace'], '{:auto}', {
        createAtom: (qc, rc, c, d) => new Fc(qc, d, {
            body: rc[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: c,
            svgBelow: qc.slice(1)
        })
    }), R([
        'xrightarrow',
        'xleftarrow',
        'xRightarrow',
        'xLeftarrow',
        'xleftharpoonup',
        'xleftharpoondown',
        'xrightharpoonup',
        'xrightharpoondown',
        'xlongequal',
        'xtwoheadleftarrow',
        'xtwoheadrightarrow',
        'xleftrightarrow',
        'xLeftrightarrow',
        'xrightleftharpoons',
        'xleftrightharpoons',
        'xhookleftarrow',
        'xhookrightarrow',
        'xmapsto',
        'xtofrom',
        'xrightleftarrows',
        'xrightequilibrium',
        'xleftequilibrium'
    ], '[:auto]{:auto}', {
        createAtom: (qc, rc, c, d) => {
            var Ed, Fd;
            return new Fc(qc, d, {
                style: c,
                svgBody: qc.slice(1),
                above: 0 === (null === (Ed = rc[1]) || void 0 === Ed ? void 0 : Ed.length) ? void 0 : rc[1],
                below: null !== (Fd = rc[0]) && void 0 !== Fd ? Fd : null,
                skipBoundary: !1,
                supsubPlacement: 'over-under',
                paddedBody: !0,
                paddedLabels: !0,
                boxType: 'mrel',
                serialize: (rc, c) => qc + (rc.hasEmptyBranch('below') ? '' : `[${ rc.belowToLatex(c) }]`) + `{${ rc.aboveToLatex(c) }}${ rc.supsubToLatex(c) }`
            });
        }
    }), R([
        'arccos',
        'arcsin',
        'arctan',
        'arctg',
        'arcctg',
        'arg',
        'ch',
        'cos',
        'cosh',
        'cot',
        'cotg',
        'coth',
        'ctg',
        'cth',
        'csc',
        'cosec',
        'dim',
        'exp',
        'hom',
        'inf',
        'ker',
        'lb',
        'lg',
        'ln',
        'log',
        'Pr',
        'sec',
        'sh',
        'sin',
        'sinh',
        'sup',
        'tan',
        'tanh',
        'tg',
        'th',
        'arcsec',
        'arccsc',
        'arsinh',
        'arcosh',
        'artanh',
        'arcsech',
        'arccsch'
    ], '', {
        isFunction: !0,
        createAtom: (qc, rc, c, d) => new jd(qc, qc.slice(1), d, {
            limits: 'adjacent',
            isFunction: !0,
            variant: 'main',
            variantStyle: 'up',
            style: c
        })
    }), R([
        'liminf',
        'limsup'
    ], '', {
        createAtom: (qc, rc, c, d) => new jd(qc, {
            '\\liminf': 'lim inf',
            '\\limsup': 'lim sup'
        } [qc], d, {
            limits: 'over-under',
            variant: 'main',
            style: c
        })
    }), R([
        'lim',
        'mod'
    ], '', {
        createAtom: (qc, rc, c, d) => new jd(qc, qc.slice(1), d, {
            limits: 'over-under',
            variant: 'main',
            style: c
        })
    }), R([
        'det',
        'max',
        'min'
    ], '', {
        isFunction: !0,
        createAtom: (qc, rc, c, d) => new jd(qc, qc.slice(1), d, {
            limits: 'over-under',
            isFunction: !0,
            variant: 'main',
            style: c
        })
    }), R(['ang'], '{:math}', {
        isFunction: !0,
        createAtom: (qc, rc, c, d) => new Gc([
            ...rc[0],
            new kc('mord', d, {
                value: '\xB0',
                style: c
            })
        ], d, {
            mode: 'math',
            latexOpen: '\\ang{',
            latexClose: '}',
            style: c
        })
    }), R('sqrt', '[index:auto]{radicand:auto}', {
        createAtom: (qc, rc, c, d) => new nd(qc, d, {
            body: rc[1],
            index: rc[0],
            style: c
        })
    }), R([
        'frac',
        'dfrac',
        'tfrac',
        'cfrac',
        'binom',
        'dbinom',
        'tbinom'
    ], '{numerator}{denominator}', {
        createAtom: (qc, rc, c, d) => {
            const Ed = {
                style: c
            };
            switch (qc) {
                case '\\dfrac':
                case '\\frac':
                case '\\tfrac':
                    Ed.hasBarLine = !0;
                    break;
                case '\\atopfrac':
                    Ed.hasBarLine = !1;
                    break;
                case '\\dbinom':
                case '\\binom':
                case '\\tbinom':
                    Ed.hasBarLine = !1, Ed.leftDelim = '(', Ed.rightDelim = ')';
            }
            switch (qc) {
                case '\\dfrac':
                case '\\dbinom':
                    Ed.mathstyleName = 'displaystyle';
                    break;
                case '\\tfrac':
                case '\\tbinom':
                    Ed.mathstyleName = 'textstyle';
                    break;
                case '\\cfrac':
                    Ed.hasBarLine = !0, Ed.continuousFraction = !0;
            }
            return new fd(qc, rc[0], rc[1], d, Ed);
        }
    }), R([
        'brace',
        'brack'
    ], '', {
        infix: !0,
        createAtom: (qc, rc, c, d) => new fd(qc, rc[0], rc[1], d, {
            hasBarLine: !1,
            leftDelim: '\\brace' === qc ? '\\lbrace' : '\\lbrack',
            rightDelim: '\\brace' === qc ? '\\rbrace' : '\\rbrack',
            style: c,
            serialize: (qc, rc) => ec([
                qc.aboveToLatex(rc),
                qc.command,
                qc.belowToLatex(rc)
            ])
        })
    }), R([
        'over',
        'atop',
        'choose'
    ], '', {
        infix: !0,
        createAtom: (qc, rc, c, d) => {
            let Ed, Fd;
            return '\\choose' === qc && (Ed = '(', Fd = ')'), new fd(qc, rc[0], rc[1], d, {
                hasBarLine: '\\over' === qc,
                leftDelim: Ed,
                rightDelim: Fd,
                style: c,
                serialize: (qc, rc) => ec([
                    qc.aboveToLatex(rc),
                    qc.command,
                    qc.belowToLatex(rc)
                ])
            });
        }
    }), R([
        'overwithdelims',
        'atopwithdelims'
    ], '{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}', {
        infix: !0,
        createAtom: (qc, rc, c, d) => new fd(qc, rc[0], rc[1], d, {
            leftDelim: rc[2],
            rightDelim: rc[3],
            hasBarLine: !1,
            style: c,
            serialize: (qc, rc) => `${ qc.aboveToLatex(rc) } ${ qc.command }${ qc.leftDelim }${ qc.rightDelim }${ qc.belowToLatex(rc) }`
        })
    }), R('pdiff', '{numerator}{denominator}', {
        createAtom: (qc, rc, c, d) => new fd(qc, rc[0], rc[1], d, {
            hasBarLine: !0,
            numerPrefix: '\u2202',
            denomPrefix: '\u2202',
            style: c
        })
    }), R([
        'sum',
        'prod',
        'bigcup',
        'bigcap',
        'coprod',
        'bigvee',
        'bigwedge',
        'biguplus',
        'bigotimes',
        'bigoplus',
        'bigodot',
        'bigsqcup',
        'smallint',
        'intop'
    ], '', {
        createAtom: (qc, rc, c, d) => new jd(qc, {
            coprod: '\u2210',
            bigvee: '\u22C1',
            bigwedge: '\u22C0',
            biguplus: '\u2A04',
            bigcap: '\u22C2',
            bigcup: '\u22C3',
            intop: '\u222B',
            prod: '\u220F',
            sum: '\u2211',
            bigotimes: '\u2A02',
            bigoplus: '\u2A01',
            bigodot: '\u2A00',
            bigsqcup: '\u2A06',
            smallint: '\u222B'
        } [qc.slice(1)], d, {
            isExtensibleSymbol: !0,
            limits: 'auto',
            variant: 'main',
            style: c
        })
    });
    const Ed = {
        int: '\u222B',
        iint: '\u222C',
        iiint: '\u222D',
        oint: '\u222E',
        oiint: '\u222F',
        oiiint: '\u2230',
        intclockwise: '\u2231',
        varointclockwise: '\u2232',
        ointctrclockwise: '\u2233',
        intctrclockwise: '\u2A11',
        sqcup: '\u2294',
        sqcap: '\u2293',
        uplus: '\u228E',
        wr: '\u2240',
        amalg: '\u2A3F',
        Cap: '\u22D2',
        Cup: '\u22D3',
        doublecap: '\u22D2',
        doublecup: '\u22D3'
    };

    function Fd(Gd, Hd) {
        return Gd[0] === Hd[0] && Gd[1] === Hd[1] ? 'equal' : 'different';
    }

    function Gd(Hd) {
        let Id = 1 / 0,
            Jd = -1 / 0;
        for (const Kd of Hd.ranges)
            Id = Math.min(Id, Kd[0], Kd[1]), Jd = Math.max(Jd, Kd[0], Kd[1]);
        return [
            Id,
            Jd
        ];
    }

    function Hd(Id, Jd, Kd) {
        return Kd ? function(Ld, Md) {
            if (!Md)
                return '';
            if ('string' == typeof Md)
                return Md;
            if (!Ld || void 0 === Md.after)
                return Md.value;
            let Nd = !1,
                Od = !1,
                Pd = !1,
                Qd = !1,
                Rd = !1,
                Sd = !1,
                Td = !1,
                Ud = !1,
                Vd = !1,
                Wd = !1,
                Xd = !1,
                Yd = !1,
                Zd = !1,
                $d = !1,
                ae = !1,
                be = Ld[0],
                ce = 0;
            for (; be && /msubsup|placeholder/.test(be.type);)
                ce += 1, be = Ld[ce];
            return Nd = !be || 'first' === be.type, be && ($d = 'text' === be.mode, Od = !$d && 'mord' === be.type && E.test(be.value), Pd = !$d && 'mord' === be.type && /\d+$/.test(be.value), Qd = !$d && be.isFunction, Rd = 'genfrac' === be.type, Sd = 'surd' === be.type, Td = 'mbin' === be.type, Ud = 'mrel' === be.type, Vd = 'mop' === be.type, Wd = 'mpunct' === be.type || 'minner' === be.type, Xd = 'array' === be.type, Yd = 'mopen' === be.type, Zd = 'mclose' === be.type || 'leftright' === be.type, ae = 'space' === be.type), Md.after.includes('nothing') && Nd || Md.after.includes('letter') && Od || Md.after.includes('digit') && Pd || Md.after.includes('function') && Qd || Md.after.includes('frac') && Rd || Md.after.includes('surd') && Sd || Md.after.includes('binop') && Td || Md.after.includes('relop') && Ud || Md.after.includes('operator') && Vd || Md.after.includes('punct') && Wd || Md.after.includes('array') && Xd || Md.after.includes('openfence') && Yd || Md.after.includes('closefence') && Zd || Md.after.includes('text') && $d || Md.after.includes('space') && ae ? Md.value : '';
        }(Id, Kd[Jd]) : '';
    }
    R(Object.keys(Ed), '', {
        createAtom: (qc, rc, c, d) => new jd(qc, Ed[qc.slice(1)], d, {
            limits: 'adjacent',
            isExtensibleSymbol: !0,
            style: c,
            variant: {
                '\u22D2': 'ams',
                '\u22D3': 'ams'
            } [Ed[qc.slice(1)]]
        })
    }), R([
        'Re',
        'Im'
    ], '', {
        createAtom: (qc, rc, c, d) => new jd(qc, {
            '\\Re': 'ℜ',
            '\\Im': 'ℑ'
        } [qc], d, {
            limits: 'adjacent',
            style: c,
            isFunction: !0,
            variant: 'fraktur'
        })
    }), R('middle', '{:delim}', {
        createAtom: (qc, rc, c, d) => new cd(qc, rc[0], d, {
            size: 1,
            style: c
        })
    }), H('0123456789/@.?!'), I(65, 90), I(97, 122), H([
        [
            '\\forall',
            8704
        ],
        [
            '\\exists',
            8707
        ],
        [
            '\\nexists',
            8708,
            'mord',
            'ams'
        ],
        [
            '\\mid',
            8739,
            'mrel'
        ],
        [
            '\\top',
            8868
        ],
        [
            '\\bot',
            8869
        ]
    ]), H([
        [
            '\\sharp',
            9839
        ],
        [
            '\\flat',
            9837
        ],
        [
            '\\natural',
            9838
        ],
        [
            '\\#',
            35
        ],
        [
            '\\&',
            38
        ],
        [
            '\\clubsuit',
            9827
        ],
        [
            '\\heartsuit',
            9825
        ],
        [
            '\\spadesuit',
            9824
        ],
        [
            '\\diamondsuit',
            9826
        ],
        [
            '\\parallelogram',
            9649
        ]
    ]), H([
        [
            '\\backslash',
            92
        ],
        [
            '\\nabla',
            8711
        ],
        [
            '\\partial',
            8706
        ],
        [
            '\\ell',
            8467
        ],
        [
            '\\hbar',
            8463
        ],
        [
            '\\Q',
            81,
            'mord',
            'double-struck'
        ],
        [
            '\\C',
            67,
            'mord',
            'double-struck'
        ],
        [
            '\\P',
            80,
            'mord',
            'double-struck'
        ],
        [
            '\\pounds',
            163
        ],
        [
            '\\euro',
            8364
        ]
    ]), H([
        [
            '\\rightarrow',
            8594
        ],
        [
            '\\to',
            8594
        ],
        [
            '\\leftarrow',
            8592
        ],
        [
            '\\gets',
            8592
        ],
        [
            '\\Rightarrow',
            8658
        ],
        [
            '\\Leftarrow',
            8656
        ],
        [
            '\\longrightarrow',
            10230
        ],
        [
            '\\longleftarrow',
            10229
        ],
        [
            '\\Longrightarrow',
            10233
        ],
        [
            '\\implies',
            10233
        ],
        [
            '\\Longleftarrow',
            10232
        ],
        [
            '\\impliedby',
            10232
        ],
        [
            '\\longleftrightarrow',
            10231
        ],
        [
            '\\biconditional',
            10231
        ],
        [
            '\\Longleftrightarrow',
            10234
        ],
        [
            '\\mapsto',
            8614
        ],
        [
            '\\longmapsto',
            10236
        ],
        [
            '\\uparrow',
            8593
        ],
        [
            '\\downarrow',
            8595
        ],
        [
            '\\Uparrow',
            8657
        ],
        [
            '\\Downarrow',
            8659
        ],
        [
            '\\updownarrow',
            8597
        ],
        [
            '\\Updownarrow',
            8661
        ],
        [
            '\\hookrightarrow',
            8618
        ],
        [
            '\\hookleftarrow',
            8617
        ],
        [
            '\\rightharpoonup',
            8640
        ],
        [
            '\\leftharpoonup',
            8636
        ],
        [
            '\\rightharpoondown',
            8641
        ],
        [
            '\\leftharpoondown',
            8637
        ],
        [
            '\\searrow',
            8600
        ],
        [
            '\\nearrow',
            8599
        ],
        [
            '\\swarrow',
            8601
        ],
        [
            '\\nwarrow',
            8598
        ],
        [
            '\\originalof',
            8886
        ],
        [
            '\\laplace',
            8886
        ],
        [
            '\\imageof',
            8887
        ],
        [
            '\\Laplace',
            8887
        ]
    ], 'mrel'), H([
        [
            '\\lbrace',
            123,
            'mopen'
        ],
        [
            '\\rbrace',
            125,
            'mclose'
        ],
        [
            '\\lparen',
            40,
            'mopen'
        ],
        [
            '\\rparen',
            41,
            'mclose'
        ],
        [
            '\\langle',
            10216,
            'mopen'
        ],
        [
            '\\rangle',
            10217,
            'mclose'
        ],
        [
            '\\lfloor',
            8970,
            'mopen'
        ],
        [
            '\\rfloor',
            8971,
            'mclose'
        ],
        [
            '\\lceil',
            8968,
            'mopen'
        ],
        [
            '\\rceil',
            8969,
            'mclose'
        ],
        [
            '\\vert',
            8739
        ],
        [
            '\\lvert',
            8739,
            'mopen'
        ],
        [
            '\\rvert',
            8739,
            'mclose'
        ],
        [
            '\\|',
            8741
        ],
        [
            '\\Vert',
            8741
        ],
        [
            '\\mVert',
            8741
        ],
        [
            '\\lVert',
            8741,
            'mopen'
        ],
        [
            '\\rVert',
            8741,
            'mclose'
        ],
        [
            '\\lbrack',
            91,
            'mopen'
        ],
        [
            '\\rbrack',
            93,
            'mclose'
        ],
        [
            '\\{',
            123,
            'mopen'
        ],
        [
            '\\}',
            125,
            'mclose'
        ],
        [
            '(',
            40,
            'mopen'
        ],
        [
            ')',
            41,
            'mclose'
        ],
        [
            '[',
            91,
            'mopen'
        ],
        [
            ']',
            93,
            'mclose'
        ],
        [
            '\\ulcorner',
            9484,
            'mopen',
            'ams'
        ],
        [
            '\\urcorner',
            9488,
            'mclose',
            'ams'
        ],
        [
            '\\llcorner',
            9492,
            'mopen',
            'ams'
        ],
        [
            '\\lrcorner',
            9496,
            'mclose',
            'ams'
        ],
        [
            '\\lgroup',
            10222,
            'mopen'
        ],
        [
            '\\rgroup',
            10223,
            'mclose'
        ],
        [
            '\\lmoustache',
            9136,
            'mopen'
        ],
        [
            '\\rmoustache',
            9137,
            'mclose'
        ]
    ]), H([
        [
            '\\dashrightarrow',
            8674
        ],
        [
            '\\dashleftarrow',
            8672
        ],
        [
            '\\Rrightarrow',
            8667
        ],
        [
            '\\Lleftarrow',
            8666
        ],
        [
            '\\leftrightarrows',
            8646
        ],
        [
            '\\rightleftarrows',
            8644
        ],
        [
            '\\curvearrowright',
            8631
        ],
        [
            '\\curvearrowleft',
            8630
        ],
        [
            '\\rightrightarrows',
            8649
        ],
        [
            '\\leftleftarrows',
            8647
        ],
        [
            '\\upuparrows',
            8648
        ],
        [
            '\\downdownarrows',
            8650
        ],
        [
            '\\vartriangle',
            9651
        ],
        [
            '\\triangleq',
            8796
        ],
        [
            '\\vartriangleleft',
            8882
        ],
        [
            '\\trianglelefteq',
            8884
        ],
        [
            '\\ntriangleleft',
            8938
        ],
        [
            '\\ntrianglelefteq',
            8940
        ],
        [
            '\\vartriangleright',
            8883
        ],
        [
            '\\trianglerighteq',
            8885
        ],
        [
            '\\ntriangleright',
            8939
        ],
        [
            '\\ntrianglerighteq',
            8941
        ],
        [
            '\\blacktriangleleft',
            9664
        ],
        [
            '\\blacktriangleright',
            9654
        ],
        [
            '\\leftarrowtail',
            8610
        ],
        [
            '\\rightarrowtail',
            8611
        ],
        [
            '\\looparrowright',
            8620
        ],
        [
            '\\looparrowleft',
            8619
        ],
        [
            '\\twoheadleftarrow',
            8606
        ],
        [
            '\\twoheadrightarrow',
            8608
        ],
        [
            '\\rightleftharpoons',
            8652
        ],
        [
            '\\leftrightharpoons',
            8651
        ],
        [
            '\\Rsh',
            8625
        ],
        [
            '\\Lsh',
            8624
        ],
        [
            '\\circlearrowright',
            8635
        ],
        [
            '\\circlearrowleft',
            8634
        ],
        [
            '\\restriction',
            8638
        ],
        [
            '\\upharpoonright',
            8638
        ],
        [
            '\\upharpoonleft',
            8639
        ],
        [
            '\\downharpoonright',
            8642
        ],
        [
            '\\downharpoonleft',
            8643
        ],
        [
            '\\rightsquigarrow',
            8669
        ],
        [
            '\\leadsto',
            8669
        ],
        [
            '\\leftrightsquigarrow',
            8621
        ],
        [
            '\\multimap',
            8888
        ],
        [
            '\\nrightarrow',
            8603
        ],
        [
            '\\nleftarrow',
            8602
        ],
        [
            '\\nRightarrow',
            8655
        ],
        [
            '\\nLeftarrow',
            8653
        ],
        [
            '\\nleftrightarrow',
            8622
        ],
        [
            '\\nLeftrightarrow',
            8654
        ],
        [
            '\\shortparallel',
            8741
        ],
        [
            '\\nless',
            8814
        ],
        [
            '\\nleqslant',
            57360
        ],
        [
            '\\lneq',
            10887
        ],
        [
            '\\lneqq',
            8808
        ],
        [
            '\\nleqq',
            57361
        ],
        [
            '\\lvertneqq',
            57356
        ],
        [
            '\\lnsim',
            8934
        ],
        [
            '\\lnapprox',
            10889
        ],
        [
            '\\nprec',
            8832
        ],
        [
            '\\npreceq',
            8928
        ],
        [
            '\\precnsim',
            8936
        ],
        [
            '\\precnapprox',
            10937
        ],
        [
            '\\nsim',
            8769
        ],
        [
            '\\nshortmid',
            57350
        ],
        [
            '\\nmid',
            8740
        ],
        [
            '\\nvdash',
            8876
        ],
        [
            '\\nvDash',
            8877
        ],
        [
            '\\ngtr',
            8815
        ],
        [
            '\\ngeqslant',
            57359
        ],
        [
            '\\ngeqq',
            57358
        ],
        [
            '\\gneq',
            10888
        ],
        [
            '\\gneqq',
            8809
        ],
        [
            '\\gvertneqq',
            57357
        ],
        [
            '\\gnsim',
            8935
        ],
        [
            '\\gnapprox',
            10890
        ],
        [
            '\\nsucc',
            8833
        ],
        [
            '\\nsucceq',
            8929
        ],
        [
            '\\succnsim',
            8937
        ],
        [
            '\\succnapprox',
            10938
        ],
        [
            '\\ncong',
            8774
        ],
        [
            '\\nshortparallel',
            57351
        ],
        [
            '\\nparallel',
            8742
        ],
        [
            '\\nVDash',
            8879
        ],
        [
            '\\nsupseteqq',
            57368
        ],
        [
            '\\supsetneq',
            8843
        ],
        [
            '\\varsupsetneq',
            57371
        ],
        [
            '\\supsetneqq',
            10956
        ],
        [
            '\\varsupsetneqq',
            57369
        ],
        [
            '\\nVdash',
            8878
        ],
        [
            '\\precneqq',
            10933
        ],
        [
            '\\succneqq',
            10934
        ],
        [
            '\\nsubseteqq',
            57366
        ],
        [
            '\\leqslant',
            10877
        ],
        [
            '\\geqslant',
            10878
        ],
        [
            '\\gtrsim',
            8819
        ],
        [
            '\\approxeq',
            8778
        ],
        [
            '\\thickapprox',
            8776
        ],
        [
            '\\lessapprox',
            10885
        ],
        [
            '\\gtrapprox',
            10886
        ],
        [
            '\\precapprox',
            10935
        ],
        [
            '\\succapprox',
            10936
        ],
        [
            '\\thicksim',
            8764
        ],
        [
            '\\succsim',
            8831
        ],
        [
            '\\precsim',
            8830
        ],
        [
            '\\backsim',
            8765
        ],
        [
            '\\eqsim',
            8770
        ],
        [
            '\\backsimeq',
            8909
        ],
        [
            '\\lesssim',
            8818
        ],
        [
            '\\nleq',
            8816
        ],
        [
            '\\ngeq',
            8817
        ],
        [
            '\\smallsmile',
            8995
        ],
        [
            '\\smallfrown',
            8994
        ],
        [
            '\\leqq',
            8806
        ],
        [
            '\\eqslantless',
            10901
        ],
        [
            '\\lll',
            8920
        ],
        [
            '\\lessgtr',
            8822
        ],
        [
            '\\lesseqgtr',
            8922
        ],
        [
            '\\lesseqqgtr',
            10891
        ],
        [
            '\\risingdotseq',
            8787
        ],
        [
            '\\fallingdotseq',
            8786
        ],
        [
            '\\subseteqq',
            10949
        ],
        [
            '\\Subset',
            8912
        ],
        [
            '\\sqsubset',
            8847
        ],
        [
            '\\preccurlyeq',
            8828
        ],
        [
            '\\curlyeqprec',
            8926
        ],
        [
            '\\vDash',
            8872
        ],
        [
            '\\Vvdash',
            8874
        ],
        [
            '\\bumpeq',
            8783
        ],
        [
            '\\Bumpeq',
            8782
        ],
        [
            '\\geqq',
            8807
        ],
        [
            '\\eqslantgtr',
            10902
        ],
        [
            '\\ggg',
            8921
        ],
        [
            '\\gtrless',
            8823
        ],
        [
            '\\gtreqless',
            8923
        ],
        [
            '\\gtreqqless',
            10892
        ],
        [
            '\\supseteqq',
            10950
        ],
        [
            '\\Supset',
            8913
        ],
        [
            '\\sqsupset',
            8848
        ],
        [
            '\\succcurlyeq',
            8829
        ],
        [
            '\\curlyeqsucc',
            8927
        ],
        [
            '\\Vdash',
            8873
        ],
        [
            '\\shortmid',
            8739
        ],
        [
            '\\between',
            8812
        ],
        [
            '\\pitchfork',
            8916
        ],
        [
            '\\varpropto',
            8733
        ],
        [
            '\\backepsilon',
            8717
        ],
        [
            '\\llless',
            8920
        ],
        [
            '\\gggtr',
            8921
        ],
        [
            '\\doteqdot',
            8785
        ],
        [
            '\\Doteq',
            8785
        ],
        [
            '\\eqcirc',
            8790
        ],
        [
            '\\circeq',
            8791
        ],
        [
            '\\therefore',
            8756
        ],
        [
            '\\because',
            8757
        ]
    ], 'mrel', 'ams'), H([
        [
            '+',
            43
        ],
        [
            '-',
            8722
        ],
        [
            '\u2212',
            8722
        ],
        [
            '\\pm',
            177
        ],
        [
            '\\mp',
            8723
        ],
        [
            '*',
            8727
        ],
        [
            '\\times',
            215
        ],
        [
            '\\div',
            247
        ],
        [
            '\\divides',
            8739
        ],
        [
            '\\cdot',
            8901
        ],
        [
            '\\cap',
            8745
        ],
        [
            '\\cup',
            8746
        ],
        [
            '\\setminus',
            8726
        ],
        [
            '\\land',
            8743
        ],
        [
            '\\wedge',
            8743
        ],
        [
            '\\lor',
            8744
        ],
        [
            '\\vee',
            8744
        ],
        [
            '\\circ',
            8728
        ],
        [
            '\\bigcirc',
            9711
        ],
        [
            '\\bullet',
            8729
        ],
        [
            '\\oplus',
            8853
        ],
        [
            '\\ominus',
            8854
        ],
        [
            '\\otimes',
            8855
        ],
        [
            '\\odot',
            8857
        ],
        [
            '\\oslash',
            8856
        ],
        [
            '\\bigtriangleup',
            9651
        ],
        [
            '\\bigtriangledown',
            9661
        ],
        [
            '\\triangleleft',
            9667
        ],
        [
            '\\triangleright',
            9657
        ],
        [
            '\\And',
            38
        ],
        [
            '\\dagger',
            8224
        ],
        [
            '\\dag',
            8224
        ],
        [
            '\\ddag',
            8225
        ],
        [
            '\\ddagger',
            8225
        ],
        [
            '\\ast',
            8727
        ],
        [
            '\\star',
            8902
        ],
        [
            '\\bigstar',
            9733
        ],
        [
            '\\diamond',
            8900
        ]
    ], 'mbin'), H([
        [
            '\\lhd',
            8882
        ],
        [
            '\\rhd',
            8883
        ],
        [
            '\\lessdot',
            8918
        ],
        [
            '\\gtrdot',
            8919
        ],
        [
            '\\ltimes',
            8905
        ],
        [
            '\\rtimes',
            8906
        ],
        [
            '\\leftthreetimes',
            8907
        ],
        [
            '\\rightthreetimes',
            8908
        ],
        [
            '\\intercal',
            8890
        ],
        [
            '\\dotplus',
            8724
        ],
        [
            '\\doublebarwedge',
            10846
        ],
        [
            '\\divideontimes',
            8903
        ],
        [
            '\\centerdot',
            8901
        ],
        [
            '\\smallsetminus',
            8726
        ],
        [
            '\\barwedge',
            8892
        ],
        [
            '\\veebar',
            8891
        ],
        [
            '\\nor',
            8891
        ],
        [
            '\\curlywedge',
            8911
        ],
        [
            '\\curlyvee',
            8910
        ],
        [
            '\\boxminus',
            8863
        ],
        [
            '\\boxplus',
            8862
        ],
        [
            '\\boxtimes',
            8864
        ],
        [
            '\\boxdot',
            8865
        ],
        [
            '\\circleddash',
            8861
        ],
        [
            '\\circledast',
            8859
        ],
        [
            '\\circledcirc',
            8858
        ],
        [
            '\\unlhd',
            8884
        ],
        [
            '\\unrhd',
            8885
        ]
    ], 'mbin', 'ams'), H([
        [
            '\\surd',
            8730
        ],
        [
            '\\infty',
            8734
        ],
        [
            '\\prime',
            8242
        ],
        [
            '\\doubleprime',
            8243
        ],
        [
            '\\angle',
            8736
        ],
        [
            '`',
            8216
        ],
        [
            '\\$',
            36
        ],
        [
            '\\%',
            37
        ],
        [
            '\\_',
            95
        ],
        [
            '\\alpha',
            945
        ],
        [
            '\\beta',
            946
        ],
        [
            '\\gamma',
            947
        ],
        [
            '\\delta',
            948
        ],
        [
            '\\epsilon',
            1013
        ],
        [
            '\\varepsilon',
            949
        ],
        [
            '\\zeta',
            950
        ],
        [
            '\\eta',
            951
        ],
        [
            '\\theta',
            952
        ],
        [
            '\\vartheta',
            977
        ],
        [
            '\\iota',
            953
        ],
        [
            '\\kappa',
            954
        ],
        [
            '\\varkappa',
            1008,
            'mord',
            'ams'
        ],
        [
            '\\lambda',
            955
        ],
        [
            '\\mu',
            956
        ],
        [
            '\\nu',
            957
        ],
        [
            '\\xi',
            958
        ],
        [
            '\\omicron',
            111
        ],
        [
            '\\pi',
            960
        ],
        [
            '\\varpi',
            982
        ],
        [
            '\\rho',
            961
        ],
        [
            '\\varrho',
            1009
        ],
        [
            '\\sigma',
            963
        ],
        [
            '\\varsigma',
            962
        ],
        [
            '\\tau',
            964
        ],
        [
            '\\phi',
            981
        ],
        [
            '\\varphi',
            966
        ],
        [
            '\\upsilon',
            965
        ],
        [
            '\\chi',
            967
        ],
        [
            '\\psi',
            968
        ],
        [
            '\\omega',
            969
        ],
        [
            '\\Gamma',
            915
        ],
        [
            '\\Delta',
            916
        ],
        [
            '\\Theta',
            920
        ],
        [
            '\\Lambda',
            923
        ],
        [
            '\\Xi',
            926
        ],
        [
            '\\Pi',
            928
        ],
        [
            '\\Sigma',
            931
        ],
        [
            '\\Upsilon',
            933
        ],
        [
            '\\Phi',
            934
        ],
        [
            '\\Psi',
            936
        ],
        [
            '\\Omega',
            937
        ],
        [
            '\\digamma',
            989,
            'mord',
            'ams'
        ],
        [
            '\\emptyset',
            8709
        ]
    ]), H([
        [
            '=',
            61
        ],
        [
            '<',
            60
        ],
        [
            '\\lt',
            60
        ],
        [
            '>',
            62
        ],
        [
            '\\gt',
            62
        ],
        [
            '\\le',
            8804
        ],
        [
            '\\leq',
            8804
        ],
        [
            '\\ge',
            8805
        ],
        [
            '\\geq',
            8805
        ],
        [
            '\\ll',
            8810
        ],
        [
            '\\gg',
            8811
        ],
        [
            '\\coloneq',
            8788
        ],
        [
            '\\measeq',
            8797
        ],
        [
            '\\eqdef',
            8798
        ],
        [
            '\\questeq',
            8799
        ],
        [
            ':',
            58
        ],
        [
            '\\cong',
            8773
        ],
        [
            '\\equiv',
            8801
        ],
        [
            '\\prec',
            8826
        ],
        [
            '\\preceq',
            10927
        ],
        [
            '\\succ',
            8827
        ],
        [
            '\\succeq',
            10928
        ],
        [
            '\\perp',
            8869
        ],
        [
            '\\propto',
            8733
        ],
        [
            '\\Colon',
            8759
        ],
        [
            '\\smile',
            8995
        ],
        [
            '\\frown',
            8994
        ],
        [
            '\\sim',
            8764
        ],
        [
            '\\doteq',
            8784
        ],
        [
            '\\bowtie',
            8904
        ],
        [
            '\\Join',
            8904
        ],
        [
            '\\asymp',
            8781
        ],
        [
            '\\sqsubseteq',
            8849
        ],
        [
            '\\sqsupseteq',
            8850
        ],
        [
            '\\approx',
            8776
        ],
        [
            '\\~',
            126
        ],
        [
            '\\leftrightarrow',
            8596
        ],
        [
            '\\Leftrightarrow',
            8660
        ],
        [
            '\\models',
            8872
        ],
        [
            '\\vdash',
            8866
        ],
        [
            '\\dashv',
            8867
        ],
        [
            '\\roundimplies',
            10608
        ],
        [
            '\\in',
            8712
        ],
        [
            '\\notin',
            8713
        ],
        [
            '\\ni',
            8715
        ],
        [
            '\\owns',
            8715
        ],
        [
            '\\subset',
            8834
        ],
        [
            '\\supset',
            8835
        ],
        [
            '\\subseteq',
            8838
        ],
        [
            '\\supseteq',
            8839
        ],
        [
            '\\differencedelta',
            8710
        ],
        [
            '\\mvert',
            8739
        ],
        [
            '\\parallel',
            8741
        ],
        [
            '\\simeq',
            8771
        ]
    ], 'mrel'), H([
        [
            '\\lnot',
            172
        ],
        [
            '\\neg',
            172
        ],
        [
            '\\triangle',
            9651
        ],
        [
            '\\subsetneq',
            8842
        ],
        [
            '\\varsubsetneq',
            57370
        ],
        [
            '\\subsetneqq',
            10955
        ],
        [
            '\\varsubsetneqq',
            57367
        ],
        [
            '\\nsubset',
            8836
        ],
        [
            '\\nsupset',
            8837
        ],
        [
            '\\nsubseteq',
            8840
        ],
        [
            '\\nsupseteq',
            8841
        ]
    ], 'mrel', 'ams'), H([
        [
            '\\wp',
            8472
        ],
        [
            '\\aleph',
            8501
        ]
    ]), H([
        [
            '\\blacktriangle',
            9650
        ],
        [
            '\\hslash',
            8463
        ],
        [
            '\\Finv',
            8498
        ],
        [
            '\\Game',
            8513
        ],
        [
            '\\eth',
            240
        ],
        [
            '\\mho',
            8487
        ],
        [
            '\\Bbbk',
            107
        ],
        [
            '\\yen',
            165
        ],
        [
            '\\square',
            9633
        ],
        [
            '\\Box',
            9633
        ],
        [
            '\\blacksquare',
            9632
        ],
        [
            '\\circledS',
            9416
        ],
        [
            '\\circledR',
            174
        ],
        [
            '\\triangledown',
            9661
        ],
        [
            '\\blacktriangledown',
            9660
        ],
        [
            '\\checkmark',
            10003
        ],
        [
            '\\diagup',
            9585
        ],
        [
            '\\measuredangle',
            8737
        ],
        [
            '\\sphericalangle',
            8738
        ],
        [
            '\\backprime',
            8245
        ],
        [
            '\\backdoubleprime',
            8246
        ],
        [
            '\\Diamond',
            9674
        ],
        [
            '\\lozenge',
            9674
        ],
        [
            '\\blacklozenge',
            10731
        ],
        [
            '\\varnothing',
            8709
        ],
        [
            '\\complement',
            8705
        ],
        [
            '\\maltese',
            10016
        ],
        [
            '\\beth',
            8502
        ],
        [
            '\\daleth',
            8504
        ],
        [
            '\\gimel',
            8503
        ]
    ], 'mord', 'ams'), H([
        [
            '\\ ',
            160
        ],
        [
            '~',
            160
        ],
        [
            '\\space',
            160
        ]
    ], 'space'), R([
        '!',
        ',',
        ':',
        ';',
        'enskip',
        'enspace',
        'quad',
        'qquad'
    ], '', {
        createAtom: (qc, rc, c, d) => new Hc(qc, c, d)
    }), H([
        [
            '\\colon',
            58
        ],
        [
            '\\cdotp',
            8901
        ],
        [
            '\\vdots',
            8942,
            'mord'
        ],
        [
            '\\ldotp',
            46
        ],
        [
            ',',
            44
        ],
        [
            ';',
            59
        ]
    ], 'mpunct'), H([
        [
            '\\cdots',
            8943
        ],
        [
            '\\ddots',
            8945
        ],
        [
            '\\ldots',
            8230
        ],
        [
            '\\mathellipsis',
            8230
        ]
    ], 'minner'), H([
        [
            '\\/',
            47
        ],
        [
            '|',
            8739,
            'mord'
        ],
        [
            '\\imath',
            305
        ],
        [
            '\\jmath',
            567
        ],
        [
            '\\degree',
            176
        ],
        [
            '\'',
            8242
        ],
        [
            '"',
            8221
        ]
    ]);
    const Id = {
        '&': '\\&',
        '%': '\\%',
        '\'\'': '^{\\doubleprime}',
        alpha: '\\alpha',
        delta: '\\delta',
        Delta: '\\Delta',
        pi: '\\pi',
        Pi: '\\Pi',
        theta: '\\theta',
        Theta: '\\Theta',
        ii: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryI'
        },
        jj: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryJ'
        },
        ee: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\exponentialE'
        },
        nabla: '\\nabla',
        grad: '\\nabla',
        del: '\\partial',
        deg: {
            after: 'digit+space',
            value: '\\degree'
        },
        infty: '\\infty',
        '\u221E': '\\infty',
        oo: {
            after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\infty'
        },
        '\u2211': '\\sum',
        sum: '\\sum_{#?}^{#?}',
        int: '\\int_{#?}^{#?}',
        prod: '\\prod_{#?}^{#?}',
        sqrt: '\\sqrt{#?}',
        '\u2206': '\\differentialD',
        '\u2202': '\\differentialD',
        arcsin: '\\arcsin',
        arccos: '\\arccos',
        arctan: '\\arctan',
        arcsec: '\\arcsec',
        arccsc: '\\arccsc',
        arsinh: '\\arsinh',
        arcosh: '\\arcosh',
        artanh: '\\artanh',
        arcsech: '\\arcsech',
        arccsch: '\\arccsch',
        arg: '\\arg',
        ch: '\\ch',
        cosec: '\\cosec',
        cosh: '\\cosh',
        cot: '\\cot',
        cotg: '\\cotg',
        coth: '\\coth',
        csc: '\\csc',
        ctg: '\\ctg',
        cth: '\\cth',
        sec: '\\sec',
        sinh: '\\sinh',
        sh: '\\sh',
        tanh: '\\tanh',
        tg: '\\tg',
        th: '\\th',
        sin: '\\sin',
        cos: '\\cos',
        tan: '\\tan',
        lg: '\\lg',
        lb: '\\lb',
        log: '\\log',
        ln: '\\ln',
        exp: '\\exp',
        lim: '\\lim_{#?}',
        dx: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD x'
        },
        dy: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD y'
        },
        dt: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD t'
        },
        AA: '\\forall',
        EE: '\\exists',
        '!EE': '\\nexists',
        '&&': '\\land',
        xin: {
            after: 'nothing+text+relop+punct+openfence+space',
            value: 'x \\in'
        },
        in: {
            after: 'nothing+letter+closefence',
            value: '\\in'
        },
        '!in': '\\notin',
        NN: '\\mathbb{N}',
        ZZ: '\\Z',
        QQ: '\\Q',
        RR: '\\R',
        CC: '\\C',
        xx: '\\times',
        '+-': '\\pm',
        '\u2260': '\\ne',
        '!=': '\\ne',
        '\u2265': '\\ge',
        '>=': '\\ge',
        '\u2264': '\\le',
        '<=': '\\le',
        '<<': '\\ll',
        '>>': '\\gg',
        '~~': '\\approx',
        '\u2248': '\\approx',
        '?=': '\\questeq',
        '\xF7': '\\div',
        '\xAC': '\\neg',
        ':=': '\\coloneq',
        '::': '\\Colon',
        '(:': '\\langle',
        ':)': '\\rangle',
        beta: '\\beta',
        chi: '\\chi',
        epsilon: '\\epsilon',
        varepsilon: '\\varepsilon',
        eta: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\eta'
        },
        gamma: '\\gamma',
        Gamma: '\\Gamma',
        iota: '\\iota',
        kappa: '\\kappa',
        lambda: '\\lambda',
        Lambda: '\\Lambda',
        mu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\mu'
        },
        nu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\nu'
        },
        'µ': '\\mu',
        phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\phi'
        },
        Phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Phi'
        },
        varphi: '\\varphi',
        psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\psi'
        },
        Psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Psi'
        },
        rho: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\rho'
        },
        sigma: '\\sigma',
        Sigma: '\\Sigma',
        tau: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\tau'
        },
        vartheta: '\\vartheta',
        upsilon: '\\upsilon',
        xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\xi'
        },
        Xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Xi'
        },
        zeta: '\\zeta',
        omega: '\\omega',
        Omega: '\\Omega',
        'Ω': '\\omega',
        forall: '\\forall',
        exists: '\\exists',
        '!exists': '\\nexists',
        ':.': '\\therefore',
        liminf: '\\liminf_{#?}',
        limsup: '\\limsup_{#?}',
        argmin: '\\operatorname*{arg~min}_{#?}',
        argmax: '\\operatorname*{arg~max}_{#?}',
        det: '\\det',
        mod: '\\mod',
        max: '\\max',
        min: '\\min',
        erf: '\\operatorname{erf}',
        erfc: '\\operatorname{erfc}',
        bessel: '\\operatorname{bessel}',
        mean: '\\operatorname{mean}',
        median: '\\operatorname{median}',
        fft: '\\operatorname{fft}',
        lcm: '\\operatorname{lcm}',
        gcd: '\\operatorname{gcd}',
        randomReal: '\\operatorname{randomReal}',
        randomInteger: '\\operatorname{randomInteger}',
        Re: '\\operatorname{Re}',
        Im: '\\operatorname{Im}',
        mm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{mm}'
        },
        cm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{cm}'
        },
        km: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{km}'
        },
        kg: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{kg}'
        },
        '...': '\\ldots',
        '+...': '+\\cdots',
        '-...': '-\\cdots',
        '->...': '\\to\\cdots',
        '->': '\\to',
        '|->': '\\mapsto',
        '-->': '\\longrightarrow',
        '<--': '\\longleftarrow',
        '=>': '\\Rightarrow',
        '==>': '\\Longrightarrow',
        '<=>': '\\Leftrightarrow',
        '<->': '\\leftrightarrow',
        '(.)': '\\odot',
        '(+)': '\\oplus',
        '(/)': '\\oslash',
        '(*)': '\\otimes',
        '(-)': '\\ominus',
        '||': '\\Vert',
        '{': '\\{',
        '}': '\\}',
        '*': '\\cdot'
    };

    function Jd(Kd, Ld) {
        var Md;
        let Nd = null !== (Md = null == Ld ? void 0 : Ld.format) && void 0 !== Md ? Md : 'auto';
        return 'auto' === Nd && ([Od, Pd] = function(Qd) {
            if ((Qd = Qd.trim()).length <= 1)
                return [
                    'latex',
                    Qd
                ];
            let Rd;
            return [Sd, Td] = _Od(Td), Sd ? [
                'latex',
                Td
            ] : Td.startsWith('`') && Td.endsWith('`') ? [
                'ascii-math',
                Td = Td.substring(1, Td.length - 1)
            ] : Td.includes('\\') ? [
                'latex',
                Td
            ] : /\$.+\$/.test(Td) ? [
                'latex',
                `\\text{${ Td }}`
            ] : [
                void 0,
                Td
            ];
        }(Pd)), 'ascii-math' === Od ? [
            'ascii-math',
            _Kd(Pd = (Pd = (Pd = (Pd = (Pd = (Pd = Pd.replace(/\u2061/gu, '')).replace(/\u3016/gu, '{')).replace(/\u3017/gu, '}')).replace(/([^\\])sinx/g, '$1\\sin x')).replace(/([^\\])cosx/g, '$1\\cos x ')).replace(/\u2013/g, '-'), {
                inlineShortcuts: null == Ld ? void 0 : Ld.inlineShortcuts
            })
        ] : [
            'latex',
            Pd
        ];
    }

    function _Kd(Ld, Md) {
        var Nd, Od, Pd;
        if (!Ld)
            return '';
        let Qd, Rd = !1;
        const Sd = null !== (Nd = Md.inlineShortcuts) && void 0 !== Nd ? Nd : Id;
        if (Rd || !Ld.startsWith('^') && !Ld.startsWith('_') || (Qd = _Ld(Ld.slice(1), {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Ld = Ld[0] + '{' + Qd.match + '}', Ld += _Kd(Qd.rest, Md), Rd = !0), !Rd && (Qd = Ld.match(/^(sqrt|\u221A)(.*)/), Qd) && (Qd = _Ld(Qd[2], {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Ld = '\\sqrt{' + (null !== (Od = Qd.match) && void 0 !== Od ? Od : '\\placeholder{}') + '}', Ld += _Kd(Qd.rest, Md), Rd = !0), !Rd && (Qd = Ld.match(/^(\\cbrt|\u221B)(.*)/), Qd) && (Qd = _Ld(Qd[2], {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Ld = '\\sqrt[3]{' + (null !== (Pd = Qd.match) && void 0 !== Pd ? Pd : '\\placeholder{}') + '}', Ld += _Kd(Qd.rest, Md), Rd = !0), Rd || (Qd = Ld.match(/^abs(.*)/), Qd && (Qd = _Ld(Qd[1], {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Ld = '\\left|' + Qd.match + '\\right|', Ld += _Kd(Qd.rest, Md), Rd = !0)), Rd || (Qd = Ld.match(/^["\u201d\u201c](.*?)["\u201d\u201c](.*)/), Qd && (Ld = '\\text{' + Qd[1] + '}', Ld += _Kd(Qd[2], Md), Rd = !0)), Rd || (Qd = Ld.match(/^([^a-zA-Z\(\{\[\_\^\\\s"]+)(.*)/), Qd && (Ld = _Md(Qd[1], Sd), Ld += _Kd(Qd[2], Md), Rd = !0)), !Rd && /^([fgh])[^a-zA-Z]/.test(Ld) && (Qd = _Ld(Ld.slice(1), {
                inlineShortcuts: Sd,
                noWrap: !0
            }), Ld = '(' === Ld[1] ? Ld[0] + '\\left(' + Qd.match + '\\right)' : Ld[0] + Qd.match, Ld += _Kd(Qd.rest, Md), Rd = !0), Rd || (Qd = Ld.match(/^([a-zA-Z]+)(.*)/), Qd && (Ld = _Md(Qd[1], Sd), Ld += _Kd(Qd[2], Md), Rd = !0)), !Rd)
            if (Qd = _Ld(Ld, {
                    inlineShortcuts: Sd,
                    noWrap: !0
                }), Qd.match && '/' === Qd.rest[0]) {
                const Td = _Ld(Qd.rest.slice(1), {
                    inlineShortcuts: Sd,
                    noWrap: !0
                });
                Td.match && (Ld = '\\frac{' + Qd.match + '}{' + Td.match + '}' + _Kd(Td.rest, Md)), Rd = !0;
            } else
                Qd.match && (Ld = Ld.startsWith('(') ? '\\left(' + Qd.match + '\\right)' + _Kd(Qd.rest, Md) : Qd.match + _Kd(Qd.rest, Md), Rd = !0);
        return Rd || (Qd = Ld.match(/^(\s+)(.*)$/), Qd && (Ld = ' ' + _Kd(Qd[2], Md), Rd = !0)), Ld;
    }

    function _Ld(Md, Nd) {
        let Od = '',
            Pd = Md = Md.trim(),
            Qd = Md.charAt(0),
            Rd = {
                '(': ')',
                '{': '}',
                '[': ']'
            } [Qd];
        if (Rd) {
            let Sd = 1,
                Td = 1;
            for (; Td < Md.length && Sd > 0;)
                Md[Td] === Qd && Sd++, Md[Td] === Rd && Sd--, Td++;
            0 === Sd ? (Nd.noWrap && '(' === Qd ? Od = _Kd(Md.substring(1, Td - 1), Nd) : ('{' === Qd && '}' === Rd && (Qd = '\\{', Rd = '\\}'), Od = '\\left' + Qd + _Kd(Md.substring(1, Td - 1), Nd) + '\\right' + Rd), Pd = Md.slice(Math.max(0, Td))) : (Od = Md.substring(1, Td), Pd = '');
        } else {
            let Sd = Md.match(/^([a-zA-Z]+)/);
            if (Sd) {
                let Td = Hd(null, Md, Nd.inlineShortcuts);
                if (Td)
                    return Td = Td.replace('_{#?}', ''), Td = Td.replace('^{#?}', ''), {
                        match: Td,
                        rest: Md.slice(Td.length)
                    };
            }
            if (Sd = Md.match(/^([a-zA-Z])/), Sd)
                return {
                    match: Sd[1],
                    rest: Md.slice(1)
                };
            if (Sd = Md.match(/^(-)?\d+(\.\d*)?/), Sd)
                return {
                    match: Sd[0],
                    rest: Md.slice(Sd[0].length)
                };
            /^\\(left|right)/.test(Md) || (Sd = Md.match(/^(\\[a-zA-Z]+)/), Sd && (Pd = Md.slice(Sd[1].length), Od = Sd[1]));
        }
        return {
            match: Od,
            rest: Pd
        };
    }

    function _Md(Nd, Od) {
        let Pd = Hd(null, Nd, Od);
        return Pd ? (Pd = Pd.replace('_{#?}', ''), Pd = Pd.replace('^{#?}', ''), Pd += ' ') : Pd = Nd, Pd;
    }
    const Nd = [
        [
            '\\[',
            '\\]'
        ],
        [
            '\\(',
            '\\)'
        ],
        [
            '$$',
            '$$'
        ],
        [
            '$',
            '$'
        ],
        [
            '\\begin{math}',
            '\\end{math}'
        ],
        [
            '\\begin{displaymath}',
            '\\end{displaymath}'
        ],
        [
            '\\begin{equation}',
            '\\end{equation}'
        ],
        [
            '\\begin{equation*}',
            '\\end{equation*}'
        ]
    ];

    function _Od(Pd) {
        const Qd = Pd.trim();
        for (const Rd of Nd)
            if (Qd.startsWith(Rd[0]) && Qd.endsWith(Rd[1]))
                return [
                    !0,
                    Qd.substring(Rd[0].length, Qd.length - Rd[1].length)
                ];
        return [
            !1,
            Rd
        ];
    }
    const Pd = (qc, rc, c) => (Nd.some(qc => rc.startsWith(qc[0]) && rc.endsWith(qc[1])) || (rc = `$$ ${ rc } $$`), rc);
    class Qd {
        static onPaste(Rd, Sd, Td) {
            var Ud;
            const Vd = new ClipboardEvent('paste', {
                clipboardData: Td.clipboardData,
                cancelable: !0
            });
            return !!(null === (Ud = Sd.host) || void 0 === Ud ? void 0 : Ud.dispatchEvent(Vd)) && Qd._registry[Rd].onPaste(Sd, Td);
        }
        static onCopy(Rd, Sd) {
            if (!Sd.clipboardData)
                return;
            const Td = Rd.model,
                Ud = Td.selectionIsCollapsed ? [
                    0,
                    Td.lastOffset
                ] : Gd(Td.selection);
            let Vd = Td.getAtoms(Ud);
            if (Vd.every(Rd => 'text' === Rd.mode || !Rd.mode))
                Sd.clipboardData.setData('text/plain', Vd.filter(Rd => Rd instanceof Nc).map(Rd => Rd.value).join(''));
            else if (Vd.every(Rd => 'latex' === Rd.mode))
                Sd.clipboardData.setData('text/plain', Td.getAtoms(Ud, {
                    includeChildren: !0
                }).map(Rd => {
                    var Wd;
                    return null !== (Wd = Rd.value) && void 0 !== Wd ? Wd : '';
                }).join(''));
            else {
                let Wd;
                Wd = 1 === Vd.length && void 0 !== Vd[0].verbatimLatex ? Vd[0].verbatimLatex : Td.getValue(Ud, 'latex-expanded'), Sd.clipboardData.setData('application/x-latex', Wd);
                try {
                    Sd.clipboardData.setData('text/plain', Rd.options.onExport(Rd, Wd, Ud));
                } catch {}
                1 !== Vd.length || 'root' !== Vd[0].type && 'group' !== Vd[0].type || (Vd = Vd[0].body.filter(Rd => 'first' !== Rd.type));
                try {
                    Sd.clipboardData.setData('application/json+mathlive', JSON.stringify(Vd.map(Rd => Rd.toJson())));
                } catch {}
                const Xd = Rd.computeEngine;
                if (Xd)
                    try {
                        Xd.jsonSerializationOptions = {
                            metadata: ['latex']
                        };
                        const Yd = Xd.parse(Wd),
                            Zd = JSON.stringify(Yd.json);
                        Zd && Sd.clipboardData.setData('application/json', Zd);
                    } catch {}
            }
            Sd.preventDefault();
        }
        static insert(Rd, Sd, Td, Ud = {}) {
            return Qd._registry[Rd].insert(Sd, Td, Ud);
        }
        onPaste(Rd, Sd) {
            return !1;
        }
        insert(Rd, Sd, Td) {
            return !1;
        }
        constructor(Rd) {
            Qd._registry[Rd] = this;
        }
    }
    Qd._registry = {};
    const Rd = {
        '\\ne': '<mo>&ne;</mo>',
        '\\neq': '<mo>&neq;</mo>',
        '\\pm': '&#177;',
        '\\times': '&#215;',
        '\\colon': ':',
        '\\vert': '|',
        '\\Vert': '\u2225',
        '\\mid': '\u2223',
        '\\lbrace': '{',
        '\\rbrace': '}',
        '\\lparen': '(',
        '\\rparen': ')',
        '\\langle': '\u27E8',
        '\\rangle': '\u27E9',
        '\\lfloor': '\u230A',
        '\\rfloor': '\u230B',
        '\\lceil': '\u2308',
        '\\rceil': '\u2309',
        '\\vec': '&#x20d7;',
        '\\acute': '&#x00b4;',
        '\\grave': '&#x0060;',
        '\\dot': '&#x02d9;',
        '\\ddot': '&#x00a8;',
        '\\tilde': '&#x007e;',
        '\\bar': '&#x00af;',
        '\\breve': '&#x02d8;',
        '\\check': '&#x02c7;',
        '\\hat': '&#x005e;'
    };

    function Sd(Td) {
        return Td.replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function Td(Ud, Vd) {
        return Ud && Vd.generateID ? ` extid="${ Ud }"` : '';
    }

    function Ud(Vd, Wd, Xd) {
        let Yd = !1;
        Wd = null != Wd ? Wd : Vd.atoms.length;
        let Zd = '',
            $d = '';
        const ae = Vd.atoms[Vd.index];
        return Vd.index < Wd && ('mord' === ae.type || 'macro' === ae.type) && !ae.isDigit() && ($d = _de(ae, Xd), Vd.index += 1), $d.length > 0 && (Yd = !0, Zd = $d, 'mi' !== Vd.lastType && 'mn' !== Vd.lastType && 'mtext' !== Vd.lastType && 'fence' !== Vd.lastType || /^<mo>(.*)<\/mo>$/.test(Zd) || (Zd = `<mo>&#8290;</mo>${ Zd }`), $d.endsWith('>f</mi>') || $d.endsWith('>g</mi>') ? (Zd += '<mo>&#x2061;</mo>', Vd.lastType = 'applyfunction') : Vd.lastType = /^<mo>(.*)<\/mo>$/.test(Zd) ? 'mo' : 'mi', _Wd($d, Vd, Xd) || (Vd.mathML += Zd)), Yd;
    }

    function Vd(Wd) {
        return Wd.index < Wd.atoms.length && Wd.atoms[Wd.index].superscript && 'msubsup' === Wd.atoms[Wd.index].type;
    }

    function _Wd(Xd, Yd, Zd) {
        let $d = Yd.atoms[Yd.index - 1];
        if (!$d)
            return !1;
        if ($d.superscript || $d.subscript || (Vd(Yd) || function(ae) {
                return ae.index < ae.atoms.length && ae.atoms[ae.index].subscript && 'msubsup' === ae.atoms[ae.index].type;
            }(Yd)) && ($d = Yd.atoms[Yd.index], Yd.index += 1), !$d)
            return !1;
        const ae = _ae($d.superscript, Zd),
            be = _ae($d.subscript, Zd);
        if (!ae && !be)
            return !1;
        let ce = '';
        return ae && be ? ce = `<msubsup>${ Xd }${ be }${ ae }</msubsup>` : ae ? ce = `<msup>${ Xd }${ ae }</msup>` : be && (ce = `<msub>${ Xd }${ be }</msub>`), Yd.mathML += ce, Yd.lastType = '', !0;
    }

    function Xd(Yd, Zd, $d) {
        Zd = null != Zd ? Zd : Yd.atoms.length;
        const ae = Yd.index;
        let be = '';
        for (; Yd.index < Zd && 'text' === Yd.atoms[Yd.index].mode;)
            be += Yd.atoms[Yd.index].value ? Yd.atoms[Yd.index].value : ' ', Yd.index += 1;
        return be.length > 0 && (Yd.mathML += `<mtext ${ Td(Yd.atoms[ae].id, $d) }\n      >${ be }</mtext>`, Yd.lastType = 'mtext', !0);
    }

    function Yd(Zd, $d, ae) {
        $d = null != $d ? $d : Zd.atoms.length;
        const be = Zd.index;
        let ce = '',
            de = function(ee) {
                let fe = -1,
                    ge = ee.index,
                    he = !1,
                    ie = !1;
                for (; ge < ee.atoms.length && !he && !ie;) {
                    const je = ee.atoms[ge];
                    he = !je.isDigit(), ie = !he && void 0 !== je.superscript, ge++;
                }
                return ie && (fe = ge - 1), fe;
            }(Zd);
        for (de >= 0 && de < $d && ($d = de); Zd.index < $d && Zd.atoms[Zd.index].isDigit();)
            ce += Zd.atoms[Zd.index].asDigit(), Zd.index += 1;
        return !(ce.length <= 0 || (ce = '<mn' + Td(Zd.atoms[be].id, ae) + '>' + ce + '</mn>', de < 0 && Vd(Zd) && (de = Zd.index, Zd.index += 1), _Wd(ce, Zd, ae) || (Zd.mathML += ce, Zd.lastType = 'mn'), 0));
    }

    function Zd($d, ae, be) {
        let ce = !1;
        ae = null != ae ? ae : $d.atoms.length;
        let de = '',
            ee = '';
        if ($d.index < ae && 'mopen' === $d.atoms[$d.index].type) {
            let fe = !1,
                ge = 0;
            const he = $d.index;
            let ie = -1,
                je = he + 1;
            for (; je < ae && !fe;)
                'mopen' === $d.atoms[je].type ? ge += 1 : 'mclose' === $d.atoms[je].type && (ge -= 1), -1 === ge && (fe = !0, ie = je), je += 1;
            fe && (de = '<mrow>', de += _be($d.atoms[he], be), de += _ae($d.atoms, be, he + 1, ie), de += _be($d.atoms[ie], be), de += '</mrow>', 'mi' !== $d.lastType && 'mn' !== $d.lastType && 'mfrac' !== $d.lastType && 'fence' !== $d.lastType || (de = `<mo>&#8290;</mo>${ de }`), $d.index = ie + 1, _Wd(de, $d, be) && (ce = !0, $d.lastType = '', de = ''), ee = 'fence');
        }
        return de.length > 0 && (ce = !0, $d.mathML += de, $d.lastType = ee), ce;
    }

    function $d(ae, be, ce) {
        let de = !1;
        be = null != be ? be : ae.atoms.length;
        let ee = '',
            fe = '';
        const ge = ae.atoms[ae.index];
        if (ae.index < be && ('mbin' === ge.type || 'mrel' === ge.type))
            ee += _de(ae.atoms[ae.index], ce), ae.index += 1, fe = 'mo';
        else if (ae.index < be && 'mop' === ge.type) {
            if ('over-under' === ge.subsupPlacement && (ge.superscript || ge.subscript)) {
                const he = _be(ge, ce);
                ge.superscript && ge.subscript ? (ee += '<munderover>' + he, ee += _ae(ge.subscript, ce), ee += _ae(ge.superscript, ce), ee += '</munderover>') : ge.superscript ? (ee += '<mover>' + he, ee += _ae(ge.superscript, ce), ee += '</mover>') : ge.subscript && (ee += '<munder>' + he, ee += _ae(ge.subscript, ce), ee += '</munder>'), fe = 'mo';
            } else {
                const he = ae.atoms[ae.index],
                    ie = '\\operatorname' === he.value,
                    je = ie ? '<mi class="MathML-Unit"' + Td(he.id, ce) + '>' + _ce(he.value) + '</mi>' : _be(he, ce);
                ee += je, ie || /^<mo>(.*)<\/mo>$/.test(je) ? fe = ie ? 'mi' : 'mo' : (ee += '<mo>&#x2061;</mo>', fe = 'applyfunction');
            }
            'mi' !== ae.lastType && 'mn' !== ae.lastType || /^<mo>(.*)<\/mo>$/.test(ee) || (ee = `<mo>&#8290;</mo>${ ee }`), ae.index += 1;
        }
        return _Wd(ee, ae, ce) || ee.length > 0 && (de = !0, ae.mathML += ee, ae.lastType = fe), de;
    }

    function _ae(be, ce, de, ee) {
        const fe = {
            atoms: [],
            index: null != de ? de : 0,
            mathML: '',
            lastType: ''
        };
        if ('number' == typeof be || 'boolean' == typeof be)
            fe.mathML = be.toString();
        else if ('string' == typeof be)
            fe.mathML = be;
        else if (be instanceof kc)
            fe.mathML = _de(be, ce);
        else if (Array.isArray(be)) {
            fe.atoms = be;
            let ge = 0;
            for (ee = ee || (be ? be.length : 0); fe.index < ee;)
                if (Xd(fe, ee, ce) || Yd(fe, ee, ce) || Ud(fe, ee, ce) || $d(fe, ee, ce) || Zd(fe, ee, ce))
                    ge += 1;
                else if (fe.index < ee) {
                let he = _de(fe.atoms[fe.index], ce);
                'mn' === fe.lastType && he.length > 0 && 'genfrac' === fe.atoms[fe.index].type && (he = '<mo>&#x2064;</mo>' + he), 'genfrac' === fe.atoms[fe.index].type ? fe.lastType = 'mfrac' : fe.lastType = '', fe.index += 1, _Wd(he, fe, ce) ? ge += 2 : he.length > 0 && (fe.mathML += he, ge += 1);
            }
            ge > 1 && (fe.mathML = '<mrow>' + fe.mathML + '</mrow>');
        }
        return fe.mathML;
    }

    function _be(ce, de) {
        let ee = '';
        const fe = _ce(ce.value);
        return fe && (ee = '<mo' + Td(ce.id, de) + '>' + fe + '</mo>'), ee;
    }

    function _ce(de) {
        if (!de)
            return '';
        if ('string' == typeof de)
            return Sd(de);
        if (!Array.isArray(de) && 'string' == typeof de.body)
            return Sd(de.body);
        let ee = '';
        for (const fe of de)
            'string' == typeof fe.value && (ee += fe.value);
        return Sd(ee);
    }

    function _de(ee, fe) {
        var ge, he, ie, je, ke, le, me, ne, oe, pe, qe, re, se, te, ue, ve, we, xe, ye, ze, Ae, Be, Ce, De, Ee;
        const Fe = {
                widehat: '^',
                widecheck: 'ˇ',
                widetilde: '~',
                utilde: '~',
                overleftarrow: '\u2190',
                underleftarrow: '\u2190',
                xleftarrow: '\u2190',
                overrightarrow: '\u2192',
                underrightarrow: '\u2192',
                xrightarrow: '\u2192',
                underbrace: '\u23DF',
                overbrace: '\u23DE',
                overgroup: '\u23E0',
                undergroup: '\u23E1',
                overleftrightarrow: '\u2194',
                underleftrightarrow: '\u2194',
                xleftrightarrow: '\u2194',
                Overrightarrow: '\u21D2',
                xRightarrow: '\u21D2',
                overleftharpoon: '\u21BC',
                xleftharpoonup: '\u21BC',
                overrightharpoon: '\u21C0',
                xrightharpoonup: '\u21C0',
                xLeftarrow: '\u21D0',
                xLeftrightarrow: '\u21D4',
                xhookleftarrow: '\u21A9',
                xhookrightarrow: '\u21AA',
                xmapsto: '\u21A6',
                xrightharpoondown: '\u21C1',
                xleftharpoondown: '\u21BD',
                xrightleftharpoons: '\u21CC',
                xleftrightharpoons: '\u21CB',
                xtwoheadleftarrow: '\u219E',
                xtwoheadrightarrow: '\u21A0',
                xlongequal: '=',
                xtofrom: '\u21C4',
                xrightleftarrows: '\u21C4',
                xrightequilibrium: '\u21CC',
                xleftequilibrium: '\u21CB'
            },
            Ge = {
                '\\exponentialE': '&#x02147;',
                '\\imaginaryI': '&#x2148;',
                '\\differentialD': '&#x2146;',
                '\\capitalDifferentialD': '&#x2145;',
                '\\alpha': '&#x03b1;',
                '\\pi': '&#x03c0;',
                '\\infty': '&#x221e;',
                '\\forall': '&#x2200;',
                '\\nexists': '&#x2204;',
                '\\exists': '&#x2203;',
                '\\hbar': 'ℏ',
                '\\cdotp': '\u22C5',
                '\\ldots': '\u2026',
                '\\cdots': '\u22EF',
                '\\ddots': '\u22F1',
                '\\vdots': '\u22EE',
                '\\ldotp': '.'
            },
            He = {
                '\\!': -3 / 18,
                '\\ ': 6 / 18,
                '\\,': 3 / 18,
                '\\:': 4 / 18,
                '\\;': 5 / 18,
                '\\enspace': 0.5,
                '\\quad': 1,
                '\\qquad': 2,
                '\\enskip': 0.5
            };
        let Ie, Je, Ke, Le, Me, Ne, Oe = '',
            Pe = '',
            Qe = null !== (he = {
                cal: 'script',
                frak: 'fraktur',
                bb: 'double-struck',
                scr: 'script',
                cmtt: 'monospace',
                cmss: 'sans-serif'
            } [null !== (ge = ee.fontFamily) && void 0 !== ge ? ge : ee.font]) && void 0 !== he ? he : '';
        Qe && (Qe = ` mathvariant="${ Qe }"`);
        const {
            command: Re
        } = ee;
        if ('text' === ee.mode)
            Oe = `<mi${ Td(ee.id, fe) }>${ ee.value }</mi>`;
        else
            switch (ee.type) {
                case 'first':
                case 'line':
                case 'overlap':
                case 'msubsup':
                case 'phantom':
                case 'composition':
                case 'rule':
                case 'chem':
                case 'error':
                    break;
                case 'group':
                case 'root':
                    Oe = Rd[ee.command] ? Rd[ee.command] : _ae(ee.body, fe);
                    break;
                case 'array':
                    if ((ee.leftDelim && '.' !== ee.leftDelim || ee.rightDelim && '.' !== ee.rightDelim) && (Oe += '<mrow>', ee.leftDelim && '.' !== ee.leftDelim && (Oe += '<mo>' + (Rd[ee.leftDelim] || ee.leftDelim) + '</mo>')), Oe += '<mtable', ee.colFormat) {
                        for (Oe += ' columnalign="', Ke = 0; Ke < ee.colFormat.length; Ke++)
                            ee.colFormat[Ke].align && (Oe += {
                                l: 'left',
                                c: 'center',
                                r: 'right'
                            } [ee.colFormat[Ke].align] + ' ');
                        Oe += '"';
                    }
                    for (Oe += '>', Je = 0; Je < ee.array.length; Je++) {
                        for (Oe += '<mtr>', Ie = 0; Ie < ee.array[Je].length; Ie++)
                            Oe += '<mtd>' + _ae(ee.array[Je][Ie], fe) + '</mtd>';
                        Oe += '</mtr>';
                    }
                    Oe += '</mtable>', (ee.leftDelim && '.' !== ee.leftDelim || ee.rightDelim && '.' !== ee.rightDelim) && (ee.rightDelim && '.' !== ee.rightDelim && (Oe += '<mo>' + (Rd[ee.leftDelim] || ee.rightDelim) + '</mo>'), Oe += '</mrow>');
                    break;
                case 'genfrac':
                    (ee.leftDelim || ee.rightDelim) && (Oe += '<mrow>'), ee.leftDelim && '.' !== ee.leftDelim && (Oe += '<mo' + Td(ee.id, fe) + '>' + (Rd[ee.leftDelim] || ee.leftDelim) + '</mo>'), ee.hasBarLine ? (Oe += '<mfrac>', Oe += _ae(ee.above, fe) || '<mi>&nbsp;</mi>', Oe += _ae(ee.below, fe) || '<mi>&nbsp;</mi>', Oe += '</mfrac>') : (Oe += '<mtable' + Td(ee.id, fe) + '>', Oe += '<mtr>' + _ae(ee.above, fe) + '</mtr>', Oe += '<mtr>' + _ae(ee.below, fe) + '</mtr>', Oe += '</mtable>'), ee.rightDelim && '.' !== ee.rightDelim && (Oe += '<mo' + Td(ee.id, fe) + '>' + (Rd[ee.rightDelim] || ee.rightDelim) + '</mo>'), (ee.leftDelim || ee.rightDelim) && (Oe += '</mrow>');
                    break;
                case 'surd':
                    ee.hasEmptyBranch('above') ? (Oe += '<msqrt' + Td(ee.id, fe) + '>', Oe += _ae(ee.body, fe), Oe += '</msqrt>') : (Oe += '<mroot' + Td(ee.id, fe) + '>', Oe += _ae(ee.body, fe), Oe += _ae(ee.above, fe), Oe += '</mroot>');
                    break;
                case 'leftright':
                    Oe = '<mrow>', ee.leftDelim && '.' !== ee.leftDelim && (Oe += '<mo' + Td(ee.id, fe) + '>' + (null !== (ie = Rd[ee.leftDelim]) && void 0 !== ie ? ie : ee.leftDelim) + '</mo>'), ee.body && (Oe += _ae(ee.body, fe)), ee.rightDelim && '.' !== ee.rightDelim && (Oe += '<mo' + Td(ee.id, fe) + '>' + (null !== (je = Rd[ee.rightDelim]) && void 0 !== je ? je : ee.rightDelim) + '</mo>'), Oe += '</mrow>';
                    break;
                case 'sizeddelim':
                case 'delim':
                    Oe += '<mo separator="true"' + Td(ee.id, fe) + '>' + (Rd[ee.delim] || ee.delim) + '</mo>';
                    break;
                case 'accent':
                    Oe += '<mover accent="true"' + Td(ee.id, fe) + '>', Oe += _ae(ee.body, fe), Oe += '<mo>' + (Rd[Re] || ee.accent) + '</mo>', Oe += '</mover>';
                    break;
                case 'overunder':
                    Me = ee.above, Le = ee.below, (ee.svgAbove || Me) && (ee.svgBelow || Le) ? Ne = ee.body : Me && Me.length > 0 ? (Ne = ee.body, (null === (le = null === (ke = ee.body) || void 0 === ke ? void 0 : ke[0]) || void 0 === le ? void 0 : le.below) ? (Le = ee.body[0].below, Ne = ee.body[0].body) : 'first' === (null === (ne = null === (me = ee.body) || void 0 === me ? void 0 : me[0]) || void 0 === ne ? void 0 : ne.type) && (null === (pe = null === (oe = ee.body) || void 0 === oe ? void 0 : oe[1]) || void 0 === pe ? void 0 : pe.below) && (Le = ee.body[1].below, Ne = ee.body[1].body)) : Le && Le.length > 0 && (Ne = ee.body, (null === (re = null === (qe = ee.body) || void 0 === qe ? void 0 : qe[0]) || void 0 === re ? void 0 : re.above) ? (Me = ee.body[0].above, Ne = ee.body[0].body) : 'first' === (null === (te = null === (se = ee.body) || void 0 === se ? void 0 : se[0]) || void 0 === te ? void 0 : te.type) && (null === (ve = null === (ue = ee.body) || void 0 === ue ? void 0 : ue[1]) || void 0 === ve ? void 0 : ve.above) && (Me = ee.body[1].overscript, Ne = ee.body[1].body)), (ee.svgAbove || Me) && (ee.svgBelow || Le) ? (Oe += `<munderover ${ Qe } ${ Td(ee.id, fe) }>`, Oe += null !== (we = Fe[ee.svgBody]) && void 0 !== we ? we : _ae(Ne, fe), Oe += null !== (xe = Fe[ee.svgBelow]) && void 0 !== xe ? xe : _ae(Le, fe), Oe += null !== (ye = Fe[ee.svgAbove]) && void 0 !== ye ? ye : _ae(Me, fe), Oe += '</munderover>') : ee.svgAbove || Me ? (Oe += `<mover ${ Qe } ${ Td(ee.id, fe) }>` + (null !== (ze = Fe[ee.svgBody]) && void 0 !== ze ? ze : _ae(Ne, fe)), Oe += null !== (Ae = Fe[ee.svgAbove]) && void 0 !== Ae ? Ae : _ae(Me, fe), Oe += '</mover>') : (ee.svgBelow || Le) && (Oe += `<munder ${ Qe } ${ Td(ee.id, fe) }>` + (null !== (Be = Fe[ee.svgBody]) && void 0 !== Be ? Be : _ae(Ne, fe)), Oe += null !== (Ce = Fe[ee.svgBelow]) && void 0 !== Ce ? Ce : _ae(Le, fe), Oe += '</munder>');
                    break;
                case 'placeholder':
                case 'mord': {
                    Oe = Ge[Re] || Re || ('string' == typeof ee.value ? ee.value : '');
                    const Se = Re ? Re.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null;
                    Se ? Oe = '&#x' + Se[1] + ';' : Oe.length > 0 && Oe.startsWith('\\') && (Oe = 'string' == typeof ee.value && ee.value.charCodeAt(0) > 255 ? '&#x' + ('000000' + ee.value.charCodeAt(0).toString(16)).slice(-4) + ';' : 'string' == typeof ee.value ? ee.value.charAt(0) : '');
                    const Te = /\d/.test(Oe) ? 'mn' : 'mi';
                    Oe = `<${ Te }${ Qe }${ Td(ee.id, fe) }>${ Sd(Oe) }</${ Te }>`;
                    break;
                }
                case 'mbin':
                case 'mrel':
                case 'minner':
                    Oe = Re && Ge[Re] ? '<mi' + Td(ee.id, fe) + '>' + Ge[Re] + '</mi>' : Re && Rd[Re] ? '<mo' + Td(ee.id, fe) + '>' + Rd[Re] + '</mo>' : _be(ee, fe);
                    break;
                case 'mpunct':
                    Oe = '<mo separator="true"' + Td(ee.id, fe) + '>' + (null !== (De = Rd[Re]) && void 0 !== De ? De : Re) + '</mo>';
                    break;
                case 'mop':
                    '\u200B' !== ee.body && (Oe = '<mo' + Td(ee.id, fe) + '>', Oe += '\\operatorname' === Re ? ee.body : Re || ee.body, Oe += '</mo>');
                    break;
                case 'box':
                    Oe = '<menclose notation="box"', ee.backgroundcolor && (Oe += ' mathbackground="' + ee.backgroundcolor + '"'), Oe += Td(ee.id, fe) + '>' + _ae(ee.body, fe) + '</menclose>';
                    break;
                case 'spacing':
                    Oe += '<mspace width="' + (null !== (Ee = He[Re]) && void 0 !== Ee ? Ee : 0) + 'em"/>';
                    break;
                case 'enclose':
                    Oe = '<menclose notation="';
                    for (const Se in ee.notation)
                        Object.prototype.hasOwnProperty.call(ee.notation, Se) && ee.notation[Se] && (Oe += Pe + Se, Pe = ' ');
                    Oe += Td(ee.id, Se) + '">' + _ae(ee.body, Se) + '</menclose>';
                    break;
                case 'space':
                    Oe += '&nbsp;';
                    break;
                case 'mopen':
                case 'mclose':
                    Oe += _be(ee, Se);
                    break;
                case 'macro': {
                    const Te = ee.command + _ce(ee.macroArgs);
                    Te && (Oe += `<mo ${ Td(ee.id, Se) }>${ Te }</mo>`);
                }
                break;
                case 'latexgroup':
                case 'tooltip':
                    Oe += _ae(ee.body, Se);
                    break;
                case 'latex':
                    Oe += '<mtext' + Td(ee.id, Se) + '>' + ee.value + '</mtext>';
            }
        return Oe;
    }
    const ee = {
        '\\alpha': 'alpha ',
        '\\mu': 'mew ',
        '\\sigma': 'sigma ',
        '\\pi': 'pie ',
        '\\imaginaryI': 'eye ',
        '\\sum': 'Summation ',
        '\\prod': 'Product ',
        a: '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
        A: 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
        '+': 'plus ',
        '-': 'minus ',
        ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
        ',': '<break time="150ms"/> comma  <break time="150ms"/>',
        '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
        '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
        ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
        '=': 'equals ',
        '<': 'is less than ',
        '\\lt': 'is less than ',
        '<=': 'is less than or equal to ',
        '\\le': 'is less than or equal to ',
        '\\gt': 'is greater than ',
        '>': 'is greater than ',
        '\\ge': 'is greater than or equal to ',
        '\\geq': 'is greater than or equal to ',
        '\\leq': 'is less than or equal to ',
        '!': 'factorial ',
        '\\sin': 'sine ',
        '\\cos': 'cosine ',
        '\u200B': '',
        '\u2212': 'minus ',
        ':': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\hbar': 'etch bar ',
        '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\land': 'and ',
        '\\lor': 'or ',
        '\\neg': 'not ',
        '\\div': 'divided by ',
        '\\forall': 'for all ',
        '\\exists': 'there exists ',
        '\\nexists': 'there does not exists ',
        '\\in': 'element of ',
        '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
        '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
        '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
        '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
        '\\infty': 'infinity ',
        '\\nabla': 'nabla ',
        '\\partial': 'partial derivative of ',
        '\\cdot': 'times ',
        '\\cdots': 'dot dot dot ',
        '\\Rightarrow': 'implies ',
        '\\lparen': '<break time="150ms"/>open paren<break time="150ms"/>',
        '\\rparen': '<break time="150ms"/>close paren<break time="150ms"/>',
        '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
        '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
        '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
        '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
        '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
        '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
        '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
        '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
        '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
        '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
        '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
        '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
        mm: 'millimeters',
        cm: 'centimeters',
        km: 'kilometers',
        kg: 'kilograms'
    };

    function fe(ge) {
        let he = 0;
        if (d(ge))
            for (const ie of ge)
                'first' !== ie.type && (he += 1);
        return 1 === he;
    }

    function ge(he) {
        let ie = '';
        if (d(he))
            for (const je of he)
                'first' !== je.type && 'string' == typeof je.value && (ie += je.value);
        return ie;
    }

    function he(ie, je, ke) {
        var le, me, ne, oe;

        function pe(qe) {
            return '<emphasis>' + qe + '</emphasis>';
        }
        if (!je)
            return '';
        let qe = '';
        if (d(je)) {
            let re = !1,
                se = !1;
            for (let te = 0; te < je.length; te++)
                'text' !== je[te].mode && (se = !1), te < je.length - 2 && 'mopen' === je[te].type && 'mclose' === je[te + 2].type && 'mord' === je[te + 1].type ? (qe += ' of ', qe += pe(he(ie, je[te + 1], ke)), te += 2) : 'text' === je[te].mode ? se ? qe += null !== (le = je[te].value) && void 0 !== le ? le : ' ' : (se = !0, qe += he('text', je[te], ke)) : je[te].isDigit() ? re ? qe += je[te].asDigit() : (re = !0, qe += he(ie, je[te], ke)) : (re = !1, qe += he(ie, je[te], ke));
        } else if ('text' === je.mode)
            je.id && 'math' === ie && (qe += '<mark name="' + je.id.toString() + '"/>'), qe += je.value;
        else {
            je.id && 'math' === ie && (qe += '<mark name="' + je.id.toString() + '"/>');
            let re = '',
                se = '',
                te = '',
                ue = !1;
            switch (je.type) {
                case 'group':
                case 'root':
                    qe += he('math', je.body, ke);
                    break;
                case 'genfrac':
                    if (re = he('math', je.above, ke), se = he('math', je.below, ke), fe(je.above) && fe(je.below)) {
                        const ve = {
                            '1/2': ' half ',
                            '1/3': ' one third ',
                            '2/3': ' two third',
                            '1/4': ' one quarter ',
                            '3/4': ' three quarter ',
                            '1/5': ' one fifth ',
                            '2/5': ' two fifths ',
                            '3/5': ' three fifths ',
                            '4/5': ' four fifths ',
                            '1/6': ' one sixth ',
                            '5/6': ' five sixths ',
                            '1/8': ' one eight ',
                            '3/8': ' three eights ',
                            '5/8': ' five eights ',
                            '7/8': ' seven eights ',
                            '1/9': ' one ninth ',
                            '2/9': ' two ninths ',
                            '4/9': ' four ninths ',
                            '5/9': ' five ninths ',
                            '7/9': ' seven ninths ',
                            '8/9': ' eight ninths '
                        } [ge(je.above) + '/' + ge(je.below)];
                        ve ? qe = ve : qe += re + ' over ' + se;
                    } else
                        qe += ' the fraction <break time="150ms"/>' + re + ', over <break time="150ms"/>' + se + '.<break time="150ms"/> End fraction.<break time="150ms"/>';
                    break;
                case 'surd':
                    if (te = he('math', je.body, ke), je.hasEmptyBranch('above'))
                        qe += fe(je.body) ? ' the square root of ' + te + ' , ' : ' the square root of <break time="200ms"/>' + te + '. <break time="200ms"/> End square root';
                    else {
                        let ve = he('math', je.above, ke);
                        ve = ve.trim();
                        const we = ve.replace(/<mark([^/]*)\/>/g, '');
                        qe += '3' === we ? ' the cube root of <break time="200ms"/>' + te + '. <break time="200ms"/> End cube root' : 'n' === we ? ' the nth root of <break time="200ms"/>' + te + '. <break time="200ms"/> End root' : ' the root with index: <break time="200ms"/>' + ve + ', of <break time="200ms"/>' + te + '. <break time="200ms"/> End root';
                    }
                    break;
                case 'leftright': {
                    const ve = je;
                    qe += null !== (me = ve.leftDelim ? ee[ve.leftDelim] : void 0) && void 0 !== me ? me : ve.leftDelim, qe += he('math', je.body, ke), qe += null !== (ne = ve.rightDelim ? ee[ve.rightDelim] : void 0) && void 0 !== ne ? ne : ve.rightDelim;
                }
                break;
                case 'rule':
                case 'overunder':
                case 'overlap':
                    break;
                case 'placeholder':
                    qe += 'placeholder ';
                    break;
                case 'delim':
                case 'sizeddelim':
                case 'mord':
                case 'minner':
                case 'mbin':
                case 'mrel':
                case 'mpunct':
                case 'mopen':
                case 'mclose': {
                    const {
                        command: ve
                    } = je;
                    if ('\\mathbin' === ve || '\\mathrel' === ve || '\\mathopen' === ve || '\\mathclose' === ve || '\\mathpunct' === ve || '\\mathord' === ve || '\\mathinner' === ve) {
                        qe = he(ie, je.body, ke);
                        break;
                    }
                    let we = je.isDigit() ? je.asDigit() : je.value,
                        xe = je.command;
                    if ('delim' !== je.type && 'sizeddelim' !== je.type || (xe = je.value, we = xe), 'text' === ie)
                        qe += we;
                    else {
                        if ('mbin' === je.type && (qe += '<break time="150ms"/>'), we) {
                            const ye = ee[we] || (xe ? ee[xe.trim()] : '');
                            if (ye)
                                qe += ' ' + ye;
                            else {
                                const ze = xe ? function(Ae) {
                                    let Be = '';
                                    return Ae.startsWith('\\') && (Be = ' ' + Ae.replace('\\', '') + ' '), Be;
                                }(xe.trim()) : '';
                                qe += ze || (l = we, ke.textToSpeechMarkup ? /[a-z]/.test(l) ? ` <say-as interpret-as="character">${ l }</say-as>` : /[A-Z]/.test(l) ? `capital <say-as interpret-as="character">${ l.toLowerCase() }</say-as>` : l : /[a-z]/.test(l) ? ' \'' + l.toUpperCase() + '\'' : /[A-Z]/.test(l) ? ' \'capital ' + l.toUpperCase() + '\'' : l);
                            }
                        } else
                            qe += he('math', je.body, ke);
                        'mbin' === je.type && (qe += '<break time="150ms"/>');
                    }
                    break;
                }
                case 'mop':
                    if ('\u200B' !== je.value) {
                        const ve = je.command;
                        if ('\\sum' === ve)
                            if (je.hasEmptyBranch('superscript') || je.hasEmptyBranch('subscript'))
                                if (je.hasEmptyBranch('subscript'))
                                    qe += ' the summation of';
                                else {
                                    let we = he('math', je.subscript, ke);
                                    we = we.trim(), qe += ' the summation from <break time="200ms"/>' + we + '<break time="200ms"/> of <break time="150ms"/>', ue = !0;
                                }
                        else {
                            let we = he('math', je.superscript, ke);
                            we = we.trim();
                            let xe = he('math', je.subscript, ke);
                            xe = xe.trim(), qe += ' the summation from <break time="200ms"/>' + xe + '<break time="200ms"/> to  <break time="200ms"/>' + we + '<break time="200ms"/> of <break time="150ms"/>', ue = !0;
                        } else if ('\\prod' === ve)
                            if (je.hasEmptyBranch('superscript') || je.hasEmptyBranch('subscript'))
                                if (je.hasEmptyBranch('subscript'))
                                    qe += ' the product  of ';
                                else {
                                    let we = he('math', je.subscript, ke);
                                    we = we.trim(), qe += ' the product from <break time="200ms"/>' + we + '<break time="200ms"/> of <break time="150ms"/>', ue = !0;
                                }
                        else {
                            let we = he('math', je.superscript, ke);
                            we = we.trim();
                            let xe = he('math', je.subscript, ke);
                            xe = xe.trim(), qe += ' the product from <break time="200ms"/>' + xe + '<break time="200ms"/> to <break time="200ms"/>' + we + '<break time="200ms"/> of <break time="150ms"/>', ue = !0;
                        } else if ('\\int' === ve)
                            if (je.hasEmptyBranch('superscript') || je.hasEmptyBranch('subscript'))
                                qe += ' the integral of <break time="200ms"/> ';
                            else {
                                let we = he('math', je.superscript, ke);
                                we = we.trim();
                                let xe = he('math', je.subscript, ke);
                                xe = xe.trim(), qe += ' the integral from <break time="200ms"/>' + pe(xe) + '<break time="200ms"/> to <break time="200ms"/>' + pe(we) + ' <break time="200ms"/> of ', ue = !0;
                            }
                        else
                            'string' == typeof je.value ? qe += (null !== (oe = ee[je.value]) && void 0 !== oe ? oe : je.command ? ee[je.command] : void 0) || ' ' + je.value : je.command && ('\\mathop' === je.command ? qe += he('math', je.body, ke) : '\\operatorname' === je.command ? qe += (k = je.body) ? k.map(ve => ve.value).join('') : '' : qe += je.command.startsWith('\\') ? ' ' + je.command.slice(1) : ' ' + je.command);
                    }
                    break;
                case 'enclose':
                    te = he('math', je.body, ke), qe += ' crossed out ' + te + '. End crossed out.';
            }
            if (!ue && !je.hasEmptyBranch('superscript')) {
                let ve = he(ie, je.superscript, ke);
                ve = ve.trim();
                const we = ve.replace(/<[^>]*>/g, '');
                if (fe(je.superscript)) {
                    if ('math' === ie) {
                        const xe = function(ye) {
                            if (d(ye))
                                for (const ze of ye)
                                    if ('first' !== ze.type && ze.id)
                                        return ze.id.toString();
                            return '';
                        }(je.superscript);
                        xe && (qe += '<mark name="' + xe + '"/>');
                    }
                    '\u2032' === we ? qe += ' prime ' : '2' === we ? qe += ' squared ' : '3' === we ? qe += ' cubed ' : Number.isNaN(Number.parseInt(we)) ? qe += ' to the ' + ve + '; ' : qe += ' to the <say-as interpret-as="ordinal">' + we + '</say-as> power; ';
                } else
                    Number.isNaN(Number.parseInt(we)) ? qe += ' raised to the ' + ve + '; ' : qe += ' raised to the <say-as interpret-as="ordinal">' + we + '</say-as> power; ';
            }
            if (!ue && !je.hasEmptyBranch('subscript')) {
                let ve = he('math', je.subscript, ke);
                ve = ve.trim(), qe += fe(je.subscript) ? ' sub ' + ve : ' subscript ' + ve + '. End subscript. ';
            }
        }
        var re, se;
        return qe;
    }

    function ie(je, ke) {
        var le;
        const me = {
            ...ke,
            textToSpeechRulesOptions: {
                ...ke.textToSpeechRulesOptions
            }
        };
        if ('sre' === me.textToSpeechRules && 'sre' in globalThis) {
            const ne = _ae(je, me);
            return ne ? (me.textToSpeechMarkup && (me.textToSpeechRulesOptions = null !== (le = me.textToSpeechRulesOptions) && void 0 !== le ? le : {}, me.textToSpeechRulesOptions.markup = me.textToSpeechMarkup, 'ssml' === me.textToSpeechRulesOptions.markup && (me.textToSpeechRulesOptions.markup = 'ssml_step'), me.textToSpeechRulesOptions.rate = me.speechEngineRate), me.textToSpeechRulesOptions && globalThis.sre.System.getInstance().setupEngine(me.textToSpeechRulesOptions), globalThis.sre.System.getInstance().toSpeech(ne)) : '';
        }
        let ne = he('math', je, me);
        if ('ssml' === me.textToSpeechMarkup) {
            let oe = '';
            me.speechEngineRate && (oe = '<prosody rate="' + me.speechEngineRate + '">'), ne = '<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US"><amazon:auto-breaths>' + oe + '<p><s>' + ne + '</s></p>' + (oe ? '</prosody>' : '') + '</amazon:auto-breaths></speak>';
        } else
            ne = 'mac' === me.textToSpeechMarkup && 'macos' === i() ? ne.replace(/<mark([^/]*)\/>/g, '').replace(/<emphasis>/g, '[[emph+]]').replace(/<\/emphasis>/g, '').replace(/<break time="(\d*)ms"\/>/g, '[[slc $1]]').replace(/<say-as[^>]*>/g, '').replace(/<\/say-as>/g, '') : ne.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
        return ne;
    }

    function je(ke, le, me, ne) {
        const oe = le.split(' ');
        for (const pe of oe) {
            const qe = pe.match(/(.*):(.*)/);
            if (qe) {
                const re = null != ne ? ne : {};
                'active' === qe[2] ? re.passive = !1 : re[qe[2]] = !0, ke.addEventListener(qe[1], me, re);
            } else
                ke.addEventListener(pe, me, ne);
        }
    }

    function ke(le, me, ne, oe) {
        const pe = me.split(' ');
        for (const qe of pe) {
            const re = qe.match(/(.*):(.*)/);
            if (re) {
                const se = null != oe ? oe : {};
                'active' === re[2] ? se.passive = !1 : se[re[2]] = !0, le.removeEventListener(re[1], ne, se);
            } else
                le.removeEventListener(qe, ne, oe);
        }
    }

    function le(me) {
        var ne;
        f();
        let oe = document.getElementById(me);
        return oe ? oe.dataset.refcount = Number(Number.parseInt(null !== (ne = oe.getAttribute('data-refcount')) && void 0 !== ne ? ne : '0') + 1).toString() : (oe = document.createElement('div'), oe.setAttribute('aria-hidden', 'true'), oe.dataset.refcount = '1', oe.id = me, document.body.append(oe)), oe;
    }

    function me(ne) {
        var oe;
        if (!ne)
            return;
        const pe = Number.parseInt(null !== (oe = ne.getAttribute('data-refcount')) && void 0 !== oe ? oe : '0');
        pe <= 1 ? ne.remove() : ne.dataset.refcount = Number(pe - 1).toString();
    }

    function ne(oe) {
        var pe;
        return (null === (pe = oe.element) || void 0 === pe ? void 0 : pe.mathfield) === oe;
    }

    function oe(pe) {
        const qe = function(re) {
            var se, te;
            return null !== (te = null !== (se = re.querySelector('.ML__caret')) && void 0 !== se ? se : re.querySelector('.ML__text-caret')) && void 0 !== te ? te : re.querySelector('.ML__latex-caret');
        }(pe);
        if (!qe)
            return null;
        const re = qe.getBoundingClientRect();
        return {
            x: re.right,
            y: re.bottom,
            height: re.height
        };
    }

    function pe(qe) {
        var re;
        if (!qe.parent)
            return 'root';
        let se = null !== (re = qe.parent.id) && void 0 !== re ? re : '';
        return se += 'string' == typeof qe.treeBranch ? '-' + qe.treeBranch : `-${ qe.treeBranch[0] }/${ qe.treeBranch[0] }`, se;
    }

    function qe(re, se) {
        if (!se)
            return null;
        const te = re.field.getBoundingClientRect(),
            ue = se.right - se.left,
            ve = se.bottom - se.top,
            we = Math.ceil(se.left - te.left + re.field.scrollLeft),
            xe = Math.ceil(se.top - te.top);
        return {
            left: we,
            right: we + ue,
            top: xe,
            bottom: xe + ve
        };
    }

    function re(se) {
        const te = se.getBoundingClientRect(),
            ue = parseInt(getComputedStyle(se).marginRight),
            ve = {
                top: te.top - 1,
                bottom: te.bottom,
                left: te.left,
                right: te.right - 1 + ue
            };
        if (0 === se.children.length || 'SVG' === se.tagName.toUpperCase())
            return ve;
        for (const we of se.children)
            if (1 === we.nodeType && 'atomId' in we.dataset && !we.classList.contains('pstrut')) {
                const xe = re(we);
                ve.left = Math.min(ve.left, xe.left), ve.right = Math.max(ve.right, xe.right), ve.top = Math.min(ve.top, xe.top), ve.bottom = Math.max(ve.bottom, xe.bottom);
            }
        return ve;
    }

    function se(te, ue) {
        var ve, we;
        if (!ue.id)
            return null;
        let xe = null !== (we = null === (ve = te.atomBoundsCache) || void 0 === ve ? void 0 : ve.get(ue.id)) && void 0 !== we ? we : null;
        if (null !== xe)
            return xe;
        const ye = te.field.querySelector(`[data-atom-id="${ ue.id }"]`);
        return xe = ye ? re(ye) : null, te.atomBoundsCache && (xe ? te.atomBoundsCache.set(ue.id, xe) : te.atomBoundsCache.delete(ue.id)), null != xe ? xe : null;
    }

    function te(ue, ve) {
        return ue.model.selection.ranges.reduce((c, d) => c.concat(... function(we, xe, ye) {
            const ze = new Map();
            for (const Ae of we.model.getAtoms(xe, {
                    includeChildren: !0
                })) {
                if ((null == ye ? void 0 : ye.excludeAtomsWithBackground) && Ae.style.backgroundColor)
                    break;
                const Be = qe(we, se(we, Ae));
                if (Be) {
                    const Ce = pe(Ae);
                    if (ze.has(Ce)) {
                        const De = ze.get(Ce);
                        ze.set(Ce, {
                            left: Math.min(De.left, Be.left),
                            right: Math.max(De.right, Be.right),
                            top: Math.min(De.top, Be.top),
                            bottom: Math.max(De.bottom, Be.bottom)
                        });
                    } else
                        ze.set(Ce, Be);
                }
            }
            return [...ze.values()];
        }(ue, d, ve)), []);
    }

    function ue(ve, we) {
        return '*' === ve || 'none' === we || ('same-origin' === we ? !globalThis.origin || ve === globalThis.origin : 'function' == typeof we && we(ve));
    }

    function ve(we) {
        let xe = 0,
            ye = 0;
        const ze = we.offsetWidth,
            Ae = we.offsetHeight;
        for (; we instanceof HTMLElement;)
            xe += we.offsetTop, ye += we.offsetLeft, we = we.offsetParent;
        return new DOMRect(ye, xe, ze, Ae);
    }
    const we = {
            main: [
                'Main-Regular',
                'ML__cmr'
            ],
            'main-italic': [
                'Main-Italic',
                'ML__cmr ML__it'
            ],
            'main-bold': [
                'Main-Bold',
                'ML__cmr ML__bold'
            ],
            'main-bolditalic': [
                'Main-BoldItalic',
                'ML__cmr ML__bold ML__it'
            ],
            normal: [
                'Main-Regular',
                'ML__cmr'
            ],
            'normal-bold': [
                'Main-Bold',
                'ML__mathbf'
            ],
            'normal-italic': [
                'Math-Italic',
                'ML__mathit'
            ],
            'normal-bolditalic': [
                'Math-BoldItalic',
                'ML__mathbfit'
            ],
            ams: [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bold': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-italic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bolditalic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'sans-serif': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bold': [
                'SansSerif-Regular',
                'ML__sans ML__bold'
            ],
            'sans-serif-italic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bolditalic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            calligraphic: [
                'Caligraphic-Regular',
                'ML__cal'
            ],
            'calligraphic-bold': [
                'Caligraphic-Regular',
                'ML__cal ML__bold'
            ],
            'calligraphic-italic': [
                'Caligraphic-Regular',
                'ML__cal ML__it'
            ],
            'calligraphic-bolditalic': [
                'Caligraphic-Regular',
                'ML__cal ML__bold ML__it'
            ],
            script: [
                'Script-Regular',
                'ML__script'
            ],
            'script-bold': [
                'Script-Regular',
                'ML__script ML__bold'
            ],
            'script-italic': [
                'Script-Regular',
                'ML__script ML__it'
            ],
            'script-bolditalic': [
                'Script-Regular',
                'ML__script ML__bold ML__it'
            ],
            fraktur: [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bold': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-italic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bolditalic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            monospace: [
                'Typewriter-Regular',
                'ML__tt'
            ],
            'monospace-bold': [
                'Typewriter-Regular',
                'ML__tt ML__bold'
            ],
            'monospace-italic': [
                'Typewriter-Regular',
                'ML__tt ML__it'
            ],
            'monospace-bolditalic': [
                'Typewriter-Regular',
                'ML__tt ML__bold ML__it'
            ],
            'double-struck': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bold': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-italic': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bolditalic': [
                'AMS-Regular',
                'ML__bb'
            ]
        },
        xe = {
            'double-struck': /^[A-Z ]$/,
            script: /^[A-Z ]$/,
            calligraphic: /^[\dA-Z ]$/,
            fraktur: /^[\dA-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^\u2019\u2018]$/,
            monospace: /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
            'sans-serif': /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/
        },
        ye = /^[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5]$/,
        ze = [
            /^[a-z]$/,
            /^[A-Z]$/,
            ye,
            /^[\u0393|\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A6\u03A8\u03A9]$/
        ],
        Ae = {
            iso: [
                'it',
                'it',
                'it',
                'it'
            ],
            tex: [
                'it',
                'it',
                'it',
                'up'
            ],
            french: [
                'it',
                'up',
                'up',
                'up'
            ],
            upright: [
                'up',
                'up',
                'up',
                'up'
            ]
        };

    function Be(Ce) {
        if (!Ce)
            return '';
        const {
            style: De
        } = Ce;
        if (void 0 === De.variant)
            return '';
        let Ee = De.variant;
        return De.variantStyle && 'up' !== De.variantStyle && (Ee += '-' + De.variantStyle), Ee;
    }

    function Ce(De) {
        return [
            ec(De.map(De => De[0])),
            De.map(De => De[1]).some(De => !0 === De)
        ];
    }
    new class extends Hb {
        createAtom(De, Ee, Fe) {
            var Ge, He, Ie, Je, Ke;
            const Le = Ee.getDefinition(De, 'math');
            if (null === Le)
                return new kc('mord', Ee, {
                    mode: 'math',
                    command: De,
                    value: De,
                    style: Fe
                });
            if ('symbol' === Le.definitionType) {
                const Me = new kc(null !== (Ge = Le.type) && void 0 !== Ge ? Ge : 'mord', Ee, {
                    mode: 'math',
                    command: null !== (He = Le.command) && void 0 !== He ? He : De,
                    value: String.fromCodePoint(Le.codepoint),
                    style: Fe
                });
                return null !== (Ie = Le.isFunction) && void 0 !== Ie && Ie && (Me.isFunction = !0), De.startsWith('\\') && (Me.verbatimLatex = De), Me;
            }
            const Me = new kc('mord', Ee, {
                mode: 'math',
                command: null !== (Je = Le.command) && void 0 !== Je ? Je : De,
                value: De,
                style: Fe
            });
            return null !== (Ke = Le.isFunction) && void 0 !== Ke && Ke && (Me.isFunction = !0), De.startsWith('\\') && (Me.verbatimLatex = De), Me;
        }
        serialize(De, Ee) {
            const {
                parent: Fe
            } = De[0], Ge = null == Fe ? void 0 : Fe.computedStyle.fontSize;
            return ec(Ib(De, 'fontSize').map(De => {
                const He = function(Ie, Je) {
                        const {
                            parent: Ke
                        } = Ie[0], Le = null == Ke ? void 0 : Ke.computedStyle.backgroundColor;
                        return ec(Ib(Ie, 'backgroundColor').map(Ie => {
                            var Me, Ne;
                            let Oe = function(Pe, Qe) {
                                const {
                                    parent: Re
                                } = Pe[0], Se = null == Re ? void 0 : Re.computedStyle.color;
                                return ec(Ib(Pe, 'color').map(Pe => {
                                    var Te, Ue;
                                    const Ve = function(We, Xe) {
                                            var Ye;
                                            const {
                                                parent: Ze
                                            } = We[0], $e = Be(Ze), af = null !== (Ye = null == Ze ? void 0 : Ze.mode) && void 0 !== Ye ? Ye : 'math';
                                            return ec(Ib(We, 'variant').map(We => {
                                                const bf = Be(We[0]);
                                                if (We.every(We => {
                                                        const cf = We.context.getDefinition(We.command, af);
                                                        return !(!cf || 'function' === cf.definitionType || !cf.variant) && Be(We) === bf;
                                                    }))
                                                    return ec(We.map(We => kc.serialize(We, Xe)));
                                                let cf = '';
                                                return bf && bf !== $e && (cf = {
                                                    calligraphic: '\\mathcal{',
                                                    fraktur: '\\mathfrak{',
                                                    'double-struck': '\\mathbb{',
                                                    script: '\\mathscr{',
                                                    monospace: '\\mathtt{',
                                                    'sans-serif': '\\mathsf{',
                                                    normal: '\\mathrm{',
                                                    'normal-italic': '\\mathnormal{',
                                                    'normal-bold': '\\mathbf{',
                                                    'normal-bolditalic': '\\mathbfit{',
                                                    ams: '',
                                                    'ams-italic': '\\mathit{',
                                                    'ams-bold': '\\mathbf{',
                                                    'ams-bolditalic': '\\mathbfit{',
                                                    main: '',
                                                    'main-italic': '\\mathit{',
                                                    'main-bold': '\\mathbf{',
                                                    'main-bolditalic': '\\mathbfit{'
                                                } [bf]), cf ? cf + ec(We.map(We => kc.serialize(We, Xe))) + '}' : ec(We.map(We => kc.serialize(We, Xe)));
                                            }));
                                        }(Pe, Qe),
                                        We = Pe[0].computedStyle;
                                    return null !== (Te = Qe.skipStyles) && void 0 !== Te && Te || !We.color || Re && Se === We.color ? Ve : '\\textcolor{' + (null !== (Ue = We.verbatimColor) && void 0 !== Ue ? Ue : We.color) + '}{' + Ve + '}';
                                }));
                            }(Ie, Je);
                            const Pe = Ie[0].computedStyle;
                            return null !== (Me = Je.skipStyles) && void 0 !== Me && Me || !Oe.trim() || !Pe.backgroundColor || Ke && Le === Pe.backgroundColor || !(Ie.length > 0) && Ie[0] instanceof Uc || (Oe = `\\ensuremath{${ Oe }}`, Oe = `\\colorbox{${ null !== (Ne = Pe.verbatimBackgroundColor) && void 0 !== Ne ? Ne : Pe.backgroundColor }}{${ Oe }}`), Oe;
                        }));
                    }(De, Ee),
                    Ie = De[0].computedStyle.fontSize;
                return !Ie || Fe && Ge === Ie ? He : '\\' + [
                    '',
                    'tiny',
                    'scriptsize',
                    'footnotesize',
                    'small',
                    'normalsize',
                    'large',
                    'Large',
                    'LARGE',
                    'huge',
                    'Huge'
                ][Ie] + ' ' + He;
            }));
        }
        applyStyle(De, Ee) {
            if (void 0 === Ee.variant)
                return '';
            const Fe = 'auto' !== Ee.letterShapeStyle && Ee.letterShapeStyle ? Ee.letterShapeStyle : 'tex';
            let {
                variant: Ge
            } = Ee, {
                variantStyle: He
            } = Ee;
            'normal' === Ge && !He && /[\u00A3\u0131\u0237]/.test(De.value) && (Ge = 'main', He = 'italic'), 'normal' !== Ge || He || 1 !== De.value.length || ze.forEach((Ee, Ge) => {
                Ee.test(De.value) && 'it' === Ae[Fe][Ge] && (He = 'italic');
            }), 'up' === He && (He = void 0);
            const Ie = He ? Ge + '-' + He : Ge,
                [Je, Ke] = we[Ie];
            return xe[Ge] && !xe[Ge].test(De.value) ? (De.value = function(Le, Me, Ne) {
                if (!/[A-Za-z\d]/.test(Le))
                    return Le;
                if (!Me && !Ne)
                    return Le;
                const Oe = Le.codePointAt(0);
                if (void 0 === Oe)
                    return Le;
                for (const Pe of L)
                    if ((!Me || Pe.variant === Me) && (!Ne || Pe.style === Ne) && Oe >= Pe.offset && Oe < Pe.offset + Pe.len) {
                        const Qe = Pe.start + Oe - Pe.offset;
                        return String.fromCodePoint(K[Qe] || Qe);
                    }
                return Pe;
            }(De.value, Ge, He), null) : (ye.test(De.value) && (De.classes += ' lcGreek'), Ke && (De.classes += ' ' + Ke), Je);
        }
        constructor() {
            super('math');
        }
    }();
    const De = {
        roman: '',
        'sans-serif': 'ML__sans',
        monospace: 'ML__tt'
    };

    function Ee(Fe) {
        let Ge = 0;
        for (let He = 0; He < Fe.length; He++)
            Ge = Math.imul(31, Ge) + Fe.charCodeAt(He) | 0;
        return Math.abs(Ge);
    }

    function Fe(Ge, He, Ie) {
        var Je, Ke;
        if (f(), !He)
            return null;
        let Le = null !== (Je = null == Ge ? void 0 : Ge.getRootNode()) && void 0 !== Je ? Je : null === document || void 0 === document ? void 0 : document.head;
        if (!Le)
            return null;
        Le === document && (Le = document.head);
        const Me = Le.querySelector(`style[data-id="${ Ie }"]`);
        if (Me) {
            const Ne = Number.parseFloat(null !== (Ke = Me.getAttribute('data-refcount')) && void 0 !== Ke ? Ke : '0');
            Me.dataset.refcount = Number(Ne + 1).toString();
        } else {
            const Ne = document.createElement('style');
            Ne.dataset.id = Ie, Ne.dataset.refcount = '1', Ne.append(document.createTextNode(He)), Le.appendChild(Ne);
        }
        return {
            release: () => {
                var Ne;
                const Oe = document.head.querySelector(`style[data-id="${ Ie }"]`);
                if (Oe) {
                    const Pe = Number.parseFloat(null !== (Ne = Oe.getAttribute('data-refcount')) && void 0 !== Ne ? Ne : '0');
                    1 === Pe ? Oe.remove() : Oe.dataset.refcount = Number(Pe - 1).toString();
                }
            }
        };
    }

    function Ge(He) {
        const Ie = He.split('+'),
            Je = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: Ie.pop()
            };
        return Ie.includes('shift') && (Je.shift = !0), Ie.includes('alt') && (Je.alt = !0), Ie.includes('ctrl') && (Je.ctrl = !0), Ie.includes('cmd') && (Je.cmd = !0), Ie.includes('win') && (Je.win = !0), Ie.includes('meta') && (Je.meta = !0), Je;
    }

    function He(Ie) {
        let Je = '';
        return Ie.shift && (Je += 'shift+'), Ie.alt && (Je += 'alt+'), Ie.ctrl && (Je += 'ctrl+'), Ie.cmd && (Je += 'cmd+'), Ie.win && (Je += 'win+'), Ie.meta && (Je += 'meta+'), Je + Ie.key;
    }
    new class extends Hb {
        createAtom(Ie, Je, Ke) {
            const Le = Je.getDefinition(Ie, 'text');
            return Le && 'symbol' === Le.definitionType ? new Nc(Ie, String.fromCodePoint(Le.codepoint), null != Ke ? Ke : {}, Je) : null;
        }
        serialize(Ie, Je) {
            var Ke;
            let [Le, Me] = function(Ne, Oe) {
                return Ce(Ib(Ne, 'backgroundColor').map(Ne => {
                    var Pe, Qe;
                    const [Re, Se] = function(Te, Ue) {
                        var Ve;
                        if (!Te || 0 === Te.length)
                            return [
                                '',
                                !1
                            ];
                        const We = null === (Ve = Te[0].parent) || void 0 === Ve ? void 0 : Ve.style.color;
                        return Ce(Ib(Te, 'color').map(Te => {
                            var Xe, Ye;
                            const [Ze, $e] = function(af, bf) {
                                return function(cf, df) {
                                    return Ce(Ib(cf, 'fontFamily').map(cf => {
                                        var ef, ff;
                                        const [gf, hf] = function(jf, kf) {
                                            return Ce(Ib(jf, 'fontSize').map(jf => {
                                                var lf, mf;
                                                const [nf, pf] = function(qf, rf) {
                                                    return Ce(Ib(qf, 'fontSeries').map(qf => {
                                                        const [sf, tf] = function(uf, vf) {
                                                            return Ce(Ib(uf, 'fontShape').map(uf => {
                                                                const [wf, xf] = function(yf, zf) {
                                                                    return [
                                                                        ec(yf.map(yf => kc.serialize(yf, zf))),
                                                                        !0
                                                                    ];
                                                                }(uf, vf), {
                                                                    fontShape: yf
                                                                } = uf[0].style;
                                                                return 'it' === yf ? [
                                                                    '\\textit{' + wf + '}',
                                                                    !1
                                                                ] : 'sl' === yf ? [
                                                                    '\\textsl{' + wf + '}',
                                                                    !1
                                                                ] : 'sc' === yf ? [
                                                                    '\\textsc{' + wf + '}',
                                                                    !1
                                                                ] : 'n' === yf ? [
                                                                    '\\textup{' + wf + '}',
                                                                    !1
                                                                ] : yf ? [
                                                                    `{\\fontshape{${ uf[0].style.fontShape }}${ wf }`,
                                                                    !1
                                                                ] : [
                                                                    wf,
                                                                    xf
                                                                ];
                                                            }));
                                                        }(qf, rf), {
                                                            fontSeries: uf
                                                        } = qf[0].style;
                                                        return 'b' === uf ? [
                                                            `\\textbf{${ sf }}`,
                                                            !1
                                                        ] : 'l' === uf ? [
                                                            `\\textlf{${ sf }}`,
                                                            !1
                                                        ] : 'm' === uf ? [
                                                            `\\textmd{${ sf }}`,
                                                            !1
                                                        ] : uf ? [
                                                            `\\fontseries{${ uf }}${ sf }`,
                                                            !1
                                                        ] : [
                                                            sf,
                                                            tf
                                                        ];
                                                    }));
                                                }(jf, kf), qf = null !== (mf = [
                                                    '',
                                                    'tiny',
                                                    'scriptsize',
                                                    'footnotesize',
                                                    'small',
                                                    'normalsize',
                                                    'large',
                                                    'Large',
                                                    'LARGE',
                                                    'huge',
                                                    'Huge'
                                                ][null !== (lf = jf[0].style.fontSize) && void 0 !== lf ? lf : '']) && void 0 !== mf ? mf : '';
                                                return qf ? [
                                                    `{\\${ qf } ${ nf }}`,
                                                    pf
                                                ] : [
                                                    nf,
                                                    pf
                                                ];
                                            }));
                                        }(cf, df), jf = null !== (ff = {
                                            roman: 'textrm',
                                            monospace: 'texttt',
                                            'sans-serif': 'textsf'
                                        } [null !== (ef = cf[0].style.fontFamily) && void 0 !== ef ? ef : '']) && void 0 !== ff ? ff : '';
                                        return jf ? [
                                            `\\${ jf }{${ gf }}`,
                                            !1
                                        ] : cf[0].style.fontFamily ? [
                                            `\\fontfamily{${ cf[0].style.fontFamily }}${ gf }`,
                                            hf
                                        ] : [
                                            gf,
                                            hf
                                        ];
                                    }));
                                }(af, bf);
                            }(Te, Ue);
                            return null !== (Xe = Ue.skipStyles) && void 0 !== Xe && Xe || !Te[0].style.color || 'none' === Te[0].style.color || We === Te[0].style.color ? [
                                Ze,
                                $e
                            ] : [
                                `\\textcolor{${ null !== (Ye = Te[0].style.verbatimColor) && void 0 !== Ye ? Ye : Te[0].style.color }}{${ Ze }}`,
                                !1
                            ];
                        }));
                    }(Ne, Oe), Te = Ne[0].computedStyle;
                    return null !== (Pe = Oe.skipStyles) && void 0 !== Pe && Pe || !Te.backgroundColor || 'none' === Te.backgroundColor ? [
                        Re,
                        Se
                    ] : [
                        `\\colorbox{${ null !== (Qe = Te.verbatimBackgroundColor) && void 0 !== Qe ? Qe : Te.backgroundColor }}{${ Re }}`,
                        !1
                    ];
                }));
            }(Ie, Je);
            return !0 === (null !== (Ke = Je.skipModeCommand) && void 0 !== Ke && Ke) && (Me = !1), Me && (Le = `\\text{${ Le }}`), Le;
        }
        applyStyle(Ie, Je) {
            var Ke, Le, Me, Ne, Oe, Pe;
            const {
                fontFamily: Qe
            } = Je;
            if (De[Qe] ? Ie.classes += void 0 !== (Ke = ' ' + De[Qe]) ? Ke : '' : Qe && Ie.setStyle('font-family', Qe), Je.fontShape && (Ie.classes += ' ', Ie.classes += null !== (Le = {
                    it: 'ML__it',
                    sl: 'ML__shape_sl',
                    sc: 'ML__shape_sc',
                    ol: 'ML__shape_ol'
                } [Je.fontShape]) && void 0 !== Le ? Le : ''), Je.fontSeries) {
                const Re = Je.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
                Re && (Ie.classes += ' ', Ie.classes += null !== (Ne = {
                    ul: 'ML__series_ul',
                    el: 'ML__series_el',
                    l: 'ML__series_l',
                    sl: 'ML__series_sl',
                    m: '',
                    sb: 'ML__series_sb',
                    b: 'ML__bold',
                    eb: 'ML__series_eb',
                    ub: 'ML__series_ub'
                } [null !== (Me = Re[1]) && void 0 !== Me ? Me : '']) && void 0 !== Ne ? Ne : '', Ie.classes += ' ', Ie.classes += null !== (Pe = {
                    uc: 'ML__series_uc',
                    ec: 'ML__series_ec',
                    c: 'ML__series_c',
                    sc: 'ML__series_sc',
                    n: '',
                    sx: 'ML__series_sx',
                    x: 'ML__series_x',
                    ex: 'ML__series_ex',
                    ux: 'ML__series_ux'
                } [null !== (Oe = Re[2]) && void 0 !== Oe ? Oe : '']) && void 0 !== Pe ? Pe : '');
            }
            return 'Main-Regular';
        }
        constructor() {
            super('text');
        }
    }(), new class extends Hb {
        createAtom(Ie, Je, Ke) {
            return new gd(Ie, Je);
        }
        serialize(Ie, Je) {
            return Ie.filter(Ie => Ie instanceof gd && !Ie.isSuggestion).map(Ie => Ie.value).join('');
        }
        applyStyle() {
            return null;
        }
        constructor() {
            super('latex');
        }
    }();
    const Ie = 'apple' === _Le() ? {
            id: 'apple.en-intl',
            displayName: 'English (international)',
            virtualLayout: 'qwerty',
            platform: 'apple',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'å',
                    'Å'
                ],
                KeyB: [
                    'b',
                    'B',
                    '\u222B',
                    'ı'
                ],
                KeyC: [
                    'c',
                    'C',
                    'ç',
                    'Ç'
                ],
                KeyD: [
                    'd',
                    'D',
                    '\u2202',
                    'Î'
                ],
                KeyE: [
                    'e',
                    'E',
                    '\xB4',
                    '\xB4'
                ],
                KeyF: [
                    'f',
                    'F',
                    'ƒ',
                    'Ï'
                ],
                KeyG: [
                    'g',
                    'G',
                    '\xA9',
                    '\u02DD'
                ],
                KeyH: [
                    'h',
                    'H',
                    '\u02D9',
                    'Ó'
                ],
                KeyI: [
                    'i',
                    'I',
                    'ˆ',
                    'ˆ'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '\u2206',
                    'Ô'
                ],
                KeyK: [
                    'k',
                    'K',
                    '\u02DA',
                    '\uF8FF'
                ],
                KeyL: [
                    'l',
                    'L',
                    '\xAC',
                    'Ò'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    'Â'
                ],
                KeyN: [
                    'n',
                    'N',
                    '\u02DC',
                    '\u02DC'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ø',
                    'Ø'
                ],
                KeyP: [
                    'p',
                    'P',
                    'π',
                    '\u220F'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'œ',
                    'Œ'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    '\u2030'
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    'Í'
                ],
                KeyT: [
                    't',
                    'T',
                    '\u2020',
                    'ˇ'
                ],
                KeyU: [
                    'u',
                    'U',
                    '\xA8',
                    '\xA8'
                ],
                KeyV: [
                    'v',
                    'V',
                    '\u221A',
                    '\u25CA'
                ],
                KeyW: [
                    'w',
                    'W',
                    '\u2211',
                    '\u201E'
                ],
                KeyX: [
                    'x',
                    'X',
                    '\u2248',
                    '\u02DB'
                ],
                KeyY: [
                    'y',
                    'Y',
                    '\xA5',
                    'Á'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'Ω',
                    '\xB8'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\u2044'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\u2122',
                    '\u20AC'
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xA3',
                    '\u2039'
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA2',
                    '\u203A'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u221E',
                    'ﬁ'
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xA7',
                    'ﬂ'
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xB6',
                    '\u2021'
                ],
                Digit8: [
                    '8',
                    '*',
                    '\u2022',
                    '\xB0'
                ],
                Digit9: [
                    '9',
                    '(',
                    'ª',
                    '\xB7'
                ],
                Digit0: [
                    '0',
                    ')',
                    'º',
                    '\u201A'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '\u2013',
                    '\u2014'
                ],
                Equal: [
                    '=',
                    '+',
                    '\u2260',
                    '\xB1'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\u201C',
                    '\u201D'
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\u2018',
                    '\u2019'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAB',
                    '\xBB'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\u2026',
                    'Ú'
                ],
                Quote: [
                    '\'',
                    '"',
                    'æ',
                    'Æ'
                ],
                Backquote: [
                    '`',
                    '\u02DC',
                    '`',
                    '`'
                ],
                Comma: [
                    ',',
                    '<',
                    '\u2264',
                    '\xAF'
                ],
                Period: [
                    '.',
                    '>',
                    '\u2265',
                    '\u02D8'
                ],
                Slash: [
                    '/',
                    '?',
                    '\xF7',
                    '\xBF'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                IntlBackslash: [
                    '\xA7',
                    '\xB1',
                    '\xA7',
                    '\xB1'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                AudioVolumeUp: [
                    '',
                    '=',
                    '',
                    '='
                ]
            }
        } : 'windows' === _Le() ? {
            id: 'windows.en-intl',
            displayName: 'English (international)',
            platform: 'windows',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'á',
                    'Á'
                ],
                KeyB: [
                    'b',
                    'B',
                    '',
                    ''
                ],
                KeyC: [
                    'c',
                    'C',
                    '\xA9',
                    '\xA2'
                ],
                KeyD: [
                    'd',
                    'D',
                    'ð',
                    'Ð'
                ],
                KeyE: [
                    'e',
                    'E',
                    'é',
                    'É'
                ],
                KeyF: [
                    'f',
                    'F',
                    '',
                    ''
                ],
                KeyG: [
                    'g',
                    'G',
                    '',
                    ''
                ],
                KeyH: [
                    'h',
                    'H',
                    '',
                    ''
                ],
                KeyI: [
                    'i',
                    'I',
                    'í',
                    'Í'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '',
                    ''
                ],
                KeyK: [
                    'k',
                    'K',
                    '',
                    ''
                ],
                KeyL: [
                    'l',
                    'L',
                    'ø',
                    'Ø'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    ''
                ],
                KeyN: [
                    'n',
                    'N',
                    'ñ',
                    'Ñ'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ó',
                    'Ó'
                ],
                KeyP: [
                    'p',
                    'P',
                    'ö',
                    'Ö'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'ä',
                    'Ä'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    ''
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    '\xA7'
                ],
                KeyT: [
                    't',
                    'T',
                    'þ',
                    'Þ'
                ],
                KeyU: [
                    'u',
                    'U',
                    'ú',
                    'Ú'
                ],
                KeyV: [
                    'v',
                    'V',
                    '',
                    ''
                ],
                KeyW: [
                    'w',
                    'W',
                    'å',
                    'Å'
                ],
                KeyX: [
                    'x',
                    'X',
                    '',
                    ''
                ],
                KeyY: [
                    'y',
                    'Y',
                    'ü',
                    'Ü'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'æ',
                    'Æ'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\xB9'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\xB2',
                    ''
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xB3',
                    ''
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA4',
                    '\xA3'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u20AC',
                    ''
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xBC',
                    ''
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xBD',
                    ''
                ],
                Digit8: [
                    '8',
                    '*',
                    '\xBE',
                    ''
                ],
                Digit9: [
                    '9',
                    '(',
                    '\u2018',
                    ''
                ],
                Digit0: [
                    '0',
                    ')',
                    '\u2019',
                    ''
                ],
                Space: [
                    ' ',
                    ' ',
                    '',
                    ''
                ],
                Minus: [
                    '-',
                    '_',
                    '\xA5',
                    ''
                ],
                Equal: [
                    '=',
                    '+',
                    '\xD7',
                    '\xF7'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\xAB',
                    ''
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\xBB',
                    ''
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAC',
                    '\xA6'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\xB6',
                    '\xB0'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\xB4',
                    '\xA8'
                ],
                Backquote: [
                    '`',
                    '~',
                    '',
                    ''
                ],
                Comma: [
                    ',',
                    '<',
                    'ç',
                    'Ç'
                ],
                Period: [
                    '.',
                    '>',
                    '',
                    ''
                ],
                Slash: [
                    '/',
                    '?',
                    '\xBF',
                    ''
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '',
                    ''
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '',
                    ''
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '',
                    ''
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '',
                    ''
                ],
                IntlBackslash: [
                    '\\',
                    '|',
                    '',
                    ''
                ]
            }
        } : {
            id: 'linux.en',
            displayName: 'English',
            platform: 'linux',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'a',
                    'A'
                ],
                KeyB: [
                    'b',
                    'B',
                    'b',
                    'B'
                ],
                KeyC: [
                    'c',
                    'C',
                    'c',
                    'C'
                ],
                KeyD: [
                    'd',
                    'D',
                    'd',
                    'D'
                ],
                KeyE: [
                    'e',
                    'E',
                    'e',
                    'E'
                ],
                KeyF: [
                    'f',
                    'F',
                    'f',
                    'F'
                ],
                KeyG: [
                    'g',
                    'G',
                    'g',
                    'G'
                ],
                KeyH: [
                    'h',
                    'H',
                    'h',
                    'H'
                ],
                KeyI: [
                    'i',
                    'I',
                    'i',
                    'I'
                ],
                KeyJ: [
                    'j',
                    'J',
                    'j',
                    'J'
                ],
                KeyK: [
                    'k',
                    'K',
                    'k',
                    'K'
                ],
                KeyL: [
                    'l',
                    'L',
                    'l',
                    'L'
                ],
                KeyM: [
                    'm',
                    'M',
                    'm',
                    'M'
                ],
                KeyN: [
                    'n',
                    'N',
                    'n',
                    'N'
                ],
                KeyO: [
                    'o',
                    'O',
                    'o',
                    'O'
                ],
                KeyP: [
                    'p',
                    'P',
                    'p',
                    'P'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'q',
                    'Q'
                ],
                KeyR: [
                    'r',
                    'R',
                    'r',
                    'R'
                ],
                KeyS: [
                    's',
                    'S',
                    's',
                    'S'
                ],
                KeyT: [
                    't',
                    'T',
                    't',
                    'T'
                ],
                KeyU: [
                    'u',
                    'U',
                    'u',
                    'U'
                ],
                KeyV: [
                    'v',
                    'V',
                    'v',
                    'V'
                ],
                KeyW: [
                    'w',
                    'W',
                    'w',
                    'W'
                ],
                KeyX: [
                    'x',
                    'X',
                    'x',
                    'X'
                ],
                KeyY: [
                    'y',
                    'Y',
                    'y',
                    'Y'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'z',
                    'Z'
                ],
                Digit1: [
                    '1',
                    '!',
                    '1',
                    '!'
                ],
                Digit2: [
                    '2',
                    '@',
                    '2',
                    '@'
                ],
                Digit3: [
                    '3',
                    '#',
                    '3',
                    '#'
                ],
                Digit4: [
                    '4',
                    '$',
                    '4',
                    '$'
                ],
                Digit5: [
                    '5',
                    '%',
                    '5',
                    '%'
                ],
                Digit6: [
                    '6',
                    '^',
                    '6',
                    '^'
                ],
                Digit7: [
                    '7',
                    '&',
                    '7',
                    '&'
                ],
                Digit8: [
                    '8',
                    '*',
                    '8',
                    '*'
                ],
                Digit9: [
                    '9',
                    '(',
                    '9',
                    '('
                ],
                Digit0: [
                    '0',
                    ')',
                    '0',
                    ')'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '-',
                    '_'
                ],
                Equal: [
                    '=',
                    '+',
                    '=',
                    '+'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '[',
                    '{'
                ],
                BracketRight: [
                    ']',
                    '}',
                    ']',
                    '}'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\\',
                    '|'
                ],
                Semicolon: [
                    ';',
                    ':',
                    ';',
                    ':'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\'',
                    '"'
                ],
                Backquote: [
                    '`',
                    '~',
                    '`',
                    '~'
                ],
                Comma: [
                    ',',
                    '<',
                    ',',
                    '<'
                ],
                Period: [
                    '.',
                    '>',
                    '.',
                    '>'
                ],
                Slash: [
                    '/',
                    '?',
                    '/',
                    '?'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '',
                    '.',
                    '',
                    '.'
                ],
                IntlBackslash: [
                    '<',
                    '>',
                    '|',
                    '\xA6'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                NumpadComma: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                NumpadParenLeft: [
                    '(',
                    '(',
                    '(',
                    '('
                ],
                NumpadParenRight: [
                    ')',
                    ')',
                    ')',
                    ')'
                ]
            }
        },
        Je = {
            enter: '[Enter]',
            escape: '[Escape]',
            backspace: '[Backspace]',
            tab: '[Tab]',
            space: '[Space]',
            pausebreak: '[Pause]',
            insert: '[Insert]',
            home: '[Home]',
            pageup: '[PageUp]',
            delete: '[Delete]',
            end: '[End]',
            pagedown: '[PageDown]',
            right: '[ArrowRight]',
            left: '[ArrowLeft]',
            down: '[ArrowDown]',
            up: '[ArrowUp]',
            numpad0: '[Numpad0]',
            numpad1: '[Numpad1]',
            numpad2: '[Numpad2]',
            numpad3: '[Numpad3]',
            numpad4: '[Numpad4]',
            numpad5: '[Numpad5]',
            numpad6: '[Numpad6]',
            numpad7: '[Numpad7]',
            numpad8: '[Numpad8]',
            numpad9: '[Numpad9]',
            numpad_divide: '[NumpadDivide]',
            numpad_multiply: '[NumpadMultiply]',
            numpad_subtract: '[NumpadSubtract]',
            numpad_add: '[NumpadAdd]',
            numpad_decimal: '[NumpadDecimal]',
            numpad_separator: '[NumpadComma]',
            capslock: '[Capslock]',
            f1: '[F1]',
            f2: '[F2]',
            f3: '[F3]',
            f4: '[F4]',
            f5: '[F5]',
            f6: '[F6]',
            f7: '[F7]',
            f8: '[F8]',
            f9: '[F9]',
            f10: '[F10]',
            f11: '[F11]',
            f12: '[F12]',
            f13: '[F13]',
            f14: '[F14]',
            f15: '[F15]',
            f16: '[F16]',
            f17: '[F17]',
            f18: '[F18]',
            f19: '[F19]'
        },
        Ke = [];

    function _Le() {
        switch (i()) {
            case 'macos':
            case 'ios':
                return 'apple';
            case 'windows':
                return 'windows';
        }
        return 'linux';
    }

    function Me(Ne) {
        Ne.platform && Ne.platform !== _Le() || Ke.push(Ne);
    }

    function Ne() {
        return Ke[0];
    }
    Me(Ie), Me({
        id: 'apple.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'apple',
        virtualLayout: 'azerty',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '\u2021',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                '\u222B'
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                '\xA2'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                'ê',
                'Ê'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                '\xB7'
            ],
            KeyG: [
                'g',
                'G',
                'ﬁ',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                'Ì',
                'Î'
            ],
            KeyI: [
                'i',
                'I',
                'î',
                'ï'
            ],
            KeyJ: [
                'j',
                'J',
                'Ï',
                'Í'
            ],
            KeyK: [
                'k',
                'K',
                'È',
                'Ë'
            ],
            KeyL: [
                'l',
                'L',
                '\xAC',
                '|'
            ],
            KeyM: [
                ',',
                '?',
                '\u221E',
                '\xBF'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                'ı'
            ],
            KeyO: [
                'o',
                'O',
                'œ',
                'Œ'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\u201A'
            ],
            KeyS: [
                's',
                'S',
                'Ò',
                '\u2211'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2122'
            ],
            KeyU: [
                'u',
                'U',
                'º',
                'ª'
            ],
            KeyV: [
                'v',
                'V',
                '\u25CA',
                '\u221A'
            ],
            KeyW: [
                'z',
                'Z',
                'Â',
                'Å'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                '\u2044'
            ],
            KeyY: [
                'y',
                'Y',
                'Ú',
                'Ÿ'
            ],
            KeyZ: [
                'w',
                'W',
                '\u2039',
                '\u203A'
            ],
            Digit1: [
                '&',
                '1',
                '\uF8FF',
                '\xB4'
            ],
            Digit2: [
                'é',
                '2',
                'ë',
                '\u201E'
            ],
            Digit3: [
                '"',
                '3',
                '\u201C',
                '\u201D'
            ],
            Digit4: [
                '\'',
                '4',
                '\u2018',
                '\u2019'
            ],
            Digit5: [
                '(',
                '5',
                '{',
                '['
            ],
            Digit6: [
                '\xA7',
                '6',
                '\xB6',
                'å'
            ],
            Digit7: [
                'è',
                '7',
                '\xAB',
                '\xBB'
            ],
            Digit8: [
                '!',
                '8',
                '\xA1',
                'Û'
            ],
            Digit9: [
                'ç',
                '9',
                'Ç',
                'Á'
            ],
            Digit0: [
                'à',
                '0',
                'ø',
                'Ø'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                '}',
                ']'
            ],
            Equal: [
                '-',
                '_',
                '\u2014',
                '\u2013'
            ],
            BracketLeft: [
                '^',
                '\xA8',
                'ô',
                'Ô'
            ],
            BracketRight: [
                '$',
                '*',
                '\u20AC',
                '\xA5'
            ],
            Backslash: [
                '`',
                '\xA3',
                '@',
                '#'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'Ó'
            ],
            Quote: [
                'ù',
                '%',
                'Ù',
                '\u2030'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ';',
                '.',
                '\u2026',
                '\u2022'
            ],
            Period: [
                ':',
                '/',
                '\xF7',
                '\\'
            ],
            Slash: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                '.',
                ',',
                '.'
            ],
            IntlBackslash: [
                '@',
                '#',
                '\u2022',
                'Ÿ'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Me({
        id: 'apple.spanish',
        locale: 'es',
        displayName: 'Spanish ISO',
        platform: 'apple',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                ' '
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u20AC'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'ﬁ'
            ],
            KeyG: [
                'g',
                'G',
                '\uF8FF',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                '\u2122',
                ' '
            ],
            KeyI: [
                'i',
                'I',
                ' ',
                ' '
            ],
            KeyJ: [
                'j',
                'J',
                '\xB6',
                '\xAF'
            ],
            KeyK: [
                'k',
                'K',
                '\xA7',
                'ˇ'
            ],
            KeyL: [
                'l',
                'L',
                ' ',
                '\u02D8'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02DA'
            ],
            KeyN: [
                'n',
                'N',
                ' ',
                '\u02D9'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                ' '
            ],
            KeyS: [
                's',
                'S',
                '\u222B',
                ' '
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2021'
            ],
            KeyU: [
                'u',
                'U',
                ' ',
                ' '
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                'æ',
                'Æ'
            ],
            KeyX: [
                'x',
                'X',
                '\u2211',
                '\u203A'
            ],
            KeyY: [
                'y',
                'Y',
                '\xA5',
                ' '
            ],
            KeyZ: [
                'z',
                'Z',
                'Ω',
                '\u2039'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                'ı'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u02DD'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\u2022'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                '\u2030'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ' '
            ],
            Digit7: [
                '7',
                '/',
                '\xF7',
                '\u2044'
            ],
            Digit8: [
                '8',
                '(',
                '\u201C',
                '\u2018'
            ],
            Digit9: [
                '9',
                ')',
                '\u201D',
                '\u2019'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\u2248'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\xB4',
                '\xB8'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '\u201A',
                '\u02DB'
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                'ˆ'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '\xB1'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '\xBB'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '\u02DC'
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                '\xAB'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u201E',
                ''
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\u2026'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                ',',
                ',',
                ',',
                ','
            ],
            IntlBackslash: [
                'º',
                'ª',
                '\\',
                '\xB0'
            ]
        }
    }), Me({
        id: 'windows.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'windows',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'z',
                'Z',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '|',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '@',
                ''
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '~',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '\u20AC',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '',
                ''
            ],
            Digit9: [
                '9',
                ')',
                '',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                '\'',
                '?',
                '',
                ''
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '',
                ''
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                ''
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                ''
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '',
                ''
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                ''
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Me({
        id: 'linux.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'linux',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'º'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                '\xA1'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u215B'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\xA3'
            ],
            Digit4: [
                '4',
                '$',
                '~',
                '$'
            ],
            Digit5: [
                '5',
                '%',
                '\xBD',
                '\u215C'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                '\u215D'
            ],
            Digit7: [
                '7',
                '/',
                '{',
                '\u215E'
            ],
            Digit8: [
                '8',
                '(',
                '[',
                '\u2122'
            ],
            Digit9: [
                '9',
                ')',
                ']',
                '\xB1'
            ],
            Digit0: [
                '0',
                '=',
                '}',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\\',
                '\xBF'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '̃',
                '~'
            ],
            BracketLeft: [
                '̀',
                '̂',
                '[',
                '̊'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '̄'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '̆'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '̋'
            ],
            Quote: [
                '́',
                '̈',
                '{',
                '{'
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                '\\'
            ],
            Comma: [
                ',',
                ';',
                '\u2500',
                '\xD7'
            ],
            Period: [
                '.',
                ':',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '̣',
                '̇'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadEnter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Numpad1: [
                '',
                '1',
                '',
                '1'
            ],
            Numpad2: [
                '',
                '2',
                '',
                '2'
            ],
            Numpad3: [
                '',
                '3',
                '',
                '3'
            ],
            Numpad4: [
                '',
                '4',
                '',
                '4'
            ],
            Numpad5: [
                '',
                '5',
                '',
                '5'
            ],
            Numpad6: [
                '',
                '6',
                '',
                '6'
            ],
            Numpad7: [
                '',
                '7',
                '',
                '7'
            ],
            Numpad8: [
                '',
                '8',
                '',
                '8'
            ],
            Numpad9: [
                '',
                '9',
                '',
                '9'
            ],
            Numpad0: [
                '',
                '0',
                '',
                '0'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            NumpadComma: [
                '.',
                '.',
                '.',
                '.'
            ],
            NumpadParenLeft: [
                '(',
                '(',
                '(',
                '('
            ],
            NumpadParenRight: [
                ')',
                ')',
                ')',
                ')'
            ]
        }
    }), Me({
        id: 'linux.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'linux',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                ',',
                '?',
                '́',
                '̋'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            Digit1: [
                '&',
                '1',
                '\xB9',
                '\xA1'
            ],
            Digit2: [
                'é',
                '2',
                '~',
                '\u215B'
            ],
            Digit3: [
                '"',
                '3',
                '#',
                '\xA3'
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                '$'
            ],
            Digit5: [
                '(',
                '5',
                '[',
                '\u215C'
            ],
            Digit6: [
                '-',
                '6',
                '|',
                '\u215D'
            ],
            Digit7: [
                'è',
                '7',
                '`',
                '\u215E'
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                '\u2122'
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                '\xB1'
            ],
            Digit0: [
                'à',
                '0',
                '@',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                '\xBF'
            ],
            Equal: [
                '=',
                '+',
                '}',
                '̨'
            ],
            BracketLeft: [
                '̂',
                '̈',
                '̈',
                '̊'
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                '̄'
            ],
            Backslash: [
                '*',
                'µ',
                '̀',
                '̆'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'º'
            ],
            Quote: [
                'ù',
                '%',
                '̂',
                '̌'
            ],
            Backquote: [
                '\xB2',
                '~',
                '\xAC',
                '\xAC'
            ],
            Comma: [
                ';',
                '.',
                '\u2500',
                '\xD7'
            ],
            Period: [
                ':',
                '/',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '!',
                '\xA7',
                '̣',
                '̇'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ]
        }
    }), Me({
        id: 'windows.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                ',',
                '?',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'a',
                'A',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'w',
                'W',
                '',
                ''
            ],
            Digit1: [
                '&',
                '1',
                '',
                ''
            ],
            Digit2: [
                'é',
                '2',
                '~',
                ''
            ],
            Digit3: [
                '"',
                '3',
                '#',
                ''
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                ''
            ],
            Digit5: [
                '(',
                '5',
                '[',
                ''
            ],
            Digit6: [
                '-',
                '6',
                '|',
                ''
            ],
            Digit7: [
                'è',
                '7',
                '`',
                ''
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                ''
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                ''
            ],
            Digit0: [
                'à',
                '0',
                '@',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                ''
            ],
            Equal: [
                '=',
                '+',
                '}',
                ''
            ],
            BracketLeft: [
                '^',
                '\xA8',
                '',
                ''
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                ''
            ],
            Backslash: [
                '*',
                'µ',
                '',
                ''
            ],
            Semicolon: [
                'm',
                'M',
                '',
                ''
            ],
            Quote: [
                'ù',
                '%',
                '',
                ''
            ],
            Backquote: [
                '\xB2',
                '',
                '',
                ''
            ],
            Comma: [
                ';',
                '.',
                '',
                ''
            ],
            Period: [
                ':',
                '/',
                '',
                ''
            ],
            Slash: [
                '!',
                '\xA7',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Me({
        id: 'windows.german',
        locale: 'de',
        displayName: 'German',
        platform: 'windows',
        virtualLayout: 'qwertz',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyZ: [
                'y',
                'Y',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '\xB2',
                ''
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB3',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '{',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '[',
                ''
            ],
            Digit9: [
                '9',
                ')',
                ']',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '}',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                'ß',
                '?',
                '\\',
                'ẞ'
            ],
            Equal: [
                '\xB4',
                '`',
                '',
                ''
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                '~',
                ''
            ],
            Backslash: [
                '#',
                '\'',
                '',
                ''
            ],
            Semicolon: [
                'ö',
                'Ö',
                '',
                ''
            ],
            Quote: [
                'ä',
                'Ä',
                '',
                ''
            ],
            Backquote: [
                '^',
                '\xB0',
                '',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                ''
            ]
        }
    }), Me({
        id: 'apple.german',
        locale: 'de',
        displayName: 'German',
        virtualLayout: 'qwertz',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                '\u222B',
                '\u2039'
            ],
            KeyC: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2122'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u2030'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyG: [
                'g',
                'G',
                '\xA9',
                'Ì'
            ],
            KeyH: [
                'h',
                'H',
                'ª',
                'Ó'
            ],
            KeyI: [
                'i',
                'I',
                '\u2044',
                'Û'
            ],
            KeyJ: [
                'j',
                'J',
                'º',
                'ı'
            ],
            KeyK: [
                'k',
                'K',
                '\u2206',
                'ˆ'
            ],
            KeyL: [
                'l',
                'L',
                '@',
                'ﬂ'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02D8'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                '\u203A'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                '\xAB',
                '\xBB'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\xB8'
            ],
            KeyS: [
                's',
                'S',
                '\u201A',
                'Í'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u02DD'
            ],
            KeyU: [
                'u',
                'U',
                '\xA8',
                'Á'
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                'Ù'
            ],
            KeyY: [
                'z',
                'Z',
                'Ω',
                'ˇ'
            ],
            KeyZ: [
                'y',
                'Y',
                '\xA5',
                '\u2021'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\xAC'
            ],
            Digit2: [
                '2',
                '"',
                '\u201C',
                '\u201D'
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB6',
                '#'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '[',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '&',
                ']',
                '^'
            ],
            Digit7: [
                '7',
                '/',
                '|',
                '\\'
            ],
            Digit8: [
                '8',
                '(',
                '{',
                '\u02DC'
            ],
            Digit9: [
                '9',
                ')',
                '}',
                '\xB7'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\xAF'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                'ß',
                '?',
                '\xBF',
                '\u02D9'
            ],
            Equal: [
                '\xB4',
                '`',
                '\'',
                '\u02DA'
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '\u2022',
                '\xB0'
            ],
            BracketRight: [
                '+',
                '*',
                '\xB1',
                '\uF8FF'
            ],
            Backslash: [
                '#',
                '\'',
                '\u2018',
                '\u2019'
            ],
            Semicolon: [
                'ö',
                'Ö',
                'œ',
                'Œ'
            ],
            Quote: [
                'ä',
                'Ä',
                'æ',
                'Æ'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u221E',
                '\u02DB'
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                ',',
                '.',
                '.'
            ],
            IntlBackslash: [
                '^',
                '\xB0',
                '\u201E',
                '\u201C'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Me({
        id: 'dvorak',
        locale: 'en',
        displayName: 'Dvorak',
        virtualLayout: 'dvorak',
        platform: '',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'x',
                'X',
                '\u2248',
                '\u02DB'
            ],
            KeyC: [
                'j',
                'J',
                '\u2206',
                'Ô'
            ],
            KeyD: [
                'e',
                'E',
                '\xB4',
                '\xB4'
            ],
            KeyE: [
                '.',
                '>',
                '\u2265',
                '\u02D8'
            ],
            KeyF: [
                'u',
                'U',
                '\xA8',
                '\xA8'
            ],
            KeyG: [
                'i',
                'I',
                'ˆ',
                'ˆ'
            ],
            KeyH: [
                'd',
                'D',
                '\u2202',
                'Î'
            ],
            KeyI: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyJ: [
                'h',
                'H',
                '\u02D9',
                'Ó'
            ],
            KeyK: [
                't',
                'T',
                '\u2020',
                'ˇ'
            ],
            KeyL: [
                'n',
                'N',
                '\u02DC',
                '\u02DC'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'Â'
            ],
            KeyN: [
                'b',
                'B',
                '\u222B',
                'ı'
            ],
            KeyO: [
                'r',
                'R',
                '\xAE',
                '\u2030'
            ],
            KeyP: [
                'l',
                'L',
                '\xAC',
                'Ò'
            ],
            KeyQ: [
                '\'',
                '"',
                'æ',
                'Æ'
            ],
            KeyR: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyS: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyT: [
                'y',
                'Y',
                '\xA5',
                'Á'
            ],
            KeyU: [
                'g',
                'G',
                '\xA9',
                '\u02DD'
            ],
            KeyV: [
                'k',
                'K',
                '\u02DA',
                '\uF8FF'
            ],
            KeyW: [
                ',',
                '<',
                '\u2264',
                '\xAF'
            ],
            KeyX: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyY: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyZ: [
                ';',
                ':',
                '\u2026',
                'Ú'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\u2044'
            ],
            Digit2: [
                '2',
                '@',
                '\u2122',
                '\u20AC'
            ],
            Digit3: [
                '3',
                '#',
                '\xA3',
                '\u2039'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\u203A'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '^',
                '\xA7',
                'ﬂ'
            ],
            Digit7: [
                '7',
                '&',
                '\xB6',
                '\u2021'
            ],
            Digit8: [
                '8',
                '*',
                '\u2022',
                '\xB0'
            ],
            Digit9: [
                '9',
                '(',
                'ª',
                '\xB7'
            ],
            Digit0: [
                '0',
                ')',
                'º',
                '\u201A'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '[',
                '{',
                '\u201C',
                '\u201D'
            ],
            Equal: [
                ']',
                '}',
                '\u2018',
                '\u2019'
            ],
            BracketLeft: [
                '/',
                '?',
                '\xF7',
                '\xBF'
            ],
            BracketRight: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            Backslash: [
                '\\',
                '|',
                '\xAB',
                '\xBB'
            ],
            Semicolon: [
                's',
                'S',
                'ß',
                'Í'
            ],
            Quote: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            Backquote: [
                '`',
                '~',
                '`',
                '`'
            ],
            Comma: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            Period: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            Slash: [
                'z',
                'Z',
                'Ω',
                '\xB8'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                '.',
                '.',
                '.',
                '.'
            ],
            IntlBackslash: [
                '\xA7',
                '\xB1',
                '\xA7',
                '\xB1'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            AudioVolumeUp: [
                '',
                '=',
                '',
                '='
            ]
        }
    });
    const Oe = [{
                key: 'left',
                command: 'moveToPreviousChar'
            },
            {
                key: 'right',
                command: 'moveToNextChar'
            },
            {
                key: 'up',
                command: 'moveUp'
            },
            {
                key: 'down',
                command: 'moveDown'
            },
            {
                key: 'shift+[ArrowLeft]',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+[ArrowRight]',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+[ArrowUp]',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+[ArrowDown]',
                command: 'extendSelectionDownward'
            },
            {
                key: '[Backspace]',
                command: 'deleteBackward'
            },
            {
                key: 'alt+[Delete]',
                command: 'deleteBackward'
            },
            {
                key: '[Delete]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[Backspace]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[ArrowLeft]',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+[ArrowRight]',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+[ArrowLeft]',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+[ArrowRight]',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+[ArrowLeft]',
                command: 'moveToGroupStart'
            },
            {
                key: 'ctrl+[ArrowRight]',
                command: 'moveToGroupEnd'
            },
            {
                key: 'shift+ctrl+[ArrowLeft]',
                command: 'extendToGroupStart'
            },
            {
                key: 'shift+ctrl+[ArrowRight]',
                command: 'extendToGroupEnd'
            },
            {
                key: '[Space]',
                ifMode: 'math',
                command: 'moveAfterParent'
            },
            {
                key: 'shift+[Space]',
                ifMode: 'math',
                command: 'moveBeforeParent'
            },
            {
                key: '[Home]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'cmd+[ArrowLeft]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'shift+[Home]',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+cmd+[ArrowLeft]',
                command: 'extendToMathFieldStart'
            },
            {
                key: '[End]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'cmd+[ArrowRight]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+[End]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'shift+cmd+[ArrowRight]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: '[Pageup]',
                command: 'moveToGroupStart'
            },
            {
                key: '[Pagedown]',
                command: 'moveToGroupEnd'
            },
            {
                key: '[Tab]',
                ifMode: 'math',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'math',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Tab]',
                ifMode: 'text',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'text',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Escape]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'text',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '\\',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[IntlBackslash]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'complete',
                    {
                        selectItem: 'true'
                    }
                ]
            },
            {
                key: '[Tab]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'accept-suggestion'
                ]
            },
            {
                key: '[Return]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: '[Enter]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: 'shift+[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'reject'
                ]
            },
            {
                key: '[ArrowDown]',
                ifMode: 'latex',
                command: 'nextSuggestion'
            },
            {
                key: '[ArrowUp]',
                ifMode: 'latex',
                command: 'previousSuggestion'
            },
            {
                key: 'ctrl+a',
                ifPlatform: '!macos',
                command: 'selectAll'
            },
            {
                key: 'cmd+a',
                command: 'selectAll'
            },
            {
                key: '[Cut]',
                command: 'cutToClipboard'
            },
            {
                key: '[Copy]',
                command: 'copyToClipboard'
            },
            {
                key: '[Paste]',
                command: 'pasteFromClipboard'
            },
            {
                key: '[Clear]',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+z',
                ifPlatform: '!macos',
                command: 'undo'
            },
            {
                key: 'cmd+z',
                command: 'undo'
            },
            {
                key: '[Undo]',
                command: 'undo'
            },
            {
                key: 'ctrl+y',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+y',
                command: 'redo'
            },
            {
                key: 'shift+ctrl+z',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+z',
                command: 'redo'
            },
            {
                key: '[Redo]',
                command: 'redo'
            },
            {
                key: '[EraseEof]',
                command: 'deleteToGroupEnd'
            },
            {
                key: 'ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousChar'
            },
            {
                key: 'ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextChar'
            },
            {
                key: 'ctrl+p',
                ifPlatform: 'macos',
                command: 'moveUp'
            },
            {
                key: 'ctrl+n',
                ifPlatform: 'macos',
                command: 'moveDown'
            },
            {
                key: 'ctrl+a',
                ifPlatform: 'macos',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'ctrl+e',
                ifPlatform: 'macos',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+ctrl+p',
                ifPlatform: 'macos',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+ctrl+n',
                ifPlatform: 'macos',
                command: 'extendSelectionDownward'
            },
            {
                key: 'shift+ctrl+a',
                ifPlatform: 'macos',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+ctrl+e',
                ifPlatform: 'macos',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+h',
                ifPlatform: 'macos',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+d',
                ifPlatform: 'macos',
                command: 'deleteForward'
            },
            {
                key: 'ctrl+l',
                ifPlatform: 'macos',
                command: 'scrollIntoView'
            },
            {
                key: 'ctrl+[Digit2]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'ctrl+[Digit5]',
                ifMode: 'math',
                command: 'moveToOpposite'
            },
            {
                key: 'ctrl+[Digit6]',
                ifMode: 'math',
                command: 'moveToSuperscript'
            },
            {
                key: 'ctrl+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'ctrl+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\pi'
                ]
            },
            {
                key: 'alt+v',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'alt+w',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sum_{i=#?}^{#?}'
                ]
            },
            {
                key: 'alt+b',
                command: [
                    'insert',
                    '\\int_{#?}^{#?}'
                ]
            },
            {
                key: 'alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cup'
                ]
            },
            {
                key: 'alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cap'
                ]
            },
            {
                key: 'alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\emptyset'
                ]
            },
            {
                key: 'alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\differentialD'
                ]
            },
            {
                key: 'shift+alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\varnothing'
                ]
            },
            {
                key: 'shift+alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\partial'
                ]
            },
            {
                key: 'shift+alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\prod_{i=#?}^{#?}'
                ]
            },
            {
                key: 'shift+alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcup'
                ]
            },
            {
                key: 'shift+alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcap'
                ]
            },
            {
                key: 'shift+alt+a',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\forall'
                ]
            },
            {
                key: 'shift+alt+e',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\exists'
                ]
            },
            {
                key: 'alt+[Backslash]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\backslash'
                ]
            },
            {
                key: '[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#?}{#@}'
                ]
            },
            {
                key: 'shift+alt+k',
                command: 'toggleKeystrokeCaption'
            },
            {
                key: 'alt+[Space]',
                command: 'toggleVirtualKeyboard'
            },
            {
                key: 'alt+ctrl+[ArrowUp]',
                command: [
                    'speak',
                    'all',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+ctrl+[ArrowDown]',
                command: [
                    'speak',
                    'selection',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'applyStyle',
                    {
                        mode: 'text'
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'applyStyle',
                    {
                        mode: 'math'
                    }
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'switchMode',
                    'text',
                    '',
                    ''
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'switchMode',
                    'math',
                    '',
                    ''
                ]
            },
            {
                key: '/',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+/',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\/'
                ]
            },
            {
                key: 'alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrack #0 \\right\\rbrack'
                ]
            },
            {
                key: 'ctrl+[Minus]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'moveToSubscript'
            },
            {
                key: 'shift+alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrace #0 \\right\\rbrace'
                ]
            },
            {
                key: 'ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'shift+ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'shift+cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'ctrl+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'cmd+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'shift+ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+[Backspace]',
                ifMode: 'math',
                command: 'removeColumn'
            },
            {
                key: 'alt+[Digit5]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '$\\infty'
                ]
            },
            {
                key: 'alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\wedge'
                ]
            },
            {
                key: 'shift+alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\vee'
                ]
            },
            {
                key: 'alt+[Digit9]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '('
                ]
            },
            {
                key: 'alt+[Digit0]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    ')'
                ]
            },
            {
                key: 'alt+|',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '|'
                ]
            },
            {
                key: 'shift+[Backquote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\~'
                ]
            },
            {
                key: '[Backquote]',
                ifLayout: [
                    'windows.french',
                    'linux.french'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '^2'
                ]
            }
        ],
        Pe = {
            '\\theta': 'alt+q',
            '\\sqrt': [
                'alt+v',
                'ctrl+[Digit2]'
            ],
            '\\pi': 'alt+p',
            '\\prod': 'shift+alt+p',
            '\\sum': 'alt+w',
            '\\int': 'alt+b',
            '\\cup': 'alt+u',
            '\\cap': 'alt+n',
            '\\bigcup': 'shift+alt+u',
            '\\bigcap': 'shift+alt+n',
            '\\forall': 'shift+alt+a',
            '\\exists': 'shift+alt+e',
            '\\infty': 'alt+[Digit5]',
            '\\wedge': 'alt+[Digit6]',
            '\\vee': 'shift+alt+[Digit6]',
            '\\differentialD': 'alt+d',
            '\\partial': 'shift+alt+d',
            '\\frac': 'Slash',
            '\\emptyset': 'alt+o',
            '\\varnothing': 'shift+alt+o',
            '\\~': '~'
        };

    function Qe(Re) {
        let Se = Re;
        return d(Se) && (Se = Se.length > 0 ? Se[0] + '(' + Se.slice(1).join('') + ')' : ''), Se;
    }

    function Re(Se, Te) {
        let Ue = [];
        if ('string' == typeof Te) {
            const Ve = Pe[Te];
            d(Ve) ? Ue = Ve.slice() : Ve && Ue.push(Ve);
        }
        const Ve = Qe(Te),
            We = new RegExp('^' + Ve.replace('\\', '\\\\').replace('|', '\\|').replace('*', '\\*').replace('$', '\\$').replace('^', '\\^') + '([^*a-zA-Z]|$)');
        for (const Xe of Se)
            We.test(Qe(Xe.command)) && Ue.push(Xe.key);
        return Ue.map(_Se);
    }

    function _Se(Te) {
        var Ue;
        const Ve = /macos|ios|/.test(i()),
            We = Te.split('+');
        let Xe = '';
        for (const Ye of We)
            !Ve && Xe && (Xe += '<span class="ML__shortcut-join">+</span>'), Ye.startsWith('[Key') ? Xe += Ye.slice(4, 5) : Ye.startsWith('Key') ? Xe += Ye.slice(3, 4) : Ye.startsWith('[Digit') ? Xe += Ye.slice(6, 7) : Ye.startsWith('Digit') ? Xe += Ye.slice(5, 6) : Xe += null !== (Ue = {
                cmd: '\u2318',
                meta: Ve ? '\u2318' : 'command',
                shift: Ve ? '\u21E7' : 'shift',
                alt: Ve ? '\u2325' : 'alt',
                ctrl: Ve ? '\u2303' : 'control',
                '\n': Ve ? '\u23CE' : 'return',
                '[return]': Ve ? '\u23CE' : 'return',
                '[enter]': Ve ? '\u2324' : 'enter',
                '[tab]': Ve ? '\u21E5' : 'tab',
                '[escape]': 'esc',
                '[backspace]': Ve ? '\u232B' : 'backspace',
                '[delete]': Ve ? '\u2326' : 'del',
                '[pageup]': Ve ? '\u21DE' : 'page up',
                '[pagedown]': Ve ? '\u21DF' : 'page down',
                '[home]': Ve ? '\u2912' : 'home',
                '[end]': Ve ? '\u2913' : 'end',
                '[space]': 'space',
                '[equal]': '=',
                '[minus]': '-',
                '[comma]': ',',
                '[slash]': '/',
                '[backslash]': '\\',
                '[bracketleft]': '[',
                '[bracketright]': ']',
                semicolon: ';',
                period: '.',
                comma: ',',
                minus: '-',
                equal: '=',
                quote: '\'',
                bracketLeft: '[',
                bracketRight: ']',
                backslash: '\\',
                intlbackslash: '\\',
                backquote: '`',
                slash: '/',
                numpadmultiply: '* &#128290;',
                numpaddivide: '/ &#128290;',
                numpadsubtract: '- &#128290;',
                numpadadd: '+ &#128290;',
                numpaddecimal: '. &#128290;',
                numpadcomma: ', &#128290;',
                help: 'help',
                left: '\u21E0',
                up: '\u21E1',
                right: '\u21E2',
                down: '\u21E3',
                '[arrowleft]': '\u21E0',
                '[arrowup]': '\u21E1',
                '[arrowright]': '\u21E2',
                '[arrowdown]': '\u21E3',
                '[digit0]': '0',
                '[digit1]': '1',
                '[digit2]': '2',
                '[digit3]': '3',
                '[digit4]': '4',
                '[digit5]': '5',
                '[digit6]': '6',
                '[digit7]': '7',
                '[digit8]': '8',
                '[digit9]': '9'
            } [Ye.toLowerCase()]) && void 0 !== Ue ? Ue : Ye.toUpperCase();
        return Xe;
    }

    function Te(Ue, Ve) {
        if (Ue.ifPlatform && !/^!?(macos|windows|android|ios|chromeos|other)$/.test(Ue.ifPlatform))
            throw new Error(`Unexpected platform "${ Ue.ifPlatform }" for keybinding ${ Ue.key }`);
        if (void 0 !== Ue.ifLayout && (0 === Ve.score || !Ue.ifLayout.includes(Ve.id)))
            return;
        const We = Ge(Ue.key);
        let Xe = Ue.ifPlatform;
        if (We.cmd) {
            if (Xe && 'macos' !== Xe && 'ios' !== Xe)
                throw new Error('Unexpected "cmd" modifier with platform "' + Xe + '"\n"cmd" modifier can only be used with macOS or iOS platform.');
            Xe || (Xe = 'ios' === i() ? 'ios' : 'macos'), We.win = !1, We.cmd = !1, We.meta = !0;
        }
        if (We.win) {
            if (Xe && 'windows' !== Xe)
                throw new Error('Unexpected "win" modifier with platform "' + Xe + '"\n"win" modifier can only be used with Windows platform.');
            Xe = 'windows', We.win = !1, We.cmd = !1, We.meta = !0;
        }
        if (Xe && ! function(Ye) {
                if (e()) {
                    const Ze = i(),
                        $e = Ye.startsWith('!'),
                        af = Ye.endsWith(Ze);
                    if ($e && !af)
                        return !0;
                    if (!$e && af)
                        return !0;
                }
                return '!other' !== Ye && 'other' === Ye;
            }(Xe))
            return;
        if (/^\[.+\]$/.test(We.key))
            return {
                ...Ue,
                ifPlatform: Xe,
                key: He(We)
            };
        const Ye = function(Ze, $e) {
            var af;
            const bf = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: ''
            };
            if (!Ze)
                return bf;
            for (const [cf, df] of Object.entries($e.mapping)) {
                if (df[0] === Ze)
                    return bf.key = `[${ cf }]`, bf;
                if (df[1] === Ze)
                    return bf.shift = !0, bf.key = `[${ cf }]`, bf;
                if (df[2] === Ze)
                    return bf.alt = !0, bf.key = `[${ cf }]`, bf;
                if (df[3] === Ze)
                    return bf.shift = !0, bf.alt = !0, bf.key = `[${ cf }]`, bf;
            }
            return bf.key = null !== (cf = Je[Ze]) && void 0 !== cf ? cf : '', bf;
        }(We.key, Ve);
        if (!Ye)
            throw new Error('Invalid keybinding key "' + Ue.key + '"');
        if (Ye.shift && We.shift || Ye.alt && We.alt)
            throw new Error(`The keybinding ${ Ue.key } (${ _Ue(Ue.command) }) is conflicting with the key combination ${ He(Ye) } using the ${ Ve.displayName } keyboard layout`);
        return Ye.shift = Ye.shift || We.shift, Ye.alt = Ye.alt || We.alt, Ye.meta = We.meta, Ye.ctrl = We.ctrl, {
            ...Ue,
            ifPlatform: Xe,
            key: He(Ye)
        };
    }

    function _Ue(Ve) {
        if (Array.isArray(Ve)) {
            const We = [...Ve];
            return We.shift() + '(' + We.map(Ve => 'string' == typeof Ve ? `"${ Ve }"` : Ve.toString()).join(', ') + ')';
        }
        return Ve;
    }
    var Ve = '#mathlive-popover-panel{background-color:rgba(97,97,97,.95);border-radius:8px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);color:#fff;display:flex;flex-direction:column;justify-content:center;position:fixed;text-align:center;transition:all .2s cubic-bezier(.64,.09,.08,1);visibility:hidden;z-index:1}#mathlive-popover-panel:after{border-bottom:5px solid rgba(97,97,97,.9);border-left:5px solid transparent;border-right:5px solid transparent;content:"";font-size:1rem;height:0;left:calc(50% - 3px);position:absolute;top:-5px;width:0}#mathlive-popover-panel.is-visible{animation:ML__fade-in .15s cubic-bezier(0,0,.2,1);visibility:inherit}@keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}#mathlive-popover-panel ul{align-items:flex-start;display:flex;flex-flow:column;justify-content:center;list-style:none;margin:0;padding:0}#mathlive-popover-panel li{border-radius:8px;column-gap:1em;cursor:pointer;display:flex;flex-direction:row;justify-content:space-between;margin:8px;padding:8px;width:calc(100% - 32px)}#mathlive-popover-panel li a{color:#5ea6fd;display:block;margin-top:.4em;padding-top:.3em}#mathlive-popover-panel li a:hover{color:#5ea6fd;text-decoration:underline}#mathlive-popover-panel li.is-active,#mathlive-popover-panel li.is-pressed,#mathlive-popover-panel li:hover{background:hsla(0,0%,100%,.1)}.ML__popover__command{font-family:KaTeX_Main;font-size:1.6rem}.ML__popover__latex{align-self:center;font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace}.ML__popover__keybinding{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:.8em;opacity:.7}.ML__shortcut-join{opacity:.5}',
        We = '.ML__sr-only{clip:rect(0,0,0,0);border:0;-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.ML__base,.ML__isInline{display:inline-block}.ML__base{border:0;box-sizing:content-box;cursor:text;font-family:inherit;font-style:inherit;font-weight:inherit;margin:0;outline:0;padding:0;position:relative;text-decoration:none;vertical-align:baseline;visibility:inherit;width:min-content}body.ML__fonts-loading .ML__base{visibility:hidden}.ML__strut,.ML__strut--bottom{display:inline-block;min-height:.5em}.ML__small-delim{font-family:KaTeX_Main}.ML__text{font-family:var(--text-font-family,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif);white-space:pre}.ML__cmr{font-family:KaTeX_Main;font-style:normal}.ML__mathit{font-family:KaTeX_Math;font-style:italic}.ML__mathbf{font-family:KaTeX_Main;font-weight:700}.lcGreek.ML__mathbf{font-family:KaTeX_Math;font-weight:400}.ML__mathbfit{font-family:KaTeX_Math;font-style:italic;font-weight:700}.ML__ams,.ML__bb{font-family:KaTeX_AMS}.ML__cal{font-family:KaTeX_Caligraphic}.ML__frak{font-family:KaTeX_Fraktur}.ML__tt{font-family:KaTeX_Typewriter}.ML__script{font-family:KaTeX_Script}.ML__sans{font-family:KaTeX_SansSerif}.ML__series_el,.ML__series_ul{font-weight:100}.ML__series_l{font-weight:200}.ML__series_sl{font-weight:300}.ML__series_sb{font-weight:500}.ML__bold,.ML__boldsymbol{font-weight:700}.ML__series_eb{font-weight:800}.ML__series_ub{font-weight:900}.ML__series_uc{font-stretch:ultra-condensed}.ML__series_ec{font-stretch:extra-condensed}.ML__series_c{font-stretch:condensed}.ML__series_sc{font-stretch:semi-condensed}.ML__series_sx{font-stretch:semi-expanded}.ML__series_x{font-stretch:expanded}.ML__series_ex{font-stretch:extra-expanded}.ML__series_ux{font-stretch:ultra-expanded}.ML__it{font-style:italic}.ML__shape_ol{-webkit-text-stroke:1px #000;text-stroke:1px #000;color:transparent}.ML__shape_sc{font-variant:small-caps}.ML__shape_sl{font-style:oblique}.ML__emph{color:#bc2612}.ML__emph .ML__emph{color:#0c7f99}.ML__highlight{background:#edd1b0;color:#007cb2}.ML__center{text-align:center}.ML__label_padding{padding:0 .5em}.ML__frac-line{min-height:1px;width:100%}.ML__frac-line:after{background:currentColor;box-sizing:content-box;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt,.ML__sqrt-sign{display:inline-block}.ML__sqrt-sign{font-family:KaTeX_Main;position:relative}.ML__sqrt-line{display:inline-block;height:.04em;width:100%}.ML__sqrt-line:before{background:currentColor;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt-line:after{border-bottom-width:1px;content:" ";display:block;margin-top:-.1em}.ML__sqrt-index{margin-left:.27777778em;margin-right:-.55555556em}.ML__delim-size1{font-family:KaTeX_Size1}.ML__delim-size2{font-family:KaTeX_Size2}.ML__delim-size3{font-family:KaTeX_Size3}.ML__delim-size4{font-family:KaTeX_Size4}.ML__delim-mult .delim-size1>span{font-family:KaTeX_Size1}.ML__delim-mult .delim-size4>span{font-family:KaTeX_Size4}.ML__accent-body>span{font-family:KaTeX_Main;width:0}.ML__accent-vec>span{left:.24em;position:relative}.ML__mathlive{word-wrap:normal;direction:ltr;display:inline-block;font-family:KaTeX_Main,Times New Roman,serif;font-size-adjust:none;font-stretch:normal;font-style:normal;font-variant-caps:normal;letter-spacing:normal;line-height:1.2;text-align:left;text-indent:0;text-rendering:auto;text-shadow:none;-webkit-user-select:none;user-select:none;white-space:nowrap;width:min-content;word-spacing:normal}.ML__mathlive .style-wrap{position:relative}.ML__mathlive .left-right,.ML__mathlive .mfrac{display:inline-block}.ML__mathlive .vlist-t{border-collapse:collapse;display:inline-table;table-layout:fixed}.ML__mathlive .vlist-r{display:table-row}.ML__mathlive .vlist{display:table-cell;position:relative;vertical-align:bottom}.ML__mathlive .vlist>span{display:block;height:0;position:relative}.ML__mathlive .vlist>span>span{display:inline-block}.ML__mathlive .vlist>span>.pstrut{overflow:hidden;width:0}.ML__mathlive .vlist-t2{margin-right:-2px}.ML__mathlive .vlist-s{display:table-cell;font-size:1px;min-width:2px;vertical-align:bottom;width:2px}.ML__mathlive .msubsup{text-align:left}.ML__mathlive .negativethinspace{display:inline-block;height:.71em;margin-left:-.16667em}.ML__mathlive .thinspace{display:inline-block;height:.71em;width:.16667em}.ML__mathlive .mediumspace{display:inline-block;height:.71em;width:.22222em}.ML__mathlive .thickspace{display:inline-block;height:.71em;width:.27778em}.ML__mathlive .enspace{display:inline-block;height:.71em;width:.5em}.ML__mathlive .quad{display:inline-block;height:.71em;width:1em}.ML__mathlive .qquad{display:inline-block;height:.71em;width:2em}.ML__mathlive .llap,.ML__mathlive .rlap{display:inline-block;position:relative;width:0}.ML__mathlive .llap>.inner,.ML__mathlive .rlap>.inner{position:absolute}.ML__mathlive .llap>.fix,.ML__mathlive .rlap>.fix{display:inline-block}.ML__mathlive .llap>.inner{right:0}.ML__mathlive .rlap>.inner{left:0}.ML__mathlive .rule{border:0 solid;box-sizing:border-box;display:inline-block;position:relative}.ML__mathlive .overline .overline-line,.ML__mathlive .underline .underline-line{width:100%}.ML__mathlive .overline .overline-line:before,.ML__mathlive .underline .underline-line:before{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block}.ML__mathlive .overline .overline-line:after,.ML__mathlive .underline .underline-line:after{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block;margin-top:-1px;min-height:thin}.ML__mathlive .stretchy{display:block;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .stretchy:after,.ML__mathlive .stretchy:before{content:""}.ML__mathlive .stretchy svg{fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;display:block;height:inherit;position:absolute;width:100%}.ML__mathlive .slice-1-of-2{left:0}.ML__mathlive .slice-1-of-2,.ML__mathlive .slice-2-of-2{display:inline-flex;overflow:hidden;position:absolute;width:50.2%}.ML__mathlive .slice-2-of-2{right:0}.ML__mathlive .slice-1-of-3{display:inline-flex;left:0;overflow:hidden;position:absolute;width:25.1%}.ML__mathlive .slice-2-of-3{display:inline-flex;left:25%;overflow:hidden;position:absolute;width:50%}.ML__mathlive .slice-3-of-3{display:inline-flex;overflow:hidden;position:absolute;right:0;width:25.1%}.ML__mathlive .slice-1-of-1{display:inline-flex;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .nulldelimiter{display:inline-block;width:.12em}.ML__mathlive .op-group{display:inline-block}.ML__mathlive .op-symbol{position:relative}.ML__mathlive .op-symbol.small-op{font-family:KaTeX_Size1}.ML__mathlive .op-symbol.large-op{font-family:KaTeX_Size2}.ML__mathlive .accent>.vlist>span{text-align:center}.ML__mathlive .mtable .vertical-separator{box-sizing:border-box;display:inline-block;min-width:1px}.ML__mathlive .mtable .arraycolsep{display:inline-block}.ML__mathlive .mtable .col-align-m>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-c>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-l>.vlist-t{text-align:left}.ML__mathlive .mtable .col-align-r>.vlist-t{text-align:right}.ML__error{background-color:rgba(204,0,65,.1);background-image:radial-gradient(ellipse at center,#cc0041,transparent 70%);background-position:0 100%;background-repeat:repeat-x;background-size:3px 3px;display:inline-block;padding-bottom:3px}.ML__error>.ML__error{background:transparent;padding:0}.ML__composition{background:#fff1c2;color:#000;-webkit-text-decoration:underline var(--caret-color-computed,var(--ML__caret-color));text-decoration:underline var(--caret-color-computed,var(--ML__caret-color))}@media (prefers-color-scheme:dark){.ML__composition{background:#69571c;color:#fff}}.ML__placeholder{color:var(--placeholder-color,var(--ML__placeholder-color));font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;opacity:var(--placeholder-opacity,.4);padding-left:.4ex;padding-right:.4ex}.ML__placeholdercontainer{display:none}.ML__placeholdercontainer math-field{border:1px solid var(--editable-border);border-radius:4px;display:inline-block;min-width:32px;padding-left:4px;padding-right:4px;position:absolute;z-index:1001}.ML__isReadOnly .ML__placeholdercontainer{display:block}.ML__container{min-height:auto!important}';

    function Xe(Ye) {
        var Ze;
        'function' != typeof(null === (Ze = Ye.listeners) || void 0 === Ze ? void 0 : Ze.onSelectionDidChange) || Ye.suppressChangeNotifications || (Ye.suppressChangeNotifications = !0, Ye.listeners.onSelectionDidChange(Ye), Ye.suppressChangeNotifications = !1);
    }

    function Ye(Ze, $e = {}) {
        if (Ze.suppressChangeNotifications || !Ze.mathfield.host)
            return !0;
        Ze.suppressChangeNotifications = !0;
        const af = Ze.mathfield.host.dispatchEvent(new InputEvent('beforeinput', {
            ...$e,
            cancelable: !0,
            bubbles: !0,
            composed: !0
        }));
        return Ze.suppressChangeNotifications = !1, af;
    }

    function Ze($e, af) {
        !$e.suppressChangeNotifications && $e.mathfield.host && ($e.suppressChangeNotifications = !0, $e.mathfield.host.dispatchEvent(new InputEvent('input', {
            ...af,
            bubbles: !0,
            composed: !0
        })), $e.suppressChangeNotifications = !1);
    }

    function $e(af) {
        var bf, cf;
        const df = af.atoms.find(af => af instanceof hd);
        return df && null !== (cf = null === (bf = df.body) || void 0 === bf ? void 0 : bf.filter(af => af instanceof gd)) && void 0 !== cf ? cf : [];
    }

    function af(bf, cf) {
        var df;
        let ef = 0,
            ff = !1;
        const gf = Number.isFinite(null == cf ? void 0 : cf.before) ? null !== (df = null == cf ? void 0 : cf.before) && void 0 !== df ? df : 0 : bf.lastOffset;
        for (; ef <= gf && !ff;) {
            const hf = bf.at(ef);
            ff = hf instanceof gd && hf.isSuggestion, ff || ef++;
        }
        if (!ff)
            return [
                void 0,
                void 0
            ];
        let hf = ef,
            jf = !1;
        for (; hf <= gf && !jf;) {
            const kf = bf.at(hf);
            jf = !(kf instanceof gd && kf.isSuggestion), jf || hf++;
        }
        return [
            ef - 1,
            hf - 1
        ];
    }

    function bf(cf) {
        const df = $e(cf.model).filter(cf => cf.isSuggestion);
        if (0 !== df.length) {
            cf.model.position = cf.model.offsetOf(df[0].leftSibling);
            for (const ef of df)
                ef.parent.removeChild(ef);
        }
    }

    function cf(df, ef) {
        var ff;
        const {
            model: gf
        } = df;
        bf(df);
        for (const hf of $e(gf))
            hf.isError = !1;
        if (!gf.selectionIsCollapsed)
            return void _mf(hf);
        const jf = [];
        let kf = gf.at(gf.position);
        for (; kf && kf instanceof gd && /^[a-zA-Z\*]$/.test(kf.value);)
            kf = kf.leftSibling;
        if (kf && kf instanceof gd && '\\' === kf.value)
            for (jf.push(kf), kf = kf.rightSibling; kf && kf instanceof gd && /^[a-zA-Z\*]$/.test(kf.value);)
                jf.push(kf), kf = kf.rightSibling;
        const lf = jf.map(hf => hf.value).join(''),
            mf = lf ? function(nf, pf) {
                var qf, rf;
                if ('\\' === pf)
                    return [];
                if (!pf.startsWith('\\'))
                    return [];
                const sf = [];
                for (const tf in z)
                    tf.startsWith(pf) && !z[tf].infix && sf.push({
                        match: tf,
                        frequency: null !== (qf = z[tf].frequency) && void 0 !== qf ? qf : 0
                    });
                for (const uf in x)
                    uf.startsWith(pf) && sf.push({
                        match: uf,
                        frequency: null !== (rf = x[uf].frequency) && void 0 !== rf ? rf : 0
                    });
                const vf = pf.substring(1);
                for (const wf of Object.keys(uf.options.macros))
                    wf.startsWith(vf) && sf.push({
                        match: '\\' + wf,
                        frequency: 0
                    });
                return sf.sort((uf, wf) => {
                    var xf, yf;
                    return uf.frequency === wf.frequency ? uf.match.length === wf.match.length ? uf.match < wf.match ? -1 : 1 : uf.match.length - wf.match.length : (null !== (xf = wf.frequency) && void 0 !== xf ? xf : 0) - (null !== (yf = uf.frequency) && void 0 !== yf ? yf : 0);
                }), sf.map(uf => uf.match);
            }(hf, lf) : [];
        if (0 === mf.length)
            return /^\\[a-zA-Z\*]+$/.test(lf) && jf.forEach(hf => {
                hf.isError = !0;
            }), void _mf(hf);
        hf.suggestionIndex = null !== (ff = null == ef ? void 0 : ef.atIndex) && void 0 !== ff ? ff : 0, hf.suggestionIndex < 0 && (hf.suggestionIndex = mf.length - 1);
        const nf = mf[hf.suggestionIndex % mf.length];
        if (nf !== lf) {
            const pf = jf[jf.length - 1];
            pf.parent.addChildrenAfter([...nf.slice(lf.length - nf.length)].map(pf => new gd(pf, hf, {
                isSuggestion: !0
            })), pf), _pf(hf);
        }! function(pf, qf) {
            if (0 === qf.length || !1 === pf.options.enablePopover)
                return void _mf(pf);
            qf = qf.slice(0, 10);
            let rf = '<ul>';
            for (const sf of qf) {
                const tf = sf,
                    uf = _jf(pf, sf),
                    vf = Re(pf.keybindings, tf).join('<br>');
                rf += `<li role="button" data-command="${ tf }"><span class="ML__popover__latex">${ tf }</span><span class="ML__popover__command">${ uf }</span>`, vf && (rf += `<span class="ML__popover__keybinding">${ vf }</span>`), rf += '</li>';
            }
            rf += '</ul>', pf.popover = function(tf, uf) {
                return tf.popover ? (tf.popover.innerHTML = tf.options.createHTML(uf), tf.popover) : (tf.popover = le('mathlive-popover-panel'), void 0 === _ff && (_ff = Ee(Ve).toString(36)), _gf = Fe(null, Ve, _ff), _hf = Fe(null, We, Ee(We).toString(36)), tf.popover.innerHTML = tf.options.createHTML(uf), tf.popover);
            }(pf, rf);
            const tf = pf.popover.querySelectorAll('ul li');
            for (const uf of tf)
                uf.addEventListener('pointerdown', pf => {
                    pf.preventDefault();
                }), uf.addEventListener('click', rf => {
                    _ef(pf, 'reject'), Qd.insert('math', pf.model, uf.dataset.command, {
                        selectionMode: 'placeholder',
                        format: 'latex'
                    }), pf.dirty = !0, pf.scrollIntoView(), pf.focus();
                });
            setTimeout(() => {
                const vf = oe(pf.field);
                vf && _lf(pf, vf), pf.popover && (pf.popover.classList.add('is-visible'), pf.popoverVisible = !0);
            }, 32);
        }(hf, mf);
    }

    function df(ef) {
        const [ff, gf] = af(ef, {
            before: ef.position
        });
        if (void 0 === ff || void 0 === gf)
            return !1;
        let hf = !1;
        return ef.getAtoms([
            ff,
            gf
        ]).forEach(ef => {
            ef.isSuggestion && (ef.isSuggestion = !1, hf = !0);
        }), hf;
    }

    function _ef(ff, gf = 'accept', hf) {
        var jf, kf;
        _mf(ff);
        const lf = ff.model.atoms.find(ff => ff instanceof hd);
        if (!lf)
            return !1;
        if ('accept-suggestion' === gf) {
            const mf = $e(ff.model).filter(ff => ff.isSuggestion);
            if (0 === mf.length)
                return !1;
            for (const nf of mf)
                nf.isSuggestion = !1;
            return nf.model.position = nf.model.offsetOf(mf[mf.length - 1]), !0;
        }
        const mf = $e(ff.model).filter(ff => !ff.isSuggestion).map(ff => ff.value).join(''),
            nf = lf.leftSibling;
        return lf.parent.removeChild(lf), ff.model.position = ff.model.offsetOf(nf), ff.mode = null !== (jf = null == hf ? void 0 : hf.mode) && void 0 !== jf ? jf : 'math', 'reject' === gf || (Qd.insert('math', ff.model, mf, {
            selectionMode: null !== (kf = null == hf ? void 0 : hf.selectItem) && void 0 !== kf && kf ? 'item' : 'placeholder',
            format: 'latex'
        }), ff.snapshot(), ff.model.announce('replacement')), !0;
    }
    let _ff;
    new class extends Qd {
        createAtom(gf, hf, jf) {
            return new gd(gf, hf);
        }
        onPaste(gf, hf) {
            if (!hf.clipboardData)
                return !1;
            let jf = hf.clipboardData.getData('text/x-latex');
            return jf || (jf = hf.clipboardData.getData('text/plain')), !(!jf || !Ye(gf.model, {
                inputType: 'insertFromPaste',
                data: jf
            }) || (gf.snapshot(), this.insert(gf.model, jf) && (Ze(gf.model, {
                inputType: 'insertFromPaste'
            }), _pf(gf)), hf.preventDefault(), hf.stopPropagation(), 0));
        }
        insert(gf, hf, jf) {
            if (!Ye(gf, {
                    data: hf,
                    inputType: 'insertText'
                }))
                return !1;
            jf || (jf = {}), jf.insertionMode || (jf.insertionMode = 'replaceSelection'), jf.selectionMode || (jf.selectionMode = 'placeholder');
            const {
                suppressChangeNotifications: kf
            } = gf;
            jf.suppressChangeNotifications && (gf.suppressChangeNotifications = !0);
            const lf = gf.suppressChangeNotifications;
            gf.suppressChangeNotifications = !0, 'replaceSelection' !== jf.insertionMode || gf.selectionIsCollapsed ? 'replaceAll' === jf.insertionMode ? (gf.root.setChildren([], 'body'), gf.position = 0) : 'insertBefore' === jf.insertionMode ? gf.collapseSelection('backward') : 'insertAfter' === jf.insertionMode && gf.collapseSelection('forward') : gf.deleteAtoms(Gd(gf.selection));
            const mf = [];
            for (const nf of hf)
                D.test(nf) && mf.push(new gd(nf, gf.mathfield));
            let pf = gf.at(gf.position);
            if (pf instanceof hd && (pf = pf.lastChild), !(pf.parent instanceof hd)) {
                const qf = new hd('', gf.mathfield);
                pf.parent.addChildAfter(qf, pf), pf = qf.firstChild;
            }
            const qf = pf.parent.addChildrenAfter(mf, pf);
            return gf.suppressChangeNotifications = lf, 'before' === nf.selectionMode || ('item' === nf.selectionMode ? gf.setSelection(gf.anchor, gf.offsetOf(qf)) : qf && (gf.position = gf.offsetOf(qf))), Ze(gf, {
                data: hf,
                inputType: 'insertText'
            }), gf.suppressChangeNotifications = kf, !0;
        }
        constructor() {
            super('latex');
        }
    }();
    let _gf = null,
        _hf = null;

    function _jf(kf, lf) {
        const mf = kf,
            nf = new kc('root', mf);
        return nf.body = _Qc(lf, mf, {
            parseMode: 'math'
        }), _Tb(Pb(Sb(new Nb(nf.render(new Db({
            registers: mf.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function kf(lf, mf) {
        var nf;
        if (lf.element && lf.element.mathfield === lf && lf.popover && lf.popoverVisible)
            if (null == mf ? void 0 : mf.deferred)
                setTimeout(() => kf(lf), 100);
            else if ('latex' !== (null === (nf = lf.model.at(lf.model.position)) || void 0 === nf ? void 0 : nf.type))
            _mf(lf);
        else {
            const pf = oe(lf.field);
            pf && _lf(lf, pf);
        }
    }

    function _lf(mf, nf) {
        if (f(), !mf.popover || !mf.popoverVisible)
            return;
        const pf = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
            qf = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
            rf = window.innerWidth - document.documentElement.clientWidth,
            sf = window.innerHeight - document.documentElement.clientHeight,
            tf = mf.virtualKeyboard.height;
        nf.x + mf.popover.offsetWidth / 2 > qf - rf ? mf.popover.style.left = qf - mf.popover.offsetWidth - rf + 'px' : nf.x - mf.popover.offsetWidth / 2 < 0 ? mf.popover.style.left = '0' : mf.popover.style.left = nf.x - mf.popover.offsetWidth / 2 + 'px', nf.y + mf.popover.offsetHeight + 5 > pf - sf - tf ? (mf.popover.classList.add('ML__popover--reverse-direction'), mf.popover.style.top = nf.y - nf.height - mf.popover.offsetHeight - 5 + 'px') : (mf.popover.classList.remove('ML__popover--reverse-direction'), mf.popover.style.top = `${ nf.y + 5 }px`);
    }

    function _mf(nf) {
        nf.suggestionIndex = 0, nf.popoverVisible = !1, nf.popover && (nf.popover.classList.remove('is-visible'), nf.popover.innerHTML = '');
    }

    function nf(pf) {
        let qf = 0;
        for (let rf = 0; rf < pf.length; rf++)
            qf = 31 * qf + pf.charCodeAt(rf), qf |= 0;
        return Math.abs(qf);
    }

    function _pf(qf, rf) {
        qf.dirty || (qf.dirty = !0, requestAnimationFrame(() => {
            ne(qf) && qf.dirty && (qf.atomBoundsCache = new Map(), _qf(qf, rf), qf.atomBoundsCache = void 0);
        }));
    }

    function _qf(rf, sf) {
        var tf;
        if (f(), !ne(rf))
            return;
        sf = null != sf ? sf : {};
        const {
            model: uf
        } = rf;
        uf.root.caret = '', uf.root.isSelected = !1, uf.root.containsCaret = !0;
        for (const vf of uf.atoms)
            vf.caret = '', vf.isSelected = !1, vf.containsCaret = !1;
        const wf = !vf.options.readOnly && vf.hasFocus();
        if (uf.selectionIsCollapsed)
            uf.at(uf.position).caret = wf ? vf.mode : '';
        else {
            const xf = uf.getAtoms(uf.selection, {
                includeChildren: !0
            });
            for (const yf of xf)
                yf.isSelected = !0;
        }
        if (wf) {
            let xf = uf.at(uf.position).parent;
            for (; xf;)
                xf.containsCaret = !0, xf = xf.parent;
        }
        const xf = function(yf, zf) {
                var Af;
                return zf = null != zf ? zf : {}, _Tb(Sb(yf.model.root.render(new Db({
                    registers: yf.registers,
                    atomIdsSettings: {
                        seed: zf.forHighlighting ? nf(kc.serialize(yf.model.root, {
                            expandMacro: !1,
                            defaultMode: yf.options.defaultMode
                        })) : 'random',
                        groupNumbers: null !== (Af = zf.forHighlighting) && void 0 !== Af && Af
                    },
                    renderPlaceholder: yf.options.readOnly ? (zf, Af) => {
                        if (Af.placeholderId) {
                            const Bf = yf.getPlaceholderField(Af.placeholderId);
                            return Af.createMathfieldBox(zf, Bf, Af.placeholderId);
                        }
                        return Af.createBox(zf);
                    } : void 0
                }, {
                    fontSize: 5,
                    letterShapeStyle: yf.options.letterShapeStyle
                }, 'inline-math' === yf.options.defaultMode ? 'textstyle' : 'displaystyle')), yf.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(vf, sf),
            yf = vf.field,
            zf = yf.classList.contains('ML__focused');
        zf && !wf ? yf.classList.remove('ML__focused') : !zf && wf && yf.classList.add('ML__focused'), yf.innerHTML = vf.options.createHTML(xf.toMarkup()), vf.fieldContent = yf.querySelector('.ML__mathlive'), vf.accessibleNode.innerHTML = vf.options.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' + _ae(uf.root, vf.options) + '</math>'), _rf(vf), vf.options.readOnly && vf.attachNestedMathfield(), null !== (tf = sf.interactive) && void 0 !== tf && tf || setTimeout(() => _rf(vf), 32), vf.dirty = !1;
    }

    function _rf(sf) {
        f();
        const tf = sf.field;
        if (!tf)
            return;
        for (const uf of tf.querySelectorAll('.ML__selection, .ML__contains-highlight'))
            uf.remove();
        if (!uf.hasFocus())
            return;
        const vf = uf.model,
            wf = parseFloat(getComputedStyle(tf).width);
        let xf = tf.getBoundingClientRect().width / wf;
        if (xf = isNaN(xf) ? 1 : xf, vf.selectionIsCollapsed) {
            setTimeout(() => kf(uf), 32);
            let yf = vf.at(vf.position);
            for (; yf && (!yf.containsCaret || !yf.displayContainsHighlight);)
                yf = yf.parent;
            if ((null == yf ? void 0 : yf.containsCaret) && yf.displayContainsHighlight) {
                const zf = qe(uf, se(uf, yf));
                if (zf) {
                    zf.left /= xf, zf.right /= xf, zf.top /= xf, zf.bottom /= xf;
                    const Af = document.createElement('div');
                    Af.classList.add('ML__contains-highlight'), Af.style.position = 'absolute', Af.style.left = `${ zf.left }px`, Af.style.top = `${ zf.top }px`, Af.style.width = `${ Math.ceil(zf.right - zf.left) }px`, Af.style.height = `${ Math.ceil(zf.bottom - zf.top - 1) }px`, tf.insertBefore(Af, tf.childNodes[0]);
                }
            }
        } else
            for (const yf of function(zf) {
                    let Af = [];
                    for (const Bf of zf) {
                        let Cf = !1;
                        for (const Df of Af)
                            if (Bf.left === Df.left && Bf.right === Df.right && Bf.top === Df.top && Bf.bottom === Df.bottom) {
                                Cf = !0;
                                break;
                            }
                        Cf || Af.push(Bf);
                    }
                    zf = Af, Af = [];
                    for (const Cf of zf) {
                        let Df = 0;
                        for (const Ef of zf)
                            if (Cf.left >= Ef.left && Cf.right <= Ef.right && Cf.top >= Ef.top && Cf.bottom <= Ef.bottom && (Df += 1, Df > 1))
                                break;
                        1 === Df && Ef.push(Cf);
                    }
                    return Af;
                }(te(uf, {
                    excludeAtomsWithBackground: !0
                }))) {
                yf.left /= xf, yf.right /= xf, yf.top /= xf, yf.bottom /= xf;
                const zf = document.createElement('div');
                zf.classList.add('ML__selection'), zf.style.position = 'absolute', zf.style.left = `${ yf.left }px`, zf.style.top = `${ yf.top }px`, zf.style.width = `${ Math.ceil(yf.right - yf.left) }px`, zf.style.height = `${ Math.ceil(yf.bottom - yf.top - 1) }px`, tf.insertBefore(zf, tf.childNodes[0]);
            }
    }
    const sf = {};

    function tf(uf, vf) {
        vf = null != vf ? vf : {
            target: 'mathfield',
            canUndo: !1
        };
        for (const wf of Object.keys(uf))
            sf[wf] = {
                ...vf,
                fn: uf[wf]
            };
    }

    function uf(vf) {
        var wf;
        let xf;
        return xf = d(vf) ? vf[0] : vf, xf = xf.replace(/-\w/g, vf => vf[1].toUpperCase()), null === (wf = sf[xf]) || void 0 === wf ? void 0 : wf.target;
    }

    function vf(wf, xf, yf) {
        return xf + ie(yf, {
            ...wf,
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {
                ...wf.textToSpeechRulesOptions,
                markup: 'none'
            }
        });
    }

    function wf(xf, yf) {
        var zf, Af, Bf;
        if (e() && (null != yf || (yf = null !== (zf = _Kh().config) && void 0 !== zf ? zf : {}), yf))
            if (yf.speechEngine && 'local' !== yf.speechEngine)
                if ('amazon' === yf.speechEngine) {
                    if ('AWS' in window) {
                        const Cf = new globalThis.AWS.Polly({
                                apiVersion: '2016-06-10'
                            }),
                            Df = {
                                OutputFormat: 'mp3',
                                VoiceId: null !== (Af = yf.speechEngineVoice) && void 0 !== Af ? Af : 'Joanna',
                                Engine: [
                                    'Amy',
                                    'Emma',
                                    'Brian',
                                    'Ivy',
                                    'Joanna',
                                    'Kendra',
                                    'Kimberly',
                                    'Salli',
                                    'Joey',
                                    'Justin',
                                    'Matthew'
                                ].includes(null !== (Bf = yf.speechEngineVoice) && void 0 !== Bf ? Bf : 'Joanna') ? 'neural' : 'standard',
                                Text: xf,
                                TextType: 'ssml'
                            };
                        Cf.synthesizeSpeech(Df, (xf, yf) => {
                            if (xf);
                            else if (null == yf ? void 0 : yf.AudioStream) {
                                const Ef = new Uint8Array(yf.AudioStream),
                                    Ff = new Blob([Ef.buffer], {
                                        type: 'audio/mpeg'
                                    }),
                                    Gf = URL.createObjectURL(Ff);
                                new Audio(Gf).play().catch(Ef => {});
                            }
                        });
                    }
                } else
                    yf.speechEngine;
        else {
            const Cf = new SpeechSynthesisUtterance(xf);
            window.speechSynthesis.speak(Cf);
        }
    }

    function xf(yf) {
        if (yf && (yf.classList.remove('ML__highlight'), yf.children))
            for (const zf of yf.children)
                xf(zf);
    }

    function yf(zf, Af) {
        var Bf;
        zf && (Af && (null === (Bf = zf.dataset) || void 0 === Bf ? void 0 : Bf.atomId) !== Af ? (zf.classList.remove('ML__highlight'), zf.children && zf.children.length > 0 && [...zf.children].forEach(zf => {
            zf instanceof HTMLElement && yf(zf, Af);
        })) : (zf.classList.add('ML__highlight'), zf.children && zf.children.length > 0 && [...zf.children].forEach(zf => {
            zf instanceof HTMLElement && yf(zf);
        })));
    }

    function zf(Af, Bf, Cf) {
        var Df;
        if (!e())
            return;
        if (null != Cf || (Cf = _Kh().config), 'amazon' !== Cf.speechEngine)
            return void(Cf.speakHook && Cf.speakHook(Bf, Cf));
        if (!globalThis.AWS)
            return;
        const Ef = new globalThis.AWS.Polly({
                apiVersion: '2016-06-10'
            }),
            Ff = {
                OutputFormat: 'json',
                VoiceId: null !== (Df = Cf.speechEngineVoice) && void 0 !== Df ? Df : 'Joanna',
                Engine: 'standard',
                Text: Bf,
                TextType: 'ssml',
                SpeechMarkTypes: ['ssml']
            };
        _Kh().readAloudElement = Af, Ef.synthesizeSpeech(Ff, (Af, Bf) => {
            if (Af)
                return;
            if (!(null == Bf ? void 0 : Bf.AudioStream))
                return;
            const Gf = new TextDecoder('utf-8').decode(new Uint8Array(Bf.AudioStream));
            _Kh().readAloudMarks = Gf.split('\n').map(Af => Af ? JSON.parse(Af) : {}), _Kh().readAloudTokens = [];
            for (const Hf of _Kh().readAloudMarks)
                Hf.value && _Kh().readAloudTokens.push(Hf.value);
            _Kh().readAloudCurrentMark = '', Ff.OutputFormat = 'mp3', Ff.SpeechMarkTypes = [], Ef.synthesizeSpeech(Ff, (Hf, Bf) => {
                if (Hf)
                    return;
                if (!(null == Bf ? void 0 : Bf.AudioStream))
                    return;
                const If = new Uint8Array(Bf.AudioStream),
                    Jf = new Blob([If.buffer], {
                        type: 'audio/mpeg'
                    }),
                    Kf = URL.createObjectURL(Jf),
                    Lf = _Kh();
                Lf.readAloudAudio ? Lf.readAloudAudio.pause() : (Lf.readAloudAudio = new Audio(), Lf.readAloudAudio.addEventListener('ended', () => {
                    const Mf = Lf.readAloudMathField;
                    Lf.readAloudStatus = 'ended', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                        bubbles: !0,
                        composed: !0
                    })), Mf ? (_qf(Mf), Lf.readAloudElement = null, Lf.readAloudMathField = null, Lf.readAloudTokens = [], Lf.readAloudMarks = [], Lf.readAloudCurrentMark = '') : xf(Lf.readAloudElement);
                }), Lf.readAloudAudio.addEventListener('timeupdate', () => {
                    let Mf = '';
                    const Nf = 1000 * Lf.readAloudAudio.currentTime + 100;
                    for (const Of of Lf.readAloudMarks)
                        Of.time < Nf && (Mf = Of.value);
                    Lf.readAloudCurrentMark !== Mf && (Lf.readAloudCurrentToken = Mf, Mf && Mf === Lf.readAloudFinalToken ? Lf.readAloudAudio.pause() : (Lf.readAloudCurrentMark = Mf, yf(Lf.readAloudElement, Lf.readAloudCurrentMark)));
                })), Lf.readAloudAudio.src = Kf, Lf.readAloudStatus = 'playing', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                    bubbles: !0,
                    composed: !0
                })), Lf.readAloudAudio.play();
            });
        });
    }

    function Af(Bf, Cf) {
        var Df, Ef, Ff;
        const Gf = _Bf(Bf, Object.keys(Bf));
        for (const Hf of Object.keys(Cf))
            switch (Hf) {
                case 'scriptDepth':
                    if (d(Cf.scriptDepth))
                        Gf.scriptDepth = [
                            Cf.scriptDepth[0],
                            Cf.scriptDepth[1]
                        ];
                    else {
                        if ('number' != typeof Cf.scriptDepth)
                            throw new TypeError('Unexpected value for scriptDepth');
                        Gf.scriptDepth = [
                            Cf.scriptDepth,
                            Cf.scriptDepth
                        ];
                    }
                    break;
                case 'locale':
                    'auto' === Cf.locale ? Gf.locale = e() ? navigator.language.slice(0, 5) : 'en' : Gf.locale = Cf.locale, k.locale = Gf.locale;
                    break;
                case 'strings':
                    k.merge(Cf.strings), Gf.strings = k.strings;
                    break;
                case 'virtualKeyboardLayout':
                    Gf.virtualKeyboardLayout = Cf.virtualKeyboardLayout;
                    break;
                case 'virtualKeyboardMode':
                    const If = Cf.virtualKeyboardMode.toLowerCase();
                    Gf.virtualKeyboardMode = 'auto' === If ? g() ? 'onfocus' : 'off' : If;
                    break;
                case 'customVirtualKeyboardLayers':
                    Gf.customVirtualKeyboardLayers = {
                        ...Gf.customVirtualKeyboardLayers,
                        ...Cf.customVirtualKeyboardLayers
                    };
                    break;
                case 'customVirtualKeyboards':
                    Gf.customVirtualKeyboards = {
                        ...Gf.customVirtualKeyboards,
                        ...Cf.customVirtualKeyboards
                    };
                    break;
                case 'letterShapeStyle':
                    'auto' === Cf.letterShapeStyle ? k.locale.startsWith('fr') ? Gf.letterShapeStyle = 'french' : Gf.letterShapeStyle = 'tex' : Gf.letterShapeStyle = Cf.letterShapeStyle;
                    break;
                case 'plonkSound':
                    void 0 !== Cf.plonkSound && (Gf.plonkSound = Cf.plonkSound);
                    break;
                case 'keypressSound':
                    null === Cf.keypressSound ? Gf.keypressSound = {
                        default: null,
                        delete: null,
                        return: null,
                        spacebar: null
                    } : 'string' == typeof Cf.keypressSound ? Gf.keypressSound = {
                        delete: Cf.keypressSound,
                        return: Cf.keypressSound,
                        spacebar: Cf.keypressSound,
                        default: Cf.keypressSound
                    } : 'object' == typeof Cf.keypressSound && 'default' in Cf.keypressSound && (Gf.keypressSound = {
                        ...Cf.keypressSound
                    }, Gf.keypressSound.delete = null !== (Df = Gf.keypressSound.delete) && void 0 !== Df ? Df : Cf.keypressSound.default, Gf.keypressSound.return = null !== (Ef = Gf.keypressSound.return) && void 0 !== Ef ? Ef : Cf.keypressSound.default, Gf.keypressSound.spacebar = null !== (Ff = Gf.keypressSound.spacebar) && void 0 !== Ff ? Ff : Cf.keypressSound.default);
                    break;
                case 'computeEngine':
                    Gf.computeEngine = Cf.computeEngine;
                    break;
                case 'virtualKeyboardContainer':
                    Gf.virtualKeyboardContainer = Cf.virtualKeyboardContainer;
                    break;
                case 'macros':
                    Gf.macros = _V(Cf.macros);
                    break;
                default:
                    d(Cf[Hf]) ? Gf[Hf] = [...Cf[Hf]] : 'object' == typeof Cf[Hf] ? Gf[Hf] = {
                        ...Cf[Hf]
                    } : Gf[Hf] = Cf[Hf];
            }
        return Gf;
    }

    function _Bf(Cf, Df) {
        let Ef;
        Ef = 'string' == typeof Df ? [Df] : void 0 === Df ? Object.keys(Cf) : Df;
        const Ff = {};
        for (const Gf of Ef)
            null === Cf[Gf] ? Ff[Gf] = null : d(Cf[Gf]) ? Ff[Gf] = [...Cf[Gf]] : 'object' != typeof Cf[Gf] || Cf[Gf] instanceof Element || 'computeEngine' === Gf ? Ff[Gf] = Cf[Gf] : Ff[Gf] = {
                ...Cf[Gf]
            };
        return 'string' == typeof Gf ? Ff[Gf] : Ff;
    }
    tf({
        performWithFeedback: (qc, rc) => function(Cf, Df) {
            Cf.focus(), Cf.options.keypressVibration && h() && navigator.vibrate(3), 'moveToNextPlaceholder' === (Df = Df.replace(/-\w/g, Cf => Cf[1].toUpperCase())) || 'moveToPreviousPlaceholder' === Df || 'complete' === Df ? Cf.playSound('return') : 'deleteBackward' === Df || 'deleteForward' === Df || 'deletePreviousWord' === Df || 'deleteNextWord' === Df || 'deleteToGroupStart' === Df || 'deleteToGroupEnd' === Df || 'deleteToMathFieldStart' === Df || 'deleteToMathFieldEnd' === Df ? Cf.playSound('delete') : Cf.playSound('keypress');
            const Ef = Cf.executeCommand(Df);
            return Cf.scrollIntoView(), Ef;
        }(qc, rc)
    }), tf({
        complete: _ef,
        nextSuggestion: function(Cf) {
            return cf(Cf, {
                atIndex: Cf.suggestionIndex + 1
            }), !1;
        },
        previousSuggestion: function(Cf) {
            return cf(Cf, {
                atIndex: Cf.suggestionIndex - 1
            }), !1;
        }
    }, {
        target: 'mathfield',
        category: 'autocomplete'
    }), tf({
        speak: (qc, rc, c) => function(Cf, Df, Ef) {
            var Ff, Gf;
            Ef = null != Ef ? Ef : {
                withHighlighting: !1
            };
            const {
                model: Hf
            } = Cf, If = function(Jf) {
                let Kf = null;
                switch (Jf) {
                    case 'all':
                    default:
                        Kf = Hf.root;
                        break;
                    case 'selection':
                        Kf = Hf.getAtoms(Hf.selection);
                        break;
                    case 'left':
                        Kf = Hf.getAtoms(Hf.offsetOf(Hf.at(Hf.position).leftSibling), Hf.position);
                        break;
                    case 'right':
                        Kf = Hf.getAtoms(Hf.position, Hf.offsetOf(Hf.at(Hf.position).rightSibling));
                        break;
                    case 'group':
                        Kf = Hf.getAtoms(Hf.getSiblingsRange(Hf.position));
                        break;
                    case 'parent': {
                        const {
                            parent: Lf
                        } = Hf.at(Hf.position);
                        Kf = Lf && 'root' !== Lf.type ? Lf : Hf.root;
                        break;
                    }
                }
                return Kf;
            }(Df);
            if (null === If)
                return null === (Gf = (Ff = Cf.options).speakHook) || void 0 === Gf || Gf.call(Ff, function(Jf) {
                    let Kf = '';
                    switch (Jf) {
                        case 'all':
                        case 'group':
                        default:
                            break;
                        case 'selection':
                            Kf = 'no selection';
                            break;
                        case 'left':
                            Kf = 'at start';
                            break;
                        case 'right':
                            Kf = 'at end';
                            break;
                        case 'parent':
                            Kf = 'no parent';
                    }
                    return Kf;
                }(Df), Cf.options), !1;
            const Jf = {
                ...Cf.options
            };
            (Ef.withHighlighting || 'amazon' === Jf.speechEngine) && (Jf.textToSpeechMarkup = globalThis.sre && 'sre' === Jf.textToSpeechRules ? 'ssml_step' : 'ssml'), Jf.textToSpeechMarkup || /firefox/i.test(navigator.userAgent) || (Jf.textToSpeechMarkup = 'ssml');
            const Kf = ie(If, Jf);
            return e() && Ef.withHighlighting ? (_Kh().readAloudMathField = Cf, _qf(Cf, {
                forHighlighting: !0
            }), Cf.options.readAloudHook && Cf.options.readAloudHook(Cf.field, Kf, Cf.options)) : Cf.options.speakHook && Cf.options.speakHook(Kf, Jf), !1;
        }(qc, rc, c)
    }, {
        target: 'mathfield',
        category: 'speech'
    });
    const Cf = '<span style="width: 21px; margin-top: 4px;"><svg style="width: 21px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>';

    function Df() {
        var Ef, Ff, Gf;
        return {
            readOnly: !1,
            createHTML: Ef => Ef,
            fontsDirectory: './fonts',
            soundsDirectory: './sounds',
            computeEngine: void 0,
            defaultMode: 'math',
            macros: T(),
            registers: {},
            colorMap: s,
            backgroundColorMap: t,
            horizontalSpacingScale: 1,
            letterShapeStyle: k.locale.startsWith('fr') ? 'french' : 'tex',
            smartMode: !1,
            smartFence: !0,
            smartSuperscript: !0,
            scriptDepth: [
                1 / 0,
                1 / 0
            ],
            removeExtraneousParentheses: !0,
            mathModeSpace: '',
            decimalSeparator: '.',
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            enablePopover: !0,
            locale: k.locale,
            strings: k.strings,
            keybindings: Oe,
            inlineShortcuts: Id,
            inlineShortcutTimeout: 0,
            virtualKeyboardToggleGlyph: Cf,
            virtualKeyboardMode: 'auto',
            virtualKeyboards: 'all',
            virtualKeyboardLayout: 'auto',
            customVirtualKeyboardLayers: {},
            customVirtualKeyboards: {},
            virtualKeyboardTheme: e() && /android|cros/i.test(navigator.userAgent) ? 'material' : 'apple',
            keypressVibration: !0,
            keypressSound: null,
            plonkSound: null,
            virtualKeyboardToolbar: 'default',
            virtualKeyboardContainer: null !== (Ff = null === (Ef = globalThis.document) || void 0 === Ef ? void 0 : Ef.body) && void 0 !== Ff ? Ff : null,
            useSharedVirtualKeyboard: !1,
            sharedVirtualKeyboardTargetOrigin: null === (Gf = globalThis.window) || void 0 === Gf ? void 0 : Gf.origin,
            originValidator: 'same-origin',
            textToSpeechRules: 'mathlive',
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {},
            speechEngine: 'local',
            speechEngineVoice: 'Joanna',
            speechEngineRate: '100%',
            speakHook: wf,
            readAloudHook: zf,
            onInlineShortcut: () => '',
            onExport: Pd,
            value: ''
        };
    }

    function Ef(Ff) {
        return 'inline-math' === Ff.defaultMode ? 'math' : Ff.defaultMode;
    }
    var Ff, Gf, Hf = '@keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}.ML__caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:2px;border-right:2px solid var(--caret-color,var(--ML__caret-color));content:"";left:-1px;margin-right:-2px;position:relative}.ML__text-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:1px;border-right:1px solid var(--caret-color,var(--ML__caret-color));content:"";left:0;margin-right:-1px;position:relative}.ML__latex-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;color:var(--caret-color,var(--ML__caret-color));content:"_";margin-right:calc(-1ex - 2px);position:relative}.ML__container{--ML__selection-background-color:hsl(var(--hue,212),97%,85%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.1);--ML__contains-highlight-background-color:hsl(var(--hue,212),40%,95%);--ML__selection-color:currentColor;--ML__caret-color:hsl(var(--hue,212),40%,49%);--ML__smart-fence-color:currentColor;--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),40%,49%);align-items:flex-end;display:flex;flex-flow:row;isolation:isolate;justify-content:space-between;min-height:39px;touch-action:none;width:100%}@media (prefers-color-scheme:dark){.ML__container{--ML__selection-background-color:hsl(var(--hue,212),25%,45%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.2);--ML__contains-highlight-background-color:hsl(var(--hue,212),5%,34%);--ML__caret-color:hsl(var(--hue,212),60%,69%);--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),60%,69%)}}.ML__content{align-items:center;align-self:center;display:flex;overflow:hidden;padding:2px 0 2px 1px;position:relative;width:100%}.ML__virtual-keyboard-toggle{box-sizing:border-box;display:none}.ML__virtual-keyboard-toggle>span{align-items:center;align-self:center;display:flex}.ML__virtual-keyboard-toggle.is-visible{fill:currentColor;align-items:center;align-self:center;background:transparent;border:1px solid transparent;border-radius:8px;color:var(--primary,hsl(var(--hue,212),40%,50%));cursor:pointer;display:flex;flex-direction:column;flex-shrink:0;height:34px;justify-content:center;margin-right:4px;padding:0;transition:background .2s cubic-bezier(.64,.09,.08,1);width:34px}.ML__virtual-keyboard-toggle.is-visible:hover{fill:currentColor;background:hsla(0,0%,70%,.5);border-radius:8px;color:#333}.ML__textarea__textarea{clip:rect(0 0 0 0);border:none;display:inline-block;font-family:KaTeX_Main;font-size:1em;height:1px;outline:none;position:absolute;resize:none;transform:scale(0);width:1px}.ML__focused .ML__text{background:var(--highlight-text,var(--ML__text-highlight-background-color))}.ML__smart-fence__close{color:var(--smart-fence-color,var(--ML__smart-fence-color));opacity:var(--smart-fence-opacity,.5)}.ML__focused .ML__selection{background:var(--selection-background-color-focused,var(--selection-background-color,var(--ML__selection-background-color)))!important}.ML__focused .ML__selected,.ML__focused .ML__selected .ML__contains-caret,.ML__focused .ML__selected .ML__placeholder,.ML__focused .ML__selected .ML__smart-fence__close{color:var(--selection-color-focused,var(--selection-color,var(--ML__selection-color)))!important}.ML__selection{background:var(--selection-background-color,var(--ML__selection-background-color))!important;box-sizing:border-box}.ML__selected,.ML__selected .ML__contains-caret,.ML__selected .ML__placeholder,.ML__selected .ML__smart-fence__close{color:var(--selection-color,var(--ML__selection-color));opacity:1}.ML__contains-caret .ML__sqrt-line,.ML__contains-caret .ML__sqrt-sign,.ML__contains-caret.ML__close,.ML__contains-caret.ML__open,.ML__contains-caret>.ML__close,.ML__contains-caret>.ML__open{color:var(--caret-color,var(--ML__caret-color))}.ML__contains-highlight{background:var(--contains-highlight-backround-color,var(--ML__contains-highlight));box-sizing:border-box}.ML__latex{color:var(--latex-color,var(--ML__latex-color));font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace;font-weight:400}.ML__suggestion{opacity:.5}.ML__virtual-keyboard-toggle.is-visible.is-pressed:hover{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__virtual-keyboard-toggle:focus{border:2px solid var(--primary,hsl(var(--hue,212),40%,50%));border-radius:8px;outline:none}.ML__virtual-keyboard-toggle.is-active,.ML__virtual-keyboard-toggle.is-active:hover,.ML__virtual-keyboard-toggle.is-pressed{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__tooltip-container{position:relative;transform:scale(0)}.ML__tooltip-container .ML__tooltip-content{background:#616161;border-radius:8px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;display:inline-table;max-width:400px;opacity:0;padding:12px;position:fixed;transition:opacity .15s cubic-bezier(.4,0,1,1);visibility:hidden;width:max-content;z-index:2}.ML__tooltip-container .ML__tooltip-content .ML__text{white-space:normal}.ML__tooltip-container .ML__tooltip-content .ML__base{display:contents}.ML__tooltip-container:hover .ML__tooltip-content{font-size:.75em;opacity:1;transform:scale(1) translateY(3em);visibility:visible}[data-ML__tooltip]{position:relative}[data-ML__tooltip][data-placement=top]:after{bottom:100%;top:inherit}[data-ML__tooltip]:after{background:#616161;border-radius:2px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-ML__tooltip);display:none;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;right:110%;text-align:center;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1);width:max-content;z-index:2}@media only screen and (max-width:767px){[data-ML__tooltip]:after{font-size:16px;padding:8px 16px}}:not(.tracking) [data-ML__tooltip]:hover{position:relative}:not(.tracking) [data-ML__tooltip]:hover:after{display:inline-table;opacity:1;transform:scale(1);visibility:visible}[data-ML__tooltip][data-delay]:after{transition-delay:0s}[data-ML__tooltip][data-delay]:hover:after{transition-delay:1s}';
    let If = null;

    function Jf(Kf) {
        if (/^(?:[a-z+]+:)?\/\//i.test(Kf))
            return new URL(Kf).href;
        if (null === If)
            try {
                const Lf = new XMLHttpRequest();
                Lf.open('HEAD', _Kf, !1), Lf.send(null), 200 === Lf.status && (If = Lf.responseURL);
            } catch (Kf) {}
        return If ? new URL(Kf, If).href : '';
    }
    const _Kf = (null === (Gf = null === (Ff = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === Ff ? void 0 : Ff.currentScript) || void 0 === Gf ? void 0 : Gf.src) || function() {
        const Lf = String(new Error().stack).replace(/^Error.*\n/, '').split('\n');
        if (0 === Lf.length)
            return '';
        let Mf = Lf[1],
            Nf = Mf.match(/http.*\.ts[\?:]/);
        return Nf && (Mf = Lf[2]), Nf = Mf.match(/(https?:.*):[0-9]+:[0-9]+/), Nf || (Nf = Mf.match(/at (.*(\.ts))[\?:]/), Nf || (Nf = Mf.match(/at (.*(\.mjs|\.js))[\?:]/))), Nf ? Nf[1] : '';
    }();
    async function Lf(Mf) {
        var Nf;
        if (e() && !document.body.classList.contains('ML__fonts-loading') && (null === (Nf = getComputedStyle(document.documentElement).getPropertyValue('--ML__static-fonts')) || void 0 === Nf || !Nf) && (document.body.classList.remove('ML__fonts-did-not-load'), 'fonts' in document)) {
            const Of = [
                    'KaTeX_Main',
                    'KaTeX_Math',
                    'KaTeX_AMS',
                    'KaTeX_Caligraphic',
                    'KaTeX_Fraktur',
                    'KaTeX_SansSerif',
                    'KaTeX_Script',
                    'KaTeX_Typewriter',
                    'KaTeX_Size1',
                    'KaTeX_Size2',
                    'KaTeX_Size3',
                    'KaTeX_Size4'
                ],
                Pf = Array.from(document.fonts).map(Mf => Mf.family);
            if (Of.every(Mf => Pf.includes(Mf)))
                return;
            const Qf = Jf(null != Mf ? Mf : './fonts');
            if (!Qf)
                return;
            document.body.classList.add('ML__fonts-loading');
            const Rf = [
                ['KaTeX_Main-Regular'],
                [
                    'KaTeX_Main-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                ['KaTeX_AMS-Regular'],
                ['KaTeX_Caligraphic-Regular'],
                [
                    'KaTeX_Caligraphic-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                ['KaTeX_Fraktur-Regular'],
                [
                    'KaTeX_Fraktur-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Regular',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_SansSerif-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Italic',
                    {
                        style: 'italic'
                    }
                ],
                ['KaTeX_Script-Regular'],
                ['KaTeX_Typewriter-Regular'],
                ['KaTeX_Size1-Regular'],
                ['KaTeX_Size2-Regular'],
                ['KaTeX_Size3-Regular'],
                ['KaTeX_Size4-Regular']
            ].map(Mf => function(Sf, Tf, Uf = {}) {
                return new FontFace(Sf, `url(${ Tf }.woff2) format('woff2')`, Uf);
            }(Mf[0].replace(/-[a-zA-Z]+$/, ''), Qf + '/' + Mf[0], Mf[1]));
            try {
                (await Promise.all(Rf.map(Mf => {
                    try {
                        return Mf.load();
                    } catch {}
                }))).forEach(Mf => document.fonts.add(Mf));
            } catch (Mf) {
                document.body.classList.add('ML__fonts-did-not-load');
            }
            document.body.classList.remove('ML__fonts-loading');
        }
    }

    function Mf(Nf) {
        return 'number' == typeof Nf && !Number.isNaN(Nf);
    }

    function Nf(Of) {
        return Array.isArray(Of) && 2 === Of.length;
    }

    function Of(Pf) {
        return null != Pf && 'object' == typeof Pf && 'ranges' in Pf && Array.isArray(Pf.ranges);
    }
    const Pf = {
            '\\ne': '\u2260',
            '\\neq': '\u2260',
            '\u2212': '-',
            '-': '-',
            '\\alpha': 'alpha',
            '\\beta': 'beta',
            '\\gamma': 'gamma',
            '\\delta': 'delta',
            '\\epsilon': 'epsilon',
            '\\varepsilon': 'varepsilon',
            '\\zeta': 'zeta',
            '\\eta': 'eta',
            '\\theta': 'theta',
            '\\vartheta': 'vartheta',
            '\\iota': 'iota',
            '\\kappa': 'kappa',
            '\\lambda': 'lambda',
            '\\mu': 'mu',
            '\\nu': 'nu',
            '\\xi': 'xi',
            '\\pi': 'pi',
            '\\rho': 'rho',
            '\\sigma': 'sigma',
            '\\tau': 'tau',
            '\\upsilon': 'upsilon',
            '\\phi': 'phi',
            '\\varphi': 'varphi',
            '\\chi': 'chi',
            '\\psi': 'psi',
            '\\omega': 'omega',
            '\\Gamma': 'Gamma',
            '\\Delta': 'Delta',
            '\\Theta': 'Theta',
            '\\Lambda': 'Lambda',
            '\\Xi': 'Xi',
            '\\Pi': 'Pi',
            '\\Sigma': 'Sigma',
            '\\Phi': 'Phi',
            '\\Psi': 'Psi',
            '\\Omega': 'Omega',
            '\\exponentialE': 'e',
            '\\imaginaryI': 'i',
            '\\imaginaryJ': 'j',
            '\\!': ' ',
            '\\,': ' ',
            '\\:': ' ',
            '\\;': ' ',
            '\\enskip': ' ',
            '\\enspace': ' ',
            '\\qquad': ' ',
            '\\quad': ' '
        },
        Qf = {
            '\\pm': '+-',
            '\\times': 'xx',
            '\\colon': ':',
            '\\vert': '|',
            '\\Vert': '||',
            '\\mid': '|',
            '\\lbrace': '{',
            '\\rbrace': '}',
            '\\lparen': '(',
            '\\rparen': ')',
            '\\langle': '(:',
            '\\rangle': ':)'
        };

    function Rf(Sf) {
        var Tf, Uf, Vf, Wf, Xf, Yf, Zf, $f, ag, bg, cg, dg, eg;
        if (!Sf)
            return '';
        if (d(Sf)) {
            if (0 === Sf.length)
                return '';
            if ('first' === Sf[0].type && (Sf = Sf.slice(1)), 0 === Sf.length)
                return '';
            let fg = '';
            if ('latex' === Sf[0].mode)
                for (const gg of Sf)
                    fg += Rf(gg);
            else if ('text' === Sf[0].mode) {
                let hg = 0;
                for (fg = '"';
                    'text' === (null === (gg = Sf[hg]) || void 0 === gg ? void 0 : gg.mode);)
                    fg += Sf[hg].body ? Rf(Sf[hg].body) : Sf[hg].value, hg++;
                fg += '"' + Rf(Sf.slice(hg));
            } else if ('math' === Sf[0].mode) {
                let hg = 0;
                for (; Sf[hg] && 'math' === Sf[hg].mode;)
                    fg += Rf(Sf[hg]), hg++;
                fg += Rf(Sf.slice(hg));
            }
            return fg.trim();
        }
        if ('text' === Sf.mode)
            return '"' + Sf.value + '"';
        let fg = '';
        const {
            command: gg
        } = Sf;
        let hg;
        switch (Sf.type) {
            case 'first':
                return '';
            case 'group':
            case 'root':
                fg = null !== (Uf = Pf[gg]) && void 0 !== Uf ? Uf : Rf(Sf.body);
                break;
            case 'genfrac': {
                const ig = Sf;
                (ig.leftDelim || ig.rightDelim) && (fg += '.' !== ig.leftDelim && ig.leftDelim ? ig.leftDelim : '{:'), ig.hasBarLine ? (fg += '(', fg += Rf(ig.above), fg += ')/(', fg += Rf(ig.below), fg += ')') : (fg += '(' + Rf(ig.above) + '),', fg += '(' + Rf(ig.below) + ')'), (ig.leftDelim || ig.rightDelim) && (fg += '.' !== ig.rightDelim && ig.rightDelim ? ig.rightDelim : '{:');
            }
            break;
            case 'surd':
                fg += Sf.hasEmptyBranch('above') ? 'sqrt(' + Rf(Sf.body) + ')' : 'root(' + Rf(Sf.above) + ')(' + Rf(Sf.body) + ')';
                break;
            case 'latex':
                fg = Sf.value;
                break;
            case 'leftright': {
                const ig = Sf;
                fg += '.' !== ig.leftDelim && ig.leftDelim ? ig.leftDelim : '{:', fg += Rf(ig.body), fg += '.' !== ig.rightDelim && ig.rightDelim ? ig.rightDelim : ':}';
            }
            break;
            case 'sizeddelim':
            case 'delim':
            case 'overlap':
            case 'overunder':
            case 'box':
                break;
            case 'mord':
                fg = null !== (Wf = null !== (Vf = Pf[gg]) && void 0 !== Vf ? Vf : gg) && void 0 !== Wf ? Wf : 'string' == typeof Sf.value ? Sf.value : '', fg.startsWith('\\') && (fg += ' '), hg = gg ? gg.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null, hg ? fg = String.fromCodePoint(Number.parseInt('0x' + hg[1])) : fg.length > 0 && fg.startsWith('\\') && (fg = 'string' == typeof Sf.value ? Sf.value.charAt(0) : Sf.command);
                break;
            case 'mbin':
            case 'mrel':
            case 'minner':
                fg = null !== (Yf = null !== (Xf = Pf[gg]) && void 0 !== Xf ? Xf : Qf[gg]) && void 0 !== Yf ? Yf : Sf.value;
                break;
            case 'mopen':
            case 'mclose':
                fg += Sf.value;
                break;
            case 'mpunct':
                fg = null !== (Zf = Qf[gg]) && void 0 !== Zf ? Zf : gg;
                break;
            case 'mop':
                '\u200B' !== Sf.value && (fg = '', fg += '\\operatorname' === gg ? Rf(Sf.body) : null !== ($f = Sf.value) && void 0 !== $f ? $f : gg, fg += ' ');
                break;
            case 'array':
                const ig = Sf.array,
                    jg = Sf.environmentName,
                    kg = null !== (ag = {
                        bmatrix: [
                            '[',
                            ']'
                        ],
                        'bmatrix*': [
                            '[',
                            ']'
                        ]
                    } [jg]) && void 0 !== ag ? ag : [
                        '(',
                        ')'
                    ],
                    lg = [];
                for (const mg of ig) {
                    const ng = [];
                    for (const og of mg)
                        ng.push(kg[0] + Rf(og) + kg[1]);
                    lg.push(ng.join(','));
                }
                const ng = null !== (bg = {
                    bmatrix: [
                        '[',
                        ']'
                    ],
                    'bmatrix*': [
                        '[',
                        ']'
                    ],
                    cases: [
                        '{',
                        ':}'
                    ]
                } [jg]) && void 0 !== bg ? bg : [
                    '(',
                    ')'
                ];
                fg = ng[0] + lg.join(',') + ng[1];
                break;
            case 'spacing':
                fg = null !== (cg = Pf[gg]) && void 0 !== cg ? cg : ' ';
                break;
            case 'enclose':
                fg = '(' + Rf(mg.body) + ')';
                break;
            case 'space':
                fg = ' ';
                break;
            case 'msubsup':
                fg = '';
                break;
            case 'macro':
                fg = null !== (eg = null !== (dg = Pf[gg]) && void 0 !== dg ? dg : Qf[gg]) && void 0 !== eg ? eg : Rf(mg.body);
        }
        if (!Sf.hasEmptyBranch('subscript')) {
            fg += '_';
            const ig = Rf(Sf.subscript);
            fg += ig.length > 1 ? '(' + ig + ')' : ig;
        }
        if (!Sf.hasEmptyBranch('superscript')) {
            fg += '^';
            const ig = Rf(Sf.superscript);
            fg += ig.length > 1 ? '(' + ig + ')' : ig;
        }
        return fg;
    }

    function Sf(Tf) {
        let Uf;
        if ('body' === Tf.treeBranch)
            Uf = {
                enclose: 'cross out',
                leftright: 'delimiter',
                surd: 'square root',
                root: 'math field',
                mop: 'operator'
            } [Tf.type];
        else if ('genfrac' === Tf.parent.type) {
            if ('above' === Tf.treeBranch)
                return 'numerator';
            if ('below' === Tf.treeBranch)
                return 'denominator';
        } else
            'surd' === Tf.parent.type ? 'above' === Tf.treeBranch && (Uf = 'index') : 'superscript' === Tf.treeBranch ? Uf = 'superscript' : 'subscript' === Tf.treeBranch && (Uf = 'subscript');
        return null != Uf ? Uf : 'parent';
    }
    class Tf {
        get atoms() {
            return this.root.children;
        }
        get selection() {
            return this._selection;
        }
        set selection(Uf) {
            this.setSelection(Uf);
        }
        setSelection(Uf, Vf) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Wf = this.normalizeSelection(Uf, Vf);
                if (void 0 === Wf)
                    throw new TypeError('Invalid selection');
                if (1 === Wf.ranges.length && Wf.ranges[0][0] === Wf.ranges[0][1]) {
                    const Xf = Wf.ranges[0][0];
                    this._position = Xf, this._anchor = Xf, this._selection = Wf;
                } else {
                    const Xf = Gd(Wf);
                    'backward' === Wf.direction ? [this._position, this._anchor] = Xf : [this._anchor, this._position] = Xf;
                    const Yf = this.at(Xf[0] + 1),
                        Zf = this.at(Xf[1]),
                        $f = kc.commonAncestor(Yf, Zf);
                    'array' === (null == $f ? void 0 : $f.type) && Yf.parent === $f && Zf.parent, this._selection = {
                        ranges: [Xf],
                        direction: Wf.direction
                    };
                }
            });
        }
        setPositionHandlingPlaceholder(Uf) {
            var Vf, Wf, Xf;
            'placeholder' === (null === (Vf = this.at(Uf)) || void 0 === Vf ? void 0 : Vf.type) ? this.setSelection(Uf - 1, Uf): 'placeholder' === (null === (Xf = null === (Wf = this.at(Uf)) || void 0 === Wf ? void 0 : Wf.rightSibling) || void 0 === Xf ? void 0 : Xf.type) ? this.setSelection(Uf, Uf + 1) : this.position = Uf;
        }
        getState() {
            return {
                content: this.root.toJson(),
                selection: this.selection
            };
        }
        setState(Uf, Vf) {
            var Wf;
            const Xf = this.suppressChangeNotifications;
            this.suppressChangeNotifications = null === (Wf = null == Vf ? void 0 : Vf.suppressChangeNotifications) || void 0 === Wf || Wf;
            let Yf = {};
            'undo' === (null == Vf ? void 0 : Vf.type) && (Yf = {
                inputType: 'historyUndo'
            }), 'redo' === (null == Vf ? void 0 : Vf.type) && (Yf = {
                inputType: 'historyRedo'
            }), Ye(this, Yf) && (this.root = _xd(Uf.content, this.mathfield), this.selection = Uf.selection, Ze(this, Yf)), this.suppressChangeNotifications = Xf;
        }
        get position() {
            return this._position;
        }
        set position(Uf) {
            this.setSelection(Uf, Uf);
        }
        get anchor() {
            return this._anchor;
        }
        get selectionIsCollapsed() {
            return this._anchor === this._position;
        }
        get selectionIsPlaceholder() {
            return 1 === Math.abs(this._anchor - this._position) && 'placeholder' === this.at(Math.max(this._anchor, this._position)).type;
        }
        collapseSelection(Uf = 'forward') {
            return this._anchor !== this._position && (this.position = 'backward' === Uf ? Math.min(this._anchor, this._position) : Math.max(this._anchor, this._position), !0);
        }
        get lastOffset() {
            return this.atoms.length - 1;
        }
        at(Uf) {
            return this.atoms[Uf];
        }
        offsetOf(Uf) {
            return this.atoms.indexOf(Uf);
        }
        getSiblingsRange(Uf) {
            const Vf = this.at(Uf),
                {
                    parent: Wf
                } = Vf;
            if (!Wf)
                return [
                    0,
                    this.lastOffset
                ];
            const Xf = Vf.parent.branch(Vf.treeBranch);
            return [
                this.offsetOf(Xf[0]),
                this.offsetOf(Xf[Xf.length - 1])
            ];
        }
        getBranchRange(Uf, Vf) {
            const Wf = this.at(Uf).branch(Vf);
            return [
                this.offsetOf(Wf[0]),
                this.offsetOf(Wf[Wf.length - 1])
            ];
        }
        getAtoms(Uf, Vf, Wf) {
            var Xf, Yf;
            let Zf, $f, ag = null != Wf ? Wf : {};
            if (Of(Uf)) {
                if (ag = null !== (Xf = Vf) && void 0 !== Xf ? Xf : {}, Uf.ranges.length > 1)
                    return Uf.ranges.reduce((Uf, Vf) => [
                        ...Uf,
                        ...this.getAtoms(Vf, ag)
                    ], []);
                Uf = Uf.ranges[0];
            }
            if (Mf(Uf)) {
                if (Zf = Uf, !Mf(Vf))
                    return [];
                $f = Vf;
            } else
                [bg, cg] = Uf, ag = null !== (Yf = Vf) && void 0 !== Yf ? Yf : {};
            if (!Number.isFinite(Zf))
                return [];
            void 0 === ag.includeChildren && (ag.includeChildren = !1), Zf < 0 && (Zf = this.lastOffset - Zf + 1), $f < 0 && ($f = this.lastOffset - $f + 1);
            const bg = Math.min(Zf, $f) + 1,
                cg = Math.max(Zf, $f);
            if (1 === bg && cg === this.lastOffset)
                return [this.root];
            let dg = [];
            for (let eg = bg; eg <= cg; eg++) {
                const fg = this.atoms[eg];
                _Uf(this, fg, bg, cg) && dg.push(fg);
            }
            return ag.includeChildren || (dg = dg.filter(eg => {
                let fg = !1,
                    {
                        parent: gg
                    } = eg;
                for (; gg && !fg;)
                    fg = _Uf(this, gg, bg, cg), gg = gg.parent;
                return !fg;
            })), dg;
        }
        getAllAtoms(Uf) {
            const Vf = [],
                Wf = this.lastOffset;
            for (let Xf = Uf; Xf <= Wf; Xf++)
                Vf.push(this.atoms[Xf]);
            for (let Yf = 0; Yf < Uf; Yf++)
                Vf.push(this.atoms[Yf]);
            return Vf;
        }
        extractAtoms(Uf) {
            let Vf = this.getAtoms(Uf);
            1 === Vf.length && 'root' === Vf[0].type && (Vf = Vf[0].children);
            for (const Wf of Vf)
                Wf.parent.removeChild(Wf);
            return Vf;
        }
        deleteAtoms(Uf) {
            this.extractAtoms(Uf), this.position = Uf[0];
        }
        atomToString(Uf, Vf) {
            const Wf = null != Vf ? Vf : 'latex';
            if (Wf.startsWith('latex'))
                return Hb.serialize([Uf], {
                    expandMacro: 'latex-expanded' === Wf,
                    skipStyles: 'latex-unstyled' === Wf,
                    defaultMode: this.mathfield.options.defaultMode
                });
            if ('math-ml' === Wf)
                return _ae(Uf, this.mathfield.options);
            if ('spoken' === Wf)
                return ie(Uf, this.mathfield.options);
            if ('spoken-text' === Wf) {
                const Xf = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = '';
                const Yf = ie(Uf, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Xf, Yf;
            }
            if ('spoken-ssml' === Wf || 'spoken-ssml-with-highlighting' === Wf) {
                const Xf = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = 'ssml';
                const Yf = ie(Uf, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Xf, Yf;
            }
            if ('math-json' === Wf) {
                if (!this.mathfield.computeEngine)
                    return '';
                try {
                    const Xf = this.mathfield.computeEngine.parse(kc.serialize(Uf, {
                        expandMacro: !1,
                        defaultMode: 'math'
                    }));
                    return JSON.stringify(Xf.json);
                } catch (Uf) {
                    return JSON.stringify([
                        'Error',
                        'Nothing',
                        `'${ Uf.toString() }'`
                    ]);
                }
            }
            return 'ascii-math' === Wf ? Rf(Uf) : '';
        }
        getValue(Uf, Vf, Wf) {
            if (void 0 === Uf)
                return this.atomToString(this.root, 'latex');
            if ('string' == typeof Uf)
                return this.atomToString(this.root, Uf);
            let Xf, Yf;
            if (Mf(Uf) && Mf(Vf) ? (Xf = [this.normalizeRange([
                    Uf,
                    Vf
                ])], Yf = null != Wf ? Wf : 'latex') : Nf(Uf) ? (Xf = [this.normalizeRange(Uf)], Yf = Vf) : Of(Uf) ? (Xf = Uf.ranges, Yf = Vf) : (Xf = [], Yf = 'latex'), Yf.startsWith('latex')) {
                const Zf = {
                    expandMacro: 'latex-expanded' === Yf,
                    skipStyles: 'latex-unstyled' === Yf,
                    defaultMode: this.mathfield.options.defaultMode
                };
                return ec(Xf.map(Vf => kc.serialize(this.getAtoms(Vf), Zf)));
            }
            return Xf.map(Uf => this.getAtoms(Uf).map(Uf => this.atomToString(Uf, Yf)).join('')).join('');
        }
        extendSelection(Uf) {
            let Vf = this._anchor;
            if ('forward' === Uf) {
                let Wf = this._position;
                do {
                    let Xf = this.at(Wf + 1);
                    if (null == Xf ? void 0 : Xf.inCaptureSelection) {
                        for (; !Xf.captureSelection;)
                            Xf = Xf.parent;
                        Wf = this.offsetOf(null == Xf ? void 0 : Xf.lastChild) + 1;
                    } else
                        Wf += 1;
                } while (Wf <= this.lastOffset && this.at(Wf).isFirstSibling);
                return Wf === Vf - 1 && 'first' === this.at(Vf).type && (Wf = Vf), this.extendSelectionTo(Vf, Wf);
            }
            let Wf = this._position - 1;
            if (Wf < 0)
                return !1;
            for (; Wf >= 0 && this.at(Wf).isLastSibling;) {
                let Xf = this.at(Wf);
                if (null == Xf ? void 0 : Xf.inCaptureSelection) {
                    for (; !Xf.captureSelection;)
                        Xf = Xf.parent;
                    Wf = this.offsetOf(Xf.firstChild) - 1;
                } else
                    Wf -= 1;
            }
            return Wf < 0 && (Wf = 0), Wf === Vf + 1 && 'first' === this.at(Wf).type && (Vf = Wf), this.extendSelectionTo(Vf, Wf);
        }
        extendSelectionTo(Uf, Vf) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Wf = this.normalizeRange([
                    Uf,
                    Vf
                ]);
                let [Xf, Yf] = Wf, {
                    parent: Zf
                } = this.at(Yf);
                if (Zf && ('genfrac' === Zf.type || 'msubsup' === Zf.type))
                    for (; Zf !== this.root && _Vf(this, Zf, [
                            Xf,
                            Yf
                        ]);)
                        Yf = this.offsetOf(Zf), Zf = Zf.parent;
                for (Zf = this.at(Xf).parent; Zf !== this.root && _Vf(this, Zf, [
                        Xf,
                        Yf
                    ]);)
                    Xf = this.offsetOf(Zf.leftSibling), Zf = Zf.parent;
                if (Zf = this.at(Yf).parent, 'genfrac' === (null == Zf ? void 0 : Zf.type))
                    for (; Zf !== this.root && _Vf(this, Zf, [
                            Xf,
                            Yf
                        ]);)
                        Yf = this.offsetOf(Zf), Zf = Zf.parent;
                this._position = this.normalizeOffset(Vf), this._selection = {
                    ranges: [
                        [
                            Xf,
                            Yf
                        ]
                    ],
                    direction: 'none'
                };
            });
        }
        setListeners(Uf) {
            this.listeners = Uf;
        }
        announce(Uf, Vf, Wf = []) {
            var Xf, Yf;
            null === (Yf = null === (Xf = this.mathfield.host) || void 0 === Xf ? void 0 : Xf.dispatchEvent(new CustomEvent('announce', {
                detail: {
                    command: Uf,
                    previousPosition: Vf,
                    atoms: Wf
                },
                cancelable: !0,
                bubbles: !0,
                composed: !0
            }))) || void 0 === Yf || Yf || function(Zf, $f, ag, bg) {
                let cg = '';
                'plonk' === $f ? (Zf.playSound('plonk'), Zf.flushInlineShortcutBuffer()) : 'delete' === $f ? cg = vf(Zf.options, 'deleted: ', bg) : 'focus' === $f || $f.includes('move') ? cg = function(dg, eg) {
                    if (Number.isNaN(eg))
                        return '';
                    const fg = dg.at(eg);
                    if (!fg)
                        return '';
                    if (fg.treeDepth <= dg.at(dg.position).treeDepth)
                        return '';
                    let gg = '',
                        hg = fg.parent;
                    const ig = dg.at(dg.position).parent;
                    for (; hg !== dg.root && hg !== ig;)
                        gg += `out of ${ Sf(hg) };`, hg = hg.parent;
                    return gg;
                }(Zf.model, ag) + (Zf.model.selectionIsCollapsed ? '' : 'selected: ') + function(dg, eg) {
                    if (!dg.selectionIsCollapsed)
                        return vf(eg, '', dg.getAtoms(dg.selection));
                    let fg = '';
                    const gg = dg.at(dg.position),
                        hg = Sf(gg);
                    return gg.isFirstSibling && (fg = (hg ? 'start of ' + hg : 'unknown') + ': '), gg.isLastSibling ? gg.isFirstSibling || (fg += hg ? 'end of ' + hg : 'unknown') : fg += vf(eg, '', gg), fg;
                }(Zf.model, Zf.options) : 'replacement' === $f ? cg = vf(Zf.options, '', Zf.model.at(Zf.model.position)) : 'line' === $f ? (cg = vf(Zf.options, '', Zf.model.root), Zf.keyboardDelegate.setAriaLabel('after: ' + cg)) : cg = bg ? vf(Zf.options, $f + ' ', bg) : $f;
                const dg = Zf.ariaLiveText.textContent.includes('\xA0') ? ' \u202F ' : ' \xA0 ';
                Zf.ariaLiveText.textContent = cg + dg;
            }(this.mathfield, Uf, Vf, Wf);
        }
        deferNotifications(Uf, Vf) {
            const Wf = this._selection,
                Xf = this._anchor,
                Yf = this._position,
                Zf = this.suppressChangeNotifications;
            this.suppressChangeNotifications = !0;
            const $f = this.root.changeCounter;
            Vf();
            const ag = this.root.changeCounter !== $f,
                bg = Xf !== this._anchor || Yf !== this._position || 'different' === function(cg, dg) {
                    if (cg.direction === dg.direction) {
                        const eg = cg.ranges.length;
                        if (dg.ranges.length === eg) {
                            let fg = 0;
                            for (; fg < eg && 'equal' === Fd(cg.ranges[fg], dg.ranges[fg]);)
                                fg++;
                            return fg === eg ? 'equal' : 'different';
                        }
                    }
                    return 'different';
                }(this._selection, Wf);
            return this.suppressChangeNotifications = Zf, Uf.content && ag && Ze(this, {
                data: Uf.data,
                inputType: Uf.type
            }), Uf.selection && bg && Xe(this), ag || bg;
        }
        normalizeOffset(Uf) {
            return Uf > 0 ? Uf = Math.min(Uf, this.lastOffset) : Uf < 0 && (Uf = this.lastOffset + Uf + 1), Uf;
        }
        normalizeRange(Uf) {
            let [Vf, Wf] = Uf;
            return Vf = this.normalizeOffset(Vf), Wf = this.normalizeOffset(Wf), Vf < Wf ? [
                Vf,
                Wf
            ] : [
                Wf,
                Vf
            ];
        }
        normalizeSelection(Uf, Vf) {
            var Wf;
            let Xf;
            if (Mf(Uf)) {
                const Yf = this.normalizeOffset(Uf);
                if (Mf(Vf)) {
                    const Zf = this.normalizeOffset(Vf);
                    Xf = Yf <= Zf ? {
                        ranges: [
                            [
                                Yf,
                                Zf
                            ]
                        ],
                        direction: 'none'
                    } : {
                        ranges: [
                            [
                                Zf,
                                Yf
                            ]
                        ],
                        direction: 'backward'
                    };
                } else
                    Xf = {
                        ranges: [
                            [
                                Yf,
                                Yf
                            ]
                        ],
                        direction: 'none'
                    };
            } else if (Nf(Uf)) {
                const Yf = this.normalizeOffset(Uf[0]),
                    Zf = this.normalizeOffset(Uf[1]);
                Xf = Yf <= Zf ? {
                    ranges: [
                        [
                            Yf,
                            Zf
                        ]
                    ],
                    direction: 'none'
                } : {
                    ranges: [
                        [
                            Zf,
                            Yf
                        ]
                    ],
                    direction: 'backward'
                };
            } else
                Of(Uf) && (Xf = {
                    ranges: Uf.ranges.map(Uf => this.normalizeRange(Uf)),
                    direction: null !== (Wf = Uf.direction) && void 0 !== Wf ? Wf : 'none'
                });
            return Xf;
        }
        constructor(Uf, Vf, Wf) {
            this.options = Uf, this._selection = {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'none'
            }, this._anchor = 0, this._position = 0, this.mathfield = Wf, this.suppressChangeNotifications = !1, this.root = new kc('root', Wf, {
                mode: Uf.mode
            }), this.root.body = [], this.setListeners(Vf);
        }
    }

    function _Uf(Vf, Wf, Xf, Yf) {
        const Zf = Vf.offsetOf(Wf);
        if (Zf < Xf || Zf > Yf)
            return !1;
        if (!Wf.hasChildren)
            return !0;
        const $f = Vf.offsetOf(Wf.firstChild);
        if ($f >= Xf && $f <= Yf) {
            const ag = Vf.offsetOf(Wf.lastChild);
            if (ag >= Xf && ag <= Yf)
                return !0;
        }
        return !1;
    }

    function _Vf(Wf, Xf, Yf) {
        if (!(null == Xf ? void 0 : Xf.hasChildren))
            return !1;
        const [Zf, $f] = Yf, ag = Wf.offsetOf(Xf.firstChild), bg = Wf.offsetOf(Xf.lastChild);
        return ag >= Zf && ag <= $f && bg >= ag && bg <= $f;
    }

    function Wf(Xf, Yf) {
        let Zf = Xf.at(Xf.position);
        for (; Zf && !(Array.isArray(Zf.treeBranch) && Zf.parent instanceof Vc);)
            Zf = Zf.parent;
        if (Array.isArray(null == Zf ? void 0 : Zf.treeBranch) && (null == Zf ? void 0 : Zf.parent) instanceof Vc) {
            const $f = Zf.parent;
            let ag;
            switch (Yf) {
                case 'after row':
                    $f.addRowAfter(Zf.treeBranch[0]), ag = Xf.offsetOf($f.getCell(Zf.treeBranch[0] + 1, 0)[0]);
                    break;
                case 'after column':
                    if ($f.maxColumns <= $f.colCount)
                        return void Xf.announce('plonk');
                    $f.addColumnAfter(Zf.treeBranch[1]), ag = Xf.offsetOf($f.getCell(Zf.treeBranch[0], Zf.treeBranch[1] + 1)[0]);
                    break;
                case 'before row':
                    $f.addRowBefore(Zf.treeBranch[0]), ag = Xf.offsetOf($f.getCell(Zf.treeBranch[0] - 1, 0)[0]);
                    break;
                case 'before column':
                    if ($f.maxColumns <= $f.colCount)
                        return void Xf.announce('plonk');
                    $f.addColumnBefore(Zf.treeBranch[1]), ag = Xf.offsetOf($f.getCell(Zf.treeBranch[0], Zf.treeBranch[1] - 1)[0]);
            }
            Xf.setSelection(ag, ag + 1);
        }
    }

    function Xf(Yf) {
        return !!Ye(Yf, {
            inputType: 'insertText'
        }) && (Wf(Yf, 'after row'), Ze(Yf, {
            inputType: 'insertText'
        }), !0);
    }

    function Yf(Zf) {
        return !!Ye(Zf, {
            inputType: 'insertText'
        }) && (Wf(Zf, 'after column'), Ze(Zf, {
            inputType: 'insertText'
        }), !0);
    }

    function Zf($f, ag) {
        let bg = $f.at($f.position);
        for (; bg && !(Array.isArray(bg.treeBranch) && bg.parent instanceof Vc);)
            bg = bg.parent;
        if (Array.isArray(null == bg ? void 0 : bg.treeBranch) && (null == bg ? void 0 : bg.parent) instanceof Vc) {
            const cg = bg.parent,
                dg = bg.treeBranch;
            let eg;
            switch (ag) {
                case 'row':
                    if (cg.rowCount > 1) {
                        cg.removeRow(dg[0]);
                        const fg = cg.getCell(Math.max(0, dg[0] - 1), dg[1]);
                        eg = $f.offsetOf(fg[fg.length - 1]);
                    }
                    break;
                case 'column':
                    if (cg.colCount > cg.minColumns) {
                        cg.removeColumn(dg[1]);
                        const fg = cg.getCell(dg[0], Math.max(0, dg[1] - 1));
                        eg = $f.offsetOf(fg[fg.length - 1]);
                    }
            }
            eg && $f.setPositionHandlingPlaceholder(eg);
        }
    }

    function $f(ag, bg, cg, dg) {
        var eg, fg, gg, hg, ig, jg;
        const kg = cg.parent;
        if (cg instanceof Ic) {
            const lg = !dg && 'forward' === bg || 'body' === dg && 'backward' === bg;
            let mg = lg ? ag.offsetOf(cg.firstChild) : ag.offsetOf(cg.lastChild);
            return lg ? '?' !== cg.rightDelim && '.' !== cg.rightDelim ? (cg.leftDelim = '.', cg.isDirty = !0) : (kg.addChildrenAfter(cg.removeBranch('body'), cg), kg.removeChild(cg), mg--) : '?' !== cg.leftDelim && '.' !== cg.leftDelim ? (cg.rightDelim = '.', cg.isDirty = !0) : (kg.addChildrenAfter(cg.removeBranch('body'), cg), kg.removeChild(cg), mg--), ag.position = mg, !0;
        }
        if ('surd' === cg.type) {
            if ('forward' === bg && !dg || 'backward' === bg && 'body' === dg) {
                const lg = cg.leftSibling;
                cg.hasChildren && kg.addChildrenAfter(cg.removeBranch('body'), cg), kg.removeChild(cg), ag.position = ag.offsetOf(lg);
            } else
                'forward' === bg && 'body' === dg ? ag.position = ag.offsetOf(cg) : dg || 'backward' !== bg ? 'above' === dg && (cg.hasEmptyBranch('above') && cg.removeBranch('above'), ag.position = 'backward' === bg ? ag.offsetOf(cg.leftSibling) : ag.offsetOf(cg.body[0])) : cg.hasChildren ? ag.position = ag.offsetOf(cg.lastChild) : (ag.position = Math.max(0, ag.offsetOf(cg) - 1), kg.removeChild(cg));
            return !0;
        }
        if ('box' === cg.type || 'enclose' === cg.type) {
            const lg = dg && 'backward' === bg || !dg && 'forward' === bg ? cg.leftSibling : cg.lastChild;
            return kg.addChildrenAfter(cg.removeBranch('body'), cg), kg.removeChild(cg), ag.position = ag.offsetOf(lg), !0;
        }
        if ('genfrac' === cg.type || 'overunder' === cg.type) {
            if (!dg)
                return !('overunder' === cg.type && cg.hasEmptyBranch('body') || 'genfrac' === cg.type && cg.hasEmptyBranch('below') && cg.hasEmptyBranch('above') || (ag.position = ag.offsetOf('forward' === bg ? cg.firstChild : cg.lastChild), 0));
            const lg = 'numerator-denominator' === cg.context.fractionNavigationOrder ? 'above' : 'below',
                mg = 'above' === lg ? 'below' : 'above';
            if ('forward' === bg && dg === lg || 'backward' === bg && dg === mg) {
                const ng = cg.removeBranch(lg),
                    og = cg.removeBranch(mg);
                return kg.addChildrenAfter([
                    ...ng,
                    ...og
                ], cg), kg.removeChild(cg), ag.position = ag.offsetOf(ng.length > 0 ? ng[ng.length - 1] : og[0]), !0;
            }
            return 'backward' === bg ? (ag.position = ag.offsetOf(cg.leftSibling), !0) : (ag.position = ag.offsetOf(cg), !0);
        }
        if (cg.isExtensibleSymbol || 'msubsup' === cg.type) {
            if (!dg && 'forward' === bg)
                return !1;
            if (!dg) {
                if (cg.subscript || cg.superscript) {
                    const lg = 'forward' === bg ? null !== (fg = null === (eg = cg.superscript) || void 0 === eg ? void 0 : eg[0]) && void 0 !== fg ? fg : null === (gg = cg.subscript) || void 0 === gg ? void 0 : gg[0] : null !== (ig = null === (hg = cg.subscript) || void 0 === hg ? void 0 : hg[0].lastSibling) && void 0 !== ig ? ig : null === (jg = cg.superscript) || void 0 === jg ? void 0 : jg[0].lastSibling;
                    return lg && (ag.position = ag.offsetOf(lg)), !0;
                }
                return !1;
            }
            if (dg && cg.hasEmptyBranch(dg) && cg.removeBranch(dg), !cg.hasChildren) {
                const lg = 'forward' === bg ? ag.offsetOf(cg) : Math.max(0, ag.offsetOf(cg) - 1);
                return cg.parent.removeChild(cg), ag.position = lg, !0;
            }
            if ('superscript' === dg)
                if ('backward' === bg) {
                    const lg = ag.offsetOf(cg.firstChild) - 1;
                    ag.position = lg;
                } else
                    cg.subscript ? ag.position = ag.offsetOf(cg.subscript[0]) : ag.position = ag.offsetOf(cg);
            else
                'subscript' === dg && ('backward' === bg && cg.superscript ? ag.position = ag.offsetOf(cg.superscript[0].lastSibling) : ag.position = 'backward' === bg ? ag.offsetOf(cg.firstChild) - 1 : ag.offsetOf(cg));
            return !0;
        }
        return !1;
    }

    function ag(bg, cg, dg) {
        const eg = bg.getAtoms(cg);
        if (eg.length > 0 && eg[0].parent) {
            let fg = eg[0].parent.firstChild;
            'first' === fg.type && (fg = fg.rightSibling);
            const gg = eg[eg.length - 1].parent.lastChild;
            let hg = eg[0];
            'first' === hg.type && (hg = hg.rightSibling);
            const ig = eg[eg.length - 1];
            if (hg === fg && ig === gg) {
                const jg = eg[0].parent;
                'root' !== jg.type && (cg = [
                    bg.offsetOf(jg.leftSibling),
                    bg.offsetOf(jg.rightSibling)
                ]);
            }
        }
        return bg.deferNotifications({
            content: !0,
            selection: !0,
            type: dg
        }, () => bg.deleteAtoms(cg));
    }

    function bg(cg, dg) {
        const eg = cg.at(dg);
        let fg;
        if (eg) {
            fg = eg.mode;
            let gg = eg.parent;
            for (; !fg && gg;)
                gg && (fg = gg.mode), gg = gg.parent;
        }
        return fg;
    }

    function cg(dg, eg) {
        dg && eg && (d(dg) ? dg.forEach(dg => cg(dg, eg)) : 'object' == typeof dg && (dg.style.color || dg.style.backgroundColor || dg.style.fontFamily || dg.style.fontShape || dg.style.fontSeries || dg.style.fontSize || dg.style.variant || dg.style.variantStyle || (dg.applyStyle(eg), cg(dg.body, eg), cg(dg.above, eg), cg(dg.below, eg), cg(dg.subscript, eg), cg(dg.superscript, eg))));
    }

    function dg(eg, fg, gg, hg) {
        function ig(jg, kg) {
            for (const lg of f)
                if (lg.style[jg] !== kg)
                    return !1;
            return !0;
        }
        if ((fg = eg.normalizeRange(fg))[0] === fg[1])
            return !1;
        const jg = eg.getAtoms(fg, {
            includeChildren: !0
        });
        'toggle' === hg.operation && (gg.color && ig('color', gg.color) && (gg.color = 'none', gg.verbatimColor = void 0), gg.backgroundColor && ig('backgroundColor', gg.backgroundColor) && (gg.backgroundColor = 'none', gg.verbatimBackgroundColor = void 0), gg.fontFamily && ig('fontFamily', gg.fontFamily) && (gg.fontFamily = 'none'), gg.fontSeries && ig('fontSeries', gg.fontSeries) && (gg.fontSeries = 'auto'), gg.fontShape && ig('fontShape', gg.fontShape) && (gg.fontShape = 'auto'), gg.fontSize && ig('fontSize', gg.fontSize) && (gg.fontSize = 5));
        for (const kg of jg)
            kg.applyStyle(gg);
        return !0;
    }

    function eg(fg, gg, hg) {
        if ('text' !== fg.at(gg).mode)
            return gg;
        const ig = 'backward' === hg ? -1 : 1;
        let jg;
        if (F.test(fg.at(gg).value)) {
            let kg, lg = gg;
            do {
                kg = 'text' === fg.at(lg).mode && F.test(fg.at(lg).value), lg += ig;
            } while (fg.at(lg) && kg);
            jg = fg.at(lg) ? lg - 2 * ig : lg - ig;
        } else if (/\s/.test(fg.at(gg).value)) {
            let kg = gg;
            for (; fg.at(kg) && 'text' === fg.at(kg).mode && /\s/.test(fg.at(kg).value);)
                kg += ig;
            if (fg.at(kg)) {
                let lg = !0;
                do {
                    lg = 'text' === fg.at(kg).mode && !/\s/.test(fg.at(kg).value), kg += ig;
                } while (fg.at(kg) && lg);
                jg = fg.at(kg) ? kg - 2 * ig : kg - ig;
            } else
                jg = kg - ig;
        } else {
            let kg = gg;
            for (; fg.at(kg) && 'text' === fg.at(kg).mode && !/\s/.test(fg.at(kg).value);)
                kg += ig;
            jg = fg.at(kg) ? kg : kg - ig;
            let lg = !0;
            for (; fg.at(kg) && lg;)
                lg = 'text' === fg.at(kg).mode && /\s/.test(fg.at(kg).value), lg && (jg = kg), kg += ig;
            jg = fg.at(kg) ? kg - 2 * ig : kg - ig;
        }
        return jg - (ig > 0 ? 0 : 1);
    }

    function fg(gg, hg, ig) {
        var jg, kg, lg, mg, ng, og, pg;
        const qg = gg.position;
        null !== (jg = null == ig ? void 0 : ig.extend) && void 0 !== jg && jg || gg.collapseSelection(hg);
        let rg = gg.at(gg.position);
        if ('forward' === hg && ('msubsup' === rg.type ? (rg = rg.rightSibling, rg || (rg = gg.at(gg.position + 1))) : rg = gg.at(gg.position + 1)), !rg)
            return gg.announce('plonk'), !1;
        let sg = gg.offsetOf(rg);
        if (rg instanceof Nc)
            sg = eg(gg, sg, hg);
        else if (rg instanceof gd)
            if (rg.isSuggestion)
                for (; rg && rg instanceof gd;)
                    rg.isSuggestion = !1, sg = gg.offsetOf(rg), rg = rg.rightSibling;
            else if ('forward' === hg) {
            if (rg = rg.rightSibling, !(rg && rg instanceof gd))
                return gg.announce('plonk'), !1;
            for (; rg && rg instanceof gd && /[a-zA-Z\*]/.test(rg.value);)
                sg = gg.offsetOf(rg), rg = rg.rightSibling;
        } else {
            if (rg = rg.leftSibling, !(rg && rg instanceof gd))
                return gg.announce('plonk'), !1;
            for (; rg && rg instanceof gd && /[a-zA-Z\*]/.test(rg.value);)
                sg = gg.offsetOf(rg), rg = rg.leftSibling;
        } else if ('forward' === hg && 'mopen' === rg.type) {
            let tg = 0;
            do {
                'mopen' === rg.type ? tg += 1 : 'mclose' === rg.type && (tg -= 1), rg = rg.rightSibling;
            } while (!rg.isLastSibling && 0 !== tg);
            sg = gg.offsetOf(rg.leftSibling);
        } else if ('backward' === hg && 'mclose' === rg.type) {
            let tg = 0;
            do {
                'mopen' === rg.type ? tg += 1 : 'mclose' === rg.type && (tg -= 1), rg = rg.leftSibling;
            } while (!rg.isFirstSibling && 0 !== tg);
            sg = gg.offsetOf(rg);
        } else if ('backward' === hg)
            if ('first' === rg.type)
                for (; sg > 0 && 'first' === rg.type;)
                    sg -= 1, rg = gg.at(sg);
            else {
                const tg = rg.type;
                'msubsup' === rg.type && (sg = gg.offsetOf(gg.at(sg).leftSibling)), sg -= 1;
                let ug = null === (kg = gg.at(sg)) || void 0 === kg ? void 0 : kg.type;
                for (; sg >= 0 && ug === tg;)
                    'msubsup' === (null === (lg = gg.at(sg)) || void 0 === lg ? void 0 : lg.type) ? sg = gg.offsetOf(gg.at(sg).leftSibling) : sg -= 1, ug = gg.at(sg).type;
            }
        else {
            const {
                type: tg
            } = rg;
            let ug = null === (mg = gg.at(sg)) || void 0 === mg ? void 0 : mg.type;
            const {
                lastOffset: vg
            } = gg;
            for (; sg <= vg && (ug === tg || 'msubsup' === ug);) {
                for (;
                    'msubsup' === (null === (ng = gg.at(sg).rightSibling) || void 0 === ng ? void 0 : ng.type);)
                    sg = gg.offsetOf(gg.at(sg).rightSibling);
                sg += 1, ug = null === (og = gg.at(sg)) || void 0 === og ? void 0 : og.type;
            }
            sg -= 1;
        }
        if (null !== (pg = null == ig ? void 0 : ig.extend) && void 0 !== pg && pg) {
            if (!gg.setSelection(gg.anchor, sg))
                return gg.announce('plonk'), !1;
        } else {
            if (sg === gg.position)
                return gg.announce('plonk'), !1;
            gg.position = sg;
        }
        return gg.announce('move', qg), !0;
    }

    function gg(hg, ig, jg) {
        var kg, lg, mg, ng, og, pg, qg, rg;
        if (jg = null != jg ? jg : {
                extend: !1
            }, 'forward' !== ig) {
            const [sg, tg] = af(hg);
            void 0 !== sg && void 0 !== tg && hg.deleteAtoms([
                sg,
                tg
            ]);
        }
        if ('upward' === ig)
            return function(sg, tg) {
                var ug, vg, wg, xg;
                const yg = null !== (ug = null == tg ? void 0 : tg.extend) && void 0 !== ug && ug;
                yg || sg.collapseSelection('backward');
                const zg = sg.at(sg.position);
                let Ag = zg;
                for (; Ag && 'below' !== Ag.treeBranch && !(Array.isArray(Ag.treeBranch) && Ag.parent instanceof Vc);)
                    Ag = Ag.parent;
                if (Array.isArray(null == Ag ? void 0 : Ag.treeBranch) && Ag.parent instanceof Vc) {
                    const Bg = Ag.parent,
                        Cg = Math.max(0, Ag.treeBranch[0] - 1);
                    _hg(sg, zg, Bg.array[Cg][Ag.treeBranch[1]], yg, 'up');
                } else {
                    if (!Ag) {
                        let Bg = !0;
                        return sg.suppressChangeNotifications || (Bg = null === (xg = null === (wg = sg.mathfield.host) || void 0 === wg ? void 0 : wg.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'upward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === xg || xg), sg.announce(Bg ? 'plonk' : 'line'), Bg;
                    }
                    _hg(sg, zg, null !== (vg = Ag.parent.branch('above')) && void 0 !== vg ? vg : Ag.parent.createBranch('above'), yg, 'up');
                }
                return !0;
            }(hg, jg);
        if ('downward' === ig)
            return function(sg, tg) {
                var ug, vg, wg, xg;
                const yg = null !== (ug = null == tg ? void 0 : tg.extend) && void 0 !== ug && ug;
                yg || sg.collapseSelection('forward');
                const zg = sg.at(sg.position);
                let Ag = zg;
                for (; Ag && 'above' !== Ag.treeBranch && !(Array.isArray(Ag.treeBranch) && Ag.parent instanceof Vc);)
                    Ag = Ag.parent;
                if (Array.isArray(null == Ag ? void 0 : Ag.treeBranch) && Ag.parent instanceof Vc) {
                    const Bg = Ag.parent,
                        Cg = Math.min(Bg.array.length - 1, Ag.treeBranch[0] + 1);
                    _hg(sg, zg, Bg.array[Cg][Ag.treeBranch[1]], yg, 'down');
                } else {
                    if (!Ag) {
                        let Bg = !0;
                        return sg.suppressChangeNotifications || (Bg = null === (xg = null === (wg = sg.mathfield.host) || void 0 === wg ? void 0 : wg.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'downward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === xg || xg), sg.announce(Bg ? 'plonk' : 'line'), Bg;
                    }
                    _hg(sg, zg, null !== (vg = Ag.parent.branch('below')) && void 0 !== vg ? vg : Ag.parent.createBranch('below'), yg, 'down');
                }
                return !0;
            }(hg, jg);
        const sg = hg.position;
        if (jg.extend)
            return hg.extendSelection(ig);
        if (hg.selectionIsPlaceholder)
            return hg.collapseSelection(ig), gg(hg, ig);
        if (!hg.collapseSelection(ig)) {
            let tg = hg.position + ('forward' === ig ? 1 : -1),
                ug = hg.at(tg);
            if (tg >= 0 && tg <= hg.lastOffset)
                if ('forward' === ig)
                    if (ug.inCaptureSelection) {
                        for (; !ug.captureSelection;)
                            ug = ug.parent;
                        tg = hg.offsetOf(ug);
                    } else if (!ug.isFirstSibling && ug.isLastSibling && (null === (kg = ug.parent) || void 0 === kg ? void 0 : kg.skipBoundary)) {
                if (tg + 1 !== hg.lastOffset)
                    return hg.position = tg, gg(hg, 'forward', jg);
                tg += 1;
            } else
                (null === (lg = ug.parent) || void 0 === lg ? void 0 : lg.skipBoundary) && (null === (mg = ug.rightSibling) || void 0 === mg ? void 0 : mg.isLastSibling) ? tg += 2 : (null === (ng = ug.parent) || void 0 === ng ? void 0 : ng.skipBoundary) && 'first' === ug.type ? tg += 1 : ug instanceof gd && ug.isSuggestion && (ug.isSuggestion = !1);
            else if ('backward' === ig)
                if (null === (og = ug.parent) || void 0 === og ? void 0 : og.inCaptureSelection) {
                    for (; !ug.captureSelection;)
                        ug = ug.parent;
                    tg = Math.max(0, hg.offsetOf(ug.leftSibling));
                } else
                    (ug.skipBoundary || (null === (pg = ug.parent) || void 0 === pg ? void 0 : pg.skipBoundary) && 'first' === ug.type) && (tg = Math.max(0, hg.position - 2));
            if (tg < 0 || tg > hg.lastOffset) {
                let vg = !0;
                return hg.suppressChangeNotifications || (vg = null === (rg = null === (qg = hg.mathfield.host) || void 0 === qg ? void 0 : qg.dispatchEvent(new CustomEvent('move-out', {
                    detail: {
                        direction: ig
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) || void 0 === rg || rg), vg && hg.announce('plonk'), vg;
            }
            hg.setPositionHandlingPlaceholder(tg);
        }
        return hg.announce('move', sg), !0;
    }

    function _hg(ig, jg, kg, lg, mg) {
        const ng = ve(ig.mathfield.getHTMLElement(jg)).right,
            og = ig.offsetOf(function(pg, qg, rg) {
                let sg = 1 / 0,
                    tg = 0;
                for (; tg < qg.length; tg++) {
                    const ug = ve(pg.getHTMLElement(qg[tg])).right,
                        vg = Math.abs(rg - ug);
                    if (!(vg <= sg))
                        break;
                    sg = vg;
                }
                return qg[tg - 1];
            }(ig.mathfield, kg, ng));
        if (lg) {
            const [pg, qg] = ig.selection.ranges[0];
            let rg;
            rg = og < ('up' === mg ? pg : qg) ? {
                ranges: [
                    [
                        og,
                        qg
                    ]
                ],
                direction: 'backward'
            } : {
                ranges: [
                    [
                        pg,
                        og
                    ]
                ],
                direction: 'forward'
            }, ig.setSelection(rg);
        } else
            ig.setPositionHandlingPlaceholder(og);
        ig.announce(`move ${ mg }`);
    }

    function ig(jg) {
        const kg = jg.position,
            lg = jg.at(kg).parent;
        return lg && 'root' !== lg.type ? (jg.position = jg.offsetOf(lg), jg.announce('move', kg), !0) : (jg.announce('plonk'), !1);
    }

    function jg(kg) {
        var lg;
        if (kg.collapseSelection(), function(mg) {
                let ng = 0,
                    og = mg.at(mg.position),
                    pg = !1;
                for (; og;)
                    og.hasEmptyBranch('superscript') && og.hasEmptyBranch('subscript') || (ng += 1), og.hasEmptyBranch('superscript') ? og.hasEmptyBranch('subscript') || (pg = !1) : pg = !0, og = og.parent;
                return pg ? ng : 0;
            }(kg) >= kg.mathfield.options.scriptDepth[1])
            return kg.announce('plonk'), !1;
        let mg = kg.at(kg.position);
        return void 0 === mg.subsupPlacement && ('msubsup' !== (null === (lg = mg.rightSibling) || void 0 === lg ? void 0 : lg.type) && mg.parent.addChildAfter(new Jc(kg.mathfield, {
            style: mg.computedStyle
        }), mg), mg = mg.rightSibling), mg.createBranch('superscript'), kg.setSelection(kg.getSiblingsRange(kg.offsetOf(mg.superscript[0]))), !0;
    }

    function kg(lg) {
        var mg;
        if (lg.collapseSelection(), function(ng) {
                let og = 0,
                    pg = ng.at(ng.position),
                    qg = !1;
                for (; pg;)
                    pg.hasEmptyBranch('superscript') && pg.hasEmptyBranch('subscript') || (og += 1), pg.hasEmptyBranch('superscript') ? pg.hasEmptyBranch('subscript') || (qg = !0) : qg = !1, pg = pg.parent;
                return qg ? og : 0;
            }(lg) >= lg.mathfield.options.scriptDepth[0])
            return lg.announce('plonk'), !1;
        let ng = lg.at(lg.position);
        return void 0 === ng.subsupPlacement && ('msubsup' !== (null === (mg = lg.at(lg.position + 1)) || void 0 === mg ? void 0 : mg.type) && ng.parent.addChildAfter(new Jc(lg.mathfield, {
            style: lg.at(lg.position).computedStyle
        }), ng), ng = lg.at(lg.position + 1)), ng.createBranch('subscript'), lg.setSelection(lg.getSiblingsRange(lg.offsetOf(ng.subscript[0]))), !0;
    }

    function lg(mg, ng, og = !0) {
        var pg, qg;
        const rg = 'forward' === ng ? 1 : -1;
        'placeholder' === mg.at(mg.anchor).type && gg(mg, ng);
        const sg = mg.getAllAtoms(Math.max(mg.position + rg, 0));
        'backward' === ng && sg.reverse();
        const tg = sg.filter(mg => 'placeholder' === mg.type || mg.treeDepth > 2 && mg.isFirstSibling && mg.isLastSibling);
        if (0 === tg.length) {
            if (!og || null !== (qg = null === (pg = mg.mathfield.host) || void 0 === pg ? void 0 : pg.dispatchEvent(new CustomEvent('focus-out', {
                    detail: {
                        direction: ng
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) && void 0 !== qg && !qg)
                return mg.announce('plonk'), !1;
            const ug = function() {
                function vg(wg) {
                    var xg;
                    return !((xg = wg).disabled || 'hidden' === xg.type && 'INPUT' === xg.tagName.toUpperCase() || function(yg) {
                        if (!e() || yg === document.activeElement || yg.contains(document.activeElement))
                            return !1;
                        if ('hidden' === getComputedStyle(yg).visibility)
                            return !0;
                        const zg = yg.getBoundingClientRect();
                        if (0 === zg.width || 0 === zg.height)
                            return !0;
                        for (; yg;) {
                            if ('none' === getComputedStyle(yg).display)
                                return !0;
                            yg = yg.parentElement;
                        }
                        return !1;
                    }(xg) || function(yg) {
                        return 'INPUT' === yg.tagName.toUpperCase() && 'radio' === yg.type && ! function(zg) {
                            var Ag;
                            if (!zg.name)
                                return !0;
                            const Bg = function(Cg, Dg) {
                                for (const Eg of Cg)
                                    if (Eg.checked && Eg.form === Dg)
                                        return Eg;
                                return null;
                            }((null !== (Ag = zg.form) && void 0 !== Ag ? Ag : zg.ownerDocument).querySelectorAll('input[type="radio"][name="' + zg.name + '"]'), zg.form);
                            return !Bg || Bg === zg;
                        }(yg);
                    }(wg) || ng(wg) < 0);
                }

                function wg(xg) {
                    var yg;
                    const zg = Number.parseInt(null !== (yg = xg.getAttribute('tabindex')) && void 0 !== yg ? yg : 'NaN', 10);
                    return Number.isNaN(zg) ? 'true' === xg.contentEditable ? 0 : 'AUDIO' !== xg.nodeName && 'VIDEO' !== xg.nodeName || null !== xg.getAttribute('tabindex') ? xg.tabIndex : 0 : zg;
                }
                return e() ? function(xg) {
                    const yg = [],
                        zg = [];
                    return [...xg.querySelectorAll('input, select, textarea, a[href], button,\n        [tabindex], audio[controls], video[controls],\n        [contenteditable]:not([contenteditable="false"]), details>summary')].filter(vg).forEach((vg, xg) => {
                        const Ag = wg(vg);
                        0 === Ag ? yg.push(vg) : zg.push({
                            documentOrder: xg,
                            tabIndex: Ag,
                            node: vg
                        });
                    }), zg.sort((vg, wg) => vg.tabIndex === wg.tabIndex ? vg.documentOrder - wg.documentOrder : vg.tabIndex - wg.tabIndex).map(vg => vg.node).concat(yg);
                }(document.body) : [];
            }();
            if (!document.activeElement || 1 === ug.length)
                return mg.announce('plonk'), !1;
            let vg = ug.indexOf(document.activeElement) + rg;
            return !!(document.activeElement instanceof _yh && j(document.activeElement, ng, rg)) || (vg < 0 && (vg = ug.length - 1), vg >= ug.length && (vg = 0), !!(ug[vg] instanceof _yh && j(ug[vg], ng, rg)) || (ug[vg].focus(), 0 !== vg || (mg.announce('plonk'), !1)));
        }

        function ug(vg, wg, xg) {
            var yg, zg, Ag;
            const Bg = [...null !== (zg = null === (yg = vg.shadowRoot) || void 0 === yg ? void 0 : yg.querySelectorAll('math-field')) && void 0 !== zg ? zg : []];
            if (Bg.length) {
                const Cg = null === (Ag = vg.shadowRoot) || void 0 === Ag ? void 0 : Ag.activeElement,
                    Dg = Bg.indexOf(Cg);
                let Eg = Dg + xg;
                if (Dg < 0 && 'backward' === wg && (Eg = Bg.length - 1), Eg >= 0 && Eg < Bg.length)
                    return Bg[Eg].focus(), !0;
            }
            return !1;
        }
        const vg = mg.position,
            wg = mg.offsetOf(tg[0]);
        return 'placeholder' === tg[0].type ? mg.setSelection(wg - 1, wg) : mg.position = wg, mg.announce('move', vg), !0;
    }

    function mg(ng) {
        var og, pg, qg, rg, sg, tg;
        if ('text' === bg(ng, ng.position)) {
            let ug = Math.min(ng.anchor, ng.position),
                vg = Math.max(ng.anchor, ng.position),
                wg = !1;
            for (; !wg && ug > 0;) {
                const xg = ng.at(ug);
                'text' === xg.mode && F.test(xg.value) ? ug -= 1 : wg = !0;
            }
            for (wg = !1; !wg && vg <= ng.lastOffset;) {
                const xg = ng.at(vg);
                'text' === xg.mode && F.test(xg.value) ? vg += 1 : wg = !0;
            }
            if (wg && (vg -= 1), ug >= vg)
                return ng.setSelection(vg - 1, vg), !0;
            ng.setSelection(ug, vg);
        } else {
            const ug = ng.at(ng.position);
            if (ug.isDigit()) {
                let vg = Math.min(ng.anchor, ng.position),
                    wg = Math.max(ng.anchor, ng.position);
                for (; null === (og = ng.at(vg)) || void 0 === og ? void 0 : og.isDigit();)
                    vg -= 1;
                for (; null === (pg = ng.at(wg)) || void 0 === pg ? void 0 : pg.isDigit();)
                    wg += 1;
                ng.setSelection(vg, wg - 1);
            } else if (ug.style.variant || ug.style.variantStyle) {
                let vg = Math.min(ng.anchor, ng.position),
                    wg = Math.max(ng.anchor, ng.position),
                    xg = null === (qg = ng.at(vg)) || void 0 === qg ? void 0 : qg.style;
                for (; xg && xg.variant === ug.style.variant && xg.variantStyle === ug.style.variantStyle;)
                    vg -= 1, xg = null === (rg = ng.at(vg)) || void 0 === rg ? void 0 : rg.style;
                for (xg = null === (sg = ng.at(wg)) || void 0 === sg ? void 0 : sg.style; xg && xg.variant === ug.style.variant && xg.variantStyle === ug.style.variantStyle;)
                    wg += 1, xg = null === (tg = ng.at(wg)) || void 0 === tg ? void 0 : tg.style;
                ng.setSelection(vg, wg - 1);
            } else
                ng.setSelection(ng.offsetOf(ug.firstSibling), ng.offsetOf(ug.lastSibling));
        }
        return !0;
    }
    tf({
        addRowAfter: Xf,
        addColumnAfter: Yf,
        addRowBefore: function(ng) {
            return !!Ye(ng, {
                inputType: 'insertText'
            }) && (Wf(ng, 'before row'), Ze(ng, {
                inputType: 'insertText'
            }), !0);
        },
        addColumnBefore: function(ng) {
            return !!Ye(ng, {
                inputType: 'insertText'
            }) && (Wf(ng, 'before column'), Ze(ng, {
                inputType: 'insertText'
            }), !0);
        },
        removeRow: function(ng) {
            return !!Ye(ng, {
                inputType: 'deleteContent'
            }) && (Zf(ng, 'row'), Ze(ng, {
                inputType: 'deleteContent'
            }), !0);
        },
        removeColumn: function(ng) {
            return !!Ye(ng, {
                inputType: 'deleteContent'
            }) && (Zf(ng, 'column'), Ze(ng, {
                inputType: 'deleteContent'
            }), !0);
        }
    }, {
        target: 'model',
        category: 'array-edit'
    }), tf({
        deleteAll: qc => Ye(qc, {
            inputType: 'deleteContent'
        }) && ag(qc, [
            0,
            -1
        ], 'deleteContent'),
        deleteForward: qc => function(ng) {
            return !!Ye(ng, {
                inputType: 'deleteContentForward'
            }) && (ng.selectionIsCollapsed ? ng.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentForward'
            }, () => {
                var og, pg;
                let qg = ng.at(ng.position).rightSibling;
                if (qg && $f(ng, 'forward', qg))
                    return;
                if (qg) {
                    if (ng.at(ng.position).isLastSibling && $f(ng, 'forward', qg.parent, qg.treeBranch))
                        return;
                } else {
                    if (qg = ng.at(ng.position), qg.isLastSibling && $f(ng, 'forward', qg.parent, qg.treeBranch))
                        return;
                    qg = null;
                }
                if (ng.position === ng.lastOffset || !qg)
                    return void ng.announce('plonk');
                qg.parent.removeChild(qg);
                let rg = null === (og = ng.at(ng.position)) || void 0 === og ? void 0 : og.rightSibling;
                for (;
                    'msubsup' === (null == rg ? void 0 : rg.type);)
                    rg.parent.removeChild(rg), rg = null === (pg = ng.at(ng.position)) || void 0 === pg ? void 0 : pg.rightSibling;
                ng.announce('delete', void 0, [qg]);
            }) : ag(ng, Gd(ng.selection), 'deleteContentForward'));
        }(qc),
        deleteBackward: qc => function(ng) {
            return !!Ye(ng, {
                inputType: 'deleteContentBackward'
            }) && (ng.selectionIsCollapsed ? ng.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentBackward'
            }, () => {
                let og = ng.at(ng.position);
                if (!og || !$f(ng, 'backward', og)) {
                    if (null == og ? void 0 : og.isFirstSibling) {
                        if ($f(ng, 'backward', og.parent, og.treeBranch))
                            return;
                        og = null;
                    }
                    og ? (ng.position = ng.offsetOf(og.leftSibling), og.parent.removeChild(og), ng.announce('delete', void 0, [og])) : ng.announce('plonk');
                }
            }) : ag(ng, Gd(ng.selection), 'deleteContentBackward'));
        }(qc),
        deleteNextWord: qc => Ye(qc, {
            inputType: 'deleteWordForward'
        }) && ag(qc, [
            qc.anchor,
            eg(qc, qc.position, 'forward')
        ], 'deleteWordForward'),
        deletePreviousWord: qc => Ye(qc, {
            inputType: 'deleteWordBackward'
        }) && ag(qc, [
            qc.anchor,
            eg(qc, qc.position, 'backward')
        ], 'deleteWordBackward'),
        deleteToGroupStart: qc => Ye(qc, {
            inputType: 'deleteSoftLineBackward'
        }) && ag(qc, [
            qc.anchor,
            qc.offsetOf(qc.at(qc.position).firstSibling)
        ], 'deleteSoftLineBackward'),
        deleteToGroupEnd: qc => Ye(qc, {
            inputType: 'deleteSoftLineForward'
        }) && ag(qc, [
            qc.anchor,
            qc.offsetOf(qc.at(qc.position).lastSibling)
        ], 'deleteSoftLineForward'),
        deleteToMathFieldStart: qc => Ye(qc, {
            inputType: 'deleteHardLineBackward'
        }) && ag(qc, [
            qc.anchor,
            0
        ], 'deleteHardLineBackward'),
        deleteToMathFieldEnd: qc => Ye(qc, {
            inputType: 'deleteHardLineForward'
        }) && ag(qc, [
            qc.anchor,
            -1
        ], 'deleteHardLineForward')
    }, {
        target: 'model',
        category: 'delete'
    }), tf({
        moveToOpposite: qc => {
            const ng = qc.at(qc.position),
                {
                    parent: og
                } = ng;
            if (!og)
                return qc.announce('plonk'), !1;
            const pg = ng.treeBranch;
            let qg;
            return 'string' == typeof pg && (qg = {
                superscript: 'subscript',
                subscript: 'superscript',
                above: 'below',
                below: 'above'
            } [pg]), qg ? (og.branch(qg) || og.createBranch(qg), qc.setSelection(qc.getBranchRange(qc.offsetOf(og), qg))) : ng.subsupPlacement ? kg(qc) : jg(qc);
        },
        moveBeforeParent: qc => {
            const {
                parent: ng
            } = qc.at(qc.position);
            return ng ? (qc.position = qc.offsetOf(ng), !0) : (qc.announce('plonk'), !1);
        },
        moveAfterParent: qc => ig(qc),
        moveToNextPlaceholder: qc => lg(qc, 'forward'),
        moveToPreviousPlaceholder: qc => lg(qc, 'backward'),
        moveToNextChar: qc => gg(qc, 'forward'),
        moveToPreviousChar: qc => gg(qc, 'backward'),
        moveUp: qc => gg(qc, 'upward'),
        moveDown: qc => gg(qc, 'downward'),
        moveToNextWord: qc => fg(qc, 'forward'),
        moveToPreviousWord: qc => fg(qc, 'backward'),
        moveToGroupStart: qc => {
            const ng = qc.offsetOf(qc.at(qc.position).firstSibling);
            return ng === qc.position ? (qc.announce('plonk'), !1) : (qc.position = ng, !0);
        },
        moveToGroupEnd: qc => {
            const ng = qc.offsetOf(qc.at(qc.position).lastSibling);
            return ng === qc.position ? (qc.announce('plonk'), !1) : (qc.position = ng, !0);
        },
        moveToMathFieldStart: qc => 0 === qc.position ? (qc.announce('plonk'), !1) : (qc.position = 0, !0),
        moveToMathFieldEnd: qc => qc.position === qc.lastOffset ? (qc.announce('plonk'), !1) : (qc.position = qc.lastOffset, !0),
        moveToSuperscript: qc => jg(qc),
        moveToSubscript: qc => kg(qc)
    }, {
        target: 'model',
        category: 'selection-anchor'
    }), tf({
        selectGroup: qc => {
            const ng = mg(qc);
            return ng || qc.announce('plonk'), ng;
        },
        selectAll: qc => qc.setSelection(0, qc.lastOffset),
        extendSelectionForward: qc => {
            const ng = qc.extendSelection('forward');
            return ng || qc.announce('plonk'), ng;
        },
        extendSelectionBackward: qc => {
            const ng = qc.extendSelection('backward');
            return ng || qc.announce('plonk'), ng;
        },
        extendToNextWord: qc => fg(qc, 'forward', {
            extend: !0
        }),
        extendToPreviousWord: qc => fg(qc, 'backward', {
            extend: !0
        }),
        extendSelectionUpward: qc => gg(qc, 'upward', {
            extend: !0
        }),
        extendSelectionDownward: qc => gg(qc, 'downward', {
            extend: !0
        }),
        extendToNextBoundary: qc => fg(qc, 'forward', {
            extend: !0
        }),
        extendToPreviousBoundary: qc => fg(qc, 'backward', {
            extend: !0
        }),
        extendToGroupStart: qc => {
            const ng = qc.setSelection(qc.anchor, qc.offsetOf(qc.at(qc.position).firstSibling));
            return ng || qc.announce('plonk'), ng;
        },
        extendToGroupEnd: qc => {
            const ng = qc.setSelection(qc.anchor, qc.offsetOf(qc.at(qc.position).lastSibling));
            return ng || qc.announce('plonk'), ng;
        },
        extendToMathFieldStart: qc => {
            const ng = qc.setSelection(qc.anchor, 0);
            return ng || qc.announce('plonk'), ng;
        },
        extendToMathFieldEnd: qc => {
            const ng = qc.setSelection(qc.anchor, qc.lastOffset);
            return ng || qc.announce('plonk'), ng;
        }
    }, {
        target: 'model',
        category: 'selection-extend'
    });
    class ng {
        get element() {
            if (this._element)
                return this._element;
            const og = document.createElement('div');
            return og.setAttribute('role', 'presentation'), og.style.position = 'fixed', og.style.contain = 'content', og.style.top = '0', og.style.left = '0', og.style.right = '0', og.style.bottom = '0', og.style.zIndex = 'var(--scrim-zindex, 10099)', og.style.outline = 'none', this.translucent ? (og.style.background = 'rgba(255, 255, 255, .2)', og.style.backdropFilter = 'contrast(40%)') : og.style.background = 'transparent', this._element = og, og;
        }
        open(og) {
            var pg;
            if ('closed' !== this.state)
                return;
            this.state = 'opening', this.savedActiveElement = _og();
            const {
                element: qg
            } = this;
            (null !== (pg = null == og ? void 0 : og.root) && void 0 !== pg ? pg : document.body).appendChild(qg), qg.addEventListener('click', this), document.addEventListener('touchmove', this, !1), document.addEventListener('scroll', this, !1);
            const rg = window.innerWidth - document.documentElement.clientWidth;
            this.savedMarginRight = document.body.style.marginRight, this.savedOverflow = document.body.style.overflow, document.body.style.overflow = 'hidden';
            const sg = Number.parseFloat(getComputedStyle(document.body).marginRight);
            document.body.style.marginRight = `${ sg + rg }px`, (null == og ? void 0 : og.child) && qg.append(og.child), this.state = 'open';
        }
        close() {
            var og, pg, qg, rg;
            if ('open' !== this.state)
                return;
            this.state = 'closing', 'function' == typeof this.onClose && this.onClose();
            const {
                element: sg
            } = this;
            sg.removeEventListener('click', this), document.removeEventListener('touchmove', this, !1), document.removeEventListener('scroll', this, !1), sg.remove(), document.body.style.overflow = null !== (og = this.savedOverflow) && void 0 !== og ? og : '', document.body.style.marginRight = null !== (pg = this.savedMarginRight) && void 0 !== pg ? pg : '', _og() !== this.savedActiveElement && (null === (rg = null === (qg = this.savedActiveElement) || void 0 === qg ? void 0 : qg.focus) || void 0 === rg || rg.call(qg)), sg.innerHTML = '', this.state = 'closed';
        }
        handleEvent(og) {
            this.preventOverlayClose || (og.target === this._element && 'click' === og.type ? (this.close(), og.preventDefault(), og.stopPropagation()) : og.target !== document || 'touchmove' !== og.type && 'scroll' !== og.type || (this.close(), og.preventDefault(), og.stopPropagation()));
        }
        constructor(og) {
            var pg, qg;
            this.preventOverlayClose = null !== (pg = null == og ? void 0 : og.preventOverlayClose) && void 0 !== pg && pg, this.translucent = null !== (qg = null == og ? void 0 : og.translucent) && void 0 !== qg && qg, this.state = 'closed';
        }
    }

    function _og() {
        var pg;
        let qg = document.activeElement;
        for (; null === (pg = null == qg ? void 0 : qg.shadowRoot) || void 0 === pg ? void 0 : pg.activeElement;)
            qg = qg.shadowRoot.activeElement;
        return qg;
    }
    const pg = new Set([
        'Backquote',
        'Digit0',
        'Digit1',
        'Digit2',
        'Digit3',
        'Digit4',
        'Digit5',
        'Digit6',
        'Digit7',
        'Digit8',
        'Digit9',
        'Minus',
        'Equal',
        'IntlYen',
        'KeyQ',
        'KeyW',
        'KeyE',
        'KeyR',
        'KeyT',
        'KeyY',
        'KeyU',
        'KeyI',
        'KeyO',
        'KeyP',
        'BracketLeft',
        'BracketRight',
        'Backslash',
        'KeyA',
        'KeyS',
        'KeyD',
        'KeyF',
        'KeyG',
        'KeyH',
        'KeyJ',
        'KeyK',
        'KeyL',
        'Semicolon',
        'Quote',
        'IntlBackslash',
        'KeyZ',
        'KeyX',
        'KeyC',
        'KeyV',
        'KeyB',
        'KeyN',
        'KeyM',
        'Comma',
        'Period',
        'Slash',
        'IntlRo',
        'Space',
        'Numpad0',
        'Numpad1',
        'Numpad2',
        'Numpad3',
        'Numpad4',
        'Numpad5',
        'Numpad6',
        'Numpad7',
        'Numpad8',
        'Numpad9',
        'NumpadAdd',
        'NumpadComma',
        'NumpadDecimal',
        'NumpadDivide',
        'NumpadEqual',
        'NumpadHash',
        'NumpadMultiply',
        'NumpadParenLeft',
        'NumpadParenRight',
        'NumpadStar',
        'NumpadSubstract'
    ]);

    function qg(rg) {
        return !rg.ctrlKey && !rg.metaKey && 'Dead' !== rg.key && ('' === rg.code || pg.has(rg.code));
    }

    function rg(sg) {
        const tg = [];
        return (sg = function(ug) {
            if (ug.code)
                return ug;
            const vg = Object.entries(Ne().mapping);
            let wg = !1,
                xg = !1,
                yg = '';
            for (let zg = 0; zg < 4; zg++) {
                for (const [Ag, Bg] of vg)
                    if (Bg[zg] === ug.key) {
                        yg = Ag, 3 === zg ? (wg = !0, xg = !0) : 2 === zg ? wg = !0 : 1 === zg && (xg = !0);
                        break;
                    }
                if (yg)
                    break;
            }
            return new KeyboardEvent(ug.type, {
                ...ug,
                altKey: wg,
                shiftKey: xg,
                code: yg
            });
        }(sg)).ctrlKey && tg.push('ctrl'), sg.metaKey && tg.push('meta'), sg.altKey && tg.push('alt'), sg.shiftKey && tg.push('shift'), 0 === tg.length ? '[' + sg.code + ']' : (tg.push('[' + sg.code + ']'), tg.join('+'));
    }

    function sg() {
        var tg;
        if (!e())
            return null;
        let ug = document.activeElement;
        for (; null === (tg = null == ug ? void 0 : ug.shadowRoot) || void 0 === tg ? void 0 : tg.activeElement;)
            ug = ug.shadowRoot.activeElement;
        return ug;
    }

    function tg(ug) {
        var vg;
        if (!ug)
            return '';
        let wg;
        return 'Unidentified' === ug.key && ug.target && (wg = ug.target.value), wg = null !== (vg = null != wg ? wg : ug.key) && void 0 !== vg ? vg : ug.code, /^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(wg) && (wg = ''), wg;
    }
    class ug {
        get maximumDepth() {
            return 1000;
        }
        reset() {
            this.stack = [], this.index = -1;
        }
        startRecording() {
            this.recording = !0;
        }
        canUndo() {
            return this.index > 0;
        }
        canRedo() {
            return this.index !== this.stack.length - 1;
        }
        undo() {
            return !!this.canUndo() && (this.model.setState(this.stack[this.index - 1], {
                suppressChangeNotifications: !1,
                type: 'undo'
            }), this.index -= 1, this.canCoalesce = !1, !0);
        }
        redo() {
            return !!this.canRedo() && (this.index += 1, this.model.setState(this.stack[this.index], {
                suppressChangeNotifications: !1,
                type: 'redo'
            }), this.canCoalesce = !1, !0);
        }
        pop() {
            this.canUndo() && (this.index -= 1, this.stack.pop());
        }
        snapshot() {
            return !!this.recording && (this.stack.splice(this.index + 1, this.stack.length - this.index - 1), this.stack.push(this.model.getState()), this.index++, this.stack.length > this.maximumDepth && this.stack.shift(), this.canCoalesce = !1, !0);
        }
        snapshotAndCoalesce() {
            if (!this.recording)
                return !1;
            this.canCoalesce && this.pop();
            const vg = this.snapshot();
            return this.canCoalesce = !0, vg;
        }
        constructor(vg) {
            this.recording = !1, this.canCoalesce = !1, this.model = vg, this.reset();
        }
    }
    var vg = '.ML__keyboard{--hue:206;--keyboard-background:rgba(209,213,217,.97);--keyboard-text:#000;--keyboard-text-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-background-border:#ddd;--keycap-background:#fff;--keycap-background-active:#e5e5e5;--keycap-background-border:#e5e6e9;--keycap-background-border-bottom:#8d8f92;--keycap-text:#000;--keycap-text-active:#fff;--keycap-secondary-text:#000;--keycap-modifier-background:#b9bdc7;--keycap-modifier-border:#c5c9d0;--keycap-modifier-border-bottom:#989da6;--keyboard-alternate-background:#fff;--keyboard-alternate-background-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-alternate-text:var(--keycap-text,#000);--keyboard-alternate-text-active:#fff;--keyboard-alternate-key-length:70px;--keyboard-alternate-key-font-size:30px;--keyboard-alternate-key-aside-font-size:12px;--keyboard-height:276px;--keycap-height:52px;--keycap-font-size:20px;--keycap-small-font-size:calc(var(--keycap-font-size)*0.8);--keycap-extra-small-font-size:calc(var(--keycap-font-size)/1.42);--keycap-tt-font-size:calc(var(--keycap-font-size)*1.5);height:100%;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:var(--keyboard-zindex,105)}.ML__keyboard.is-visible .ML__keyboard--plate{opacity:1;transform:translateY(calc(var(--keyboard-height, 276px)*-1));transition-timing-function:cubic-bezier(.4,0,1,1);visibility:visible}.ML__keyboard.alternate-keys{align-content:center;background-color:var(--keyboard-alternate-background);border-radius:6px;bottom:auto;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);box-sizing:content-box;display:flex;flex-direction:row;justify-content:center;max-width:286px;position:fixed;text-align:center;top:0;transform:none;transition:none;visibility:hidden;z-index:calc(var(--keyboard-zindex, 105) + 1)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys{max-width:320px}}.ML__keyboard.alternate-keys.is-visible{visibility:visible}.ML__keyboard.alternate-keys.compact{--keyboard-alternate-key-length:50px;--keyboard-alternate-key-font-size:24px;--keyboard-alternate-key-aside-font-size:10px}.ML__keyboard.alternate-keys ul{display:flex;flex-flow:row wrap-reverse;justify-content:center;list-style:none;margin:3px;padding:0}.ML__keyboard.alternate-keys ul>li{fill:currentColor;align-items:center;background:transparent;border:1px solid transparent;border-radius:5px;box-sizing:border-box;color:var(--keyboard-alternate-text);display:flex;flex-flow:column;font-size:var(--keyboard-alternate-key-font-size);height:var(--keyboard-alternate-key-length);justify-content:center;margin:0;pointer-events:all;width:var(--keyboard-alternate-key-length)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys ul>li{font-size:24px;height:50px;width:50px}}.ML__keyboard.alternate-keys ul>li.is-active,.ML__keyboard.alternate-keys ul>li.is-pressed,.ML__keyboard.alternate-keys ul>li:hover{background:var(--keyboard-alternate-background-active);color:var(--keyboard-alternate-text-active)}.ML__keyboard.alternate-keys ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard.alternate-keys ul>li.small-button{background:#fbfbfb;height:42px;margin:2px;width:42px}.ML__keyboard.alternate-keys ul>li.small-button:hover{background:var(--keyboard-alternate-background-active)}.ML__keyboard.alternate-keys ul>li.box>div,.ML__keyboard.alternate-keys ul>li.box>span{border:1px dashed rgba(0,0,0,.24)}.ML__keyboard.alternate-keys ul>li .warning{align-items:center;background:#cd0030;border-radius:5px;color:#fff;display:flex;justify-content:center;min-height:60px;min-width:60px;padding:5px}.ML__keyboard.alternate-keys ul>li .warning.is-active,.ML__keyboard.alternate-keys ul>li .warning.is-pressed,.ML__keyboard.alternate-keys ul>li .warning:hover{background:red}.ML__keyboard.alternate-keys ul>li .warning svg.svg-glyph{height:50px;width:50px}.ML__keyboard.alternate-keys ul>li aside{font-size:var(--keyboard-alternate-key-aside-font-size);line-height:12px;opacity:.78;padding-top:2px}.ML__keyboard .ML__keyboard--plate{-webkit-backdrop-filter:grayscale(50%);backdrop-filter:grayscale(50%);background-color:var(--keyboard-background);border:1px solid var(--keyboard-background-border);bottom:calc(var(--keyboard-height, 276px)*-1);box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);box-sizing:border-box;cursor:pointer;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:16px;font-weight:400;left:0;margin:0;opacity:0;padding-top:5px;pointer-events:all;position:absolute;text-shadow:none;touch-action:none;transform:translate(0);transition:.28s cubic-bezier(0,0,.2,1);transition-property:transform,opacity;-webkit-user-select:none;user-select:none;visibility:hidden;width:100%}.ML__keyboard .ML__keyboard--plate .tex{font-family:KaTeX_Math,KaTeX_Main,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tex-math{font-family:KaTeX_Math,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tt{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace!important;font-size:var(--keycap-tt-font-size,30px);font-weight:400}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer{display:none;outline:none}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer.is-visible{display:flex;flex-flow:column}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{align-self:center;display:flex;flex-flow:row;justify-content:space-between;min-width:736px}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{min-width:556px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{max-width:100vw;min-width:365px;width:365px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:20px;width:20px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:13px;width:17px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.left{display:flex;flex-flow:row;justify-content:flex-start;position:relative}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.right{display:flex;flex-flow:row;justify-content:flex-end}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{fill:currentColor;align-items:baseline;background:0;border:none;border-bottom:2px solid transparent;box-shadow:none;color:var(--keyboard-text);cursor:pointer;display:flex;font-size:110%;justify-content:center;margin:7px 4px 6px;min-height:0;padding:4px 10px}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled.is-pressed svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled:hover svg{color:var(--keyboard-text);opacity:.2}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:100%;padding:0 6px 0 0}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:90%;padding-left:4px;padding-right:4px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-pressed,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:hover{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.selected{border-bottom:2px solid var(--keyboard-text-active);color:var(--keyboard-text-active);margin-bottom:8px;padding-bottom:0}.ML__keyboard .ML__keyboard--plate [data-tooltip]{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{background:#616161;border-radius:2px;bottom:100%;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-tooltip);display:inline-table;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;text-align:center;top:inherit;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1) 1s;width:max-content;z-index:2}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{font-size:16px;padding:8px 16px}}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover:after{opacity:1;transform:scale(1)}.ML__keyboard .ML__keyboard--plate div .rows{align-items:center;border:0;border-collapse:separate;clear:both;display:flex;flex-flow:column;margin:auto}.ML__keyboard .ML__keyboard--plate div .rows>ul{height:40px;list-style:none;margin:0 0 3px;padding:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{fill:currentColor;-webkit-tap-highlight-color:transparent;align-items:center;background:var(--keycap-background);border:1px solid var(--keycap-background-border);border-bottom-color:var(--keycap-background-border-bottom);border-radius:5px;box-sizing:border-box;color:var(--keycap-text);display:flex;flex-flow:column;float:left;font-size:var(--keycap-font-size,20px);height:40px;justify-content:center;margin-right:2px;overflow:hidden;padding:8px 0;position:relative;text-align:center;-webkit-user-select:none;user-select:none;vertical-align:top;width:34px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li:last-child{margin-right:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tt{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bottom{justify-content:flex-end}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.left{align-items:flex-start;padding-left:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.right{align-items:flex-end;padding-right:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li svg.svg-glyph{height:20px;width:20px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{align-items:center;background:#cd0030;border-radius:100%;color:#fff;display:flex;height:25px;justify-content:center;margin-bottom:-2px;min-height:25px;min-width:25px;padding:5px;width:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:16px;width:16px}@media only screen and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{height:16px;min-height:16px;min-width:16px;width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:14px;width:14px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w0{width:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w5{width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w15{width:52px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w20{width:70px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w50{width:178px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.separator{background:transparent;border:none;pointer-events:none}@media only screen and (max-width:560px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.if-wide{display:none}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tex-math{font-size:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li:hover{background:var(--keycap-background-active);color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap:active{color:var(--keyboard-text-active);transform:translateY(calc(var(--keycap-height, 52px)*-.2)) scale(1.4);z-index:calc(var(--keyboard-zindex, 105) - 5)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier:active{background:var(--keyboard-text-active);color:var(--keycap-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:18px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:16px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.fnbutton{font-size:12px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:var(--keycap-extra-small-font-size,14px)}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:calc(var(--keycap-extra-small-font-size, 14px)/1.55)}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier{background-color:var(--keycap-modifier-background);border-color:var(--keycap-modifier-border);border-bottom-color:var(--keycap-modifier-border-bottom);font-size:65%;font-weight:100}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:hover,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:hover{color:#fff}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.w50{font-size:80%;font-weight:100;padding-top:10px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{color:#555}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{font-size:9px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{color:#666;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:10px;line-height:10px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{display:none}}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:2px;width:calc(10vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:calc(5vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:calc(15vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:calc(20vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:calc(50vw - 2px)}}@media only screen and (min-width:415px) and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:3px;width:37px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:17px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:57px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:77px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:197px}}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:4px;width:51px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:23.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:78.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:106px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:271px}}@media only screen and (min-width:1025px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:6px;width:66px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>.modifier{font-size:80%}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:30px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:102px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:138px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:354px}}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keyboard{--hue:206;--keyboard-background:#4e6373;--keyboard-background:#4e6073;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}}body[theme=dark] .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}div.ML__keyboard.material{--keyboard-background:rgba(209,213,217,.9);--keyboard-background-border:#ddd;--keycap-background:transparent;--keycap-background-active:#cccfd1;--keycap-background-border:transparent;--keyboard-alternate-background:#efefef;--keyboard-alternate-text:#000;font-family:Roboto,sans-serif}div.ML__keyboard.material.alternate-keys{background:var(--keyboard-alternate-background);border:1px solid transparent;border-radius:5px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}div.ML__keyboard.material.alternate-keys ul li.is-active,div.ML__keyboard.material.alternate-keys ul li.is-pressed,div.ML__keyboard.material.alternate-keys ul li:active,div.ML__keyboard.material.alternate-keys ul li:hover{fill:currentColor;background:#5f97fc;border:1px solid transparent;color:#fff}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>div{font-size:16px}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:hover,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-pressed{fill:currentColor;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>.selected{fill:currentColor;border-bottom:2px solid #5f97fc;color:#5f97fc;margin-bottom:8px;padding-bottom:0}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap{fill:currentColor;background:transparent;border:1px solid transparent;border-radius:5px;color:var(--keycap-text);transition:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap.tt{color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]{background:#e0e0e0;height:20px;margin-bottom:10px;margin-top:10px}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:hover{background:#d0d0d0;box-shadow:none;transform:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):hover{background:var(--keycap-background-active);border:1px solid transparent;box-shadow:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{background:var(--keyboard-alternate-background);box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);color:var(--keyboard-alternate-text)}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);font-size:10px;justify-content:flex-start;margin-left:10px;margin-right:10px;padding:2px 0 0;transform:translateY(-10px) scale(2);transition:none;vertical-align:top;width:19.5px;z-index:calc(var(--ML_keyboard-zindex, 105) - 5)}}@media only screen and (max-width:414px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{width:16.5px}}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child.is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child:active{margin-left:14px;margin-right:0}}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier{fill:currentColor;background:transparent;border:0;color:#869096;font-size:16px;transition:none}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.selected{border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:hover{background:var(--keycap-background-active);border:0;box-shadow:none;color:var(--keycap-text)}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton{background:transparent;border:0}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.selected{fill:currentColor;border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:hover{fill:currentColor;background:var(--keycap-background-active);border:0;box-shadow:none;color:#5f97fc}@media (prefers-color-scheme:dark){body:not([theme=light]) div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}';

    function wg(xg, yg, zg) {
        var Ag;
        let Bg, Cg, Dg, Eg, Fg;
        'object' == typeof(Ag = zg) && ('default' in Ag || 'pressed' in Ag) ? (zg.default && (yg.dataset.command = JSON.stringify(zg.default)), zg.alt && (yg.dataset.commandAlt = JSON.stringify(zg.alt)), zg.altshift && (yg.dataset.commandAltshift = JSON.stringify(zg.altshift)), zg.shift && (yg.dataset.commandShift = JSON.stringify(zg.shift)), zg.pressed && (yg.dataset.commandPressed = JSON.stringify(zg.pressed)), zg.pressAndHoldStart && (yg.dataset.commandPressAndHoldStart = JSON.stringify(zg.pressAndHoldStart)), zg.pressAndHoldEnd && (yg.dataset.commandPressAndHoldEnd = JSON.stringify(zg.pressAndHoldEnd))) : yg.dataset.command = JSON.stringify(zg), je(yg, 'mousedown touchstart:passive', zg => {
            if ('mousedown' !== zg.type || 1 === zg.buttons) {
                zg.stopPropagation(), 'touchstart' !== zg.type && zg.preventDefault(), document.body.style['-webkit-user-select'] = 'none', yg.classList.add('is-pressed'), Bg = Date.now(), 'touchstart' === zg.type && (Dg = zg.changedTouches[0].identifier);
                const Gg = yg.getAttribute('data-command-pressed');
                Gg && xg(JSON.parse(Gg));
                const Hg = yg.getAttribute('data-command-press-and-hold-start');
                Hg && (Cg = yg, Fg && clearTimeout(Fg), Fg = setTimeout(() => {
                    yg.classList.contains('is-pressed') && xg(JSON.parse(Hg));
                }, 300));
            }
        }), je(yg, 'mouseleave touchcancel', () => {
            yg.classList.remove('is-pressed');
        }), je(yg, 'touchmove:passive', xg => {
            for (let Gg = 0; Gg < xg.changedTouches.length; Gg++)
                if (xg.changedTouches[Gg].identifier === Dg) {
                    const Hg = document.elementsFromPoint(xg.changedTouches[Gg].clientX, xg.changedTouches[Gg].clientY),
                        Ig = Hg[Hg.length - 1];
                    Ig !== Eg && Eg && (Eg.dispatchEvent(new MouseEvent('mouseleave'), {
                        bubbles: !0
                    }), Eg = null), Ig && (Eg = Ig, Ig.dispatchEvent(new MouseEvent('mouseenter', {
                        bubbles: !0,
                        buttons: 1
                    })));
                }
        }), je(yg, 'mouseenter', xg => {
            1 === xg.buttons && yg.classList.add('is-pressed');
        }), je(yg, 'mouseup touchend click', zg => {
            if (document.body.style['-webkit-user-select'] = '', Eg) {
                zg.stopPropagation(), zg.preventDefault();
                const Gg = Eg;
                return Eg = null, void Gg.dispatchEvent(new MouseEvent('mouseup', {
                    bubbles: !0
                }));
            }
            if (yg.classList.remove('is-pressed'), yg.classList.add('is-active'), 'click' === zg.type && 0 !== zg.detail)
                return zg.stopPropagation(), void zg.preventDefault();
            setTimeout(() => yg.classList.remove('is-active'), 150);
            let Gg = yg.getAttribute('data-command-press-and-hold-end');
            const Hg = Date.now();
            (yg !== Cg || Hg < Bg + 300) && (Gg = null), !Gg && zg.altKey && zg.shiftKey && (Gg = yg.getAttribute('data-command-altshift')), !Gg && zg.altKey && (Gg = yg.getAttribute('data-command-alt')), !Gg && zg.shiftKey && (Gg = yg.getAttribute('data-command-shift')), Gg || (Gg = yg.getAttribute('data-command')), Gg && xg(JSON.parse(Gg)), zg.stopPropagation(), zg.preventDefault();
        });
    }
    let xg;

    function yg() {
        var zg;
        f();
        const Ag = document.querySelector('#mathlive-alternate-keys-panel');
        return Ag && (Ag.classList.remove('is-visible'), Ag.innerHTML = ''), null === (zg = ng.scrim) || void 0 === zg || zg.close(), !1;
    }
    class zg {
        setOptions(Ag) {
            var Bg, Cg;
            let Dg = '';
            if (this._element) {
                const Eg = this._element.querySelector('div.keyboard-layer.is-visible');
                Eg && (Dg = null !== (Bg = Eg.getAttribute('data-layer')) && void 0 !== Bg ? Bg : ''), this._element.remove(), this._element = void 0;
            }
            if (this.options = Ag, this.visible) {
                this.buildAndAttachElement(Ag.virtualKeyboardTheme);
                const Eg = this.element.querySelector(`.keyboard-layer[data-layer="${ Dg }"]`);
                Eg && (null === (Cg = this.element.querySelector('.keyboard-layer.is-visible')) || void 0 === Cg || Cg.classList.remove('is-visible'), Eg.classList.add('is-visible')), this.element.classList.add('is-visible');
            }
        }
        get element() {
            return this._element;
        }
        set element(Ag) {
            var Bg;
            this._element !== Ag && (null === (Bg = this._element) || void 0 === Bg || Bg.remove(), this._element = Ag);
        }
        get visible() {
            return this._visible;
        }
        set visible(Ag) {
            this._visible = Ag;
        }
        get height() {
            var Ag, Bg;
            return null !== (Bg = null === (Ag = this.element) || void 0 === Ag ? void 0 : Ag.offsetHeight) && void 0 !== Bg ? Bg : 0;
        }
        buildAndAttachElement(Ag) {
            var Bg;
            this.element = function(Cg, Dg) {
                var Eg, Fg, Gg, Hg;
                f();
                let Ig = '<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\n    <symbol id="svg-delete-backward" viewBox="0 0 576 512">\n      <path d="M432.1 208.1L385.9 256L432.1 303C442.3 312.4 442.3 327.6 432.1 336.1C423.6 346.3 408.4 346.3 399 336.1L352 289.9L304.1 336.1C295.6 346.3 280.4 346.3 271 336.1C261.7 327.6 261.7 312.4 271 303L318.1 256L271 208.1C261.7 199.6 261.7 184.4 271 175C280.4 165.7 295.6 165.7 304.1 175L352 222.1L399 175C408.4 165.7 423.6 165.7 432.1 175C442.3 184.4 442.3 199.6 432.1 208.1V208.1zM512 64C547.3 64 576 92.65 576 128V384C576 419.3 547.3 448 512 448H205.3C188.3 448 172 441.3 160 429.3L9.372 278.6C3.371 272.6 0 264.5 0 256C0 247.5 3.372 239.4 9.372 233.4L160 82.75C172 70.74 188.3 64 205.3 64L512 64zM528 128C528 119.2 520.8 112 512 112H205.3C201 112 196.9 113.7 193.9 116.7L54.63 256L193.9 395.3C196.9 398.3 201 400 205.3 400H512C520.8 400 528 392.8 528 384V128z"/>\n    </symbol>\n\n    <symbol id="svg-shift" viewBox="0 0 384 512">\n      <path d="M2.438 252.3C7.391 264.2 19.06 272 32 272h80v160c0 26.51 21.49 48 48 48h64C250.5 480 272 458.5 272 432v-160H352c12.94 0 24.61-7.797 29.56-19.75c4.953-11.97 2.219-25.72-6.938-34.88l-160-176C208.4 35.13 200.2 32 192 32S175.6 35.13 169.4 41.38l-160 176C.2188 226.5-2.516 240.3 2.438 252.3zM192 86.63L313.4 224H224v208H160V224H70.63L192 86.63z"/>\n    </symbol>\n\n    <symbol id="svg-commit" viewBox="0 0 512 512">\n      <path d="M135 432.1l-128-128C2.344 300.3 0 294.2 0 288s2.344-12.28 7.031-16.97l128-128c9.375-9.375 24.56-9.375 33.94 0s9.375 24.56 0 33.94L81.94 264H464v-208C464 42.75 474.8 32 488 32S512 42.75 512 56V288c0 13.25-10.75 24-24 24H81.94l87.03 87.03c9.375 9.375 9.375 24.56 0 33.94S144.4 442.3 135 432.1z"/>\n    </symbol>\n\n    <symbol id="svg-command" viewBox="0 0 640 512">\n      <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>\n    </symbol>\n\n    <symbol id="svg-undo" viewBox="0 0 512 512">\n      <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>\n    </symbol>\n    <symbol id="svg-redo" viewBox="0 0 512 512">\n      <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-arrow-left" viewBox="0 0 320 512">\n      <path d="M206.7 464.6l-183.1-191.1C18.22 267.1 16 261.1 16 256s2.219-11.97 6.688-16.59l183.1-191.1c9.152-9.594 24.34-9.906 33.9-.7187c9.625 9.125 9.938 24.37 .7187 33.91L73.24 256l168 175.4c9.219 9.5 8.906 24.78-.7187 33.91C231 474.5 215.8 474.2 206.7 464.6z"/>\n    </symbol>\n    <symbol id="svg-arrow-right" viewBox="0 0 320 512">\n      <path d="M113.3 47.41l183.1 191.1c4.469 4.625 6.688 10.62 6.688 16.59s-2.219 11.97-6.688 16.59l-183.1 191.1c-9.152 9.594-24.34 9.906-33.9 .7187c-9.625-9.125-9.938-24.38-.7187-33.91l168-175.4L78.71 80.6c-9.219-9.5-8.906-24.78 .7187-33.91C88.99 37.5 104.2 37.82 113.3 47.41z"/>\n    </symbol>\n    <symbol id="svg-tab" viewBox="0 0 448 512">\n      <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-copy" viewBox="0 0 448 512">\n      <path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z"/>\n    </symbol>\n    <symbol id="svg-angle-double-right" viewBox="0 0 320 512">\n      <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z"/>\n    </symbol>\n    <symbol id="svg-angle-double-left" viewBox="0 0 320 512">\n      <path d="M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z"/>\n    </symbol>\n    <symbol id="svg-trash" viewBox="0 0 448 512">\n      <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>\n    </symbol>\n</svg>\n        ';
                Cg.create(), _Cg['foreground-color'] = [];
                for (const Jg of Object.keys(p))
                    _Cg['foreground-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' + p[Jg] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                color: Jg
                            }
                        ]
                    });
                _Cg['background-color'] = [];
                for (const Kg of Object.keys(o))
                    _Cg['background-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; background:' + o[Kg] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                backgroundColor: Kg
                            }
                        ]
                    });
                _Dg = {
                    ..._Cg
                };
                for (const Lg of Object.keys(_Dg))
                    _Dg[Lg] = _Dg[Lg].slice();
                for (let Mg = 0; Mg < 26; Mg++) {
                    const Ng = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' [Mg];
                    _Dg[Ng] || (_Dg[Ng] = []), _Dg[Ng].unshift({
                        latex: '\\mathbb{' + Ng + '}',
                        aside: 'blackboard',
                        insert: '\\mathbb{' + Ng + '}'
                    }), _Dg[Ng].unshift({
                        latex: '\\mathbf{' + Ng + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Ng + '}'
                    }), _Dg[Ng].unshift({
                        latex: '\\mathsf{' + Ng + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Ng + '}'
                    }), _Dg[Ng].unshift({
                        latex: '\\mathtt{' + Ng + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Ng + '}'
                    }), _Dg[Ng].unshift({
                        latex: '\\mathcal{' + Ng + '}',
                        aside: 'calligraphy',
                        insert: '\\mathcal{' + Ng + '}'
                    }), _Dg[Ng].unshift({
                        latex: '\\mathfrak{' + Ng + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Ng + '}'
                    });
                }
                for (let Ng = 0; Ng <= 26; Ng++) {
                    const Og = 'abcdefghijklmnopqrstuvwxyz' [Ng];
                    _Dg[Og] || (_Dg[Og] = []), _Dg[Og].unshift({
                        latex: '\\mathsf{' + Og + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Og + '}'
                    }), _Dg[Og].unshift({
                        latex: '\\mathbf{' + Og + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Og + '}'
                    }), _Dg[Og].unshift({
                        latex: '\\mathtt{' + Og + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Og + '}'
                    }), _Dg[Og].unshift({
                        latex: '\\mathfrak{' + Og + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Og + '}'
                    });
                }
                for (let Og = 0; Og < 10; Og++) {
                    const Pg = '0123456789' [Og];
                    _Dg[Pg] || (_Dg[Pg] = []), _Dg[Pg].unshift({
                        latex: '\\mathbf{' + Pg + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Pg + '}'
                    }), _Dg[Pg].unshift({
                        latex: '\\mathsf{' + Pg + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Pg + '}'
                    }), _Dg[Pg].unshift({
                        latex: '\\mathtt{' + Pg + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Pg + '}'
                    }), _Dg[Pg].unshift({
                        latex: '\\mathcal{' + Pg + '}',
                        aside: 'script',
                        insert: '\\mathcal{' + Pg + '}'
                    }), _Dg[Pg].unshift({
                        latex: '\\mathfrak{' + Pg + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Pg + '}'
                    });
                }
                let Pg = Og.options.virtualKeyboards;
                Pg || (Pg = 'all'), Pg = Pg.replace(/\ball\b/i, 'numeric functions symbols roman  greek');
                const Qg = {
                        ..._Eg,
                        ...null !== (Eg = Og.options.customVirtualKeyboardLayers) && void 0 !== Eg ? Eg : {}
                    },
                    Rg = {
                        ..._Ag,
                        ...null !== (Fg = Og.options.customVirtualKeyboards) && void 0 !== Fg ? Fg : {}
                    },
                    Sg = Pg.replace(/\s+/g, ' ').split(' ');
                for (const Tg of Sg) {
                    if (!Rg[Tg])
                        continue;
                    let Ug = null !== (Gg = Rg[Tg].layers) && void 0 !== Gg ? Gg : [];
                    Rg[Tg].layer && Ug.push(Rg[Tg].layer), Ug = [...new Set(Ug)];
                    for (const Vg of Ug) {
                        if (!Qg[Vg])
                            break;
                        if ('object' == typeof Qg[Vg]) {
                            const Wg = Qg[Vg];
                            let Xg = '';
                            if ('string' == typeof Wg.styles ? Xg += `<style>${ Wg.styles }</style>` : 'object' == typeof Wg.styles && (Xg += `<style>${ _Kg(Wg.styles) }</style>`), Wg.backdrop && (Xg += `<div class='${ Wg.backdrop }'>`), Wg.container && (Xg += `<div class='${ Wg.container }'>`), Wg.rows) {
                                Xg += '<div class=\'rows\'>';
                                for (const Yg of Wg.rows) {
                                    Xg += '<ul>';
                                    for (const Zg of Yg) {
                                        if (Xg += '<li', Zg.class) {
                                            let $g = Zg.class;
                                            Zg.layer && !/layer-switch/.test($g) && ($g += ' layer-switch'), /separator/.test($g) || ($g += ' keycap'), Xg += ` class="${ $g }"`;
                                        } else
                                            Xg += ' class="keycap"';
                                        if (Zg.key && (Xg += ` data-key="${ Zg.key }"`), Zg.command && ('string' == typeof Zg.command ? Xg += ` data-command='"${ Zg.command }"'` : (Xg += ' data-command=\'', Xg += JSON.stringify(Zg.command), Xg += '\'')), Zg.insert && (Xg += ` data-insert="${ Zg.insert }"`), Zg.latex && (Xg += ` data-latex="${ Zg.latex }"`), Zg.aside && (Xg += ` data-aside="${ Zg.aside }"`), Zg.variants) {
                                            const $g = Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                                            _Dg[$g] = Zg.variants, Xg += ` data-alt-keys="${ $g }"`;
                                        }
                                        Zg.shifted && (Xg += ` data-shifted="${ Zg.shifted }"`), Zg.shiftedCommand && (Xg += ` data-shifted-command="${ Zg.shiftedCommand }"`), Zg.layer && (Xg += ` data-layer="${ Zg.layer }"`), Xg += `>${ Zg.label ? Zg.label : '' }</li>`;
                                    }
                                    Xg += '</ul>';
                                }
                                Xg += '</div>';
                            }
                            Wg.container && (Xg += '</div>'), Wg.backdrop && (Xg += '</div>'), Qg[Vg] = Xg;
                        }
                        Ig += `<div tabindex="-1" class='keyboard-layer' data-layer='${ Vg }'>`, Ig += _Gg(Og.options, Pg, Tg);
                        const Wg = Qg[Vg];
                        'string' == typeof Wg && (Ig += _Ig(Og.options, Wg)), Ig += '</div>';
                    }
                }
                const Ug = document.createElement('div');
                Ug.className = 'ML__keyboard', Tg ? Ug.classList.add(Tg) : Og.options.virtualKeyboardTheme && Ug.classList.add(Og.options.virtualKeyboardTheme);
                const Vg = document.createElement('div');
                Vg.className = 'ML__keyboard--plate', Vg.innerHTML = Og.options.createHTML(Ig), Ug.appendChild(Vg);
                const Wg = Ug.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton');
                for (const Xg of Wg)
                    Xg.id = 'ML__k' + Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                _Hg(Xg, [...Wg]);
                const Yg = Ug.querySelectorAll('.layer-switch');
                for (const Zg of Yg)
                    Zg.classList.contains('shift') ? wg(Zg => Xg.executeCommand(Zg), Zg, {
                        pressed: 'shiftKeyboardLayer',
                        default: [
                            'switchKeyboardLayer',
                            Zg.getAttribute('data-layer')
                        ],
                        pressAndHoldEnd: 'unshiftKeyboardLayer'
                    }) : wg(Zg => Xg.executeCommand(Zg), Zg, {
                        default: [
                            'switchKeyboardLayer',
                            Zg.getAttribute('data-layer')
                        ]
                    });
                const $g = Ug.querySelectorAll('.keyboard-layer');
                for (const ah of $g)
                    ah.addEventListener('mousedown', ah => {
                        ah.preventDefault(), ah.stopPropagation();
                    }), ah.addEventListener('touchstart', ah => {
                        ah.preventDefault(), ah.stopPropagation();
                    }, {
                        passive: !1
                    });
                return null === (Hg = $g[0]) || void 0 === Hg || Hg.classList.add('is-visible'), Ug;
            }(this, null != Ag ? Ag : ''), je(this.element, 'touchstart:passive mousedown', () => this.focusMathfield()), null === (Bg = this.options.virtualKeyboardContainer) || void 0 === Bg || Bg.appendChild(this.element);
        }
        handleEvent(Ag) {
            if (this.element)
                switch (Ag.type) {
                    case 'mouseup':
                    case 'blur':
                    case 'touchend':
                    case 'touchcancel':
                        document.body.style.userSelect = '', _Jg(this);
                }
        }
        focusMathfield() {
            var Ag, Bg;
            null === (Bg = null === (Ag = this._mathfield) || void 0 === Ag ? void 0 : Ag.focus) || void 0 === Bg || Bg.call(Ag);
        }
        blurMathfield() {
            var Ag, Bg;
            null === (Bg = null === (Ag = this._mathfield) || void 0 === Ag ? void 0 : Ag.blur) || void 0 === Bg || Bg.call(Ag);
        }
        stateChanged() {
            var Ag, Bg;
            null === (Bg = null === (Ag = this._mathfield) || void 0 === Ag ? void 0 : Ag.element) || void 0 === Bg || Bg.dispatchEvent(new Event('virtual-keyboard-toggle', {
                bubbles: !0,
                cancelable: !1,
                composed: !0
            }));
        }
        executeCommand(Ag) {
            var Bg, Cg, Dg;
            let Eg, Fg = [];
            return d(Ag) ? (Eg = Ag[0], Fg = Ag.slice(1)) : Eg = Ag, Eg = Eg.replace(/-\w/g, Ag => Ag[1].toUpperCase()), 'virtual-keyboard' === (null === (Bg = sf[Eg]) || void 0 === Bg ? void 0 : Bg.target) ? sf[Eg].fn(this, ...Fg) : null !== (Dg = null === (Cg = this._mathfield) || void 0 === Cg ? void 0 : Cg.executeCommand(Ag)) && void 0 !== Dg && Dg;
        }
        create() {
            this.virtualKeyboardStylesheet || (xg || (xg = Ee(vg).toString(36)), this.virtualKeyboardStylesheet = Fe(null, vg, xg)), this.coreStylesheet || (this.coreStylesheet = Fe(null, We, Ee(We).toString(36))), null !== this.options.fontsDirectory && Lf(this.options.fontsDirectory);
        }
        enable() {
            e() && (window.addEventListener('mouseup', this), window.addEventListener('blur', this), window.addEventListener('touchend', this), window.addEventListener('touchcancel', this));
        }
        disable() {
            e() && (window.removeEventListener('mouseup', this), window.removeEventListener('blur', this), window.removeEventListener('touchend', this), window.removeEventListener('touchcancel', this));
        }
        dispose() {}
        constructor(Ag, Bg) {
            this.originalContainerBottomPadding = null, this.options = Ag, this.visible = !1, this._mathfield = Bg, this.coreStylesheet = null, this.virtualKeyboardStylesheet = null;
        }
    }
    const _Ag = {
            numeric: {
                tooltip: 'keyboard.tooltip.numeric',
                layer: 'math',
                label: '123',
                layers: ['math']
            },
            roman: {
                tooltip: 'keyboard.tooltip.roman',
                layer: 'lower-roman',
                label: 'ABC',
                layers: [
                    'lower-roman',
                    'upper-roman'
                ]
            },
            greek: {
                tooltip: 'keyboard.tooltip.greek',
                layer: 'lower-greek',
                label: '&alpha;&beta;&gamma;',
                classes: 'tex-math',
                layers: [
                    'lower-greek',
                    'upper-greek'
                ]
            },
            functions: {
                tooltip: 'keyboard.tooltip.functions',
                layer: 'functions',
                label: '<i>f</i>&thinsp;()',
                classes: 'tex',
                layers: ['functions']
            },
            symbols: {
                tooltip: 'keyboard.tooltip.symbols',
                layer: 'symbols',
                label: '&infin;\u2260\u2208',
                classes: 'tex',
                layers: ['symbols']
            },
            latex: {
                tooltip: 'keyboard.tooltip.command',
                command: [
                    'switchMode',
                    'latex'
                ],
                label: '<svg class="svg-glyph"><use xlink:href=\'#svg-command\' /></svg>',
                layers: [
                    'latex-lower',
                    'latex-upper',
                    'latex-symbols'
                ]
            },
            style: {
                tooltip: 'keyboard.tooltip.style',
                layer: 'style',
                label: '<b>b</b><i>i</i>\uD835\uDD39'
            }
        },
        Bg = {
            '\\varphi ': [
                '&Phi;',
                '\\Phi '
            ],
            '\\varsigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\epsilon ': [
                '&#x0190;',
                '\\char"0190'
            ],
            '\\rho ': [
                '&#x3A1',
                '\\char"3A1'
            ],
            '\\tau ': [
                '&#x3A4;',
                '\\char"3A4'
            ],
            '\\upsilon ': [
                '&Upsilon;',
                '\\Upsilon '
            ],
            '\\theta ': [
                '&Theta;',
                '\\Theta '
            ],
            '\\iota ': [
                '&Iota;',
                '\\char"399'
            ],
            '\\omicron ': [
                '&#x039F;',
                '\\char"39F'
            ],
            '\\pi ': [
                '&Pi;',
                '\\Pi '
            ],
            '\\alpha ': [
                '&Alpha;',
                '\\char"391'
            ],
            '\\sigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\delta ': [
                '&Delta;',
                '\\Delta '
            ],
            '\\phi ': [
                '&#x03a6;',
                '\\Phi '
            ],
            '\\gamma ': [
                '&Gamma;',
                '\\Gamma '
            ],
            '\\eta ': [
                '&Eta;',
                '\\char"397'
            ],
            '\\xi ': [
                '&Xi;',
                '\\Xi '
            ],
            '\\kappa ': [
                '&Kappa;',
                '\\char"39A'
            ],
            '\\lambda ': [
                '&Lambda;',
                '\\Lambda '
            ],
            '\\zeta ': [
                '&Zeta;',
                '\\char"396'
            ],
            '\\chi ': [
                '&Chi;',
                '\\char"3A7'
            ],
            '\\psi ': [
                '&Psi;',
                '\\Psi '
            ],
            '\\omega ': [
                '&Omega;',
                '\\Omega '
            ],
            '\\beta ': [
                '&Beta;',
                '\\char"392'
            ],
            '\\nu ': [
                '&Nu;',
                '\\char"39D'
            ],
            '\\mu ': [
                '&Mu;',
                '\\char"39C'
            ]
        },
        _Cg = {
            0: [
                '\\emptyset',
                '\\varnothing',
                '\\infty',
                {
                    latex: '#?_0',
                    insert: '#@_0'
                },
                '\\circ',
                '\\bigcirc',
                '\\bullet'
            ],
            2: [
                '\\frac{1}{2}',
                {
                    latex: '#?^2',
                    insert: '#@^2'
                }
            ],
            3: [
                '\\frac{1}{3}',
                {
                    latex: '#?^3',
                    insert: '#@^3'
                }
            ],
            '.': [
                '.',
                ',',
                ';',
                '\\colon',
                {
                    latex: ':',
                    aside: 'ratio'
                },
                {
                    latex: '\\cdotp',
                    aside: 'center dot',
                    class: 'box'
                },
                {
                    latex: '\\cdots',
                    aside: 'center ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\ldotp',
                    aside: 'low dot',
                    class: 'box'
                },
                {
                    latex: '\\ldots',
                    aside: 'low ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\vdots',
                    aside: '',
                    class: 'box'
                },
                {
                    latex: '\\ddots',
                    aside: '',
                    class: 'box'
                },
                '\\odot',
                '\\oslash',
                '\\circledcirc'
            ],
            '*': [
                '\\cdot',
                '\\ast',
                '\\star',
                '\\bigstar',
                '\\ltimes',
                '\\rtimes',
                '\\rightthreetimes',
                '\\leftthreetimes',
                '\\intercal',
                '\\prod',
                {
                    latex: '\\prod_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                }
            ],
            '+': [
                '\\pm',
                '\\mp',
                '\\sum',
                {
                    latex: '\\sum_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                },
                '\\dotplus',
                '\\oplus'
            ],
            '-': [
                '\\pm',
                '\\mp',
                '\\ominus',
                '\\vert #0  \\vert'
            ],
            '/': [
                '\\divideontimes',
                '/',
                '\\div',
                '\\%'
            ],
            '(': [
                '\\left( #0\\right)',
                '\\left[ #0\\right]',
                '\\left\\{ #0\\right\\}',
                '\\left\\langle #0\\right\\rangle',
                '\\lfloor',
                '\\llcorner',
                '(',
                '\\lbrack',
                '\\lvert',
                '\\lVert',
                '\\lgroup',
                '\\langle',
                '\\lceil',
                '\\ulcorner',
                '\\lmoustache',
                '\\lbrace'
            ],
            ')': [
                '\\rfloor',
                '\\lrcorner',
                ')',
                '\\rbrack',
                '\\rvert',
                '\\rVert',
                '\\rgroup',
                '\\rangle',
                '\\rceil',
                '\\urcorner',
                '\\rmoustache',
                '\\rbrace'
            ],
            '=': [
                '\\cong',
                '\\asymp',
                '\\equiv',
                '\\differencedelta',
                '\\varpropto',
                '\\thickapprox',
                '\\approxeq',
                '\\thicksim',
                '\\backsim',
                '\\eqsim',
                '\\simeq',
                '\\Bumpeq',
                '\\bumpeq',
                '\\doteq',
                '\\Doteq',
                '\\fallingdotseq',
                '\\risingdotseq',
                '\\coloneq',
                '\\eqcirc',
                '\\circeq',
                '\\triangleq',
                '\\between'
            ],
            '!=': [
                '\\neq',
                '\\ncong',
                '',
                '\\nsim'
            ],
            '<': [
                '\\leq',
                '\\leqq',
                '\\lneqq',
                '\\ll',
                '\\lessgtr',
                '\\nless',
                '\\nleq',
                '\\lesssim',
                '\\precsim',
                '\\prec',
                '\\nprec',
                '\\preccurlyeq',
                '\\lessdot'
            ],
            '>': [
                '\\geq',
                '\\geqq',
                '\\gneqq',
                '\\gg',
                '\\gtrless',
                '\\ngtr',
                '\\ngeq',
                '\\gtrsim',
                '\\succsim',
                '\\succ',
                '\\nsucc',
                '\\succcurlyeq',
                '\\gtrdot'
            ],
            in: ['\\owns'],
            '!in': ['\\backepsilon'],
            subset: [
                '\\subseteq',
                '\\nsubset',
                '\\nsubseteq'
            ],
            superset: [
                '\\supseteq',
                '\\nsupset',
                '\\nsupseteq'
            ],
            infinity: [
                '\\aleph_0',
                '\\aleph_1',
                '\\omega',
                '\\mathfrak{m}'
            ],
            'numeric-pi': [
                '\\prod',
                '\\theta',
                '\\rho',
                '\\sin',
                '\\cos',
                '\\tan'
            ],
            ee: [
                '\\times 10^{#?}',
                '\\ln',
                '\\ln_{10}',
                '\\log'
            ],
            '^': ['_{#?}'],
            int: [{
                    latex: '\\int_{#?}^{#?}',
                    class: 'small'
                },
                {
                    latex: '\\int',
                    class: 'small'
                },
                {
                    latex: '\\smallint',
                    class: 'small'
                },
                {
                    latex: '\\iint',
                    class: 'small'
                },
                {
                    latex: '\\iiint',
                    class: 'small'
                },
                {
                    latex: '\\oint',
                    class: 'small'
                },
                {
                    latex: '\\dfrac{\\rd}{\\rd x}',
                    class: 'small'
                },
                {
                    latex: '\\frac{\\partial}{\\partial x}',
                    class: 'small'
                },
                '\\capitalDifferentialD',
                '\\rd',
                '\\partial'
            ],
            nabla: [
                '\\nabla\\times',
                '\\nabla\\cdot',
                '\\nabla^{2}'
            ],
            '!': [
                '!!',
                '\\Gamma',
                '\\Pi'
            ],
            accents: [
                '\\bar{#@}',
                '\\vec{#@}',
                '\\hat{#@}',
                '\\check{#@}',
                '\\dot{#@}',
                '\\ddot{#@}',
                '\\mathring{#@}',
                '\\breve{#@}',
                '\\acute{#@}',
                '\\tilde{#@}',
                '\\grave{#@}'
            ],
            underline: [
                '\\underbrace{#@}',
                '\\underlinesegment{#@}',
                '\\underleftrightarrow{#@}',
                '\\underrightarrow{#@}',
                '\\underleftarrow{#@}',
                '\\undergroup{#@}'
            ],
            overline: [
                '\\overbrace{#@}',
                '\\overlinesegment{#@}',
                '\\overleftrightarrow{#@}',
                '\\overrightarrow{#@}',
                '\\overleftarrow{#@}',
                '\\overgroup{#@}'
            ],
            xleftarrows: [
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xLeftarrow{#@}',
                '\\xleftharpoonup{#@}',
                '\\xleftharpoondown{#@}',
                '\\xtwoheadleftarrow{#@}',
                '\\xhookleftarrow{#@}',
                '\\xtofrom{#@}',
                '\\xleftequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            xrightarrows: [
                '\\xrightarrow{#@}',
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xRightarrow{#@}',
                '\\xrightharpoonup{#@}',
                '\\xrightharpoondown{#@}',
                '\\xtwoheadrightarrow{#@}',
                '\\xrightleftharpoons{#@}',
                '\\xhookrightarrow{#@}',
                '\\xmapsto{#@}',
                '\\xrightequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            A: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            a: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            b: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            B: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            c: [{
                latex: '\\C',
                aside: 'set of complex numbers'
            }],
            d: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            D: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            e: [{
                    latex: '\\exponentialE',
                    aside: 'exponential e'
                },
                {
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                }
            ],
            g: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            G: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            h: [{
                    latex: '\\hbar',
                    aside: 'h bar'
                },
                {
                    latex: '\\hslash',
                    aside: 'h slash'
                }
            ],
            i: [{
                latex: '\\imaginaryI',
                aside: 'imaginary i'
            }],
            j: [{
                latex: '\\imaginaryJ',
                aside: 'imaginary j'
            }],
            l: [{
                latex: '\\ell',
                aside: 'ell'
            }],
            n: [{
                latex: '\\mathbb{N}',
                aside: 'set of natural numbers'
            }],
            p: [{
                latex: '\\mathbb{P}',
                aside: 'set of primes'
            }],
            q: [{
                latex: '\\mathbb{Q}',
                aside: 'set of rational numbers'
            }],
            r: [{
                latex: '\\mathbb{R}',
                aside: 'set of real numbers'
            }],
            z: [{
                latex: '\\mathbb{Z}',
                aside: 'set of integers'
            }],
            'x-var': [
                'y',
                'z',
                't',
                'r',
                {
                    latex: 'f(#?)',
                    class: 'small'
                },
                {
                    latex: 'g(#?)',
                    class: 'small'
                },
                'x^2',
                'x^n',
                'x_n',
                'x_{n+1}',
                'x_i',
                'x_{i+1}'
            ],
            'n-var': [
                'i',
                'j',
                'p',
                'k',
                'a',
                'u'
            ],
            ii: [
                '\\Re',
                '\\Im',
                '\\imaginaryJ',
                '\\Vert #0 \\Vert'
            ],
            logic: [{
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                },
                {
                    latex: '\\ni',
                    aside: 'such that'
                },
                {
                    latex: '\\Colon',
                    aside: 'such that'
                },
                {
                    latex: '\\implies',
                    aside: 'implies'
                },
                {
                    latex: '\\impliedby',
                    aside: 'implied by'
                },
                {
                    latex: '\\iff',
                    aside: 'if and only if'
                },
                {
                    latex: '\\land',
                    aside: 'and'
                },
                {
                    latex: '\\lor',
                    aside: 'or'
                },
                {
                    latex: '\\oplus',
                    aside: 'xor'
                },
                {
                    latex: '\\lnot',
                    aside: 'not'
                },
                {
                    latex: '\\downarrow',
                    aside: 'nor'
                },
                {
                    latex: '\\uparrow',
                    aside: 'nand'
                },
                {
                    latex: '\\curlywedge',
                    aside: 'nor'
                },
                {
                    latex: '\\bar\\curlywedge',
                    aside: 'nand'
                },
                {
                    latex: '\\therefore',
                    aside: 'therefore'
                },
                {
                    latex: '\\because',
                    aside: 'because'
                },
                {
                    latex: '^\\biconditional',
                    aside: 'biconditional'
                },
                '\\leftrightarrow',
                '\\Leftrightarrow',
                '\\to',
                '\\models',
                '\\vdash',
                '\\gets',
                '\\dashv',
                '\\roundimplies'
            ],
            'set-operators': [
                '\\cap',
                '\\cup',
                '\\setminus',
                '\\smallsetminus',
                '\\complement'
            ],
            'set-relations': [
                '\\in',
                '\\notin',
                '\\ni',
                '\\owns',
                '\\subset',
                '\\supset',
                '\\subseteq',
                '\\supseteq',
                '\\subsetneq',
                '\\supsetneq',
                '\\varsubsetneq',
                '\\subsetneqq',
                '\\nsubset',
                '\\nsupset',
                '\\nsubseteq',
                '\\nsupseteq'
            ],
            space: [{
                    latex: '\\char"203A\\!\\char"2039',
                    insert: '\\!',
                    aside: 'negative thin space<br>\u207B\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\,\\unicode{"2039}',
                    insert: '\\,',
                    aside: 'thin space<br>\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\:\\unicode{"2039}',
                    insert: '\\:',
                    aside: 'medium space<br>\u2074\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\;\\unicode{"2039}',
                    insert: '\\;',
                    aside: 'thick space<br>\u2075\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\ \\unicode{"2039}',
                    insert: '\\ ',
                    aside: '\u2153 em'
                },
                {
                    latex: '\\unicode{"203A}\\enspace\\unicode{"2039}',
                    insert: '\\enspace',
                    aside: '\xBD em'
                },
                {
                    latex: '\\unicode{"203A}\\quad\\unicode{"2039}',
                    insert: '\\quad',
                    aside: '1 em'
                },
                {
                    latex: '\\unicode{"203A}\\qquad\\unicode{"2039}',
                    insert: '\\qquad',
                    aside: '2 em'
                }
            ],
            delete: [{
                label: '<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>',
                command: 'deleteAll'
            }],
            '->|': []
        };
    let _Dg = {};
    const _Eg = {
        math: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'x-var\'><i>x</i></li>\n                <li class=\'keycap tex\' data-alt-keys=\'n-var\'><i>n</i></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-1\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'\\exponentialE\' data-alt-keys=\'ee\'>e</li>\n                <li class=\'keycap tex\' data-latex=\'\\imaginaryI\' data-alt-keys=\'ii\'>i</li>\n                <li class=\'keycap tex\' data-latex=\'\\pi\' data-alt-keys=\'numeric-pi\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-key=\'<\' data-alt-keys=\'<\'>&lt;</li>\n                <li class=\'keycap tex\' data-key=\'>\' data-alt-keys=\'>\'>&gt;</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-2\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'#@^{2}\' data-latex=\'x^2\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'^\' data-insert=\'#@^{#?}\' data-latex=\'x^\\placeholder\'></li>\n                <li class=\'keycap tex small\' data-insert=\'\\sqrt{#0}\' data-latex=\'\\sqrt{#0}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' >(</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' >)</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-3\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap small\' data-alt-keys=\'int\' data-latex=\'\\int_0^\\infty\'></li>\n                <li class=\'keycap\' data-latex=\'\\forall\' data-alt-keys=\'logic\' ></li>\n                <li class=\'action font-glyph bottom right\' data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box\'></span></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-4\'/>\n                <li class=\'separator w5\'></li>\n                <arrows/>\n            </ul>\n        </div>\n    ',
        'lower-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'lower-1\' shift-layer=\'upper-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'lower-2\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'lower-3\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' >,</li>\n                <li class=\'keycap w50\' data-key=\' \' data-alt-keys=\'space\'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'upper-1\'  shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'upper-2\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'upper-3\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' data-alt-keys=\'.\'>;</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        symbols: '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrace \'>{</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrace \'>}</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xleftarrows\' data-latex=\'\\leftarrow\' ></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xrightarrows\' data-latex=\'\\rightarrow\' ></li>\n                <li class=\'keycap tex\' data-alt-keys=\'overline\' data-latex=\'\\overline{#@}\' data-aside=\'overline\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'underline\' data-latex=\'\\underline{#@}\' data-aside=\'underline\'></li>\n                <li class=\'keycap w15\' data-insert=\'\\ulcorner#0\\urcorner \'><span><sup>&#x250c;</sup><span><span style=\'color:#ddd\'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'nabla\' data-insert=\'\\nabla \'>&#x2207;<aside>nabla</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'infinity\' data-insert=\'\\infty \'>&#x221e;</li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrack \'>[</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrack \'>]</li>\n                <li class=\'separator w5\'></li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'in\' data-insert=\'\\in \'>&#x2208;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'!in\' data-insert=\'\\notin \'>&#x2209;</li>\n                <li class=\'keycap tex\' data-insert=\'\\Re \'>&#x211c;<aside>Real</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Im \'>&#x2111;<aside>Imaginary</aside></li>\n                <li class=\'keycap w15\' data-insert=\'\\llcorner#0\\lrcorner \'><span><sub>&#x2514;</sub><span style=\'color:#ddd\'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>\n\n                <li class=\'keycap tex\' data-insert=\'\\partial \'>&#x2202;<aside>partial<br>derivative</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\emptyset \'>&#x2205;<aside>empty set</aside></li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\langle \'>&#x27e8;</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rangle \'>&#x27e9;</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'subset\' data-insert=\'\\subset \'>&#x2282;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'superset\' data-insert=\'\\supset \'>&#x2283;</li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'accents\' data-insert=\'\\vec{#@}\' data-latex=\'\\vec{#?}\' data-aside=\'vector\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'absnorm\' data-insert=\'\\left| #0 \\right|\' data-latex=\'\\left| #? \\right|\' data-aside=\'abs\'></li>\n\n                <li class=\'keycap tex\' data-key=\'!\' data-alt-keys=\'!\'>!<aside>factorial</aside></li>\n                <li class=\'keycap\' data-latex=\'^{\\prime} \'><span><sup><span><span style=\'color:#ddd\'>o</span>&#x2032</sup></span><aside>prime</aside></li>\n\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-insert=\',\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\cdot \'>&#x22c5;<aside>centered dot</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\colon \'>:<aside>colon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\circ \'>&#x2218;<aside>circle</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\approx \'>&#x2248;<aside>approx.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\ne \'>&#x2260;</li>\n                <li class=\'keycap tex\' data-insert=\'\\pm \'>&#x00b1;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'lower-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\varphi \'><i>&#x03c6;</i><aside>phi var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varsigma \'><i>&#x03c2;</i><aside>sigma var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\epsilon \'><i>&#x03f5;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\rho \'><i>&rho;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\tau \'><i>&tau;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\upsilon \'><i>&upsilon;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\theta \'><i>&theta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\iota \'><i>&iota;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omicron \'>&omicron;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\pi \'><i>&pi;</i></li>\n            </ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\alpha \' data-shifted=\'&Alpha;\' data-shifted-command=\'["insert","\\\\char\\"391"]\'><i>&alpha;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\sigma \'><i>&sigma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\delta \'><i>&delta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\phi \'><i>&#x03d5;</i></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\gamma \'><i>&gamma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\eta \'><i>&eta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\xi \'><i>&xi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\kappa \'><i>&kappa;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\lambda \'><i>&lambda;</i></li>\n            </ul>\n            <ul><li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'upper-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\zeta \'><i>&zeta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\chi \'><i>&chi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\psi \'><i>&psi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omega \'><i>&omega;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\beta \'><i>&beta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\nu \'><i>&nu;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\mu \'><i>&mu;</i></li>\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'keycap \' data-key=\' \'>&nbsp;</li>\n                <li class=\'keycap\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\varepsilon \'><i>&#x03b5;</i><aside>epsilon var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\vartheta \'><i>&#x03d1;</i><aside>theta var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varkappa \'><i>&#x3f0;</i><aside>kappa var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varpi \'><i>&#x03d6;<aside>pi var.</aside></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\varrho \'><i>&#x03f1;</i><aside>rho var.</aside></li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\Phi \'>&Phi;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"0190\'>&#x0190;<aside>epsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A1\'>&#x3A1;<aside>rho</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A4\'>&#x3A4;<aside>tau</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Upsilon \'>&Upsilon;<aside>upsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Theta \'>&Theta;<aside>theta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"399\'>&Iota;<aside>iota</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39F\'>&#x039F;<aside>omicron</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Pi \'>&Pi;<aside>pi</aside></li></ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\char"391\'>&#x391;<aside>alpha</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Delta \'>&Delta;<aside>delta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Phi \'>&#x03a6;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Gamma \'>&Gamma;<aside>gamma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"397\'>&Eta;<aside>eta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Xi \'>&Xi;<aside>xi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39A\'>&Kappa;<aside>kappa</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Lambda \'>&Lambda;<aside>lambda</aside></li></ul>\n            <ul><li class=\'shift modifier font-glyph bottom left selected w15 layer-switch\' data-layer=\'lower-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"396\'>&Zeta;<aside>zeta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A7\'>&Chi;<aside>chi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Psi \'>&Psi;<aside>psi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Omega \'>&Omega;<aside>omega</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"392\'>&Beta;<aside>beta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39D\'>&Nu;<aside>nu</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39C\'>&Mu;<aside>mu</aside></li>\n                <li class=\'action font-glyph bottom right w15\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul>\n                <li class=\'separator w10\'>&nbsp;</li>\n                <li class=\'keycap\'>.</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-lower': '\n        <div class=\'rows\'>\n            <ul><row name=\'lower-1\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-2\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-3\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'>01#</li>\n                <li class=\'keycap tt\' data-shifted=\'[\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "["]\'>{</li>\n                <li class=\'keycap tt\' data-shifted=\']\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "]"]\'>}</li>\n                <li class=\'keycap tt\' data-shifted=\'(\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "("]\'>^</li>\n                <li class=\'keycap tt\' data-shifted=\')\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", ")"]\'>_</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-upper': '\n        <div class=\'rows\'>\n            <ul><row name=\'upper-1\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-2\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-3\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'01#</li>\n                <li class=\'keycap tt\'>[</li>\n                <li class=\'keycap tt\'>]</li>\n                <li class=\'keycap tt\'>(</li>\n                <li class=\'keycap tt\'>)</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-symbols': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tt\'>1</li><li class=\'keycap tt\'>2</li><li class=\'keycap tt\'>3</li><li class=\'keycap tt\'>4</li><li class=\'keycap tt\'>5</li><li class=\'keycap tt\'>6</li><li class=\'keycap tt\'>7</li><li class=\'keycap tt\'>8</li><li class=\'keycap tt\'>9</li><li class=\'keycap tt\'>0</li></ul>\n            <ul><li class=\'keycap tt\'>!</li><li class=\'keycap tt\'>@</li><li class=\'keycap tt\'>#</li><li class=\'keycap tt\'>$</li><li class=\'keycap tt\'>%</li><li class=\'keycap tt\'>^</li><li class=\'keycap tt\'>&</li><li class=\'keycap tt\'>*</li><li class=\'keycap tt\'>+</li><li class=\'keycap tt\'>=</li></ul>\n            <ul>\n                <li class=\'keycap tt\'>\\</li>\n                <li class=\'keycap tt\'>|</li>\n                <li class=\'keycap tt\'>/</li>\n                <li class=\'keycap tt\'>`</li>\n                <li class=\'keycap tt\'>;</li>\n                <li class=\'keycap tt\'>:</li>\n                <li class=\'keycap tt\'>?</li>\n                <li class=\'keycap tt\'>\'</li>\n                <li class=\'keycap tt\'>"</li>\n                <li class=\'action font-glyph bottom right\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-lower\'>abc</li>\n                <li class=\'keycap tt\'>&lt;</li>\n                <li class=\'keycap tt\'>&gt;</li>\n                <li class=\'keycap tt\'>~</li>\n                <li class=\'keycap tt\'>,</li>\n                <li class=\'keycap tt\'>.</li>\n                <li class=\'keycap\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        functions: '\n        <div class=\'rows\'>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin^{-1}\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\ln\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\exponentialE^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{lcm}(#?)\' data-latex=\'\\operatorname{lcm}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{ceil}(#?)\' data-latex=\'\\operatorname{ceil}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\lim_{n\\to\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\int\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{abs}(#?)\' data-latex=\'\\operatorname{abs}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\ln_{10}\'></li>\n                <li class=\'fnbutton\' data-latex=\'10^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{gcd}(#?)\' data-latex=\'\\operatorname{gcd}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{floor}(#?)\' data-latex=\'\\operatorname{floor}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\sum_{n\\mathop=0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\int_{0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{sign}(#?)\' data-latex=\'\\operatorname{sign}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\log_{#?}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\sqrt[#?]{#0}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'#0 \\mod\' data-latex=\'\\mod\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{round}(#?) \' data-latex=\'\\operatorname{round}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\prod_{n\\mathop=0}^{\\infty}\' data-latex=\'{\\scriptstyle \\prod_{n=0}^{\\infty}}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\frac{\\differentialD #0}{\\differentialD x}\'></li>\n                <li class=\'action font-glyph bottom right\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\'>(</li>\n                <li class=\'fnbutton\'>)</li>\n                <li class=\'fnbutton\' data-insert=\'^{#?}\' data-latex=\'x^{#?}\'></li>\n                <li class=\'fnbutton\' data-insert=\'_{#?}\' data-latex=\'x_{#?}\'></li>\n                <li class=\'keycap w20 \' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        style: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590\'></span></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"3"}]\' data-latex=\'\\scriptsize\\text{small}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"5"}]\' data-latex=\'\\scriptsize\\text{normal}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"9"}]\' data-latex=\'\\huge\\text{big}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-latex=\'\\langle\' data-command=\'["insert", "\\\\langle", {"smartFence":true}]\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"l"}]\' data-latex=\'\\fontseries{l}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"m"}]\' data-latex=\'\\fontseries{m}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"b"}]\' data-latex=\'\\fontseries{b}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"bx"}]\' data-latex=\'\\fontseries{bx}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"sb"}]\' data-latex=\'\\fontseries{sb}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"c"}]\' data-latex=\'\\fontseries{c}\\text{Ab}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"up"}]\' data-latex=\'\\textup{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"it"}]\' data-latex=\'\\textit{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sl"}]\' data-latex=\'\\textsl{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sc"}]\' data-latex=\'\\textsc{Ab}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-insert=\'\\emph{#@} \' data-latex=\'\\text{\\emph{emph}}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmr"}]\' data-latex=\'\\textrm{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmtt"}]\' data-latex=\'\\texttt{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmss"}]\' data-latex=\'\\textsf{Az}\'></li>\n\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"bb"}]\'  data-latex=\'\\mathbb{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"scr"}]\'  data-latex=\'\\mathscr{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cal"}]\' data-latex=\'\\mathcal{A1}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"frak"}]\' data-latex=\'\\mathfrak{Az}\'></li>\n            </ul>\n        </div>'
    };

    function Fg(Gg, Hg) {
        Gg = Gg.replace(/(^|[^\\])#@/g, '$1#?');
        const Ig = td(),
            Jg = new kc('root', Ig);
        return Jg.body = _Qc(Gg, Ig, {
            parseMode: 'math',
            args: Hg
        }), _Tb(Pb(Sb(new Nb(Jg.render(new Db({
            registers: Ig.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function _Gg(Hg, Ig, Jg) {
        var Kg, Lg, Mg;
        let Ng = '<div class=\'left\'>';
        const Og = Ig.replace(/\s+/g, ' ').split(' ');
        if (Og.length > 1) {
            const Pg = {
                ..._Ag,
                ...null !== (Kg = Hg.customVirtualKeyboards) && void 0 !== Kg ? Kg : {}
            };
            for (const Qg of Og) {
                if (!Pg[Qg])
                    break;
                Ng += '<div class=\'', Qg === Jg ? Ng += 'selected ' : Pg[Qg].command ? Ng += 'action ' : Ng += 'layer-switch ', Ng += (null !== (Lg = Pg[Qg].classes) && void 0 !== Lg ? Lg : '') + '\'', Pg[Qg].tooltip && (Ng += 'data-tooltip=\'' + (null !== (Mg = l(Pg[Qg].tooltip)) && void 0 !== Mg ? Mg : Pg[Qg].tooltip) + '\' '), Qg !== Jg && ('string' == typeof Pg[Qg].command ? Ng += `data-command='"${ Pg[Qg].command }"'` : Array.isArray(Pg[Qg].command) && (Ng += `data-command='"${ Pg[Qg].command.join('') }"'`), Pg[Qg].layer && (Ng += 'data-layer=\'' + Pg[Qg].layer + '\'')), Ng += '>' + Pg[Qg].label + '</div>';
            }
        }
        Ng += '</div>';
        const Pg = 'default' === Hg.virtualKeyboardToolbar ? [
                'copyToClipboard',
                'undo',
                'redo'
            ] : [],
            Qg = {
                copyToClipboard: `\n            <div class='action'\n                data-command='"copyToClipboard"'\n                data-tooltip='${ l('tooltip.copy to clipboard') }'>\n                <svg><use xlink:href='#svg-copy' /></svg>\n            </div>\n        `,
                undo: `\n            <div class='action disabled'\n                data-command='"undo"'\n                data-tooltip='${ l('tooltip.undo') }'>\n                <svg><use xlink:href='#svg-undo' /></svg>\n            </div>\n        `,
                redo: `\n            <div class='action disabled'\n                data-command='"redo"'\n                data-tooltip='${ l('tooltip.redo') }'>\n                <svg><use xlink:href='#svg-redo' /></svg>\n            </div>\n        `
            };
        return Pg.length > 0 && (Ng += `\n            <div class='right'>\n                ${ Pg.map(Hg => Qg[Hg]).join('') }\n            </div>\n        `), '<div class=\'keyboard-toolbar\' role=\'toolbar\'>' + Ng + '</div>';
    }

    function _Hg(Ig, Jg, Kg) {
        var Lg, Mg;
        for (const Ng of Jg) {
            let Og;
            Ng.getAttribute('data-latex') ? Og = Fg(Ng.getAttribute('data-latex').replace(/&quot;/g, '"'), () => '\\placeholder{}') : Ng.getAttribute('data-insert') && '' === Ng.innerHTML ? Og = Fg(Ng.getAttribute('data-insert').replace(/&quot;/g, '"'), () => '\\placeholder{}') : Ng.getAttribute('data-content') && (Og = Ng.getAttribute('data-content').replace(/&quot;/g, '"')), Ng.getAttribute('data-aside') && (Og = (null != Og ? Og : '') + '<aside>' + Ng.getAttribute('data-aside').replace(/&quot;/g, '"') + '</aside>'), void 0 !== Og && (Ng.innerHTML = Ig.options.createHTML(Og)), Ng.getAttribute('data-classes') && Ng.classList.add(Ng.getAttribute('data-classes'));
            const Pg = null === (Lg = Ng.getAttribute('data-insert')) || void 0 === Lg ? void 0 : Lg.replace(/&quot;/g, '"');
            let Qg;
            Pg && Bg[Pg] && (Ng.dataset.shifted = Bg[Pg][0], Ng.dataset.shiftedCommand = JSON.stringify([
                'insertAndUnshiftKeyboardLayer',
                Bg[Pg][1]
            ]));
            const Rg = Ng.getAttribute('data-command');
            if (Rg)
                if (/^[a-zA-Z]+$/.test(Rg))
                    Qg = Rg;
                else
                    try {
                        Qg = JSON.parse(Rg);
                    } catch (Ig) {}
            else
                Qg = Ng.getAttribute('data-insert') ? [
                    'insert',
                    Ng.getAttribute('data-insert'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : Ng.getAttribute('data-latex') ? [
                    'insert',
                    Ng.getAttribute('data-latex'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : [
                    'typedText',
                    null !== (Mg = Ng.getAttribute('data-key')) && void 0 !== Mg ? Mg : Ng.textContent,
                    {
                        focus: !0,
                        feedback: !0,
                        simulateKeystroke: !0
                    }
                ];
            if (Qg) {
                Kg && (Qg = [
                    Kg,
                    Qg
                ]);
                let Sg = Qg;
                const Tg = Ng.getAttribute('data-alt-keys');
                Tg && _Dg[Tg] && (Sg = {
                    default: Qg,
                    pressAndHoldStart: [
                        'showAlternateKeys',
                        Tg
                    ],
                    pressAndHoldEnd: 'hideAlternateKeys'
                }), wg(Sg => Ig.executeCommand(Sg), Ng, Sg);
            }
        }
    }

    function _Ig(Jg, Kg) {
        var Lg, Mg, Ng, Og;
        const Pg = {
            qwerty: {
                'lower-1': 'qwertyuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^zxcvbnm~',
                'upper-1': 'QWERTYUIOP',
                'upper-2': ' ASDFGHJKL ',
                'upper-3': '^ZXCVBNM~',
                'numpad-1': '789/',
                'numpad-2': '456*',
                'numpad-3': '123-',
                'numpad-4': '0.=+'
            },
            azerty: {
                'lower-1': 'azertyuiop',
                'lower-2': 'qsdfghjklm',
                'lower-3': '^ wxcvbn ~',
                'upper-1': 'AZERTYUIOP',
                'upper-2': 'QSDFGHJKLM',
                'upper-3': '^ WXCVBN ~'
            },
            qwertz: {
                'lower-1': 'qwertzuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^yxcvbnm~',
                'upper-1': 'QWERTZUIOP',
                'upper-2': ' ASDFGHJKL',
                'upper-3': '^YXCVBNM~'
            },
            dvorak: {
                'lower-1': '^  pyfgcrl ',
                'lower-2': 'aoeuidhtns',
                'lower-3': 'qjkxbmwvz~',
                'upper-1': '^  PYFGCRL ',
                'upper-2': 'AOEUIDHTNS',
                'upper-3': 'QJKXBMWVZ~'
            },
            colemak: {
                'lower-1': ' qwfpgjluy ',
                'lower-2': 'arstdhneio',
                'lower-3': '^zxcvbkm~',
                'upper-1': ' QWFPGNLUY ',
                'upper-2': 'ARSTDHNEIO',
                'upper-3': '^ZXCVBKM~'
            }
        };
        let Qg = Jg.virtualKeyboardLayout;
        if ('auto' === Qg) {
            const Rg = Ne();
            Rg && (Qg = Rg.virtualLayout), Qg && 'auto' !== Qg || (Qg = null !== (Lg = {
                fr: 'azerty',
                be: 'azerty',
                al: 'qwertz',
                ba: 'qwertz',
                cz: 'qwertz',
                de: 'qwertz',
                hu: 'qwertz',
                sk: 'qwertz',
                ch: 'qwertz'
            } [k.locale.slice(0, 2)]) && void 0 !== Lg ? Lg : 'qwerty');
        }
        const Rg = null !== (Mg = Pg[Qg]) && void 0 !== Mg ? Mg : Pg.qwerty;
        let Sg, Tg = Kg;
        Tg = Tg.replace(/<arrows\/>/g, '\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToPreviousChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-left" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToPreviousChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-left\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToNextChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-right" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToNextChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-right\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","commit"]\'>\n        <svg class="svg-glyph"><use xlink:href=\'#svg-commit\' /></svg></li>');
        let Ug = Tg.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        for (; Ug;) {
            Sg = '';
            const Vg = Ug[2].match(/[a-zA-Z][a-zA-Z\d-]*=(['"])(.*?)\1/g),
                Wg = {};
            if (Vg)
                for (const Xg of Vg) {
                    const Yg = Xg.match(/([a-zA-Z][a-zA-Z\d-]*)=(['"])(.*?)\2/);
                    Yg && (Wg[Yg[1]] = Yg[3]);
                }
            let Xg = Rg[Wg.name];
            if (Xg || (Xg = Pg.qwerty[Wg.name]), Xg)
                for (const Yg of Xg) {
                    let Zg = null !== (Ng = Wg.class) && void 0 !== Ng ? Ng : '';
                    Zg && (Zg = ` ${ Zg }`), '~' === Yg ? (Sg += '<li class=\'action font-glyph bottom right ', Sg += Xg.length - (Xg.match(/ /g) || []).length / 2 == 10 ? 'w10' : 'w15', Sg += '\' data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                        data-shifted-command=\'"deleteAll"\'\n                        data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                        ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>') : ' ' === Yg ? Sg += '<li class=\'separator w5\'></li>' : '^' === Yg ? Sg += '<li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'' + Wg['shift-layer'] + '\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>' : '/' === Yg ? Sg += '<li class=\'keycap' + Zg + '\' data-alt-keys=\'/\' data-insert=\'\\frac{#@}{#?}\'>&divide;</li>' : '*' === Yg ? Sg += '<li class=\'keycap' + Zg + '\' data-alt-keys=\'*\' data-insert=\'\\times \'>&times;</li>' : '-' === Yg ? Sg += '<li class=\'keycap' + Zg + '\' data-alt-keys=\'-\' data-key=\'-\'>&#x2212;</li>' : '.' === Yg ? Sg += '<li class=\'keycap' + Zg + '\' data-alt-keys=\'.\' data-command=\'"insertDecimalSeparator"\'>' + (null !== (Og = Jg.decimalSeparator) && void 0 !== Og ? Og : '.') + '</li>' : Zg.includes('tt') ? Sg += `<li class='keycap${ Zg }' data-alt-keys='${ Yg }' data-command='["typedText","${ Yg }",{"mode":"command", "focus":true, "feedback":true}]'>${ Yg }</li>` : Sg += '<li class=\'keycap' + Zg + '\' data-alt-keys=\'' + Yg + '\'>' + Yg + '</li>';
                }
            Tg = Tg.replace(new RegExp(Ug[1] + Ug[2] + Ug[3]), Sg), Ug = Tg.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        }
        return Tg;
    }

    function _Jg(Kg) {
        yg();
        const Lg = Kg.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
        if (Lg)
            for (const Mg of Lg) {
                const Ng = Mg.getAttribute('data-unshifted-content');
                Ng && (Mg.innerHTML = Kg.options.createHTML(Ng), Mg.dataset.unshiftedContent = '');
                const Og = Mg.getAttribute('data-unshifted-command');
                Og && (Mg.dataset.command = Og, Mg.dataset.unshiftedCommand = '');
            }
        return !1;
    }

    function _Kg(Lg) {
        return Object.keys(Lg).map(rc => `${ rc } {${ function (Mg) {
            return 'string' == typeof Mg ? Mg : Object.entries(Mg).map(([Ng, Og]) => `${ Ng }:${ Og } !important`).join(';');
        }(Lg[rc]) }}`).join('');
    }

    function Lg(Mg, Ng) {
        'lower-command' !== Ng && 'upper-command' !== Ng && 'symbols-command' !== Ng && Mg.executeCommand('complete'), _Mg(Mg), yg(), _Jg(Mg);
        const Og = null == Mg ? void 0 : Mg.element.querySelectorAll('.keyboard-layer');
        let Pg = !1;
        for (const Qg of Og)
            if (Qg.dataset.layer === Ng) {
                Pg = !0;
                break;
            }
        if (Pg)
            for (const Rg of Og)
                Rg.dataset.layer === Ng ? Rg.classList.add('is-visible') : Rg.classList.remove('is-visible');
        return Qg.focusMathfield(), !0;
    }

    function _Mg(Ng, Og = '') {
        const Pg = Ng.options.virtualKeyboardContainer;
        if (!Pg)
            return !1;
        if (Ng.element ? Ng.element.classList.add('is-visible') : Ng.buildAndAttachElement(Og), !Ng.visible) {
            const Qg = _Kh();
            Qg.visibleVirtualKeyboard && _Ng(Qg.visibleVirtualKeyboard), Qg.visibleVirtualKeyboard = Ng;
            const Rg = Pg.style.paddingBottom;
            Ng.originalContainerBottomPadding = Rg, Pg.style.paddingBottom = Rg ? `calc(${ Rg } + var(--keyboard-height, 276px) - 1px)` : 'calc(var(--keyboard-height, 276px) - 1px)';
        }
        return setTimeout(() => {
            var Qg;
            null === (Qg = Ng.element) || void 0 === Qg || Qg.classList.add('is-visible'), Ng.focusMathfield();
        }, 1), Ng.visible = !0, Ng.stateChanged(), !1;
    }

    function _Ng(Og) {
        var Pg, Qg, Rg;
        const Sg = Og.options.virtualKeyboardContainer;
        return !!Sg && (Og.element && (_Kh().visibleVirtualKeyboard = void 0, Og.disable(), yg(), Og.visible = !1, null === (Pg = Og.coreStylesheet) || void 0 === Pg || Pg.release(), Og.coreStylesheet = null, null === (Qg = Og.virtualKeyboardStylesheet) || void 0 === Qg || Qg.release(), Og.virtualKeyboardStylesheet = null, null === (Rg = Og._element) || void 0 === Rg || Rg.remove(), Og._element = void 0, null !== Og.originalContainerBottomPadding && (Sg.style.paddingBottom = Og.originalContainerBottomPadding)), Og.visible = !1, Og.stateChanged(), !1);
    }

    function Og(Pg, Qg, Rg) {
        'function' == typeof Qg && (Rg = Qg, Qg = 1 / 0), void 0 === Qg && (Qg = 1 / 0);
        let Sg = Pg.position,
            Tg = !1,
            Ug = '';
        for (; !Tg;) {
            const Vg = Pg.at(Sg);
            Tg = 0 === Qg || void 0 === Vg || 'math' !== Vg.mode || !(/mord|textord|mpunct/.test(Vg.type) || 'mop' === Vg.type && /[a-zA-Z]+/.test(Vg.value)) || !Vg.hasEmptyBranch('superscript') || !Vg.hasEmptyBranch('subscript') || 'function' == typeof Rg && !Rg(Vg), Tg || (Vg.mode = 'text', Vg.command = Vg.value, Vg.verbatimLatex = void 0, Ug += Vg.value), Sg -= 1, Qg -= 1;
        }
        Ze(Pg, {
            data: Ug,
            inputType: 'insertText'
        });
    }

    function Pg(Qg, Rg, Sg) {
        'function' == typeof Rg && (Sg = Rg, Rg = 1 / 0), void 0 === Rg && (Rg = 1 / 0);
        let Tg = Qg.position,
            Ug = !1;
        const Vg = [];
        for (; !Ug;) {
            const Wg = Qg.at(Tg);
            Ug = 0 === Rg || !Wg || Wg.isFirstSibling || 'text' !== Wg.mode || ' ' === Wg.value || Sg && !Sg(Wg), Ug || (Vg.push(Wg.serialize({
                defaultMode: 'math'
            })), Wg.mode = 'math'), Tg -= 1, Rg -= 1;
        }
        _Qg(Qg), Ze(Qg, {
            data: ec(Vg),
            inputType: 'insertText'
        });
    }

    function _Qg(Rg) {
        var Sg;
        let Tg = Rg.position - 1;
        for (; Tg >= 0 && 'math' === (null === (Sg = Rg.at(Tg)) || void 0 === Sg ? void 0 : Sg.mode);)
            Tg -= 1;
        if (!(Tg < 0) && 'text' === Rg.at(Tg).mode && ' ' === Rg.at(Tg).value && 'math' === Rg.at(Tg - 1).mode) {
            Rg.at(Tg - 1).parent.removeChild(Rg.at(Tg - 1));
            const Ug = Rg.suppressChangeNotifications;
            Rg.suppressChangeNotifications = !0, Rg.position -= 1, Rg.suppressChangeNotifications = Ug, Ze(Rg, {
                inputType: 'deleteContent'
            });
        }
    }
    tf({
        showAlternateKeys: function(Rg, Sg) {
            var Tg;
            f();
            const Ug = _Dg[Sg],
                Vg = document.createElement('div');
            Vg.setAttribute('aria-hidden', 'true'), Vg.className = 'ML__keyboard alternate-keys' + (Rg.element.classList.contains('material') ? ' material' : ''), Vg.id = 'mathlive-alternate-keys-panel', Ug.length >= 14 ? Vg.style.width = '236px' : Ug.length >= 7 ? Vg.style.width = '286px' : 4 === Ug.length || 2 === Ug.length ? Vg.style.width = '146px' : 1 === Ug.length ? Vg.style.width = '86px' : Vg.style.width = '146px', Vg.style.height = 'auto';
            let Wg = '';
            for (const Xg of Ug)
                Wg += '<li', 'string' == typeof Xg ? Wg += ' data-latex="' + Xg.replace(/"/g, '&quot;') + '"' : (Xg.latex && (Wg += ' data-latex="' + Xg.latex.replace(/"/g, '&quot;') + '"'), Xg.content && (Wg += ' data-content="' + Xg.content.replace(/"/g, '&quot;') + '"'), Xg.insert && (Wg += ' data-insert="' + Xg.insert.replace(/"/g, '&quot;') + '"'), Xg.command && ('string' == typeof Xg.command ? Wg += ` data-command="${ Xg.command.replace(/"/g, '&quot;') }"` : Wg += ' data-command=\'' + JSON.stringify(Xg.command).replace(/"/g, '&quot;') + '\''), Xg.aside && (Wg += ` data-aside="${ Xg.aside.replace(/"/g, '&quot;') }"`), Xg.class && (Wg += ` data-classes="${ Xg.class }"`)), Wg += '>', Wg += 'string' == typeof Xg ? Xg : null !== (Tg = Xg.label) && void 0 !== Tg ? Tg : '', Wg += '</li>';
            Wg = '<ul>' + Wg + '</ul>', Vg.innerHTML = Xg.options.createHTML(Wg), _Hg(Xg, [...Vg.querySelectorAll('li')], 'performAlternateKeys'), ng.scrim || (ng.scrim = new ng()), ng.scrim.open({
                root: Xg.options.virtualKeyboardContainer,
                child: Vg
            });
            const Yg = null == Xg ? void 0 : Xg.element.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' + Sg + '"]'),
                Zg = null == Yg ? void 0 : Yg.getBoundingClientRect();
            if (Zg) {
                Zg.top - Vg.clientHeight < 0 && (Vg.style.width = 'auto', Ug.length <= 6 ? Vg.style.height = '56px' : Ug.length <= 12 ? Vg.style.height = '108px' : Ug.length <= 18 ? Vg.style.height = '205px' : Vg.classList.add('compact'));
                const $g = (Zg.top - Vg.clientHeight + 5).toString() + 'px',
                    ah = Math.max(0, Math.min(window.innerWidth - Vg.offsetWidth, (Zg.left + Zg.right - Vg.offsetWidth) / 2)) + 'px';
                Vg.style.transform = 'translate(' + ah + ',' + $g + ')', Vg.classList.add('is-visible');
            }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), tf({
        shiftKeyboardLayer: function(Rg) {
            const Sg = null == Rg ? void 0 : Rg.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
            if (Sg)
                for (const Tg of Sg) {
                    if (Tg.dataset.unshiftedContent)
                        return !1;
                    let Ug = Tg.getAttribute('data-shifted');
                    if (Ug || /^[a-z]$/.test(Tg.innerHTML)) {
                        Tg.dataset.unshiftedContent = Tg.innerHTML, Ug || (Ug = Tg.innerHTML.toUpperCase()), Tg.innerHTML = Rg.options.createHTML(Ug);
                        const Vg = Tg.getAttribute('data-command');
                        if (Vg) {
                            Tg.dataset.unshiftedCommand = Vg;
                            const Wg = Tg.getAttribute('data-shifted-command');
                            if (Wg)
                                Tg.dataset.command = Wg;
                            else {
                                const Xg = JSON.parse(Vg);
                                d(Xg) && (Xg[1] = Xg[1].toUpperCase()), Tg.dataset.command = JSON.stringify(Xg);
                            }
                        }
                    }
                }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), tf({
        hideAlternateKeys: () => yg(),
        performAlternateKeys: function(Rg, Sg) {
            return yg(), Rg.executeCommand(Sg);
        },
        switchKeyboardLayer: (qc, rc) => Lg(qc, rc),
        unshiftKeyboardLayer: qc => _Jg(qc),
        insertAndUnshiftKeyboardLayer: function(Rg, Sg) {
            return Rg.executeCommand([
                'insert',
                Sg
            ]), _Jg(Rg), !0;
        }
    }, {
        target: 'virtual-keyboard'
    }), tf({
        toggleVirtualKeyboardAlt: function(Rg) {
            let Sg = !1;
            return (null == Rg ? void 0 : Rg.element) && (Sg = null == Rg ? void 0 : Rg.element.classList.contains('material'), Rg.disable()), _Mg(Rg, Sg ? '' : 'material'), !1;
        },
        toggleVirtualKeyboardShift: function(Rg) {
            var Sg, Tg;
            Rg.options.virtualKeyboardLayout = {
                qwerty: 'azerty',
                azerty: 'qwertz',
                qwertz: 'dvorak',
                dvorak: 'colemak',
                colemak: 'qwerty'
            } [Rg.options.virtualKeyboardLayout];
            const Ug = null !== (Tg = null === (Sg = null == Rg ? void 0 : Rg.element.querySelector('div.keyboard-layer.is-visible')) || void 0 === Sg ? void 0 : Sg.id) && void 0 !== Tg ? Tg : '';
            return Rg && Rg.disable(), _Mg(Rg), Ug && Lg(Rg, Ug), !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), tf({
        toggleVirtualKeyboard: (qc, rc) => function(Rg, Sg) {
            return Rg.visible ? _Ng(Rg) : _Mg(Rg, Sg), !1;
        }(qc, rc),
        hideVirtualKeyboard: qc => _Ng(qc),
        showVirtualKeyboard: (qc, rc) => _Mg(qc, rc),
        onUndoStateChanged: (qc, rc, c) => function(Rg, Sg, Tg) {
            var Ug;
            const Vg = null === (Ug = Rg.element) || void 0 === Ug ? void 0 : Ug.querySelector('.keyboard-toolbar');
            if (!Vg)
                return !1;
            const Wg = Vg.querySelector('[data-command=\'"undo"\']'),
                Xg = Vg.querySelector('[data-command=\'"redo"\']');
            return Xg && (Tg ? Xg.classList.remove('disabled') : Xg.classList.add('disabled')), Wg && (Sg ? Wg.classList.remove('disabled') : Wg.classList.add('disabled')), !1;
        }(qc, rc, c)
    }, {
        target: 'virtual-keyboard'
    });
    var Rg = '#mathlive-keystroke-caption-panel{--keystroke:#fff;--on-keystroke:#555;--keystroke-border:#f7f7f7;background:var(--secondary,hsl(var(--hue,212),19%,26%));border-color:var(--secondary-border,#e8e8e8);border-radius:6px;box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);display:flex;flex-direction:row-reverse;justify-content:center;padding:16px;position:absolute;text-align:center;visibility:hidden;z-index:1}@media (prefers-color-scheme:dark){body:not([theme=light]) #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}}body[theme=dark] #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}#mathlive-keystroke-caption-panel>span{fill:currentColor;background-color:var(--keystroke);border:2px solid var(--keystroke-border);border-radius:6px;color:var(--on-keystroke);font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:1em;margin:0 8px 0 0;min-width:14px;padding:4px}';
    let Sg, Tg = null,
        Ug = null;

    function Vg(Wg) {
        return Wg.keystrokeCaption || (Wg.keystrokeCaption = le('mathlive-keystroke-caption-panel'), void 0 === Sg && (Sg = Ee(Rg).toString(36)), Tg = Fe(null, Rg, Sg), Ug = Fe(null, We, Ee(We).toString(36))), Wg.keystrokeCaption;
    }

    function Wg(Xg) {
        if (!Xg)
            return null;
        if (Xg.length > 1)
            return null;
        const Yg = Xg[0];
        return Yg instanceof Ic && '(' === Yg.leftDelim && ')' === Yg.rightDelim ? Yg.removeBranch('body') : null;
    }

    function Xg(Yg) {
        if (Yg) {
            for (let Zg = 0; Yg[Zg]; Zg++) {
                const $g = Yg[Zg];
                if ($g instanceof Ic && '(' === $g.leftDelim) {
                    let ah = 0,
                        bh = 0,
                        ch = 0;
                    for (let dh = 0; $g.body[dh]; dh++)
                        'genfrac' === $g.body[dh].type && (ah++, bh = dh), ch++;
                    0 === ch && 1 === ah && (dh[Zg] = $g.body[bh]);
                }
            }
            for (const $g of Yg) {
                for (const ah of $g.branches)
                    if (!$g.hasEmptyBranch(ah)) {
                        Xg($g.branch(ah));
                        const bh = Wg($g.branch(ah));
                        bh && $g.setChildren(bh, ah);
                    }
                if ($g instanceof Vc)
                    for (const bh of $g.cells)
                        Xg(bh);
            }
        }
    }

    function Yg(Zg) {
        if (!Zg)
            return [];
        const $g = [];
        for (const ah of Zg) {
            for (const bh of ah.branches)
                if (!ah.hasEmptyBranch(bh)) {
                    const ch = Yg(ah.branch(bh));
                    $g.push(...ch);
                }
            ah instanceof Kc && $g.push(ah);
        }
        return $g;
    }

    function Zg($g) {
        return !!/^(mord|surd|msubsup|leftright|mop|mclose)$/.test($g.type) && !$g.isExtensibleSymbol && !$g.isFunction;
    }

    function $g(ah, bh, ch) {
        const dh = ah.at(ah.position),
            {
                parent: eh
            } = dh;
        let fh = eh instanceof Ic ? eh.leftDelim + eh.rightDelim : '';
        if ('\\lbrace\\rbrace' === fh && (fh = '{}'), '\\{\\}' === fh && (fh = '{}'), '\\lparen\\rparen' === fh && (fh = '()'), '{}' === fh && /\||\\vert|\\Vert|\\mvert|\\mid/.test(bh))
            return Qd.insert('math', ah, '\\,\\middle' + bh + '\\, ', {
                format: 'latex',
                style: ch
            }), !0;
        if ('{' !== bh && '\\{' !== bh || (bh = '\\lbrace'), '}' !== bh && '\\}' !== bh || (bh = '\\rbrace'), '[' === bh && (bh = '\\lbrack'), ']' === bh && (bh = '\\rbrack'), oc[bh]) {
            const gh = eh;
            if ('leftright' === gh.type && gh.firstChild === dh && ('?' === gh.leftDelim || '.' === gh.leftDelim))
                return gh.leftDelim = bh, gh.isDirty = !0, !0;
            if (!(eh instanceof Ic && '|' === eh.leftDelim)) {
                if (Qd.insert('math', ah, `\\left${ bh }\\right?`, {
                        format: 'latex',
                        style: ch
                    }), 'first' !== dh.lastSibling.type) {
                    const hh = ah.offsetOf(dh.lastSibling),
                        ih = ah.extractAtoms([
                            ah.position,
                            hh
                        ]);
                    ah.at(ah.position).body = ih, ah.position -= 1;
                }
                return !0;
            }
        }
        let gh = '';
        if (Object.keys(oc).forEach(ah => {
                bh === oc[ah] && (gh = ah);
            }), gh) {
            if (eh instanceof Ic && dh.isLastSibling)
                return eh.isDirty = !0, eh.rightDelim = bh, ah.position += 1, Ze(ah, {
                    data: bh,
                    inputType: 'insertText'
                }), !0;
            const hh = ah.offsetOf(dh.firstSibling);
            let ih;
            for (ih = ah.position; ih >= hh; ih--) {
                const jh = ah.at(ih);
                if (jh instanceof Ic && '?' === jh.rightDelim)
                    break;
            }
            const jh = ah.at(ih);
            if (ih >= hh && jh instanceof Ic)
                return jh.rightDelim = bh, jh.addChildren(ah.extractAtoms([
                    ih,
                    ah.position
                ]), dh.treeBranch), ah.position = ih, Ze(ah, {
                    data: bh,
                    inputType: 'insertText'
                }), !0;
            if (eh instanceof Ic && '?' === eh.rightDelim)
                return eh.isDirty = !0, eh.rightDelim = bh, eh.parent.addChildren(ah.extractAtoms([
                    ah.position,
                    ah.offsetOf(dh.lastSibling)
                ]), eh.treeBranch), ah.position = ah.offsetOf(eh), Ze(ah, {
                    data: bh,
                    inputType: 'insertText'
                }), !0;
            const kh = eh.parent;
            return !!(kh instanceof Ic && '?' === kh.rightDelim && ah.at(ah.position).isLastSibling) && (ah.position = ah.offsetOf(kh), $g(ah, bh, ch));
        }
        return !1;
    }

    function ah(bh, ch, dh) {
        var eh, fh, gh, hh;
        const {
            model: ih
        } = bh;
        ! function(jh) {
            var kh, lh;
            if (!jh)
                return;
            if ('Unidentified' === jh.key)
                return;
            if ('Dead' === jh.key)
                return;
            const mh = jh.shiftKey && jh.altKey ? 3 : jh.altKey ? 2 : jh.shiftKey ? 1 : 0;
            for (const nh of Ke)
                (null === (kh = nh.mapping[jh.code]) || void 0 === kh ? void 0 : kh[mh]) === jh.key ? nh.score += 1 : (null === (lh = nh.mapping[jh.code]) || void 0 === lh ? void 0 : lh[mh]) && (nh.score = 0);
            Ke.sort((jh, kh) => kh.score - jh.score);
        }(dh);
        const jh = Ne();
        if (bh.keyboardLayout !== jh.id && (bh.keyboardLayout = jh.id, bh._keybindings = void 0), clearTimeout(bh.inlineShortcutBufferFlushTimer), bh.inlineShortcutBufferFlushTimer = 0, function(kh, lh) {
                if (kh.options.readOnly || !kh.keystrokeCaptionVisible)
                    return;
                const mh = Vg(kh),
                    nh = kh.element.getBoundingClientRect();
                mh.style.left = `${ nh.left }px`, mh.style.top = nh.top - 64 + 'px', mh.innerHTML = kh.options.createHTML('<span>' + (_Se(lh) || lh) + '</span>' + mh.innerHTML), mh.style.visibility = 'visible', setTimeout(() => {
                    mh.childNodes.length > 0 && mh.childNodes[mh.childNodes.length - 1].remove(), 0 === mh.childNodes.length && (mh.style.visibility = 'hidden');
                }, 3000);
            }(bh, ch), dh.defaultPrevented)
            return bh.flushInlineShortcutBuffer(), !1;
        let kh, lh, mh = '';
        if (!bh.options.readOnly) {
            if ('math' === bh.mode && !dh.ctrlKey && !dh.metaKey)
                if ('[Backspace]' === ch)
                    bh.inlineShortcutBuffer.pop(), bh.flushInlineShortcutBuffer({
                        defer: !0
                    });
                else if (qg(dh)) {
                const nh = tg(dh),
                    oh = (null !== (fh = null === (eh = bh.inlineShortcutBuffer[bh.inlineShortcutBuffer.length - 1]) || void 0 === eh ? void 0 : eh.keystrokes) && void 0 !== fh ? fh : '') + nh;
                bh.inlineShortcutBuffer.push({
                    state: ih.getState(),
                    keystrokes: oh,
                    leftSiblings: _ch(bh)
                });
                let ph = 0,
                    qh = '';
                for (; !kh && ph < oh.length;) {
                    lh = bh.inlineShortcutBuffer.length - (oh.length - ph), qh = oh.slice(ph);
                    const rh = bh.inlineShortcutBuffer[lh].leftSiblings;
                    kh = Hd(rh, qh, bh.options.inlineShortcuts), !kh && /^[a-zA-Z][a-zA-Z0-9]+?([_\^][a-zA-Z0-9\*\+\-]+?)?$/.test(qh) && (kh = bh.options.onInlineShortcut(bh, qh)), ph += 1;
                }
                bh.flushInlineShortcutBuffer({
                    defer: !0
                });
            } else
                bh.flushInlineShortcutBuffer(), bh.snapshot();
            if (bh.options.smartMode) {
                const nh = bh.mode;
                kh ? bh.mode = 'math' : function(oh, ph, qh) {
                    if (oh.smartModeSuppressed)
                        return !1;
                    const {
                        model: rh
                    } = oh;
                    if (!rh.at(rh.position).isLastSibling)
                        return !1;
                    if (!qh || !qg(qh))
                        return !1;
                    const sh = tg(qh);
                    if (!rh.selectionIsCollapsed)
                        return !('text' !== oh.mode || !/[/_^]/.test(sh));
                    const th = function(uh) {
                        let vh = '',
                            wh = uh.position,
                            xh = !1;
                        for (; !xh;) {
                            const yh = uh.at(wh);
                            xh = !(yh && ('text' === yh.mode || 'math' === yh.mode && /mord|textord|mpunct/.test(yh.type))), xh || (vh = yh.value + vh), wh -= 1;
                        }
                        return vh;
                    }(rh) + sh;
                    if ('text' === oh.mode) {
                        if ('Esc' === ph || /[/\\]/.test(sh))
                            return !0;
                        if (/[\^_]/.test(sh))
                            return /(^|\s)[a-zA-Z][^_]$/.test(th) && Pg(rh, 1), !0;
                        const uh = {
                                ')': '(',
                                '}': '{',
                                ']': '['
                            } [sh],
                            {
                                parent: vh
                            } = rh.at(rh.position);
                        if (uh && vh instanceof Ic && vh.leftDelim === uh)
                            return !0;
                        if (/(^|[^a-zA-Z])(a|I) $/.test(th))
                            return !1;
                        if (/[$\u20ac\xa3\u20a4\u20ba\xa5\xa4\u0e3f\xa2\u20a1\u20a7\u20a8\u20b9\u20a9\u20b1]/u.test(sh))
                            return !0;
                        if (/(^|[^a-zA-Z'\u2019])[a-zA-Z] $/.test(th))
                            return Pg(rh, 1), !1;
                        if (/\D\.[^\d\s]$/.test(th)) {
                            Pg(rh, 1);
                            const wh = rh.at(rh.position);
                            return wh.value = '\u22C5', wh.style.variant = 'normal', wh.command = '\\cdot', wh.verbatimLatex = void 0, Ze(rh, {
                                data: '\\cdot',
                                inputType: 'insertText'
                            }), !0;
                        }
                        if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(th))
                            return Pg(rh, 1), !0;
                        if (/\.\d$/.test(th))
                            return Pg(rh, 1), !0;
                        if (/\([\d+\-.]$/.test(th))
                            return Pg(rh, 1), !0;
                        if (/\([a-z][,;]$/.test(th))
                            return Pg(rh, 2), !0;
                        if (/[\d+\-=><*|]$/.test(sh))
                            return _Qg(rh), !0;
                    } else {
                        if ('[Space]' === ph)
                            return Og(rh, void 0, oh => /[a-z][:,;.]$/.test(oh.value)), !0;
                        if (/[a-zA-Z]{3,}$/.test(th) && !/(dxd|abc|xyz|uvw)$/.test(th))
                            return Og(rh, void 0, oh => /[a-zA-Z]/.test(oh.value)), !0;
                        if (/(^|\W)(if)$/i.test(th))
                            return Og(rh, 1), !0;
                        if (/(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/u.test(th) && !/(\u03b1\u03b2\u03b3)$/.test(th))
                            return Og(rh, void 0, oh => /(:|,|;|.|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/u.test(oh.value)), !0;
                        if ('?' === sh)
                            return !0;
                        if ('.' === sh && !/[\d-+]\.$/.test(th))
                            return !0;
                    }
                    return !1;
                }(bh, ch, dh) && (bh.mode = {
                    math: 'text',
                    text: 'math'
                } [bh.mode], mh = ''), bh.mode !== nh && ((null === (gh = bh.host) || void 0 === gh ? void 0 : gh.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))) || (bh.mode = nh));
            }
        }
        if (!kh) {
            if (mh || (mh = function(nh, oh, ph) {
                    if (0 === nh.length)
                        return '';
                    const qh = He(Ge(ph));
                    for (let rh = nh.length - 1; rh >= 0; rh--)
                        if (nh[rh].key === qh && (!nh[rh].ifMode || nh[rh].ifMode === oh))
                            return nh[rh].command;
                    return '';
                }(bh.keybindings, bh.mode, ch)), !mh && ('[Enter]' === ch || '[Return]' === ch)) {
                let nh = !1;
                return Ye(ih, {
                    inputType: 'insertLineBreak'
                }) && (bh.host && (nh = !bh.host.dispatchEvent(new Event('change', {
                    bubbles: !0,
                    composed: !0
                }))), nh || dh.preventDefault && (dh.preventDefault(), dh.stopPropagation()), Ze(ih, {
                    inputType: 'insertLineBreak'
                })), nh;
            }
            if ('math' === bh.mode) {
                if ('[Space]' === ch) {
                    if (bh.flushInlineShortcutBuffer(), bh.options.mathModeSpace)
                        return bh.snapshot(), Qd.insert('math', ih, bh.options.mathModeSpace, {
                            format: 'latex'
                        }), mh = '', bh.dirty = !0, bh.scrollIntoView(), dh.preventDefault && (dh.preventDefault(), dh.stopPropagation()), !1;
                    const nh = ih.at(ih.position + 1),
                        oh = ih.at(ih.position - 1);
                    'text' !== (null == nh ? void 0 : nh.mode) && 'text' !== (null == oh ? void 0 : oh.mode) || (bh.snapshot(), Qd.insert('text', ih, ' '), bh.dirty = !0);
                }
                (null === (hh = ih.at(ih.position)) || void 0 === hh ? void 0 : hh.isDigit()) && ',' === bh.options.decimalSeparator && ',' === tg(dh) && (mh = 'insertDecimalSeparator');
            }
        }
        if (!kh && !mh)
            return !0;
        const nh = ih.at(Math.max(ih.position, ih.anchor)),
            {
                parent: oh
            } = nh;
        if ('moveAfterParent' === mh && 'leftright' === (null == oh ? void 0 : oh.type) && nh.isLastSibling && bh.options.smartFence && $g(ih, '.', bh.style) && (mh = '', _pf(bh)), mh)
            bh.executeCommand(mh);
        else if (kh) {
            bh.keyboardDelegate.cancelComposition();
            const ph = {
                ...ih.at(ih.position).computedStyle,
                ...bh.style
            };
            if (!/^\\({|}|\[|]|@|#|\$|%|&|\^|_|backslash)$/.test(kh)) {
                const qh = bh.mode;
                Qd.insert(bh.mode, ih, tg(dh), {
                    suppressChangeNotifications: !0,
                    style: ph
                }), bh.snapshot(), ih.setState(bh.inlineShortcutBuffer[lh].state), bh.mode = qh;
            }
            ih.deferNotifications({
                content: !0,
                selection: !0,
                data: null != kh ? kh : null,
                type: 'insertText'
            }, () => (Qd.insert(bh.mode, ih, kh, {
                format: 'latex',
                style: ph
            }), _Qg(bh.model), kh.endsWith(' ') && (bh.mode = 'text', Qd.insert('text', ih, ' ', {
                style: ph
            })), !0)), bh.snapshot(), bh.dirty = !0, ih.announce('replacement');
        }
        return bh.scrollIntoView(), dh.preventDefault && dh.preventDefault(), !1;
    }

    function bh(ch, dh, eh) {
        var fh;
        const {
            model: gh
        } = ch;
        if (ch.options.readOnly)
            return void gh.announce('plonk');
        if ((eh = null != eh ? eh : {}).focus && ch.focus(), eh.feedback && (ch.options.keypressVibration && h() && navigator.vibrate(3), ch.playSound('keypress')), 'string' == typeof eh.mode && ch.mode !== eh.mode && ch.switchMode(eh.mode), eh.simulateKeystroke) {
            const hh = dh.charAt(0),
                ih = new KeyboardEvent('keypress', {
                    key: hh
                });
            if (!ah(ch, hh, ih))
                return;
        }
        const hh = gh.at(gh.position),
            ih = {
                ...hh.computedStyle,
                ...ch.style
            };
        gh.selectionIsCollapsed || (gh.deleteAtoms(Gd(gh.selection)), ch.snapshot());
        const jh = ac(dh);
        if ('latex' === ch.mode)
            gh.deferNotifications({
                content: !0,
                selection: !0,
                data: dh,
                type: 'insertText'
            }, () => {
                bf(ch);
                for (const kh of jh)
                    Qd.insert('latex', gh, kh);
                cf(kh);
            });
        else if ('text' === ch.mode)
            for (const kh of jh)
                Qd.insert('text', gh, kh, {
                    style: ih
                });
        else if ('math' === kh.mode)
            for (const lh of jh) {
                let mh = {
                    '^': 'moveToSuperscript',
                    _: 'moveToSubscript',
                    ' ': 'moveAfterParent'
                } [lh];
                ' ' === lh && kh.options.mathModeSpace && (mh = [
                    'insert',
                    kh.options.mathModeSpace
                ]), mh ? kh.executeCommand(mh) : /\d/.test(lh) && kh.options.smartSuperscript && 'superscript' === hh.treeBranch && 'mop' !== (null === (fh = hh.parent) || void 0 === fh ? void 0 : fh.type) && hh.hasNoSiblings ? (Qd.insert('math', gh, lh, {
                    style: ih
                }), ig(gh)) : ('mord' === hh.type && /[a-zA-Z]/.test(hh.value) && /[a-zA-Z]/.test(lh) && (hh.style.variant && (ih.variant = hh.style.variant), hh.style.variantStyle && (ih.variantStyle = hh.style.variantStyle)), Qd.insert('math', gh, lh, {
                    style: ih
                }));
            }
        ch.snapshotAndCoalesce(), ch.dirty = !0, ch.scrollIntoView();
    }

    function _ch(dh) {
        const eh = dh.model,
            fh = [];
        let gh = eh.at(Math.min(eh.position, eh.anchor));
        for (;
            'first' !== gh.type;)
            fh.push(gh), gh = gh.leftSibling;
        return fh;
    }

    function dh(eh, fh) {
        var gh, hh, ih, jh, kh, lh;
        const mh = {};
        'string' == typeof fh.color && (mh.verbatimColor = fh.color, mh.color = null !== (gh = eh.colorMap(fh.color)) && void 0 !== gh ? gh : 'none'), 'string' == typeof fh.backgroundColor && (mh.verbatimBackgroundColor = fh.backgroundColor, mh.backgroundColor = null !== (hh = eh.backgroundColorMap(fh.backgroundColor)) && void 0 !== hh ? hh : 'none'), 'string' == typeof fh.fontFamily && (mh.fontFamily = fh.fontFamily), 'string' == typeof fh.series && (mh.fontSeries = fh.series), 'string' == typeof fh.fontSeries && (mh.fontSeries = fh.fontSeries.toLowerCase()), mh.fontSeries && (mh.fontSeries = null !== (ih = {
            bold: 'b',
            medium: 'm',
            normal: 'm'
        } [mh.fontSeries]) && void 0 !== ih ? ih : mh.fontSeries), 'string' == typeof fh.shape && (mh.fontShape = fh.shape), 'string' == typeof fh.fontShape && (mh.fontShape = fh.fontShape.toLowerCase()), mh.fontShape && (mh.fontShape = null !== (jh = {
            italic: 'it',
            up: 'n',
            upright: 'n',
            normal: 'n'
        } [mh.fontShape]) && void 0 !== jh ? jh : mh.fontShape);
        const nh = null !== (kh = fh.size) && void 0 !== kh ? kh : fh.fontSize;
        return 'number' == typeof nh ? mh.fontSize = Math.max(1, Math.min(10, nh)) : 'string' == typeof nh && (mh.fontSize = null !== (lh = {
            size1: 1,
            size2: 2,
            size3: 3,
            size4: 4,
            size5: 5,
            size6: 6,
            size7: 7,
            size8: 8,
            size9: 9,
            size10: 10
        } [nh.toLowerCase()]) && void 0 !== lh ? lh : {
            tiny: 1,
            scriptsize: 2,
            footnotesize: 3,
            small: 4,
            normal: 5,
            normalsize: 5,
            large: 6,
            Large: 7,
            LARGE: 8,
            huge: 9,
            Huge: 10
        } [nh]), mh;
    }
    new class extends Qd {
        onPaste(eh, fh) {
            if (!fh.clipboardData)
                return !1;
            if (!Ye(eh.model, {
                    dataTransfer: fh.clipboardData,
                    inputType: 'insertFromPaste'
                }))
                return !1;
            let gh = '',
                hh = 'auto',
                ih = fh.clipboardData.getData('application/json+mathlive');
            if (ih)
                try {
                    const jh = JSON.parse(ih);
                    if (jh && Array.isArray(jh)) {
                        eh.snapshot();
                        const kh = _xd(jh, eh),
                            {
                                model: lh
                            } = eh;
                        lh.selectionIsCollapsed || lh.deleteAtoms(Gd(lh.selection));
                        const mh = lh.at(lh.position);
                        if (mh.parent instanceof Vc) {
                            const nh = [];
                            let oh = [];
                            'first' === kh[0].type && kh.shift(), 'first' === kh[kh.length - 1].type && kh.pop();
                            for (const ph of kh)
                                'first' === ph.type && oh.length > 0 ? (nh.push(oh), oh = [ph]) : oh.push(ph);
                            oh.length > 0 && nh.push(oh);
                            let qh = Number(mh.treeBranch[0]),
                                rh = Number(mh.treeBranch[1]);
                            const sh = mh.parent.maxColumns;
                            for (; mh.parent.colCount - rh < nh.length && mh.parent.colCount < sh;)
                                mh.parent.addColumn();
                            mh.parent.addChildrenAfter(nh[0], mh);
                            for (let th = 1; th < nh.length; th++)
                                rh++, rh >= sh && (rh = 0, mh.parent.addRowAfter(qh), qh++), mh.parent.setCell(qh, rh, nh[th]);
                        } else
                            mh.parent.addChildrenAfter(kh.filter(eh => 'first' !== eh.type), mh);
                        return lh.position = lh.offsetOf(kh[kh.length - 1]), Ze(lh, {
                            inputType: 'insertFromPaste'
                        }), _pf(eh), fh.preventDefault(), fh.stopPropagation(), !0;
                    }
                } catch {}
            if (ih = fh.clipboardData.getData('application/json'), ih && eh.computeEngine)
                try {
                    const jh = JSON.parse(ih);
                    if ('object' == typeof jh && 'latex' in jh && jh.latex && (gh = jh.latex), !gh) {
                        const kh = eh.computeEngine.box(jh);
                        kh && !kh.has('Error') && (gh = kh.latex);
                    }
                    gh || (hh = 'latex');
                } catch {}
            if (gh || (gh = fh.clipboardData.getData('application/x-latex'), gh && (hh = 'latex')), gh || (gh = fh.clipboardData.getData('text/plain')), gh) {
                let jh;
                return eh.snapshot(), [kh, lh] = _Od(lh), 'auto' === hh && kh && (hh = 'latex'), this.insert(eh.model, lh, {
                    format: hh
                }) && _pf(eh), fh.preventDefault(), fh.stopPropagation(), !0;
            }
            return !1;
        }
        insert(eh, fh, gh) {
            var hh, ih;
            const jh = 'string' == typeof fh ? fh : null !== (ih = null === (hh = eh.mathfield.computeEngine) || void 0 === hh ? void 0 : hh.box(fh).latex) && void 0 !== ih ? ih : '';
            if (!gh.suppressChangeNotifications && !Ye(eh, {
                    data: jh,
                    inputType: 'insertText'
                }))
                return !1;
            if (gh.insertionMode || (gh.insertionMode = 'replaceSelection'), gh.selectionMode || (gh.selectionMode = 'placeholder'), gh.format || (gh.format = 'auto'), eh.mathfield.smartFence) {
                if (eh.selectionIsCollapsed && 'string' == typeof fh && $g(eh, fh, gh.style))
                    return !0;
            } else if ('replaceAll' !== gh.insertionMode) {
                const {
                    parent: kh
                } = eh.at(eh.position);
                if (kh instanceof Ic && '?' === kh.rightDelim && eh.at(eh.position).isLastSibling && 'string' == typeof fh && /^[)}\]|]$/.test(fh))
                    return kh.isDirty = !0, kh.rightDelim = fh, eh.position += 1, Xe(eh), Ze(eh, {
                        data: jh,
                        inputType: 'insertText'
                    }), !0;
            }
            const {
                suppressChangeNotifications: kh
            } = eh;
            gh.suppressChangeNotifications && (eh.suppressChangeNotifications = !0);
            const lh = eh.suppressChangeNotifications;
            eh.suppressChangeNotifications = !0;
            const mh = {};
            if (mh[0] = 'replaceAll' === gh.insertionMode ? '' : eh.getValue(eh.selection, 'latex-unstyled'), mh['?'] = '\\placeholder{}', mh['@'] = mh['?'], 'replaceSelection' !== gh.insertionMode || eh.selectionIsCollapsed ? 'replaceAll' === gh.insertionMode ? (eh.root.setChildren([], 'body'), eh.position = 0) : 'insertBefore' === gh.insertionMode ? eh.collapseSelection('backward') : 'insertAfter' === gh.insertionMode && eh.collapseSelection('forward') : eh.deleteAtoms(Gd(eh.selection)), eh.at(eh.position).isLastSibling || 'placeholder' !== eh.at(eh.position + 1).type ? 'placeholder' === eh.at(eh.position).type && eh.deleteAtoms([
                    eh.position - 1,
                    eh.position
                ]) : eh.deleteAtoms([
                    eh.position,
                    eh.position + 1
                ]), mh[0])
                mh['@'] = mh[0];
            else if ('string' == typeof fh && /(^|[^\\])#@/.test(fh)) {
                const nh = function(oh) {
                    let ph = oh.at(oh.position);
                    if ('text' === ph.mode) {
                        for (; !ph.isFirstSibling && 'text' === ph.mode;)
                            ph = ph.leftSibling;
                        return oh.offsetOf(ph);
                    }
                    const qh = ph,
                        rh = [];
                    for (; !ph.isFirstSibling && (Zg(ph) || rh.length > 0);)
                        'mclose' === ph.type && rh.unshift(ph.value), 'mopen' === ph.type && rh.length > 0 && ph.value === pc[rh[0]] && rh.shift(), ph = ph.leftSibling;
                    return qh === ph ? -1 : oh.offsetOf(ph);
                }(eh);
                nh >= 0 && (mh['@'] = eh.getValue(nh, eh.position, 'latex-unstyled'), eh.deleteAtoms([
                    nh,
                    eh.position
                ]));
            }
            mh[0] || (mh[0] = mh['?']);
            let nh = !1;
            const [oh, ph] = function(qh, rh, sh, th) {
                var uh;
                let vh, wh = [];
                if ('string' != typeof rh || 'math-json' === th.format) {
                    if (!qh.mathfield.computeEngine)
                        return [
                            'math-json',
                            []
                        ];
                    [xh, yh] = [
                        'latex',
                        qh.mathfield.computeEngine.box(yh).latex
                    ], wh = _Qc(yh, qh.mathfield, {
                        parseMode: 'math'
                    });
                } else
                    'string' == typeof rh && 'ascii-math' === th.format ? ([xh, yh] = Jd(yh, {
                        format: 'ascii-math',
                        inlineShortcuts: qh.mathfield.options.inlineShortcuts
                    }), wh = _Qc(yh, qh.mathfield, {
                        parseMode: 'math'
                    }), 'latex' !== xh && qh.options.removeExtraneousParentheses && Xg(wh)) : ('auto' === th.format || (null === (uh = th.format) || void 0 === uh ? void 0 : uh.startsWith('latex'))) && ('auto' === th.format && ([zh, Ah] = Jd(Ah, {
                        format: 'auto',
                        inlineShortcuts: qh.mathfield.options.inlineShortcuts
                    })), 'latex' === th.format && ([, Bh] = _Od(Bh)), wh = _Qc(Bh, qh.mathfield, {
                        parseMode: 'math',
                        args: qh => (nh = !0, mh[qh])
                    }), 'latex' !== th.format && qh.options.removeExtraneousParentheses && Xg(wh));
                return cg(wh, th.style), [
                    null != vh ? vh : 'latex',
                    wh
                ];
            }(eh, fh, 0, gh);
            if (!ph)
                return !1;
            const qh = Yg(ph),
                rh = qh.filter(fh => fh.placeholderId && !eh.mathfield.placeholders.has(fh.placeholderId)),
                sh = qh.map(eh => eh.placeholderId);
            [...eh.mathfield.placeholders.keys()].filter(eh => !sh.includes(eh)).forEach(fh => {
                var th;
                eh.mathfield.placeholders.has(fh) && (null === (th = eh.mathfield.placeholders.get(fh)) || void 0 === th || th.field.remove(), eh.mathfield.placeholders.delete(fh));
            }), rh.forEach(fh => {
                var th, uh;
                let vh = eh.mathfield.options.virtualKeyboardMode;
                'manual' === vh && (vh = 'onfocus');
                const wh = new _yh({
                        ...eh.mathfield.options,
                        virtualKeyboardMode: vh,
                        readOnly: !1
                    }),
                    xh = fh.defaultValue ? kc.serialize(fh.defaultValue, {
                        defaultMode: 'math'
                    }) : '';
                wh.value = xh, wh.addEventListener('input', () => {
                    ! function(yh, zh) {
                        !yh.suppressChangeNotifications && yh.mathfield.host && (yh.suppressChangeNotifications = !0, yh.mathfield.host.dispatchEvent(new CustomEvent('placeholder-change', {
                            detail: {
                                placeholderId: zh
                            },
                            bubbles: !0,
                            composed: !0
                        })), yh.suppressChangeNotifications = !1);
                    }(eh, fh.placeholderId), setTimeout(() => _pf(eh.mathfield));
                }), null === (uh = null === (th = eh.mathfield.element) || void 0 === th ? void 0 : th.querySelector('.ML__placeholdercontainer')) || void 0 === uh || uh.appendChild(wh), eh.mathfield.placeholders.set(fh.placeholderId, {
                    atom: fh,
                    field: wh
                });
            });
            const {
                parent: th
            } = eh.at(eh.position);
            if ('latex' !== oh && eh.options.removeExtraneousParentheses && th instanceof Ic && '(' === th.leftDelim && th.hasEmptyBranch('body') && 1 === ph.length && 'genfrac' === ph[0].type) {
                const uh = th.parent,
                    vh = th.treeBranch;
                uh.removeChild(th), uh.setChildren(ph, vh);
            }
            const uh = th.hasEmptyBranch('body'),
                vh = eh.at(eh.position);
            vh.parent.addChildrenAfter(ph, vh), 'latex' === oh && 'string' == typeof fh && 'root' === th.type && uh && !nh && (th.verbatimLatex = fh), eh.suppressChangeNotifications = lh;
            const wh = ph[ph.length - 1];
            if ('placeholder' === gh.selectionMode) {
                const xh = ph.reduce((eh, xh) => [
                    ...eh,
                    ...xh.children.filter(eh => 'placeholder' === eh.type)
                ], []);
                if (xh.length > 0) {
                    const yh = eh.offsetOf(xh[0]);
                    eh.setSelection(yh - 1, yh), eh.announce('move');
                } else
                    wh && (eh.position = eh.offsetOf(wh));
            } else
                'before' === gh.selectionMode || ('after' === gh.selectionMode ? wh && (eh.position = eh.offsetOf(wh)) : 'item' === gh.selectionMode && eh.setSelection(eh.anchor, eh.offsetOf(wh)));
            return Ze(eh, {
                data: jh,
                inputType: 'insertText'
            }), eh.suppressChangeNotifications = kh, !0;
        }
        constructor() {
            super('math');
        }
    }(), tf({
        undo: qc => (_ef(qc, 'accept'), qc.undo(), !0),
        redo: qc => (_ef(qc, 'accept'), qc.redo(), !0),
        scrollIntoView: qc => (qc.scrollIntoView(), !0),
        scrollToStart: qc => (qc.field.scroll(0, 0), !0),
        scrollToEnd: qc => {
            const eh = qc.field.getBoundingClientRect();
            return qc.field.scroll(eh.left - window.scrollX, 0), !0;
        },
        enterLatexMode: qc => (qc.switchMode('latex'), !0),
        toggleKeystrokeCaption: function(eh) {
            return eh.keystrokeCaptionVisible = !eh.keystrokeCaptionVisible, eh.keystrokeCaptionVisible ? (eh.keystrokeCaption = Vg(eh), eh.keystrokeCaption.innerHTML = '') : eh.keystrokeCaption && (eh.keystrokeCaption.style.visibility = 'hidden'), !1;
        },
        plonk: qc => (qc.model.announce('plonk'), !0),
        switchMode: (qc, rc, c, d) => (qc.switchMode(rc, c, d), !0),
        insert: (qc, rc, c) => qc.insert(rc, c),
        typedText: (qc, rc, c) => (bh(qc, rc, c), !0),
        insertDecimalSeparator: qc => {
            if ('math' === qc.mode && ',' === qc.options.decimalSeparator) {
                const eh = qc.model;
                if (eh.at(Math.max(eh.position, eh.anchor)).isDigit())
                    return qc.snapshot(), qc.insert('{,}', {
                        format: 'latex'
                    }), !0;
            }
            return qc.insert('.'), !0;
        },
        commit: qc => (Ye(qc.model, {
            inputType: 'insertLineBreak'
        }) && (qc.host && qc.host.dispatchEvent(new Event('change', {
            bubbles: !0,
            composed: !0
        })), Ze(qc.model, {
            inputType: 'insertLineBreak'
        })), !0)
    }), tf({
        copyToClipboard: qc => (qc.focus(), qc.model.selectionIsCollapsed && qc.select(), document.execCommand('copy'), !1),
        cutToClipboard: qc => (qc.focus(), document.execCommand('cut'), !0),
        pasteFromClipboard: qc => (qc.focus(), document.execCommand('paste'), !0)
    }, {
        target: 'mathfield',
        category: 'clipboard'
    }), tf({
        applyStyle: function(eh, fh) {
            eh.flushInlineShortcutBuffer();
            const gh = dh(eh, fh),
                {
                    model: hh
                } = eh;
            return hh.selectionIsCollapsed ? (eh.style.fontSeries && gh.fontSeries === eh.style.fontSeries && (gh.fontSeries = 'auto'), gh.fontShape && gh.fontShape === eh.style.fontShape && (gh.fontShape = 'auto'), gh.color && gh.color === eh.style.color && (gh.color = 'none'), gh.backgroundColor && gh.backgroundColor === eh.style.backgroundColor && (gh.backgroundColor = 'none'), gh.fontSize && gh.fontSize === eh.style.fontSize && (gh.fontSize = 'auto'), eh.style = {
                ...eh.style,
                ...gh
            }) : eh.model.deferNotifications({
                content: !0,
                type: 'insertText'
            }, () => {
                hh.selection.ranges.forEach(eh => dg(hh, eh, gh, {
                    operation: 'toggle'
                })), eh.snapshot();
            }), !0;
        }
    }, {
        target: 'mathfield'
    });
    let eh = null,
        fh = 0;

    function gh(hh) {
        return e() && 'TouchEvent' in globalThis && hh instanceof TouchEvent;
    }

    function hh(ih) {
        return e() && 'PointerEvent' in globalThis && ih instanceof PointerEvent;
    }

    function ih(jh, kh, lh) {
        if (jh >= lh.left && jh <= lh.right && kh >= lh.top && kh <= lh.bottom)
            return 0;
        const mh = jh - (lh.left + lh.right) / 2,
            nh = kh - (lh.top + lh.bottom) / 2;
        return mh * mh + nh * nh;
    }

    function jh(kh, lh, mh, nh, oh) {
        if (!mh.id)
            return [
                1 / 0,
                null
            ];
        if (lh.has(mh.id))
            return lh.get(mh.id);
        const ph = se(kh, mh);
        if (!ph)
            return [
                1 / 0,
                null
            ];
        let qh = [
            1 / 0,
            null
        ];
        if (mh.hasChildren && !mh.captureSelection && nh >= ph.left && nh <= ph.right)
            for (const rh of mh.children) {
                const sh = jh(kh, lh, rh, nh, oh);
                sh[0] <= qh[0] && (qh = sh);
            }
        return qh[1] || (qh = [
            ih(nh, oh, ph),
            mh
        ]), lh.set(mh.id, qh), qh;
    }

    function kh(lh, mh, nh) {
        const [, oh] = jh(lh, new Map(), lh.model.root, mh, nh);
        return oh;
    }

    function lh(mh, nh, oh, ph) {
        var qh;
        const rh = mh.fieldContent.getBoundingClientRect();
        if (nh > rh.right || oh > rh.bottom + 8)
            return mh.model.lastOffset;
        if (nh < rh.left || oh < rh.top - 8)
            return 0;
        (ph = null != ph ? ph : {}).bias = null !== (qh = ph.bias) && void 0 !== qh ? qh : 0;
        let sh = kh(mh, nh, oh);
        const th = [];
        let uh = sh;
        for (; uh;)
            th.unshift(uh), uh = uh.parent;
        for (const vh of th)
            if (vh.captureSelection) {
                sh = vh;
                break;
            }
        let wh = vh.model.offsetOf(sh);
        if (wh < 0)
            return -1;
        if (sh.leftSibling)
            if (0 === ph.bias && 'placeholder' !== sh.type) {
                const xh = se(vh, sh);
                xh && nh < (xh.left + xh.right) / 2 && (wh = vh.model.offsetOf(sh.leftSibling));
            } else
                ph.bias < 0 && (wh = vh.model.offsetOf(sh.leftSibling));
        return wh;
    }
    new class extends Qd {
        onPaste(mh, nh) {
            if (!nh.clipboardData)
                return !1;
            const oh = nh.clipboardData.getData('text/plain');
            return !(!oh || !Ye(mh.model, {
                inputType: 'insertFromPaste',
                data: oh
            }) || (mh.snapshot(), this.insert(mh.model, oh) && (Ze(mh.model, {
                inputType: 'insertFromPaste'
            }), _pf(mh)), nh.preventDefault(), nh.stopPropagation(), 0));
        }
        insert(mh, nh, oh = {}) {
            if (!Ye(mh, {
                    data: nh,
                    inputType: 'insertText'
                }))
                return !1;
            oh.insertionMode || (oh.insertionMode = 'replaceSelection'), oh.selectionMode || (oh.selectionMode = 'placeholder'), oh.format || (oh.format = 'auto');
            const {
                suppressChangeNotifications: ph
            } = mh;
            oh.suppressChangeNotifications && (mh.suppressChangeNotifications = !0);
            const qh = mh.suppressChangeNotifications;
            mh.suppressChangeNotifications = !0, 'replaceSelection' !== oh.insertionMode || mh.selectionIsCollapsed ? 'replaceAll' === oh.insertionMode ? (mh.root.setChildren([], 'body'), mh.position = 0) : 'insertBefore' === oh.insertionMode ? mh.collapseSelection('backward') : 'insertAfter' === oh.insertionMode && mh.collapseSelection('forward') : mh.deleteAtoms(Gd(mh.selection));
            const rh = (g = nh, h = mh.mathfield, _Qc(g = (g = (g = (g = (g = (g = (g = (g = (g = (g = (g = g.replace(/\\/g, '\\textbackslash ')).replace(/#/g, '\\#')).replace(/\$/g, '\\$')).replace(/%/g, '\\%')).replace(/&/g, '\\&')).replace(/_/g, '\\_')).replace(/{/g, '\\textbraceleft ')).replace(/}/g, '\\textbraceright ')).replace(/\^/g, '\\textasciicircum ')).replace(/~/g, '\\textasciitilde ')).replace(/\xa3/g, '\\textsterling '), h, {
                parseMode: 'text'
            }));
            var sh, th;
            if (cg(rh, oh.style), !rh)
                return !1;
            const uh = mh.at(mh.position),
                vh = uh.parent.addChildrenAfter(rh, uh);
            return mh.suppressChangeNotifications = qh, 'before' === oh.selectionMode || ('item' === oh.selectionMode ? mh.setSelection(mh.anchor, mh.offsetOf(vh)) : vh && (mh.position = mh.offsetOf(vh))), Ze(mh, {
                data: nh,
                inputType: 'insertText'
            }), mh.suppressChangeNotifications = ph, !0;
        }
        constructor() {
            super('text');
        }
    }();
    const mh = 'mathlive#remote-virtual-keyboard-message';
    class nh {
        get visible() {
            var oh, ph;
            return null !== (ph = null === (oh = _Kh().sharedVirtualKeyboard) || void 0 === oh ? void 0 : oh.visible) && void 0 !== ph && ph;
        }
        set visible(oh) {
            _Kh().sharedVirtualKeyboard && (_Kh().sharedVirtualKeyboard.visible = oh);
        }
        setOptions(oh) {
            this.sendMessage('setOptions', {
                options: JSON.stringify(_oh(oh))
            });
        }
        create() {}
        dispose() {
            this.disable();
        }
        enable() {
            this.enabled || (this.enabled = !0, globalThis.addEventListener('message', this));
        }
        disable() {
            this.enabled && (globalThis.removeEventListener('message', this), this.enabled = !1);
        }
        executeCommand(oh) {
            var ph, qh, rh;
            return 'virtual-keyboard' === uf(oh) ? (this._mathfield && (this.setOptions(_oh(this._mathfield.getOptions())), ('showVirtualKeyboard' === oh || 'toggleVirtualKeyboard' === oh && !1 === this.visible) && (null === (qh = (ph = this._mathfield).focus) || void 0 === qh || qh.call(ph))), this.sendMessage('executeCommand', {
                command: oh
            }), !1) : null === (rh = this._mathfield) || void 0 === rh ? void 0 : rh.executeCommand(oh);
        }
        focusMathfield() {}
        blurMathfield() {}
        stateChanged() {}
        handleEvent(oh) {
            var ph, qh, rh, sh;
            if ('message' === oh.type && oh.data && oh.data.type === mh) {
                if (!ue(oh.origin, this.originValidator))
                    throw new Error(`Message from unknown origin (${ oh.origin }) cannot be handled`);
                const {
                    action: th
                } = oh.data;
                if ('executeCommand' === th) {
                    if ('virtual-keyboard' === uf(oh.data.command) && window === globalThis.parent)
                        return;
                    this.executeCommand(oh.data.command);
                } else
                    'updateState' === th ? (this.visible = oh.data.state.visible, this.height = oh.data.state.height) : 'focus' === th ? null === (qh = null === (ph = this._mathfield) || void 0 === ph ? void 0 : ph.focus) || void 0 === qh || qh.call(ph) : 'blur' === th && (null === (sh = null === (rh = this._mathfield) || void 0 === rh ? void 0 : rh.blur) || void 0 === sh || sh.call(rh));
            }
        }
        sendMessage(oh, ph = {}) {
            return !!globalThis.parent && (globalThis.parent.postMessage({
                type: mh,
                action: oh,
                ...ph
            }, this.targetOrigin), !0);
        }
        constructor(oh) {
            var ph, qh, rh;
            this.targetOrigin = null !== (qh = null !== (ph = oh.targetOrigin) && void 0 !== ph ? ph : globalThis.origin) && void 0 !== qh ? qh : '*', this.originValidator = null !== (rh = oh.originValidator) && void 0 !== rh ? rh : 'same-origin', this._mathfield = oh.mathfield;
        }
    }

    function _oh(ph) {
        if ('object' != typeof ph)
            return {};
        const qh = {};
        return ph.fontsDirectory && (qh.fontsDirectory = ph.fontsDirectory), ph.soundsDirectory && (qh.soundsDirectory = ph.soundsDirectory), ph.virtualKeyboards && (qh.virtualKeyboards = ph.virtualKeyboards), ph.virtualKeyboardLayout && (qh.virtualKeyboardLayout = ph.virtualKeyboardLayout), ph.customVirtualKeyboardLayers && (qh.customVirtualKeyboardLayers = ph.customVirtualKeyboardLayers), ph.customVirtualKeyboards && (qh.customVirtualKeyboards = ph.customVirtualKeyboards), ph.virtualKeyboardTheme && (qh.virtualKeyboardTheme = ph.virtualKeyboardTheme), ph.keypressVibration && (qh.keypressVibration = ph.keypressVibration), ph.keypressSound && (qh.keypressSound = ph.keypressSound), ph.plonkSound && (qh.plonkSound = ph.plonkSound), ph.virtualKeyboardToolbar && (qh.virtualKeyboardToolbar = ph.virtualKeyboardToolbar), ph.targetOrigin && (qh.targetOrigin = ph.targetOrigin), ph.originValidator && (qh.originValidator = ph.originValidator), qh;
    }
    let ph, qh;
    class rh {
        get audioContext() {
            return this._audioContext || (this._audioContext = new AudioContext()), this._audioContext;
        }
        get colorMap() {
            return qc => {
                var sh;
                let th;
                return 'function' == typeof(null === (sh = this.options) || void 0 === sh ? void 0 : sh.colorMap) && (th = this.options.colorMap(qc)), th || (th = s(qc)), th;
            };
        }
        get backgroundColorMap() {
            return qc => {
                var sh;
                let th;
                return 'function' == typeof(null === (sh = this.options) || void 0 === sh ? void 0 : sh.backgroundColorMap) && (th = this.options.backgroundColorMap(qc)), th || 'function' != typeof this.options.colorMap || (th = this.options.colorMap(qc)), th || (th = t(qc)), th;
            };
        }
        get fractionNavigationOrder() {
            var sh, th;
            return null !== (th = null === (sh = this.options) || void 0 === sh ? void 0 : sh.fractionNavigationOrder) && void 0 !== th ? th : 'numerator-denominator';
        }
        get placeholderSymbol() {
            var sh, th;
            return null !== (th = null === (sh = this.options) || void 0 === sh ? void 0 : sh.placeholderSymbol) && void 0 !== th ? th : '\u25A2';
        }
        get smartFence() {
            var sh, th;
            return null !== (th = null === (sh = this.options) || void 0 === sh ? void 0 : sh.smartFence) && void 0 !== th && th;
        }
        get letterShapeStyle() {
            var sh, th;
            return null !== (th = null === (sh = this.options) || void 0 === sh ? void 0 : sh.letterShapeStyle) && void 0 !== th ? th : 'tex';
        }
        get registers() {
            var sh, th;
            return null !== (th = null === (sh = this.options) || void 0 === sh ? void 0 : sh.registers) && void 0 !== th ? th : {};
        }
        getDefinition(sh, th = 'math') {
            return _ud(sh, th);
        }
        getMacro(sh) {
            return _vd(sh, this.options.macros);
        }
        get virtualKeyboard() {
            if (!this.options.readOnly)
                return this._virtualKeyboard || (this.options.useSharedVirtualKeyboard || _Kh().sharedVirtualKeyboard ? this._virtualKeyboard = new nh({
                    targetOrigin: this.options.sharedVirtualKeyboardTargetOrigin,
                    originValidator: this.options.originValidator,
                    mathfield: this
                }) : this._virtualKeyboard = new zg(this.options, this)), this._virtualKeyboard;
        }
        get computeEngine() {
            var sh, th;
            if (void 0 === this._computeEngine) {
                const uh = null === (sh = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === sh ? void 0 : sh.ComputeEngine;
                uh && (this._computeEngine = new uh()), this._computeEngine && ',' === this.options.decimalSeparator && (this._computeEngine.latexOptions.decimalMarker = '{,}');
            }
            return null !== (th = this._computeEngine) && void 0 !== th ? th : null;
        }
        get virtualKeyboardState() {
            var sh;
            return (null === (sh = this.virtualKeyboard) || void 0 === sh ? void 0 : sh.visible) ? 'visible' : 'hidden';
        }
        set virtualKeyboardState(sh) {
            this.virtualKeyboard && ('hidden' === sh ? this.virtualKeyboard.executeCommand('hideVirtualKeyboard') : 'visible' === sh && this.virtualKeyboard.executeCommand('showVirtualKeyboard'));
        }
        get keybindings() {
            var sh, th;
            if (this._keybindings)
                return this._keybindings;
            const [uh, vh] = function(wh, xh) {
                const yh = [],
                    zh = [];
                for (const Ah of wh)
                    try {
                        const Bh = Te(Ah, xh);
                        if (Bh) {
                            const Ch = yh.filter(xh => xh.key === Bh.key && xh.ifMode === Bh.ifMode);
                            if (Ch.length > 0)
                                throw new Error(`Ambiguous key binding ${ Ah.key } (${ _Ue(Ah.command) }) matches ${ Ch[0].key } (${ _Ue(Ch[0].command) }) with the ${ xh.displayName } keyboard layout`);
                            yh.push(Bh);
                        }
                    } catch (wh) {
                        wh instanceof Error && zh.push(wh.message);
                    }
                return [
                    yh,
                    zh
                ];
            }(this.options.keybindings, null !== (sh = Ne()) && void 0 !== sh ? sh : Ie);
            return (null === (th = Ne()) || void 0 === th ? void 0 : th.score) > 0 && (this._keybindings = uh, vh.length), uh;
        }
        setOptions(sh) {
            var th, uh;
            if (this.options = Af(this.options, sh), 'computeEngine' in sh && (this._computeEngine = this.options.computeEngine), this._computeEngine && 'decimalSeparator' in sh && (this._computeEngine.latexOptions.decimalMarker = ',' === this.options.decimalSeparator ? '{,}' : '.'), this.model.setListeners({
                    onSelectionDidChange: sh => this._onSelectionDidChange()
                }), this.model.options.macros = this.options.macros, this._keybindings = void 0, ('soundsDirectory' in sh || 'plonkSound' in sh || 'keypressSound' in sh || 'spacebarKeypressSound' in sh || 'returnKeypressSound' in sh || 'deleteKeypressSound' in sh) && (this.audioBuffers = {}), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.options.readOnly ? (this.hasFocus() && 'visible' === this.virtualKeyboardState && this.executeCommand('hideVirtualKeyboard'), this.onBlur(), this.element.classList.add('ML__isReadOnly')) : this.element.classList.remove('ML__isReadOnly'), null === (th = this.virtualKeyboard) || void 0 === th || th.setOptions(this.options), this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), 'virtualKeyboardToggleGlyph' in sh) {
                const vh = null === (uh = this.element) || void 0 === uh ? void 0 : uh.querySelector('.ML__virtual-keyboard-toggle');
                vh && (vh.innerHTML = this.options.createHTML(this.options.virtualKeyboardToggleGlyph));
            }
            const vh = kc.serialize(this.model.root, {
                expandMacro: !1,
                defaultMode: this.options.defaultMode
            });
            ('macros' in sh || this.model.getValue() !== vh) && Qd.insert('math', this.model, vh, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), _pf(this);
        }
        getOptions(sh) {
            return _Bf(this.options, sh);
        }
        getOption(sh) {
            return _Bf(this.options, sh);
        }
        handleEvent(sh) {
            if (ne(this))
                switch (sh.type) {
                    case 'focus':
                        this.onFocus();
                        break;
                    case 'blur':
                        this.onBlur();
                        break;
                    case 'touchstart':
                    case 'mousedown':
                    case 'pointerdown':
                        ! function(th, uh) {
                            var vh;
                            th.atomBoundsCache = new Map();
                            const wh = th;
                            let xh, yh = !1,
                                zh = 'none';
                            if (hh(uh) && uh.buttons > 1)
                                return;
                            let Ah = !1,
                                Bh = !1;
                            const Ch = gh(uh) ? uh.touches[0].clientX : uh.clientX,
                                Dh = gh(uh) ? uh.touches[0].clientY : uh.clientY,
                                Eh = Date.now(),
                                Fh = wh.field,
                                Gh = setInterval(() => {
                                    Ah ? Fh.scroll({
                                        top: 0,
                                        left: Fh.scrollLeft - 16
                                    }) : Bh && Fh.scroll({
                                        top: 0,
                                        left: Fh.scrollLeft + 16
                                    });
                                }, 32);

                            function Hh(Ih) {
                                e() && ('PointerEvent' in window ? (ke(Fh, 'pointermove', q), ke(Fh, 'pointerup pointercancel', Hh), Ih instanceof PointerEvent && Fh.releasePointerCapture(Ih.pointerId)) : (ke(Fh, 'touchmove', q), ke(Fh, 'touchcancel touchend', Hh), ke(window, 'mousemove', q), ke(window, 'mouseup blur', Hh)), yh = !1, clearInterval(Gh), th.element.classList.remove('tracking'), Ih && Ih.preventDefault());
                            }

                            function Ih(Jh) {
                                if (!wh.hasFocus())
                                    return void Hh(null);
                                const Kh = gh(Jh) ? Jh.touches[0].clientX : Jh.clientX,
                                    Lh = gh(Jh) ? Jh.touches[0].clientY : Jh.clientY,
                                    Mh = gh(Jh) || 'touch' === Jh.pointerType ? 20 : 5;
                                if (Date.now() < Eh + 500 && Math.abs(Ch - Kh) < Mh && Math.abs(Dh - Lh) < Mh)
                                    return Jh.preventDefault(), void Jh.stopPropagation();
                                const Nh = Fh.getBoundingClientRect();
                                Bh = Kh > Nh.right, Ah = Kh < Nh.left;
                                let Oh = xh;
                                hh(Jh) ? Jh.isPrimary || (Oh = lh(wh, Jh.clientX, Jh.clientY, {
                                    bias: 0
                                })) : Jh.touches && 2 === Jh.touches.length && (Oh = lh(wh, Jh.touches[1].clientX, Jh.touches[1].clientY, {
                                    bias: 0
                                }));
                                const Ph = lh(wh, Kh, Lh, {
                                    bias: Kh <= Ch ? Kh === Ch ? 0 : -1 : 1
                                });
                                Oh >= 0 && Ph >= 0 && (wh.model.extendSelectionTo(Oh, Ph), _pf(th)), Jh.preventDefault(), Jh.stopPropagation();
                            }
                            eh && Math.abs(eh.x - Ch) < 5 && Math.abs(eh.y - Dh) < 5 && Date.now() < eh.time + 500 ? (fh += 1, eh.time = Eh) : (eh = {
                                x: Ch,
                                y: Dh,
                                time: Eh
                            }, fh = 1);
                            const Jh = Fh.getBoundingClientRect();
                            if (Ch >= Jh.left && Ch <= Jh.right && Dh >= Jh.top && Dh <= Jh.bottom) {
                                if (th.hasFocus() || (zh = 'all', th.focus({
                                        scrollIntoView: !1
                                    })), th.flushInlineShortcutBuffer(), th.smartModeSuppressed = !1, xh = lh(th, Ch, Dh, {
                                        bias: 0
                                    }), xh >= 0) {
                                    if (th.element.classList.add('tracking'), uh.shiftKey) {
                                        const Kh = th.model.selectionIsCollapsed;
                                        th.model.extendSelectionTo(th.model.anchor, xh), zh = df(th.model) || Kh ? 'all' : 'selection';
                                    } else
                                        'placeholder' === th.model.at(xh).type ? (th.model.setSelection(xh - 1, xh), zh = 'selection') : 'placeholder' === (null === (vh = th.model.at(xh).rightSibling) || void 0 === vh ? void 0 : vh.type) ? (th.model.setSelection(xh, xh + 1), zh = 'selection') : (th.model.position = xh, zh = df(th.model) ? 'all' : 'selection');
                                    th.style = {}, 3 === uh.detail || fh > 2 ? (Hh(uh), 3 !== uh.detail && 3 !== fh || (th.model.selection = {
                                        ranges: [
                                            [
                                                0,
                                                th.model.lastOffset
                                            ]
                                        ]
                                    }, zh = 'all')) : yh || (yh = !0, e() && 'PointerEvent' in window ? (je(Fh, 'pointermove', Ih), je(Fh, 'pointerup pointercancel', Hh), uh instanceof PointerEvent && Fh.setPointerCapture(uh.pointerId)) : (je(window, 'blur', Hh), gh(uh) && uh.touches ? (je(uh.target, 'touchmove', Ih), je(uh.target, 'touchcancel touchend', Hh)) : (je(window, 'mousemove', Ih), je(window, 'mouseup', Hh))), 2 !== uh.detail && 2 !== fh || (mg(th.model), zh = 'all'));
                                }
                            } else
                                eh = null;
                            'none' !== zh && (th.model.selectionIsCollapsed && (zh = 'all'), _pf(th)), uh.preventDefault();
                        }(this, sh);
                        break;
                    case 'resize':
                        this.resizeTimer && cancelAnimationFrame(this.resizeTimer), this.resizeTimer = requestAnimationFrame(() => ne(this) && this.onResize());
                        break;
                    case 'wheel':
                        this.onWheel(sh);
                }
        }
        dispose() {
            if (!ne(this))
                return;
            const sh = this.element;
            delete this.element, delete sh.mathfield, sh.innerHTML = this.model.getValue(), ke(sh, 'pointerdown', this), ke(sh, 'touchstart:active mousedown', this), ke(sh, 'focus', this), ke(sh, 'blur', this), ke(window, 'resize', this), window.removeEventListener('blur', this, {
                capture: !0
            }), delete this.accessibleNode, delete this.ariaLiveText, delete this.field, delete this.fieldContent, this.virtualKeyboardToggle.remove(), delete this.virtualKeyboardToggle, this._virtualKeyboard && (this._virtualKeyboard.dispose(), delete this._virtualKeyboard), me(this.popover), _gf && _gf.release(), _hf && _hf.release(), delete this.popover, me(this.keystrokeCaption), Tg && Tg.release(), Ug && Ug.release(), delete this.keystrokeCaption, this.stylesheets.forEach(sh => null == sh ? void 0 : sh.release());
        }
        flushInlineShortcutBuffer(sh) {
            if (null != sh || (sh = {
                    defer: !1
                }), !sh.defer)
                return this.inlineShortcutBuffer = [], clearTimeout(this.inlineShortcutBufferFlushTimer), void(this.inlineShortcutBufferFlushTimer = 0);
            this.options.inlineShortcutTimeout > 0 && (clearTimeout(this.inlineShortcutBufferFlushTimer), this.inlineShortcutBufferFlushTimer = setTimeout(() => this.flushInlineShortcutBuffer(), this.options.inlineShortcutTimeout));
        }
        executeCommand(sh) {
            var th, uh;
            return 'virtual-keyboard' === uf(sh) ? null !== (uh = null === (th = this.virtualKeyboard) || void 0 === th ? void 0 : th.executeCommand(sh)) && void 0 !== uh && uh : function(vh, wh) {
                var xh, yh, zh;
                if (!wh)
                    return !1;
                let Ah, Bh = [],
                    Ch = !1,
                    Dh = !1;
                d(wh) ? (Ah = wh[0], Bh = wh.slice(1)) : Ah = wh, Ah = Ah.replace(/-\w/g, vh => vh[1].toUpperCase());
                const Eh = null === (xh = sf[Ah]) || void 0 === xh ? void 0 : xh.target;
                if ('model' === Eh) {
                    if (vh.options.readOnly && /^(paste|cut|insert|delete|transpose|add)/.test(Ah))
                        return vh.model.announce('plonk'), !1;
                    /^(delete|transpose|add)/.test(Ah) && 'deleteBackward' !== Ah && vh.flushInlineShortcutBuffer(), /^(delete|transpose|add)/.test(Ah) && 'latex' !== vh.mode && (vh.popUndoStack(), vh.snapshot()), 'latex' !== vh.mode || /^(complete)/.test(Ah) || bf(vh), sf[Ah].fn(vh.model, ...Bh), 'latex' !== vh.mode && /^(delete|transpose|add)/.test(Ah) && vh.snapshot(), 'latex' === vh.mode && cf(vh), Dh = !0, Ch = !0;
                } else if ('virtual-keyboard' === Eh)
                    Dh = null !== (zh = null === (yh = vh.virtualKeyboard) || void 0 === yh ? void 0 : yh.executeCommand(wh)) && void 0 !== zh && zh, Ch = !0;
                else {
                    if (!sf[Ah])
                        throw new Error(`Unknown command "${ Ah }"`);
                    /^(undo|redo)/.test(Ah) && vh.flushInlineShortcutBuffer(), Dh = sf[Ah].fn(vh, ...Bh), Ch = !0;
                }
                return 'virtual-keyboard' !== Eh && (vh.model.selectionIsCollapsed && !/^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(Ah) || (vh.flushInlineShortcutBuffer(), vh.style = {})), Dh && _pf(vh), Ch;
            }(this, sh);
        }
        get errors() {
            return Rc(this.model.getValue(), this);
        }
        getValue(sh, th, uh) {
            return this.model.getValue(sh, th, uh);
        }
        setValue(sh, th) {
            var uh;
            void 0 === (th = null != th ? th : {
                mode: 'math'
            }).insertionMode && (th.insertionMode = 'replaceAll'), void 0 !== th.format && 'auto' !== th.format || (th.format = 'latex');
            let vh = 'math';
            void 0 !== th.mode && 'auto' !== th.mode || (vh = null !== (uh = bg(this.model, this.model.position)) && void 0 !== uh ? uh : 'math'), Qd.insert(vh, this.model, sh, th) && (this.undoManager.snapshot(), _pf(this));
        }
        get expression() {
            const sh = this.computeEngine;
            return sh ? sh.box(sh.parse(this.model.getValue())) : null;
        }
        loadSound(sh) {
            var th, uh, vh, wh, xh, yh, zh;
            delete this.audioBuffers[sh];
            let Ah = '';
            switch (sh) {
                case 'keypress':
                    Ah = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null === (th = this.options.keypressSound) || void 0 === th ? void 0 : th.default;
                    break;
                case 'spacebar':
                    Ah = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (vh = null === (uh = this.options.keypressSound) || void 0 === uh ? void 0 : uh.spacebar) && void 0 !== vh ? vh : null === (wh = this.options.keypressSound) || void 0 === wh ? void 0 : wh.default;
                    break;
                case 'delete':
                    Ah = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (yh = null === (xh = this.options.keypressSound) || void 0 === xh ? void 0 : xh.delete) && void 0 !== yh ? yh : null === (zh = this.options.keypressSound) || void 0 === zh ? void 0 : zh.default;
                    break;
                case 'plonk':
                    Ah = this.options.plonkSound;
            }
            if ('string' != typeof Ah)
                return;
            Ah = Ah.trim();
            const Bh = this.options.soundsDirectory;
            null != Bh && 'null' !== Bh && 'none' !== Ah && 'null' !== Ah && fetch(Jf(Bh + '/' + Ah)).then(sh => sh.arrayBuffer()).then(sh => this.audioContext.decodeAudioData(sh)).then(th => {
                this.audioBuffers[sh] = th;
            });
        }
        playSound(sh) {
            if (this.audioBuffers[sh] || this.loadSound(sh), !this.audioBuffers[sh])
                return;
            const th = this.audioContext.createBufferSource();
            th.buffer = this.audioBuffers[sh];
            const uh = this.audioContext.createGain();
            uh.gain.value = 0.5, th.connect(uh).connect(this.audioContext.destination), th.start();
        }
        scrollIntoView() {
            var sh;
            if (!this.element)
                return;
            null === (sh = this.host) || void 0 === sh || sh.scrollIntoView({
                block: 'nearest',
                inline: 'nearest'
            }), this.dirty && _qf(this, {
                interactive: !0
            });
            const th = this.field.getBoundingClientRect();
            let uh = null;
            if (this.model.selectionIsCollapsed)
                uh = oe(this.field);
            else {
                const vh = te(this);
                if (vh.length > 0) {
                    let wh = -1 / 0,
                        xh = -1 / 0;
                    for (const yh of vh)
                        yh.right > wh && (wh = yh.right), yh.top < xh && (xh = yh.top);
                    uh = {
                        x: wh + yh.left - this.field.scrollLeft,
                        y: xh + yh.top - this.field.scrollTop,
                        height: 0
                    };
                }
            }
            if (this.host && uh) {
                const vh = this.host.getBoundingClientRect(),
                    wh = uh.y;
                let xh = this.host.scrollTop;
                wh < vh.top ? xh = wh - vh.top + this.host.scrollTop : wh > vh.bottom && (xh = wh - vh.bottom + this.host.scrollTop + uh.height), this.host.scroll({
                    top: xh,
                    left: 0
                });
            }
            if (uh) {
                const vh = uh.x - window.scrollX;
                let wh = this.field.scrollLeft;
                vh < th.left ? wh = vh - th.left + this.field.scrollLeft - 20 : vh > th.right && (wh = vh - th.right + this.field.scrollLeft + 20), this.field.scroll({
                    top: this.field.scrollTop,
                    left: wh
                });
            }
        }
        insert(sh, th) {
            if ('string' == typeof sh && sh.length > 0) {
                if (this.flushInlineShortcutBuffer(), (th = null != th ? th : {
                        mode: 'math'
                    }).focus && this.focus(), th.feedback && (this.options.keypressVibration && h() && navigator.vibrate(3), this.playSound('keypress')), th.scrollIntoView && this.scrollIntoView(), '\\\\' === sh)
                    Xf(this.model);
                else if ('&' === sh)
                    Yf(this.model);
                else {
                    const uh = this.style;
                    Qd.insert(this.mode, this.model, sh, {
                        style: this.model.at(this.model.position).computedStyle,
                        ...th
                    }), th.resetStyle && (this.style = uh);
                }
                return this.undoManager.snapshot(), _pf(this), !0;
            }
            return !1;
        }
        switchMode(sh, th = '', uh = '') {
            var vh;
            if (this.mode === sh || this.options.readOnly)
                return;
            if (!(null === (vh = this.host) || void 0 === vh ? void 0 : vh.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))))
                return;
            const wh = this.mode,
                {
                    model: xh
                } = this;
            xh.deferNotifications({
                content: Boolean(uh) || Boolean(th),
                selection: !0,
                type: 'insertText'
            }, () => {
                var yh;
                let zh = !1;
                if (this.flushInlineShortcutBuffer(), this.smartModeSuppressed = /text|math/.test(this.mode) && /text|math/.test(sh), th && 'latex' !== sh) {
                    const Ah = _Qc(th, this, {
                        parseMode: sh
                    });
                    xh.collapseSelection('forward');
                    const Bh = xh.at(xh.position);
                    xh.position = xh.offsetOf(Bh.parent.addChildrenAfter(Ah, Bh)), zh = !0;
                }
                if (this.mode = sh, 'latex' === sh) {
                    let Ah, Bh = xh.selectionIsCollapsed;
                    _ef(this, 'accept'), (null === (yh = this.virtualKeyboard) || void 0 === yh ? void 0 : yh.visible) && this.executeCommand([
                        'switchKeyboardLayer',
                        'latex-lower'
                    ]);
                    let Ch = xh.at(xh.position);
                    if (Bh)
                        Ah = '\\';
                    else {
                        const Dh = Gd(xh.selection);
                        Ah = this.model.getValue(Dh, 'latex');
                        const Eh = this.model.extractAtoms(Dh);
                        1 === Eh.length && Eh[0] instanceof Kc && (Ah = th, Bh = !0), Ch = xh.at(Dh[0]);
                    }
                    const Dh = new hd(Ah, this);
                    Ch.parent.addChildAfter(Dh, Ch), Bh ? xh.position = xh.offsetOf(Dh.lastChild) : xh.setSelection(xh.offsetOf(Dh.firstChild), xh.offsetOf(Dh.lastChild));
                } else
                    $e(xh).forEach(sh => {
                        sh.isError = !1;
                    });
                if (uh) {
                    const Ah = _Qc(uh, this, {
                        parseMode: wh
                    });
                    xh.collapseSelection('forward');
                    const Bh = xh.at(xh.position);
                    xh.position = xh.offsetOf(Bh.parent.addChildrenAfter(Ah, Bh)), zh = !0;
                }
                return _pf(this), zh;
            }), this.mode = sh;
        }
        hasFocus() {
            return e() && this.keyboardDelegate.hasFocus();
        }
        focus(sh) {
            var th;
            this.keyboardDelegate.focus(), this.model.announce('line'), (null === (th = null == sh ? void 0 : sh.scrollIntoView) || void 0 === th || th) && this.scrollIntoView();
        }
        blur() {
            this.keyboardDelegate.blur();
        }
        select() {
            this.model.selection = {
                ranges: [
                    [
                        0,
                        this.model.lastOffset
                    ]
                ]
            };
        }
        applyStyle(sh, th = {}) {
            var uh, vh;
            const wh = {
                operation: 'set',
                suppressChangeNotifications: !1
            };
            Nf(th) ? wh.range = th : (wh.range = th.range, wh.suppressChangeNotifications = null !== (uh = th.suppressChangeNotifications) && void 0 !== uh && uh);
            const xh = dh(this, sh),
                yh = null !== (vh = wh.operation) && void 0 !== vh ? vh : 'set';
            this.model.deferNotifications({
                content: !wh.suppressChangeNotifications,
                type: 'insertText'
            }, () => {
                void 0 === wh.range ? this.model.selection.ranges.forEach(sh => dg(this.model, sh, xh, {
                    operation: yh
                })) : dg(this.model, wh.range, xh, {
                    operation: yh
                });
            }), _pf(this);
        }
        getCaretPoint() {
            const sh = oe(this.field);
            return sh ? {
                x: sh.x,
                y: sh.y
            } : null;
        }
        setCaretPoint(sh, th) {
            const uh = lh(this, sh, th, {
                bias: 0
            });
            if (uh < 0)
                return !1;
            const vh = this.model.position;
            return this.model.position = uh, this.model.announce('move', vh), _pf(this), !0;
        }
        getPlaceholderField(sh) {
            var th;
            return null === (th = this.placeholders.get(sh)) || void 0 === th ? void 0 : th.field;
        }
        attachNestedMathfield() {
            let sh = !1;
            const th = this.field.getBoundingClientRect();
            this.placeholders.forEach((c, d) => {
                var uh, vh;
                const wh = this.field.querySelector(`[data-placeholder-id=${ d }]`);
                if (!wh)
                    return;
                const xh = wh.getBoundingClientRect(),
                    yh = xh.left - th.left + (null !== (uh = this.element.offsetLeft) && void 0 !== uh ? uh : 0);
                (!c.field.style.left || Math.abs(yh - parseFloat(c.field.style.left)) >= 1) && (sh = !0, c.field.style.left = `${ yh }px`);
                const zh = xh.top - th.top + (null !== (vh = this.element.offsetTop) && void 0 !== vh ? vh : 0);
                (!c.field.style.top || Math.abs(zh - parseFloat(c.field.style.top)) >= 1) && (sh = !0, c.field.style.top = `${ zh }px`);
            }), sh && _pf(this);
        }
        canUndo() {
            return this.undoManager.canUndo();
        }
        canRedo() {
            return this.undoManager.canRedo();
        }
        popUndoStack() {
            this.undoManager.pop();
        }
        snapshot() {
            var sh, th;
            this.undoManager.snapshot() && (null === (sh = this.virtualKeyboard) || void 0 === sh || sh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (th = this.host) || void 0 === th || th.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        snapshotAndCoalesce() {
            var sh, th;
            this.undoManager.snapshotAndCoalesce() && (null === (sh = this.virtualKeyboard) || void 0 === sh || sh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (th = this.host) || void 0 === th || th.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        undo() {
            var sh, th;
            this.undoManager.undo() && (null === (sh = this.virtualKeyboard) || void 0 === sh || sh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (th = this.host) || void 0 === th || th.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        redo() {
            var sh, th;
            this.undoManager.redo() && (null === (sh = this.virtualKeyboard) || void 0 === sh || sh.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (th = this.host) || void 0 === th || th.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        resetUndo() {
            var sh;
            null === (sh = this.undoManager) || void 0 === sh || sh.reset();
        }
        _onSelectionDidChange() {
            var sh, th, uh;
            this.keyboardDelegate.setValue(this.model.getValue(this.model.selection, 'latex-expanded'));
            const vh = this.model.getAtoms(this.model.selection);
            if (1 === vh.length && 'placeholder' === vh[0].type) {
                const wh = vh[0];
                this.model.mathfield.placeholders.has(wh.placeholderId) && (null === (sh = this.model.mathfield.placeholders.get(wh.placeholderId)) || void 0 === sh || sh.field.focus());
            } {
                const wh = this.model.at(this.model.position),
                    xh = null !== (th = wh.mode) && void 0 !== th ? th : Ef(this.options);
                this.mode !== xh && ('latex' === this.mode ? (_ef(this, 'accept', {
                    mode: xh
                }), this.model.position = this.model.offsetOf(wh)) : this.switchMode(xh));
            }
            null === (uh = this.host) || void 0 === uh || uh.dispatchEvent(new Event('selection-change', {
                bubbles: !0,
                composed: !0
            }));
        }
        onFocus() {
            var sh, th, uh;
            !this.focusBlurInProgress && this.blurred && (this.focusBlurInProgress = !0, this.blurred = !1, this.keyboardDelegate.focus(), null === (sh = this.virtualKeyboard) || void 0 === sh || sh.setOptions(this.options), null === (th = this.virtualKeyboard) || void 0 === th || th.enable(), 'onfocus' === this.options.virtualKeyboardMode && this.executeCommand('showVirtualKeyboard'), kf(this), _qf(this, {
                interactive: !0
            }), null === (uh = this.host) || void 0 === uh || uh.dispatchEvent(new Event('focus', {
                bubbles: !1,
                composed: !0
            })), this.valueOnFocus = this.model.getValue(), this.focusBlurInProgress = !1);
        }
        onBlur() {
            var sh, th;
            this.focusBlurInProgress || this.blurred || (this.focusBlurInProgress = !0, this.blurred = !0, this.ariaLiveText.textContent = '', _ef(this, 'accept'), this.model.getValue() !== this.valueOnFocus && this.executeCommand('commit'), /onfocus|manual/.test(this.options.virtualKeyboardMode) && !_Kh().sharedVirtualKeyboard && this.executeCommand('hideVirtualKeyboard'), null === (sh = this.virtualKeyboard) || void 0 === sh || sh.disable(), null === (th = this.host) || void 0 === th || th.dispatchEvent(new Event('blur', {
                bubbles: !1,
                composed: !0
            })), _pf(this), this.focusBlurInProgress = !1);
        }
        onCompositionStart(sh) {
            this.model.deleteAtoms(Gd(this.model.selection)), requestAnimationFrame(() => {
                _qf(this);
                const th = oe(this.field);
                th && this.keyboardDelegate.moveTo(th.x, th.y);
            });
        }
        onCompositionUpdate(sh) {
            ! function(th, uh) {
                const vh = th.at(th.position);
                if ('composition' === vh.type)
                    vh.value = uh;
                else {
                    const {
                        caret: wh
                    } = vh;
                    vh.caret = '';
                    const xh = new Zc(uh, th.mathfield, {
                        mode: vh.mode
                    });
                    xh.caret = wh, vh.parent.addChildAfter(xh, vh), th.position += 1;
                }
            }(this.model, sh), _pf(this);
        }
        onCompositionEnd(sh) {
            ! function(th) {
                const uh = th.at(th.position);
                'composition' === uh.type && (uh.parent.removeChild(uh), th.position -= 1);
            }(this.model), bh(this, sh, {
                simulateKeystroke: !0
            });
        }
        onResize() {
            kf(this);
        }
        onWheel(sh) {
            const th = 5 * sh.deltaX;
            if (!Number.isFinite(th) || 0 === th)
                return;
            const uh = this.field;
            th < 0 && 0 === uh.scrollLeft || th > 0 && uh.offsetWidth + uh.scrollLeft >= uh.scrollWidth || (uh.scrollBy({
                top: 0,
                left: th
            }), sh.preventDefault(), sh.stopPropagation());
        }
        getHTMLElement(sh) {
            let th = sh;
            for (; !th.id && th.hasChildren;)
                th = sh.children[0];
            if (th.id)
                return this.element.querySelector(`[data-atom-id="${ th.id }"]`);
            throw new TypeError('Could not get an ID from atom');
        }
        constructor(sh, th) {
            var uh, vh, wh;
            this.focusBlurInProgress = !1, this.stylesheets = [], this.audioBuffers = {}, this.options = Af({
                ...Df(),
                registers: sd(this)
            }, th.readOnly ? {
                ...th,
                virtualKeyboardMode: 'off'
            } : {
                plonkSound: 'plonk.wav',
                keypressSound: {
                    spacebar: 'keypress-spacebar.wav',
                    return: 'keypress-return.wav',
                    delete: 'keypress-delete.wav',
                    default: 'keypress-standard.wav'
                },
                ...th
            }), 'auto' === this.options.virtualKeyboardMode && (this.options.virtualKeyboardMode = g() ? 'onfocus' : 'off'), void 0 !== this.options.computeEngine && (this._computeEngine = th.computeEngine), th.eventSink && (this.host = th.eventSink), this.placeholders = new Map(), this.element = sh, sh.mathfield = this;
            let xh = null !== (uh = th.value) && void 0 !== uh ? uh : this.element.textContent;
            xh && (xh = xh.trim()), null !== this.options.fontsDirectory && Lf(this.options.fontsDirectory), ph || (ph = Ee(We).toString(36)), this.stylesheets.push(Fe(sh, We, ph)), qh || (qh = Ee(Hf).toString(36)), this.stylesheets.push(Fe(sh, Hf, qh));
            let yh = '<span class=ML__textarea>';
            if (g() ? yh += '<span class=ML__textarea__textarea tabindex=-1 role=textbox></span>' : yh += `<textarea class=ML__textarea__textarea autocapitalize=off autocomplete=off autocorrect=off spellcheck=false inputmode=none aria-hidden="true" tabindex="${ null !== (vh = sh.tabIndex) && void 0 !== vh ? vh : 0 }"></textarea>`, yh += '</span>', yh += '<span part="container" class="ML__container"><span part="content" class="ML__content"></span>', yh += `<div part='virtual-keyboard-toggle' class="ML__virtual-keyboard-toggle" role="button" data-ML__tooltip="${ l('tooltip.toggle virtual keyboard') }">`, yh += null !== (wh = this.options.virtualKeyboardToggleGlyph) && void 0 !== wh ? wh : Cf, yh += '</div>', yh += '<div class=\'ML__placeholdercontainer\'></div>', yh += '</span>', yh += '<div class="ML__sr-only"><span aria-role="status" aria-live="assertive" aria-atomic="true"></span><span></span></div>', this.element.innerHTML = this.options.createHTML(yh), !this.element.children)
                return;
            let zh = 0;
            const Ah = this.element.children[zh++].firstElementChild;
            this.field = this.element.children[zh].children[0], zh++, this.virtualKeyboardToggle = this.element.querySelector('.ML__virtual-keyboard-toggle'), this.ariaLiveText = this.element.children[zh].children[0], this.accessibleNode = this.element.children[zh++].children[1], this.keystrokeCaptionVisible = !1, this.popoverVisible = !1, this.suggestionIndex = 0, this.inlineShortcutBuffer = [], this.inlineShortcutBufferFlushTimer = 0, this.mode = Ef(this.options), this.smartModeSuppressed = !1, this.style = {}, this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), this.options.readOnly ? this.element.classList.add('ML__isReadOnly') : this.element.classList.remove('ML__isReadOnly'), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.element.querySelector('.ML__content').addEventListener('click', sh => sh.stopImmediatePropagation(), {
                capture: !1
            }), this.field.addEventListener('wheel', this, {
                passive: !1
            }), wg(sh => this.executeCommand(sh), this.virtualKeyboardToggle, {
                default: 'toggleVirtualKeyboard',
                alt: 'toggleVirtualKeyboardAlt',
                shift: 'toggleVirtualKeyboardShift'
            }), this.blurred = !0, je(this.element, 'focus', this), je(this.element, 'blur', this), this.keyboardDelegate = function(Bh, Ch, Dh) {
                let Eh, Fh = null,
                    Gh = null,
                    Hh = !1,
                    Ih = !1,
                    Jh = !1;

                function Kh(Lh) {
                    clearTimeout(Eh), Eh = setTimeout(() => {
                        clearTimeout(Eh), Lh();
                    });
                }

                function Lh() {
                    if (Bh.selectionStart !== Bh.selectionEnd)
                        return;
                    const Mh = Bh.value;
                    Bh.value = '', Mh.length > 0 && Dh.typedText(Mh);
                }
                const Mh = Bh;
                return Mh.addEventListener('keydown', Ch => {
                    Hh || 'Process' === Ch.key || 'CapsLock' === Ch.code || /(Control|Meta|Alt|Shift)(Left|Right)/.test(Ch.code) ? Fh = null : (Fh = Ch, Gh = null, Dh.keystroke(rg(Ch), Ch) ? 'textarea' !== Bh.tagName.toLowerCase() && (1 === Ch.key.length && Dh.typedText(Ch.key), Ch.preventDefault()) : (Fh = null, Bh.value = ''));
                }, !0), Mh.addEventListener('keypress', Bh => {
                    Hh || (Fh && Gh && Dh.keystroke(rg(Fh), Fh), Gh = Bh, Kh(Lh));
                }, !0), Mh.addEventListener('keyup', () => {
                    Hh || Fh && !Gh && Lh();
                }, !0), Mh.addEventListener('paste', Ch => {
                    Bh.focus(), Bh.value = '', Dh.paste(Ch) || Ch.preventDefault(), Ch.stopImmediatePropagation();
                }, !0), Mh.addEventListener('cut', Bh => Dh.cut(Bh), !0), Mh.addEventListener('copy', Bh => Dh.copy(Bh), !0), Mh.addEventListener('blur', Eh => {
                    var Nh, Oh, Ph;
                    if ((null === (Oh = null === (Nh = Eh.relatedTarget) || void 0 === Nh ? void 0 : Nh._mathfield) || void 0 === Oh ? void 0 : Oh.element) === Ch)
                        return Bh.focus(), Eh.preventDefault(), void Eh.stopPropagation();
                    const Qh = null === (Ph = ng.scrim) || void 0 === Ph ? void 0 : Ph.state;
                    return 'open' === Qh || 'opening' === Qh || Eh.relatedTarget === Eh.target.getRootNode().host ? (Eh.preventDefault(), void Eh.stopPropagation()) : void(Jh || Ih || (Jh = !0, Fh = null, Gh = null, Dh.blur && Dh.blur(), Jh = !1, Eh.stopPropagation()));
                }, !0), Mh.addEventListener('focus', Ch => {
                    Jh || Ih || (Ih = !0, Dh.focus && Dh.focus(), sg() === Bh && 'function' == typeof Bh.select && Bh.select(), Ih = !1, Ch.stopPropagation());
                }, !0), Mh.addEventListener('compositionstart', Ch => {
                    Hh = !0, Bh.value = '', Dh.compositionStart && Dh.compositionStart(Ch.data);
                }, !0), Mh.addEventListener('compositionupdate', Bh => {
                    Hh && Dh.compositionUpdate && Dh.compositionUpdate(Bh.data);
                }, !0), Mh.addEventListener('compositionend', Ch => {
                    Bh.value = '', Hh && (Hh = !1, Dh.compositionEnd && Dh.compositionEnd(Ch.data));
                }, !0), Mh.addEventListener('beforeinput', Bh => {
                    Bh.stopImmediatePropagation();
                }), Mh.addEventListener('input', Bh => {
                    if (!Hh && 'insertCompositionText' !== Bh.inputType) {
                        if ('insertFromPaste' === Bh.inputType)
                            return Bh.preventDefault(), void Bh.stopPropagation();
                        Kh(Lh), Bh.preventDefault(), Bh.stopPropagation();
                    }
                }), {
                    cancelComposition: () => {
                        const Nh = Dh.blur,
                            Oh = Dh.focus;
                        Dh.blur = null, Dh.focus = null, Bh.blur(), Bh.focus(), Dh.blur = Nh, Dh.focus = Oh;
                    },
                    blur: () => {
                        'function' == typeof Bh.blur && Bh.blur();
                    },
                    focus: () => {
                        'function' == typeof Bh.focus && Bh.focus();
                    },
                    hasFocus: () => sg() === Bh,
                    setValue: Ch => {
                        Ch ? (Bh.value = Ch, sg() === Bh && 'function' == typeof Bh.select && Bh.select()) : (Bh.value = '', Bh.setAttribute('aria-label', ''));
                    },
                    setAriaLabel: Ch => {
                        Bh.setAttribute('aria-label', 'after: ' + Ch);
                    },
                    moveTo: (Ch, Dh) => {
                        Bh.style.top = `${ Dh }px`, Bh.style.left = `${ Ch }px`;
                    }
                };
            }(Ah, this.element, {
                typedText: sh => bh(this, sh),
                cut: sh => {
                    this.options.readOnly ? this.model.announce('plonk') : Ye(this.model, {
                        inputType: 'deleteByCut'
                    }) && (this.snapshot(), Qd.onCopy(this, sh), setTimeout(() => {
                        ag(this.model, Gd(this.model.selection), 'deleteByCut'), _pf(this);
                    }, 0));
                },
                copy: sh => Qd.onCopy(this, sh),
                paste: sh => {
                    let Bh = !0;
                    return this.options.readOnly && (Bh = !1), Bh && (Bh = Qd.onPaste(this.model.at(this.model.position).mode, this, sh)), Bh || this.model.announce('plonk'), Bh;
                },
                keystroke: (sh, th) => ah(this, sh, th),
                focus: () => this.onFocus(),
                blur: () => this.onBlur(),
                compositionStart: sh => this.onCompositionStart(sh),
                compositionUpdate: sh => this.onCompositionUpdate(sh),
                compositionEnd: sh => this.onCompositionEnd(sh)
            }), e() && 'PointerEvent' in window ? je(this.field, 'pointerdown', this) : je(this.field, 'touchstart:active mousedown', this), je(window, 'resize', this), window.addEventListener('blur', () => {
                ne(this) && this.hasFocus() && window.addEventListener('focus', sh => {
                    sh.target === window && ne(this) && this.focus();
                }, {
                    once: !0
                });
            }, {
                capture: !0
            }), this.model = new Tf({
                mode: Ef(this.options),
                macros: this.options.macros,
                removeExtraneousParentheses: this.options.removeExtraneousParentheses
            }, {
                onSelectionDidChange: sh => this._onSelectionDidChange()
            }, this), this.undoManager = new ug(this.model), xh && Qd.insert('math', this.model, xh, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), this.undoManager.startRecording(), this.undoManager.snapshot(), this.model.setListeners({
                onSelectionDidChange: sh => this._onSelectionDidChange()
            }), _pf(this), e() && document.fonts.ready.then(() => _qf(this));
        }
    }
    var sh, th, uh, vh;
    const wh = e() ? document.createElement('template') : null;
    wh && (wh.innerHTML = '<style>\n:host { display: block; position: relative; overflow: hidden auto;}\n:host([hidden]) { display: none; }\n:host([disabled]) { opacity:  .5; }\n:host(:focus), :host(:focus-within) {\n  outline: Highlight auto 1px;    /* For Firefox */\n  outline: -webkit-focus-ring-color auto 1px;\n}\n:host([readonly]), :host([read-only]) { outline: none; }\n</style>\n<div></div><slot style="display:none"></slot>');
    const xh = new WeakMap();
    class _yh extends HTMLElement {
        static get optionsAttributes() {
            return {
                'default-mode': 'string',
                'fonts-directory': 'string',
                'sounds-directory': 'string',
                'horizontal-spacing-scale': 'string',
                'math-mode-space': 'string',
                'inline-shortcut-timeout': 'string',
                'keypress-vibration': 'on/off',
                'keypress-sound': 'string',
                'plonk-sound': 'string',
                'letter-shape-style': 'string',
                locale: 'string',
                'read-only': 'boolean',
                'remove-extraneous-parentheses': 'on/off',
                'smart-fence': 'on/off',
                'smart-mode': 'on/off',
                'smart-superscript': 'on/off',
                'speech-engine': 'string',
                'speech-engine-rate': 'string',
                'speech-engine-voice': 'string',
                'text-to-speech-markup': 'string',
                'text-to-speech-rules': 'string',
                'virtual-keyboard-layout': 'string',
                'virtual-keyboard-mode': 'string',
                'virtual-keyboard-theme': 'string',
                'virtual-keyboards': 'string',
                'use-shared-virtual-keyboard': 'boolean',
                'shared-virtual-keyboard-target-origin': 'string'
            };
        }
        static get observedAttributes() {
            return [
                ...Object.keys(_yh.optionsAttributes),
                'disabled',
                'readonly',
                'read-only'
            ];
        }
        onPointerDown() {
            window.addEventListener('pointerup', qc => {
                qc.target === this && this.dispatchEvent(new MouseEvent('click', {
                    altKey: qc.altKey,
                    button: qc.button,
                    buttons: qc.buttons,
                    clientX: qc.clientX,
                    clientY: qc.clientY,
                    ctrlKey: qc.ctrlKey,
                    metaKey: qc.metaKey,
                    movementX: qc.movementX,
                    movementY: qc.movementY,
                    relatedTarget: qc.relatedTarget,
                    screenX: qc.screenX,
                    screenY: qc.screenY,
                    shiftKey: qc.shiftKey
                }));
            }, {
                once: !0
            });
        }
        getPlaceholderField(zh) {
            var Ah;
            return null === (Ah = this._mathfield) || void 0 === Ah ? void 0 : Ah.getPlaceholderField(zh);
        }
        addEventListener(zh, Ah, Bh) {
            return super.addEventListener(zh, Ah, Bh);
        }
        removeEventListener(zh, Ah, Bh) {
            super.removeEventListener(zh, Ah, Bh);
        }
        get mode() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this._mathfield) || void 0 === zh ? void 0 : zh.mode) && void 0 !== Ah ? Ah : 'math';
        }
        set mode(zh) {
            this._mathfield && (this._mathfield.mode = zh);
        }
        get computeEngine() {
            if (this._mathfield)
                return this._mathfield.computeEngine;
        }
        set computeEngine(zh) {
            this._mathfield && this._mathfield.setOptions({
                computeEngine: zh
            });
        }
        get expression() {
            if (this._mathfield)
                return this._mathfield.expression;
        }
        set expression(zh) {
            var Ah, Bh;
            if (!this._mathfield)
                return;
            const Ch = null !== (Bh = null === (Ah = this.computeEngine) || void 0 === Ah ? void 0 : Ah.box(zh).latex) && void 0 !== Bh ? Bh : null;
            null !== Ch && this._mathfield.setValue(Ch);
        }
        get errors() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this._mathfield) || void 0 === zh ? void 0 : zh.errors) && void 0 !== Ah ? Ah : [];
        }
        get placeholders() {
            if (!this._mathfield)
                return {};
            const zh = {};
            for (const [Ah, Bh] of this._mathfield.placeholders)
                zh[Ah] = Bh.field;
            return zh;
        }
        getOptions(zh) {
            return this._mathfield ? _Bf(this._mathfield.options, zh) : xh.has(this) ? _Bf(Af(Df(), xh.get(this).options), zh) : null;
        }
        getOption(zh) {
            return this.getOptions([zh])[zh];
        }
        setOptions(zh) {
            if (this._mathfield)
                this._mathfield.setOptions(zh), this._mathfield.placeholders.forEach(rc => {
                    rc.field.setOptions({
                        ...zh,
                        readOnly: !1
                    });
                });
            else if (xh.has(this)) {
                const Ah = {
                    ...xh.get(this).options,
                    ...zh
                };
                xh.set(this, {
                    ...xh.get(this),
                    selection: {
                        ranges: Ah.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ]
                    },
                    options: Ah
                });
            } else
                xh.set(this, {
                    value: void 0,
                    selection: {
                        ranges: [
                            [
                                0,
                                0
                            ]
                        ]
                    },
                    options: zh
                });
            ! function(Ah) {
                const Bh = Df(),
                    Ch = Ah.getOptions();
                Object.keys(_yh.optionsAttributes).forEach(d => {
                    const Dh = _zh(d);
                    'on/off' === _yh.optionsAttributes[d] ? Bh[Dh] !== Ch[Dh] ? Ah.setAttribute(d, Ch[Dh] ? 'on' : 'off') : Ah.removeAttribute(d) : Bh[Dh] !== Ch[Dh] && ('boolean' === _yh.optionsAttributes[d] ? Ch[Dh] ? Ah.setAttribute(d, '') : Ah.removeAttribute(d) : 'string' != typeof Ch[Dh] && 'number' != typeof Ch[Dh] || Ah.setAttribute(d, Ch[Dh].toString()));
                });
            }(this);
        }
        executeCommand(zh) {
            var Ah, Bh;
            return null !== (Bh = null === (Ah = this._mathfield) || void 0 === Ah ? void 0 : Ah.executeCommand(zh)) && void 0 !== Bh && Bh;
        }
        getValue(zh, Ah, Bh) {
            var Ch, Dh;
            if (this._mathfield)
                return this._mathfield.model.getValue(zh, Ah, Bh);
            if (xh.has(this)) {
                let Eh, Fh, Gh;
                if (Of(zh) ? ([Hh, Ih] = zh.ranges[0], Gh = Ah) : Nf(zh) ? ([Jh, Kh] = zh, Gh = Ah) : Mf(zh) && Mf(Ah) ? (Jh = zh, Kh = Ah, Gh = Bh) : (Jh = 0, Kh = -1, Gh = zh), (void 0 === Gh || 'latex' === Gh) && 0 === Jh && -1 === Kh)
                    return null !== (Dh = null !== (Ch = xh.get(this).value) && void 0 !== Ch ? Ch : this.textContent) && void 0 !== Dh ? Dh : '';
            }
            return '';
        }
        setValue(zh, Ah) {
            if (this._mathfield && void 0 !== zh)
                return Ah || (Ah = {
                    suppressChangeNotifications: !0
                }), void this._mathfield.setValue(zh, Ah);
            if (xh.has(this)) {
                const Bh = xh.get(this).options;
                return void xh.set(this, {
                    value: zh,
                    selection: {
                        ranges: Bh.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ],
                        direction: 'forward'
                    },
                    options: Bh
                });
            }
            const Bh = _Ah(this);
            xh.set(this, {
                value: zh,
                selection: {
                    ranges: Bh.readOnly ? [
                        [
                            0,
                            0
                        ]
                    ] : [
                        [
                            0,
                            -1
                        ]
                    ],
                    direction: 'forward'
                },
                options: Bh
            });
        }
        hasFocus() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this._mathfield) || void 0 === zh ? void 0 : zh.hasFocus()) && void 0 !== Ah && Ah;
        }
        get virtualKeyboardState() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this._mathfield) || void 0 === zh ? void 0 : zh.virtualKeyboardState) && void 0 !== Ah ? Ah : 'hidden';
        }
        set virtualKeyboardState(zh) {
            this._mathfield && (this._mathfield.virtualKeyboardState = zh);
        }
        focus() {
            super.focus();
        }
        blur() {
            var zh;
            null === (zh = this._mathfield) || void 0 === zh || zh.blur(), super.blur();
        }
        select() {
            var zh;
            null === (zh = this._mathfield) || void 0 === zh || zh.select();
        }
        insert(zh, Ah) {
            var Bh, Ch;
            return null !== (Ch = null === (Bh = this._mathfield) || void 0 === Bh ? void 0 : Bh.insert(zh, Ah)) && void 0 !== Ch && Ch;
        }
        applyStyle(zh, Ah) {
            var Bh;
            return null === (Bh = this._mathfield) || void 0 === Bh ? void 0 : Bh.applyStyle(zh, Ah);
        }
        get caretPoint() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this._mathfield) || void 0 === zh ? void 0 : zh.getCaretPoint()) && void 0 !== Ah ? Ah : null;
        }
        set caretPoint(zh) {
            var Ah;
            zh && (null === (Ah = this._mathfield) || void 0 === Ah || Ah.setCaretPoint(zh.x, zh.y));
        }
        setCaretPoint(zh, Ah) {
            var Bh, Ch;
            return null !== (Ch = null === (Bh = this._mathfield) || void 0 === Bh ? void 0 : Bh.setCaretPoint(zh, Ah)) && void 0 !== Ch && Ch;
        }
        offsetFromPoint(zh, Ah, Bh) {
            return this._mathfield ? lh(this._mathfield, zh, Ah, Bh) : -1;
        }
        hitboxFromOffset(zh) {
            if (!this._mathfield)
                return null;
            const Ah = this._mathfield.model.at(zh);
            if (!Ah)
                return null;
            const Bh = se(this._mathfield, Ah);
            return Bh ? new DOMRect(Bh.left, Bh.top, Bh.right - Bh.left, Bh.bottom - Bh.top) : null;
        }
        resetUndo() {
            var zh;
            null === (zh = this._mathfield) || void 0 === zh || zh.resetUndo();
        }
        canUndo() {
            return !!this._mathfield && this._mathfield.canUndo();
        }
        canRedo() {
            return !!this._mathfield && this._mathfield.canRedo();
        }
        connectedCallback() {
            var zh, Ah, Bh;
            this.hasAttribute('role') || this.setAttribute('role', 'textbox'), this.setAttribute('dir', 'ltr'), this.hasAttribute('aria-label') || this.setAttribute('aria-label', 'math input field'), this.setAttribute('contenteditable', 'true'), this.setAttribute('aria-multiline', 'false'), this.hasAttribute('tabindex') || this.setAttribute('tabindex', '0');
            const Ch = this.shadowRoot.querySelector('slot:not([name])');
            try {
                this._style = Ch.assignedElements().filter(zh => 'style' === zh.tagName.toLowerCase()).map(zh => zh.textContent).join('');
            } catch (zh) {}
            if (this._style) {
                const Dh = document.createElement('style');
                Dh.textContent = this._style, this.shadowRoot.appendChild(Dh);
            }
            try {
                const Dh = Ch.assignedElements().filter(Dh => 'script' === Dh.tagName.toLowerCase() && 'application/json' === Dh.type).map(Dh => Dh.textContent).join('');
                Dh && this.setOptions(JSON.parse(Dh));
            } catch (zh) {}
            let Dh = '';
            if (Dh = this.hasAttribute('value') ? null !== (zh = this.getAttribute('value')) && void 0 !== zh ? zh : '' : null !== (Ah = null == Ch ? void 0 : Ch.assignedNodes().map(zh => 3 === zh.nodeType ? zh.textContent : '').join('').trim()) && void 0 !== Ah ? Ah : '', this._mathfield = new rh(this.shadowRoot.querySelector(':host > div'), {
                    ...xh.has(this) ? xh.get(this).options : _Ah(this),
                    eventSink: this,
                    value: Dh
                }), !xh.has(this)) {
                this.upgradeProperty('disabled'), this.upgradeProperty('readonly');
                for (const Eh of Object.keys(_yh.optionsAttributes))
                    this.upgradeProperty(_zh(Eh));
            }
            (null === (Bh = this._mathfield) || void 0 === Bh ? void 0 : Bh.model) ? (xh.has(this) && this._mathfield.model.deferNotifications({
                content: !1,
                selection: !1
            }, () => {
                const Eh = xh.get(this).value;
                void 0 !== Eh && this._mathfield.setValue(Eh), this._mathfield.model.selection = xh.get(this).selection, xh.delete(this);
            }), Ch.addEventListener('slotchange', zh => {
                if (zh.target !== Ch)
                    return;
                const Eh = Ch.assignedNodes().map(zh => 3 === zh.nodeType ? zh.textContent : '').join('').trim();
                Eh !== this._slotValue && (this._mathfield ? this._mathfield.setValue(Eh) : this.value = Eh);
            }), this.dispatchEvent(new Event('mount', {
                cancelable: !1,
                bubbles: !0,
                composed: !0
            }))) : this._mathfield = null;
        }
        disconnectedCallback() {
            if (this.dispatchEvent(new Event('unmount', {
                    cancelable: !1,
                    bubbles: !0,
                    composed: !0
                })), !this._mathfield)
                return;
            const zh = _Bf(this._mathfield.options, Object.keys(_yh.optionsAttributes).map(zh => _zh(zh)));
            xh.set(this, {
                value: this._mathfield.getValue(),
                selection: this._mathfield.model.selection,
                options: zh
            }), this._mathfield.dispose(), this._mathfield = null;
        }
        upgradeProperty(zh) {
            if (this.hasOwnProperty(zh)) {
                const Ah = this[zh];
                delete this[zh], 'readonly' !== zh && 'read-only' !== zh || (zh = 'readOnly'), this[zh] = Ah;
            }
        }
        attributeChangedCallback(zh, Ah, Bh) {
            if (Ah === Bh)
                return;
            const Ch = null !== Bh;
            switch (zh) {
                case 'disabled':
                    this.disabled = Ch;
                    break;
                case 'read-only':
                case 'readonly':
                    this.readOnly = Ch;
            }
        }
        get readonly() {
            return this.hasAttribute('readonly') || this.hasAttribute('read-only');
        }
        set readonly(zh) {
            const Ah = Boolean(zh);
            Ah ? (this.setAttribute('readonly', ''), this.setAttribute('disabled', ''), this.setAttribute('aria-readonly', 'true')) : (this.removeAttribute('readonly'), this.removeAttribute('read-only'), this.removeAttribute('disabled'), this.removeAttribute('aria-readonly')), this.setOptions({
                readOnly: Ah
            });
        }
        get disabled() {
            return this.hasAttribute('disabled');
        }
        set disabled(zh) {
            const Ah = Boolean(zh);
            Ah ? this.setAttribute('disabled', '') : this.removeAttribute('disabled'), this.setAttribute('aria-disabled', Ah ? 'true' : 'false'), this.setOptions({
                readOnly: Ah
            });
        }
        get value() {
            return this.getValue();
        }
        set value(zh) {
            this.setValue(zh);
        }
        get defaultMode() {
            return this.getOption('defaultMode');
        }
        set defaultMode(zh) {
            this.setOptions({
                defaultMode: zh
            });
        }
        get fontsDirectory() {
            return this.getOption('fontsDirectory');
        }
        set fontsDirectory(zh) {
            this.setOptions({
                fontsDirectory: zh
            });
        }
        get mathModeSpace() {
            return this.getOption('mathModeSpace');
        }
        set mathModeSpace(zh) {
            this.setOptions({
                mathModeSpace: zh
            });
        }
        get inlineShortcutTimeout() {
            return this.getOption('inlineShortcutTimeout');
        }
        set inlineShortcutTimeout(zh) {
            this.setOptions({
                inlineShortcutTimeout: zh
            });
        }
        get keypressVibration() {
            return this.getOption('keypressVibration');
        }
        set keypressVibration(zh) {
            this.setOptions({
                keypressVibration: zh
            });
        }
        get keypressSound() {
            return this.getOption('keypressSound');
        }
        set keypressSound(zh) {
            this.setOptions({
                keypressSound: zh
            });
        }
        get plonkSound() {
            var zh;
            return null !== (zh = this.getOption('plonkSound')) && void 0 !== zh ? zh : null;
        }
        set plonkSound(zh) {
            this.setOptions({
                plonkSound: zh
            });
        }
        get letterShapeStyle() {
            return this.getOption('letterShapeStyle');
        }
        set letterShapeStyle(zh) {
            this.setOptions({
                letterShapeStyle: zh
            });
        }
        get locale() {
            return this.getOption('locale');
        }
        set locale(zh) {
            this.setOptions({
                locale: zh
            });
        }
        get readOnly() {
            return this.getOption('readOnly');
        }
        set readOnly(zh) {
            this.setOptions({
                readOnly: zh
            });
        }
        get removeExtraneousParentheses() {
            return this.getOption('removeExtraneousParentheses');
        }
        set removeExtraneousParentheses(zh) {
            this.setOptions({
                removeExtraneousParentheses: zh
            });
        }
        get smartFence() {
            return this.getOption('smartFence');
        }
        set smartFence(zh) {
            this.setOptions({
                smartFence: zh
            });
        }
        get smartMode() {
            return this.getOption('smartMode');
        }
        set smartMode(zh) {
            this.setOptions({
                smartMode: zh
            });
        }
        get smartSuperscript() {
            return this.getOption('smartSuperscript');
        }
        set smartSuperscript(zh) {
            this.setOptions({
                smartSuperscript: zh
            });
        }
        get speechEngine() {
            return this.getOption('speechEngine');
        }
        set speechEngine(zh) {
            this.setOptions({
                speechEngine: zh
            });
        }
        get speechEngineRate() {
            return this.getOption('speechEngineRate');
        }
        set speechEngineRate(zh) {
            this.setOptions({
                speechEngineRate: zh
            });
        }
        get speechEngineVoice() {
            return this.getOption('speechEngineVoice');
        }
        set speechEngineVoice(zh) {
            this.setOptions({
                speechEngineVoice: zh
            });
        }
        get textToSpeechMarkup() {
            return this.getOption('textToSpeechMarkup');
        }
        set textToSpeechMarkup(zh) {
            this.setOptions({
                textToSpeechMarkup: zh
            });
        }
        get textToSpeechRules() {
            return this.getOption('textToSpeechRules');
        }
        set textToSpeechRule(zh) {
            this.setOptions({
                textToSpeechRules: zh
            });
        }
        get virtualKeyboardLayout() {
            return this.getOption('virtualKeyboardLayout');
        }
        set virtualKeyboardLayout(zh) {
            this.setOptions({
                virtualKeyboardLayout: zh
            });
        }
        get virtualKeyboardMode() {
            return this.getOption('virtualKeyboardMode');
        }
        set virtualKeyboardMode(zh) {
            this.setOptions({
                virtualKeyboardMode: zh
            });
        }
        get virtualKeyboardTheme() {
            return this.getOption('virtualKeyboardTheme');
        }
        set virtualKeyboardTheme(zh) {
            this.setOptions({
                virtualKeyboardTheme: zh
            });
        }
        get virtualKeyboards() {
            return this.getOption('virtualKeyboards');
        }
        set virtualKeyboards(zh) {
            this.setOptions({
                virtualKeyboards: zh
            });
        }
        get useSharedVirtualKeyboard() {
            return this.getOption('useSharedVirtualKeyboard');
        }
        set useSharedVirtualKeyboard(zh) {
            this.setOptions({
                useSharedVirtualKeyboard: zh
            });
        }
        get sharedVirtualKeyboardTargetOrigin() {
            return this.getOption('sharedVirtualKeyboardTargetOrigin');
        }
        set sharedVirtualKeyboardTargetOrigin(zh) {
            this.setOptions({
                sharedVirtualKeyboardTargetOrigin: zh
            });
        }
        get selection() {
            return this._mathfield ? this._mathfield.model.selection : xh.has(this) ? xh.get(this).selection : {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'forward'
            };
        }
        set selection(zh) {
            'number' == typeof zh && (zh = {
                ranges: [
                    [
                        zh,
                        zh
                    ]
                ]
            }), this._mathfield ? this._mathfield.model.selection = zh : xh.has(this) ? xh.set(this, {
                ...xh.get(this),
                selection: zh
            }) : xh.set(this, {
                value: void 0,
                selection: zh,
                options: _Ah(this)
            });
        }
        get selectionIsCollapsed() {
            const zh = this.selection;
            return 1 === zh.ranges.length && zh.ranges[0][0] === zh.ranges[0][1];
        }
        get position() {
            return this._mathfield ? this._mathfield.model.position : xh.has(this) ? xh.get(this).selection.ranges[0][0] : 0;
        }
        set position(zh) {
            this._mathfield && (this._mathfield.model.position = zh), xh.has(this) ? xh.set(this, {
                ...xh.get(this),
                selection: {
                    ranges: [
                        [
                            zh,
                            zh
                        ]
                    ]
                }
            }) : xh.set(this, {
                value: void 0,
                selection: {
                    ranges: [
                        [
                            zh,
                            zh
                        ]
                    ]
                },
                options: _Ah(this)
            });
        }
        getOffsetDepth(zh) {
            var Ah, Bh;
            return this._mathfield && (Bh = (null === (Ah = this._mathfield.model.at(zh)) || void 0 === Ah ? void 0 : Ah.treeDepth) - 2, 1) && void 0 !== Bh ? Bh : 0;
        }
        get lastOffset() {
            var zh, Ah;
            return null !== (Ah = null === (zh = this._mathfield) || void 0 === zh ? void 0 : zh.model.lastOffset) && void 0 !== Ah ? Ah : -1;
        }
        constructor(zh) {
            f(), super(), this.attachShadow({
                mode: 'open'
            }), this.shadowRoot.append(wh.content.cloneNode(!0));
            const Ah = this.shadowRoot.querySelector('slot:not([name])');
            this._slotValue = Ah.assignedNodes().map(zh => 3 === zh.nodeType ? zh.textContent : '').join('').trim(), zh && this.setOptions(zh), this.shadowRoot.host.addEventListener('pointerdown', zh => this.onPointerDown(), !0), this.shadowRoot.host.addEventListener('focus', () => {
                var Bh;
                return null === (Bh = this._mathfield) || void 0 === Bh ? void 0 : Bh.focus();
            }, !0), this.shadowRoot.host.addEventListener('blur', () => {
                var Bh;
                return null === (Bh = this._mathfield) || void 0 === Bh ? void 0 : Bh.blur();
            }, !0);
        }
    }

    function _zh(Ah) {
        return Ah.toLowerCase().replace(/[^a-zA-Z\d]+(.)/g, (Ah, rc) => rc.toUpperCase());
    }

    function _Ah(Bh) {
        const Ch = {},
            Dh = _yh.optionsAttributes;
        return Object.keys(Dh).forEach(d => {
            if (Bh.hasAttribute(d)) {
                const Eh = Bh.getAttribute(d);
                'boolean' === Dh[d] ? Ch[_zh(d)] = !0 : 'on/off' === Dh[d] ? Ch[_zh(d)] = 'on' === Eh || 'off' !== Eh && void 0 : 'number' === Dh[d] ? Ch[_zh(d)] = Number.parseFloat(null != Eh ? Eh : '0') : Ch[_zh(d)] = Eh;
            } else
                'boolean' === Dh[d] && (Ch[_zh(d)] = !1);
        }), Ch;
    }

    function Bh(Ch, Dh, Eh) {
        let Fh = Eh,
            Gh = 0;
        const Hh = Ch.length;
        for (; Fh < Dh.length;) {
            const Ih = Dh[Fh];
            if (Gh <= 0 && Dh.slice(Fh, Fh + Hh) === Ch)
                return Fh;
            '\\' === Ih ? Fh++ : '{' === Ih ? Gh++ : '}' === Ih && Gh--, Fh++;
        }
        return -1;
    }

    function Ch(Dh, Eh, Fh, Gh, Hh = 'latex') {
        const Ih = [];
        for (const Jh of Dh)
            if ('text' === Jh.type) {
                const Kh = Jh.data;
                let Lh, Mh = !0,
                    Nh = 0;
                Lh = Kh.indexOf(Eh), -1 !== Lh && (Nh = Lh, Nh > 0 && Ih.push({
                    type: 'text',
                    data: Kh.slice(0, Nh)
                }), Mh = !1);
                let Oh = !1;
                for (; !Oh;) {
                    if (Mh) {
                        if (Lh = Kh.indexOf(Eh, Nh), -1 === Lh) {
                            Oh = !0;
                            break;
                        }
                        Nh !== Lh && Ih.push({
                            type: 'text',
                            data: Kh.slice(Nh, Lh)
                        }), Nh = Lh;
                    } else {
                        if (Lh = Bh(Fh, Kh, Nh + Eh.length), -1 === Lh) {
                            Oh = !0;
                            break;
                        }
                        let Ph = Kh.slice(Nh + Eh.length, Lh);
                        'ascii-math' === Hh && ([, Qh] = Jd(Qh, {
                            format: 'ascii-math'
                        })), Ih.push({
                            type: 'math',
                            data: Qh,
                            rawData: Kh.slice(Nh, Lh + Fh.length),
                            mathstyle: Gh
                        }), Nh = Lh + Fh.length;
                    }
                    Mh = !Mh;
                }
                Nh < Kh.length && Ih.push({
                    type: 'text',
                    data: Kh.slice(Nh)
                });
            } else
                Ih.push(Jh);
        return Ih;
    }

    function Dh(Eh, Fh, Gh) {
        let Hh = [{
            type: 'text',
            data: Eh
        }];
        return (null == Fh ? void 0 : Fh.inline) && Fh.inline.forEach(([Ih, Jh]) => {
            Hh = Ch(Hh, Ih, Jh, 'textstyle');
        }), (null == Jh ? void 0 : Jh.display) && Jh.display.forEach(([Kh, Lh]) => {
            Hh = Ch(Hh, Kh, Lh, 'displaystyle');
        }), (null == Gh ? void 0 : Gh.inline) && Gh.inline.forEach(([Mh, Nh]) => {
            Hh = Ch(Hh, Mh, Nh, 'textstyle', 'ascii-math');
        }), (null == Gh ? void 0 : Gh.display) && Gh.display.forEach(([Oh, Ph]) => {
            Hh = Ch(Hh, Oh, Ph, 'displaystyle', 'ascii-math');
        }), Hh;
    }

    function Eh(Fh, Gh, Hh, Ih) {
        var Jh;
        const Kh = function(Lh, Mh, Nh, Oh) {
                f();
                try {
                    const Ph = Mh.renderToMarkup(Lh, {
                            mathstyle: Nh,
                            format: 'html'
                        }),
                        Qh = document.createElement('displaystyle' === Nh ? 'div' : 'span');
                    return Qh.setAttribute('aria-hidden', 'true'), Qh.innerHTML = Mh.createHTML ? Mh.createHTML(Ph) : Ph, Qh;
                } catch (Mh) {
                    if (Oh)
                        return document.createTextNode(Lh);
                }
                return null;
            }(Fh, Hh, Gh || 'displaystyle', Ih),
            Lh = null !== (Jh = Hh.renderAccessibleContent) && void 0 !== Jh ? Jh : '';
        if (Kh && /\b(mathml|speakable-text)\b/i.test(Lh)) {
            f();
            const Mh = document.createElement('span');
            if (/\bmathml\b/i.test(Lh) && Hh.renderToMathML && Mh.append(function(Nh, Oh) {
                    f();
                    const Ph = document.createElement('span');
                    try {
                        const Qh = '<math xmlns=\'http://www.w3.org/1998/Math/MathML\'>' + Oh.renderToMathML(Nh) + '</math>';
                        Ph.innerHTML = Oh.createHTML ? Oh.createHTML(Qh) : Qh;
                    } catch (Oh) {
                        Ph.textContent = Nh;
                    }
                    return Ph.className = 'ML__sr-only', Ph;
                }(Fh, Hh)), /\bspeakable-text\b/i.test(Lh) && Hh.renderToSpeakableText) {
                const Nh = document.createElement('span'),
                    Oh = Hh.renderToSpeakableText(Fh, Hh);
                Nh.innerHTML = Hh.createHTML ? Hh.createHTML(Oh) : Oh, Nh.className = 'ML__sr-only', Mh.append(Nh);
            }
            return Mh.append(Kh), Mh;
        }
        return Kh;
    }

    function Fh(Gh, Hh) {
        var Ih, Jh, Kh;
        f();
        let Lh = null;
        if ((null === (Ih = Hh.TeX) || void 0 === Ih ? void 0 : Ih.processEnvironments) && /^\s*\\begin/.test(Gh)) {
            Lh = document.createDocumentFragment();
            const Mh = Eh(Gh, '', Hh, !0);
            Mh && Lh.appendChild(Mh);
        } else {
            if (!Gh.trim())
                return null;
            const Mh = Dh(Gh, null === (Jh = Hh.TeX) || void 0 === Jh ? void 0 : Jh.delimiters, null === (Kh = Hh.asciiMath) || void 0 === Kh ? void 0 : Kh.delimiters);
            if (1 === Mh.length && 'text' === Mh[0].type)
                return null;
            Lh = document.createDocumentFragment();
            for (const Nh of Mh)
                if ('text' === Nh.type)
                    Lh.appendChild(document.createTextNode(Nh.data));
                else {
                    const Oh = Eh(Nh.data, 'textstyle' === Nh.mathstyle ? 'textstyle' : 'displaystyle', Hh, !0);
                    Oh && Lh.appendChild(Oh);
                }
        }
        return Lh;
    }

    function Gh(Hh, Ih) {
        var Jh, Kh, Lh, Mh, Nh, Oh, Ph, Qh, Rh, Sh, Th, Uh, Vh, Wh, Xh, Yh;
        if (1 === Hh.childNodes.length && 3 === Hh.childNodes[0].nodeType) {
            const Zh = null !== (Jh = Hh.childNodes[0].textContent) && void 0 !== Jh ? Jh : '';
            if ((null === (Kh = Ih.TeX) || void 0 === Kh ? void 0 : Kh.processEnvironments) && /^\s*\\begin/.test(Zh)) {
                Hh.textContent = '';
                const $h = Eh(Zh, '', Ih, !0);
                return void($h && Hh.append($h));
            }
            const $h = Dh(Zh, null === (Lh = Ih.TeX) || void 0 === Lh ? void 0 : Lh.delimiters, null === (Mh = Ih.asciiMath) || void 0 === Mh ? void 0 : Mh.delimiters);
            if (1 === $h.length && 'math' === $h[0].type) {
                Hh.textContent = '';
                const ai = Eh($h[0].data, 'textstyle' === $h[0].mathstyle ? 'textstyle' : 'displaystyle', Ih, !0);
                return void(ai && Hh.append(ai));
            }
            if (1 === $h.length && 'text' === $h[0].type)
                return;
        }
        for (let Zh = Hh.childNodes.length - 1; Zh >= 0; Zh--) {
            const $h = Hh.childNodes[Zh];
            if (3 === $h.nodeType) {
                const ai = Fh(null !== (Nh = $h.textContent) && void 0 !== Nh ? Nh : '', Ih);
                ai && (Zh += ai.childNodes.length - 1, $h.replaceWith(ai));
            } else if (1 === $h.nodeType) {
                const ai = $h,
                    bi = $h.nodeName.toLowerCase();
                if ('script' === bi) {
                    const ci = $h;
                    let di;
                    if (null === (Oh = Ih.processScriptTypePattern) || void 0 === Oh ? void 0 : Oh.test(ci.type))
                        di = null !== (Ph = ci.textContent) && void 0 !== Ph ? Ph : '';
                    else if (null === (Qh = Ih.processMathJSONScriptTypePattern) || void 0 === Qh ? void 0 : Qh.test(ci.type))
                        try {
                            di = null === (Rh = Ih.serializeToLatex) || void 0 === Rh ? void 0 : Rh.call(Ih, JSON.parse(null !== (Sh = ci.textContent) && void 0 !== Sh ? Sh : ''));
                        } catch (Hh) {}
                    if (di) {
                        let ei = 'displaystyle';
                        for (const fi of ci.type.split(';')) {
                            const [gi, hi] = fi.toLowerCase().split('=');
                            'mode' === gi.trim() && (ei = 'display' === hi.trim() ? 'displaystyle' : 'textstyle');
                        }
                        const gi = Eh(di, ei, fi, !0);
                        gi && ci.parentNode.replaceChild(gi, ci);
                    }
                } else if (null !== (Uh = null === (Th = Ih.processClassPattern) || void 0 === Th ? void 0 : Th.test(ai.className)) && void 0 !== Uh && Uh || !(null !== (Wh = null === (Vh = Ih.skipTags) || void 0 === Vh ? void 0 : Vh.includes(bi)) && void 0 !== Wh && Wh || null !== (Yh = null === (Xh = Ih.ignoreClassPattern) || void 0 === Xh ? void 0 : Xh.test(ai.className)) && void 0 !== Yh && Yh))
                    if (1 === Hh.childNodes.length && 3 === Hh.childNodes[0].nodeType) {
                        const ci = Hh.textContent;
                        Hh.textContent = '';
                        const di = Eh(null != ci ? ci : '', 'displaystyle', Ih, !0);
                        di && Hh.append(di);
                    } else
                        Gh(ai, Ih);
            }
        }
    }
    e() && !(null === (sh = window.customElements) || void 0 === sh ? void 0 : sh.get('math-field')) && (null !== (th = globalThis[vh = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== th || (globalThis[vh] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')].version = '0.86.0', window.MathfieldElement = _yh, null === (uh = window.customElements) || void 0 === uh || uh.define('math-field', _yh));
    const Hh = {
        skipTags: [
            'math-field',
            'noscript',
            'style',
            'textarea',
            'pre',
            'code',
            'annotation',
            'annotation-xml'
        ],
        processScriptType: 'math/tex',
        processMathJSONScriptType: 'math/json',
        ignoreClass: 'tex2jax_ignore',
        processClass: 'tex2jax_process',
        renderAccessibleContent: 'mathml',
        asciiMath: {
            delimiters: {
                display: [
                    [
                        '`',
                        '`'
                    ]
                ]
            }
        },
        TeX: {
            processEnvironments: !0,
            delimiters: {
                inline: [
                    [
                        '\\(',
                        '\\)'
                    ]
                ],
                display: [
                    [
                        '$$',
                        '$$'
                    ],
                    [
                        '\\[',
                        '\\]'
                    ]
                ]
            }
        }
    };

    function Ih(Jh, Kh) {
        var Lh, Mh, Nh, Oh;
        try {
            const Ph = {
                ...Hh,
                ...Kh
            };
            Ph.ignoreClassPattern = new RegExp(null !== (Lh = Ph.ignoreClass) && void 0 !== Lh ? Lh : ''), Ph.processClassPattern = new RegExp(null !== (Mh = Ph.processClass) && void 0 !== Mh ? Mh : ''), Ph.processScriptTypePattern = new RegExp(null !== (Nh = Ph.processScriptType) && void 0 !== Nh ? Nh : ''), Ph.processMathJSONScriptTypePattern = new RegExp(null !== (Oh = Ph.processMathJSONScriptType) && void 0 !== Oh ? Oh : ''), null !== Ph.fontsDirectory && Lf(Ph.fontsDirectory), Fe(null, We, Ee(We).toString(36)), Gh(Jh, Ph);
        } catch (Jh) {
            Error;
        }
    }

    function Jh(Kh, Lh, Mh = 3000, Nh = '$0') {
        for (const Oh of Lh)
            x[Oh] && (x[Oh].frequency = Mh, x[Oh].category = Kh, x[Oh].template = Nh.replace(/\$0/g, Oh)), z[Oh] && (z[Oh] = {
                ...z[Oh],
                frequency: Mh,
                category: Kh,
                template: Nh.replace(/\$0/g, Oh)
            });
    }

    function _Kh() {
        var Lh, Mh;
        return null !== (Lh = globalThis[Mh = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== Lh || (globalThis[Mh] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')];
    }

    function Lh(Mh, Nh) {
        var Oh;
        (Nh = null != Nh ? Nh : {}).mathstyle = null !== (Oh = Nh.mathstyle) && void 0 !== Oh ? Oh : 'displaystyle';
        const Ph = td(),
            Qh = new kc('root', Ph);
        Qh.body = _Qc(Mh, Ph, {
            parseMode: 'math',
            mathstyle: Nh.mathstyle
        });
        const Rh = Qh.render(new Db({
            registers: Ph.registers,
            renderPlaceholder: () => new Nb(160, {
                maxFontSize: 1
            })
        }, {
            fontSize: 5,
            letterShapeStyle: Ph.letterShapeStyle
        }, Nh.mathstyle));
        return Rh ? (Sb(Rh), Pb(Rh), _Tb(Rh, {
            classes: 'ML__mathlive'
        }).toMarkup()) : '';
    }

    function Mh(Nh, Oh = {}) {
        return _ae(_Qc(Nh, td(), {
            parseMode: 'math',
            args: () => '',
            mathstyle: 'displaystyle'
        }), Oh);
    }

    function Nh(Oh, Ph = {}) {
        return ie(_Qc(Oh, td(), {
            parseMode: 'math',
            mathstyle: 'displaystyle'
        }), Ph);
    }
    let Oh;

    function Ph(Qh) {
        var Rh, Sh;
        if (!Oh) {
            const Th = null === (Rh = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === Rh ? void 0 : Rh.ComputeEngine;
            Th && (Oh = new Th());
        }
        return null !== (Sh = null == Oh ? void 0 : Oh.box(Qh).latex) && void 0 !== Sh ? Sh : '';
    }

    function _Qh(Rh, Sh) {
        var Th, Uh, Vh, Wh;
        const Xh = function(Yh) {
            if ('string' == typeof Yh && e()) {
                const Zh = document.getElementById(Yh);
                if (null === Zh)
                    throw new Error(`The element with ID "${ Yh }" could not be found.`);
                return Zh;
            }
            return 'string' == typeof Yh ? null : Yh;
        }(Rh);
        if (!Xh)
            return;
        const Yh = null != Sh ? Sh : {};
        null !== (Th = Yh.renderToMarkup) && void 0 !== Th || (Yh.renderToMarkup = Lh), null !== (Uh = Yh.renderToMathML) && void 0 !== Uh || (Yh.renderToMathML = Mh), null !== (Vh = Yh.renderToSpeakableText) && void 0 !== Vh || (Yh.renderToSpeakableText = Nh), null !== (Wh = Yh.serializeToLatex) && void 0 !== Wh || (Yh.serializeToLatex = Ph), Ih(Xh, Yh);
    }
    Jh('Trigonometry', [
        '\\cos',
        '\\sin',
        '\\tan'
    ], 4000), Jh('Trigonometry', [
        '\\arccos',
        '\\arcsin',
        '\\arctan',
        '\\arctg',
        '\\arcctg',
        '\\arcsec',
        '\\arccsc',
        '\\arsinh',
        '\\arcosh',
        '\\artanh',
        '\\arcsech',
        '\\arccsch',
        '\\arg',
        '\\ch',
        '\\cosec',
        '\\cosh',
        '\\cot',
        '\\cotg',
        '\\coth',
        '\\csc',
        '\\ctg',
        '\\cth',
        '\\lg',
        '\\lb',
        '\\sec',
        '\\sinh',
        '\\sh',
        '\\tanh',
        '\\tg',
        '\\th'
    ], 2000), Jh('Functions', [
        '\\ln',
        '\\log',
        '\\exp',
        '\\lim'
    ], 4000), Jh('Functions', [
        '\\dim',
        '\\ker',
        '\\deg',
        '\\det',
        '\\mod',
        '\\min',
        '\\max'
    ], 3000), Jh('Functions', ['\\hom'], 1200), Jh('Decoration', ['\\rule'], 200, '$0{2em}{1em}'), Jh('Decoration', [
        '\\color',
        '\\textcolor'
    ], 200, '{$0{m0}A}{$0{m1}B}{$0{m2}C }{$0{m3}a}{$0{m4}b}{$0{m5}c}{$0{m6}8}'), Jh('Decoration', [
        '\\overline',
        '\\underline'
    ], 3000, '$0{\\placeholder{}}'), Jh('Decoration', ['\\enclose'], 1200, '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{x=0}'), Jh('Decoration', ['\\fcolorbox'], 1200, '\\fcolorbox{#cd0030}{#ffd400}{\\unicode{"2B1A}}'), Jh('Decoration', ['\\colorbox'], 1200, '\\colorbox{#fbc0bd}{\\unicode{"2B1A}}'), Jh('Decoration', [
        '\\boxed',
        '\\cancel',
        '\\bcancel',
        '\\xcancel'
    ], 1200, '$0{\\placeholder{}}'), Jh('Decoration', ['\\bbox'], 1200, '\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{"2B1A}}'), Jh('Styling', ['\\mathbb'], 4000, '$0{Don Knuth}'), Jh('Styling', [
        '\\textbf',
        '\\textup',
        '\\textit',
        '\\textrm',
        '\\textsf',
        '\\texttt',
        '\\textnormal',
        '\\textmd',
        '\\textsl',
        '\\textsc',
        '\\mathsf',
        '\\mathtt',
        '\\mathrm',
        '\\mathfrak',
        '\\mathcal',
        '\\mathscr',
        '\\mathbf',
        '\\mathmd',
        '\\mathit',
        '\\text',
        '\\mbox',
        '\\Bbb',
        '\\bold',
        '\\bm',
        '\\boldsymbol'
    ], 3000, '$0{Don Knuth}'), Jh('Styling', [
        '\\frak',
        '\\tt',
        '\\bf',
        '\\it',
        '\\rmfamily',
        '\\sffamily',
        '\\ttfamily',
        '\\class',
        '\\cssId',
        '\\htmlData',
        '\\htmlStyle'
    ], 1200, '{$0 Don Knuth}'), Jh('Styling', [
        '\\bfseries',
        '\\mdseries',
        '\\upshape',
        '\\slshape',
        '\\scshape'
    ], 1200, '\\text{$0 Don Knuth}'), Jh('Styling', [
        '\\class',
        '\\cssId'
    ], 1200, '$0{testIdentifier}{Don Knuth}'), Jh('Styling', ['\\fontseries'], 1200, '\\text{$0{b}Don Knuth}'), Jh('Styling', ['\\fontfamily'], 1200, '\\text{$0{cmtt}Don Knuth}'), Jh('Styling', ['\\fontshape'], 1200, '\\text{$0{sc}Don Knuth}'), Jh('Styling', ['\\selectfont'], 1200, '\\text{$0}'), Jh('Styling', ['\\emph'], 1200, 'Don$0{Knuth}'), Jh('Styling', ['\\em'], 1200, 'Don{$0 Knuth}'), Jh('Layout', [
        '\\mathop',
        '\\mathbin',
        '\\mathrel',
        '\\mathopen',
        '\\mathclose',
        '\\mathpunct',
        '\\mathord',
        '\\mathinner',
        '\\operatorname',
        '\\operatorname*'
    ], 1200, 'x=$0{arg}=0'), Jh('Layout', ['\\middle'], 1200, '\\left\\{x$0|x>0\\right\\}'), Jh('Layout', [
        '\\overset',
        '\\underset',
        '\\stackrel',
        '\\stackbin'
    ], 1200, '$0{arg}{x=0}'), Jh('Layout', [
        '\\rlap',
        '\\mathrlap'
    ], 1200, '$0{/}0'), Jh('Layout', [
        '\\llap',
        '\\mathllap'
    ], 1200, 'o$0{/}'), Jh('Fractions', ['\\frac'], 4000, '$0{\\placeholder{}}{\\placeholder{}}'), Jh('Fractions', [
        '\\binom',
        '\\dfrac',
        '\\tfrac',
        '\\dbinom',
        '\\tbinom',
        '\\pdiff',
        '\\cfrac'
    ], 1200, '$0{\\placeholder{}}{\\placeholder{}}'), Jh('Fractions', [
        '\\over',
        '\\atop',
        '\\choose'
    ], 1200, '\\unicode{"2B1A} $0 \\unicode{"2B1A}'), Jh('Fractions', [
        '\\overwithdelims',
        '\\atopwithdelims'
    ], 1200, '{\\unicode{"2B1A} $0{\\lbrace}{\\rbrace} \\unicode{"2B1A}}'), Jh('Extensible Operators', [
        '\\sum',
        '\\prod',
        '\\bigcap',
        '\\bigcup',
        '\\int'
    ], 4000), Jh('Extensible Operators', [
        '\\bigoplus',
        '\\smallint',
        '\\iint',
        '\\oint'
    ], 3000), Jh('Extensible Operators', [
        '\\bigwedge',
        '\\bigvee',
        '\\coprod',
        '\\bigsqcup',
        '\\bigotimes',
        '\\bigodot',
        '\\biguplus',
        '\\intop',
        '\\sqcup',
        '\\sqcap',
        '\\uplus',
        '\\wr',
        '\\Cap',
        '\\Cup',
        '\\doublecap',
        '\\doublecup',
        '\\amalg',
        '\\iiint',
        '\\oiint',
        '\\oiiint',
        '\\intclockwise',
        '\\varointclockwise',
        '\\ointctrclockwise',
        '\\intctrclockwise'
    ], 1200), Jh('Accents', ['\\vec'], 4000), Jh('Accents', [
        '\\bar',
        '\\ddot',
        '\\acute',
        '\\tilde',
        '\\check'
    ], 3000, '$0{\\placeholder{}}'), Jh('Accents', [
        '\\^',
        '\\`',
        '\\\''
    ], 1200, '$0{e}'), Jh('Accents', ['\\c'], 1200, '$0{c}'), Jh('Accents', ['\\~'], 1200, '$0{n}'), Jh('Accents', [
        '\\mathring',
        '\\hat',
        '\\dot',
        '\\breve',
        '\\grave'
    ], 1200, '$0{\\placeholder{}}'), Jh('Extensible Symbols', [
        '\\overrightarrow',
        '\\overleftarrow',
        '\\Overrightarrow',
        '\\overleftharpoon',
        '\\overrightharpoon',
        '\\overleftrightarrow',
        '\\overbrace',
        '\\overlinesegment',
        '\\overgroup',
        '\\widehat',
        '\\widecheck',
        '\\widetilde'
    ], 3000, '$0{ABC}'), Jh('Extensible Symbols', [
        '\\underrightarrow',
        '\\underleftarrow',
        '\\underleftrightarrow',
        '\\underbrace',
        '\\underlinesegment',
        '\\undergroup',
        '\\utilde'
    ], 3000, '$0{ABC}'), Jh('Sizing', [
        '\\tiny',
        '\\scriptsize',
        '\\footnotesize',
        '\\small',
        '\\normalsize',
        '\\large',
        '\\Large',
        '\\LARGE',
        '\\huge',
        '\\Huge'
    ], 1200, '$0{x=0}'), Jh('Sizing', [
        '\\big',
        '\\Big',
        '\\bigg',
        '\\Bigg'
    ], 1200, '$0($0)'), Jh('Sizing', [
        '\\bigl',
        '\\Bigl',
        '\\biggl',
        '\\Biggl'
    ], 1200, '$0('), Jh('Sizing', [
        '\\bigr',
        '\\Bigr',
        '\\biggr',
        '\\Biggr'
    ], 1200, '$0)'), Jh('Sizing', [
        '\\bigm',
        '\\Bigm',
        '\\biggm',
        '\\Biggm'
    ], 1200, '$0|'), Jh('Letterlike Symbols', [
        '\\nabla',
        '\\partial',
        '\\N',
        '\\R',
        '\\Q',
        '\\C',
        '\\Z',
        '\\exponentialE',
        '\\forall',
        '\\exists',
        '\\nexists'
    ], 4000), Jh('Letterlike Symbols', [
        '\\doubleStruckCapitalP',
        '\\P',
        '\\ell',
        '\\hbar',
        '\\hslash',
        '\\imath',
        '\\jmath',
        '\\imaginaryI',
        '\\imaginaryJ',
        '\\differentialD',
        '\\rd',
        '\\capitalDifferentialD',
        '\\doubleStruckCapitalN',
        '\\doubleStruckCapitalR',
        '\\doubleStruckCapitalQ',
        '\\doubleStruckCapitalC',
        '\\doubleStruckCapitalZ',
        '\\rD',
        '\\differencedelta',
        '\\mid',
        '@',
        '\\Re',
        '\\Im',
        '\\$',
        '\\%',
        '\\And',
        '\\degree'
    ], 3000), Jh('Letterlike Symbols', [
        '\\top',
        '\\bot',
        '\\scriptCapitalE',
        '\\scriptCapitalH',
        '\\scriptCapitalL',
        '\\gothicCapitalC',
        '\\gothicCapitalH',
        '\\gothicCapitalI',
        '\\gothicCapitalR',
        '\\Bbbk',
        '\\Finv',
        '\\Game',
        '\\wp',
        '\\eth',
        '\\mho',
        '\\pounds',
        '\\yen',
        '\\euro'
    ], 1200), Jh('Crosses', [
        '\\dagger',
        '\\dag'
    ], 4000), Jh('Crosses', [
        '\\ddag',
        '\\ddagger',
        '\\maltese',
        '\\textdagger',
        '\\textdaggerdbl'
    ], 1200), Jh('Various', [
        '\\checkmark',
        '\\diagup',
        '\\diagdown',
        '\\angle',
        '\\measuredangle',
        '\\sphericalangle',
        '\\prime',
        '\\doubleprime',
        '\\backprime',
        '\\backdoubleprime',
        '\\sharp',
        '\\flat',
        '\\natural',
        '\\&',
        '\\#',
        '\\clubsuit',
        '\\spadesuit',
        '\\diamondsuit',
        '\\heartsuit',
        '\\backslash',
        '\\infty',
        '/',
        '\\_',
        '\\/',
        '|',
        '\''
    ], 1200), Jh('Various', ['\\unicode'], 1200, '$0{"2B1A}'), Jh('Arrows', [
        '\\longrightarrow',
        '\\rightarrow',
        '\\Longrightarrow',
        '\\Rightarrow'
    ], 4000), Jh('Arrows', [
        '\\longmapsto',
        '\\mapsto',
        '\\Longleftrightarrow',
        '\\rightleftarrows',
        '\\leftarrow',
        '\\curvearrowleft',
        '\\uparrow',
        '\\downarrow',
        '\\hookrightarrow',
        '\\rightharpoonup',
        '\\rightleftharpoons'
    ], 3000), Jh('Arrows', [
        '\\Leftarrow',
        '\\longleftrightarrow',
        '\\longleftarrow',
        '\\Longleftarrow',
        '\\searrow',
        '\\nearrow',
        '\\swarrow',
        '\\nwarrow',
        '\\Uparrow',
        '\\Downarrow',
        '\\updownarrow',
        '\\Updownarrow',
        '\\hookleftarrow',
        '\\leftharpoonup',
        '\\leftharpoondown',
        '\\rightharpoondown',
        '\\leftrightarrows',
        '\\dashrightarrow',
        '\\dashleftarrow',
        '\\leftleftarrows',
        '\\Lleftarrow',
        '\\twoheadleftarrow',
        '\\leftarrowtail',
        '\\looparrowleft',
        '\\leftrightharpoons',
        '\\circlearrowleft',
        '\\Lsh',
        '\\upuparrows',
        '\\downharpoonleft',
        '\\multimap',
        '\\leftrightsquigarrow',
        '\\twoheadrightarrow',
        '\\rightarrowtail',
        '\\looparrowright',
        '\\curvearrowright',
        '\\circlearrowright',
        '\\Rsh',
        '\\downdownarrows',
        '\\upharpoonright',
        '\\downharpoonright',
        '\\rightsquigarrow',
        '\\leadsto',
        '\\Rrightarrow',
        '\\restriction'
    ], 1200), Jh('Arrows', [
        '\\upharpoonleft',
        '\\rightrightarrows'
    ], 0), Jh('Negated Arrows', [
        '\\nrightarrow',
        '\\nRightarrow',
        '\\nleftrightarrow',
        '\\nLeftrightarrow',
        '\\nleftarrow',
        '\\nLeftarrow'
    ], 1200), Jh('Extensible Symbols', [
        '\\xrightarrow',
        '\\xleftarrow',
        '\\xRightarrow',
        '\\xLeftarrow',
        '\\xleftharpoonup',
        '\\xleftharpoondown',
        '\\xrightharpoonup',
        '\\xrightharpoondown',
        '\\xlongequal',
        '\\xtwoheadleftarrow',
        '\\xtwoheadrightarrow',
        '\\xleftrightarrow',
        '\\xLeftrightarrow',
        '\\xrightleftharpoons',
        '\\xleftrightharpoons',
        '\\xhookleftarrow',
        '\\xhookrightarrow',
        '\\xmapsto',
        '\\xtofrom',
        '\\xrightleftarrows',
        '\\xrightequilibrium',
        '\\xleftequilibrium'
    ], 1200, '$0[below]{above}=0'), Jh('Negated Relations', [
        '\\nless',
        '\\nleqslant',
        '\\lneq',
        '\\lneqq',
        '\\nleqq',
        '\\unlhd',
        '\\unrhd',
        '\\lvertneqq',
        '\\lnsim',
        '\\lnapprox',
        '\\nprec',
        '\\npreceq',
        '\\precnsim',
        '\\precnapprox',
        '\\nsim',
        '\\nshortmid',
        '\\nmid',
        '\\nvdash',
        '\\nvDash',
        '\\ngtr',
        '\\ngeqslant',
        '\\ngeqq',
        '\\gneq',
        '\\gneqq',
        '\\gvertneqq',
        '\\gnsim',
        '\\nsucc',
        '\\succnsim',
        '\\ncong',
        '\\nshortparallel',
        '\\nparallel',
        '\\nVDash',
        '\\nVdash',
        '\\precneqq',
        '\\succneqq',
        '\\gnapprox',
        '\\succnapprox',
        '\\nsucceq'
    ], 1200), Jh('Hebrew', [
        '\\aleph',
        '\\beth',
        '\\daleth',
        '\\gimel'
    ], 1200), Jh('Fences', [
        '\\lbrace',
        '\\rbrace',
        '\\vert',
        '\\Vert',
        '\\{',
        '\\}',
        '(',
        ')',
        '[',
        ']'
    ], 4000), Jh('Fences', [
        '\\langle',
        '\\rangle',
        '\\lfloor',
        '\\rfloor',
        '\\lceil',
        '\\rceil',
        '\\mvert',
        '\\|',
        '\\mVert'
    ], 3000), Jh('Fences', [
        '\\lvert',
        '\\rvert',
        '\\lVert',
        '\\rVert',
        '\\lbrack',
        '\\rbrack',
        '\\ulcorner',
        '\\urcorner',
        '\\llcorner',
        '\\lrcorner',
        '\\lgroup',
        '\\rgroup',
        '\\lmoustache',
        '\\rmoustache'
    ], 1200), Jh('Relations', [
        '=',
        '\\ne',
        '\\neq',
        '<',
        '>',
        '\\leqslant',
        '\\geqslant',
        '\\approx'
    ], 4000), Jh('Relations', [
        '\\lt',
        '\\gt',
        '\\le',
        '\\ge',
        '\\leq',
        '\\geq',
        '\\gg',
        '\\cong',
        '\\equiv',
        '\\prec',
        '\\preceq',
        '\\succ',
        '\\perp',
        '\\parallel',
        '\\propto',
        '\\smile',
        '\\frown',
        '\\sim',
        '\\gtrsim'
    ], 3000), Jh('Relations', [
        '\\coloneq',
        '\\succeq',
        '\\approxeq',
        '\\thickapprox',
        '\\lessapprox',
        '\\gtrapprox',
        '\\precapprox',
        '\\succapprox',
        '\\thicksim',
        '\\succsim',
        '\\precsim',
        '\\backsim',
        '\\eqsim',
        '\\backsimeq',
        '\\simeq',
        '\\lesssim',
        '\\nleq',
        '\\ngeq',
        '\\smallsmile',
        '\\smallfrown',
        '\\bowtie',
        '\\asymp',
        '\\leqq',
        '\\eqslantless',
        '\\ll',
        '\\lll',
        '\\lessgtr',
        '\\lesseqgtr',
        '\\lesseqqgtr',
        '\\risingdotseq',
        '\\fallingdotseq',
        '\\preccurlyeq',
        '\\curlyeqprec',
        '\\vDash',
        '\\Vvdash',
        '\\bumpeq',
        '\\Bumpeq',
        '\\geqq',
        '\\eqslantgtr',
        '\\ggg',
        '\\gtrless',
        '\\gtreqless',
        '\\gtreqqless',
        '\\succcurlyeq',
        '\\curlyeqsucc',
        '\\Vdash',
        '\\shortmid',
        '\\shortparallel',
        '\\between',
        '\\pitchfork',
        '\\varpropto',
        '\\backepsilon',
        '\\llless',
        '\\gggtr',
        '\\lhd',
        '\\rhd',
        '\\Join',
        '\\doteq',
        '\\doteqdot',
        '\\Doteq',
        '\\eqcirc',
        '\\circeq',
        '\\lessdot',
        '\\gtrdot',
        '\\measeq',
        '\\eqdef',
        '\\questeq'
    ], 1200), Jh('Logic', [
        '\\leftrightarrow',
        '\\Leftrightarrow',
        '\\to'
    ], 4000), Jh('Logic', [
        '\\models',
        '\\vdash'
    ], 3000), Jh('Logic', [
        '\\therefore',
        '\\because',
        '\\implies',
        '\\gets',
        '\\dashv',
        '\\impliedby',
        '\\biconditional',
        '\\roundimplies'
    ], 1200), Jh('Operators', [
        '+',
        '-',
        '*',
        '\\cdot'
    ], 4000), Jh('Operators', ['\\sqrt'], 4000, '$0{\\placeholder{}}'), Jh('Operators', [
        '\\pm',
        '\\mp',
        '\\times',
        '\\div',
        '\\surd'
    ], 3000), Jh('Operators', [
        '\\ltimes',
        '\\rtimes',
        '\\leftthreetimes',
        '\\rightthreetimes',
        '\\intercal',
        '\\dotplus',
        '\\centerdot',
        '\\doublebarwedge',
        '\\divideontimes',
        '\\divides'
    ], 1200), Jh('Logic', [
        '\\wedge',
        '\\vee',
        '\\neg'
    ], 4000), Jh('Logic', ['\\lnot'], 3000), Jh('Logic', [
        '\\land',
        '\\lor',
        '\\barwedge',
        '\\veebar',
        '\\nor',
        '\\curlywedge',
        '\\curlyvee'
    ], 1200), Jh('Greek', [
        '\\alpha',
        '\\beta',
        '\\gamma',
        '\\delta',
        '\\epsilon',
        '\\varepsilon',
        '\\zeta',
        '\\eta',
        '\\theta',
        '\\vartheta',
        '\\iota',
        '\\kappa',
        '\\varkappa',
        '\\lambda',
        '\\mu',
        '\\nu',
        '\\xi',
        '\\pi',
        '\\varpi',
        '\\rho',
        '\\varrho',
        '\\sigma',
        '\\varsigma',
        '\\tau',
        '\\phi',
        '\\varphi',
        '\\upsilon',
        '\\chi',
        '\\psi',
        '\\omega',
        '\\Gamma',
        '\\Delta',
        '\\Theta',
        '\\Lambda',
        '\\Xi',
        '\\Pi',
        '\\Sigma',
        '\\Upsilon',
        '\\Phi',
        '\\Psi',
        '\\Omega',
        '\\digamma',
        '\\omicron'
    ], 3000), Jh('Sets', [
        '\\emptyset',
        '\\varnothing',
        '\\cap',
        '\\cup',
        '\\in',
        '\\notin',
        '\\subset',
        '\\supset',
        '\\subseteq',
        '\\supseteq',
        '\\sqsubseteq'
    ], 4000), Jh('Sets', [
        '\\setminus',
        '\\not',
        '\\ni',
        '\\sqsupseteq',
        '\\nsupseteqq',
        '\\supsetneq',
        '\\varsupsetneq',
        '\\supsetneqq',
        '\\varsupsetneqq'
    ], 3000), Jh('Sets', [
        '\\smallsetminus',
        '\\complement',
        '\\owns',
        '\\subsetneq',
        '\\varsubsetneq',
        '\\subsetneqq',
        '\\varsubsetneqq',
        '\\nsubset',
        '\\nsupset',
        '\\nsubseteq',
        '\\nsupseteq',
        '\\nsubseteqq',
        '\\subseteqq',
        '\\Subset',
        '\\sqsubset',
        '\\supseteqq',
        '\\Supset',
        '\\sqsupset'
    ], 1200), Jh('Spacing', [
        '\\space',
        '\\quad',
        '\\qquad'
    ], 3000, '\\unicode{"203A}$0\\unicode{"2039}'), Jh('Spacing', [
        '\\!',
        '\\,',
        '\\:',
        '\\;',
        '\\enskip',
        '\\enspace'
    ], 1200, '\\unicode{"203A}$0\\unicode{"2039}'), Jh('Spacing', [
        '\\hspace',
        '\\hspace*'
    ], 1200, '\\unicode{"203A}$0{1em}\\unicode{"2039}'), Jh('Punctuation', [
        '\\colon',
        '\\cdotp',
        '\\ldots',
        '\\cdots',
        '\\ddots',
        '\\vdots',
        '?',
        '!',
        ':',
        '"',
        ',',
        '.',
        ';'
    ], 3000), Jh('Punctuation', [
        '\\mathellipsis',
        '\\ldotp',
        '\\Colon'
    ], 1200), Jh('Boxes', [
        '\\square',
        '\\Box'
    ], 3000), Jh('Boxes', [
        '\\blacksquare',
        '\\boxminus',
        '\\boxplus',
        '\\boxtimes',
        '\\boxdot'
    ], 1200), Jh('Circles', [
        '\\circ',
        '\\bullet',
        '\\circleddash',
        '\\oplus',
        '\\otimes'
    ], 3000), Jh('Circles', [
        '\\bigcirc',
        '\\circledast',
        '\\ominus',
        '\\circledcirc',
        '\\oslash',
        '\\circledS',
        '\\circledR',
        '\\odot'
    ], 1200), Jh('Triangles', [
        '\\triangle',
        '\\triangleq'
    ], 3000), Jh('Triangles', [
        '\\bigtriangleup',
        '\\vartriangle',
        '\\triangledown',
        '\\bigtriangledown',
        '\\triangleleft',
        '\\vartriangleleft',
        '\\trianglelefteq',
        '\\ntriangleleft',
        '\\ntrianglelefteq',
        '\\triangleright',
        '\\vartriangleright',
        '\\trianglerighteq',
        '\\ntriangleright',
        '\\ntrianglerighteq',
        '\\blacktriangle',
        '\\blacktriangledown',
        '\\blacktriangleleft',
        '\\blacktriangleright'
    ], 1200), Jh('Shapes', [
        '\\ast',
        '\\star'
    ], 3000), Jh('Shapes', [
        '\\diamond',
        '\\Diamond',
        '\\lozenge',
        '\\blacklozenge',
        '\\bigstar'
    ], 1200);
});