function a(b, c, d, e) {
    Object.defineProperty(b, c, {
        get: d,
        set: e,
        enumerable: !0,
        configurable: !0
    });
}
('undefined' != typeof globalThis ? globalThis : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : 'undefined' != typeof global ? global : {}).parcelRequire388b.register('mS2fe', function(b, c) {
    function d(e) {
        return Array.isArray(e);
    }

    function e() {
        return 'window' in globalThis && 'document' in globalThis;
    }

    function f() {
        if (!e())
            throw new Error('<math-field> is an interactive component that needs to run in a browser environment\nIf you are using nextjs, see https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr');
    }

    function g() {
        return !!e() && ('matchMedia' in globalThis ? globalThis.matchMedia('(any-pointer: coarse)').matches : 'ontouchstart' in globalThis || navigator.maxTouchPoints > 0);
    }

    function h() {
        return e() && 'function' == typeof navigator.vibrate;
    }

    function i() {
        var j, k;
        if (!e())
            return 'other';
        const l = null !== (k = null === (j = navigator.userAgentData) || void 0 === j ? void 0 : j.platform) && void 0 !== k ? k : navigator.platform;
        return /^mac/i.test(l) ? 5 === navigator.maxTouchPoints ? 'ios' : 'macos' : /^win/i.test(l) ? 'windows' : /android/i.test(navigator.userAgent) ? 'android' : /iphone|ipod|ipad/i.test(navigator.userAgent) ? 'ios' : /\bcros\b/i.test(navigator.userAgent) ? 'chromeos' : 'other';
    }

    function m() {
        if (!e())
            return !0;
        if (/firefox/i.test(navigator.userAgent)) {
            const n = navigator.userAgent.match(/firefox\/(\d+)/i);
            return !!n && parseInt(n[1]) >= 78;
        }
        if (/trident/i.test(navigator.userAgent))
            return !1;
        if (/edge/i.test(navigator.userAgent)) {
            const o = navigator.userAgent.match(/edg\/(\d+)/i);
            return !!o && parseInt(o[1]) >= 79;
        }
        return !0;
    }
    o(k.exports, 'MathfieldElement', function() {
        return _ss;
    }), o(k.exports, 'renderMathInElement', function() {
        return _Vt;
    });
    const p = {
        strings: {
            en: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symbols',
                'keyboard.tooltip.greek': 'Greek Letters',
                'keyboard.tooltip.command': 'LaTeX Command Mode',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Roman Letters',
                'tooltip.copy to clipboard': 'Copy to Clipboard',
                'tooltip.redo': 'Redo',
                'tooltip.toggle virtual keyboard': 'Toggle Virtual Keyboard',
                'tooltip.undo': 'Undo',
                'menu.insert matrix': 'Insert Matrix',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Delimiters',
                'menu.array.add row above': 'Add Row After',
                'menu.array.add row below': 'Add Row Before',
                'menu.array.add column after': 'Add Column After',
                'menu.array.add column before': 'Add Column Before',
                'menu.array.delete row': 'Delete Row',
                'menu.array.delete rows': 'Delete Selected Rows',
                'menu.array.delete column': 'Delete Column',
                'menu.array.delete columns': 'Delete Selected Columns',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Insert Table',
                'submenu.table style': 'Table Style'
            },
            ar: {
                'keyboard.tooltip.functions': 'مهام',
                'keyboard.tooltip.symbols': 'حرف او رمز',
                'keyboard.tooltip.greek': 'حروف يونانية',
                'keyboard.tooltip.command': 'حالة تلقي الأوامر اللاتك',
                'keyboard.tooltip.numeric': 'الرقمية',
                'keyboard.tooltip.roman': 'رموز الاحرف الرومانية',
                'tooltip.copy to clipboard': 'نسخ إلى الحافظة',
                'tooltip.redo': 'الإعادة',
                'tooltip.toggle virtual keyboard': 'تبديل لوحة المفاتيح الإفتراضية',
                'tooltip.undo': 'إلغاء',
                'menu.insert matrix': 'أدخل المصفوفة',
                'menu.insert vector': 'أدخل متجه',
                'submenu.array.matrix delimiters': 'محددات المصفوفة',
                'menu.array.add row above': 'أضف صفًا بعد ذلك',
                'menu.array.add row below': 'أضف الصف قبل',
                'menu.array.add column after': 'أضف العمود بعد ذلك',
                'menu.array.add column before': 'أضف العمود قبل',
                'menu.array.delete row': 'احذف صف',
                'menu.array.delete rows': 'حذف الصفوف المحددة',
                'menu.array.delete column': 'حذف العمود',
                'menu.array.delete columns': 'حذف الأعمدة المحددة',
                'submenu.array.insert separator': 'أدخل فاصل',
                'menu.insert table': 'إدراج جدول',
                'submenu.table style': 'نمط الجدول'
            },
            bg: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Гръцки букви',
                'keyboard.tooltip.command': 'Команден режим на латекс',
                'keyboard.tooltip.numeric': 'Числови',
                'keyboard.tooltip.roman': 'Римски букви',
                'tooltip.copy to clipboard': 'Копиране в клипборда',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Превключване на виртуална клавиатура',
                'tooltip.undo': 'Отмяна',
                'menu.insert matrix': 'Вмъкване на матрица',
                'menu.insert vector': 'Вмъкване на вектор',
                'submenu.array.matrix delimiters': 'Матрични разделители',
                'menu.array.add row above': 'Добавяне на ред след',
                'menu.array.add row below': 'Добавяне на ред преди',
                'menu.array.add column after': 'Добавяне на колона след',
                'menu.array.add column before': 'Добавяне на колона преди',
                'menu.array.delete row': 'Изтриване на реда',
                'menu.array.delete rows': 'Изтриване на избраните редове',
                'menu.array.delete column': 'Изтриване на колона',
                'menu.array.delete columns': 'Изтриване на избраните колони',
                'submenu.array.insert separator': 'Поставете разделител',
                'menu.insert table': 'Вмъкване на таблица',
                'submenu.table style': 'Табличен стил'
            },
            bs: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u clipboard',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj red prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši red',
                'menu.array.delete rows': 'Izbriši odabrane redove',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Ubaci tabelu',
                'submenu.table style': 'Stil tabele'
            },
            cs: {
                'keyboard.tooltip.functions': 'Funkce',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Řecké dopisy',
                'keyboard.tooltip.command': 'Příkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Číselné',
                'keyboard.tooltip.roman': 'Římské dopisy',
                'tooltip.copy to clipboard': 'Zkopírovat do schránky',
                'tooltip.redo': 'Předělat',
                'tooltip.toggle virtual keyboard': 'Přepnout virtuální klávesnici',
                'tooltip.undo': 'Vrátit',
                'menu.insert matrix': 'Vložte matici',
                'menu.insert vector': 'Vložit vektor',
                'submenu.array.matrix delimiters': 'Oddělovače matic',
                'menu.array.add row above': 'Přidat řádek za',
                'menu.array.add row below': 'Přidat řádek před',
                'menu.array.add column after': 'Přidat sloupec za',
                'menu.array.add column before': 'Přidat sloupec dříve',
                'menu.array.delete row': 'Odstranit řádek',
                'menu.array.delete rows': 'Odstranit vybrané řádky',
                'menu.array.delete column': 'Odstranit sloupec',
                'menu.array.delete columns': 'Odstranit vybrané sloupce',
                'submenu.array.insert separator': 'Vložte oddělovač',
                'menu.insert table': 'Vložit tabulku',
                'submenu.table style': 'Styl tabulky'
            },
            da: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Græske bogstaver',
                'keyboard.tooltip.command': 'LaTeX kommandotilstand',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske breve',
                'tooltip.copy to clipboard': 'Kopier til udklipsholder',
                'tooltip.redo': 'Gentag igen',
                'tooltip.toggle virtual keyboard': 'Skift virtuelt tastatur',
                'tooltip.undo': 'Fortryd',
                'menu.insert matrix': 'Indsæt matrix',
                'menu.insert vector': 'Indsæt vektor',
                'submenu.array.matrix delimiters': 'Matrixafgrænsere',
                'menu.array.add row above': 'Tilføj række efter',
                'menu.array.add row below': 'Tilføj række før',
                'menu.array.add column after': 'Tilføj kolonne efter',
                'menu.array.add column before': 'Tilføj kolonne før',
                'menu.array.delete row': 'Slet række',
                'menu.array.delete rows': 'Slet valgte rækker',
                'menu.array.delete column': 'Slet kolonne',
                'menu.array.delete columns': 'Slet valgte kolonner',
                'submenu.array.insert separator': 'Indsæt separator',
                'menu.insert table': 'Indsæt tabel',
                'submenu.table style': 'Tabelstil'
            },
            de: {
                'keyboard.tooltip.functions': 'Funktionen',
                'keyboard.tooltip.symbols': 'Symbole',
                'keyboard.tooltip.greek': 'Griechische Buchstaben',
                'keyboard.tooltip.command': 'LaTeX-Befehlsmodus',
                'keyboard.tooltip.numeric': 'Numerisch',
                'keyboard.tooltip.roman': 'Römische Buchstaben',
                'tooltip.copy to clipboard': 'In die Zwischenablage kopieren',
                'tooltip.redo': 'Wiederholen',
                'tooltip.toggle virtual keyboard': 'Virtuelle Tastatur umschalten',
                'tooltip.undo': 'Widerrufen',
                'menu.insert matrix': 'Matrix einfügen',
                'menu.insert vector': 'Vektor einfügen',
                'submenu.array.matrix delimiters': 'Matrixtrennzeichen',
                'menu.array.add row above': 'Zeile hinzufügen nach',
                'menu.array.add row below': 'Zeile hinzufügen vor',
                'menu.array.add column after': 'Spalte hinzufügen nach',
                'menu.array.add column before': 'Spalte hinzufügen vor',
                'menu.array.delete row': 'Zeile löschen',
                'menu.array.delete rows': 'Ausgewählte Zeilen löschen',
                'menu.array.delete column': 'Spalte löschen',
                'menu.array.delete columns': 'Ausgewählte Spalten löschen',
                'submenu.array.insert separator': 'Trennzeichen einfügen',
                'menu.insert table': 'Tabelle einfügen',
                'submenu.table style': 'Tabellenstil'
            },
            el: {
                'keyboard.tooltip.functions': 'συναρτήσεις',
                'keyboard.tooltip.symbols': 'σύμβολα',
                'keyboard.tooltip.greek': 'ελληνικά γράμματα',
                'keyboard.tooltip.command': 'Λειτουργία εντολών LaTeX',
                'keyboard.tooltip.numeric': 'Αριθμητικός',
                'keyboard.tooltip.roman': 'Ρωμαϊκά γράμματα',
                'tooltip.copy to clipboard': 'Αντιγραφή στο πρόχειρο',
                'tooltip.redo': 'Ξανακάνω',
                'tooltip.toggle virtual keyboard': 'Εναλλαγή εικονικού πληκτρολογίου',
                'tooltip.undo': 'Ξεκάνω',
                'menu.insert matrix': 'Εισαγωγή Matrix',
                'menu.insert vector': 'Εισαγωγή διανύσματος',
                'submenu.array.matrix delimiters': 'Οριοθέτες Matrix',
                'menu.array.add row above': 'Προσθήκη σειράς μετά',
                'menu.array.add row below': 'Προσθήκη σειράς πριν',
                'menu.array.add column after': 'Προσθήκη στήλης μετά',
                'menu.array.add column before': 'Προσθήκη στήλης πριν',
                'menu.array.delete row': 'Διαγραφή σειράς',
                'menu.array.delete rows': 'Διαγραφή επιλεγμένων σειρών',
                'menu.array.delete column': 'Διαγραφή στήλης',
                'menu.array.delete columns': 'Διαγραφή επιλεγμένων στηλών',
                'submenu.array.insert separator': 'Εισαγωγή διαχωριστικού',
                'menu.insert table': 'Εισαγωγή πίνακα',
                'submenu.table style': 'Στυλ πίνακα'
            },
            es: {
                'keyboard.tooltip.functions': 'Funciones',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras griegas',
                'keyboard.tooltip.command': 'Modo Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar al portapapeles',
                'tooltip.redo': 'Rehacer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Deshacer',
                'menu.insert matrix': 'Añadir Matriz',
                'menu.insert vector': 'Añadir vector',
                'submenu.array.matrix delimiters': 'Delimitadores de Matriz',
                'menu.array.add row above': 'Añadir Línea Antes',
                'menu.array.add row below': 'Añadir Línea Despues',
                'menu.array.add column after': 'Añadir Columna Despues',
                'menu.array.add column before': 'Añadir Columna Antes',
                'menu.array.delete row': 'Borrar Línea',
                'menu.array.delete rows': 'Borrar Líneas Seleccionadas',
                'menu.array.delete column': 'Borrar Columna',
                'menu.array.delete columns': 'Borrar Columnas Seleccionadas',
                'submenu.array.insert separator': 'Insertar un Separador',
                'menu.insert table': 'Insertar Tabla',
                'submenu.table style': 'Estilo de Tabla'
            },
            et: {
                'keyboard.tooltip.functions': 'Funktsioonid',
                'keyboard.tooltip.symbols': 'Sümbolid',
                'keyboard.tooltip.greek': 'Kreeka kirjad',
                'keyboard.tooltip.command': 'LaTeXi käsurežiim',
                'keyboard.tooltip.numeric': 'Numbriline',
                'keyboard.tooltip.roman': 'Rooma kirjad',
                'tooltip.copy to clipboard': 'Kopeerida lõikelauale',
                'tooltip.redo': 'Tee uuesti',
                'tooltip.toggle virtual keyboard': 'Lülitage sisse virtuaalne klaviatuur',
                'tooltip.undo': 'Võta tagasi',
                'menu.insert matrix': 'Sisesta maatriks',
                'menu.insert vector': 'Sisesta vektor',
                'submenu.array.matrix delimiters': 'Maatriksi eraldajad',
                'menu.array.add row above': 'Lisa rida pärast',
                'menu.array.add row below': 'Lisa rida enne',
                'menu.array.add column after': 'Lisa veerg pärast',
                'menu.array.add column before': 'Lisa veerg enne',
                'menu.array.delete row': 'Kustuta rida',
                'menu.array.delete rows': 'Kustuta valitud read',
                'menu.array.delete column': 'Kustuta veerg',
                'menu.array.delete columns': 'Kustuta valitud veerud',
                'submenu.array.insert separator': 'Sisestage eraldaja',
                'menu.insert table': 'Sisesta tabeli',
                'submenu.table style': 'Tabeli stiilis'
            },
            fa: {
                'keyboard.tooltip.functions': 'توابع',
                'keyboard.tooltip.symbols': 'نمادها',
                'keyboard.tooltip.greek': 'حروف یونانی',
                'keyboard.tooltip.command': 'حالت دستور لاتک',
                'keyboard.tooltip.numeric': 'عددی',
                'keyboard.tooltip.roman': 'حروف رومی',
                'tooltip.copy to clipboard': 'کپی به کلیپبورد',
                'tooltip.redo': 'بازگشت به بعد',
                'tooltip.toggle virtual keyboard': 'نمایش/نهفتن کیبورد مجازی',
                'tooltip.undo': 'بازگشت به قبل',
                'menu.insert matrix': 'ماتریس را وارد کنید',
                'menu.insert vector': 'درج بردار',
                'submenu.array.matrix delimiters': 'مرزهای ماتریس',
                'menu.array.add row above': 'بعد از آن ردیف اضافه کنید',
                'menu.array.add row below': 'ردیف را قبل اضافه کنید',
                'menu.array.add column after': 'اضافه کردن ستون بعد',
                'menu.array.add column before': 'ستون قبل را اضافه کنید',
                'menu.array.delete row': 'ردیف را حذف کنید',
                'menu.array.delete rows': 'ردیف های انتخاب شده را حذف کنید',
                'menu.array.delete column': 'حذف ستون',
                'menu.array.delete columns': 'ستون های انتخاب شده را حذف کنید',
                'submenu.array.insert separator': 'درج جدا کننده',
                'menu.insert table': 'قرار دادن جدول',
                'submenu.table style': 'سبک میز'
            },
            fi: {
                'keyboard.tooltip.functions': 'Toiminnot',
                'keyboard.tooltip.symbols': 'Symbolit',
                'keyboard.tooltip.greek': 'Kreikkalaiset kirjeet',
                'keyboard.tooltip.command': 'LaTeX-komentotila',
                'keyboard.tooltip.numeric': 'Numeerinen',
                'keyboard.tooltip.roman': 'Roomalaiset kirjeet',
                'tooltip.copy to clipboard': 'Kopioi leikepöydälle',
                'tooltip.redo': 'Tee uudelleen',
                'tooltip.toggle virtual keyboard': 'Vaihda virtuaalinäppäimistö',
                'tooltip.undo': 'Kumoa',
                'menu.insert matrix': 'Lisää matriisi',
                'menu.insert vector': 'Lisää vektori',
                'submenu.array.matrix delimiters': 'Matriisin erottimet',
                'menu.array.add row above': 'Lisää rivi jälkeen',
                'menu.array.add row below': 'Lisää rivi ennen',
                'menu.array.add column after': 'Lisää sarake jälkeen',
                'menu.array.add column before': 'Lisää sarake ennen',
                'menu.array.delete row': 'Poista rivi',
                'menu.array.delete rows': 'Poista valitut rivit',
                'menu.array.delete column': 'Poista sarake',
                'menu.array.delete columns': 'Poista valitut sarakkeet',
                'submenu.array.insert separator': 'Aseta erotin',
                'menu.insert table': 'Lisää taulukko',
                'submenu.table style': 'Taulukon tyyli'
            },
            fr: {
                'keyboard.tooltip.functions': 'Fonctions',
                'keyboard.tooltip.symbols': 'Symboles',
                'keyboard.tooltip.greek': 'Lettres grecques',
                'keyboard.tooltip.command': 'Mode de commandes LaTeX',
                'keyboard.tooltip.numeric': 'Numérique',
                'keyboard.tooltip.roman': 'Lettres romaines',
                'tooltip.copy to clipboard': 'Copier dans le presse-papiers',
                'tooltip.redo': 'Rétablir',
                'tooltip.toggle virtual keyboard': 'Afficher/Masquer le clavier virtuel',
                'tooltip.undo': 'Annuler',
                'menu.insert matrix': 'Insérer une Matrice',
                'menu.insert vector': 'Insérer un Vecteur',
                'submenu.array.matrix delimiters': 'Délimiteurs de la Matrice',
                'menu.array.add row above': 'Ajouter une Ligne Avant',
                'menu.array.add row below': 'Ajouter une Ligne Après',
                'menu.array.add column before': 'Ajouter une Colonne Avant',
                'menu.array.add column after': 'Ajouter une Colonne Après',
                'menu.array.delete row': 'Enlever une Ligne',
                'menu.array.delete rows': 'Enlever les Lignes Sélectionées',
                'menu.array.delete column': 'Enlever une Colone',
                'menu.array.delete columns': 'Enlever les Colonnes Sélectionées',
                'submenu.array.insert separator': 'Insérer un Séparateur',
                'menu.insert table': 'Insérer une Table',
                'submenu.table style': 'Style de la  Table'
            },
            ga: {
                'keyboard.tooltip.functions': 'Feidhmeanna',
                'keyboard.tooltip.symbols': 'Siombailí',
                'keyboard.tooltip.greek': 'Litreacha na Gréige',
                'keyboard.tooltip.command': 'Mód Ordú LaTeX',
                'keyboard.tooltip.numeric': 'Uimhriúil',
                'keyboard.tooltip.roman': 'Litreacha Rómhánacha',
                'tooltip.copy to clipboard': 'Cóipeáil chuig an Ghearrthaisce',
                'tooltip.redo': 'Athdhéan',
                'tooltip.toggle virtual keyboard': 'Méarchláir Fíorúil a Fháil',
                'tooltip.undo': 'Cealaigh',
                'menu.insert matrix': 'Cuir isteach Maitrís',
                'menu.insert vector': 'Cuir isteach Veicteoir',
                'submenu.array.matrix delimiters': 'Delimiters Maitrís',
                'menu.array.add row above': 'Cuir Rae Tar éis',
                'menu.array.add row below': 'Cuir Rae Roimh',
                'menu.array.add column after': 'Cuir Colún Tar éis',
                'menu.array.add column before': 'Cuir Colún Roimh',
                'menu.array.delete row': 'Scrios Rae',
                'menu.array.delete rows': 'Scrios Sraitheanna Roghnaithe',
                'menu.array.delete column': 'Scrios Colún',
                'menu.array.delete columns': 'Scrios Colúin Roghnaithe',
                'submenu.array.insert separator': 'Cuir Deighilteoir isteach',
                'menu.insert table': 'Ionsáigh Tábla',
                'submenu.table style': 'Stíl Tábla'
            },
            he: {
                'keyboard.tooltip.functions': 'פונקציות',
                'keyboard.tooltip.symbols': 'סמלים',
                'keyboard.tooltip.greek': 'אותיות יווניות',
                'keyboard.tooltip.command': 'מצב פקודה לטקס',
                'keyboard.tooltip.numeric': 'מספרי',
                'keyboard.tooltip.roman': 'מכתבים רומיים',
                'tooltip.copy to clipboard': 'העתק ללוח',
                'tooltip.redo': 'לַעֲשׂוֹת שׁוּב',
                'tooltip.toggle virtual keyboard': 'החלף את המקלדת הווירטואלית',
                'tooltip.undo': 'לבטל',
                'menu.insert matrix': 'הכנס מטריקס',
                'menu.insert vector': 'הכנס וקטור',
                'submenu.array.matrix delimiters': 'מפרידי מטריקס',
                'menu.array.add row above': 'הוסף שורה אחרי',
                'menu.array.add row below': 'הוסף שורה לפני',
                'menu.array.add column after': 'הוסף עמודה אחרי',
                'menu.array.add column before': 'הוסף עמודה לפני',
                'menu.array.delete row': 'מחק שורה',
                'menu.array.delete rows': 'מחק שורות שנבחרו',
                'menu.array.delete column': 'מחק עמודה',
                'menu.array.delete columns': 'מחק עמודות שנבחרו',
                'submenu.array.insert separator': 'הכנס מפריד',
                'menu.insert table': 'הכנס טבלה',
                'submenu.table style': 'טבלה סִגְנוֹן'
            },
            hr: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grčka slova',
                'keyboard.tooltip.command': 'LaTeX naredbeni način',
                'keyboard.tooltip.numeric': 'Numerički',
                'keyboard.tooltip.roman': 'Rimska slova',
                'tooltip.copy to clipboard': 'Kopirati u međuspremnik',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Uključi / isključi virtualnu tipkovnicu',
                'tooltip.undo': 'Poništi',
                'menu.insert matrix': 'Umetni matricu',
                'menu.insert vector': 'Umetni vektor',
                'submenu.array.matrix delimiters': 'Matrični razdjelnici',
                'menu.array.add row above': 'Dodaj redak nakon',
                'menu.array.add row below': 'Dodaj redak prije',
                'menu.array.add column after': 'Dodaj stupac nakon',
                'menu.array.add column before': 'Dodaj stupac prije',
                'menu.array.delete row': 'Izbriši redak',
                'menu.array.delete rows': 'Izbriši odabrane retke',
                'menu.array.delete column': 'Izbriši stupac',
                'menu.array.delete columns': 'Izbriši odabrane stupce',
                'submenu.array.insert separator': 'Umetni separator',
                'menu.insert table': 'Umetni tablicu',
                'submenu.table style': 'Stil tabele'
            },
            id: {
                'keyboard.tooltip.functions': 'Fungsi',
                'keyboard.tooltip.symbols': 'Simbol',
                'keyboard.tooltip.greek': 'Huruf Yunani',
                'keyboard.tooltip.command': 'Mode Perintah LaTeX',
                'keyboard.tooltip.numeric': 'Numerik',
                'keyboard.tooltip.roman': 'Surat Romawi',
                'tooltip.copy to clipboard': 'Menyalin ke clipboard',
                'tooltip.redo': 'Mengulangi',
                'tooltip.toggle virtual keyboard': 'Alihkan Keyboard Virtual',
                'tooltip.undo': 'Membuka',
                'menu.insert matrix': 'Sisipkan Matriks',
                'menu.insert vector': 'Sisipkan Vektor',
                'submenu.array.matrix delimiters': 'Pembatas Matriks',
                'menu.array.add row above': 'Tambahkan Baris Setelah',
                'menu.array.add row below': 'Tambahkan Baris Sebelumnya',
                'menu.array.add column after': 'Tambahkan Kolom Setelah',
                'menu.array.add column before': 'Tambahkan Kolom Sebelumnya',
                'menu.array.delete row': 'Hapus Baris',
                'menu.array.delete rows': 'Hapus Baris yang Dipilih',
                'menu.array.delete column': 'Hapus Kolom',
                'menu.array.delete columns': 'Hapus Kolom yang Dipilih',
                'submenu.array.insert separator': 'Sisipkan Pemisah',
                'menu.insert table': 'Sisipkan Tabel',
                'submenu.table style': 'Gaya Tabel'
            },
            hi: {
                'keyboard.tooltip.functions': 'कार्यों',
                'keyboard.tooltip.symbols': 'प्रतीक',
                'keyboard.tooltip.greek': 'ग्रीक अक्षर',
                'keyboard.tooltip.command': 'लाटेक्स कमांड मोड',
                'keyboard.tooltip.numeric': 'संख्यात्मक',
                'keyboard.tooltip.roman': 'रोमन पत्र',
                'tooltip.copy to clipboard': 'क्लिपबोर्ड पर कॉपी करें',
                'tooltip.redo': 'फिर से करें',
                'tooltip.toggle virtual keyboard': 'वर्चुअल कीबोर्ड टॉगल करें',
                'tooltip.undo': 'पूर्ववत',
                'menu.insert matrix': 'मैट्रिक्स डालें',
                'menu.insert vector': 'वेक्टर डालें',
                'submenu.array.matrix delimiters': 'मैट्रिक्स सीमांकक',
                'menu.array.add row above': 'बाद में पंक्ति जोड़ें',
                'menu.array.add row below': 'पहले पंक्ति जोड़ें',
                'menu.array.add column after': 'बाद में कॉलम जोड़ें',
                'menu.array.add column before': 'पहले कॉलम जोड़ें',
                'menu.array.delete row': 'पंक्ति को हटाएं',
                'menu.array.delete rows': 'चयनित पंक्तियों को हटाएं',
                'menu.array.delete column': 'कॉलम हटाएं',
                'menu.array.delete columns': 'चयनित कॉलम हटाएं',
                'submenu.array.insert separator': 'विभाजक डालें',
                'menu.insert table': 'टेबल इंसर्ट करें',
                'submenu.table style': 'टेबल स्टाइल'
            },
            hu: {
                'keyboard.tooltip.functions': 'Funkciók',
                'keyboard.tooltip.symbols': 'Szimbólumok',
                'keyboard.tooltip.greek': 'Görög levelek',
                'keyboard.tooltip.command': 'LaTeX Parancs mód',
                'keyboard.tooltip.numeric': 'Numerikus',
                'keyboard.tooltip.roman': 'Római levelek',
                'tooltip.copy to clipboard': 'Másolja a vágólapra',
                'tooltip.redo': 'Újra',
                'tooltip.toggle virtual keyboard': 'Váltás a virtuális billentyűzetre',
                'tooltip.undo': 'Visszavonás',
                'menu.insert matrix': 'Helyezze be a Mátrixot',
                'menu.insert vector': 'Vektor beszúrása',
                'submenu.array.matrix delimiters': 'Mátrixhatárolók',
                'menu.array.add row above': 'Sor hozzáadása után',
                'menu.array.add row below': 'Add Add Sor előtt',
                'menu.array.add column after': 'Oszlop hozzáadása után',
                'menu.array.add column before': 'Add oszlop előtt',
                'menu.array.delete row': 'Sor törlése',
                'menu.array.delete rows': 'Kijelölt sorok törlése',
                'menu.array.delete column': 'Oszlop törlése',
                'menu.array.delete columns': 'A kijelölt oszlopok törlése',
                'submenu.array.insert separator': 'Helyezze be az elválasztót',
                'menu.insert table': 'Helyezze be a táblázatot',
                'submenu.table style': 'Táblázatos stílus'
            },
            it: {
                'keyboard.tooltip.functions': 'Funzioni',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Lettere greche',
                'keyboard.tooltip.command': 'Modalità di comando LaTeX',
                'keyboard.tooltip.numeric': 'Numerico',
                'keyboard.tooltip.roman': 'Lettere romane',
                'tooltip.copy to clipboard': 'Copia negli appunti',
                'tooltip.redo': 'Rifare',
                'tooltip.toggle virtual keyboard': 'Attiva / disattiva la tastiera virtuale',
                'tooltip.undo': 'Disfare',
                'menu.insert matrix': 'Inserisci una Matrice',
                'menu.insert vector': 'Inserisci Vettore',
                'submenu.array.matrix delimiters': 'Delimitatori di Matrice',
                'menu.array.add row above': 'Aggiungi una Riga Prima',
                'menu.array.add row below': 'Aggiungi una Riga Dopo',
                'menu.array.add column before': 'Aggiungi una Colonna Prima',
                'menu.array.add column after': 'Aggiungi una Colonna Dopo',
                'menu.array.delete row': 'Rimuovi una Riga',
                'menu.array.delete rows': 'Rimuovi le Righe Selezionate',
                'menu.array.delete column': 'Rimuovi una Colonna',
                'menu.array.delete columns': 'Rimuovi le Colonne Selezionate',
                'submenu.array.insert separator': 'Inserisci un Separatore',
                'menu.insert table': 'Inserisci Tabella',
                'submenu.table style': 'Stile tabella'
            },
            is: {
                'keyboard.tooltip.functions': 'Aðgerðir',
                'keyboard.tooltip.symbols': 'Tákn',
                'keyboard.tooltip.greek': 'Grísk bréf',
                'keyboard.tooltip.command': 'LaTeX stjórnunarstilling',
                'keyboard.tooltip.numeric': 'Tölulegt',
                'keyboard.tooltip.roman': 'Rómversk bréf',
                'tooltip.copy to clipboard': 'Afritaðu á klemmuspjald',
                'tooltip.redo': 'Endurtaka',
                'tooltip.toggle virtual keyboard': 'Skiptu um sýndarlyklaborð',
                'tooltip.undo': 'Afturkalla',
                'menu.insert matrix': 'Settu fylki inn',
                'menu.insert vector': 'Settu inn Vector',
                'submenu.array.matrix delimiters': 'Matrix afmörkun',
                'menu.array.add row above': 'Bæta við röð á eftir',
                'menu.array.add row below': 'Bæta við röð áður',
                'menu.array.add column after': 'Bæta við dálki á eftir',
                'menu.array.add column before': 'Bæta við dálki áður',
                'menu.array.delete row': 'Eyða röð',
                'menu.array.delete rows': 'Eyða völdum línum',
                'menu.array.delete column': 'Eyða dálki',
                'menu.array.delete columns': 'Eyða völdum dálkum',
                'submenu.array.insert separator': 'Settu skiljuna í',
                'menu.insert table': 'Settu inn töflu',
                'submenu.table style': 'Töflu stíl'
            },
            ja: {
                'keyboard.tooltip.functions': '関数',
                'keyboard.tooltip.symbols': 'シンボル',
                'keyboard.tooltip.greek': 'ギリシャ文字',
                'keyboard.tooltip.command': 'ラテックスコマンドモード',
                'keyboard.tooltip.numeric': '数値',
                'keyboard.tooltip.roman': 'ローマ字',
                'tooltip.copy to clipboard': 'クリップボードにコピー',
                'tooltip.redo': 'やり直し',
                'tooltip.toggle virtual keyboard': '仮想キーボードの切り替え',
                'tooltip.undo': '元に戻す',
                'menu.insert matrix': 'マトリックスを挿入',
                'menu.insert vector': 'ベクトルを挿入',
                'submenu.array.matrix delimiters': '行列区切り文字',
                'menu.array.add row above': '後に行を追加',
                'menu.array.add row below': '前に行を追加',
                'menu.array.add column after': '後に列を追加',
                'menu.array.add column before': '前に列を追加',
                'menu.array.delete row': '行を削除',
                'menu.array.delete rows': '選択した行を削除する',
                'menu.array.delete column': '列を削除',
                'menu.array.delete columns': '選択した列を削除する',
                'submenu.array.insert separator': 'セパレーターを挿入',
                'menu.insert table': 'テーブルを挿入',
                'submenu.table style': 'テーブルスタイル'
            },
            ko: {
                'keyboard.tooltip.functions': '기능',
                'keyboard.tooltip.symbols': '기호',
                'keyboard.tooltip.greek': '그리스 문자',
                'keyboard.tooltip.command': '유액 명령 모드',
                'keyboard.tooltip.numeric': '숫자',
                'keyboard.tooltip.roman': '로마 문자',
                'tooltip.copy to clipboard': '클립 보드에 복사',
                'tooltip.redo': '다시 하다',
                'tooltip.toggle virtual keyboard': '가상 키보드 전환',
                'tooltip.undo': '실행 취소',
                'menu.insert matrix': '매트릭스 삽입',
                'menu.insert vector': '벡터 삽입',
                'submenu.array.matrix delimiters': '행렬 구분 기호',
                'menu.array.add row above': '뒤에 행 추가',
                'menu.array.add row below': '앞에 행 추가',
                'menu.array.add column after': '뒤에 열 추가',
                'menu.array.add column before': '앞에 열 추가',
                'menu.array.delete row': '행 삭제',
                'menu.array.delete rows': '선택한 행 삭제',
                'menu.array.delete column': '열 삭제',
                'menu.array.delete columns': '선택한 열 삭제',
                'submenu.array.insert separator': '구분자 삽입',
                'menu.insert table': '표 삽입',
                'submenu.table style': '테이블 스타일'
            },
            lv: {
                'keyboard.tooltip.functions': 'Funkcijas',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grieķu burti',
                'keyboard.tooltip.command': 'LaTeX komandu režīms',
                'keyboard.tooltip.numeric': 'Ciparu skaitlis',
                'keyboard.tooltip.roman': 'Romiešu vēstules',
                'tooltip.copy to clipboard': 'Kopēt starpliktuvē',
                'tooltip.redo': 'Pārtaisīt',
                'tooltip.toggle virtual keyboard': 'Pārslēgt virtuālo tastatūru',
                'tooltip.undo': 'Atsaukt',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Galda stils'
            },
            lt: {
                'keyboard.tooltip.functions': 'Funkcijos',
                'keyboard.tooltip.symbols': 'Simboliai',
                'keyboard.tooltip.greek': 'Graikiškos raidės',
                'keyboard.tooltip.command': 'LaTeX komandų režimas',
                'keyboard.tooltip.numeric': 'Skaitmeninis',
                'keyboard.tooltip.roman': 'Romos laiškai',
                'tooltip.copy to clipboard': 'Nukopijuoti į iškarpinę',
                'tooltip.redo': 'Perdaryti',
                'tooltip.toggle virtual keyboard': 'Perjungti virtualiąją klaviatūrą',
                'tooltip.undo': 'Atšaukti',
                'menu.insert matrix': 'Ievietojiet matricu',
                'menu.insert vector': 'Ievietot vektoru',
                'submenu.array.matrix delimiters': 'Matricas norobežotāji',
                'menu.array.add row above': 'Pievienot rindu pēc',
                'menu.array.add row below': 'Pievienot rindu pirms',
                'menu.array.add column after': 'Pievienot kolonnu pēc',
                'menu.array.add column before': 'Pievienot kolonnu pirms',
                'menu.array.delete row': 'Dzēst rindu',
                'menu.array.delete rows': 'Dzēst atlasītās rindas',
                'menu.array.delete column': 'Dzēst kolonnu',
                'menu.array.delete columns': 'Dzēst atlasītās kolonnas',
                'submenu.array.insert separator': 'Ievietojiet atdalītāju',
                'menu.insert table': 'Ievietojiet tabulu',
                'submenu.table style': 'Tabulas stili'
            },
            lu: {
                'keyboard.tooltip.functions': 'Funktiounen',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Griichesch Bréiwer',
                'keyboard.tooltip.command': 'LaTeX Kommando Modus',
                'keyboard.tooltip.numeric': 'Numeresch',
                'keyboard.tooltip.roman': 'Réimesch Bréiwer',
                'tooltip.copy to clipboard': 'Kopéiert op Clipboard',
                'tooltip.redo': 'Nees nei maachen',
                'tooltip.toggle virtual keyboard': 'Wiesselt Virtuell Tastatur',
                'tooltip.undo': 'Undoen',
                'menu.insert matrix': 'Matrix asetzen',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Matrix Ofgrenzer',
                'menu.array.add row above': 'Dobäizemaachen Rei No',
                'menu.array.add row below': 'Füügt Rei vir',
                'menu.array.add column after': 'Dobäizemaachen Kolonn No',
                'menu.array.add column before': 'Kolonn derbäi Virun',
                'menu.array.delete row': 'Rad läschen',
                'menu.array.delete rows': 'Läscht Ausgewielte Reien',
                'menu.array.delete column': 'Läscht Kolonn',
                'menu.array.delete columns': 'Läscht Ausgewielte Kolonnen',
                'submenu.array.insert separator': 'Insert Separator',
                'menu.insert table': 'Dësch anzeginn',
                'submenu.table style': 'Dësch Style'
            },
            nl: {
                'keyboard.tooltip.functions': 'Functies',
                'keyboard.tooltip.symbols': 'Symbolen',
                'keyboard.tooltip.greek': 'Griekse letters',
                'keyboard.tooltip.command': 'LaTeX commando mode',
                'keyboard.tooltip.numeric': 'Numeriek',
                'keyboard.tooltip.roman': 'Romeinse letters',
                'tooltip.copy to clipboard': 'Kopiëren naar klembord',
                'tooltip.redo': 'Opnieuw',
                'tooltip.toggle virtual keyboard': 'Schakel naar virtueel toetsenbord',
                'tooltip.undo': 'Ongedaan maken',
                'menu.insert matrix': 'Matrix invoegen',
                'menu.insert vector': 'Vector invoegen',
                'submenu.array.matrix delimiters': 'Matrixscheidingstekens',
                'menu.array.add row above': 'Rij toevoegen na',
                'menu.array.add row below': 'Rij toevoegen eerder',
                'menu.array.add column after': 'Kolom toevoegen na',
                'menu.array.add column before': 'Kolom toevoegen voor',
                'menu.array.delete row': 'Verwijder rij',
                'menu.array.delete rows': 'Geselecteerde rijen verwijderen',
                'menu.array.delete column': 'Kolom verwijderen',
                'menu.array.delete columns': 'Geselecteerde kolommen verwijderen',
                'submenu.array.insert separator': 'Scheidingsteken invoegen',
                'menu.insert table': 'Tabel invoegen',
                'submenu.table style': 'Tabelstijl'
            },
            no: {
                'keyboard.tooltip.functions': 'Funksjoner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Greske bokstaver',
                'keyboard.tooltip.command': 'LaTeX kommandomodus',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerske bokstaver',
                'tooltip.copy to clipboard': 'Kopiere til utklippstavle',
                'tooltip.redo': 'Gjøre om',
                'tooltip.toggle virtual keyboard': 'Bytt virtuelt tastatur',
                'tooltip.undo': 'Angre',
                'menu.insert matrix': 'Sett inn matrise',
                'menu.insert vector': 'Sett inn vektor',
                'submenu.array.matrix delimiters': 'Matrix avgrensere',
                'menu.array.add row above': 'Legg til rad etter',
                'menu.array.add row below': 'Legg til rad før',
                'menu.array.add column after': 'Legg til kolonne etter',
                'menu.array.add column before': 'Legg til kolonne før',
                'menu.array.delete row': 'Slett rad',
                'menu.array.delete rows': 'Slett valgte rader',
                'menu.array.delete column': 'Slett kolonne',
                'menu.array.delete columns': 'Slett valgte kolonner',
                'submenu.array.insert separator': 'Sett inn skilletegn',
                'menu.insert table': 'Sett inn tabell',
                'submenu.table style': 'Tabellstil'
            },
            mk: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Грчки букви',
                'keyboard.tooltip.command': 'Режим на команда во латекс',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римски писма',
                'tooltip.copy to clipboard': 'Копирајте во клипборд',
                'tooltip.redo': 'Повторно',
                'tooltip.toggle virtual keyboard': 'Вклучете ја виртуелната тастатура',
                'tooltip.undo': 'Врати',
                'menu.insert matrix': 'Вметнете матрица',
                'menu.insert vector': 'Вметни вектор',
                'submenu.array.matrix delimiters': 'Разграничувачи на матрица',
                'menu.array.add row above': 'Додадете ред после',
                'menu.array.add row below': 'Додади ред пред тоа',
                'menu.array.add column after': 'Додадете колона после',
                'menu.array.add column before': 'Додадете колона пред тоа',
                'menu.array.delete row': 'Избриши го редот',
                'menu.array.delete rows': 'Избришете ги избраните редови',
                'menu.array.delete column': 'Избриши ја колоната',
                'menu.array.delete columns': 'Избриши ја колоната',
                'submenu.array.insert separator': 'Вметнете сепаратор',
                'menu.insert table': 'Вметни табела',
                'submenu.table style': 'Табела стил'
            },
            pl: {
                'keyboard.tooltip.functions': 'Funkcje',
                'keyboard.tooltip.symbols': 'Symbolika',
                'keyboard.tooltip.greek': 'Litery greckie',
                'keyboard.tooltip.command': 'Tryb poleceń LaTeX',
                'keyboard.tooltip.numeric': 'Numeryczne',
                'keyboard.tooltip.roman': 'Litery rzymskie',
                'tooltip.copy to clipboard': 'Kopiuj do Schowka',
                'tooltip.redo': 'Przywróć',
                'tooltip.toggle virtual keyboard': 'Przełącz wirtualną klawiaturę',
                'tooltip.undo': 'Cofnij',
                'menu.insert matrix': 'Wstaw macierz',
                'menu.insert vector': 'Wstaw wektor',
                'submenu.array.matrix delimiters': 'Ograniczniki macierzy',
                'menu.array.add row above': 'Dodaj wiersz po',
                'menu.array.add row below': 'Dodaj wiersz przed',
                'menu.array.add column after': 'Dodaj kolumnę po',
                'menu.array.add column before': 'Dodaj kolumnę przed',
                'menu.array.delete row': 'Usuń wiersz',
                'menu.array.delete rows': 'Usuń wybrane wiersze',
                'menu.array.delete column': 'Usuń kolumnę',
                'menu.array.delete columns': 'Usuń wybrane kolumny',
                'submenu.array.insert separator': 'Wstaw separator',
                'menu.insert table': 'Wypełnij tabelę',
                'submenu.table style': 'Styl tabelę'
            },
            pt: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Símbolos',
                'keyboard.tooltip.greek': 'Letras gregas',
                'keyboard.tooltip.command': 'Modo de Comando LaTeX',
                'keyboard.tooltip.numeric': 'Numérico',
                'keyboard.tooltip.roman': 'Letras romanas',
                'tooltip.copy to clipboard': 'Copiar para área de transferência',
                'tooltip.redo': 'Refazer',
                'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
                'tooltip.undo': 'Desfazer',
                'menu.insert matrix': 'Inserir Matriz',
                'menu.insert vector': 'Inserir vetor',
                'submenu.array.matrix delimiters': 'Delimitadores de matriz',
                'menu.array.add row above': 'Adicionar linha depois',
                'menu.array.add row below': 'Adicionar linha antes',
                'menu.array.add column after': 'Adicionar coluna depois',
                'menu.array.add column before': 'Adicionar coluna antes',
                'menu.array.delete row': 'Excluir linha',
                'menu.array.delete rows': 'Excluir linhas selecionadas',
                'menu.array.delete column': 'Apagar Coluna',
                'menu.array.delete columns': 'Excluir Colunas Selecionadas',
                'submenu.array.insert separator': 'Inserir Separador',
                'menu.insert table': 'Insira a tabela',
                'submenu.table style': 'Estilo tabela'
            },
            ro: {
                'keyboard.tooltip.functions': 'Funcții',
                'keyboard.tooltip.symbols': 'Simboluri',
                'keyboard.tooltip.greek': 'Scrisori grecești',
                'keyboard.tooltip.command': 'Modul de comandă latex',
                'keyboard.tooltip.numeric': 'Numeric',
                'keyboard.tooltip.roman': 'Scrisori romane',
                'tooltip.copy to clipboard': 'Copiați în clipboard',
                'tooltip.redo': 'A reface',
                'tooltip.toggle virtual keyboard': 'Comutați tastatura virtuală',
                'tooltip.undo': 'Anula',
                'menu.insert matrix': 'Introduceți Matrix',
                'menu.insert vector': 'Inserați Vector',
                'submenu.array.matrix delimiters': 'Delimitatori de matrice',
                'menu.array.add row above': 'Adăugați rândul după',
                'menu.array.add row below': 'Adăugați rândul înainte',
                'menu.array.add column after': 'Adăugați o coloană după',
                'menu.array.add column before': 'Adăugați o coloană înainte',
                'menu.array.delete row': 'Ștergeți rândul',
                'menu.array.delete rows': 'Ștergeți rândurile selectate',
                'menu.array.delete column': 'Ștergeți coloana',
                'menu.array.delete columns': 'Ștergeți coloanele selectate',
                'submenu.array.insert separator': 'Introduceți separatorul',
                'menu.insert table': 'Introduceți tabelul',
                'submenu.table style': 'Table style'
            },
            ru: {
                'keyboard.tooltip.functions': 'Функции',
                'keyboard.tooltip.symbols': 'Символы',
                'keyboard.tooltip.greek': 'Греческие буквы',
                'keyboard.tooltip.command': 'Режим командной строки Латекс',
                'keyboard.tooltip.numeric': 'числовой',
                'keyboard.tooltip.roman': 'Латинские буквы',
                'tooltip.copy to clipboard': 'Скопировать в буфер обмена',
                'tooltip.redo': 'переделывать',
                'tooltip.toggle virtual keyboard': 'Переключить виртуальную клавиатуру',
                'tooltip.undo': 'расстегивать',
                'menu.insert matrix': 'Вставить матрицу',
                'menu.insert vector': 'Вставить вектор',
                'submenu.array.matrix delimiters': 'Матричные разделители',
                'menu.array.add row above': 'Добавить строку после',
                'menu.array.add row below': 'Добавить строку перед',
                'menu.array.add column after': 'Добавить столбец после',
                'menu.array.add column before': 'Добавить столбец перед',
                'menu.array.delete row': 'Удалить строку',
                'menu.array.delete rows': 'Удалить выбранные строки',
                'menu.array.delete column': 'Удалить столбец',
                'menu.array.delete columns': 'Удалить выбранные столбцы',
                'submenu.array.insert separator': 'Вставить разделитель',
                'menu.insert table': 'Вставить таблицу',
                'submenu.table style': 'Табличный стиль'
            },
            sk: {
                'keyboard.tooltip.functions': 'Functions',
                'keyboard.tooltip.symbols': 'Symboly',
                'keyboard.tooltip.greek': 'Grécke listy',
                'keyboard.tooltip.command': 'Príkazový režim LaTeX',
                'keyboard.tooltip.numeric': 'Numerické',
                'keyboard.tooltip.roman': 'Rímske listy',
                'tooltip.copy to clipboard': 'Skopírovať do schránky',
                'tooltip.redo': 'Znova',
                'tooltip.toggle virtual keyboard': 'Prepnúť virtuálnu klávesnicu',
                'tooltip.undo': 'Vrátenie späť',
                'menu.insert matrix': 'Vložte maticu',
                'menu.insert vector': 'Vložte vektor',
                'submenu.array.matrix delimiters': 'Oddeľovače matíc',
                'menu.array.add row above': 'Pridajte riadok za',
                'menu.array.add row below': 'Pridajte riadok pred',
                'menu.array.add column after': 'Pridať stĺpec za',
                'menu.array.add column before': 'Pridajte stĺpec predtým',
                'menu.array.delete row': 'Odstrániť riadok',
                'menu.array.delete rows': 'Odstrániť vybraté riadky',
                'menu.array.delete column': 'Odstrániť stĺpec',
                'menu.array.delete columns': 'Odstrániť vybraté stĺpce',
                'submenu.array.insert separator': 'Vložte oddeľovač',
                'menu.insert table': 'Vložte tabuľku',
                'submenu.table style': 'Štýl tabuľky'
            },
            sl: {
                'keyboard.tooltip.functions': 'Funkcije',
                'keyboard.tooltip.symbols': 'Simboli',
                'keyboard.tooltip.greek': 'Grška pisma',
                'keyboard.tooltip.command': 'Ukazni način LaTeX',
                'keyboard.tooltip.numeric': 'Številsko',
                'keyboard.tooltip.roman': 'Rimska pisma',
                'tooltip.copy to clipboard': 'Kopirati v odložišče',
                'tooltip.redo': 'Ponovi',
                'tooltip.toggle virtual keyboard': 'Preklop navidezne tipkovnice',
                'tooltip.undo': 'Razveljavi',
                'menu.insert matrix': 'Vstavi matrico',
                'menu.insert vector': 'Vstavi vektor',
                'submenu.array.matrix delimiters': 'Matrični ločevalniki',
                'menu.array.add row above': 'Dodaj vrstico po',
                'menu.array.add row below': 'Dodaj vrstico prej',
                'menu.array.add column after': 'Dodaj stolpec po',
                'menu.array.add column before': 'Dodaj stolpec prej',
                'menu.array.delete row': 'Izbriši vrstico',
                'menu.array.delete rows': 'Izbriši izbrane vrstice',
                'menu.array.delete column': 'Izbriši stolpec',
                'menu.array.delete columns': 'Izbriši izbrane stolpce',
                'submenu.array.insert separator': 'Vstavi ločilo',
                'menu.insert table': 'Vstavi tabelo',
                'submenu.table style': 'Tabela slog'
            },
            sq: {
                'keyboard.tooltip.functions': 'Funksione',
                'keyboard.tooltip.symbols': 'Simbolet',
                'keyboard.tooltip.greek': 'Letrat Greke',
                'keyboard.tooltip.command': 'Modaliteti i komandës latex',
                'keyboard.tooltip.numeric': 'Numerike',
                'keyboard.tooltip.roman': 'Letrat romake',
                'tooltip.copy to clipboard': 'Kopjoni në Clipboard',
                'tooltip.redo': 'Riparo',
                'tooltip.toggle virtual keyboard': 'Aktivizo tastierën virtuale',
                'tooltip.undo': 'Zhbëj',
                'menu.insert matrix': 'Vendosni Matricën',
                'menu.insert vector': 'Vendos vektorin',
                'submenu.array.matrix delimiters': 'Përcaktuesit e matricës',
                'menu.array.add row above': 'Shto Rreshtin Pas',
                'menu.array.add row below': 'Shto Rreshtin Para',
                'menu.array.add column after': 'Shto kolonën pas',
                'menu.array.add column before': 'Shto kolonën para',
                'menu.array.delete row': 'Fshi Rreshtin',
                'menu.array.delete rows': 'Fshi rreshtat e zgjedhur',
                'menu.array.delete column': 'Fshi kolonën',
                'menu.array.delete columns': 'Fshi kolonat e zgjedhura',
                'submenu.array.insert separator': 'Vendos Ndarësin',
                'menu.insert table': 'Vendos tabelën',
                'submenu.table style': 'Stili tabelën'
            },
            sr: {
                'keyboard.tooltip.functions': 'Функције',
                'keyboard.tooltip.symbols': 'Симболи',
                'keyboard.tooltip.greek': 'Греек Леттерс',
                'keyboard.tooltip.command': 'ЛаТеКс командни режим',
                'keyboard.tooltip.numeric': 'Нумерички',
                'keyboard.tooltip.roman': 'Римска писма',
                'tooltip.copy to clipboard': 'Копирајте у међуспремник',
                'tooltip.redo': 'Понови',
                'tooltip.toggle virtual keyboard': 'Укључи / искључи виртуелну тастатуру',
                'tooltip.undo': 'Опозови',
                'menu.insert matrix': 'Уметни матрицу',
                'menu.insert vector': 'Уметни вектор',
                'submenu.array.matrix delimiters': 'Матрик Делимитерс',
                'menu.array.add row above': 'Додај ред после',
                'menu.array.add row below': 'Додај ред пре',
                'menu.array.add column after': 'Додај колону после',
                'menu.array.add column before': 'Додај колону пре',
                'menu.array.delete row': 'Избриши ред',
                'menu.array.delete rows': 'Избриши изабране редове',
                'menu.array.delete column': 'Избриши колону',
                'menu.array.delete columns': 'Избриши изабране колоне',
                'submenu.array.insert separator': 'Уметни сепаратор',
                'menu.insert table': 'Убаци табелу',
                'submenu.table style': 'Табеларни стил'
            },
            sv: {
                'keyboard.tooltip.functions': 'Funktioner',
                'keyboard.tooltip.symbols': 'Symboler',
                'keyboard.tooltip.greek': 'Grekiska bokstäver',
                'keyboard.tooltip.command': 'LaTeX kommandoläge',
                'keyboard.tooltip.numeric': 'Numerisk',
                'keyboard.tooltip.roman': 'Romerska bokstäver',
                'tooltip.copy to clipboard': 'Kopiera till Urklipp',
                'tooltip.redo': 'Göra om',
                'tooltip.toggle virtual keyboard': 'Växla virtuellt tangentbord',
                'tooltip.undo': 'Ångra',
                'menu.insert matrix': 'Sätt in matris',
                'menu.insert vector': 'Infoga vektor',
                'submenu.array.matrix delimiters': 'Matrisavgränsare',
                'menu.array.add row above': 'Lägg till rad efter',
                'menu.array.add row below': 'Lägg till rad före',
                'menu.array.add column after': 'Lägg till kolumn efter',
                'menu.array.add column before': 'Lägg till kolumn före',
                'menu.array.delete row': 'Radera rad',
                'menu.array.delete rows': 'Ta bort valda rader',
                'menu.array.delete column': 'Ta bort kolumn',
                'menu.array.delete columns': 'Ta bort valda kolumner',
                'submenu.array.insert separator': 'Sätt i separator',
                'menu.insert table': 'Infoga tabell',
                'submenu.table style': 'Tabellstil'
            },
            th: {
                'keyboard.tooltip.functions': 'ฟังก์ชั่น',
                'keyboard.tooltip.symbols': 'สัญลักษณ์',
                'keyboard.tooltip.greek': 'อักษรกรีก',
                'keyboard.tooltip.command': 'โหมดคำสั่ง น้ำยาง',
                'keyboard.tooltip.numeric': 'ตัวเลข',
                'keyboard.tooltip.roman': 'อักษรโรมัน',
                'tooltip.copy to clipboard': 'คัดลอกไปที่คลิปบอร์ด',
                'tooltip.redo': 'ทำซ้ำ',
                'tooltip.toggle virtual keyboard': 'สลับแป้นพิมพ์เสมือน',
                'tooltip.undo': 'เลิกทำ',
                'menu.insert matrix': 'แทรกเมทริกซ์',
                'menu.insert vector': 'แทรกเวกเตอร์',
                'submenu.array.matrix delimiters': 'ตัวคั่นเมทริกซ์',
                'menu.array.add row above': 'เพิ่มแถวหลัง',
                'menu.array.add row below': 'เพิ่มแถวก่อน',
                'menu.array.add column after': 'เพิ่มคอลัมน์หลัง',
                'menu.array.add column before': 'เพิ่มคอลัมน์ก่อน',
                'menu.array.delete row': 'ลบแถว',
                'menu.array.delete rows': 'ลบแถวที่เลือก',
                'menu.array.delete column': 'ลบคอลัมน์',
                'menu.array.delete columns': 'ลบคอลัมน์ที่เลือก',
                'submenu.array.insert separator': 'ตัวคั่นแทรก',
                'menu.insert table': 'แทรกตาราง',
                'submenu.table style': 'สไตล์ตาราง'
            },
            tr: {
                'keyboard.tooltip.functions': 'Fonksiyonlar',
                'keyboard.tooltip.symbols': 'Semboller',
                'keyboard.tooltip.greek': 'Yunan harfleri',
                'keyboard.tooltip.command': 'LaTeX Komut Modu',
                'keyboard.tooltip.numeric': 'Sayısal',
                'keyboard.tooltip.roman': 'Roma Harfleri',
                'tooltip.copy to clipboard': 'Panoya kopyala',
                'tooltip.redo': 'Yeniden yap',
                'tooltip.toggle virtual keyboard': 'Sanal Klavyeyi Aç/Kapat',
                'tooltip.undo': 'Geri alma',
                'menu.insert matrix': 'Matris Ekle',
                'menu.insert vector': 'Vektör Ekle',
                'submenu.array.matrix delimiters': 'Matris Sınırlayıcılar',
                'menu.array.add row above': 'Satırdan Sonra Ekle',
                'menu.array.add row below': 'Önce Satır Ekle',
                'menu.array.add column after': 'Sonra Sütun Ekle',
                'menu.array.add column before': 'Önce Sütun Ekle',
                'menu.array.delete row': 'Sırayı sil',
                'menu.array.delete rows': 'Seçili Satırları Sil',
                'menu.array.delete column': 'Sütunu Sil',
                'menu.array.delete columns': 'Seçili Sütunları Sil',
                'submenu.array.insert separator': 'Ayırıcı Ekle',
                'menu.insert table': 'Tablo Ekle',
                'submenu.table style': 'Tablo Stili'
            },
            uk: {
                'keyboard.tooltip.functions': 'Функції',
                'keyboard.tooltip.symbols': 'Символи',
                'keyboard.tooltip.greek': 'Грецькі літери',
                'keyboard.tooltip.command': 'Командний режим латексу',
                'keyboard.tooltip.numeric': 'Числовий',
                'keyboard.tooltip.roman': 'Римські літери',
                'tooltip.copy to clipboard': 'Копіювати в буфер обміну',
                'tooltip.redo': 'Повторити',
                'tooltip.toggle virtual keyboard': 'Переключити віртуальну клавіатуру',
                'tooltip.undo': 'Скасувати',
                'menu.insert matrix': 'Вставити матрицю',
                'menu.insert vector': 'Вставити вектор',
                'submenu.array.matrix delimiters': 'Матричні роздільники',
                'menu.array.add row above': 'Додати рядок після',
                'menu.array.add row below': 'Додати рядок до',
                'menu.array.add column after': 'Додати стовпець після',
                'menu.array.add column before': 'Додати стовпець перед',
                'menu.array.delete row': 'Видалити рядок',
                'menu.array.delete rows': 'Видалити вибрані рядки',
                'menu.array.delete column': 'Видалити стовпець',
                'menu.array.delete columns': 'Видалити вибрані стовпці',
                'submenu.array.insert separator': 'Вставте роздільник',
                'menu.insert table': 'Вставити таблицю',
                'submenu.table style': 'Стиль таблиці'
            },
            vi: {
                'keyboard.tooltip.functions': 'Chức năng',
                'keyboard.tooltip.symbols': 'Ký hiệu',
                'keyboard.tooltip.greek': 'Chữ Hy Lạp',
                'keyboard.tooltip.command': 'Chế độ lệnh LaTeX',
                'keyboard.tooltip.numeric': 'Số',
                'keyboard.tooltip.roman': 'Chữ cái La mã',
                'tooltip.copy to clipboard': 'Sao chép vào clipboard',
                'tooltip.redo': 'Làm lại',
                'tooltip.toggle virtual keyboard': 'Chuyển đổi bàn phím ảo',
                'tooltip.undo': 'Hoàn tác',
                'menu.insert matrix': 'Chèn ma trận',
                'menu.insert vector': 'Insert Vector',
                'submenu.array.matrix delimiters': 'Dấu phân cách ma trận',
                'menu.array.add row above': 'Thêm hàng sau',
                'menu.array.add row below': 'Thêm hàng trước',
                'menu.array.add column after': 'Thêm cột sau',
                'menu.array.add column before': 'Thêm cột trước',
                'menu.array.delete row': 'Xóa hàng',
                'menu.array.delete rows': 'Xóa hàng đã chọn',
                'menu.array.delete column': 'Xóa cột',
                'menu.array.delete columns': 'Xóa các cột đã chọn',
                'submenu.array.insert separator': 'Chèn dấu phân cách',
                'menu.insert table': 'Chèn bảng',
                'submenu.table style': 'Kiểu bảng'
            },
            zh_cn: {
                'keyboard.tooltip.functions': '职能',
                'keyboard.tooltip.symbols': '符号',
                'keyboard.tooltip.greek': '希腊字母',
                'keyboard.tooltip.command': '乳胶 命令模式',
                'keyboard.tooltip.numeric': '数字',
                'keyboard.tooltip.roman': '罗马字母',
                'tooltip.copy to clipboard': '复制到剪贴板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切换虚拟键盘',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩阵',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩阵分隔符',
                'menu.array.add row above': '在后面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在后面添加列r',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '删除行',
                'menu.array.delete rows': '删除选定行',
                'menu.array.delete column': '删除列',
                'menu.array.delete columns': '删除选定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格样式'
            },
            zh_tw: {
                'keyboard.tooltip.functions': '職能',
                'keyboard.tooltip.symbols': '符號',
                'keyboard.tooltip.greek': '希臘字母',
                'keyboard.tooltip.command': '乳膠命令模式',
                'keyboard.tooltip.numeric': '數字',
                'keyboard.tooltip.roman': '羅馬字母',
                'tooltip.copy to clipboard': '複製到剪貼板',
                'tooltip.redo': '重做',
                'tooltip.toggle virtual keyboard': '切換虛擬鍵盤',
                'tooltip.undo': '撤消',
                'menu.insert matrix': '插入矩陣',
                'menu.insert vector': '插入向量',
                'submenu.array.matrix delimiters': '矩陣分隔符',
                'menu.array.add row above': '在後面添加行',
                'menu.array.add row below': '在前面添加行',
                'menu.array.add column after': '在後面添加列',
                'menu.array.add column before': '在前面添加列',
                'menu.array.delete row': '刪除行',
                'menu.array.delete rows': '刪除選定行',
                'menu.array.delete column': '刪除列',
                'menu.array.delete columns': '刪除選定的列',
                'submenu.array.insert separator': '插入分隔符',
                'menu.insert table': '插入表格',
                'submenu.table style': '表格樣式'
            }
        },
        _locale: '',
        get locale() {
            return p._locale || (p._locale = e() ? navigator.language.slice(0, 5) : 'en'), p._locale;
        },
        set locale(q) {
            p._locale = q;
        },
        merge(q, r) {
            if (q && r) {
                const s = p._locale;
                p.locale = q, p.strings[q] = {
                    ...p.strings[q],
                    ...r
                }, p.locale = s;
            } else if (q && !r)
                for (const t of Object.keys(q))
                    p.merge(t, q[t]);
        }
    };

    function q(r) {
        if (void 0 === r)
            return;
        const s = p.locale.slice(0, 2);
        let t = '';
        return p.strings[p.locale] && (t = p.strings[p.locale][r]), !t && p.strings[s] && (t = p.strings[s][r]), t || (t = p.strings.en[r]), t || void 0;
    }
    const s = {
            m0: '#3F3D99',
            m1: '#993D71',
            m2: '#998B3D',
            m3: '#3D9956',
            m4: '#3D5A99',
            m5: '#993D90',
            m6: '#996D3D',
            m7: '#43993D',
            m8: '#3D7999',
            m9: '#843D99'
        },
        t = {
            blue: '#0072BD',
            orange: '#D95319',
            yellow: '#EDB120',
            purple: '#7E2F8E',
            green: '#77AC30',
            cyan: '#4DBEEE',
            red: '#A2142F'
        },
        u = {
            red: '#fbbbb6',
            orange: '#ffe0c2',
            yellow: '#fff1c2',
            lime: '#d0e8b9',
            green: '#bceac4',
            teal: '#b9f1f1',
            blue: '#b6d9fb',
            indigo: '#d1c2f0',
            purple: '#e3baf8',
            magenta: '#f9c8e0',
            black: '#353535',
            'dark-grey': '#8C8C8C',
            grey: '#D0D0D0',
            'light-grey': '#F0F0F0',
            white: '#ffffff'
        },
        v = {
            red: '#d7170b',
            orange: '#fe8a2b',
            yellow: '#ffc02b',
            lime: '#63b215',
            green: '#21ba3a',
            teal: '#17cfcf',
            blue: '#0d80f2',
            indigo: '#63c',
            purple: '#a219e6',
            magenta: '#eb4799',
            black: '#000',
            'dark-grey': '#666',
            grey: '#A6A6A6',
            'light-grey': '#d4d5d2',
            white: '#ffffff'
        },
        w = {
            Red: 'red',
            Orange: 'orange',
            Yellow: 'yellow',
            LimeGreen: 'lime',
            Green: 'green',
            TealBlue: 'teal',
            Blue: 'blue',
            Violet: 'indigo',
            Purple: 'purple',
            Magenta: 'magenta',
            Black: 'black',
            Gray: 'grey',
            White: 'white'
        },
        x = {
            Apricot: '#FBB982',
            Aquamarine: '#00B5BE',
            Bittersweet: '#C04F17',
            Black: '#221E1F',
            Blue: '#2D2F92',
            BlueGreen: '#00B3B8',
            BlueViolet: '#473992',
            BrickRed: '#B6321C',
            Brown: '#792500',
            BurntOrange: '#F7921D',
            CadetBlue: '#74729A',
            CarnationPink: '#F282B4',
            Cerulean: '#00A2E3',
            CornflowerBlue: '#41B0E4',
            Cyan: '#00AEEF',
            Dandelion: '#FDBC42',
            DarkOrchid: '#A4538A',
            Emerald: '#00A99D',
            ForestGreen: '#009B55',
            Fuchsia: '#8C368C',
            Goldenrod: '#FFDF42',
            Gray: '#949698',
            Green: '#00A64F',
            GreenYellow: '#DFE674',
            JungleGreen: '#00A99A',
            Lavender: '#F49EC4',
            Limegreen: '#8DC73E',
            Magenta: '#EC008C',
            Mahogany: '#A9341F',
            Maroon: '#AF3235',
            Melon: '#F89E7B',
            MidnightBlue: '#006795',
            Mulberry: '#A93C93',
            NavyBlue: '#006EB8',
            OliveGreen: '#3C8031',
            Orange: '#F58137',
            OrangeRed: '#ED135A',
            Orchid: '#AF72B0',
            Peach: '#F7965A',
            Periwinkle: '#7977B8',
            PineGreen: '#008B72',
            Plum: '#92268F',
            ProcessBlue: '#00B0F0',
            Purple: '#99479B',
            RawSienna: '#974006',
            Red: '#ED1B23',
            RedOrange: '#F26035',
            RedViolet: '#A1246B',
            Rhodamine: '#EF559F',
            RoyalBlue: '#0071BC',
            RoyalPurple: '#613F99',
            RubineRed: '#ED017D',
            Salmon: '#F69289',
            SeaGreen: '#3FBC9D',
            Sepia: '#671800',
            SkyBlue: '#46C5DD',
            SpringGreen: '#C6DC67',
            Tan: '#DA9D76',
            TealBlue: '#00AEB3',
            Thistle: '#D883B7',
            Turquoise: '#00B4CE',
            Violet: '#58429B',
            VioletRed: '#EF58A0',
            White: '#FFFFFF',
            WildStrawberry: '#EE2967',
            Yellow: '#FFF200',
            YellowGreen: '#98CC70',
            YellowOrange: '#FAA21A'
        };

    function y(z) {
        var A, B, C, D, E, F;
        const G = z.split('!');
        let H, I, J, K = 255,
            L = 255,
            M = 255,
            N = -1;
        const O = h.length > 0 && h[0].startsWith('-');
        O && (h[0] = h[0].slice(1));
        for (let P = 0; P < h.length; P++) {
            H = K, I = L, J = M;
            const Q = null === (A = h[P].trim().match(/^([A-Za-z\d]+)/)) || void 0 === A ? void 0 : A[1],
                R = null == Q ? void 0 : Q.toLowerCase(),
                S = Q && null !== (g = null !== (f = null !== (e = null !== (d = null !== (B = v[R]) && void 0 !== B ? B : v[w[Q]]) && void 0 !== d ? d : t[Q]) && void 0 !== e ? e : x[Q]) && void 0 !== f ? f : s[Q]) && void 0 !== g ? g : h[P].trim();
            let T = S.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);
            if ((null == T ? void 0 : T[1]) && T[2] && T[3])
                K = Math.max(0, Math.min(255, Number.parseInt(T[1], 16))), L = Math.max(0, Math.min(255, Number.parseInt(T[2], 16))), M = Math.max(0, Math.min(255, Number.parseInt(T[3], 16)));
            else if (T = S.match(/^#([\da-f]{3})$/i), null == T ? void 0 : T[1]) {
                const U = Number.parseInt(T[1][0], 16),
                    V = Number.parseInt(T[1][1], 16),
                    W = Number.parseInt(T[1][2], 16);
                K = Math.max(0, Math.min(255, 16 * P + P)), L = Math.max(0, Math.min(255, 16 * V + V)), M = Math.max(0, Math.min(255, 16 * W + W));
            } else {
                if (T = S.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i), !((null == T ? void 0 : T[1]) && T[2] && T[3]))
                    return;
                K = Math.max(0, Math.min(255, Number.parseInt(T[1]))), L = Math.max(0, Math.min(255, Number.parseInt(T[2]))), M = Math.max(0, Math.min(255, Number.parseInt(T[3])));
            }
            N >= 0 && (K = (1 - N) * K + N * H, L = (1 - N) * L + N * I, M = (1 - N) * M + N * J, N = -1), P + 1 < h.length && (N = Math.max(0, Math.min(100, Number.parseInt(h[++P]))) / 100);
        }
        return N >= 0 && (K = N * K + (1 - N) * H, L = N * L + (1 - N) * I, M = N * M + (1 - N) * J), Q && (K = 255 - K, L = 255 - L, M = 255 - M), '#' + ('00' + Math.round(K).toString(16)).slice(-2) + ('00' + Math.round(L).toString(16)).slice(-2) + ('00' + Math.round(M).toString(16)).slice(-2);
    }

    function N(O) {
        var P, Q;
        return O = O.trim(), null !== (Q = null !== (P = u[O.toLowerCase()]) && void 0 !== P ? P : u[w[O]]) && void 0 !== Q ? Q : y(O);
    }

    function Q(R, S, T) {
        return T < 0 && (T += 6), T >= 6 && (T -= 6), T < 1 ? (S - R) * T + R : T < 3 ? S : T < 4 ? (S - R) * (4 - T) + R : R;
    }

    function R(S) {
        return S < 0 ? 0 : S > 255 ? 255 : Math.round(S);
    }

    function S(T) {
        let U = function(V) {
            if (!V)
                return;
            if ('#' !== V[0])
                return;
            let W;
            return (V = V.slice(1)).length <= 4 ? (W = {
                r: parseInt(V[0] + V[0], 16),
                g: parseInt(V[1] + V[1], 16),
                b: parseInt(V[2] + V[2], 16)
            }, 4 === V.length && (W.a = parseInt(V[3] + V[3], 16) / 255)) : (W = {
                r: parseInt(V[0] + V[1], 16),
                g: parseInt(V[2] + V[3], 16),
                b: parseInt(V[4] + V[5], 16)
            }, 8 === V.length && (W.a = parseInt(V[6] + V[7], 16) / 255)), W && void 0 === W.a && (W.a = 1), W;
        }(T);
        if (!U)
            return T;
        let {
            h: V,
            s: W,
            l: X
        } = function(Y) {
            let {
                r: Z,
                g: $,
                b: ab
            } = Y;
            Z /= 255, $ /= 255, ab /= 255;
            const bb = Math.min(Z, $, ab),
                cb = Math.max(Z, $, ab),
                db = cb - bb;
            let eb, fb;
            cb === bb ? eb = 0 : Z === cb ? eb = ($ - ab) / db : $ === cb ? eb = 2 + (ab - Z) / db : ab === cb && (eb = 4 + (Z - $) / db), eb = Math.min(60 * eb, 360), eb < 0 && (eb += 360);
            const gb = (bb + cb) / 2;
            return fb = cb === bb ? 0 : gb <= 0.5 ? db / (cb + bb) : db / (2 - cb - bb), {
                h: eb,
                s: fb,
                l: gb
            };
        }(U);
        return W += 0.1, X -= 0.1,
            function(Y) {
                const {
                    r: Z,
                    g: $,
                    b: ab
                } = Y;
                let bb = (16777216 + (R(Z) << 16) + (R($) << 8) + R(ab)).toString(16).slice(1);
                return bb[0] === bb[1] && bb[2] === bb[3] && bb[4] === bb[5] && bb[6] === bb[7] && (bb = bb[0] + bb[2] + bb[4]), '#' + bb;
            }(function(Y) {
                let [Z, $, ab] = [
                    Y.h,
                    Y.s,
                    Y.l
                ];
                Z = (Z + 360) % 360 / 60, ab = Math.max(0, Math.min(ab, 1)), $ = Math.max(0, Math.min($, 1));
                const bb = ab <= 0.5 ? ab * ($ + 1) : ab + $ - ab * $,
                    cb = 2 * ab - bb;
                return {
                    r: Math.round(255 * Q(cb, bb, Z + 2)),
                    g: Math.round(255 * Q(cb, bb, Z)),
                    b: Math.round(255 * Q(cb, bb, Z - 2))
                };
            }({
                h: V,
                s: W,
                l: X
            }));
    }
    const T = {},
        U = {
            60: '\\lt',
            62: '\\gt',
            111: 'o',
            38: '\\&',
            123: '\\lbrace',
            125: '\\rbrace',
            91: '\\lbrack',
            93: '\\rbrack',
            58: '\\colon',
            160: '~',
            172: '\\neg',
            183: '\\cdot',
            188: '\\frac{1}{4}',
            189: '\\frac{1}{2}',
            190: '\\frac{3}{4}',
            8304: '^{0}',
            8305: '^{i}',
            185: '^{1}',
            178: '^{2}',
            179: '^{3}',
            8224: '\\dagger',
            8225: '\\ddagger',
            8230: '\\ldots',
            8308: '^{4}',
            8309: '^{5}',
            8310: '^{6}',
            8311: '^{7}',
            8312: '^{8}',
            8313: '^{9}',
            8314: '^{+}',
            8315: '^{-}',
            8316: '^{=}',
            8319: '^{n}',
            8320: '_{0}',
            8321: '_{1}',
            8322: '_{2}',
            8323: '_{3}',
            8324: '_{4}',
            8325: '_{5}',
            8326: '_{6}',
            8327: '_{7}',
            8328: '_{8}',
            8329: '_{9}',
            8330: '_{+}',
            8331: '_{-}',
            8332: '_{=}',
            8336: '_{a}',
            8337: '_{e}',
            8338: '_{o}',
            8339: '_{x}',
            8242: '\\prime',
            39: '\\prime',
            8592: '\\gets',
            8594: '\\to',
            9651: '\\triangle',
            9661: '\\triangledown',
            8715: '\\owns',
            8727: '\\ast',
            8739: '\\vert',
            8741: '\\Vert',
            8743: '\\land',
            8744: '\\lor',
            8901: '\\cdot',
            8904: '\\bowtie',
            8800: '\\ne',
            8804: '\\le',
            8805: '\\ge',
            8869: '\\bot',
            10231: '\\biconditional',
            10232: '\\impliedby',
            10233: '\\implies',
            10234: '\\iff',
            8450: '\\mathbb{C}',
            8469: '\\mathbb{N}',
            8473: '\\mathbb{P}',
            8474: '\\mathbb{Q}',
            8477: '\\mathbb{R}',
            8484: '\\mathbb{Z}',
            8461: '\\mathbb{H}',
            8476: '\\Re',
            8465: '\\Im',
            42: '\\ast',
            11036: '\\square',
            9633: '\\square',
            8720: '\\coprod',
            8716: '\\not\\ni',
            9671: '\\diamond',
            8846: '\\uplus',
            8851: '\\sqcap',
            8852: '\\sqcup',
            8768: '\\wr',
            8750: '\\oint',
            8226: '\\textbullet',
            8722: '-',
            978: '\\Upsilon'
        },
        V = {},
        W = {},
        X = {
            iff: '\\;\u27FA\\;',
            nicefrac: '^{#1}\\!\\!/\\!_{#2}',
            rd: '\\mathrm{d}',
            rD: '\\mathrm{D}',
            doubleStruckCapitalN: '\\mathbb{N}',
            doubleStruckCapitalR: '\\mathbb{R}',
            doubleStruckCapitalQ: '\\mathbb{Q}',
            doubleStruckCapitalZ: '\\mathbb{Z}',
            doubleStruckCapitalP: '\\mathbb{P}',
            scriptCapitalE: '\\mathscr{E}',
            scriptCapitalH: '\\mathscr{H}',
            scriptCapitalL: '\\mathscr{L}',
            gothicCapitalC: '\\mathfrak{C}',
            gothicCapitalH: '\\mathfrak{H}',
            gothicCapitalI: '\\mathfrak{I}',
            gothicCapitalR: '\\mathfrak{R}',
            imaginaryI: '\\mathrm{i}',
            imaginaryJ: '\\mathrm{j}',
            exponentialE: '\\mathrm{e}',
            differentialD: '\\mathrm{d}',
            capitalDifferentialD: '\\mathrm{D}',
            'braket.sty': {
                package: {
                    bra: '\\mathinner{\\langle{#1}|}',
                    ket: '\\mathinner{|{#1}\\rangle}',
                    braket: '\\mathinner{\\langle{#1}\\rangle}',
                    set: '\\mathinner{\\lbrace #1 \\rbrace}',
                    Bra: '\\left\\langle #1\\right|',
                    Ket: '\\left|#1\\right\\rangle',
                    Braket: '\\left\\langle{#1}\\right\\rangle',
                    Set: '\\left\\lbrace #1 \\right\\rbrace'
                }
            },
            'amsmath.sty': {
                package: {
                    varGamma: '\\mathit{\\Gamma}',
                    varDelta: '\\mathit{\\Delta}',
                    varTheta: '\\mathit{\\Theta}',
                    varLambda: '\\mathit{\\Lambda}',
                    varXi: '\\mathit{\\Xi}',
                    varPi: '\\mathit{\\Pi}',
                    varSigma: '\\mathit{\\Sigma}',
                    varUpsilon: '\\mathit{\\Upsilon}',
                    varPhi: '\\mathit{\\Phi}',
                    varPsi: '\\mathit{\\Psi}',
                    varOmega: '\\mathit{\\Omega}',
                    pmod: {
                        def: '\\quad(\\operatorname{mod}\\ #1)',
                        args: 1,
                        expand: !1
                    },
                    mod: {
                        def: '\\quad\\operatorname{mod}\\,\\,#1',
                        args: 1,
                        expand: !1
                    },
                    bmod: {
                        def: '\\;\\mathbin{\\operatorname{mod }}',
                        expand: !1
                    }
                },
                expand: !1
            },
            'texvc.sty': {
                package: {
                    darr: '\\downarrow',
                    dArr: '\\Downarrow',
                    Darr: '\\Downarrow',
                    lang: '\\langle',
                    rang: '\\rangle',
                    uarr: '\\uparrow',
                    uArr: '\\Uparrow',
                    Uarr: '\\Uparrow',
                    N: '\\mathbb{N}',
                    R: '\\mathbb{R}',
                    Z: '\\mathbb{Z}',
                    alef: '\\aleph',
                    alefsym: '\\aleph',
                    Alpha: '\\mathrm{A}',
                    Beta: '\\mathrm{B}',
                    bull: '\\bullet',
                    Chi: '\\mathrm{X}',
                    clubs: '\\clubsuit',
                    cnums: '\\mathbb{C}',
                    Complex: '\\mathbb{C}',
                    Dagger: '\\ddagger',
                    diamonds: '\\diamondsuit',
                    empty: '\\emptyset',
                    Epsilon: '\\mathrm{E}',
                    Eta: '\\mathrm{H}',
                    exist: '\\exists',
                    harr: '\\leftrightarrow',
                    hArr: '\\Leftrightarrow',
                    Harr: '\\Leftrightarrow',
                    hearts: '\\heartsuit',
                    image: '\\Im',
                    infin: '\\infty',
                    Iota: '\\mathrm{I}',
                    isin: '\\in',
                    Kappa: '\\mathrm{K}',
                    larr: '\\leftarrow',
                    lArr: '\\Leftarrow',
                    Larr: '\\Leftarrow',
                    lrarr: '\\leftrightarrow',
                    lrArr: '\\Leftrightarrow',
                    Lrarr: '\\Leftrightarrow',
                    Mu: '\\mathrm{M}',
                    natnums: '\\mathbb{N}',
                    Nu: '\\mathrm{N}',
                    Omicron: '\\mathrm{O}',
                    plusmn: '\\pm',
                    rarr: '\\rightarrow',
                    rArr: '\\Rightarrow',
                    Rarr: '\\Rightarrow',
                    real: '\\Re',
                    reals: '\\mathbb{R}',
                    Reals: '\\mathbb{R}',
                    Rho: '\\mathrm{P}',
                    sdot: '\\cdot',
                    sect: '\\S',
                    spades: '\\spadesuit',
                    sub: '\\subset',
                    sube: '\\subseteq',
                    supe: '\\supseteq',
                    Tau: '\\mathrm{T}',
                    thetasym: '\\vartheta',
                    weierp: '\\wp',
                    Zeta: '\\mathrm{Z}'
                },
                expand: !1
            }
        },
        Y = {
            ' ': 32,
            '\\#': 35,
            '\\&': 38,
            '\\$': 36,
            '\\%': 37,
            '\\_': 95,
            '\\euro': 8364,
            '\\maltese': 10016,
            '\\{': 123,
            '\\}': 125,
            '\\nobreakspace': 160,
            '\\ldots': 8230,
            '\\textellipsis': 8230,
            '\\backslash': 92,
            '`': 8216,
            '\'': 8217,
            '``': 8220,
            '\'\'': 8221,
            '\\degree': 176,
            '\\textasciicircum': 94,
            '\\textasciitilde': 126,
            '\\textasteriskcentered': 42,
            '\\textbackslash': 92,
            '\\textbraceleft': 123,
            '\\textbraceright': 125,
            '\\textbullet': 8226,
            '\\textdollar': 36,
            '\\textsterling': 163,
            '\\textdagger': 8224,
            '\\textdaggerdbl': 8225,
            '\u2013': 8211,
            '\u2014': 8212,
            '\u2018': 8216,
            '\u2019': 8217,
            '\u201C': 8220,
            '\u201D': 8221,
            '"': 8221,
            '\\ss': 223,
            '\\ae': 230,
            '\\oe': 339,
            '\\AE': 198,
            '\\OE': 338,
            '\\O': 216,
            '\\i': 305,
            '\\j': 567,
            '\\aa': 229,
            '\\AA': 197
        },
        Z = /[\w!@*()-=+{}[\]\\';:?/.,~<>`|$%#&^" ]/,
        $ = m() ? new RegExp('\\p{Letter}', 'u') : /[a-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/,
        ab = m() ? new RegExp('[0-9\\p{Letter}]', 'u') : /[\da-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/;

    function bb(cb, db, eb = 'mord', fb) {
        void 0 !== db && (T[cb] = {
            definitionType: 'symbol',
            type: eb,
            variant: fb,
            codepoint: db
        }, U[db] || (U[db] = cb), Y[cb] || (Y[cb] = db));
    }

    function cb(db, eb, fb) {
        if ('string' != typeof db)
            for (const [gb, hb, ib, jb] of db)
                bb(gb, hb, null != ib ? ib : eb, null != jb ? jb : fb);
        else
            for (let kb = 0; kb < db.length; kb++) {
                const lb = db.charAt(kb);
                bb(fb, fb.codePointAt(0));
            }
    }

    function eb(fb, gb) {
        for (let hb = fb; hb <= gb; hb++)
            bb(String.fromCodePoint(hb), hb);
    }

    function fb(gb, hb) {
        if (void 0 === hb)
            return '';
        if ('math' === gb && U[hb])
            return U[hb];
        if ('text' === gb) {
            let ib = Object.keys(Y).find(jb => Y[jb] === hb);
            if (!ib) {
                const jb = hb.toString(16);
                ib = '^'.repeat(jb.length) + jb;
            }
            return ib;
        }
        return String.fromCodePoint(hb);
    }
    const hb = {
            119893: 8462,
            119965: 8492,
            119968: 8496,
            119969: 8497,
            119971: 8459,
            119972: 8464,
            119975: 8466,
            119976: 8499,
            119981: 8475,
            119994: 8495,
            119996: 8458,
            120004: 8500,
            120070: 8493,
            120075: 8460,
            120076: 8465,
            120085: 8476,
            120093: 8488,
            120122: 8450,
            120127: 8461,
            120133: 8469,
            120135: 8473,
            120136: 8474,
            120137: 8477,
            120145: 8484
        },
        ib = [{
                start: 119808,
                len: 26,
                offset: 65,
                style: 'bold'
            },
            {
                start: 119834,
                len: 26,
                offset: 97,
                style: 'bold'
            },
            {
                start: 119860,
                len: 26,
                offset: 65,
                style: 'italic'
            },
            {
                start: 119886,
                len: 26,
                offset: 97,
                style: 'italic'
            },
            {
                start: 119912,
                len: 26,
                offset: 65,
                style: 'bolditalic'
            },
            {
                start: 119938,
                len: 26,
                offset: 97,
                style: 'bolditalic'
            },
            {
                start: 119964,
                len: 26,
                offset: 65,
                variant: 'script'
            },
            {
                start: 119990,
                len: 26,
                offset: 97,
                variant: 'script'
            },
            {
                start: 120016,
                len: 26,
                offset: 65,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120042,
                len: 26,
                offset: 97,
                variant: 'script',
                style: 'bold'
            },
            {
                start: 120068,
                len: 26,
                offset: 65,
                variant: 'fraktur'
            },
            {
                start: 120094,
                len: 26,
                offset: 97,
                variant: 'fraktur'
            },
            {
                start: 120172,
                len: 26,
                offset: 65,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120198,
                len: 26,
                offset: 97,
                variant: 'fraktur',
                style: 'bold'
            },
            {
                start: 120120,
                len: 26,
                offset: 65,
                variant: 'double-struck'
            },
            {
                start: 120146,
                len: 26,
                offset: 97,
                variant: 'double-struck'
            },
            {
                start: 120224,
                len: 26,
                offset: 65,
                variant: 'sans-serif'
            },
            {
                start: 120250,
                len: 26,
                offset: 97,
                variant: 'sans-serif'
            },
            {
                start: 120276,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120302,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120328,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120354,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'italic'
            },
            {
                start: 120380,
                len: 26,
                offset: 65,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120406,
                len: 26,
                offset: 97,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120432,
                len: 26,
                offset: 65,
                variant: 'monospace'
            },
            {
                start: 120458,
                len: 26,
                offset: 97,
                variant: 'monospace'
            },
            {
                start: 120488,
                len: 25,
                offset: 913,
                style: 'bold'
            },
            {
                start: 120514,
                len: 25,
                offset: 945,
                style: 'bold'
            },
            {
                start: 120546,
                len: 25,
                offset: 913,
                style: 'italic'
            },
            {
                start: 120572,
                len: 25,
                offset: 945,
                style: 'italic'
            },
            {
                start: 120604,
                len: 25,
                offset: 913,
                style: 'bolditalic'
            },
            {
                start: 120630,
                len: 25,
                offset: 945,
                style: 'bolditalic'
            },
            {
                start: 120662,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120688,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120720,
                len: 25,
                offset: 913,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120746,
                len: 25,
                offset: 945,
                variant: 'sans-serif',
                style: 'bolditalic'
            },
            {
                start: 120782,
                len: 10,
                offset: 48,
                variant: 'main',
                style: 'bold'
            },
            {
                start: 120792,
                len: 10,
                offset: 48,
                variant: 'double-struck'
            },
            {
                start: 120803,
                len: 10,
                offset: 48,
                variant: 'sans-serif'
            },
            {
                start: 120812,
                len: 10,
                offset: 48,
                variant: 'sans-serif',
                style: 'bold'
            },
            {
                start: 120822,
                len: 10,
                offset: 48,
                variant: 'monospace'
            }
        ];

    function jb(kb) {
        let lb = 'auto';
        const mb = kb.match(/:([^=]+)/);
        return mb && (lb = mb[1].trim()), lb;
    }

    function lb(mb) {
        if (!mb)
            return [];
        const nb = [];
        let ob = mb.split(']');
        if (ob[0].startsWith('[')) {
            nb.push({
                isOptional: !0,
                type: jb(ob[0].slice(1))
            });
            for (let pb = 1; pb <= ob.length; pb++)
                nb.push(...lb(ob[pb]));
        } else if (ob = mb.split('}'), ob[0].startsWith('{')) {
            nb.push({
                isOptional: !1,
                type: jb(ob[0].slice(1))
            });
            for (let pb = 1; pb <= ob.length; pb++)
                nb.push(...lb(ob[pb]));
        }
        return nb;
    }

    function nb(ob) {
        if (!ob)
            return '';
        let pb = '',
            qb = !0;
        for (const rb of ob)
            'string' == typeof d.value ? pb += d.value : qb = !1;
        return qb ? pb : '';
    }

    function pb(qb, rb, sb, tb = !1) {
        'string' == typeof qb && (qb = [qb]);
        const ub = {
            tabular: tb,
            params: lb(rb),
            createAtom: sb
        };
        for (const vb of qb)
            W[rb] = e;
    }

    function sb(tb, ub, vb) {
        pb(tb, ub, vb, !0);
    }

    function tb(ub, vb, wb) {
        var xb, yb;
        wb || (wb = {});
        const zb = {
            definitionType: 'function',
            params: lb(vb),
            ifMode: wb.ifMode,
            isFunction: null !== (d = wb.isFunction) && void 0 !== d && d,
            applyMode: wb.applyMode,
            infix: null !== (e = wb.infix) && void 0 !== e && e,
            createAtom: wb.createAtom,
            applyStyle: wb.applyStyle
        };
        if ('string' == typeof ub)
            V['\\' + ub] = f;
        else
            for (const Ab of ub)
                V['\\' + vb] = f;
    }
    let yb;

    function zb(Ab) {
        return yb || (yb = _Gb(X)), Ab ? _Gb({
            ...yb,
            ...Ab
        }) : yb;
    }

    function Ab(Bb, Cb) {
        var Db, Eb, Fb, Gb;
        if ('string' == typeof Bb) {
            let Hb = 0;
            const Ib = Bb;
            return /(^|[^\\])#1/.test(f) && (Hb = 1), /(^|[^\\])#2/.test(f) && (Hb = 2), /(^|[^\\])#3/.test(f) && (Hb = 3), /(^|[^\\])#4/.test(f) && (Hb = 4), /(^|[^\\])#5/.test(f) && (Hb = 5), /(^|[^\\])#6/.test(f) && (Hb = 6), /(^|[^\\])#7/.test(f) && (Hb = 7), /(^|[^\\])#8/.test(f) && (Hb = 8), /(^|[^\\])#9/.test(f) && (Hb = 9), {
                expand: null === (Db = null == Cb ? void 0 : Cb.expand) || void 0 === Db || Db,
                captureSelection: null === (d = null == Cb ? void 0 : Cb.captureSelection) || void 0 === d || d,
                args: Hb,
                def: f
            };
        }
        return {
            expand: null === (e = null == Cb ? void 0 : Cb.expand) || void 0 === e || e,
            captureSelection: null === (f = null == Cb ? void 0 : Cb.captureSelection) || void 0 === f || f,
            args: 0,
            ...Bb
        };
    }

    function _Gb(Hb) {
        if (!Hb)
            return {};
        const Ib = {};
        for (const Jb of Object.keys(Hb)) {
            const Kb = Hb[Jb];
            if (null == d)
                delete Ib[Jb];
            else if ('object' == typeof d && 'package' in d)
                for (const Lb of Object.keys(d.package))
                    Ib[Hb] = Ab(d.package[Hb], {
                        expand: d.expand,
                        captureSelection: d.captureSelection
                    });
            else
                Ib[Jb] = Ab(d);
        }
        return Ib;
    }
    const Lb = [
            0,
            0.69444,
            0,
            0
        ],
        Mb = [
            0,
            0.61111,
            0,
            0
        ],
        Nb = [
            0.25,
            0.75,
            0,
            0
        ],
        Ob = [
            0,
            0.44444,
            0,
            0
        ],
        Pb = [
            0,
            0.68611,
            0,
            0
        ],
        Qb = [
            0.19444,
            0.69444,
            0,
            0
        ],
        Rb = [
            0,
            0.68333,
            0,
            0
        ],
        Sb = [
            0,
            0.68889,
            0,
            0
        ],
        Tb = [
            0,
            0.69141,
            0,
            0
        ],
        Ub = [
            0,
            0,
            0,
            0
        ],
        Vb = [
            0,
            0.64444,
            0,
            0
        ],
        Wb = [
            0,
            0.69224,
            0,
            0
        ],
        Xb = [
            0.19444,
            0.44444,
            0,
            0
        ],
        Yb = [
            0.65002,
            1.15,
            0,
            0
        ],
        Zb = [
            0,
            0.55556,
            0,
            0
        ],
        $b = [
            0.35001,
            0.85,
            0,
            0
        ],
        ac = [
            1.25003,
            1.75,
            0,
            0
        ],
        bc = [
            0.95003,
            1.45,
            0,
            0
        ],
        cc = [
            0,
            0.75,
            0,
            0
        ],
        dc = [
            0,
            0.47534,
            0,
            0
        ],
        ec = [
            0.25001,
            0.75,
            0,
            0
        ],
        fc = [
            0.55001,
            1.05,
            0,
            0
        ],
        gc = [
            0.16667,
            0.68889,
            0,
            0
        ],
        hc = [
            0.08167,
            0.58167,
            0,
            0
        ];
    var ic = {
        'AMS-Regular': {
            32: Ub,
            65: Sb,
            66: Sb,
            67: Sb,
            68: Sb,
            69: Sb,
            70: Sb,
            71: Sb,
            72: Sb,
            73: Sb,
            74: gc,
            75: Sb,
            76: Sb,
            77: Sb,
            78: Sb,
            79: gc,
            80: Sb,
            81: gc,
            82: Sb,
            83: Sb,
            84: Sb,
            85: Sb,
            86: Sb,
            87: Sb,
            88: Sb,
            89: Sb,
            90: Sb,
            107: Sb,
            160: Ub,
            165: [
                0,
                0.675,
                0.025,
                0
            ],
            174: [
                0.15559,
                0.69224,
                0,
                0
            ],
            240: Sb,
            295: Sb,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.9,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.9,
                0,
                0
            ],
            989: hc,
            1008: [
                0,
                0.43056,
                0.04028,
                0
            ],
            8245: [
                0,
                0.54986,
                0,
                0
            ],
            8463: Sb,
            8487: Sb,
            8498: Sb,
            8502: Sb,
            8503: Sb,
            8504: Sb,
            8513: Sb,
            8592: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8594: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8602: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8603: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8606: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8608: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8610: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8611: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8619: [
                0,
                0.54986,
                0,
                0
            ],
            8620: [
                0,
                0.54986,
                0,
                0
            ],
            8621: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8622: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8624: Wb,
            8625: Wb,
            8630: [
                0,
                0.43056,
                0,
                0
            ],
            8631: [
                0,
                0.43056,
                0,
                0
            ],
            8634: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8635: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8638: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8639: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8642: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8643: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8644: [
                0.1808,
                0.675,
                0,
                0
            ],
            8646: [
                0.1808,
                0.675,
                0,
                0
            ],
            8647: [
                0.1808,
                0.675,
                0,
                0
            ],
            8648: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8649: [
                0.1808,
                0.675,
                0,
                0
            ],
            8650: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8651: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8652: [
                0.01354,
                0.52239,
                0,
                0
            ],
            8653: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8654: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8655: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8666: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8667: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8669: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8672: [
                -0.064,
                0.437,
                0,
                0
            ],
            8674: [
                -0.064,
                0.437,
                0,
                0
            ],
            8705: [
                0,
                0.825,
                0,
                0
            ],
            8708: Sb,
            8709: hc,
            8717: [
                0,
                0.43056,
                0,
                0
            ],
            8722: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8724: [
                0.08198,
                0.69224,
                0,
                0
            ],
            8726: hc,
            8733: Wb,
            8736: Wb,
            8737: Wb,
            8738: [
                0.03517,
                0.52239,
                0,
                0
            ],
            8739: hc,
            8740: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8741: hc,
            8742: [
                0.25142,
                0.74111,
                0,
                0
            ],
            8756: Wb,
            8757: Wb,
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8765: [
                -0.13313,
                0.37788,
                0,
                0
            ],
            8769: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8770: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8774: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8778: hc,
            8782: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8783: [
                0.06062,
                0.54986,
                0,
                0
            ],
            8785: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8786: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8787: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8790: Wb,
            8791: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8796: [
                0.08198,
                0.91667,
                0,
                0
            ],
            8806: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8807: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8808: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8809: [
                0.25142,
                0.75726,
                0,
                0
            ],
            8812: [
                0.25583,
                0.75583,
                0,
                0
            ],
            8814: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8815: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8816: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8817: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8818: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8819: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8822: [
                0.1808,
                0.675,
                0,
                0
            ],
            8823: [
                0.1808,
                0.675,
                0,
                0
            ],
            8828: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8829: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8830: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8831: [
                0.22958,
                0.72958,
                0,
                0
            ],
            8832: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8833: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8840: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8841: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8842: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8843: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8847: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8848: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8858: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8859: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8861: [
                0.08198,
                0.58198,
                0,
                0
            ],
            8862: [
                0,
                0.675,
                0,
                0
            ],
            8863: [
                0,
                0.675,
                0,
                0
            ],
            8864: [
                0,
                0.675,
                0,
                0
            ],
            8865: [
                0,
                0.675,
                0,
                0
            ],
            8872: Wb,
            8873: Wb,
            8874: Wb,
            8876: Sb,
            8877: Sb,
            8878: Sb,
            8879: Sb,
            8882: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8883: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8884: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8885: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8888: [
                0,
                0.54986,
                0,
                0
            ],
            8890: [
                0.19444,
                0.43056,
                0,
                0
            ],
            8891: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8892: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8901: [
                0,
                0.54986,
                0,
                0
            ],
            8903: hc,
            8905: hc,
            8906: hc,
            8907: Wb,
            8908: Wb,
            8909: [
                -0.03598,
                0.46402,
                0,
                0
            ],
            8910: [
                0,
                0.54986,
                0,
                0
            ],
            8911: [
                0,
                0.54986,
                0,
                0
            ],
            8912: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8913: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8914: [
                0,
                0.54986,
                0,
                0
            ],
            8915: [
                0,
                0.54986,
                0,
                0
            ],
            8916: Wb,
            8918: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8919: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8920: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8921: [
                0.03517,
                0.54986,
                0,
                0
            ],
            8922: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8923: [
                0.38569,
                0.88569,
                0,
                0
            ],
            8926: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8927: [
                0.13667,
                0.63667,
                0,
                0
            ],
            8928: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8929: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8934: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8935: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8936: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8937: [
                0.23222,
                0.74111,
                0,
                0
            ],
            8938: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8939: [
                0.20576,
                0.70576,
                0,
                0
            ],
            8940: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8941: [
                0.30274,
                0.79383,
                0,
                0
            ],
            8994: [
                0.19444,
                0.69224,
                0,
                0
            ],
            8995: [
                0.19444,
                0.69224,
                0,
                0
            ],
            9416: [
                0.15559,
                0.69224,
                0,
                0
            ],
            9484: Wb,
            9488: Wb,
            9492: [
                0,
                0.37788,
                0,
                0
            ],
            9496: [
                0,
                0.37788,
                0,
                0
            ],
            9585: [
                0.19444,
                0.68889,
                0,
                0
            ],
            9586: [
                0.19444,
                0.74111,
                0,
                0
            ],
            9632: [
                0,
                0.675,
                0,
                0
            ],
            9633: [
                0,
                0.675,
                0,
                0
            ],
            9650: [
                0,
                0.54986,
                0,
                0
            ],
            9651: [
                0,
                0.54986,
                0,
                0
            ],
            9654: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9660: [
                0,
                0.54986,
                0,
                0
            ],
            9661: [
                0,
                0.54986,
                0,
                0
            ],
            9664: [
                0.03517,
                0.54986,
                0,
                0
            ],
            9674: [
                0.11111,
                0.69224,
                0,
                0
            ],
            9733: [
                0.19444,
                0.69224,
                0,
                0
            ],
            10003: Wb,
            10016: Wb,
            10731: [
                0.11111,
                0.69224,
                0,
                0
            ],
            10846: [
                0.19444,
                0.75583,
                0,
                0
            ],
            10877: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10878: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10885: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10886: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10887: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10888: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10889: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10890: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10891: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10892: [
                0.48256,
                0.98256,
                0,
                0
            ],
            10901: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10902: [
                0.13667,
                0.63667,
                0,
                0
            ],
            10933: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10934: [
                0.25142,
                0.75726,
                0,
                0
            ],
            10935: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10936: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10937: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10938: [
                0.26167,
                0.75726,
                0,
                0
            ],
            10949: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10950: [
                0.25583,
                0.75583,
                0,
                0
            ],
            10955: [
                0.28481,
                0.79383,
                0,
                0
            ],
            10956: [
                0.28481,
                0.79383,
                0,
                0
            ],
            57350: hc,
            57351: hc,
            57352: hc,
            57353: [
                0,
                0.43056,
                0.04028,
                0
            ],
            57356: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57357: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57358: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57359: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57360: [
                0.30274,
                0.79383,
                0,
                0
            ],
            57361: [
                0.41951,
                0.91951,
                0,
                0
            ],
            57366: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57367: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57368: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57369: [
                0.25142,
                0.75726,
                0,
                0
            ],
            57370: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57371: [
                0.13597,
                0.63597,
                0,
                0
            ]
        },
        'Caligraphic-Regular': {
            32: Ub,
            65: [
                0,
                0.68333,
                0,
                0.19445
            ],
            66: [
                0,
                0.68333,
                0.03041,
                0.13889
            ],
            67: [
                0,
                0.68333,
                0.05834,
                0.13889
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            69: [
                0,
                0.68333,
                0.08944,
                0.11111
            ],
            70: [
                0,
                0.68333,
                0.09931,
                0.11111
            ],
            71: [
                0.09722,
                0.68333,
                0.0593,
                0.11111
            ],
            72: [
                0,
                0.68333,
                0.00965,
                0.11111
            ],
            73: [
                0,
                0.68333,
                0.07382,
                0
            ],
            74: [
                0.09722,
                0.68333,
                0.18472,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.01445,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.13889
            ],
            77: [
                0,
                0.68333,
                0,
                0.13889
            ],
            78: [
                0,
                0.68333,
                0.14736,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.11111
            ],
            80: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            81: [
                0.09722,
                0.68333,
                0,
                0.11111
            ],
            82: [
                0,
                0.68333,
                0,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.075,
                0.13889
            ],
            84: [
                0,
                0.68333,
                0.25417,
                0
            ],
            85: [
                0,
                0.68333,
                0.09931,
                0.08334
            ],
            86: [
                0,
                0.68333,
                0.08222,
                0
            ],
            87: [
                0,
                0.68333,
                0.08222,
                0.08334
            ],
            88: [
                0,
                0.68333,
                0.14643,
                0.13889
            ],
            89: [
                0.09722,
                0.68333,
                0.08222,
                0.08334
            ],
            90: [
                0,
                0.68333,
                0.07944,
                0.13889
            ],
            160: Ub
        },
        'Fraktur-Regular': {
            32: Ub,
            33: Tb,
            34: Tb,
            38: Tb,
            39: Tb,
            40: [
                0.24982,
                0.74947,
                0,
                0
            ],
            41: [
                0.24982,
                0.74947,
                0,
                0
            ],
            42: [
                0,
                0.62119,
                0,
                0
            ],
            43: [
                0.08319,
                0.58283,
                0,
                0
            ],
            44: [
                0,
                0.10803,
                0,
                0
            ],
            45: [
                0.08319,
                0.58283,
                0,
                0
            ],
            46: [
                0,
                0.10803,
                0,
                0
            ],
            47: [
                0.24982,
                0.74947,
                0,
                0
            ],
            48: dc,
            49: dc,
            50: dc,
            51: [
                0.18906,
                0.47534,
                0,
                0
            ],
            52: [
                0.18906,
                0.47534,
                0,
                0
            ],
            53: [
                0.18906,
                0.47534,
                0,
                0
            ],
            54: Tb,
            55: [
                0.18906,
                0.47534,
                0,
                0
            ],
            56: Tb,
            57: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58: dc,
            59: [
                0.12604,
                0.47534,
                0,
                0
            ],
            61: [
                -0.13099,
                0.36866,
                0,
                0
            ],
            63: Tb,
            65: Tb,
            66: Tb,
            67: Tb,
            68: Tb,
            69: Tb,
            70: [
                0.12604,
                0.69141,
                0,
                0
            ],
            71: Tb,
            72: [
                0.06302,
                0.69141,
                0,
                0
            ],
            73: Tb,
            74: [
                0.12604,
                0.69141,
                0,
                0
            ],
            75: Tb,
            76: Tb,
            77: Tb,
            78: Tb,
            79: Tb,
            80: [
                0.18906,
                0.69141,
                0,
                0
            ],
            81: [
                0.03781,
                0.69141,
                0,
                0
            ],
            82: Tb,
            83: Tb,
            84: Tb,
            85: Tb,
            86: Tb,
            87: Tb,
            88: Tb,
            89: [
                0.18906,
                0.69141,
                0,
                0
            ],
            90: [
                0.12604,
                0.69141,
                0,
                0
            ],
            91: [
                0.24982,
                0.74947,
                0,
                0
            ],
            93: [
                0.24982,
                0.74947,
                0,
                0
            ],
            94: Tb,
            97: dc,
            98: Tb,
            99: dc,
            100: [
                0,
                0.62119,
                0,
                0
            ],
            101: dc,
            102: [
                0.18906,
                0.69141,
                0,
                0
            ],
            103: [
                0.18906,
                0.47534,
                0,
                0
            ],
            104: [
                0.18906,
                0.69141,
                0,
                0
            ],
            105: Tb,
            106: Tb,
            107: Tb,
            108: Tb,
            109: dc,
            110: dc,
            111: dc,
            112: [
                0.18906,
                0.52396,
                0,
                0
            ],
            113: [
                0.18906,
                0.47534,
                0,
                0
            ],
            114: dc,
            115: dc,
            116: [
                0,
                0.62119,
                0,
                0
            ],
            117: dc,
            118: [
                0,
                0.52396,
                0,
                0
            ],
            119: [
                0,
                0.52396,
                0,
                0
            ],
            120: [
                0.18906,
                0.47534,
                0,
                0
            ],
            121: [
                0.18906,
                0.47534,
                0,
                0
            ],
            122: [
                0.18906,
                0.47534,
                0,
                0
            ],
            160: Ub,
            8216: Tb,
            8217: Tb,
            58112: [
                0,
                0.62119,
                0,
                0
            ],
            58113: [
                0,
                0.62119,
                0,
                0
            ],
            58114: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58115: [
                0.18906,
                0.69141,
                0,
                0
            ],
            58116: [
                0.18906,
                0.47534,
                0,
                0
            ],
            58117: Tb,
            58118: [
                0,
                0.62119,
                0,
                0
            ],
            58119: dc
        },
        'Main-Bold': {
            32: Ub,
            33: Lb,
            34: Lb,
            35: Qb,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: Lb,
            39: Lb,
            40: Nb,
            41: Nb,
            42: cc,
            43: [
                0.13333,
                0.63333,
                0,
                0
            ],
            44: [
                0.19444,
                0.15556,
                0,
                0
            ],
            45: Ob,
            46: [
                0,
                0.15556,
                0,
                0
            ],
            47: Nb,
            48: Vb,
            49: Vb,
            50: Vb,
            51: Vb,
            52: Vb,
            53: Vb,
            54: Vb,
            55: Vb,
            56: Vb,
            57: Vb,
            58: Ob,
            59: Xb,
            60: [
                0.08556,
                0.58556,
                0,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            62: [
                0.08556,
                0.58556,
                0,
                0
            ],
            63: Lb,
            64: Lb,
            65: Pb,
            66: Pb,
            67: Pb,
            68: Pb,
            69: Pb,
            70: Pb,
            71: Pb,
            72: Pb,
            73: Pb,
            74: Pb,
            75: Pb,
            76: Pb,
            77: Pb,
            78: Pb,
            79: Pb,
            80: Pb,
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: Pb,
            83: Pb,
            84: Pb,
            85: Pb,
            86: [
                0,
                0.68611,
                0.01597,
                0
            ],
            87: [
                0,
                0.68611,
                0.01597,
                0
            ],
            88: Pb,
            89: [
                0,
                0.68611,
                0.02875,
                0
            ],
            90: Pb,
            91: Nb,
            92: Nb,
            93: Nb,
            94: Lb,
            95: [
                0.31,
                0.13444,
                0.03194,
                0
            ],
            97: Ob,
            98: Lb,
            99: Ob,
            100: Lb,
            101: Ob,
            102: [
                0,
                0.69444,
                0.10903,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            104: Lb,
            105: Lb,
            106: Qb,
            107: Lb,
            108: Lb,
            109: Ob,
            110: Ob,
            111: Ob,
            112: Xb,
            113: Xb,
            114: Ob,
            115: Ob,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: Ob,
            118: [
                0,
                0.44444,
                0.01597,
                0
            ],
            119: [
                0,
                0.44444,
                0.01597,
                0
            ],
            120: Ob,
            121: [
                0.19444,
                0.44444,
                0.01597,
                0
            ],
            122: Ob,
            123: Nb,
            124: Nb,
            125: Nb,
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: Ub,
            163: Lb,
            168: Lb,
            172: Ob,
            176: Lb,
            177: [
                0.13333,
                0.63333,
                0,
                0
            ],
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: Pb,
            215: [
                0.13333,
                0.63333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0,
                0
            ],
            223: Lb,
            230: Ob,
            247: [
                0.13333,
                0.63333,
                0,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0,
                0
            ],
            305: Ob,
            338: Pb,
            339: Ob,
            567: Xb,
            710: Lb,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.59611,
                0,
                0
            ],
            714: Lb,
            715: Lb,
            728: Lb,
            729: Lb,
            730: Lb,
            732: Lb,
            733: Lb,
            915: Pb,
            916: Pb,
            920: Pb,
            923: Pb,
            926: Pb,
            928: Pb,
            931: Pb,
            933: Pb,
            934: Pb,
            936: Pb,
            937: Pb,
            8211: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8212: [
                0,
                0.44444,
                0.03194,
                0
            ],
            8216: Lb,
            8217: Lb,
            8220: Lb,
            8221: Lb,
            8224: Qb,
            8225: Qb,
            8242: Zb,
            8407: [
                0,
                0.72444,
                0.15486,
                0
            ],
            8463: Lb,
            8465: Lb,
            8467: Lb,
            8472: Xb,
            8476: Lb,
            8501: Lb,
            8592: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8593: Qb,
            8594: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8595: Qb,
            8596: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8597: Nb,
            8598: Qb,
            8599: Qb,
            8600: Qb,
            8601: Qb,
            8636: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8637: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8640: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8641: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8656: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8657: Qb,
            8658: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8659: Qb,
            8660: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8661: Nb,
            8704: Lb,
            8706: [
                0,
                0.69444,
                0.06389,
                0
            ],
            8707: Lb,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: Pb,
            8712: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8715: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8722: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8723: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8725: Nb,
            8726: Nb,
            8727: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8728: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8729: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8730: [
                0.18,
                0.82,
                0,
                0
            ],
            8733: Ob,
            8734: Ob,
            8736: Wb,
            8739: Nb,
            8741: Nb,
            8743: Zb,
            8744: Zb,
            8745: Zb,
            8746: Zb,
            8747: [
                0.19444,
                0.69444,
                0.12778,
                0
            ],
            8764: [
                -0.10889,
                0.39111,
                0,
                0
            ],
            8768: Qb,
            8771: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8776: [
                0.02444,
                0.52444,
                0,
                0
            ],
            8781: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8801: [
                0.00222,
                0.50222,
                0,
                0
            ],
            8804: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8805: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8810: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8811: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8826: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8827: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8834: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8835: [
                0.08556,
                0.58556,
                0,
                0
            ],
            8838: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8839: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8846: Zb,
            8849: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8850: [
                0.19667,
                0.69667,
                0,
                0
            ],
            8851: Zb,
            8852: Zb,
            8853: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8854: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8855: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8856: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8857: [
                0.13333,
                0.63333,
                0,
                0
            ],
            8866: Lb,
            8867: Lb,
            8868: Lb,
            8869: Lb,
            8900: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8901: [
                -0.02639,
                0.47361,
                0,
                0
            ],
            8902: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            8968: Nb,
            8969: Nb,
            8970: Nb,
            8971: Nb,
            8994: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            8995: [
                -0.13889,
                0.36111,
                0,
                0
            ],
            9651: Qb,
            9657: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9661: Qb,
            9667: [
                -0.02778,
                0.47222,
                0,
                0
            ],
            9711: Qb,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: cc,
            9838: Qb,
            9839: Qb,
            10216: Nb,
            10217: Nb,
            10815: Pb,
            10927: [
                0.19667,
                0.69667,
                0,
                0
            ],
            10928: [
                0.19667,
                0.69667,
                0,
                0
            ],
            57376: Qb
        },
        'Main-BoldItalic': {
            32: Ub,
            33: [
                0,
                0.69444,
                0.11417,
                0
            ],
            34: [
                0,
                0.69444,
                0.07939,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06833,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.12861,
                0
            ],
            38: [
                0,
                0.69444,
                0.08528,
                0
            ],
            39: [
                0,
                0.69444,
                0.12945,
                0
            ],
            40: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03306,
                0
            ],
            42: [
                0,
                0.75,
                0.14333,
                0
            ],
            43: [
                0.10333,
                0.60333,
                0.03306,
                0
            ],
            44: [
                0.19444,
                0.14722,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.02611,
                0
            ],
            46: [
                0,
                0.14722,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.15806,
                0
            ],
            48: [
                0,
                0.64444,
                0.13167,
                0
            ],
            49: [
                0,
                0.64444,
                0.13167,
                0
            ],
            50: [
                0,
                0.64444,
                0.13167,
                0
            ],
            51: [
                0,
                0.64444,
                0.13167,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            53: [
                0,
                0.64444,
                0.13167,
                0
            ],
            54: [
                0,
                0.64444,
                0.13167,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13167,
                0
            ],
            56: [
                0,
                0.64444,
                0.13167,
                0
            ],
            57: [
                0,
                0.64444,
                0.13167,
                0
            ],
            58: [
                0,
                0.44444,
                0.06695,
                0
            ],
            59: [
                0.19444,
                0.44444,
                0.06695,
                0
            ],
            61: [
                -0.10889,
                0.39111,
                0.06833,
                0
            ],
            63: [
                0,
                0.69444,
                0.11472,
                0
            ],
            64: [
                0,
                0.69444,
                0.09208,
                0
            ],
            65: Pb,
            66: [
                0,
                0.68611,
                0.0992,
                0
            ],
            67: [
                0,
                0.68611,
                0.14208,
                0
            ],
            68: [
                0,
                0.68611,
                0.09062,
                0
            ],
            69: [
                0,
                0.68611,
                0.11431,
                0
            ],
            70: [
                0,
                0.68611,
                0.12903,
                0
            ],
            71: [
                0,
                0.68611,
                0.07347,
                0
            ],
            72: [
                0,
                0.68611,
                0.17208,
                0
            ],
            73: [
                0,
                0.68611,
                0.15681,
                0
            ],
            74: [
                0,
                0.68611,
                0.145,
                0
            ],
            75: [
                0,
                0.68611,
                0.14208,
                0
            ],
            76: Pb,
            77: [
                0,
                0.68611,
                0.17208,
                0
            ],
            78: [
                0,
                0.68611,
                0.17208,
                0
            ],
            79: [
                0,
                0.68611,
                0.09062,
                0
            ],
            80: [
                0,
                0.68611,
                0.0992,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0.09062,
                0
            ],
            82: [
                0,
                0.68611,
                0.02559,
                0
            ],
            83: [
                0,
                0.68611,
                0.11264,
                0
            ],
            84: [
                0,
                0.68611,
                0.12903,
                0
            ],
            85: [
                0,
                0.68611,
                0.17208,
                0
            ],
            86: [
                0,
                0.68611,
                0.18625,
                0
            ],
            87: [
                0,
                0.68611,
                0.18625,
                0
            ],
            88: [
                0,
                0.68611,
                0.15681,
                0
            ],
            89: [
                0,
                0.68611,
                0.19803,
                0
            ],
            90: [
                0,
                0.68611,
                0.14208,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.09972,
                0
            ],
            94: [
                0,
                0.69444,
                0.06709,
                0
            ],
            95: [
                0.31,
                0.13444,
                0.09811,
                0
            ],
            97: [
                0,
                0.44444,
                0.09426,
                0
            ],
            98: [
                0,
                0.69444,
                0.07861,
                0
            ],
            99: [
                0,
                0.44444,
                0.05222,
                0
            ],
            100: [
                0,
                0.69444,
                0.10861,
                0
            ],
            101: [
                0,
                0.44444,
                0.085,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21778,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            104: [
                0,
                0.69444,
                0.09426,
                0
            ],
            105: [
                0,
                0.69326,
                0.11387,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.1672,
                0
            ],
            107: [
                0,
                0.69444,
                0.11111,
                0
            ],
            108: [
                0,
                0.69444,
                0.10861,
                0
            ],
            109: [
                0,
                0.44444,
                0.09426,
                0
            ],
            110: [
                0,
                0.44444,
                0.09426,
                0
            ],
            111: [
                0,
                0.44444,
                0.07861,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.07861,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            114: [
                0,
                0.44444,
                0.11111,
                0
            ],
            115: [
                0,
                0.44444,
                0.08167,
                0
            ],
            116: [
                0,
                0.63492,
                0.09639,
                0
            ],
            117: [
                0,
                0.44444,
                0.09426,
                0
            ],
            118: [
                0,
                0.44444,
                0.11111,
                0
            ],
            119: [
                0,
                0.44444,
                0.11111,
                0
            ],
            120: [
                0,
                0.44444,
                0.12583,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.105,
                0
            ],
            122: [
                0,
                0.44444,
                0.13889,
                0
            ],
            126: [
                0.35,
                0.34444,
                0.11472,
                0
            ],
            160: Ub,
            168: [
                0,
                0.69444,
                0.11473,
                0
            ],
            176: Lb,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68611,
                0.11431,
                0
            ],
            216: [
                0.04861,
                0.73472,
                0.09062,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.09736,
                0
            ],
            230: [
                0,
                0.44444,
                0.085,
                0
            ],
            248: [
                0.09722,
                0.54167,
                0.09458,
                0
            ],
            305: [
                0,
                0.44444,
                0.09426,
                0
            ],
            338: [
                0,
                0.68611,
                0.11431,
                0
            ],
            339: [
                0,
                0.44444,
                0.085,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04611,
                0
            ],
            710: [
                0,
                0.69444,
                0.06709,
                0
            ],
            711: [
                0,
                0.63194,
                0.08271,
                0
            ],
            713: [
                0,
                0.59444,
                0.10444,
                0
            ],
            714: [
                0,
                0.69444,
                0.08528,
                0
            ],
            715: Lb,
            728: [
                0,
                0.69444,
                0.10333,
                0
            ],
            729: [
                0,
                0.69444,
                0.12945,
                0
            ],
            730: Lb,
            732: [
                0,
                0.69444,
                0.11472,
                0
            ],
            733: [
                0,
                0.69444,
                0.11472,
                0
            ],
            915: [
                0,
                0.68611,
                0.12903,
                0
            ],
            916: Pb,
            920: [
                0,
                0.68611,
                0.09062,
                0
            ],
            923: Pb,
            926: [
                0,
                0.68611,
                0.15092,
                0
            ],
            928: [
                0,
                0.68611,
                0.17208,
                0
            ],
            931: [
                0,
                0.68611,
                0.11431,
                0
            ],
            933: [
                0,
                0.68611,
                0.10778,
                0
            ],
            934: [
                0,
                0.68611,
                0.05632,
                0
            ],
            936: [
                0,
                0.68611,
                0.10778,
                0
            ],
            937: [
                0,
                0.68611,
                0.0992,
                0
            ],
            8211: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8212: [
                0,
                0.44444,
                0.09811,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12945,
                0
            ],
            8220: [
                0,
                0.69444,
                0.16772,
                0
            ],
            8221: [
                0,
                0.69444,
                0.07939,
                0
            ]
        },
        'Main-Italic': {
            32: Ub,
            33: [
                0,
                0.69444,
                0.12417,
                0
            ],
            34: [
                0,
                0.69444,
                0.06961,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.06616,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.13639,
                0
            ],
            38: [
                0,
                0.69444,
                0.09694,
                0
            ],
            39: [
                0,
                0.69444,
                0.12417,
                0
            ],
            40: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            41: [
                0.25,
                0.75,
                0.03694,
                0
            ],
            42: [
                0,
                0.75,
                0.14917,
                0
            ],
            43: [
                0.05667,
                0.56167,
                0.03694,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0.02826,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.16194,
                0
            ],
            48: [
                0,
                0.64444,
                0.13556,
                0
            ],
            49: [
                0,
                0.64444,
                0.13556,
                0
            ],
            50: [
                0,
                0.64444,
                0.13556,
                0
            ],
            51: [
                0,
                0.64444,
                0.13556,
                0
            ],
            52: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            53: [
                0,
                0.64444,
                0.13556,
                0
            ],
            54: [
                0,
                0.64444,
                0.13556,
                0
            ],
            55: [
                0.19444,
                0.64444,
                0.13556,
                0
            ],
            56: [
                0,
                0.64444,
                0.13556,
                0
            ],
            57: [
                0,
                0.64444,
                0.13556,
                0
            ],
            58: [
                0,
                0.43056,
                0.0582,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0.0582,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0.06616,
                0
            ],
            63: [
                0,
                0.69444,
                0.1225,
                0
            ],
            64: [
                0,
                0.69444,
                0.09597,
                0
            ],
            65: Rb,
            66: [
                0,
                0.68333,
                0.10257,
                0
            ],
            67: [
                0,
                0.68333,
                0.14528,
                0
            ],
            68: [
                0,
                0.68333,
                0.09403,
                0
            ],
            69: [
                0,
                0.68333,
                0.12028,
                0
            ],
            70: [
                0,
                0.68333,
                0.13305,
                0
            ],
            71: [
                0,
                0.68333,
                0.08722,
                0
            ],
            72: [
                0,
                0.68333,
                0.16389,
                0
            ],
            73: [
                0,
                0.68333,
                0.15806,
                0
            ],
            74: [
                0,
                0.68333,
                0.14028,
                0
            ],
            75: [
                0,
                0.68333,
                0.14528,
                0
            ],
            76: Rb,
            77: [
                0,
                0.68333,
                0.16389,
                0
            ],
            78: [
                0,
                0.68333,
                0.16389,
                0
            ],
            79: [
                0,
                0.68333,
                0.09403,
                0
            ],
            80: [
                0,
                0.68333,
                0.10257,
                0
            ],
            81: [
                0.19444,
                0.68333,
                0.09403,
                0
            ],
            82: [
                0,
                0.68333,
                0.03868,
                0
            ],
            83: [
                0,
                0.68333,
                0.11972,
                0
            ],
            84: [
                0,
                0.68333,
                0.13305,
                0
            ],
            85: [
                0,
                0.68333,
                0.16389,
                0
            ],
            86: [
                0,
                0.68333,
                0.18361,
                0
            ],
            87: [
                0,
                0.68333,
                0.18361,
                0
            ],
            88: [
                0,
                0.68333,
                0.15806,
                0
            ],
            89: [
                0,
                0.68333,
                0.19383,
                0
            ],
            90: [
                0,
                0.68333,
                0.14528,
                0
            ],
            91: [
                0.25,
                0.75,
                0.1875,
                0
            ],
            93: [
                0.25,
                0.75,
                0.10528,
                0
            ],
            94: [
                0,
                0.69444,
                0.06646,
                0
            ],
            95: [
                0.31,
                0.12056,
                0.09208,
                0
            ],
            97: [
                0,
                0.43056,
                0.07671,
                0
            ],
            98: [
                0,
                0.69444,
                0.06312,
                0
            ],
            99: [
                0,
                0.43056,
                0.05653,
                0
            ],
            100: [
                0,
                0.69444,
                0.10333,
                0
            ],
            101: [
                0,
                0.43056,
                0.07514,
                0
            ],
            102: [
                0.19444,
                0.69444,
                0.21194,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            104: [
                0,
                0.69444,
                0.07671,
                0
            ],
            105: [
                0,
                0.65536,
                0.1019,
                0
            ],
            106: [
                0.19444,
                0.65536,
                0.14467,
                0
            ],
            107: [
                0,
                0.69444,
                0.10764,
                0
            ],
            108: [
                0,
                0.69444,
                0.10333,
                0
            ],
            109: [
                0,
                0.43056,
                0.07671,
                0
            ],
            110: [
                0,
                0.43056,
                0.07671,
                0
            ],
            111: [
                0,
                0.43056,
                0.06312,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0.06312,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            114: [
                0,
                0.43056,
                0.10764,
                0
            ],
            115: [
                0,
                0.43056,
                0.08208,
                0
            ],
            116: [
                0,
                0.61508,
                0.09486,
                0
            ],
            117: [
                0,
                0.43056,
                0.07671,
                0
            ],
            118: [
                0,
                0.43056,
                0.10764,
                0
            ],
            119: [
                0,
                0.43056,
                0.10764,
                0
            ],
            120: [
                0,
                0.43056,
                0.12042,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.08847,
                0
            ],
            122: [
                0,
                0.43056,
                0.12292,
                0
            ],
            126: [
                0.35,
                0.31786,
                0.11585,
                0
            ],
            160: Ub,
            168: [
                0,
                0.66786,
                0.10474,
                0
            ],
            176: Lb,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: [
                0,
                0.68333,
                0.12028,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0.09403,
                0
            ],
            223: [
                0.19444,
                0.69444,
                0.10514,
                0
            ],
            230: [
                0,
                0.43056,
                0.07514,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0.09194,
                0
            ],
            338: [
                0,
                0.68333,
                0.12028,
                0
            ],
            339: [
                0,
                0.43056,
                0.07514,
                0
            ],
            710: [
                0,
                0.69444,
                0.06646,
                0
            ],
            711: [
                0,
                0.62847,
                0.08295,
                0
            ],
            713: [
                0,
                0.56167,
                0.10333,
                0
            ],
            714: [
                0,
                0.69444,
                0.09694,
                0
            ],
            715: Lb,
            728: [
                0,
                0.69444,
                0.10806,
                0
            ],
            729: [
                0,
                0.66786,
                0.11752,
                0
            ],
            730: Lb,
            732: [
                0,
                0.66786,
                0.11585,
                0
            ],
            733: [
                0,
                0.69444,
                0.1225,
                0
            ],
            915: [
                0,
                0.68333,
                0.13305,
                0
            ],
            916: Rb,
            920: [
                0,
                0.68333,
                0.09403,
                0
            ],
            923: Rb,
            926: [
                0,
                0.68333,
                0.15294,
                0
            ],
            928: [
                0,
                0.68333,
                0.16389,
                0
            ],
            931: [
                0,
                0.68333,
                0.12028,
                0
            ],
            933: [
                0,
                0.68333,
                0.11111,
                0
            ],
            934: [
                0,
                0.68333,
                0.05986,
                0
            ],
            936: [
                0,
                0.68333,
                0.11111,
                0
            ],
            937: [
                0,
                0.68333,
                0.10257,
                0
            ],
            8211: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8212: [
                0,
                0.43056,
                0.09208,
                0
            ],
            8216: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8217: [
                0,
                0.69444,
                0.12417,
                0
            ],
            8220: [
                0,
                0.69444,
                0.1685,
                0
            ],
            8221: [
                0,
                0.69444,
                0.06961,
                0
            ],
            8463: Sb
        },
        'Main-Regular': {
            32: Ub,
            33: Lb,
            34: Lb,
            35: Qb,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: Lb,
            39: Lb,
            40: Nb,
            41: Nb,
            42: cc,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.19444,
                0.10556,
                0,
                0
            ],
            45: [
                0,
                0.43056,
                0,
                0
            ],
            46: [
                0,
                0.10556,
                0,
                0
            ],
            47: Nb,
            48: Vb,
            49: Vb,
            50: Vb,
            51: Vb,
            52: Vb,
            53: Vb,
            54: Vb,
            55: Vb,
            56: Vb,
            57: Vb,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.19444,
                0.43056,
                0,
                0
            ],
            60: [
                0.0391,
                0.5391,
                0,
                0
            ],
            61: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            62: [
                0.0391,
                0.5391,
                0,
                0
            ],
            63: Lb,
            64: Lb,
            65: Rb,
            66: Rb,
            67: Rb,
            68: Rb,
            69: Rb,
            70: Rb,
            71: Rb,
            72: Rb,
            73: Rb,
            74: Rb,
            75: Rb,
            76: Rb,
            77: Rb,
            78: Rb,
            79: Rb,
            80: Rb,
            81: [
                0.19444,
                0.68333,
                0,
                0
            ],
            82: Rb,
            83: Rb,
            84: Rb,
            85: Rb,
            86: [
                0,
                0.68333,
                0.01389,
                0
            ],
            87: [
                0,
                0.68333,
                0.01389,
                0
            ],
            88: Rb,
            89: [
                0,
                0.68333,
                0.025,
                0
            ],
            90: Rb,
            91: Nb,
            92: Nb,
            93: Nb,
            94: Lb,
            95: [
                0.31,
                0.12056,
                0.02778,
                0
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: Lb,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: Lb,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07778,
                0
            ],
            103: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            104: Lb,
            105: [
                0,
                0.66786,
                0,
                0
            ],
            106: [
                0.19444,
                0.66786,
                0,
                0
            ],
            107: Lb,
            108: Lb,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0
            ],
            113: [
                0.19444,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.61508,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0.01389,
                0
            ],
            119: [
                0,
                0.43056,
                0.01389,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.19444,
                0.43056,
                0.01389,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: Nb,
            124: Nb,
            125: Nb,
            126: [
                0.35,
                0.31786,
                0,
                0
            ],
            160: Ub,
            163: Lb,
            167: Qb,
            168: [
                0,
                0.66786,
                0,
                0
            ],
            172: [
                0,
                0.43056,
                0,
                0
            ],
            176: Lb,
            177: [
                0.08333,
                0.58333,
                0,
                0
            ],
            182: Qb,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            198: Rb,
            215: [
                0.08333,
                0.58333,
                0,
                0
            ],
            216: [
                0.04861,
                0.73194,
                0,
                0
            ],
            223: Lb,
            230: [
                0,
                0.43056,
                0,
                0
            ],
            247: [
                0.08333,
                0.58333,
                0,
                0
            ],
            248: [
                0.09722,
                0.52778,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            338: Rb,
            339: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.19444,
                0.43056,
                0,
                0
            ],
            710: Lb,
            711: [
                0,
                0.62847,
                0,
                0
            ],
            713: [
                0,
                0.56778,
                0,
                0
            ],
            714: Lb,
            715: Lb,
            728: Lb,
            729: [
                0,
                0.66786,
                0,
                0
            ],
            730: Lb,
            732: [
                0,
                0.66786,
                0,
                0
            ],
            733: Lb,
            915: Rb,
            916: Rb,
            920: Rb,
            923: Rb,
            926: Rb,
            928: Rb,
            931: Rb,
            933: Rb,
            934: Rb,
            936: Rb,
            937: Rb,
            8211: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8212: [
                0,
                0.43056,
                0.02778,
                0
            ],
            8216: Lb,
            8217: Lb,
            8220: Lb,
            8221: Lb,
            8224: Qb,
            8225: Qb,
            8230: [
                0,
                0.12,
                0,
                0
            ],
            8242: Zb,
            8407: [
                0,
                0.71444,
                0.15382,
                0
            ],
            8463: Sb,
            8465: Lb,
            8467: [
                0,
                0.69444,
                0,
                0.11111
            ],
            8472: [
                0.19444,
                0.43056,
                0,
                0.11111
            ],
            8476: Lb,
            8501: Lb,
            8592: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8593: Qb,
            8594: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8595: Qb,
            8596: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8597: Nb,
            8598: Qb,
            8599: Qb,
            8600: Qb,
            8601: Qb,
            8614: [
                0.011,
                0.511,
                0,
                0
            ],
            8617: [
                0.011,
                0.511,
                0,
                0
            ],
            8618: [
                0.011,
                0.511,
                0,
                0
            ],
            8636: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8637: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8640: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8641: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8652: [
                0.011,
                0.671,
                0,
                0
            ],
            8656: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8657: Qb,
            8658: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8659: Qb,
            8660: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8661: Nb,
            8704: Lb,
            8706: [
                0,
                0.69444,
                0.05556,
                0.08334
            ],
            8707: Lb,
            8709: [
                0.05556,
                0.75,
                0,
                0
            ],
            8711: Rb,
            8712: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8715: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8722: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8723: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8725: Nb,
            8726: Nb,
            8727: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8728: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8729: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8730: [
                0.2,
                0.8,
                0,
                0
            ],
            8733: [
                0,
                0.43056,
                0,
                0
            ],
            8734: [
                0,
                0.43056,
                0,
                0
            ],
            8736: Wb,
            8739: Nb,
            8741: Nb,
            8743: Zb,
            8744: Zb,
            8745: Zb,
            8746: Zb,
            8747: [
                0.19444,
                0.69444,
                0.11111,
                0
            ],
            8764: [
                -0.13313,
                0.36687,
                0,
                0
            ],
            8768: Qb,
            8771: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8773: [
                -0.022,
                0.589,
                0,
                0
            ],
            8776: [
                -0.01688,
                0.48312,
                0,
                0
            ],
            8781: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8784: [
                -0.133,
                0.67,
                0,
                0
            ],
            8801: [
                -0.03625,
                0.46375,
                0,
                0
            ],
            8804: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8805: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8810: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8811: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8826: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8827: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8834: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8835: [
                0.0391,
                0.5391,
                0,
                0
            ],
            8838: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8839: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8846: Zb,
            8849: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8850: [
                0.13597,
                0.63597,
                0,
                0
            ],
            8851: Zb,
            8852: Zb,
            8853: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8854: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8855: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8856: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8857: [
                0.08333,
                0.58333,
                0,
                0
            ],
            8866: Lb,
            8867: Lb,
            8868: Lb,
            8869: Lb,
            8872: [
                0.249,
                0.75,
                0,
                0
            ],
            8900: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8901: [
                -0.05555,
                0.44445,
                0,
                0
            ],
            8902: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            8904: [
                0.005,
                0.505,
                0,
                0
            ],
            8942: [
                0.03,
                0.9,
                0,
                0
            ],
            8943: [
                -0.19,
                0.31,
                0,
                0
            ],
            8945: [
                -0.1,
                0.82,
                0,
                0
            ],
            8968: Nb,
            8969: Nb,
            8970: Nb,
            8971: Nb,
            8994: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            8995: [
                -0.14236,
                0.35764,
                0,
                0
            ],
            9136: [
                0.244,
                0.744,
                0,
                0
            ],
            9137: [
                0.244,
                0.744,
                0,
                0
            ],
            9651: Qb,
            9657: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9661: Qb,
            9667: [
                -0.03472,
                0.46528,
                0,
                0
            ],
            9711: Qb,
            9824: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9825: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9826: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9827: [
                0.12963,
                0.69444,
                0,
                0
            ],
            9837: cc,
            9838: Qb,
            9839: Qb,
            10216: Nb,
            10217: Nb,
            10222: [
                0.244,
                0.744,
                0,
                0
            ],
            10223: [
                0.244,
                0.744,
                0,
                0
            ],
            10229: [
                0.011,
                0.511,
                0,
                0
            ],
            10230: [
                0.011,
                0.511,
                0,
                0
            ],
            10231: [
                0.011,
                0.511,
                0,
                0
            ],
            10232: [
                0.024,
                0.525,
                0,
                0
            ],
            10233: [
                0.024,
                0.525,
                0,
                0
            ],
            10234: [
                0.024,
                0.525,
                0,
                0
            ],
            10236: [
                0.011,
                0.511,
                0,
                0
            ],
            10815: Rb,
            10927: [
                0.13597,
                0.63597,
                0,
                0
            ],
            10928: [
                0.13597,
                0.63597,
                0,
                0
            ],
            57376: Qb
        },
        'Math-BoldItalic': {
            32: Ub,
            48: Ob,
            49: Ob,
            50: Ob,
            51: Xb,
            52: Xb,
            53: Xb,
            54: Vb,
            55: Xb,
            56: Vb,
            57: Xb,
            65: Pb,
            66: [
                0,
                0.68611,
                0.04835,
                0
            ],
            67: [
                0,
                0.68611,
                0.06979,
                0
            ],
            68: [
                0,
                0.68611,
                0.03194,
                0
            ],
            69: [
                0,
                0.68611,
                0.05451,
                0
            ],
            70: [
                0,
                0.68611,
                0.15972,
                0
            ],
            71: Pb,
            72: [
                0,
                0.68611,
                0.08229,
                0
            ],
            73: [
                0,
                0.68611,
                0.07778,
                0
            ],
            74: [
                0,
                0.68611,
                0.10069,
                0
            ],
            75: [
                0,
                0.68611,
                0.06979,
                0
            ],
            76: Pb,
            77: [
                0,
                0.68611,
                0.11424,
                0
            ],
            78: [
                0,
                0.68611,
                0.11424,
                0
            ],
            79: [
                0,
                0.68611,
                0.03194,
                0
            ],
            80: [
                0,
                0.68611,
                0.15972,
                0
            ],
            81: [
                0.19444,
                0.68611,
                0,
                0
            ],
            82: [
                0,
                0.68611,
                0.00421,
                0
            ],
            83: [
                0,
                0.68611,
                0.05382,
                0
            ],
            84: [
                0,
                0.68611,
                0.15972,
                0
            ],
            85: [
                0,
                0.68611,
                0.11424,
                0
            ],
            86: [
                0,
                0.68611,
                0.25555,
                0
            ],
            87: [
                0,
                0.68611,
                0.15972,
                0
            ],
            88: [
                0,
                0.68611,
                0.07778,
                0
            ],
            89: [
                0,
                0.68611,
                0.25555,
                0
            ],
            90: [
                0,
                0.68611,
                0.06979,
                0
            ],
            97: Ob,
            98: Lb,
            99: Ob,
            100: Lb,
            101: Ob,
            102: [
                0.19444,
                0.69444,
                0.11042,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            104: Lb,
            105: [
                0,
                0.69326,
                0,
                0
            ],
            106: [
                0.19444,
                0.69326,
                0.0622,
                0
            ],
            107: [
                0,
                0.69444,
                0.01852,
                0
            ],
            108: [
                0,
                0.69444,
                0.0088,
                0
            ],
            109: Ob,
            110: Ob,
            111: Ob,
            112: Xb,
            113: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            114: [
                0,
                0.44444,
                0.03194,
                0
            ],
            115: Ob,
            116: [
                0,
                0.63492,
                0,
                0
            ],
            117: Ob,
            118: [
                0,
                0.44444,
                0.03704,
                0
            ],
            119: [
                0,
                0.44444,
                0.02778,
                0
            ],
            120: Ob,
            121: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            122: [
                0,
                0.44444,
                0.04213,
                0
            ],
            160: Ub,
            915: [
                0,
                0.68611,
                0.15972,
                0
            ],
            916: Pb,
            920: [
                0,
                0.68611,
                0.03194,
                0
            ],
            923: Pb,
            926: [
                0,
                0.68611,
                0.07458,
                0
            ],
            928: [
                0,
                0.68611,
                0.08229,
                0
            ],
            931: [
                0,
                0.68611,
                0.05451,
                0
            ],
            933: [
                0,
                0.68611,
                0.15972,
                0
            ],
            934: Pb,
            936: [
                0,
                0.68611,
                0.11653,
                0
            ],
            937: [
                0,
                0.68611,
                0.04835,
                0
            ],
            945: Ob,
            946: [
                0.19444,
                0.69444,
                0.03403,
                0
            ],
            947: [
                0.19444,
                0.44444,
                0.06389,
                0
            ],
            948: [
                0,
                0.69444,
                0.03819,
                0
            ],
            949: Ob,
            950: [
                0.19444,
                0.69444,
                0.06215,
                0
            ],
            951: [
                0.19444,
                0.44444,
                0.03704,
                0
            ],
            952: [
                0,
                0.69444,
                0.03194,
                0
            ],
            953: Ob,
            954: Ob,
            955: Lb,
            956: Xb,
            957: [
                0,
                0.44444,
                0.06898,
                0
            ],
            958: [
                0.19444,
                0.69444,
                0.03021,
                0
            ],
            959: Ob,
            960: [
                0,
                0.44444,
                0.03704,
                0
            ],
            961: Xb,
            962: [
                0.09722,
                0.44444,
                0.07917,
                0
            ],
            963: [
                0,
                0.44444,
                0.03704,
                0
            ],
            964: [
                0,
                0.44444,
                0.13472,
                0
            ],
            965: [
                0,
                0.44444,
                0.03704,
                0
            ],
            966: Xb,
            967: Xb,
            968: [
                0.19444,
                0.69444,
                0.03704,
                0
            ],
            969: [
                0,
                0.44444,
                0.03704,
                0
            ],
            977: Lb,
            981: Qb,
            982: [
                0,
                0.44444,
                0.03194,
                0
            ],
            1009: Xb,
            1013: Ob,
            57649: Ob,
            57911: Xb
        },
        'Math-Italic': {
            32: Ub,
            48: [
                0,
                0.43056,
                0,
                0
            ],
            49: [
                0,
                0.43056,
                0,
                0
            ],
            50: [
                0,
                0.43056,
                0,
                0
            ],
            51: [
                0.19444,
                0.43056,
                0,
                0
            ],
            52: [
                0.19444,
                0.43056,
                0,
                0
            ],
            53: [
                0.19444,
                0.43056,
                0,
                0
            ],
            54: Vb,
            55: [
                0.19444,
                0.43056,
                0,
                0
            ],
            56: Vb,
            57: [
                0.19444,
                0.43056,
                0,
                0
            ],
            65: [
                0,
                0.68333,
                0,
                0.13889
            ],
            66: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            67: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            68: [
                0,
                0.68333,
                0.02778,
                0.05556
            ],
            69: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            70: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            71: [
                0,
                0.68333,
                0,
                0.08334
            ],
            72: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            73: [
                0,
                0.68333,
                0.07847,
                0.11111
            ],
            74: [
                0,
                0.68333,
                0.09618,
                0.16667
            ],
            75: [
                0,
                0.68333,
                0.07153,
                0.05556
            ],
            76: [
                0,
                0.68333,
                0,
                0.02778
            ],
            77: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            78: [
                0,
                0.68333,
                0.10903,
                0.08334
            ],
            79: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            80: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            81: [
                0.19444,
                0.68333,
                0,
                0.08334
            ],
            82: [
                0,
                0.68333,
                0.00773,
                0.08334
            ],
            83: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            84: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            85: [
                0,
                0.68333,
                0.10903,
                0.02778
            ],
            86: [
                0,
                0.68333,
                0.22222,
                0
            ],
            87: [
                0,
                0.68333,
                0.13889,
                0
            ],
            88: [
                0,
                0.68333,
                0.07847,
                0.08334
            ],
            89: [
                0,
                0.68333,
                0.22222,
                0
            ],
            90: [
                0,
                0.68333,
                0.07153,
                0.08334
            ],
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: Lb,
            99: [
                0,
                0.43056,
                0,
                0.05556
            ],
            100: [
                0,
                0.69444,
                0,
                0.16667
            ],
            101: [
                0,
                0.43056,
                0,
                0.05556
            ],
            102: [
                0.19444,
                0.69444,
                0.10764,
                0.16667
            ],
            103: [
                0.19444,
                0.43056,
                0.03588,
                0.02778
            ],
            104: Lb,
            105: [
                0,
                0.65952,
                0,
                0
            ],
            106: [
                0.19444,
                0.65952,
                0.05724,
                0
            ],
            107: [
                0,
                0.69444,
                0.03148,
                0
            ],
            108: [
                0,
                0.69444,
                0.01968,
                0.08334
            ],
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0.05556
            ],
            112: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            113: [
                0.19444,
                0.43056,
                0.03588,
                0.08334
            ],
            114: [
                0,
                0.43056,
                0.02778,
                0.05556
            ],
            115: [
                0,
                0.43056,
                0,
                0.05556
            ],
            116: [
                0,
                0.61508,
                0,
                0.08334
            ],
            117: [
                0,
                0.43056,
                0,
                0.02778
            ],
            118: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            119: [
                0,
                0.43056,
                0.02691,
                0.08334
            ],
            120: [
                0,
                0.43056,
                0,
                0.02778
            ],
            121: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            122: [
                0,
                0.43056,
                0.04398,
                0.05556
            ],
            160: Ub,
            915: [
                0,
                0.68333,
                0.13889,
                0.08334
            ],
            916: [
                0,
                0.68333,
                0,
                0.16667
            ],
            920: [
                0,
                0.68333,
                0.02778,
                0.08334
            ],
            923: [
                0,
                0.68333,
                0,
                0.16667
            ],
            926: [
                0,
                0.68333,
                0.07569,
                0.08334
            ],
            928: [
                0,
                0.68333,
                0.08125,
                0.05556
            ],
            931: [
                0,
                0.68333,
                0.05764,
                0.08334
            ],
            933: [
                0,
                0.68333,
                0.13889,
                0.05556
            ],
            934: [
                0,
                0.68333,
                0,
                0.08334
            ],
            936: [
                0,
                0.68333,
                0.11,
                0.05556
            ],
            937: [
                0,
                0.68333,
                0.05017,
                0.08334
            ],
            945: [
                0,
                0.43056,
                0.0037,
                0.02778
            ],
            946: [
                0.19444,
                0.69444,
                0.05278,
                0.08334
            ],
            947: [
                0.19444,
                0.43056,
                0.05556,
                0
            ],
            948: [
                0,
                0.69444,
                0.03785,
                0.05556
            ],
            949: [
                0,
                0.43056,
                0,
                0.08334
            ],
            950: [
                0.19444,
                0.69444,
                0.07378,
                0.08334
            ],
            951: [
                0.19444,
                0.43056,
                0.03588,
                0.05556
            ],
            952: [
                0,
                0.69444,
                0.02778,
                0.08334
            ],
            953: [
                0,
                0.43056,
                0,
                0.05556
            ],
            954: [
                0,
                0.43056,
                0,
                0
            ],
            955: Lb,
            956: [
                0.19444,
                0.43056,
                0,
                0.02778
            ],
            957: [
                0,
                0.43056,
                0.06366,
                0.02778
            ],
            958: [
                0.19444,
                0.69444,
                0.04601,
                0.11111
            ],
            959: [
                0,
                0.43056,
                0,
                0.05556
            ],
            960: [
                0,
                0.43056,
                0.03588,
                0
            ],
            961: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            962: [
                0.09722,
                0.43056,
                0.07986,
                0.08334
            ],
            963: [
                0,
                0.43056,
                0.03588,
                0
            ],
            964: [
                0,
                0.43056,
                0.1132,
                0.02778
            ],
            965: [
                0,
                0.43056,
                0.03588,
                0.02778
            ],
            966: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            967: [
                0.19444,
                0.43056,
                0,
                0.05556
            ],
            968: [
                0.19444,
                0.69444,
                0.03588,
                0.11111
            ],
            969: [
                0,
                0.43056,
                0.03588,
                0
            ],
            977: [
                0,
                0.69444,
                0,
                0.08334
            ],
            981: [
                0.19444,
                0.69444,
                0,
                0.08334
            ],
            982: [
                0,
                0.43056,
                0.02778,
                0
            ],
            1009: [
                0.19444,
                0.43056,
                0,
                0.08334
            ],
            1013: [
                0,
                0.43056,
                0,
                0.05556
            ],
            57649: [
                0,
                0.43056,
                0,
                0.02778
            ],
            57911: [
                0.19444,
                0.43056,
                0,
                0.08334
            ]
        },
        'SansSerif-Bold': {
            32: Ub,
            33: Lb,
            34: Lb,
            35: Qb,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: Lb,
            39: Lb,
            40: Nb,
            41: Nb,
            42: cc,
            43: [
                0.11667,
                0.61667,
                0,
                0
            ],
            44: [
                0.10556,
                0.13056,
                0,
                0
            ],
            45: [
                0,
                0.45833,
                0,
                0
            ],
            46: [
                0,
                0.13056,
                0,
                0
            ],
            47: Nb,
            48: Lb,
            49: Lb,
            50: Lb,
            51: Lb,
            52: Lb,
            53: Lb,
            54: Lb,
            55: Lb,
            56: Lb,
            57: Lb,
            58: [
                0,
                0.45833,
                0,
                0
            ],
            59: [
                0.10556,
                0.45833,
                0,
                0
            ],
            61: [
                -0.09375,
                0.40625,
                0,
                0
            ],
            63: Lb,
            64: Lb,
            65: Lb,
            66: Lb,
            67: Lb,
            68: Lb,
            69: Lb,
            70: Lb,
            71: Lb,
            72: Lb,
            73: Lb,
            74: Lb,
            75: Lb,
            76: Lb,
            77: Lb,
            78: Lb,
            79: Lb,
            80: Lb,
            81: [
                0.10556,
                0.69444,
                0,
                0
            ],
            82: Lb,
            83: Lb,
            84: Lb,
            85: Lb,
            86: [
                0,
                0.69444,
                0.01528,
                0
            ],
            87: [
                0,
                0.69444,
                0.01528,
                0
            ],
            88: Lb,
            89: [
                0,
                0.69444,
                0.0275,
                0
            ],
            90: Lb,
            91: Nb,
            93: Nb,
            94: Lb,
            95: [
                0.35,
                0.10833,
                0.03056,
                0
            ],
            97: [
                0,
                0.45833,
                0,
                0
            ],
            98: Lb,
            99: [
                0,
                0.45833,
                0,
                0
            ],
            100: Lb,
            101: [
                0,
                0.45833,
                0,
                0
            ],
            102: [
                0,
                0.69444,
                0.07639,
                0
            ],
            103: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            104: Lb,
            105: Lb,
            106: Qb,
            107: Lb,
            108: Lb,
            109: [
                0,
                0.45833,
                0,
                0
            ],
            110: [
                0,
                0.45833,
                0,
                0
            ],
            111: [
                0,
                0.45833,
                0,
                0
            ],
            112: [
                0.19444,
                0.45833,
                0,
                0
            ],
            113: [
                0.19444,
                0.45833,
                0,
                0
            ],
            114: [
                0,
                0.45833,
                0.01528,
                0
            ],
            115: [
                0,
                0.45833,
                0,
                0
            ],
            116: [
                0,
                0.58929,
                0,
                0
            ],
            117: [
                0,
                0.45833,
                0,
                0
            ],
            118: [
                0,
                0.45833,
                0.01528,
                0
            ],
            119: [
                0,
                0.45833,
                0.01528,
                0
            ],
            120: [
                0,
                0.45833,
                0,
                0
            ],
            121: [
                0.19444,
                0.45833,
                0.01528,
                0
            ],
            122: [
                0,
                0.45833,
                0,
                0
            ],
            126: [
                0.35,
                0.34444,
                0,
                0
            ],
            160: Ub,
            168: Lb,
            176: Lb,
            180: Lb,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.45833,
                0,
                0
            ],
            567: [
                0.19444,
                0.45833,
                0,
                0
            ],
            710: Lb,
            711: [
                0,
                0.63542,
                0,
                0
            ],
            713: [
                0,
                0.63778,
                0,
                0
            ],
            728: Lb,
            729: Lb,
            730: Lb,
            732: Lb,
            733: Lb,
            915: Lb,
            916: Lb,
            920: Lb,
            923: Lb,
            926: Lb,
            928: Lb,
            931: Lb,
            933: Lb,
            934: Lb,
            936: Lb,
            937: Lb,
            8211: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8212: [
                0,
                0.45833,
                0.03056,
                0
            ],
            8216: Lb,
            8217: Lb,
            8220: Lb,
            8221: Lb
        },
        'SansSerif-Italic': {
            32: Ub,
            33: [
                0,
                0.69444,
                0.05733,
                0
            ],
            34: [
                0,
                0.69444,
                0.00316,
                0
            ],
            35: [
                0.19444,
                0.69444,
                0.05087,
                0
            ],
            36: [
                0.05556,
                0.75,
                0.11156,
                0
            ],
            37: [
                0.05556,
                0.75,
                0.03126,
                0
            ],
            38: [
                0,
                0.69444,
                0.03058,
                0
            ],
            39: [
                0,
                0.69444,
                0.07816,
                0
            ],
            40: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            41: [
                0.25,
                0.75,
                0.02536,
                0
            ],
            42: [
                0,
                0.75,
                0.11775,
                0
            ],
            43: [
                0.08333,
                0.58333,
                0.02536,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: [
                0,
                0.44444,
                0.01946,
                0
            ],
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: [
                0.25,
                0.75,
                0.13164,
                0
            ],
            48: [
                0,
                0.65556,
                0.11156,
                0
            ],
            49: [
                0,
                0.65556,
                0.11156,
                0
            ],
            50: [
                0,
                0.65556,
                0.11156,
                0
            ],
            51: [
                0,
                0.65556,
                0.11156,
                0
            ],
            52: [
                0,
                0.65556,
                0.11156,
                0
            ],
            53: [
                0,
                0.65556,
                0.11156,
                0
            ],
            54: [
                0,
                0.65556,
                0.11156,
                0
            ],
            55: [
                0,
                0.65556,
                0.11156,
                0
            ],
            56: [
                0,
                0.65556,
                0.11156,
                0
            ],
            57: [
                0,
                0.65556,
                0.11156,
                0
            ],
            58: [
                0,
                0.44444,
                0.02502,
                0
            ],
            59: [
                0.125,
                0.44444,
                0.02502,
                0
            ],
            61: [
                -0.13,
                0.37,
                0.05087,
                0
            ],
            63: [
                0,
                0.69444,
                0.11809,
                0
            ],
            64: [
                0,
                0.69444,
                0.07555,
                0
            ],
            65: Lb,
            66: [
                0,
                0.69444,
                0.08293,
                0
            ],
            67: [
                0,
                0.69444,
                0.11983,
                0
            ],
            68: [
                0,
                0.69444,
                0.07555,
                0
            ],
            69: [
                0,
                0.69444,
                0.11983,
                0
            ],
            70: [
                0,
                0.69444,
                0.13372,
                0
            ],
            71: [
                0,
                0.69444,
                0.11983,
                0
            ],
            72: [
                0,
                0.69444,
                0.08094,
                0
            ],
            73: [
                0,
                0.69444,
                0.13372,
                0
            ],
            74: [
                0,
                0.69444,
                0.08094,
                0
            ],
            75: [
                0,
                0.69444,
                0.11983,
                0
            ],
            76: Lb,
            77: [
                0,
                0.69444,
                0.08094,
                0
            ],
            78: [
                0,
                0.69444,
                0.08094,
                0
            ],
            79: [
                0,
                0.69444,
                0.07555,
                0
            ],
            80: [
                0,
                0.69444,
                0.08293,
                0
            ],
            81: [
                0.125,
                0.69444,
                0.07555,
                0
            ],
            82: [
                0,
                0.69444,
                0.08293,
                0
            ],
            83: [
                0,
                0.69444,
                0.09205,
                0
            ],
            84: [
                0,
                0.69444,
                0.13372,
                0
            ],
            85: [
                0,
                0.69444,
                0.08094,
                0
            ],
            86: [
                0,
                0.69444,
                0.1615,
                0
            ],
            87: [
                0,
                0.69444,
                0.1615,
                0
            ],
            88: [
                0,
                0.69444,
                0.13372,
                0
            ],
            89: [
                0,
                0.69444,
                0.17261,
                0
            ],
            90: [
                0,
                0.69444,
                0.11983,
                0
            ],
            91: [
                0.25,
                0.75,
                0.15942,
                0
            ],
            93: [
                0.25,
                0.75,
                0.08719,
                0
            ],
            94: [
                0,
                0.69444,
                0.0799,
                0
            ],
            95: [
                0.35,
                0.09444,
                0.08616,
                0
            ],
            97: [
                0,
                0.44444,
                0.00981,
                0
            ],
            98: [
                0,
                0.69444,
                0.03057,
                0
            ],
            99: [
                0,
                0.44444,
                0.08336,
                0
            ],
            100: [
                0,
                0.69444,
                0.09483,
                0
            ],
            101: [
                0,
                0.44444,
                0.06778,
                0
            ],
            102: [
                0,
                0.69444,
                0.21705,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            104: [
                0,
                0.69444,
                0.01778,
                0
            ],
            105: [
                0,
                0.67937,
                0.09718,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0.09162,
                0
            ],
            107: [
                0,
                0.69444,
                0.08336,
                0
            ],
            108: [
                0,
                0.69444,
                0.09483,
                0
            ],
            109: [
                0,
                0.44444,
                0.01778,
                0
            ],
            110: [
                0,
                0.44444,
                0.01778,
                0
            ],
            111: [
                0,
                0.44444,
                0.06613,
                0
            ],
            112: [
                0.19444,
                0.44444,
                0.0389,
                0
            ],
            113: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            114: [
                0,
                0.44444,
                0.10836,
                0
            ],
            115: [
                0,
                0.44444,
                0.0778,
                0
            ],
            116: [
                0,
                0.57143,
                0.07225,
                0
            ],
            117: [
                0,
                0.44444,
                0.04169,
                0
            ],
            118: [
                0,
                0.44444,
                0.10836,
                0
            ],
            119: [
                0,
                0.44444,
                0.10836,
                0
            ],
            120: [
                0,
                0.44444,
                0.09169,
                0
            ],
            121: [
                0.19444,
                0.44444,
                0.10836,
                0
            ],
            122: [
                0,
                0.44444,
                0.08752,
                0
            ],
            126: [
                0.35,
                0.32659,
                0.08826,
                0
            ],
            160: Ub,
            168: [
                0,
                0.67937,
                0.06385,
                0
            ],
            176: Lb,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: [
                0,
                0.44444,
                0.04169,
                0
            ],
            567: [
                0.19444,
                0.44444,
                0.04169,
                0
            ],
            710: [
                0,
                0.69444,
                0.0799,
                0
            ],
            711: [
                0,
                0.63194,
                0.08432,
                0
            ],
            713: [
                0,
                0.60889,
                0.08776,
                0
            ],
            714: [
                0,
                0.69444,
                0.09205,
                0
            ],
            715: Lb,
            728: [
                0,
                0.69444,
                0.09483,
                0
            ],
            729: [
                0,
                0.67937,
                0.07774,
                0
            ],
            730: Lb,
            732: [
                0,
                0.67659,
                0.08826,
                0
            ],
            733: [
                0,
                0.69444,
                0.09205,
                0
            ],
            915: [
                0,
                0.69444,
                0.13372,
                0
            ],
            916: Lb,
            920: [
                0,
                0.69444,
                0.07555,
                0
            ],
            923: Lb,
            926: [
                0,
                0.69444,
                0.12816,
                0
            ],
            928: [
                0,
                0.69444,
                0.08094,
                0
            ],
            931: [
                0,
                0.69444,
                0.11983,
                0
            ],
            933: [
                0,
                0.69444,
                0.09031,
                0
            ],
            934: [
                0,
                0.69444,
                0.04603,
                0
            ],
            936: [
                0,
                0.69444,
                0.09031,
                0
            ],
            937: [
                0,
                0.69444,
                0.08293,
                0
            ],
            8211: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8212: [
                0,
                0.44444,
                0.08616,
                0
            ],
            8216: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8217: [
                0,
                0.69444,
                0.07816,
                0
            ],
            8220: [
                0,
                0.69444,
                0.14205,
                0
            ],
            8221: [
                0,
                0.69444,
                0.00316,
                0
            ]
        },
        'SansSerif-Regular': {
            32: Ub,
            33: Lb,
            34: Lb,
            35: Qb,
            36: [
                0.05556,
                0.75,
                0,
                0
            ],
            37: [
                0.05556,
                0.75,
                0,
                0
            ],
            38: Lb,
            39: Lb,
            40: Nb,
            41: Nb,
            42: cc,
            43: [
                0.08333,
                0.58333,
                0,
                0
            ],
            44: [
                0.125,
                0.08333,
                0,
                0
            ],
            45: Ob,
            46: [
                0,
                0.08333,
                0,
                0
            ],
            47: Nb,
            48: [
                0,
                0.65556,
                0,
                0
            ],
            49: [
                0,
                0.65556,
                0,
                0
            ],
            50: [
                0,
                0.65556,
                0,
                0
            ],
            51: [
                0,
                0.65556,
                0,
                0
            ],
            52: [
                0,
                0.65556,
                0,
                0
            ],
            53: [
                0,
                0.65556,
                0,
                0
            ],
            54: [
                0,
                0.65556,
                0,
                0
            ],
            55: [
                0,
                0.65556,
                0,
                0
            ],
            56: [
                0,
                0.65556,
                0,
                0
            ],
            57: [
                0,
                0.65556,
                0,
                0
            ],
            58: Ob,
            59: [
                0.125,
                0.44444,
                0,
                0
            ],
            61: [
                -0.13,
                0.37,
                0,
                0
            ],
            63: Lb,
            64: Lb,
            65: Lb,
            66: Lb,
            67: Lb,
            68: Lb,
            69: Lb,
            70: Lb,
            71: Lb,
            72: Lb,
            73: Lb,
            74: Lb,
            75: Lb,
            76: Lb,
            77: Lb,
            78: Lb,
            79: Lb,
            80: Lb,
            81: [
                0.125,
                0.69444,
                0,
                0
            ],
            82: Lb,
            83: Lb,
            84: Lb,
            85: Lb,
            86: [
                0,
                0.69444,
                0.01389,
                0
            ],
            87: [
                0,
                0.69444,
                0.01389,
                0
            ],
            88: Lb,
            89: [
                0,
                0.69444,
                0.025,
                0
            ],
            90: Lb,
            91: Nb,
            93: Nb,
            94: Lb,
            95: [
                0.35,
                0.09444,
                0.02778,
                0
            ],
            97: Ob,
            98: Lb,
            99: Ob,
            100: Lb,
            101: Ob,
            102: [
                0,
                0.69444,
                0.06944,
                0
            ],
            103: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            104: Lb,
            105: [
                0,
                0.67937,
                0,
                0
            ],
            106: [
                0.19444,
                0.67937,
                0,
                0
            ],
            107: Lb,
            108: Lb,
            109: Ob,
            110: Ob,
            111: Ob,
            112: Xb,
            113: Xb,
            114: [
                0,
                0.44444,
                0.01389,
                0
            ],
            115: Ob,
            116: [
                0,
                0.57143,
                0,
                0
            ],
            117: Ob,
            118: [
                0,
                0.44444,
                0.01389,
                0
            ],
            119: [
                0,
                0.44444,
                0.01389,
                0
            ],
            120: Ob,
            121: [
                0.19444,
                0.44444,
                0.01389,
                0
            ],
            122: Ob,
            126: [
                0.35,
                0.32659,
                0,
                0
            ],
            160: Ub,
            168: [
                0,
                0.67937,
                0,
                0
            ],
            176: Lb,
            184: [
                0.17014,
                0,
                0,
                0
            ],
            305: Ob,
            567: Xb,
            710: Lb,
            711: [
                0,
                0.63194,
                0,
                0
            ],
            713: [
                0,
                0.60889,
                0,
                0
            ],
            714: Lb,
            715: Lb,
            728: Lb,
            729: [
                0,
                0.67937,
                0,
                0
            ],
            730: Lb,
            732: [
                0,
                0.67659,
                0,
                0
            ],
            733: Lb,
            915: Lb,
            916: Lb,
            920: Lb,
            923: Lb,
            926: Lb,
            928: Lb,
            931: Lb,
            933: Lb,
            934: Lb,
            936: Lb,
            937: Lb,
            8211: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8212: [
                0,
                0.44444,
                0.02778,
                0
            ],
            8216: Lb,
            8217: Lb,
            8220: Lb,
            8221: Lb
        },
        'Script-Regular': {
            32: Ub,
            65: [
                0,
                0.7,
                0.22925,
                0
            ],
            66: [
                0,
                0.7,
                0.04087,
                0
            ],
            67: [
                0,
                0.7,
                0.1689,
                0
            ],
            68: [
                0,
                0.7,
                0.09371,
                0
            ],
            69: [
                0,
                0.7,
                0.18583,
                0
            ],
            70: [
                0,
                0.7,
                0.13634,
                0
            ],
            71: [
                0,
                0.7,
                0.17322,
                0
            ],
            72: [
                0,
                0.7,
                0.29694,
                0
            ],
            73: [
                0,
                0.7,
                0.19189,
                0
            ],
            74: [
                0.27778,
                0.7,
                0.19189,
                0
            ],
            75: [
                0,
                0.7,
                0.31259,
                0
            ],
            76: [
                0,
                0.7,
                0.19189,
                0
            ],
            77: [
                0,
                0.7,
                0.15981,
                0
            ],
            78: [
                0,
                0.7,
                0.3525,
                0
            ],
            79: [
                0,
                0.7,
                0.08078,
                0
            ],
            80: [
                0,
                0.7,
                0.08078,
                0
            ],
            81: [
                0,
                0.7,
                0.03305,
                0
            ],
            82: [
                0,
                0.7,
                0.06259,
                0
            ],
            83: [
                0,
                0.7,
                0.19189,
                0
            ],
            84: [
                0,
                0.7,
                0.29087,
                0
            ],
            85: [
                0,
                0.7,
                0.25815,
                0
            ],
            86: [
                0,
                0.7,
                0.27523,
                0
            ],
            87: [
                0,
                0.7,
                0.27523,
                0
            ],
            88: [
                0,
                0.7,
                0.26006,
                0
            ],
            89: [
                0,
                0.7,
                0.2939,
                0
            ],
            90: [
                0,
                0.7,
                0.24037,
                0
            ],
            160: Ub
        },
        'Size1-Regular': {
            32: Ub,
            40: $b,
            41: $b,
            47: $b,
            91: $b,
            92: $b,
            93: $b,
            123: $b,
            125: $b,
            160: Ub,
            710: [
                0,
                0.72222,
                0,
                0
            ],
            732: [
                0,
                0.72222,
                0,
                0
            ],
            770: [
                0,
                0.72222,
                0,
                0
            ],
            771: [
                0,
                0.72222,
                0,
                0
            ],
            8214: [
                -0.00099,
                0.601,
                0,
                0
            ],
            8593: [
                0.00001,
                0.6,
                0,
                0
            ],
            8595: [
                0.00001,
                0.6,
                0,
                0
            ],
            8657: [
                0.00001,
                0.6,
                0,
                0
            ],
            8659: [
                0.00001,
                0.6,
                0,
                0
            ],
            8719: ec,
            8720: ec,
            8721: ec,
            8730: $b,
            8739: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8741: [
                -0.00599,
                0.606,
                0,
                0
            ],
            8747: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8748: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8749: [
                0.306,
                0.805,
                0.19445,
                0
            ],
            8750: [
                0.30612,
                0.805,
                0.19445,
                0
            ],
            8896: ec,
            8897: ec,
            8898: ec,
            8899: ec,
            8968: $b,
            8969: $b,
            8970: $b,
            8971: $b,
            9168: [
                -0.00099,
                0.601,
                0,
                0
            ],
            10216: $b,
            10217: $b,
            10752: ec,
            10753: ec,
            10754: ec,
            10756: ec,
            10758: ec
        },
        'Size2-Regular': {
            32: Ub,
            40: Yb,
            41: Yb,
            47: Yb,
            91: Yb,
            92: Yb,
            93: Yb,
            123: Yb,
            125: Yb,
            160: Ub,
            710: cc,
            732: cc,
            770: cc,
            771: cc,
            8719: fc,
            8720: fc,
            8721: fc,
            8730: Yb,
            8747: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8748: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8749: [
                0.862,
                1.36,
                0.44445,
                0
            ],
            8750: [
                0.86225,
                1.36,
                0.44445,
                0
            ],
            8896: fc,
            8897: fc,
            8898: fc,
            8899: fc,
            8968: Yb,
            8969: Yb,
            8970: Yb,
            8971: Yb,
            10216: Yb,
            10217: Yb,
            10752: fc,
            10753: fc,
            10754: fc,
            10756: fc,
            10758: fc
        },
        'Size3-Regular': {
            32: Ub,
            40: bc,
            41: bc,
            47: bc,
            91: bc,
            92: bc,
            93: bc,
            123: bc,
            125: bc,
            160: Ub,
            710: cc,
            732: cc,
            770: cc,
            771: cc,
            8730: bc,
            8968: bc,
            8969: bc,
            8970: bc,
            8971: bc,
            10216: bc,
            10217: bc
        },
        'Size4-Regular': {
            32: Ub,
            40: ac,
            41: ac,
            47: ac,
            91: ac,
            92: ac,
            93: ac,
            123: ac,
            125: ac,
            160: Ub,
            710: [
                0,
                0.825,
                0,
                0
            ],
            732: [
                0,
                0.825,
                0,
                0
            ],
            770: [
                0,
                0.825,
                0,
                0
            ],
            771: [
                0,
                0.825,
                0,
                0
            ],
            8730: ac,
            8968: ac,
            8969: ac,
            8970: ac,
            8971: ac,
            9115: [
                0.64502,
                1.155,
                0,
                0
            ],
            9116: [
                0.00001,
                0.6,
                0,
                0
            ],
            9117: [
                0.64502,
                1.155,
                0,
                0
            ],
            9118: [
                0.64502,
                1.155,
                0,
                0
            ],
            9119: [
                0.00001,
                0.6,
                0,
                0
            ],
            9120: [
                0.64502,
                1.155,
                0,
                0
            ],
            9121: [
                0.64502,
                1.155,
                0,
                0
            ],
            9122: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9123: [
                0.64502,
                1.155,
                0,
                0
            ],
            9124: [
                0.64502,
                1.155,
                0,
                0
            ],
            9125: [
                -0.00099,
                0.601,
                0,
                0
            ],
            9126: [
                0.64502,
                1.155,
                0,
                0
            ],
            9127: [
                0.00001,
                0.9,
                0,
                0
            ],
            9128: Yb,
            9129: [
                0.90001,
                0,
                0,
                0
            ],
            9130: [
                0,
                0.3,
                0,
                0
            ],
            9131: [
                0.00001,
                0.9,
                0,
                0
            ],
            9132: Yb,
            9133: [
                0.90001,
                0,
                0,
                0
            ],
            9143: [
                0.88502,
                0.915,
                0,
                0
            ],
            10216: ac,
            10217: ac,
            57344: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57345: [
                -0.00499,
                0.605,
                0,
                0
            ],
            57680: [
                0,
                0.12,
                0,
                0
            ],
            57681: [
                0,
                0.12,
                0,
                0
            ],
            57682: [
                0,
                0.12,
                0,
                0
            ],
            57683: [
                0,
                0.12,
                0,
                0
            ]
        },
        'Typewriter-Regular': {
            32: Ub,
            33: Mb,
            34: Mb,
            35: Mb,
            36: [
                0.08333,
                0.69444,
                0,
                0
            ],
            37: [
                0.08333,
                0.69444,
                0,
                0
            ],
            38: Mb,
            39: Mb,
            40: [
                0.08333,
                0.69444,
                0,
                0
            ],
            41: [
                0.08333,
                0.69444,
                0,
                0
            ],
            42: [
                0,
                0.52083,
                0,
                0
            ],
            43: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            44: [
                0.13889,
                0.125,
                0,
                0
            ],
            45: [
                -0.08056,
                0.53055,
                0,
                0
            ],
            46: [
                0,
                0.125,
                0,
                0
            ],
            47: [
                0.08333,
                0.69444,
                0,
                0
            ],
            48: Mb,
            49: Mb,
            50: Mb,
            51: Mb,
            52: Mb,
            53: Mb,
            54: Mb,
            55: Mb,
            56: Mb,
            57: Mb,
            58: [
                0,
                0.43056,
                0,
                0
            ],
            59: [
                0.13889,
                0.43056,
                0,
                0
            ],
            60: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            61: [
                -0.19549,
                0.41562,
                0,
                0
            ],
            62: [
                -0.05556,
                0.55556,
                0,
                0
            ],
            63: Mb,
            64: Mb,
            65: Mb,
            66: Mb,
            67: Mb,
            68: Mb,
            69: Mb,
            70: Mb,
            71: Mb,
            72: Mb,
            73: Mb,
            74: Mb,
            75: Mb,
            76: Mb,
            77: Mb,
            78: Mb,
            79: Mb,
            80: Mb,
            81: [
                0.13889,
                0.61111,
                0,
                0
            ],
            82: Mb,
            83: Mb,
            84: Mb,
            85: Mb,
            86: Mb,
            87: Mb,
            88: Mb,
            89: Mb,
            90: Mb,
            91: [
                0.08333,
                0.69444,
                0,
                0
            ],
            92: [
                0.08333,
                0.69444,
                0,
                0
            ],
            93: [
                0.08333,
                0.69444,
                0,
                0
            ],
            94: Mb,
            95: [
                0.09514,
                0,
                0,
                0
            ],
            96: Mb,
            97: [
                0,
                0.43056,
                0,
                0
            ],
            98: Mb,
            99: [
                0,
                0.43056,
                0,
                0
            ],
            100: Mb,
            101: [
                0,
                0.43056,
                0,
                0
            ],
            102: Mb,
            103: [
                0.22222,
                0.43056,
                0,
                0
            ],
            104: Mb,
            105: Mb,
            106: [
                0.22222,
                0.61111,
                0,
                0
            ],
            107: Mb,
            108: Mb,
            109: [
                0,
                0.43056,
                0,
                0
            ],
            110: [
                0,
                0.43056,
                0,
                0
            ],
            111: [
                0,
                0.43056,
                0,
                0
            ],
            112: [
                0.22222,
                0.43056,
                0,
                0
            ],
            113: [
                0.22222,
                0.43056,
                0,
                0
            ],
            114: [
                0,
                0.43056,
                0,
                0
            ],
            115: [
                0,
                0.43056,
                0,
                0
            ],
            116: [
                0,
                0.55358,
                0,
                0
            ],
            117: [
                0,
                0.43056,
                0,
                0
            ],
            118: [
                0,
                0.43056,
                0,
                0
            ],
            119: [
                0,
                0.43056,
                0,
                0
            ],
            120: [
                0,
                0.43056,
                0,
                0
            ],
            121: [
                0.22222,
                0.43056,
                0,
                0
            ],
            122: [
                0,
                0.43056,
                0,
                0
            ],
            123: [
                0.08333,
                0.69444,
                0,
                0
            ],
            124: [
                0.08333,
                0.69444,
                0,
                0
            ],
            125: [
                0.08333,
                0.69444,
                0,
                0
            ],
            126: Mb,
            127: Mb,
            160: Ub,
            176: Mb,
            184: [
                0.19445,
                0,
                0,
                0
            ],
            305: [
                0,
                0.43056,
                0,
                0
            ],
            567: [
                0.22222,
                0.43056,
                0,
                0
            ],
            711: [
                0,
                0.56597,
                0,
                0
            ],
            713: [
                0,
                0.56555,
                0,
                0
            ],
            714: Mb,
            715: Mb,
            728: Mb,
            730: Mb,
            770: Mb,
            771: Mb,
            776: Mb,
            915: Mb,
            916: Mb,
            920: Mb,
            923: Mb,
            926: Mb,
            928: Mb,
            931: Mb,
            933: Mb,
            934: Mb,
            936: Mb,
            937: Mb,
            8216: Mb,
            8217: Mb,
            8242: Mb,
            9251: [
                0.11111,
                0.21944,
                0,
                0
            ]
        }
    };
    const jc = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/,
        kc = {
            slant: [
                0.25,
                0.25,
                0.25
            ],
            space: [
                0,
                0,
                0
            ],
            stretch: [
                0,
                0,
                0
            ],
            shrink: [
                0,
                0,
                0
            ],
            xHeight: [
                0.431,
                0.431,
                0.431
            ],
            quad: [
                1,
                1.171,
                1.472
            ],
            extraSpace: [
                0,
                0,
                0
            ],
            num1: [
                0.677,
                0.732,
                0.925
            ],
            num2: [
                0.394,
                0.384,
                0.387
            ],
            num3: [
                0.444,
                0.471,
                0.504
            ],
            denom1: [
                0.686,
                0.752,
                1.025
            ],
            denom2: [
                0.345,
                0.344,
                0.532
            ],
            sup1: [
                0.413,
                0.503,
                0.504
            ],
            sup2: [
                0.363,
                0.431,
                0.404
            ],
            sup3: [
                0.289,
                0.286,
                0.294
            ],
            sub1: [
                0.15,
                0.143,
                0.2
            ],
            sub2: [
                0.247,
                0.286,
                0.4
            ],
            supDrop: [
                0.386,
                0.353,
                0.494
            ],
            subDrop: [
                0.05,
                0.071,
                0.1
            ],
            delim1: [
                2.39,
                1.7,
                1.98
            ],
            delim2: [
                1.01,
                1.157,
                1.42
            ],
            axisHeight: [
                0.25,
                0.25,
                0.25
            ],
            defaultRuleThickness: [
                0.04,
                0.049,
                0.049
            ],
            bigOpSpacing1: [
                0.111,
                0.111,
                0.111
            ],
            bigOpSpacing2: [
                0.166,
                0.166,
                0.166
            ],
            bigOpSpacing3: [
                0.2,
                0.2,
                0.2
            ],
            bigOpSpacing4: [
                0.6,
                0.611,
                0.611
            ],
            bigOpSpacing5: [
                0.1,
                0.143,
                0.143
            ],
            sqrtRuleThickness: [
                0.04,
                0.04,
                0.04
            ]
        },
        lc = [
            0,
            0.5,
            0.7,
            0.8,
            0.9,
            1,
            1.2,
            1.44,
            1.728,
            2.074,
            2.488
        ],
        mc = {
            '\xA0': ' ',
            '\u200B': ' ',
            'Å': 'A',
            'Ç': 'C',
            'Ð': 'D',
            'Þ': 'o',
            'å': 'a',
            'ç': 'c',
            'ð': 'd',
            'þ': 'o',
            'А': 'A',
            'Б': 'B',
            'В': 'B',
            'Г': 'F',
            'Д': 'A',
            'Е': 'E',
            'Ж': 'K',
            'З': '3',
            'И': 'N',
            'Й': 'N',
            'К': 'K',
            'Л': 'N',
            'М': 'M',
            'Н': 'H',
            'О': 'O',
            'П': 'N',
            'Р': 'P',
            'С': 'C',
            'Т': 'T',
            'У': 'y',
            'Ф': 'O',
            'Х': 'X',
            'Ц': 'U',
            'Ч': 'h',
            'Ш': 'W',
            'Щ': 'W',
            'Ъ': 'B',
            'Ы': 'X',
            'Ь': 'B',
            'Э': '3',
            'Ю': 'X',
            'Я': 'R',
            'а': 'a',
            'б': 'b',
            'в': 'a',
            'г': 'r',
            'д': 'y',
            'е': 'e',
            'ж': 'm',
            'з': 'e',
            'и': 'n',
            'й': 'n',
            'к': 'n',
            'л': 'n',
            'м': 'm',
            'н': 'n',
            'о': 'o',
            'п': 'n',
            'р': 'p',
            'с': 'c',
            'т': 'o',
            'у': 'y',
            'ф': 'b',
            'х': 'x',
            'ц': 'n',
            'ч': 'n',
            'ш': 'w',
            'щ': 'w',
            'ъ': 'a',
            'ы': 'm',
            'ь': 'a',
            'э': 'e',
            'ю': 'm',
            'я': 'r'
        };

    function nc(oc, pc) {
        void 0 === oc && (oc = 77);
        const qc = ic[pc][oc];
        if (qc)
            return {
                defaultMetrics: !1,
                depth: qc[0],
                height: qc[1],
                italic: qc[2],
                skew: qc[3]
            };
        if (11034 === oc)
            return {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.8,
                italic: 0,
                skew: 0
            };
        const rc = String.fromCodePoint(oc);
        if (d in mc)
            oc = mc[d].codePointAt(0);
        else if (jc.test(d))
            return oc = 77, {
                defaultMetrics: !0,
                depth: 0.2,
                height: 0.9,
                italic: 0,
                skew: 0
            };
        return {
            defaultMetrics: !0,
            depth: 0.2,
            height: 0.7,
            italic: 0,
            skew: 0
        };
    }
    class qc {
        getFontSize(rc) {
            return Math.max(1, rc + this.sizeDelta);
        }
        get sup() {
            return _rc[[
                0,
                1,
                0,
                1,
                2,
                3,
                2,
                3
            ][this.id]];
        }
        get sub() {
            return _rc[[
                0,
                0,
                0,
                0,
                2,
                2,
                2,
                2
            ][this.id]];
        }
        get fracNum() {
            return _rc[[
                0,
                1,
                0,
                1,
                2,
                3,
                4,
                5
            ][this.id]];
        }
        get fracDen() {
            return _rc[[
                0,
                0,
                0,
                0,
                2,
                2,
                4,
                4
            ][this.id]];
        }
        get cramp() {
            return _rc[[
                0,
                0,
                2,
                2,
                4,
                4,
                6,
                6
            ][this.id]];
        }
        get isTight() {
            return this.sizeDelta < 0;
        }
        constructor(rc, sc, tc) {
            this.id = rc, this.sizeDelta = sc, this.cramped = tc;
            const uc = {
                '-4': 2,
                '-3': 1,
                0: 0
            } [sc];
            this.metrics = Object.keys(kc).reduce((vc, wc) => ({
                ...vc,
                [wc]: kc[wc][uc]
            }), {});
        }
    }
    const _rc = {
        7: new qc(7, 0, !1),
        6: new qc(6, 0, !0),
        5: new qc(5, 0, !1),
        4: new qc(4, 0, !0),
        3: new qc(3, -3, !1),
        2: new qc(2, -3, !0),
        1: new qc(1, -4, !1),
        0: new qc(0, -4, !0)
    };

    function sc(tc, uc) {
        return null === tc ? 0 : function(vc, wc) {
            var xc;
            if (!vc)
                return 0;
            const yc = {
                pt: 1,
                mm: 7227 / 2540,
                cm: 7227 / 254,
                ex: 35271 / 8192,
                px: 3 / 4,
                em: 10,
                bp: 1.00375,
                dd: 1238 / 1157,
                pc: 12,
                in: 72.27,
                mu: 10 / 18
            } [null !== (xc = vc.unit) && void 0 !== xc ? xc : 'pt'];
            if (Number.isFinite(wc)) {
                const zc = 10 ** wc;
                return Math.round(vc.dimension / 10 * yc * zc) / zc;
            }
            return vc.dimension * yc;
        }(tc, uc) / 10;
    }

    function tc(uc) {
        var vc;
        return `${ uc.dimension }${ null !== (vc = uc.unit) && void 0 !== vc ? vc : 'pt' }`;
    }
    _rc.displaystyle = _rc[7], _rc.textstyle = _rc[5], _rc.scriptstyle = _rc[3], _rc.scriptscriptstyle = _rc[1];
    class vc {
        get mathstyle() {
            let wc = this._mathstyle,
                xc = this.parent;
            for (; !wc;)
                wc = xc._mathstyle, xc = xc.parent;
            return wc;
        }
        getRegister(wc) {
            var xc;
            return (null === (xc = this.registers) || void 0 === xc ? void 0 : xc[wc]) ? this.registers[wc] : this.parent ? this.parent.getRegister(wc) : void 0;
        }
        getRegisterAsGlue(wc) {
            var xc;
            if (null === (xc = this.registers) || void 0 === xc ? void 0 : xc[wc]) {
                const yc = this.registers[wc];
                return 'object' == typeof yc && 'glue' in yc ? yc : 'object' == typeof yc && 'dimension' in yc ? {
                    glue: {
                        dimension: yc.dimension
                    }
                } : 'number' == typeof yc ? {
                    glue: {
                        dimension: yc
                    }
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsGlue(wc);
        }
        getRegisterAsEm(wc) {
            return sc(this.getRegisterAsDimension(wc));
        }
        getRegisterAsDimension(wc) {
            var xc;
            if (null === (xc = this.registers) || void 0 === xc ? void 0 : xc[wc]) {
                const yc = this.registers[wc];
                return 'object' == typeof yc && 'glue' in yc ? yc.glue : 'object' == typeof yc && 'dimension' in yc ? yc : 'number' == typeof yc ? {
                    dimension: yc
                } : void 0;
            }
            if (this.parent)
                return this.parent.getRegisterAsDimension(wc);
        }
        setRegister(wc, xc) {
            void 0 !== xc ? this.registers[wc] = xc : delete this.registers[wc];
        }
        setGlobalRegister(wc, xc) {
            let yc = this;
            for (; yc.parent;)
                yc.setRegister(wc, void 0), yc = yc.parent;
            yc.setRegister(wc, xc);
        }
        get size() {
            let wc = this._size,
                xc = this.parent;
            for (; !wc;)
                wc = xc._size, xc = xc.parent;
            return wc;
        }
        makeID() {
            if (!this.atomIdsSettings)
                return;
            if (this.atomIdsSettings.overrideID)
                return this.atomIdsSettings.overrideID;
            if ('number' != typeof this.atomIdsSettings.seed)
                return Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
            const wc = this.atomIdsSettings.seed.toString(36);
            return this.atomIdsSettings.seed += 1, wc;
        }
        scale(wc) {
            return wc * this.effectiveFontSize;
        }
        get scalingFactor() {
            return this.parent ? this.effectiveFontSize / this.parent.effectiveFontSize : 1;
        }
        get isDisplayStyle() {
            return 7 === this.mathstyle.id || 6 === this.mathstyle.id;
        }
        get isCramped() {
            return this.mathstyle.cramped;
        }
        get isTight() {
            return this.mathstyle.isTight;
        }
        get effectiveFontSize() {
            return lc[Math.max(1, this.size + this.mathstyle.sizeDelta)];
        }
        get computedColor() {
            let wc = this.color,
                xc = this.parent;
            return !wc && xc && (wc = xc.color, xc = xc.parent), null != wc ? wc : '';
        }
        get computedBackgroundColor() {
            let wc = this.backgroundColor,
                xc = this.parent;
            return !wc && xc && (wc = xc.backgroundColor, xc = xc.parent), null != wc ? wc : '';
        }
        get metrics() {
            return this.mathstyle.metrics;
        }
        constructor(wc, xc, yc) {
            var zc, Ac, Bc, Cc, Dc, Ec;
            wc instanceof vc && (this.parent = wc), wc instanceof vc || (this.registers = null !== (zc = wc.registers) && void 0 !== zc ? zc : {}), this.isPhantom = null !== (Cc = null !== (Ac = null == xc ? void 0 : xc.isPhantom) && void 0 !== Ac ? Ac : null === (Bc = this.parent) || void 0 === Bc ? void 0 : Bc.isPhantom) && void 0 !== Cc && Cc;
            const Fc = {
                ...wc
            };
            let Gc;
            if (xc && (xc.letterShapeStyle && 'auto' !== xc.letterShapeStyle && (Fc.letterShapeStyle = xc.letterShapeStyle), xc.color && 'none' !== xc.color && (Fc.color = xc.color), xc.backgroundColor && 'none' !== xc.backgroundColor && (Fc.backgroundColor = xc.backgroundColor), xc.fontSize && 'auto' !== xc.fontSize && xc.fontSize !== (null === (Dc = this.parent) || void 0 === Dc ? void 0 : Dc._size) && (this._size = xc.fontSize)), this.letterShapeStyle = null !== (Ec = Fc.letterShapeStyle) && void 0 !== Ec ? Ec : 'tex', this.color = Fc.color, this.backgroundColor = Fc.backgroundColor, 'string' == typeof yc) {
                if (wc instanceof vc)
                    switch (yc) {
                        case 'cramp':
                            Gc = wc.mathstyle.cramp;
                            break;
                        case 'superscript':
                            Gc = wc.mathstyle.sup;
                            break;
                        case 'subscript':
                            Gc = wc.mathstyle.sub;
                            break;
                        case 'numerator':
                            Gc = wc.mathstyle.fracNum;
                            break;
                        case 'denominator':
                            Gc = wc.mathstyle.fracDen;
                    }
                switch (yc) {
                    case 'textstyle':
                        Gc = _rc.textstyle;
                        break;
                    case 'displaystyle':
                        Gc = _rc.displaystyle;
                        break;
                    case 'scriptstyle':
                        Gc = _rc.scriptstyle;
                        break;
                    case 'scriptscriptstyle':
                        Gc = _rc.scriptscriptstyle;
                }
            }
            this._mathstyle = Gc, this.atomIdsSettings = wc.atomIdsSettings, this.renderPlaceholder = Fc.renderPlaceholder;
        }
    }
    const wc = {
            overrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            overleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            underrightarrow: [
                ['rightarrow'],
                0.888,
                522,
                'xMaxYMin'
            ],
            underleftarrow: [
                ['leftarrow'],
                0.888,
                522,
                'xMinYMin'
            ],
            xrightarrow: [
                ['rightarrow'],
                1.469,
                522,
                'xMaxYMin'
            ],
            xleftarrow: [
                ['leftarrow'],
                1.469,
                522,
                'xMinYMin'
            ],
            Overrightarrow: [
                ['doublerightarrow'],
                0.888,
                560,
                'xMaxYMin'
            ],
            xRightarrow: [
                ['doublerightarrow'],
                1.526,
                560,
                'xMaxYMin'
            ],
            xLeftarrow: [
                ['doubleleftarrow'],
                1.526,
                560,
                'xMinYMin'
            ],
            overleftharpoon: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoonup: [
                ['leftharpoon'],
                0.888,
                522,
                'xMinYMin'
            ],
            xleftharpoondown: [
                ['leftharpoondown'],
                0.888,
                522,
                'xMinYMin'
            ],
            overrightharpoon: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoonup: [
                ['rightharpoon'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xrightharpoondown: [
                ['rightharpoondown'],
                0.888,
                522,
                'xMaxYMin'
            ],
            xlongequal: [
                ['longequal'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadleftarrow: [
                ['twoheadleftarrow'],
                0.888,
                334,
                'xMinYMin'
            ],
            xtwoheadrightarrow: [
                ['twoheadrightarrow'],
                0.888,
                334,
                'xMaxYMin'
            ],
            overleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            overbrace: [
                [
                    'leftbrace',
                    'midbrace',
                    'rightbrace'
                ],
                1.6,
                548
            ],
            underbrace: [
                [
                    'leftbraceunder',
                    'midbraceunder',
                    'rightbraceunder'
                ],
                1.6,
                548
            ],
            underleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                0.888,
                522
            ],
            xleftrightarrow: [
                [
                    'leftarrow',
                    'rightarrow'
                ],
                1.75,
                522
            ],
            xLeftrightarrow: [
                [
                    'doubleleftarrow',
                    'doublerightarrow'
                ],
                1.75,
                560
            ],
            xrightleftharpoons: [
                [
                    'leftharpoondownplus',
                    'rightharpoonplus'
                ],
                1.75,
                716
            ],
            xleftrightharpoons: [
                [
                    'leftharpoonplus',
                    'rightharpoondownplus'
                ],
                1.75,
                716
            ],
            xhookleftarrow: [
                [
                    'leftarrow',
                    'righthook'
                ],
                1.08,
                522
            ],
            xhookrightarrow: [
                [
                    'lefthook',
                    'rightarrow'
                ],
                1.08,
                522
            ],
            overlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            underlinesegment: [
                [
                    'leftlinesegment',
                    'rightlinesegment'
                ],
                0.888,
                522
            ],
            overgroup: [
                [
                    'leftgroup',
                    'rightgroup'
                ],
                0.888,
                342
            ],
            undergroup: [
                [
                    'leftgroupunder',
                    'rightgroupunder'
                ],
                0.888,
                342
            ],
            xmapsto: [
                [
                    'leftmapsto',
                    'rightarrow'
                ],
                1.5,
                522
            ],
            xtofrom: [
                [
                    'leftToFrom',
                    'rightToFrom'
                ],
                1.75,
                528
            ],
            xrightleftarrows: [
                [
                    'baraboveleftarrow',
                    'rightarrowabovebar'
                ],
                1.75,
                901
            ],
            xrightequilibrium: [
                [
                    'baraboveshortleftharpoon',
                    'rightharpoonaboveshortbar'
                ],
                1.75,
                716
            ],
            xleftequilibrium: [
                [
                    'shortbaraboveleftharpoon',
                    'shortrightharpoonabovebar'
                ],
                1.75,
                716
            ]
        },
        xc = {
            widehat1: [
                1062,
                239,
                0.24
            ],
            widehat2: [
                2364,
                300,
                0.3
            ],
            widehat3: [
                2364,
                360,
                0.36
            ],
            widehat4: [
                2364,
                420,
                0.42
            ],
            widecheck1: [
                1062,
                239,
                0.24
            ],
            widecheck2: [
                2364,
                300,
                0.3
            ],
            widecheck3: [
                2364,
                360,
                0.36
            ],
            widecheck4: [
                2364,
                420,
                0.42
            ],
            widetilde1: [
                600,
                260,
                0.26
            ],
            widetilde2: [
                1033,
                286,
                0.286
            ],
            widetilde3: [
                2339,
                306,
                0.306
            ],
            widetilde4: [
                2340,
                312,
                0.34
            ],
            overarc: [
                1061,
                159,
                0.3
            ],
            underarc: [
                1061,
                159,
                0.3
            ]
        },
        yc = {
            doubleleftarrow: 'M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z',
            doublerightarrow: 'M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z',
            leftarrow: 'M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z',
            leftbrace: 'M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z',
            leftbraceunder: 'M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z',
            overarc: 'M529 0c179 0 524 115 524 115 5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2s-338-93-512-92c-174 0-513 92-513 92h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13 0 0 342-115 520-115z',
            underarc: 'm 529 160\n  c -179 0 -524 -115 -524 -115\n  c -5 -1 -9 -5 -9 -10\n  c 0 -1 1 -2 1 -3\n  l 4 -22\n  c 1 -5 5 -9 11 -9\n  h 2\n  s 338 93 512 92\n  c 174 0 513 -92 513 -92\n  h 2\n  c 5 0 9 4 11 9\n  l 5 22\n  c 1 6 -2 12 -8 13\n  c 0 0 -342 115 -520 115\n  z\n  ',
            leftgroup: 'M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z',
            leftgroupunder: 'M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z',
            leftharpoon: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z',
            leftharpoonplus: 'M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z',
            leftharpoondown: 'M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z',
            leftharpoondownplus: 'M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z',
            lefthook: 'M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z',
            leftlinesegment: 'M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z',
            leftmapsto: 'M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z',
            leftToFrom: 'M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z',
            longequal: 'M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z',
            midbrace: 'M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z',
            midbraceunder: 'M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z',
            oiintSize1: 'M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z',
            oiintSize2: 'M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z',
            oiiintSize1: 'M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z',
            oiiintSize2: 'M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z',
            rightarrow: 'M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z',
            rightbrace: 'M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z',
            rightbraceunder: 'M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z',
            rightgroup: 'M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z',
            rightgroupunder: 'M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z',
            rightharpoon: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z',
            rightharpoonplus: 'M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z',
            rightharpoondown: 'M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z',
            rightharpoondownplus: 'M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z',
            righthook: 'M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z',
            rightlinesegment: 'M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z',
            rightToFrom: 'M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z',
            twoheadleftarrow: 'M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z',
            twoheadrightarrow: 'M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z',
            widetilde1: 'M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z',
            widetilde2: 'M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z',
            widetilde3: 'M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z',
            widetilde4: 'M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z',
            vec: 'M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z',
            widehat1: 'M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z',
            widehat2: 'M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat3: 'M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widehat4: 'M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z',
            widecheck1: 'M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z',
            widecheck2: 'M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck3: 'M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            widecheck4: 'M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z',
            baraboveleftarrow: 'M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z',
            rightarrowabovebar: 'M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z',
            baraboveshortleftharpoon: 'M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z',
            rightharpoonaboveshortbar: 'M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z',
            shortbaraboveleftharpoon: 'M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z',
            shortrightharpoonabovebar: 'M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z'
        };
    class zc {
        static createAtom(Ac, Bc, Cc, Dc) {
            return zc._registry[Ac].createAtom(Bc, Cc, Dc);
        }
        static serialize(Ac, Bc) {
            return zc._registry[Ac[0].mode].serialize(Ac, Bc);
        }
        static applyStyle(Ac, Bc, Cc) {
            return zc._registry[Ac].applyStyle(Bc, Cc);
        }
        constructor(Ac) {
            zc._registry[Ac] = this;
        }
    }

    function Ac(Bc, Cc) {
        const Dc = [];
        let Ec, Fc = [];
        for (const Gc of Bc)
            if ('first' !== f.type && f.style) {
                let Hc;
                'variant' === Cc ? (Hc = f.style.variant, f.style.variantStyle && 'up' !== f.style.variantStyle && (Hc += '-' + f.style.variantStyle)) : 'cssClass' === Cc ? 'group' === f.type && (Hc = f.customClass) : Hc = f.style[Cc], Hc === Ec ? Fc.push(f) : (Fc.length > 0 && Dc.push(Fc), Fc = [f], Ec = Hc);
            }
        return Fc.length > 0 && Dc.push(Fc), Dc;
    }
    zc._registry = {};
    const Dc = [
            '',
            'chem',
            'mord',
            'mbin',
            'mop',
            'mrel',
            'mopen',
            'mclose',
            'mpunct',
            'minner',
            'spacing',
            'first',
            'latex',
            'composition',
            'error',
            'placeholder',
            'supsub',
            'none',
            'mathfield'
        ],
        Ec = {
            mord: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mop: {
                mord: 3,
                mop: 3,
                rel: 5,
                minner: 3
            },
            mbin: {
                mord: 4,
                mop: 4,
                mopen: 4,
                minner: 4
            },
            mrel: {
                mord: 5,
                mop: 5,
                mopen: 5,
                minner: 5
            },
            mclose: {
                mop: 3,
                mbin: 4,
                mrel: 5,
                minner: 3
            },
            mpunct: {
                mord: 3,
                mop: 3,
                mrel: 3,
                mopen: 3,
                mpunct: 3,
                minner: 3
            },
            minner: {
                mord: 3,
                mop: 3,
                mbin: 4,
                mrel: 5,
                mopen: 3,
                mpunct: 3,
                minner: 3
            }
        },
        Fc = {
            mord: {
                mop: 3
            },
            mop: {
                mord: 3,
                mop: 3
            },
            mclose: {
                mop: 3
            },
            minner: {
                mop: 3
            }
        };

    function Gc(Hc, Ic) {
        if ('string' == typeof Hc)
            return Hc;
        if ('number' == typeof Hc) {
            const Jc = Math.ceil(100 * Hc) / 100;
            return 0 === Jc ? '0' : Jc.toString() + (null != Ic ? Ic : '');
        }
        return '';
    }
    class Ic {
        set atomID(Jc) {
            void 0 !== Jc && 0 !== Jc.length && (this.attributes || (this.attributes = {}), this.attributes['data-atom-id'] = Jc);
        }
        selected(Jc) {
            if (this.isSelected !== Jc && (this.isSelected = Jc, this.children))
                for (const Kc of this.children)
                    Kc.selected(Jc);
        }
        setStyle(Jc, Kc, Lc) {
            if (void 0 === Kc)
                return;
            const Mc = Gc(Kc, Lc);
            Mc.length > 0 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties[Jc] = Mc);
        }
        setTop(Jc) {
            Number.isFinite(Jc) && Math.abs(Jc) > 0.01 && (this.cssProperties || (this.cssProperties = {}), this.cssProperties.top = Gc(Jc, 'em'), this.height -= Jc, this.depth += Jc);
        }
        get left() {
            var Jc;
            return (null === (Jc = this.cssProperties) || void 0 === Jc ? void 0 : Jc['margin-left']) ? Number.parseFloat(this.cssProperties['margin-left']) : 0;
        }
        set left(Jc) {
            Number.isFinite(Jc) && (0 === Jc ? this.cssProperties && delete this.cssProperties['margin-left'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-left'] = Gc(Jc, 'em')));
        }
        set right(Jc) {
            Number.isFinite(Jc) && (0 === Jc ? this.cssProperties && delete this.cssProperties['margin-right'] : (this.cssProperties || (this.cssProperties = {}), this.cssProperties['margin-right'] = Gc(Jc, 'em')));
        }
        set width(Jc) {
            Number.isFinite(Jc) && (0 === Jc ? this.cssProperties && delete this.cssProperties.width : (this.cssProperties || (this.cssProperties = {}), this.cssProperties.width = Gc(Jc, 'em')));
        }
        wrap(Jc, Kc) {
            const Lc = Jc.parent;
            if (!Lc)
                return this;
            Jc.isPhantom && this.setStyle('opacity', 0);
            let Mc = Jc.computedColor;
            Mc === Lc.computedColor && (Mc = ''), this.setStyle('color', Mc);
            const Nc = Jc.effectiveFontSize === Lc.effectiveFontSize ? void 0 : Jc.effectiveFontSize;
            let Oc, Pc = Jc.computedBackgroundColor;
            if (this.isSelected && (Pc = S(Pc)), Pc === Lc.computedBackgroundColor && (Pc = ''), !(Nc || Pc || Kc && (Kc.classes || Kc.type)))
                return this;
            Pc ? (Oc = _Rc(this, Kc), Oc.selected(this.isSelected), Oc.setStyle('background-color', Pc), Oc.setStyle('display', 'inline-block')) : Oc = new Ic(this, Kc);
            const Qc = Jc.scalingFactor;
            return 1 !== Qc && (Oc.setStyle('font-size', 100 * Qc, '%'), Oc.height *= Qc, Oc.depth *= Qc, Oc.italic *= Qc, Oc.skew *= Qc), Oc;
        }
        wrapSelect(Jc) {
            if (!this.isSelected)
                return this;
            if (!Jc.parent)
                return this;
            const Kc = S(Jc.computedBackgroundColor),
                Lc = _Rc(this);
            return Lc.selected(!0), Lc.setStyle('background-color', Kc), Lc.setStyle('display', 'inline-block'), Lc;
        }
        toMarkup() {
            var Jc, Kc, Lc;
            let Mc = null !== (Jc = this.value) && void 0 !== Jc ? Jc : '';
            if (this.children)
                for (const Nc of this.children)
                    Mc += Nc.toMarkup();
            const Oc = this.classes.split(' ');
            Oc.push(null !== (Kc = {
                latex: 'ML__latex',
                placeholder: 'ML__placeholder',
                error: 'ML__error'
            } [this.type]) && void 0 !== Kc ? Kc : ''), 'latex' === this.caret && Oc.push('ML__latex-caret');
            const Pc = 1 === Oc.length ? Oc[0] : Oc.filter((Qc, Rc, Sc) => Qc.length > 0 && Sc.indexOf(Qc) === Rc).join(' ');
            let Qc = '';
            if (Mc.length > 0 && '\u200B' !== Mc || Pc.length > 0 || this.cssId || this.htmlData || this.htmlStyle || this.attributes || this.cssProperties || this.svgBody || this.svgOverlay) {
                let Rc = '';
                if (this.cssId && (Rc += ` id=${ this.cssId.replace(/ /g, '-') } `), this.htmlData) {
                    const Sc = this.htmlData.split(',');
                    for (const Tc of Sc) {
                        const Uc = Tc.match(/([^=]+)=(.+$)/);
                        if (Uc) {
                            const Vc = Uc[1].trim().replace(/ /g, '-');
                            Vc && (Rc += ` data-${ Vc }=${ Uc[2] } `);
                        } else {
                            const Wc = Vc.trim().replace(/ /g, '-');
                            Wc && (Rc += ` data-${ Wc } `);
                        }
                    }
                }
                if (this.htmlStyle) {
                    const Xc = this.htmlStyle.split(';');
                    let Yc = '';
                    for (const Zc of Xc) {
                        const $c = Rc.match(/([^=]+):(.+$)/);
                        if ($c) {
                            const ad = $c[1].trim().replace(/ /g, '-');
                            Rc && (Yc += `${ Rc }:${ $c[2] };`);
                        }
                    }
                    Yc && (Rc += ` style="${ Yc }"`);
                }
                if (this.attributes && (Rc += ' ' + Object.keys(this.attributes).map(ad => `${ ad }="${ this.attributes[ad] }"`).join(' ')), Pc.length > 0 && (Rc += ` class="${ Pc }"`), this.cssProperties) {
                    const ad = Object.keys(this.cssProperties).map(bd => `${ bd }:${ this.cssProperties[bd] }`).join(';');
                    ad.length > 0 && (Rc += ` style="${ ad }"`);
                }
                let bd = '';
                this.svgBody ? bd = function(cd) {
                    if (xc[cd]) {
                        const [dd, ed, fd] = xc[cd];
                        return `<span style="display:inline-block;height:${ fd / 2 }em;min-width:0"><span class="stretchy" style="height:${ fd }em"><svg width="100%" height="${ fd }em" viewBox="0 0 ${ dd } ${ ed }" preserveAspectRatio="none" ><path fill="currentcolor" d="${ yc[cd] }"></path></svg></span></span>`;
                    }
                    const [dd, ed, fd, gd] = wc[cd];
                    let hd, id;
                    const jd = fd / 1000;
                    3 === dd.length ? (hd = [
                        'slice-1-of-3',
                        'slice-2-of-3',
                        'slice-3-of-3'
                    ], id = [
                        'xMinYMin',
                        'xMidYMin',
                        'xMaxYMin'
                    ]) : 2 === dd.length ? (hd = [
                        'slice-1-of-2',
                        'slice-2-of-2'
                    ], id = [
                        'xMinYMin',
                        'xMaxYMin'
                    ]) : (hd = ['slice-1-of-1'], id = [gd]);
                    const kd = dd.map((ld, md) => `<span class="${ hd[md] }" style=height:${ jd }em><svg width=400em height=${ jd }em viewBox="0 0 400000 ${ fd }" preserveAspectRatio="${ id[md] } slice"><path fill="currentcolor" d="${ yc[ld] }"></path></svg></span>`).join('');
                    return `<span style="display:inline-block;height:${ jd }em;min-width:${ ed }em;">${ kd }</span>`;
                }(this.svgBody) : this.svgOverlay && (bd = '<span style="', bd += 'display: inline-block;', bd += `height:${ this.height + this.depth }em;`, bd += `vertical-align:${ this.depth }em;`, bd += '">', bd += Mc, bd += '</span>', bd += '<svg style="position:absolute;overflow:overlay;', bd += `height:${ this.height + this.depth }em;`, (null === (Vc = this.cssProperties) || void 0 === Vc ? void 0 : Vc.padding) ? (bd += `top:${ this.cssProperties.padding }em;`, bd += `left:${ this.cssProperties.padding }em;`, bd += `width:calc(100% - 2 * ${ this.cssProperties.padding }em );`) : bd += 'top:0;left:0;width:100%;', bd += 'z-index:2;', bd += '"', this.svgStyle && (bd += ` style="${ this.svgStyle }"`), bd += `>${ this.svgOverlay }</svg>`), Qc = `<span${ Rc }>${ Mc }${ bd }</span>`;
            }
            return 'text' === this.caret ? Qc += '<span class="ML__text-caret"></span>' : 'math' === this.caret && (Qc += '<span class="ML__caret"></span>'), Qc;
        }
        tryCoalesceWith(Jc) {
            if (this.type !== Jc.type)
                return !1;
            if (!/ML__text/.test(this.classes) && ![
                    'mord',
                    'mbin',
                    'mrel'
                ].includes(this.type))
                return !1;
            if (this.svgBody || !this.value)
                return !1;
            if (Jc.svgBody || !Jc.value)
                return !1;
            const Kc = this.children && this.children.length > 0,
                Lc = Jc.children && Jc.children.length > 0;
            if (Kc || Lc)
                return !1;
            const Mc = this.cssProperties ? Object.keys(this.cssProperties).length : 0;
            if (Mc !== (Jc.cssProperties ? Object.keys(Jc.cssProperties).length : 0))
                return !1;
            if (Mc > 0)
                for (const Nc of Object.keys(this.cssProperties))
                    if (this.cssProperties[Nc] !== Jc.cssProperties[Nc])
                        return !1;
            const Oc = this.classes.trim().replace(/\s+/g, ' ').split(' '),
                Pc = Jc.classes.trim().replace(/\s+/g, ' ').split(' ');
            if (Oc.length !== Pc.length)
                return !1;
            Oc.sort(), Pc.sort();
            for (const [Qc, Rc] of Oc.entries()) {
                if ('vertical-separator' === Rc)
                    return !1;
                if (Rc !== Pc[Qc])
                    return !1;
            }
            return this.value += Qc.value, this.height = Math.max(this.height, Qc.height), this.depth = Math.max(this.depth, Qc.depth), this.maxFontSize = Math.max(this.maxFontSize, Qc.maxFontSize), this.italic = Qc.italic, !0;
        }
        constructor(Jc, Kc) {
            var Lc, Mc, Nc, Oc, Pc, Qc;
            if ('number' == typeof Jc ? this.value = String.fromCodePoint(Jc) : 'string' == typeof Jc ? this.value = Jc : d(Jc) ? this.children = Jc.filter(Rc => null !== Rc) : Jc && Jc instanceof Ic && (this.children = [Jc]), this.type = null !== (Lc = null == Kc ? void 0 : Kc.type) && void 0 !== Lc ? Lc : '', this.isSelected = !1, this.isTight = null !== (Mc = null == Kc ? void 0 : Kc.isTight) && void 0 !== Mc && Mc, this.newList = null !== (Nc = null == Kc ? void 0 : Kc.newList) && void 0 !== Nc && Nc, null == Kc ? void 0 : Kc.properties)
                for (const Rc of Object.keys(Kc.properties))
                    this.setStyle(Rc, Kc.properties[Rc]);
            (null == Kc ? void 0 : Kc.attributes) && (this.attributes = Kc.attributes), this.classes = null !== (Oc = null == Kc ? void 0 : Kc.classes) && void 0 !== Oc ? Oc : '';
            let Sc = (null == Kc ? void 0 : Kc.fontFamily) || 'Main-Regular';
            if ((null == Kc ? void 0 : Kc.style) && this.value && (Sc = zc.applyStyle(null !== (Pc = Kc.mode) && void 0 !== Pc ? Pc : 'math', this, Kc.style) || 'Main-Regular'), this.height = 0, this.depth = 0, this.skew = 0, this.italic = 0, this.maxFontSize = 0, 'latex' === this.type)
                this.height = 0.8, this.depth = 0.2;
            else if ('number' == typeof Rc) {
                const Tc = nc(Rc, Sc);
                this.height = Tc.height, this.depth = Tc.depth, this.skew = Tc.skew, this.italic = Tc.italic;
            } else if (this.value) {
                this.height = -1 / 0, this.depth = -1 / 0, this.skew = -1 / 0, this.italic = -1 / 0;
                for (let Uc = 0; Uc < this.value.length; Uc++) {
                    const Vc = nc(this.value.codePointAt(Uc), Sc || 'Main-Regular');
                    this.height = Math.max(this.height, Vc.height), this.depth = Math.max(this.depth, Vc.depth), this.skew = Vc.skew, this.italic = Vc.italic;
                }
            } else if (this.children && this.children.length > 0)
                if (1 === this.children.length) {
                    const Vc = this.children[0];
                    this.height = Vc.height, this.depth = Vc.depth, this.maxFontSize = Vc.maxFontSize, this.skew = Vc.skew, this.italic = Vc.italic;
                } else {
                    let Wc = -1 / 0,
                        Xc = -1 / 0,
                        Yc = 0;
                    for (const Zc of this.children)
                        Zc.height > Wc && (Wc = Zc.height), Zc.depth > Xc && (Xc = Zc.depth), Yc = Math.max(Yc, null !== (Qc = Zc.maxFontSize) && void 0 !== Qc ? Qc : 0);
                    this.height = Wc, this.depth = Xc, this.maxFontSize = Yc;
                }
            void 0 !== (null == Vc ? void 0 : Vc.height) && (this.height = Vc.height), void 0 !== (null == Vc ? void 0 : Vc.depth) && (this.depth = Vc.depth), void 0 !== (null == Vc ? void 0 : Vc.maxFontSize) && (this.maxFontSize = Vc.maxFontSize);
        }
    }

    function Jc(Kc) {
        if (!Kc || 0 === Kc.length)
            return [];
        Kc[0].children = Jc(Kc[0].children);
        const Lc = [Kc[0]];
        for (let Mc = 1; Mc < Kc.length; Mc++)
            Lc[Lc.length - 1].tryCoalesceWith(Kc[Mc]) || (Kc[Mc].children = Jc(Kc[Mc].children), Lc.push(Kc[Mc]));
        return Lc;
    }

    function Lc(Mc) {
        return Mc.children && (Mc.children = Jc(Mc.children)), Mc;
    }

    function Mc(Nc, Oc, Pc) {
        Oc.newList && (Nc = null);
        const Qc = Oc.type;
        if ('first' === d)
            return null;
        if ('spacing' === d)
            return Nc;
        if (Pc(Nc, Oc), Oc.children) {
            let Rc = null;
            void 0 !== d && 0 !== d.length || (Rc = Nc);
            for (const Sc of Oc.children)
                Rc = Mc(Rc, Nc, Pc);
            void 0 !== d && 0 !== d.length || (Nc = Rc);
        }
        return 'supsub' !== d && void 0 !== d && d.length > 0 && (Nc = Oc), Nc;
    }

    function Pc(Qc, Rc) {
        Qc && Mc(null, Qc, Rc);
    }

    function Qc(Rc, Sc = 1) {
        return function(Tc) {
                Pc(Tc, (Uc, Vc) => {
                    'mbin' !== Vc.type || Uc && !/first|none|mbin|mop|mrel|mopen|mpunct/.test(Uc.type) || (Vc.type = 'mord'), Uc && 'mbin' === Uc.type && /mrel|mclose|mpunct|placeholder/.test(Vc.type) && (Uc.type = 'mord');
                });
            }(Rc),
            function(Tc, Uc) {
                Pc(Tc, (Vc, Wc) => {
                    var Xc, Yc, Zc, $c;
                    const ad = null !== (Xc = null == Vc ? void 0 : Vc.type) && void 0 !== Xc ? Xc : 'none',
                        bd = Wc.isTight ? null !== (Yc = Fc[ad]) && void 0 !== Yc ? Yc : null : null !== (Zc = Ec[ad]) && void 0 !== Zc ? Zc : null,
                        cd = bd && null !== ($c = bd[Wc.type]) && void 0 !== $c ? $c : 0;
                    cd && (Wc.left += Uc * (cd / 18));
                });
            }(Rc, Sc), Rc;
    }

    function _Rc(Sc, Tc) {
        if (!Sc)
            return new Ic(null, Tc);
        const Uc = new Ic(null, {
            classes: 'ML__strut'
        });
        Uc.setStyle('height', Math.max(0, Sc.height), 'em');
        const Vc = [Uc];
        if (0 !== Sc.depth) {
            const Wc = new Ic(null, {
                classes: 'ML__strut--bottom'
            });
            Tc.setStyle('height', Sc.height + Sc.depth, 'em'), Tc.setStyle('vertical-align', -Sc.depth, 'em'), d.push(Tc);
        }
        return d.push(Sc), new Ic(d, Tc);
    }

    function Vc(Wc) {
        const Xc = function(Yc) {
                return wc[Yc] ? wc[Yc][2] / 1000 : xc[Yc][2];
            }(Wc) / 2,
            Yc = new Ic(null, {
                height: Xc + 0.166,
                depth: Xc - 0.166,
                maxFontSize: 0
            });
        return Yc.svgBody = Wc, Yc;
    }
    class Yc extends Ic {
        constructor(Zc, $c) {
            var ad;
            const [bd, cd, dd] = function(ed) {
                var fd;
                const [gd, hd] = function(id) {
                    if ('individualShift' in id) {
                        const jd = id.individualShift;
                        let kd = jd[0];
                        const ld = [kd],
                            md = -kd.shift - kd.box.depth;
                        let nd = md;
                        for (let od = 1; od < jd.length; od++) {
                            const pd = jd[od],
                                qd = -pd.shift - nd - pd.box.depth,
                                rd = qd - (kd.box.height + kd.box.depth);
                            nd += qd, ld.push(rd), ld.push(pd), kd = pd;
                        }
                        return [
                            ld,
                            pd
                        ];
                    }
                    if ('top' in id) {
                        let pd = id.top;
                        for (const qd of id.children)
                            pd -= 'number' == typeof qd ? qd : qd.box.height + qd.box.depth;
                        return [
                            id.children,
                            pd
                        ];
                    }
                    if ('bottom' in id)
                        return [
                            id.children,
                            -id.bottom
                        ];
                    if ('firstBaseline' in id) {
                        const qd = id.firstBaseline[0];
                        if ('number' == typeof qd)
                            throw new Error('First child must be an element.');
                        return [
                            id.firstBaseline,
                            -qd.box.depth
                        ];
                    }
                    if ('shift' in id) {
                        const rd = id.children[0];
                        if ('number' == typeof rd)
                            throw new Error('First child must be an element.');
                        return [
                            id.children,
                            -rd.box.depth - id.shift
                        ];
                    }
                    return [
                        null,
                        0
                    ];
                }(ed);
                if (!gd)
                    return [
                        [],
                        0,
                        0
                    ];
                let id = 0;
                for (const jd of gd)
                    if ('number' != typeof jd) {
                        const kd = jd.box;
                        id = Math.max(id, kd.maxFontSize, kd.height);
                    }
                id += 2;
                const ld = new Ic(null, {
                    classes: 'pstrut'
                });
                ld.setStyle('height', id, 'em');
                const md = [];
                let nd = hd,
                    od = hd,
                    pd = hd;
                for (const qd of gd) {
                    if ('number' == typeof qd)
                        pd += qd;
                    else {
                        const rd = qd.box,
                            sd = null !== (kd = qd.classes) && void 0 !== kd ? kd : [],
                            td = new Ic([
                                ld,
                                gd
                            ], {
                                classes: hd.join(' '),
                                style: qd.style
                            });
                        nd.setStyle('top', -id - pd - gd.depth, 'em'), qd.marginLeft && nd.setStyle('margin-left', qd.marginLeft, 'em'), qd.marginRight && nd.setStyle('margin-right', qd.marginRight, 'em'), md.push(nd), pd += gd.height + gd.depth;
                    }
                    nd = Math.min(nd, pd), od = Math.max(od, pd);
                }
                const ud = new Ic(md, {
                    classes: 'vlist'
                });
                if (ud.setStyle('height', od, 'em'), nd >= 0)
                    return [
                        [new Ic(ud, {
                            classes: 'vlist-r'
                        })],
                        od,
                        -nd
                    ];
                const vd = new Ic(new Ic(null), {
                    classes: 'vlist'
                });
                vd.setStyle('height', -nd, 'em');
                const wd = new Ic(8203, {
                    classes: 'vlist-s',
                    maxFontSize: 0,
                    height: 0,
                    depth: 0
                });
                return [
                    [
                        new Ic([
                            ud,
                            wd
                        ], {
                            classes: 'vlist-r'
                        }),
                        new Ic(vd, {
                            classes: 'vlist-r'
                        })
                    ],
                    od,
                    -nd
                ];
            }(Zc);
            super(1 === bd.length ? bd[0] : bd, {
                classes: (null !== (ad = null == $c ? void 0 : $c.classes) && void 0 !== ad ? ad : '') + ' vlist-t' + (2 === bd.length ? ' vlist-t2' : ''),
                height: cd,
                depth: dd,
                type: null == $c ? void 0 : $c.type
            });
        }
    }
    const Zc = [
        [
            8205,
            1
        ],
        [
            65038,
            2
        ],
        [
            127995,
            5
        ],
        [
            129456,
            4
        ],
        [
            917536,
            96
        ]
    ];
    let $c;
    const ad = [
        127462,
        127487
    ];

    function bd(cd) {
        var dd;
        if (void 0 === $c) {
            $c = {};
            for (const ed of Zc)
                for (let fd = cd[0]; fd <= cd[0] + cd[1] - 1; fd++)
                    $c[fd] = !0;
        }
        return null !== (dd = $c[cd]) && void 0 !== dd && dd;
    }

    function ed(fd) {
        return fd >= ad[0] && fd <= ad[1];
    }

    function fd(gd) {
        if (/^[\u0020-\u00FF]*$/.test(gd))
            return gd;
        const hd = [],
            id = function(jd) {
                const kd = [];
                for (let ld = 0; ld < jd.length; ld++) {
                    let md = jd.charCodeAt(ld);
                    if (13 === md && 10 === jd.charCodeAt(ld + 1) && (md = 10, ld++), 13 !== md && 12 !== md || (md = 10), 0 === md && (md = 65533), md >= 55296 && md <= 56319) {
                        const nd = jd.charCodeAt(ld + 1);
                        nd >= 56320 && nd <= 57343 && (md = 65536 + 1024 * (md - 55296) + (nd - 56320), ld++);
                    }
                    nd.push(md);
                }
                return nd;
            }(gd);
        let jd = 0;
        for (; jd < id.length;) {
            const kd = id[jd++],
                ld = id[jd];
            if (8205 === e) {
                const md = jd - 1;
                for (jd += 2; 8205 === id[jd];)
                    jd += 2;
                hd.push(String.fromCodePoint(...id.slice(gd, jd - gd + 1)));
            } else if (bd(e)) {
                const nd = jd - 1;
                for (; bd(id[jd]);)
                    jd += 8205 === id[jd] ? 2 : 1;
                hd.push(String.fromCodePoint(...id.slice(gd, 2 * jd - gd - 1)));
            } else
                ed(gd) ? (jd += 1, hd.push(String.fromCodePoint(...id.slice(jd - 2, 2)))) : hd.push(String.fromCodePoint(gd));
        }
        return hd;
    }
    class md {
        end() {
            return this.pos >= this.s.length;
        }
        get() {
            return this.pos < this.s.length ? this.s[this.pos++] : '';
        }
        peek() {
            return this.s[this.pos];
        }
        match(nd) {
            const od = 'string' == typeof this.s ? nd.exec(this.s.slice(this.pos)) : nd.exec(this.s.slice(this.pos).join(''));
            return (null == od ? void 0 : od[0]) ? (this.pos += od[0].length, od[0]) : '';
        }
        next() {
            if (this.end())
                return null;
            if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]+/))
                return '<space>';
            if (this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]/))
                return '<space>';
            const nd = this.get();
            if ('\\' === nd) {
                if (!this.end()) {
                    let od = this.match(/^[a-zA-Z\*]+/);
                    if (od)
                        this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]*/);
                    else if (od = this.get(), ' ' === od)
                        return '<space>';
                    return '\\' + od;
                }
            } else {
                if ('{' === nd)
                    return '<{>';
                if ('}' === nd)
                    return '<}>';
                if ('^' === nd) {
                    if ('^' === this.peek()) {
                        this.get();
                        const od = this.match(/^(\^(\^(\^(\^[\da-f])?[\da-f])?[\da-f])?[\da-f])?[\da-f]{2}/);
                        if (od)
                            return String.fromCodePoint(Number.parseInt(od.slice(od.lastIndexOf('^') + 1), 16));
                    }
                    return od;
                }
                if ('#' === od) {
                    if (!this.end()) {
                        let pd = !1;
                        if (/[\d?@]/.test(this.peek()) && (pd = !0, this.pos + 1 < this.s.length)) {
                            const qd = this.s[this.pos + 1];
                            pd = /[^\dA-Za-z]/.test(qd);
                        }
                        return pd ? '#' + this.get() : '#';
                    }
                } else if ('$' === od)
                    return '$' === this.peek() ? (this.get(), '<$$>') : '<$>';
            }
            return od;
        }
        constructor(nd) {
            this.s = fd(nd), this.pos = 0, this.obeyspaces = !1;
        }
    }

    function nd(od, pd) {
        var qd, rd, sd, td;
        const ud = [];
        let vd = od.next();
        if (vd)
            if ('\\relax' === vd);
            else if ('\\noexpand' === vd)
            vd = od.next(), vd && g.push(vd);
        else if ('\\obeyspaces' === vd)
            od.obeyspaces = !0;
        else if ('\\space' === vd || '~' === vd)
            g.push('<space>');
        else if ('\\bgroup' === vd)
            g.push('<{>');
        else if ('\\egroup' === vd)
            g.push('<}>');
        else if ('\\string' === vd) {
            if (vd = od.next(), vd)
                if (vd.startsWith('\\'))
                    for (const wd of vd)
                        g.push('\\' === od ? '\\backslash' : od);
                else
                    '<{>' === vd ? g.push('\\{') : '<space>' === vd ? g.push('~') : '<}>' === vd && g.push('\\}');
        } else if ('\\csname' === vd) {
            for (;
                '<space>' === od.peek();)
                od.next();
            let xd = '',
                yd = !1,
                zd = [];
            do {
                if (0 === zd.length)
                    if (/^#[\d?@]$/.test(od.peek())) {
                        const Ad = od.get().slice(1);
                        zd = _wd(null !== (d = null !== (qd = null == pd ? void 0 : pd(xd)) && void 0 !== qd ? qd : null == pd ? void 0 : pd('?')) && void 0 !== d ? d : '\\placeholder{}', pd), vd = zd[0];
                    } else
                        vd = od.next(), zd = vd ? [vd] : [];
                yd = 0 === zd.length, yd || '\\endcsname' !== vd || (yd = !0, zd.shift()), yd || (yd = '<$>' === vd || '<$$>' === vd || '<{>' === vd || '<}>' === vd || 'string' == typeof vd && vd.length > 1 && vd.startsWith('\\')), yd || (xd += zd.shift());
            } while (!yd);
            xd && g.push('\\' + xd), g.push(...zd);
        } else if ('\\endcsname' === vd);
        else if (vd.length > 1 && vd.startsWith('#')) {
            const yd = vd.slice(1);
            g.push(..._wd(null !== (f = null !== (e = null == pd ? void 0 : pd(od)) && void 0 !== e ? e : null == pd ? void 0 : pd('?')) && void 0 !== f ? f : '\\placeholder{}', pd));
        } else
            g.push(vd);
        return g;
    }

    function _wd(xd, yd = null) {
        const zd = [];
        let Ad = '';
        for (const Bd of xd.toString().split(/\r?\n/)) {
            Ad && zd.push(Ad), Ad = ' ';
            const Cd = yd.match(/((?:\\%)|[^%])*/);
            null !== xd && zd.push(xd[0]);
        }
        const Dd = new md(zd.join('')),
            Ed = [];
        do {
            f.push(...nd(e, yd));
        } while (!e.end());
        return f;
    }

    function Cd(Dd) {
        let Ed = '';
        const Fd = [];
        for (const Gd of Dd)
            d && (/[a-zA-Z\*]/.test(d[0]) && Fd.push(Ed), Fd.push(d), /\\[a-zA-Z]+\*?[\"\'][^\ ]+$/.test(d) && Fd.push(' '), Ed = /\\[a-zA-Z]+\*?$/.test(d) ? ' ' : '');
        return Fd.join('');
    }

    function Fd(Gd) {
        return Cd(Gd.map(Hd => {
            var Id;
            return null !== (Id = {
                '<space>': ' ',
                '<$$>': '$$',
                '<$>': '$',
                '<{>': '{',
                '<}>': '}'
            } [Hd]) && void 0 !== Id ? Id : Hd;
        }));
    }
    class Gd extends Ic {
        toMarkup() {
            const Hd = [],
                Id = this.classes.split(' '),
                Jd = 1 === Id.length ? Id[0] : Id.filter((Kd, Ld, Md) => Kd.length > 0 && Md.indexOf(Kd) === Ld).join(' ');
            if (this.cssId && Hd.push(`id=${ this.cssId.replace(/ /g, '-') }`), this.htmlData) {
                const Kd = this.htmlData.split(',');
                for (const Ld of Kd) {
                    const Md = Ld.match(/([^=]+)=(.+$)/);
                    if (Md) {
                        const Nd = Md[1].trim().replace(/ /g, '-');
                        Nd && Hd.push(`data-${ Nd }=${ Md[2] }`);
                    } else {
                        const Od = Nd.trim().replace(/ /g, '-');
                        Od && Hd.push(`data-${ Od }`);
                    }
                }
            }
            if (this.htmlStyle) {
                const Pd = this.htmlStyle.split(';');
                let Qd = '';
                for (const Rd of Pd) {
                    const Sd = Rd.match(/([^=]+):(.+$)/);
                    if (Sd) {
                        const Td = Sd[1].trim().replace(/ /g, '-');
                        Td && (Qd += `${ Td }:${ Sd[2] };`);
                    }
                }
                Qd && Td.push(`style="${ Qd }"`);
            }
            this.attributes && Td.push(...Object.keys(this.attributes).map(Td => `${ Td }="${ this.attributes[Td] }"`)), Nd.length > 0 && Td.push(`class="${ Nd }"`);
            const Td = this.mathfield;
            return Td.push(`style="display:inline-block; width:${ Td.clientWidth }px; height:${ Td.clientHeight }px;" `), `<span ${ Td.join(' ') }></span>`;
        }
        constructor(Hd, Id, Jd) {
            super(null, Jd), this.mathfield = Id, this.htmlData = `placeholder-id=${ Hd } `;
            const Kd = function(Ld) {
                return _Rc(Qc(Ld.model.root.render(new vc({
                    registers: Ld.registers
                }, {
                    fontSize: 5,
                    letterShapeStyle: Ld.options.letterShapeStyle
                }, 'inline-math' === Ld.options.defaultMode ? 'textstyle' : 'displaystyle')), Ld.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(Id._mathfield);
            this.height = Kd.height, this.depth = Kd.depth;
        }
    }
    const Hd = [
        'above',
        'body',
        'below',
        'superscript',
        'subscript'
    ];

    function Id(Jd) {
        return 'string' == typeof Jd && Hd.includes(Jd);
    }

    function Jd(Kd) {
        return void 0 !== Kd && Array.isArray(Kd) && 2 === Kd.length;
    }
    class Kd {
        static createBox(Ld, Md, Nd) {
            var Od, Pd, Qd;
            if (!Md)
                return null;
            const Rd = function(Sd) {
                let Td;
                const Ud = [];
                let Vd = [];
                for (const Wd of Sd)
                    if (Td || Wd.style) {
                        const Xd = Wd.computedStyle;
                        Td && Xd.color === Td.color && Xd.backgroundColor === Td.backgroundColor && Xd.fontSize === Td.fontSize ? Vd.push(Wd) : (Vd.length > 0 && Ud.push(Vd), Vd = [Wd], Td = Xd);
                    } else
                        Vd.push(Wd);
                return Vd.length > 0 && Ud.push(Vd), Ud;
            }(Md);
            if (1 === Rd.length) {
                const Sd = Rd[0];
                return Sd[0].style ? _Md(Ld, Sd, {
                    ...Nd,
                    style: {
                        color: Sd[0].style.color,
                        backgroundColor: Sd[0].style.backgroundColor,
                        fontSize: Sd[0].style.fontSize
                    }
                }) : _Md(Ld, Sd, Nd);
            }
            const Td = [];
            let Ud = null == Nd ? void 0 : Nd.newList;
            for (const Vd of Rd) {
                const Wd = _Md(new vc(Ld, {
                    color: null === (Od = Vd[0].style) || void 0 === Od ? void 0 : Od.color,
                    backgroundColor: null === (Pd = Vd[0].style) || void 0 === Pd ? void 0 : Pd.backgroundColor,
                    fontSize: null === (Qd = Vd[0].style) || void 0 === Qd ? void 0 : Qd.fontSize
                }), Vd, {
                    newList: Ud
                });
                Wd && (Ud = !1, Td.push(Wd));
            }
            return 0 === Td.length ? null : 1 !== Td.length || (null == Wd ? void 0 : Wd.classes) || (null == Wd ? void 0 : Wd.type) ? new Ic(Td, {
                classes: null == Wd ? void 0 : Wd.classes,
                type: null == Wd ? void 0 : Wd.type,
                newList: null == Wd ? void 0 : Wd.newList
            }).wrap(Ld) : Td[0].wrap(Ld);
        }
        static serialize(Ld, Md) {
            return d(Ld) ? _Ld(Ld, Md) : 'number' == typeof Ld || 'boolean' == typeof Ld ? Ld.toString() : 'string' == typeof Ld ? Ld.replace(/\s/g, '~') : void 0 === Ld ? '' : Md.expandMacro || 'string' != typeof Ld.verbatimLatex ? Ld.command && Kd.customSerializer[Ld.command] ? Kd.customSerializer[Ld.command](Ld, Md) : Ld.serialize(Md) : Ld.verbatimLatex;
        }
        static commonAncestor(Ld, Md) {
            if (Ld === Md)
                return Ld.parent;
            if (Ld.parent === Md.parent)
                return Ld.parent;
            const Nd = new WeakSet();
            let {
                parent: Od
            } = Ld;
            for (; Od;)
                Nd.add(Od), Od = Od.parent;
            for (Od = Md.parent; Od;) {
                if (Nd.has(Od))
                    return Od;
                Od = Od.parent;
            }
        }
        static fromJson(Ld, Md) {
            const Nd = new Kd(Ld.type, Md, Ld);
            for (const Od of Hd)
                Ld[Od] && Nd.setChildren(Ld[Od], Od);
            return Nd;
        }
        toJson() {
            const Ld = {
                type: this.type
            };
            if ('math' !== this.mode && (Ld.mode = this.mode), this.command && this.command !== this.value && (Ld.command = this.command), void 0 !== this.value && (Ld.value = this.value), this.style && Object.keys(this.style).length > 0 && (Ld.style = {
                    ...this.style
                }), void 0 !== this.verbatimLatex && (Ld.verbatimLatex = this.verbatimLatex), this.subsupPlacement && (Ld.subsupPlacement = this.subsupPlacement), this.explicitSubsupPlacement && (Ld.explicitSubsupPlacement = !0), this.isFunction && (Ld.isFunction = !0), this.displayContainsHighlight && (Ld.displayContainsHighlight = !0), this.isExtensibleSymbol && (Ld.isExtensibleSymbol = !0), this.skipBoundary && (Ld.skipBoundary = !0), this.captureSelection && (Ld.captureSelection = !0), this._branches)
                for (const Md of Object.keys(this._branches))
                    this._branches[Md] && (Ld[Md] = this._branches[Md].filter(Nd => 'first' !== Nd.type).map(Nd => Nd.toJson()));
            return Ld;
        }
        get changeCounter() {
            return this._changeCounter;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(Ld) {
            if (this._isDirty = Ld, Ld) {
                this._changeCounter++, this.verbatimLatex = void 0, this._children = void 0;
                let {
                    parent: Md
                } = this;
                for (; Md;)
                    Md._isDirty = !0, Md._changeCounter++, Md.verbatimLatex = void 0, Md._children = void 0, Md = Md.parent;
            }
        }
        serialize(Ld) {
            var Md;
            return this.body && this.command ? Cd([
                this.command,
                '{',
                this.bodyToLatex(Ld),
                '}',
                this.supsubToLatex(Ld)
            ]) : this.body ? Cd([
                this.bodyToLatex(Ld),
                this.supsubToLatex(Ld)
            ]) : this.value && '\u200B' !== this.value ? null !== (Md = this.command) && void 0 !== Md ? Md : function(Nd, Od) {
                var Pd;
                if ('text' === Nd)
                    return null !== (Pd = fb(Nd, Od.codePointAt(0))) && void 0 !== Pd ? Pd : Od;
                let Qd;
                if (Qd = fb(Nd, Od.codePointAt(0)), Qd)
                    return Qd;
                const Rd = function(Sd) {
                    var Td;
                    if ((Sd < 119808 || Sd > 120831) && (Sd < 8448 || Sd > 8527))
                        return {
                            char: String.fromCodePoint(Sd)
                        };
                    for (const Ud in hb)
                        if (hb[Ud] === Sd) {
                            Sd = null !== (Td = Ud.codePointAt(0)) && void 0 !== Td ? Td : 0;
                            break;
                        }
                    for (const Vd of ib)
                        if (Sd >= Vd.start && Sd < Vd.start + Vd.len)
                            return {
                                char: String.fromCodePoint(Sd - Vd.start + Vd.offset),
                                variant: Vd.variant,
                                style: Vd.style
                            };
                    return {
                        char: String.fromCodePoint(Sd)
                    };
                }(Od.codePointAt(0));
                return Rd.style || Rd.variant ? (Qd = Rd.char, Rd.variant && (Qd = '\\' + Rd.variant + '{' + Qd + '}'), 'bold' === Rd.style ? Qd = '\\mathbf{' + Qd + '}' : 'italic' === Rd.style ? Qd = '\\mathit{' + Qd + '}' : 'bolditalic' === Rd.style && (Qd = '\\mathbfit{' + Qd + '}'), '\\mathord{' + Qd + '}') : '';
            }(this.mode, this.value) : '';
        }
        bodyToLatex(Ld) {
            return _Ld(this.body, Ld);
        }
        aboveToLatex(Ld) {
            return _Ld(this.above, Ld);
        }
        belowToLatex(Ld) {
            return _Ld(this.below, Ld);
        }
        supsubToLatex(Ld) {
            let Md = '';
            if (void 0 !== this.branch('subscript')) {
                const Nd = _Ld(this.subscript, Ld);
                0 === Nd.length ? Md += '_{}' : 1 === Nd.length ? Md += '_' + Nd : Md += `_{${ Nd }}`;
            }
            if (void 0 !== this.branch('superscript')) {
                const Od = _Ld(this.superscript, Ld);
                0 === Od.length ? Md += '^{}' : 1 === Od.length ? Md += '\u2032' === Od ? '^\\prime ' : '\u2033' === Od ? '^\\doubleprime ' : '^' + Od : Md += `^{${ Od }}`;
            }
            return Md;
        }
        get treeDepth() {
            let Ld = 1,
                Md = this.parent;
            for (; Md;)
                Md = Md.parent, Ld += 1;
            return Ld;
        }
        get inCaptureSelection() {
            let Ld = !1,
                Md = this;
            for (; Md;) {
                if (Md.captureSelection) {
                    Ld = !0;
                    break;
                }
                Md = Md.parent;
            }
            return Ld;
        }
        branch(Ld) {
            if (Id(Ld) && this._branches)
                return this._branches[Ld];
        }
        get branches() {
            if (!this._branches)
                return [];
            const Ld = [];
            for (const Md of Hd)
                this._branches[Md] && Ld.push(Md);
            return Ld;
        }
        createBranch(Ld) {
            return Id(Ld) ? (this._branches ? this._branches[Ld] || (this._branches[Ld] = [this.makeFirstAtom(Ld)]) : this._branches = {
                [Ld]: [this.makeFirstAtom(Ld)]
            }, this.isDirty = !0, this._branches[Ld]) : [];
        }
        get row() {
            return Jd(this.treeBranch) ? this.treeBranch[0] : -1;
        }
        get col() {
            return Jd(this.treeBranch) ? this.treeBranch[1] : -1;
        }
        get body() {
            var Ld;
            return null === (Ld = this._branches) || void 0 === Ld ? void 0 : Ld.body;
        }
        set body(Ld) {
            this.setChildren(Ld, 'body');
        }
        get superscript() {
            var Ld;
            return null === (Ld = this._branches) || void 0 === Ld ? void 0 : Ld.superscript;
        }
        set superscript(Ld) {
            this.setChildren(Ld, 'superscript');
        }
        get subscript() {
            var Ld;
            return null === (Ld = this._branches) || void 0 === Ld ? void 0 : Ld.subscript;
        }
        set subscript(Ld) {
            this.setChildren(Ld, 'subscript');
        }
        get above() {
            var Ld;
            return null === (Ld = this._branches) || void 0 === Ld ? void 0 : Ld.above;
        }
        set above(Ld) {
            this.setChildren(Ld, 'above');
        }
        get below() {
            var Ld;
            return null === (Ld = this._branches) || void 0 === Ld ? void 0 : Ld.below;
        }
        set below(Ld) {
            this.setChildren(Ld, 'below');
        }
        get computedStyle() {
            var Ld;
            if (!this.parent)
                return {
                    ...null !== (Ld = this.style) && void 0 !== Ld ? Ld : {}
                };
            const Md = void 0 !== this.style.verbatimColor,
                Nd = void 0 !== this.style.verbatimBackgroundColor,
                Od = {
                    ...this.parent.computedStyle,
                    ...this.style
                };
            return delete Od.variant, delete Od.variantStyle, Nd || delete Od.verbatimBackgroundColor, Md || delete Od.verbatimColor, Od;
        }
        applyStyle(Ld) {
            this.isDirty = !0, this.style = {
                ...this.style,
                ...Ld
            }, 'none' === this.style.fontFamily && delete this.style.fontFamily, 'auto' === this.style.fontShape && delete this.style.fontShape, 'auto' === this.style.fontSeries && delete this.style.fontSeries, 'none' === this.style.color && (delete this.style.color, delete this.style.verbatimColor), 'none' === this.style.backgroundColor && (delete this.style.backgroundColor, delete this.style.verbatimBackgroundColor), 'auto' === this.style.fontSize && delete this.style.fontSize;
            for (const Md of this.children)
                Md.applyStyle(Ld);
        }
        getInitialBaseElement() {
            let Ld;
            return this.hasEmptyBranch('body') || (Ld = this.body[1].getInitialBaseElement()), null != Ld ? Ld : this;
        }
        getFinalBaseElement() {
            return this.hasEmptyBranch('body') ? this : this.body[this.body.length - 1].getFinalBaseElement();
        }
        isCharacterBox() {
            if ('leftright' === this.type)
                return !1;
            const Ld = this.getInitialBaseElement();
            return /mord/.test(Ld.type);
        }
        hasEmptyBranch(Ld) {
            const Md = this.branch(Ld);
            return !Md || 1 === Md.length;
        }
        setChildren(Ld, Md) {
            if (!Ld)
                return;
            if (!Id(Md))
                return;
            const Nd = [
                this.makeFirstAtom(Md),
                ...Ld
            ];
            this._branches ? this._branches[Md] = Nd : this._branches = {
                [Md]: Nd
            };
            for (const Od of Ld)
                Od.parent = this, Od.treeBranch = Md;
            this.isDirty = !0;
        }
        makeFirstAtom(Ld) {
            const Md = new Kd('first', this.context, {
                mode: this.mode
            });
            return Md.parent = this, Md.treeBranch = Ld, Md;
        }
        addChild(Ld, Md) {
            this.createBranch(Md).push(Ld), this.isDirty = !0, Ld.parent = this, Ld.treeBranch = Md;
        }
        addChildBefore(Ld, Md) {
            const Nd = this.createBranch(Md.treeBranch);
            Nd.splice(Nd.indexOf(Md), 0, Ld), this.isDirty = !0, Ld.parent = this, Ld.treeBranch = Md.treeBranch;
        }
        addChildAfter(Ld, Md) {
            const Nd = this.createBranch(Md.treeBranch);
            Nd.splice(Nd.indexOf(Md) + 1, 0, Ld), this.isDirty = !0, Ld.parent = this, Ld.treeBranch = Md.treeBranch;
        }
        addChildren(Ld, Md) {
            for (const Nd of Ld)
                this.addChild(Nd, Md);
        }
        addChildrenAfter(Ld, Md) {
            const Nd = this.createBranch(Md.treeBranch);
            Nd.splice(Nd.indexOf(Md) + 1, 0, ...Ld), this.isDirty = !0;
            for (const Od of Ld)
                Od.parent = this, Od.treeBranch = Md.treeBranch;
            return Ld[Ld.length - 1];
        }
        removeBranch(Ld) {
            const Md = this.branch(Ld);
            if (Id(Ld) && (this._branches[Ld] = void 0), !Md)
                return [];
            for (const Nd of Md)
                Nd.parent = void 0, Nd.treeBranch = void 0;
            return Md.shift(), this.isDirty = !0, Md;
        }
        removeChild(Ld) {
            if ('first' === Ld.type)
                return;
            const Md = this.branch(Ld.treeBranch),
                Nd = Md.indexOf(Ld);
            Md.splice(Nd, 1), this.isDirty = !0, Ld.parent = void 0, Ld.treeBranch = void 0;
        }
        get siblings() {
            return 'root' === this.type ? [] : this.parent.branch(this.treeBranch);
        }
        get firstSibling() {
            return this.siblings[0];
        }
        get lastSibling() {
            const {
                siblings: Ld
            } = this;
            return Ld[Ld.length - 1];
        }
        get isFirstSibling() {
            return this === this.firstSibling;
        }
        get isLastSibling() {
            return this === this.lastSibling;
        }
        get hasNoSiblings() {
            return 1 === this.siblings.length;
        }
        get leftSibling() {
            const Ld = this.parent.branch(this.treeBranch);
            return Ld[Ld.indexOf(this) - 1];
        }
        get rightSibling() {
            const Ld = this.parent.branch(this.treeBranch);
            return Ld[Ld.indexOf(this) + 1];
        }
        get hasChildren() {
            return Boolean(this._branches && this.children.length > 0);
        }
        get firstChild() {
            return this.children[0];
        }
        get lastChild() {
            const {
                children: Ld
            } = this;
            return Ld[Ld.length - 1];
        }
        get children() {
            if (this._children)
                return this._children;
            if (!this._branches)
                return [];
            const Ld = [];
            for (const Md of Hd)
                if (this._branches[Md])
                    for (const Nd of this._branches[Md])
                        Ld.push(...Nd.children), Ld.push(Nd);
            return this._children = Ld, Ld;
        }
        render(Ld, Md) {
            if ('first' === this.type && !Ld.atomIdsSettings)
                return null;
            const Nd = new vc(Ld, this.style);
            let Od = '';
            'root' === this.type && (Od += ' ML__base'), this.isSelected && (Od += ' ML__selected');
            let Pd = this.createBox(Nd, {
                classes: Od,
                newList: !0 === (null == Md ? void 0 : Md.newList) || 'first' === this.type
            });
            return Pd ? (this.subsupPlacement || !this.superscript && !this.subscript || (Pd = this.attachSupsub(Nd, {
                base: Pd
            })), Pd.wrap(Nd)) : null;
        }
        attachSupsub(Ld, Md) {
            var Nd, Od;
            const Pd = Md.base,
                Qd = this.superscript,
                Rd = this.subscript;
            if (!Qd && !Rd)
                return Pd;
            let Sd = null,
                Td = null;
            const Ud = null !== (Nd = Md.isCharacterBox) && void 0 !== Nd ? Nd : this.isCharacterBox();
            let Vd = 0;
            if (Qd) {
                const Wd = new vc(Ld, void 0, 'superscript');
                Sd = Kd.createBox(Wd, Qd, {
                    newList: !0
                }), Ud || (Vd = Pd.height - Ld.metrics.supDrop * Wd.scalingFactor);
            }
            let Xd, Yd = 0;
            if (Rd) {
                const Zd = new vc(Ld, void 0, 'subscript');
                Td = Kd.createBox(Zd, Rd, {
                    newList: !0
                }), Ud || (Yd = Pd.depth + Ld.metrics.subDrop * Zd.scalingFactor);
            }
            Xd = Ld.isDisplayStyle ? Ld.metrics.sup1 : Ld.isCramped ? Ld.metrics.sup3 : Ld.metrics.sup2;
            const $d = 0.05 / Ld.scalingFactor;
            let ae = null;
            if (Td && Sd) {
                Vd = Math.max(Vd, Xd, Sd.depth + 0.25 * Ld.metrics.xHeight), Yd = Math.max(Yd, Ld.metrics.sub2);
                const be = Ld.metrics.defaultRuleThickness;
                if (Vd - Sd.depth - (Td.height - Yd) < 4 * be) {
                    Yd = 4 * be - (Vd - Sd.depth) + Td.height;
                    const ce = 0.8 * Ld.metrics.xHeight - (Vd - Sd.depth);
                    ce > 0 && (Vd += ce, Yd -= ce);
                }
                const de = this.isExtensibleSymbol && Pd.italic ? -Pd.italic : 0;
                ae = new Yc({
                    individualShift: [{
                            box: Td,
                            shift: Yd,
                            marginLeft: de
                        },
                        {
                            box: Sd,
                            shift: -Vd
                        }
                    ]
                }).wrap(Ld);
            } else
                Td && !Sd ? (Yd = Math.max(Yd, Ld.metrics.sub1, Td.height - 0.3448), ae = new Yc({
                    shift: Yd,
                    children: [{
                        box: Td,
                        marginRight: $d,
                        marginLeft: this.isCharacterBox() ? -(null !== (Od = Pd.italic) && void 0 !== Od ? Od : 0) : 0
                    }]
                })) : !Td && Sd && (Vd = Math.max(Vd, Xd, Sd.depth + 0.10775), ae = new Yc({
                    shift: -Vd,
                    children: [{
                        box: Sd,
                        marginRight: $d
                    }]
                }), ae.wrap(Ld));
            const ee = new Ic(ae, {
                classes: 'msubsup' + (this.isSelected ? ' ML__selected' : '')
            });
            return this.caret && (ee.caret = this.caret), new Ic([
                Pd,
                ee
            ], {
                type: be.type
            });
        }
        attachLimits(Ld, Md) {
            var Nd;
            const Od = this.superscript ? Kd.createBox(new vc(Ld, this.style, 'superscript'), this.superscript, {
                    newList: !0
                }) : null,
                Pd = this.subscript ? Kd.createBox(new vc(Ld, this.style, 'subscript'), this.subscript, {
                    newList: !0
                }) : null;
            return Od || Pd ? function(Qd, Rd) {
                var Sd, Td, Ud, Vd, Wd;
                const Xd = Qd.metrics,
                    Yd = new Ic(Rd.base),
                    Zd = null !== (Sd = Rd.baseShift) && void 0 !== Sd ? Sd : 0,
                    $d = null !== (Td = Rd.slant) && void 0 !== Td ? Td : 0;
                let ae = 0,
                    be = 0;
                Rd.above && (ae = null !== (Ud = Rd.aboveShift) && void 0 !== Ud ? Ud : Math.max(Xd.bigOpSpacing1, Xd.bigOpSpacing3 - Rd.above.depth)), Rd.below && (be = null !== (Vd = Rd.belowShift) && void 0 !== Vd ? Vd : Math.max(Xd.bigOpSpacing2, Xd.bigOpSpacing4 - Rd.below.height));
                let ce = null;
                if (Rd.below && Rd.above) {
                    const de = Xd.bigOpSpacing5 + Rd.below.height + Rd.below.depth + be + Yd.depth + Zd;
                    ce = new Yc({
                        bottom: de,
                        children: [
                            Xd.bigOpSpacing5,
                            {
                                box: Rd.below,
                                marginLeft: -$d,
                                classes: ['ML__center']
                            },
                            be,
                            {
                                box: Yd,
                                classes: ['ML__center']
                            },
                            ae,
                            {
                                box: Rd.above,
                                marginLeft: $d,
                                classes: ['ML__center']
                            },
                            Xd.bigOpSpacing5
                        ]
                    }).wrap(Qd);
                } else if (Rd.below && !Rd.above)
                    ce = new Yc({
                        top: Yd.height - Zd,
                        children: [
                            Xd.bigOpSpacing5,
                            {
                                box: Rd.below,
                                marginLeft: -$d,
                                classes: ['ML__center']
                            },
                            be,
                            {
                                box: Yd,
                                classes: ['ML__center']
                            }
                        ]
                    }).wrap(Qd);
                else if (!Rd.below && Rd.above) {
                    const ee = Yd.depth + Zd;
                    ce = new Yc({
                        bottom: ee,
                        children: [{
                                box: Yd,
                                classes: ['ML__center']
                            },
                            ae,
                            {
                                box: Rd.above,
                                marginLeft: $d,
                                classes: ['ML__center']
                            },
                            Xd.bigOpSpacing5
                        ]
                    }).wrap(Qd);
                } else {
                    const fe = Yd.depth + Zd;
                    ce = new Yc({
                        bottom: fe,
                        children: [{
                                box: Yd
                            },
                            Xd.bigOpSpacing5
                        ]
                    }).wrap(Qd);
                }
                return new Ic(ce, {
                    type: null !== (Wd = fe.type) && void 0 !== Wd ? Wd : 'mop'
                });
            }(Ld, {
                ...Md,
                above: Od,
                below: Pd,
                type: null !== (Nd = null == Md ? void 0 : Md.type) && void 0 !== Nd ? Nd : 'mop'
            }) : Md.base.wrap(Ld);
        }
        bind(Ld, Md) {
            if (!Md || Ld.isPhantom || '\u200B' === this.value)
                return Md;
            let Nd = this.parent;
            for (; Nd && !Nd.captureSelection;)
                Nd = Nd.parent;
            return (null == Nd ? void 0 : Nd.captureSelection) || (this.id || (this.id = Ld.makeID()), Md.atomID = this.id), Md;
        }
        createMathfieldBox(Ld, Md, Nd) {
            const Od = new Gd(Nd, Md, {
                type: 'mathfield',
                mode: this.mode,
                maxFontSize: Ld.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: Ld.letterShapeStyle,
                    fontSize: Math.max(1, Ld.size + Ld.mathstyle.sizeDelta)
                },
                classes: ''
            });
            return Ld.isTight && (Od.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (Od.italic = 0), Od.right = Od.italic, this.bind(Ld, Od), _Rc(Od, {
                type: 'mord'
            });
        }
        createBox(Ld, Md) {
            var Nd, Od, Pd, Qd;
            const Rd = null !== (Nd = this.value) && void 0 !== Nd ? Nd : this.body,
                Sd = function(Td) {
                    return Dc.includes(Td);
                }(this.type) ? this.type : void 0;
            let Td = null !== (Od = null == Md ? void 0 : Md.classes) && void 0 !== Od ? Od : '';
            'text' === this.mode && (Td += ' ML__text');
            const Ud = 'string' == typeof Rd || void 0 === Rd ? new Ic(null !== (Pd = Rd) && void 0 !== Pd ? Pd : null, {
                type: Sd,
                mode: this.mode,
                maxFontSize: Ld.scalingFactor,
                style: {
                    variant: 'normal',
                    ...this.style,
                    letterShapeStyle: Ld.letterShapeStyle,
                    fontSize: Math.max(1, Ld.size + Ld.mathstyle.sizeDelta)
                },
                classes: Td,
                newList: null == Md ? void 0 : Md.newList
            }) : null !== (Qd = Kd.createBox(Ld, Rd, {
                type: Sd,
                mode: this.mode,
                style: this.style,
                classes: Td,
                newList: null == Md ? void 0 : Md.newList
            })) && void 0 !== Qd ? Qd : new Ic(null);
            return Ld.isTight && (Ud.isTight = !0), 'math' === this.mode && 'main' !== this.style.variant || (Ud.italic = 0), Ud.right = Ud.italic, this.bind(Ld, Ud), this.caret && (this.superscript || this.subscript || (Ud.caret = this.caret)), Ud;
        }
        isDigit() {
            var Ld;
            return 'mord' === this.type && this.value ? /^[\d,.]$/.test(this.value) : 'group' === this.type && 2 === (null === (Ld = this.body) || void 0 === Ld ? void 0 : Ld.length) && 'first' === this.body[0].type && ',' === this.body[1].value;
        }
        asDigit() {
            var Ld;
            return 'mord' === this.type && this.value && /^[\d,.]$/.test(this.value) ? this.value : 'group' === this.type && 2 === (null === (Ld = this.body) || void 0 === Ld ? void 0 : Ld.length) && 'first' === this.body[0].type && ',' === this.body[1].value ? '.' : '';
        }
        constructor(Ld, Md, Nd) {
            var Od, Pd, Qd, Rd, Sd, Td;
            this.id = void 0, this.verbatimLatex = void 0, this._isDirty = !1, this._changeCounter = 0, this.subsupPlacement = void 0, this.explicitSubsupPlacement = !1, this.skipBoundary = !1, this.captureSelection = !1, this.type = Ld, this.context = Md, 'string' == typeof(null == Nd ? void 0 : Nd.value) && (this.value = Nd.value), this.command = null !== (Pd = null !== (Od = null == Nd ? void 0 : Nd.command) && void 0 !== Od ? Od : this.value) && void 0 !== Pd ? Pd : '', this.mode = null !== (Qd = null == Nd ? void 0 : Nd.mode) && void 0 !== Qd ? Qd : 'math', this.isFunction = null !== (Rd = null == Nd ? void 0 : Nd.isFunction) && void 0 !== Rd && Rd, this.subsupPlacement = null == Nd ? void 0 : Nd.limits, this.style = null !== (Sd = null == Nd ? void 0 : Nd.style) && void 0 !== Sd ? Sd : {}, this.displayContainsHighlight = null !== (Td = null == Nd ? void 0 : Nd.displayContainsHighlight) && void 0 !== Td && Td, (null == Nd ? void 0 : Nd.serialize) && (Kd.customSerializer[Nd.command] = Nd.serialize);
        }
    }

    function _Ld(Md, Nd) {
        if (!Md || 0 === Md.length)
            return '';
        if ('first' === Md[0].type) {
            if (1 === Md.length)
                return '';
            Md = Md.slice(1);
        }
        return 0 === Md.length ? '' : Cd(Ac(Md, 'cssClass').map(Od => Cd(Ac(Od, 'color').map(Pd => Cd(function(Qd) {
            const Rd = [];
            let Sd = [],
                Td = 'NONE';
            for (const Ud of Qd)
                'first' !== Ud.type && (Ud.mode !== Td ? (Sd.length > 0 && Rd.push(Sd), Sd = [Ud], Td = Ud.mode) : Sd.push(Ud));
            return Sd.length > 0 && Rd.push(Sd), Rd;
        }(Pd).map(Qd => zc.serialize(Qd, Nd)))))));
    }

    function _Md(Nd, Od, Pd) {
        var Qd, Rd, Sd, Td;

        function Ud(Vd) {
            return 'text' === Vd.mode;
        }
        if (!Od || 0 === Od.length)
            return null;
        const Vd = new vc(Nd, null == Pd ? void 0 : Pd.style),
            Wd = !i.atomIdsSettings || !i.atomIdsSettings.groupNumbers;
        let Xd, Yd = [],
            Zd = null !== (d = null == Pd ? void 0 : Pd.newList) && void 0 !== d && d;
        if (1 === Od.length) {
            const $d = Od[0],
                ae = Nd.render(i, {
                    newList: Zd
                });
            Pd && (m && Nd.isSelected && Pd.selected(!0), Yd = [Pd]);
        } else {
            let be = '',
                ce = !0;
            for (const de of Od) {
                (null === (e = i.atomIdsSettings) || void 0 === e ? void 0 : e.groupNumbers) && be && (ce && d.isDigit() || !ce && Ud(d)) && (i.atomIdsSettings.overrideID = be);
                const ee = d.render(i, {
                    newList: Zd
                });
                i.atomIdsSettings && (i.atomIdsSettings.overrideID = void 0), Od && (Zd = 'group' === d.type && !d.boxType, (null === (f = i.atomIdsSettings) || void 0 === f ? void 0 : f.groupNumbers) && ((d.isDigit() || Ud(d)) && (be && ce === d.isDigit() || (ce = d.isDigit(), be = null !== (g = d.id) && void 0 !== g ? g : '')), !be || (d.isDigit() || Ud(d)) && d.hasEmptyBranch('superscript') && d.hasEmptyBranch('subscript') || (be = '')), m && d.isSelected && Od.selected(!0), Yd.push(Od));
            }
        }
        return 0 === Yd.length ? null : (Pd || i.isTight || Yd.length > 1 ? (Xd = new Ic(Yd, {
            isTight: i.isTight,
            ...null != Pd ? Pd : {}
        }), Xd.isSelected = Yd.every(de => de.isSelected)) : Xd = Yd[0], Xd.wrap(i).wrap(Nd));
    }
    Kd.customSerializer = {};
    class Xd extends Kd {
        static fromJson(Yd, Zd) {
            return new Xd(Yd.command, Yd.body, Zd, {
                accentChar: Yd.accentChar,
                svgAccent: Yd.svgAccent,
                style: Yd.style
            });
        }
        toJson() {
            return {
                ...super.toJson(),
                accentChar: this.accent,
                svgAccent: this.svgAccent
            };
        }
        render(Yd) {
            var Zd;
            const $d = new vc(Yd, this.style, 'cramp'),
                ae = null !== (Zd = Kd.createBox($d, this.body)) && void 0 !== Zd ? Zd : new Ic(null);
            let be = 0;
            !this.hasEmptyBranch('body') && 2 === this.body.length && this.body[1].isCharacterBox() && (be = ae.skew);
            let ce, de = Math.min(ae.height, 0.431);
            if (this.svgAccent)
                ce = Vc(this.svgAccent), de = $d.metrics.bigOpSpacing1 - de;
            else if (this.accent) {
                const ee = new Ic(this.accent, {
                    fontFamily: 'Main-Regular'
                });
                ee.italic = 0;
                const fe = 8407 === this.accent ? ' ML__accent-vec' : '';
                ce = new Ic(new Ic(ee), {
                    classes: 'ML__accent-body' + fe
                });
            }
            ce = new Yc({
                shift: 0,
                children: [{
                        box: new Ic(ae)
                    },
                    -de,
                    {
                        box: ce,
                        marginLeft: ae.left + 2 * be,
                        classes: ['ML__center']
                    }
                ]
            });
            const ge = new Ic(ce, {
                newList: !0,
                type: 'mord'
            });
            return this.caret && (ge.caret = this.caret), this.bind($d, ge.wrap($d)), this.attachSupsub($d, {
                base: ge
            });
        }
        constructor(Yd, Zd, $d, ae) {
            super('accent', $d, {
                command: Yd,
                style: ae.style
            }), ae.accentChar ? this.accent = ae.accentChar : this.svgAccent = null == ae ? void 0 : ae.svgAccent, this.body = Zd, this.skipBoundary = !0;
        }
    }
    const Yd = {
            '(': ')',
            '{': '}',
            '[': ']',
            '|': '|',
            '\\lbrace': '\\rbrace',
            '\\lparen': '\\rparen',
            '\\{': '\\}',
            '\\langle': '\\rangle',
            '\\lfloor': '\\rfloor',
            '\\lceil': '\\rceil',
            '\\vert': '\\vert',
            '\\lvert': '\\rvert',
            '\\Vert': '\\Vert',
            '\\lVert': '\\rVert',
            '\\lbrack': '\\rbrack',
            '\\ulcorner': '\\urcorner',
            '\\llcorner': '\\lrcorner',
            '\\lgroup': '\\rgroup',
            '\\lmoustache': '\\rmoustache'
        },
        Zd = Object.fromEntries(Object.entries(Yd).map(([$d, ae]) => [
            ae,
            $d
        ]));

    function $d(ae) {
        var be;
        return null !== (be = {
            '[': 91,
            ']': 93,
            '(': 40,
            ')': 41,
            '\\mid': 8739,
            '|': 8739,
            '\u2223': 8739,
            '\u2225': 8741,
            '\\|': 8739,
            '\\{': 123,
            '\\}': 125,
            '\\lbrace': 123,
            '\\rbrace': 125,
            '\\lparen': 40,
            '\\rparen': 41,
            '\\lbrack': 91,
            '\\rbrack': 93,
            '\\vert': 8739,
            '\\lvert': 8739,
            '\\mvert': 8739,
            '\\rvert': 8739,
            '\\Vert': 8741,
            '\\lVert': 8741,
            '\\mVert': 8741,
            '\\rVert': 8741,
            '\\parallel': 8741,
            '\\shortparallel': 8741,
            '\\langle': 10216,
            '\\rangle': 10217,
            '\\lfloor': 8970,
            '\\rfloor': 8971,
            '\\lceil': 8968,
            '\\rceil': 8969,
            '\\ulcorner': 9484,
            '\\urcorner': 9488,
            '\\llcorner': 9492,
            '\\lrcorner': 9496,
            '\\lgroup': 10222,
            '\\rgroup': 10223,
            '\\lmoustache': 9136,
            '\\rmoustache': 9137,
            '\\surd': 8730
        } [ae]) && void 0 !== be ? be : ae.codePointAt(0);
    }

    function be(ce, de, ee, fe, ge) {
        const he = new vc(fe, null == ge ? void 0 : ge.style, 'textstyle'),
            ie = new Ic($d(ce), {
                fontFamily: 'Size' + de + '-Regular',
                classes: 'ML__delim-size' + de
            }).wrap(f);
        return ee && g.setTop(0.25 * (1 - f.scalingFactor)), g;
    }

    function ee(fe, ge, he, ie, je) {
        var ke;
        let le, me, ne, oe;
        le = ne = oe = $d(fe), me = null;
        let pe = 'Size1-Regular';
        '\\vert' === fe || '\\lvert' === fe || '\\rvert' === fe || '\\mvert' === fe || '\\mid' === fe ? ne = le = oe = 8739 : '\\Vert' === fe || '\\lVert' === fe || '\\rVert' === fe || '\\mVert' === fe || '\\|' === fe ? ne = le = oe = 8741 : '\\uparrow' === fe ? ne = oe = 9168 : '\\Uparrow' === fe ? ne = oe = 8214 : '\\downarrow' === fe ? le = ne = 9168 : '\\Downarrow' === fe ? le = ne = 8214 : '\\updownarrow' === fe ? (le = 8593, ne = 9168, oe = 8595) : '\\Updownarrow' === fe ? (le = 8657, ne = 8214, oe = 8659) : '[' === fe || '\\lbrack' === fe ? (le = 9121, ne = 9122, oe = 9123, pe = 'Size4-Regular') : ']' === fe || '\\rbrack' === fe ? (le = 9124, ne = 9125, oe = 9126, pe = 'Size4-Regular') : '\\lfloor' === fe || '\u230A' === fe ? (ne = le = 9122, oe = 9123, pe = 'Size4-Regular') : '\\lceil' === fe || '\u2308' === fe ? (le = 9121, ne = oe = 9122, pe = 'Size4-Regular') : '\\rfloor' === fe || '\u230B' === fe ? (ne = le = 9125, oe = 9126, pe = 'Size4-Regular') : '\\rceil' === fe || '\u2309' === fe ? (le = 9124, ne = oe = 9125, pe = 'Size4-Regular') : '(' === fe || '\\lparen' === fe ? (le = 9115, ne = 9116, oe = 9117, pe = 'Size4-Regular') : ')' === fe || '\\rparen' === fe ? (le = 9118, ne = 9119, oe = 9120, pe = 'Size4-Regular') : '\\{' === fe || '\\lbrace' === fe ? (le = 9127, me = 9128, oe = 9129, ne = 9130, pe = 'Size4-Regular') : '\\}' === fe || '\\rbrace' === fe ? (le = 9131, me = 9132, oe = 9133, ne = 9130, pe = 'Size4-Regular') : '\\lgroup' === fe || '\u27EE' === fe ? (le = 9127, oe = 9129, ne = 9130, pe = 'Size4-Regular') : '\\rgroup' === fe || '\u27EF' === fe ? (le = 9131, oe = 9133, ne = 9130, pe = 'Size4-Regular') : '\\lmoustache' === fe || '\u23B0' === fe ? (le = 9127, oe = 9133, ne = 9130, pe = 'Size4-Regular') : '\\rmoustache' === fe || '\u23B1' === fe ? (le = 9131, oe = 9129, ne = 9130, pe = 'Size4-Regular') : '\\surd' === fe ? (le = 57345, oe = 9143, ne = 57344, pe = 'Size4-Regular') : '\\ulcorner' === fe ? (le = 9484, ne = oe = 32) : '\\urcorner' === fe ? (le = 9488, ne = oe = 32) : '\\llcorner' === fe ? (oe = 9492, ne = le = 32) : '\\lrcorner' === fe && (le = 9496, ne = le = 32);
        const qe = nc(le, pe),
            re = q.height + q.depth,
            se = nc(ne, pe),
            te = se.height + se.depth,
            ue = nc(oe, pe),
            ve = ue.height + ue.depth;
        let we = 0,
            xe = 1;
        if (null !== me) {
            const ye = nc(me, pe);
            we = fe.height + fe.depth, xe = 2;
        }
        const ze = re + ve + we,
            Ae = Math.max(0, Math.ceil((ge - N) / (xe * te))),
            Be = N + Q * xe * te;
        let Ce = 0.25;
        he && (Ce *= ie.scalingFactor);
        const De = R / 2 - Ce,
            Ee = [];
        Ee.push({
            box: new Ic(oe, {
                fontFamily: pe
            })
        }), Ee.push(-0.008);
        const Fe = new Ic(ne, {
            fontFamily: pe
        });
        if (null === me)
            for (let Ge = 0; Ge < Q; Ge++)
                Ee.push({
                    box: Fe
                });
        else {
            for (let He = 0; He < Q; He++)
                Ee.push({
                    box: Fe
                });
            Ee.push(-0.008), Ee.push({
                box: new Ic(me, {
                    fontFamily: pe
                })
            }), Ee.push(-0.008);
            for (let Ie = 0; Ie < Q; Ie++)
                Ee.push({
                    box: Fe
                });
        }
        Ee.push(-0.008), Ee.push({
            box: new Ic(le, {
                fontFamily: pe
            })
        });
        let Ge = '';
        'Size1-Regular' === pe ? Ge = ' delim-size1' : 'Size4-Regular' === pe && (Ge = ' delim-size4');
        const He = new Yc({
            bottom: De,
            children: Ee
        }, {
            classes: Ge
        });
        return new Ic(He, {
            ...null != je ? je : {},
            classes: (null !== (f = null == je ? void 0 : je.classes) && void 0 !== f ? f : '') + ' ML__delim-mult'
        });
    }
    const ue = new Set([
            '(',
            ')',
            '\\lparen',
            '\\rparen',
            '[',
            ']',
            '\\lbrack',
            '\\rbrack',
            '\\{',
            '\\}',
            '\\lbrace',
            '\\rbrace',
            '\\lfloor',
            '\\rfloor',
            '\\lceil',
            '\\rceil',
            '\\surd',
            '\u230A',
            '\u230B',
            '\u2308',
            '\u2309'
        ]),
        ve = new Set([
            '\\uparrow',
            '\\downarrow',
            '\\updownarrow',
            '\\Uparrow',
            '\\Downarrow',
            '\\Updownarrow',
            '|',
            '\\|',
            '\\vert',
            '\\Vert',
            '\\lvert',
            '\\rvert',
            '\\lVert',
            '\\rVert',
            '\\mvert',
            '\\mid',
            '\\lgroup',
            '\\rgroup',
            '\\lmoustache',
            '\\rmoustache',
            '\u27EE',
            '\u27EF',
            '\u23B0',
            '\u23B1'
        ]),
        we = new Set([
            '<',
            '>',
            '\\langle',
            '\\rangle',
            '/',
            '\\backslash',
            '\\lt',
            '\\gt'
        ]),
        xe = [
            0,
            1.2,
            1.8,
            2.4,
            3
        ],
        ye = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            }
        ],
        ze = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'stack'
            }
        ],
        Ae = [{
                type: 'small',
                mathstyle: 'scriptscriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'scriptstyle'
            },
            {
                type: 'small',
                mathstyle: 'textstyle'
            },
            {
                type: 'large',
                size: 1
            },
            {
                type: 'large',
                size: 2
            },
            {
                type: 'large',
                size: 3
            },
            {
                type: 'large',
                size: 4
            },
            {
                type: 'stack'
            }
        ];

    function Be(Ce, De, Ee, Fe, Ge, He) {
        var Ie;
        if (!De || 0 === De.length || '.' === De)
            return _Ie(Ge, Ce, Ce);
        let Je;
        '<' === De || '\\lt' === De ? De = '\\langle' : '>' !== De && '\\gt' !== De || (De = '\\rangle'), Je = we.has(De) ? ye : ue.has(De) ? Ae : ze;
        const Ke = function(Le, Me, Ne, Oe) {
                for (let Pe = {
                        '-4': 0,
                        '-3': 1,
                        0: 2
                    } [Oe.mathstyle.sizeDelta]; Pe < Ne.length && 'stack' !== Ne[Pe].type; Pe++) {
                    const Qe = nc(Le, 'small' === (Ge = Ne[Pe]).type ? 'Main-Regular' : 'large' === Ge.type ? 'Size' + Ge.size + '-Regular' : 'Size4-Regular');
                    if (Qe.defaultMetrics)
                        return {
                            type: 'small',
                            mathstyle: 'scriptstyle'
                        };
                    let Re = Qe.height + Qe.depth;
                    if ('small' === Ne[Pe].type && ('scriptscriptstyle' === Ne[Pe].mathstyle ? Re *= lc[Math.max(1, Oe.size - 2)] : 'scriptstyle' === Ne[Pe].mathstyle && (Re *= lc[Math.max(1, Oe.size - 1)])), Re > Me)
                        return Ne[Pe];
                }
                var Re;
                return Ne[Ne.length - 1];
            }($d(De), Ee, Je, Ge),
            Le = new vc(Ge, null == He ? void 0 : He.style, i.mathstyle);
        return 'small' === i.type ? function(Me, Ne, Oe, Pe) {
            const Qe = new Ic($d(Me), {
                fontFamily: 'Main-Regular'
            }).wrap(Ne, Pe);
            return Oe && Qe.setTop(0.25 * (1 - Ne.scalingFactor)), Qe;
        }(De, m, Fe, {
            type: Ce,
            classes: 'ML__small-delim ' + (null !== (g = null == He ? void 0 : He.classes) && void 0 !== g ? g : '')
        }) : 'large' === i.type ? be(De, i.size, Fe, m, {
            ...He,
            type: Ce
        }) : ee(De, Ee, Fe, m, {
            ...He,
            type: Ce
        });
    }

    function Fe(Ge, He, Ie, Je, Ke, Le) {
        if ('.' === He)
            return _Ie(Ke, Ge, null == Le ? void 0 : Le.classes);
        const Me = 0.25 * Ke.scalingFactor,
            Ne = Math.max(Ie - g, Je + g);
        return Be(Ge, He, Math.max(h / 500 * 901, 2 * h - 0.5), !0, Ke, Le);
    }

    function _Ie(Je, Ke, Le) {
        const Me = new vc(Je, void 0, 'textstyle');
        return new Ic(null, {
            classes: ' nulldelimiter ' + (null != Le ? Le : ''),
            type: Ke
        }).wrap(d);
    }
    class Ke extends Kd {
        static fromJson(Le, Me) {
            return new Ke(Le.command, Me, Le);
        }
        toJson() {
            const Le = {};
            return this.skipBoundary || (Le.skipBoundary = !1), this.subsupPlacement && (Le.subsupPlacement = this.subsupPlacement), this.svgAbove && (Le.svgAbove = this.svgAbove), this.svgBelow && (Le.svgBelow = this.svgBelow), this.svgBody && (Le.svgBody = this.svgBody), 'mord' !== this.boxType && (Le.boxType = this.boxType), this.paddedBody && (Le.paddedBody = !0), this.paddedLabels && (Le.paddedLabels = !0), {
                ...super.toJson(),
                ...Le
            };
        }
        render(Le) {
            let Me = this.svgBody ? Vc(this.svgBody) : Kd.createBox(Le, this.body, {
                newList: !0
            });
            const Ne = new vc(Le, this.style, 'scriptstyle');
            let Oe = null;
            this.svgAbove ? Oe = Vc(this.svgAbove) : this.above && (Oe = Kd.createBox(Ne, this.above, {
                newList: !0
            }));
            let Pe = null;
            this.svgBelow ? Pe = Vc(this.svgBelow) : this.below && (Pe = Kd.createBox(Ne, this.below, {
                newList: !0
            })), this.paddedBody && (Me = new Ic([
                _Ie(Le, 'mopen'),
                Me,
                _Ie(Le, 'mclose')
            ], {
                newList: !0
            }));
            let Qe = function(Re, Se) {
                if (!Se.base)
                    return null;
                if (!Se.above && !Se.below) {
                    const Te = new Ic(Se.base, {
                        type: Se.type
                    });
                    return Te.setStyle('position', 'relative'), Te;
                }
                let Ue = 0;
                Se.above && (Ue = -Se.above.depth + Te.metrics.bigOpSpacing2);
                let Ve = null;
                const We = Se.base,
                    Xe = ['ML__center'];
                if (Se.paddedAboveBelow && Xe.push('ML__label_padding'), Se.below && Se.above) {
                    const Ye = Te.metrics.bigOpSpacing5 + Se.below.height + Se.below.depth + We.depth + 0;
                    Ve = new Yc({
                        bottom: Ye,
                        children: [
                            Te.metrics.bigOpSpacing5,
                            {
                                box: Se.below,
                                classes: Xe
                            },
                            {
                                box: We,
                                classes: ['ML__center']
                            },
                            Ue,
                            {
                                box: Se.above,
                                classes: Xe
                            },
                            Te.metrics.bigOpSpacing5
                        ]
                    });
                } else
                    Se.below ? Ve = new Yc({
                        top: We.height - 0,
                        children: [
                            Te.metrics.bigOpSpacing5,
                            {
                                box: Se.below,
                                classes: Xe
                            },
                            {
                                box: We,
                                classes: ['ML__center']
                            }
                        ]
                    }) : Se.above && (Ve = new Yc({
                        bottom: We.depth + 0,
                        children: [{
                                box: We,
                                classes: ['ML__center']
                            },
                            Ue,
                            {
                                box: Se.above,
                                classes: Xe
                            },
                            Te.metrics.bigOpSpacing5
                        ]
                    }));
                return new Ic(Ve, {
                    type: Se.type
                });
            }(Le, {
                base: Me,
                above: Oe,
                below: Pe,
                type: 'mbin' === this.boxType || 'mrel' === this.boxType ? this.boxType : 'mord',
                paddedAboveBelow: this.paddedLabels
            });
            return Qe ? (Qe = 'over-under' === this.subsupPlacement ? this.attachLimits(Le, {
                base: Qe,
                type: Qe.type
            }) : this.attachSupsub(Le, {
                base: Qe
            }), this.caret && (Qe.caret = this.caret), this.bind(Le, Qe)) : null;
        }
        constructor(Le, Me, Ne) {
            var Oe, Pe, Qe, Re;
            super('overunder', Me, {
                command: Le,
                serialize: Ne.serialize,
                style: Ne.style
            }), this.skipBoundary = null === (Oe = Ne.skipBoundary) || void 0 === Oe || Oe, this.subsupPlacement = Ne.supsubPlacement, this.body = Ne.body, this.svgAbove = Ne.svgAbove, this.svgBelow = Ne.svgBelow, this.svgBody = Ne.svgBody, this.above = Ne.above, this.below = Ne.below, this.boxType = null !== (Pe = Ne.boxType) && void 0 !== Pe ? Pe : 'mord', this.paddedBody = null !== (Qe = Ne.paddedBody) && void 0 !== Qe && Qe, this.paddedLabels = null !== (Re = Ne.paddedLabels) && void 0 !== Re && Re;
        }
    }
    class Le extends Kd {
        static fromJson(Me, Ne) {
            return new Le(Me.body, Ne, Me);
        }
        toJson() {
            const Me = {};
            return this.mathstyleName && (Me.mathstyleName = this.mathstyleName), this.latexOpen && (Me.latexOpen = this.latexOpen), this.latexClose && (Me.latexClose = this.latexClose), this.cssId && (Me.cssId = this.cssId), this.htmlData && (Me.htmlData = this.htmlData), this.htmlStyle && (Me.htmlStyle = this.htmlStyle), this.customClass && (Me.customClass = this.customClass), this.boxType && (Me.boxType = this.boxType), this.captureSelection && (Me.captureSelection = !0), this.changeMode && (Me.changeMode = !0), {
                ...super.toJson(),
                ...Me
            };
        }
        render(Me) {
            const Ne = new vc(Me, this.style, this.mathstyleName),
                Oe = Kd.createBox(Ne, this.body, {
                    type: this.boxType,
                    classes: this.customClass,
                    mode: this.mode,
                    style: {
                        backgroundColor: this.style.backgroundColor
                    },
                    newList: !this.boxType
                });
            return Oe ? (this.cssId && (Oe.cssId = this.cssId), this.htmlData && (Oe.htmlData = this.htmlData), this.htmlStyle && (Oe.htmlStyle = this.htmlStyle), this.caret && (Oe.caret = this.caret), this.bind(Me, Oe)) : null;
        }
        serialize(Me) {
            let Ne = this.bodyToLatex(Me);
            return 'string' == typeof this.latexOpen && (Ne = this.latexOpen + Ne + this.latexClose), this.htmlData && (Ne = `\\htmlData{${ this.htmlData }}{${ Ne }}`), this.htmlStyle && (Ne = `\\htmlStyle{${ this.htmlStyle }}{${ Ne }}`), this.customClass && (Ne = `\\class{${ this.customClass }}{${ Ne }}`), this.cssId && (Ne = `\\cssId{${ this.cssId }}{${ Ne }}`), Ne;
        }
        constructor(Me, Ne, Oe) {
            var Pe, Qe, Re;
            super('group', Ne, {
                command: null == Oe ? void 0 : Oe.command,
                mode: null !== (Pe = null == Oe ? void 0 : Oe.mode) && void 0 !== Pe ? Pe : 'math',
                serialize: null == Oe ? void 0 : Oe.serialize,
                style: null == Oe ? void 0 : Oe.style
            }), this.body = Me, this.mathstyleName = null == Oe ? void 0 : Oe.mathstyleName, this.latexOpen = null == Oe ? void 0 : Oe.latexOpen, this.latexClose = null == Oe ? void 0 : Oe.latexClose, this.cssId = null == Oe ? void 0 : Oe.cssId, this.htmlData = null == Oe ? void 0 : Oe.htmlData, this.htmlStyle = null == Oe ? void 0 : Oe.htmlStyle, this.customClass = null == Oe ? void 0 : Oe.customClass, this.boxType = null == Oe ? void 0 : Oe.boxType, this.skipBoundary = !0, this.captureSelection = null !== (Qe = null == Oe ? void 0 : Oe.captureSelection) && void 0 !== Qe && Qe, this.changeMode = null !== (Re = null == Oe ? void 0 : Oe.changeMode) && void 0 !== Re && Re, this.displayContainsHighlight = !1, Me && 1 === Me.length && ',' === Me[0].command && (this.captureSelection = !0);
        }
    }
    class Me extends Kd {
        static fromJson(Ne, Oe) {
            return new Me(Ne.command, Ne.style, Oe, Ne.width);
        }
        toJson() {
            const Ne = {};
            return this.width && (Ne.width = this.width), {
                ...super.toJson(),
                ...Ne
            };
        }
        render(Ne) {
            var Oe;
            let Pe;
            if (this.width)
                Pe = new Ic(null, {
                    classes: 'mspace'
                }), Pe.left = sc(this.width.glue);
            else {
                const Qe = null !== (Oe = {
                    '\\qquad': 'qquad',
                    '\\quad': 'quad',
                    '\\enspace': 'enspace',
                    '\\;': 'thickspace',
                    '\\:': 'mediumspace',
                    '\\,': 'thinspace',
                    '\\!': 'negativethinspace'
                } [this.command]) && void 0 !== Oe ? Oe : 'mediumspace';
                Pe = new Ic(null, {
                    classes: Qe
                });
            }
            return Pe = this.bind(Qe, Pe), this.caret && (Pe.caret = this.caret), Pe;
        }
        serialize(Ne) {
            var Oe;
            let Pe = null !== (Oe = this.command) && void 0 !== Oe ? Oe : '';
            return '\\hspace' === this.command || '\\hspace*' === this.command ? Number.isFinite(this.width) ? Pe += `{${ this.width }em'}` : Pe += '{0pt}' : Number.isFinite(this.width) && (Pe += ` ${ this.width }em`), Pe;
        }
        constructor(Ne, Oe, Pe, Qe) {
            super('spacing', Pe, {
                command: Ne,
                style: Oe
            }), this.width = Qe;
        }
    }
    class Ne extends Kd {
        static fromJson(Oe, Pe) {
            var Qe;
            return new Ne(null !== (Qe = Oe.variant) && void 0 !== Qe ? Qe : '', Oe.body, Pe, Oe);
        }
        toJson() {
            const Oe = super.toJson();
            return this.variant && (Oe.variant = this.variant), this.leftDelim && (Oe.leftDelim = this.leftDelim), this.rightDelim && (Oe.rightDelim = this.rightDelim), Oe;
        }
        serialize(Oe) {
            var Pe, Qe;
            const Re = this.matchingRightDelim();
            return 'left...right' === this.variant ? Cd([
                '\\left' + (null !== (Pe = this.leftDelim) && void 0 !== Pe ? Pe : '.'),
                this.bodyToLatex(Oe),
                '\\right' + Re
            ]) : 'mleft...mright' === this.variant ? Cd([
                '\\mleft' + (null !== (Qe = this.leftDelim) && void 0 !== Qe ? Qe : '.'),
                this.bodyToLatex(Oe),
                '\\mright' + Re
            ]) : Cd([
                this.leftDelim && '.' !== this.leftDelim ? this.leftDelim : '',
                this.bodyToLatex(Oe),
                Re
            ]);
        }
        matchingRightDelim() {
            var Oe, Pe;
            if (this.rightDelim && '?' !== this.rightDelim)
                return this.rightDelim;
            const Qe = null !== (Oe = this.leftDelim) && void 0 !== Oe ? Oe : '.';
            return null !== (Pe = Yd[Qe]) && void 0 !== Pe ? Pe : Qe;
        }
        render(Oe) {
            var Pe, Qe, Re;
            const Se = new vc(Oe, this.style),
                Te = new vc(Oe, this.style, 'textstyle'),
                Ue = null !== (Pe = Kd.createBox(Se, this.body, {
                    newList: !0
                })) && void 0 !== Pe ? Pe : new Ic(null, {
                    newList: !0
                }),
                Ve = Ue.height / Te.scalingFactor,
                We = Ue.depth / Te.scalingFactor,
                Xe = [];
            if (this.leftDelim && Xe.push(this.bind(Te, Fe('mopen', this.leftDelim, Ve, We, Te, {
                    classes: 'ML__open' + (this.containsCaret ? ' ML__contains-caret' : ''),
                    mode: this.mode,
                    style: this.style
                }))), Ue) {
                if (Ue.children)
                    for (let Ye = 0; Ye < Ue.children.length; Ye++) {
                        const Ze = Ue.children[Ye];
                        if (Ze.delim) {
                            const $e = Ze.caret;
                            Ue.children[Ye] = this.bind(Se, Fe('minner', Ze.delim, Ve, We, Se)), Ue.children[Ye].caret = $e;
                        }
                    }
                Xe.push(Ue);
            }
            if (this.rightDelim) {
                let $e = this.containsCaret ? ' ML__contains-caret' : '',
                    af = this.rightDelim;
                '?' === af && (this.context.smartFence ? (af = this.matchingRightDelim(), $e += ' ML__smart-fence__close') : af = '.'), Xe.push(this.bind(Te, Fe('mclose', af, Ve, We, Te, {
                    classes: $e + ' ML__close',
                    mode: this.mode,
                    style: this.style
                })));
            }
            const $e = null !== (Re = 'mleft...mright' === this.variant || (null === ($e = this.leftSibling) || void 0 === $e ? void 0 : $e.isFunction)) && void 0 !== Re && Re,
                af = new Ic(Xe, {
                    type: $e ? 'mclose' : 'minner',
                    classes: 'left-right'
                });
            return this.caret && (af.caret = this.caret), this.bind(Se, af.wrap(Se));
        }
        constructor(Oe, Pe, Qe, Re) {
            super('leftright', Qe, {
                style: Re.style,
                displayContainsHighlight: !0
            }), this.variant = Oe, this.body = Pe, this.leftDelim = Re.leftDelim, this.rightDelim = Re.rightDelim;
        }
    }
    class Oe extends Kd {
        static fromJson(Pe, Qe) {
            const Re = new Oe(Qe, Pe);
            for (const Se of Hd)
                Pe[Se] && Re.setChildren(Pe[Se], Se);
            return Re;
        }
        toJson() {
            return super.toJson();
        }
        render(Pe) {
            var Qe;
            const Re = this.leftSibling,
                Se = new vc(Pe, {
                    isPhantom: !0
                }),
                Te = null !== (Qe = Re.render(Se)) && void 0 !== Qe ? Qe : new Ic(null),
                Ue = new Ic(null, {
                    height: Te.height,
                    depth: Te.depth
                });
            return this.attachSupsub(Pe, {
                base: Ue,
                isCharacterBox: Re.isCharacterBox(),
                type: 'supsub'
            });
        }
        serialize(Pe) {
            return this.supsubToLatex(Pe);
        }
        constructor(Pe, Qe) {
            super('msubsup', Pe, {
                style: null == Qe ? void 0 : Qe.style
            });
        }
    }
    class Pe extends Kd {
        static fromJson(Qe, Re) {
            return new Pe(Re, Qe);
        }
        toJson() {
            const Qe = super.toJson();
            return this.placeholderId && (Qe.placeholderId = this.placeholderId), this.value === this.context.placeholderSymbol && delete Qe.value, this.defaultValue && (Qe.defaultValue = this.defaultValue.map(Re => Re.toJson())), Qe;
        }
        render(Qe) {
            if ('function' == typeof Qe.renderPlaceholder)
                return Qe.renderPlaceholder(Qe, this);
            let Re = '';
            return this.caret && (Re += 'ML__placeholder-selected '), this.isSelected && (Re += ' ML__selected '), this.createBox(Qe, {
                classes: Re
            });
        }
        serialize(Qe) {
            var Re;
            let Se = null !== (Re = this.value) && void 0 !== Re ? Re : '';
            return Se === this.context.placeholderSymbol && (Se = ''), `\\placeholder${ this.placeholderId ? `[${ this.placeholderId }]` : '' }${ this.defaultValue ? `[${ Kd.serialize(this.defaultValue, Qe) }]` : '' }{${ Se }}`;
        }
        constructor(Qe, Re) {
            var Se;
            const Te = (null == Re ? void 0 : Re.value) || Qe.placeholderSymbol;
            super('placeholder', Qe, {
                mode: null !== (Se = null == Re ? void 0 : Re.mode) && void 0 !== Se ? Se : 'math',
                style: null == Re ? void 0 : Re.style,
                value: Te,
                command: '\\placeholder'
            }), this.captureSelection = !0, this.placeholderId = null == Re ? void 0 : Re.placeholderId, (null == Re ? void 0 : Re.default) && (this.defaultValue = null == Re ? void 0 : Re.default);
        }
    }
    class Qe extends Kd {
        static fromJson(Re, Se) {
            return new Qe(Re.command, Se);
        }
        toJson() {
            return super.toJson();
        }
        render(Re) {
            const Se = this.createBox(Re, {
                classes: 'ML__error'
            });
            return this.caret && (Se.caret = this.caret), Se;
        }
        constructor(Re, Se) {
            super('error', Se, {
                value: Re,
                command: Re,
                mode: 'math'
            }), this.verbatimLatex = Re;
        }
    }
    class Re extends Kd {
        static fromJson(Se, Te) {
            return new Re(Se.command, Te, Se);
        }
        toJson() {
            const Se = super.toJson();
            return this.expand && (Se.expand = !0), void 0 !== this.captureSelection && (Se.captureSelection = this.captureSelection), this.macroArgs && (Se.args = this.macroArgs), Se;
        }
        serialize(Se) {
            return Se.expandMacro && this.expand ? this.bodyToLatex(Se) : this.command + this.macroArgs;
        }
        render(Se) {
            const Te = Kd.createBox(Se, this.body);
            return Te ? (this.caret && (Te.caret = this.caret), this.bind(Se, Te)) : null;
        }
        constructor(Se, Te, Ue) {
            var Ve, We;
            super('macro', Te, {
                command: Se
            }), this.body = Ue.body, void 0 === Ue.captureSelection ? Ue.args ? this.captureSelection = !1 : this.captureSelection = !0 : this.captureSelection = Ue.captureSelection, this.macroArgs = null !== (Ve = Ue.args) && void 0 !== Ve ? Ve : '', this.expand = null !== (We = Ue.expand) && void 0 !== We && We;
        }
    }
    class Se extends Kd {
        static fromJson(Te, Ue) {
            return new Se(Te.command, Te.value, Te.style, Ue);
        }
        toJson() {
            return super.toJson();
        }
        render(Te) {
            const Ue = this.createBox(Te);
            return this.caret && (Ue.caret = this.caret), Ue;
        }
        serialize(Te) {
            var Ue;
            return null !== (Ue = this.verbatimLatex) && void 0 !== Ue ? Ue : fb('text', this.value.codePointAt(0));
        }
        constructor(Te, Ue, Ve, We) {
            super('text', We, {
                command: Te,
                mode: 'text',
                displayContainsHighlight: !0
            }), this.value = Ue, this.verbatimLatex = Ue, this.applyStyle(Ve);
        }
    }

    function Te(Ue) {
        return !/^<({|}|\$|\$\$|space)>$/.test(Ue);
    }
    class Ue {
        get currentContext() {
            return this._currentParsingContext;
        }
        get rootContext() {
            let Ve = this._currentParsingContext;
            for (; Ve.parent;)
                Ve = Ve.parent;
            return Ve;
        }
        beginContext(Ve) {
            var We, Xe, Ye;
            const Ze = {
                parent: this.currentContext,
                mathlist: [],
                style: {
                    ...this.currentContext.style
                },
                parseMode: null !== (We = null == Ve ? void 0 : Ve.mode) && void 0 !== We ? We : this.currentContext.parseMode,
                mathstyle: null !== (Xe = null == Ve ? void 0 : Ve.mathstyle) && void 0 !== Xe ? Xe : this.currentContext.mathstyle,
                registers: null,
                tabular: null !== (Ye = null == Ve ? void 0 : Ve.tabular) && void 0 !== Ye && Ye
            };
            this._currentParsingContext = Ze;
        }
        endContext() {
            this._currentParsingContext = this._currentParsingContext.parent;
        }
        onError(Ve) {
            this.errors.push({
                before: Fd(this.tokens.slice(this.index, this.index + 10)),
                after: Fd(this.tokens.slice(Math.max(0, this.index - 10), this.index)),
                ...Ve
            });
        }
        get mathlist() {
            return this.currentContext.mathlist;
        }
        set mathlist(Ve) {
            this.currentContext.mathlist = Ve;
        }
        get parseMode() {
            return this.currentContext.parseMode;
        }
        set parseMode(Ve) {
            this.currentContext.parseMode = Ve;
        }
        get tabularMode() {
            return this.currentContext.tabular;
        }
        get style() {
            let Ve = this.currentContext;
            for (; Ve;) {
                if (Ve.style)
                    return Ve.style;
                Ve = Ve.parent;
            }
            return {};
        }
        set style(Ve) {
            this.currentContext.style = Ve;
        }
        getRegister(Ve) {
            var We, Xe, Ye;
            if (Ve.startsWith('global '))
                return null !== (Xe = null === (We = this.rootContext.registers) || void 0 === We ? void 0 : We[Ve.slice(7)]) && void 0 !== Xe ? Xe : 0;
            let Ze = this.currentContext;
            for (; Ze;) {
                if (null === (Ye = Ze.registers) || void 0 === Ye ? void 0 : Ye[Ve])
                    return Ze.registers[Ve];
                Ze = Ze.parent;
            }
            return 0;
        }
        setRegister(Ve, We) {
            var Xe;
            if (Ve.startsWith('global ')) {
                Ve = Ve.slice(7);
                let Ye = this.currentContext;
                for (; Ye;)
                    (null === (Xe = Ye.registers) || void 0 === Xe ? void 0 : Xe[Ve]) && delete Ye.registers[Ve], Ye = Ye.parent;
                this.rootContext.registers[Ve] = We;
            } else
                this.currentContext.registers || (this.currentContext.registers = {}), this.currentContext.registers[Ve] = We;
        }
        end() {
            return this.endCount++, this.index >= this.tokens.length || this.endCount > 1000;
        }
        get() {
            return this.endCount = 0, this.index < this.tokens.length ? this.tokens[this.index++] : '';
        }
        peek() {
            return this.tokens[this.index];
        }
        match(Ve) {
            return this.tokens[this.index] === Ve && (this.index++, !0);
        }
        lastSubsupAtom() {
            let Ve;
            if (this.mathlist.length > 0) {
                if (Ve = this.mathlist[this.mathlist.length - 1], 'msubsup' === Ve.type)
                    return Ve;
                if (void 0 !== Ve.subsupPlacement)
                    return Ve;
            }
            return Ve = new Oe(this.context, {
                style: this.style
            }), this.mathlist.push(Ve), Ve;
        }
        hasPattern(Ve) {
            return Ve.test(this.tokens[this.index]);
        }
        hasInfixCommand() {
            var Ve;
            const {
                index: We
            } = this;
            if (We < this.tokens.length && this.tokens[We].startsWith('\\')) {
                const Xe = this.context.getDefinition(this.tokens[We], this.parseMode);
                return !(!Xe || 'symbol' === Xe.definitionType) && !(Xe.ifMode && !Xe.ifMode.includes(this.parseMode)) && null !== (Ve = Xe.infix) && void 0 !== Ve && Ve;
            }
            return !1;
        }
        matchColumnSeparator() {
            const {
                index: Ve
            } = this;
            return !(!this.tabularMode || '&' !== this.tokens[Ve] || (this.index++, 0));
        }
        matchRowSeparator() {
            const {
                index: Ve
            } = this;
            return !(!this.tabularMode || '\\\\' !== this.tokens[Ve] && '\\cr' !== this.tokens[Ve] || (this.index++, 0));
        }
        placeholder() {
            var Ve;
            const We = null === (Ve = this.args) || void 0 === Ve ? void 0 : Ve.call(this, '?');
            return We ? _Ve(We, this.context, {
                parseMode: this.parseMode,
                mathstyle: 'textstyle'
            }) : [new Pe(this.context, {
                mode: this.parseMode,
                style: this.style
            })];
        }
        matchWhitespace() {
            let Ve = !1;
            for (; this.match('<space>');)
                Ve = !0;
            return Ve;
        }
        skipUntilToken(Ve) {
            let We = this.tokens[this.index];
            for (; We && We !== Ve;)
                We = this.tokens[++this.index];
            We === Ve && this.index++;
        }
        skipFiller() {
            let Ve = !1;
            do {
                const We = this.matchWhitespace(),
                    Xe = this.match('\\relax');
                Ve = !We && !Xe;
            } while (!Ve);
        }
        matchKeyword(Ve) {
            const We = this.index;
            let Xe = this.end(),
                Ye = '';
            for (; !Xe;) {
                const Ze = this.get();
                Te(Ze) ? (Ye += Ze, Xe = this.end() || Ye.length >= Ve.length) : Xe = !0;
            }
            const $e = Ve.toUpperCase() === Ye.toUpperCase();
            return $e || (this.index = Ze), $e;
        }
        scanString() {
            let Ve = '';
            for (; !this.end();)
                if (this.match('<space>'))
                    Ve += ' ';
                else {
                    const We = this.peek();
                    if (']' === We)
                        break;
                    if (Te(We))
                        Ve += this.get();
                    else {
                        if (!We.startsWith('\\'))
                            break;
                        this.onError({
                            code: 'unbalanced-braces'
                        }), Ve += this.get();
                    }
                }
            return Ve;
        }
        scanBalancedString() {
            let Ve = '',
                We = this.end(),
                Xe = 1;
            for (; !We;) {
                if (this.match('<space>'))
                    Ve += ' ';
                else {
                    const Ye = this.get();
                    '<{>' === We ? (Ve += '{', Xe += 1) : '<}>' === We ? (Xe -= 1, Xe > 0 ? Ve += '}' : this.index -= 1) : Ve += '<$>' === We ? '$' : '<$$>' === We ? '$$' : We;
                }
                We = 0 === Xe || this.end();
            }
            return Ve;
        }
        matchLiteralArg() {
            var Ve;
            let We = '';
            if (this.match('<{>')) {
                let Xe = 1;
                for (; Xe > 0 && !this.end();) {
                    const Ye = this.get();
                    '<}>' === Ye ? (Xe -= 1, Xe > 0 && (We += '}')) : '<{>' === Ye ? (Xe += 1, We += '{') : We += null !== (Ve = {
                        '<space>': ' ',
                        '<$$>': '$$',
                        '<$>': '$'
                    } [Ye]) && void 0 !== Ve ? Ve : Ye;
                }
            }
            return We;
        }
        scanNumber(Ve = !0) {
            var We, Xe;
            let Ye = !1,
                Ze = this.peek();
            for (;
                '<space>' === Ze || '+' === Ze || '-' === Ze;)
                this.get(), '-' === Ze && (Ye = !Ye), Ze = this.peek();
            Ve = Boolean(Ve);
            let $e = 10,
                af = /\d/;
            if (this.match('\''))
                $e = 8, af = /[0-7]/, Ve = !0;
            else if (this.match('"') || this.match('x'))
                $e = 16, af = /[\dA-F]/, Ve = !0;
            else if (this.match('`'))
                return Ze = this.get(), Ze ? Ze.startsWith('\\') && 2 === Ze.length ? (Ye ? -1 : 1) * (null !== (We = Ze.codePointAt(1)) && void 0 !== We ? We : 0) : (Ye ? -1 : 1) * (null !== (Xe = Ze.codePointAt(0)) && void 0 !== Xe ? Xe : 0) : null;
            let bf = '';
            for (; this.hasPattern(af);)
                bf += this.get();
            if (!Ve && (this.match('.') || this.match(',')))
                for (bf += '.'; this.hasPattern(af);)
                    bf += this.get();
            const cf = Ve ? Number.parseInt(bf, $e) : Number.parseFloat(bf);
            return Number.isNaN(cf) ? null : Ye ? -cf : cf;
        }
        scanDimen() {
            var Ve, We, Xe;
            let Ye, Ze = this.scanNumber(!1);
            if (null === Ze) {
                if (!(null === (Ve = this.peek()) || void 0 === Ve ? void 0 : Ve.startsWith('\\')))
                    return null;
                Ze = 1;
            }
            return this.matchWhitespace(), this.matchKeyword('pt') ? Ye = {
                dimension: Ze,
                unit: 'pt'
            } : this.matchKeyword('mm') ? Ye = {
                dimension: Ze,
                unit: 'mm'
            } : this.matchKeyword('cm') ? Ye = {
                dimension: Ze,
                unit: 'cm'
            } : this.matchKeyword('ex') ? Ye = {
                dimension: Ze,
                unit: 'ex'
            } : this.matchKeyword('px') ? Ye = {
                dimension: Ze,
                unit: 'px'
            } : this.matchKeyword('em') ? Ye = {
                dimension: Ze,
                unit: 'em'
            } : this.matchKeyword('bp') ? Ye = {
                dimension: Ze,
                unit: 'bp'
            } : this.matchKeyword('dd') ? Ye = {
                dimension: Ze,
                unit: 'dd'
            } : this.matchKeyword('pc') ? Ye = {
                dimension: Ze,
                unit: 'pc'
            } : this.matchKeyword('in') ? Ye = {
                dimension: Ze,
                unit: 'in'
            } : this.matchKeyword('mu') ? Ye = {
                dimension: Ze,
                unit: 'mu'
            } : (null === (We = this.peek()) || void 0 === We ? void 0 : We.startsWith('\\')) ? (Ye = null !== (Xe = _ff(this.getRegister(this.get().slice(1)), this.context)) && void 0 !== Xe ? Xe : {
                dimension: 0
            }, Ye.dimension *= Ze) : (this.match('\\relax') || this.onError({
                code: 'missing-unit'
            }), Ye = {
                dimension: Ze,
                unit: 'pt'
            }), Ye;
        }
        scanGlue() {
            const Ve = this.scanDimen();
            if (null === Ve)
                return null;
            const We = {
                glue: Ve
            };
            return this.matchWhitespace(), this.match('\\relax') || (this.matchKeyword('plus') && this.scanDimen(), this.matchWhitespace(), this.match('\\relax') || (this.matchWhitespace(), this.matchKeyword('minus') && this.scanDimen())), We;
        }
        scanColspec() {
            this.matchWhitespace();
            const Ve = [];
            for (; !this.end() && '<}>' !== this.peek() && ']' !== this.peek();) {
                const We = this.get();
                'c' === We || 'r' === We || 'l' === We ? Ve.push({
                    align: We
                }) : '|' === We ? Ve.push({
                    separator: 'solid'
                }) : ':' === We ? Ve.push({
                    separator: 'dashed'
                }) : '@' === We && (this.match('<{>') && (this.beginContext({
                    mode: 'math'
                }), Ve.push({
                    gap: this.parse(Xe => '<}>' === Xe)
                }), this.endContext()), this.match('<}>') || this.onError({
                    code: 'unbalanced-braces'
                }));
            }
            return Ve;
        }
        parseModeSet() {
            let Ve = '';
            if (this.match('\\(') && (Ve = '\\)'), !Ve && this.match('\\[') && (Ve = '\\]'), !Ve)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: '\\)' === Ve ? 'textstyle' : 'displaystyle'
            });
            const We = new Le(this.parse(Xe => Xe === Ve), this.context, {
                mathstyleName: '\\)' === Ve ? 'textstyle' : 'displaystyle',
                latexOpen: '\\]' === Ve ? '\\[' : '\\(',
                latexClose: Ve,
                boxType: 'mord'
            });
            return this.match(Ve) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), We.hasEmptyBranch('body') ? null : We;
        }
        parseModeShift() {
            let Ve = '';
            if (this.match('<$>') && (Ve = '<$>'), !Ve && this.match('<$$>') && (Ve = '<$$>'), !Ve)
                return null;
            this.beginContext({
                mode: 'math',
                mathstyle: 'textstyle'
            });
            const We = new Le(this.parse(Xe => Xe === Ve), this.context, {
                mathstyleName: '<$>' === Ve ? 'textstyle' : 'displaystyle',
                latexOpen: '<$>' === Ve ? '$ ' : '$$ ',
                latexClose: '<$>' === Ve ? ' $' : ' $$'
            });
            return this.match(Ve) || this.onError({
                code: 'unbalanced-mode-shift'
            }), this.endContext(), We.hasEmptyBranch('body') ? null : We;
        }
        parseEnvironment() {
            if (!this.match('\\begin'))
                return null;
            const Ve = this.parseArgument('string');
            if (!Ve)
                return null;
            const We = function(Xe) {
                var Ye;
                return null !== (Ye = W[Xe]) && void 0 !== Ye ? Ye : null;
            }(Ve);
            if (!We)
                return this.onError({
                    code: 'unknown-environment',
                    arg: Ve
                }), null;
            const Xe = [];
            if (We.params)
                for (const Ye of We.params)
                    if (Ye.isOptional)
                        Xe.push(this.parseOptionalArgument(Ye.type));
                    else {
                        const Ze = this.parseArgument(Ye.type);
                        Ze || this.onError({
                            code: 'missing-argument',
                            arg: Ve
                        }), Xe.push(Ze);
                    }
            this.beginContext({
                tabular: Ze.tabular
            });
            const $e = [],
                af = [];
            let bf = [],
                cf = !1;
            do {
                if (this.end() && (this.onError({
                        code: 'unbalanced-environment',
                        arg: Ve
                    }), cf = !0), !cf && this.match('\\end') && (this.parseArgument('string') !== Ve && this.onError({
                        code: 'unbalanced-environment',
                        arg: Ve
                    }), cf = !0), !cf)
                    if (this.matchColumnSeparator())
                        bf.push(this.mathlist), this.mathlist = [];
                    else if (this.matchRowSeparator()) {
                    bf.push(this.mathlist), this.mathlist = [];
                    let df = null;
                    this.matchWhitespace(), this.match('[') && (df = this.scanDimen(), this.matchWhitespace(), this.match(']')), af.push(null != df ? df : {
                        dimension: 0
                    }), $e.push(bf), bf = [];
                } else
                    this.mathlist.push(...this.parse(df => '<}>' === df || '&' === df || '\\end' === df || '\\cr' === df || '\\\\' === df));
            } while (!cf);
            return bf.push(this.mathlist), bf.length > 0 && $e.push(bf), this.endContext(), Ze.createAtom(this.context, Ve, $e, af, Xe);
        }
        parse(Ve) {
            this.beginContext(), Ve || (Ve = We => '<}>' === We);
            let We = '',
                Xe = null,
                Ye = [],
                Ze = null;
            const $e = this.mathlist;
            for (this.mathlist = []; !this.end() && !Ve(this.peek());)
                this.hasInfixCommand() && !We ? (We = this.get(), Xe = this.context.getDefinition(We, 'math'), Xe && (Ye = this.parseArguments(Xe)[1]), Ze = this.mathlist, this.mathlist = []) : this.parseToken();
            let af;
            return We ? (Ye.unshift(this.mathlist), this.mathlist = $e, Ze && Ye.unshift(Ze), af = [Xe.createAtom(We, Ye, this.style, this.context)]) : (af = this.mathlist, this.mathlist = $e), this.endContext(), af;
        }
        parseGroup() {
            if (!this.match('<{>'))
                return null;
            const Ve = new Le(this.parse(We => '<}>' === We), this.context, {
                mode: this.parseMode,
                latexOpen: '{',
                latexClose: '}'
            });
            return this.match('<}>') || this.onError({
                code: 'unbalanced-braces'
            }), Ve;
        }
        scanSmartFence() {
            if (this.matchWhitespace(), !this.match('('))
                return null;
            this.beginContext();
            let Ve = 1;
            for (; !this.end() && 0 !== Ve;)
                this.match('(') && (Ve += 1), this.match(')') && (Ve -= 1), 0 !== Ve && this.parseToken();
            0 === Ve && this.match(')');
            const We = new Ne('', this.mathlist, this.context, {
                leftDelim: '(',
                rightDelim: 0 === Ve ? ')' : '?'
            });
            return this.endContext(), We;
        }
        scanDelim() {
            this.matchWhitespace();
            const Ve = this.get();
            if (!Ve)
                return this.onError({
                    code: 'unexpected-end-of-string'
                }), null;
            let We = '.';
            (Ve.startsWith('\\') || Te(Ve)) && (We = Ve);
            const Xe = this.context.getDefinition(We, 'math');
            return Xe ? 'function' === Xe.definitionType && Xe.ifMode && !Xe.ifMode.includes(this.parseMode) ? (this.onError({
                code: 'unexpected-delimiter',
                arg: We
            }), null) : 'symbol' !== Xe.definitionType || 'mopen' !== Xe.type && 'mclose' !== Xe.type ? /^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(We) ? We : (this.onError({
                code: 'unexpected-delimiter',
                arg: We
            }), null) : We : (this.onError({
                code: 'unknown-command',
                arg: We
            }), null);
        }
        parseLeftRight() {
            var Ve;
            if (this.match('\\right') || this.match('\\mright'))
                return this.onError({
                    code: 'unbalanced-braces'
                }), null;
            let We = '\\right';
            if (!this.match('\\left')) {
                if (!this.match('\\mleft'))
                    return null;
                We = '\\mright';
            }
            const Xe = this.scanDelim();
            if (!Xe)
                return null;
            for (this.beginContext(); !this.end() && !this.match(We);)
                this.parseToken();
            const Ye = this.mathlist;
            this.endContext();
            const Ze = null !== (Ve = this.scanDelim()) && void 0 !== Ve ? Ve : '.';
            return new Ne('\\right' === We ? 'left...right' : 'mleft...mright', Ye, this.context, {
                leftDelim: Xe,
                rightDelim: Ze,
                style: this.style
            });
        }
        parseSupSub() {
            if ('math' !== this.parseMode)
                return !1;
            let Ve = this.peek();
            if ('^' !== Ve && '_' !== Ve && '\'' !== Ve)
                return !1;
            for (;
                '^' === Ve || '_' === Ve || '\'' === Ve;) {
                if (this.match('\''))
                    this.match('\'') ? this.lastSubsupAtom().addChild(new Kd('mord', this.context, {
                        command: '\\doubleprime',
                        mode: 'math',
                        value: '\u2032\u2032'
                    }), 'superscript') : this.lastSubsupAtom().addChild(new Kd('mord', this.context, {
                        command: '\\prime',
                        mode: 'math',
                        value: '\u2032'
                    }), 'superscript');
                else if (this.match('^') || this.match('_')) {
                    const We = this.parseArgument('math');
                    We ? this.lastSubsupAtom().addChildren(We, '_' === Ve ? 'subscript' : 'superscript') : this.lastSubsupAtom().createBranch('_' === Ve ? 'subscript' : 'superscript');
                }
                Ve = this.peek();
            }
            return !0;
        }
        parseLimits() {
            const Ve = this.match('\\limits'),
                We = !Ve && this.match('\\nolimits'),
                Xe = !We && !Ve && this.match('\\displaylimits');
            if (!Ve && !We && !Xe)
                return !1;
            const Ye = this.mathlist.length > 0 ? this.mathlist[this.mathlist.length - 1] : null;
            return !(null === Ye || 'mop' !== Ye.type || (Ve ? (Ye.subsupPlacement = 'over-under', Ye.explicitSubsupPlacement = !0, 0) : We ? (Ye.subsupPlacement = 'adjacent', Ye.explicitSubsupPlacement = !0, 0) : !Xe || (Ye.subsupPlacement = 'auto', Ye.explicitSubsupPlacement = !0, 0)));
        }
        parseArguments(Ve) {
            if (!(null == Ve ? void 0 : Ve.params))
                return [
                    void 0,
                    []
                ];
            let We;
            const Xe = [];
            let Ye = Ve.infix ? 2 : 0;
            for (; Ye < Ve.params.length;) {
                const Ze = Ve.params[Ye];
                if ('rest' === Ze.type)
                    Xe.push(this.parse($e => '<}>' === $e || '&' === $e || '\\end' === $e || '\\cr' === $e || '\\\\' === $e));
                else if (Ze.isOptional)
                    Xe.push(this.parseOptionalArgument(Ze.type));
                else if (Ze.type.endsWith('*'))
                    We = Ze.type.slice(0, -1);
                else {
                    const $e = this.parseArgument(Ze.type);
                    if (null !== $e)
                        Xe.push($e);
                    else
                        switch (this.onError({
                                code: 'missing-argument'
                            }), Ze.type) {
                            case 'number':
                                Xe.push(0);
                                break;
                            case 'dimen':
                                Xe.push({
                                    dimension: 0,
                                    unit: 'pt'
                                });
                                break;
                            case 'glue':
                                Xe.push({
                                    glue: {
                                        dimension: 0,
                                        unit: 'pt'
                                    }
                                });
                                break;
                            case 'string':
                            case 'balanced-string':
                                Xe.push('');
                                break;
                            case 'delim':
                                Xe.push('.');
                                break;
                            case 'colspec':
                                Xe.push('llllllllll');
                                break;
                            default:
                                Xe.push(this.placeholder());
                        }
                }
                Ye += 1;
            }
            return [
                We,
                Xe
            ];
        }
        parseArgument(Ve) {
            var We, Xe;
            this.skipFiller(), 'auto' === Ve && (Ve = this.parseMode);
            let Ye = null;
            const Ze = '<{>' === this.peek();
            if (!Ze) {
                if ('delim' === Ve)
                    return null !== (We = this.scanDelim()) && void 0 !== We ? We : '.';
                if ('text' === Ve || 'math' === Ve) {
                    this.beginContext();
                    const $e = this.parseSimpleToken();
                    return this.endContext(), $e;
                }
            }
            if (Ze && this.get(), 'text' === $e || 'math' === $e) {
                this.beginContext({
                    mode: $e
                });
                do {
                    this.mathlist.push(...this.parse());
                } while (!this.match('<}>') && !this.end());
            } else if (this.beginContext(), 'string' === $e ? Ye = this.scanString() : 'balanced-string' === $e ? Ye = this.scanBalancedString() : 'number' === $e ? Ye = this.scanNumber() : 'colspec' === $e ? Ye = this.scanColspec() : 'dimen' === $e ? Ye = this.scanDimen() : 'glue' === $e ? Ye = this.scanGlue() : 'delim' === $e && (Ye = null !== (Xe = this.scanDelim()) && void 0 !== Xe ? Xe : '.'), Ze && this.skipUntilToken('<}>'), null === Ye)
                return this.endContext(), null;
            const af = this.mathlist;
            return this.endContext(), null != Ye ? Ye : af;
        }
        parseOptionalArgument(Ve) {
            var We, Xe;
            if (Ve = 'auto' === Ve ? this.parseMode : Ve, this.matchWhitespace(), !this.match('['))
                return null;
            let Ye = null;
            for (; !this.end() && !this.match(']');)
                if ('string' === Ve)
                    Ye = this.scanString();
                else if ('number' === Ve)
                Ye = this.scanNumber();
            else if ('dimen' === Ve)
                Ye = this.scanDimen();
            else if ('glue' === Ve)
                Ye = this.scanGlue();
            else if ('colspec' === Ve)
                Ye = this.scanColspec();
            else if ('bbox' === Ve) {
                const Ze = this.scanString().toLowerCase().trim().split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/),
                    $e = {};
                for (const af of Ze) {
                    const bf = null === (Xe = (We = this.context).backgroundColorMap) || void 0 === Xe ? void 0 : Xe.call(We, Ye);
                    if (bf)
                        $e.backgroundcolor = bf;
                    else {
                        const cf = Ye.match(/^\s*([\d.]+)\s*([a-z]{2})/);
                        if (cf)
                            $e.padding = cf[0];
                        else {
                            const df = Ye.match(/^\s*border\s*:\s*(.*)/);
                            df && ($e.border = df[1]);
                        }
                    }
                }
                Ye = $e;
            } else
                'math' === df && (this.beginContext({
                    mode: 'math'
                }), Ye = this.mathlist.concat(this.parse(ef => ']' === ef)), this.endContext());
            return Ye;
        }
        parseCommand(Ve) {
            var We, Xe, Ye, Ze, $e, af, bf;
            if ('\\placeholder' === Ve) {
                const cf = this.parseOptionalArgument('string'),
                    df = this.parseOptionalArgument('math'),
                    ef = null !== (We = this.parseArgument('string')) && void 0 !== We ? We : void 0;
                return [new Pe(this.context, {
                    mode: this.parseMode,
                    placeholderId: cf,
                    value: ef,
                    default: df,
                    style: this.style
                })];
            }
            let ff = null;
            if ('\\char' === cf) {
                const gf = this.index;
                let hf = Math.floor(null !== (df = this.scanNumber(!0)) && void 0 !== df ? df : Number.NaN);
                (!Number.isFinite(hf) || hf < 0 || hf > 1114111) && (hf = 10067);
                const jf = '\\char' + Fd(this.tokens.slice(gf, this.index));
                return ff = new Kd('math' === this.parseMode ? 'mord' : 'text', this.context, {
                    command: '\\char',
                    mode: this.parseMode,
                    value: String.fromCodePoint(hf),
                    serialize: () => jf
                }), ff.verbatimLatex = jf, [ff];
            }
            if ('\\hskip' === gf || '\\kern' === gf) {
                const jf = this.scanGlue();
                return jf ? [new Me(gf, this.style, this.context, jf)] : null;
            }
            if (ff = this.scanMacro(gf), ff)
                return [ff];
            const kf = this.context.getDefinition(gf, this.parseMode);
            if (!kf)
                return this.onError({
                    code: 'unknown-command',
                    arg: gf
                }), [new Qe(gf, this.context)];
            const lf = this.index;
            if ('symbol' === kf.definitionType) {
                const mf = {
                    ...this.style
                };
                kf.variant && (mf.variant = kf.variant), ff = new Kd(null !== (jf = kf.type) && void 0 !== jf ? jf : 'mop', this.context, {
                    command: gf,
                    style: mf,
                    value: String.fromCodePoint(kf.codepoint),
                    mode: this.parseMode
                });
            } else {
                if (kf.ifMode && !kf.ifMode.includes(this.parseMode))
                    return [];
                const nf = this.parseMode;
                kf.applyMode && (this.parseMode = kf.applyMode);
                const [pf, qf] = this.parseArguments(kf);
                if (this.parseMode = nf, !qf)
                    return null;
                if (kf.applyMode && !kf.applyStyle && !kf.createAtom)
                    return qf[0];
                if (kf.infix)
                    return this.onError({
                        code: 'too-many-infix-commands',
                        arg: gf
                    }), null;
                if ('function' == typeof kf.createAtom)
                    ff = kf.createAtom(gf, qf, this.style, this.context), pf && (ff.body = null !== (Ze = this.parseArgument(pf)) && void 0 !== Ze ? Ze : void 0);
                else if ('function' == typeof kf.applyStyle) {
                    const rf = kf.applyStyle(gf, qf, this.context),
                        sf = this.parseMode;
                    if (kf.applyMode && (this.parseMode = kf.applyMode), pf) {
                        const tf = this.style;
                        this.style = {
                            ...this.style,
                            ...rf
                        };
                        const uf = this.parseArgument(pf);
                        return this.style = tf, this.parseMode = sf, qf;
                    }
                    this.style = {
                        ...this.style,
                        ...rf
                    }, this.parseMode = sf;
                } else
                    ff = new Kd('mop', this.context, {
                        command: null !== ($e = kf.command) && void 0 !== $e ? $e : tf,
                        style: {
                            ...this.style
                        },
                        value: tf,
                        mode: null !== (af = kf.applyMode) && void 0 !== af ? af : this.parseMode
                    });
            }
            if (ff instanceof Kd && void 0 === ff.verbatimLatex && !/^\\(llap|rlap|class|cssId|htmlData)$/.test(tf) && (ff.verbatimLatex = (null !== (bf = ff.command) && void 0 !== bf ? bf : '') + Fd(this.tokens.slice(lf, this.index)), 0 === ff.verbatimLatex.length && (ff.verbatimLatex = void 0), ff.isFunction && this.smartFence)) {
                const tf = this.scanSmartFence();
                if (tf)
                    return [
                        ff,
                        tf
                    ];
            }
            return ff ? [ff] : null;
        }
        parseLiteral(Ve) {
            const We = zc.createAtom(this.parseMode, Ve, this.context, {
                ...this.style
            });
            if (!We)
                return null;
            if (We.isFunction && this.smartFence) {
                const Xe = this.scanSmartFence();
                if (Xe)
                    return [
                        We,
                        Xe
                    ];
            }
            return [We];
        }
        parseSimpleToken() {
            const Ve = this.get();
            return Ve ? '<space>' === Ve ? 'text' === this.parseMode ? [new Se(' ', ' ', this.style, this.context)] : null : Ve.startsWith('\\') ? this.parseCommand(Ve) : Te(Ve) ? this.parseLiteral(Ve) : ('<}>' === Ve ? this.onError({
                latex: '',
                code: 'unbalanced-braces'
            }) : this.onError({
                latex: '',
                code: 'unexpected-token',
                arg: Ve
            }), null) : null;
        }
        scanMacro(Ve) {
            var We;
            const Xe = this.context.getMacro(Ve);
            if (!Xe)
                return null;
            const Ye = this.index,
                Ze = Xe.args,
                $e = {
                    '?': null === (We = this.args) || void 0 === We ? void 0 : We.call(this, '?')
                };
            for (let af = 1; af <= Ze; af++)
                $e[af] = this.matchLiteralArg();
            return new Re(af, this.context, {
                expand: Xe.expand,
                captureSelection: Xe.captureSelection,
                args: Fd(this.tokens.slice(Ye, this.index)),
                body: _Ve(Xe.def, this.context, {
                    parseMode: this.parseMode,
                    args: bf => $e[bf],
                    mathstyle: this.currentContext.mathstyle
                })
            });
        }
        parseToken() {
            var Ve, We, Xe, Ye;
            let Ze = null !== (Ye = null !== (Xe = null !== (We = null !== (Ve = this.parseEnvironment()) && void 0 !== Ve ? Ve : this.parseModeShift()) && void 0 !== We ? We : this.parseModeSet()) && void 0 !== Xe ? Xe : this.parseGroup()) && void 0 !== Ye ? Ye : this.parseLeftRight();
            if (null === Ze) {
                if (this.parseSupSub())
                    return !0;
                if (this.parseLimits())
                    return !0;
                Ze = this.parseSimpleToken();
            }
            return d(Ze) ? this.mathlist.push(...Ze) : Ze && this.mathlist.push(Ze), null !== Ze;
        }
        constructor(Ve, We, Xe) {
            var Ye, Ze, $e, af, bf, cf;
            this.index = 0, this.endCount = 0, this.tokens = Ve, this.context = We, this.errors = [], this.args = null !== (Ye = Xe.args) && void 0 !== Ye ? Ye : null, this.smartFence = null !== (Ze = Xe.smartFence) && void 0 !== Ze ? Ze : We.smartFence, this._currentParsingContext = {
                parent: void 0,
                mathlist: [],
                style: null !== ($e = Xe.style) && void 0 !== $e ? $e : {},
                parseMode: null !== (af = Xe.parseMode) && void 0 !== af ? af : 'math',
                mathstyle: null !== (bf = Xe.mathstyle) && void 0 !== bf ? bf : 'displaystyle',
                registers: null !== (cf = Xe.registers) && void 0 !== cf ? cf : We.registers,
                tabular: !1
            };
        }
    }

    function _Ve(We, Xe, Ye) {
        var Ze, $e, af;
        const bf = null !== (d = null == Ye ? void 0 : Ye.args) && void 0 !== d ? d : null,
            cf = new Ue(_wd(We, g), Xe, {
                args: g,
                mathstyle: null !== (e = null == Ye ? void 0 : Ye.mathstyle) && void 0 !== e ? e : 'displaystyle',
                parseMode: null !== (f = null == Ye ? void 0 : Ye.parseMode) && void 0 !== f ? f : 'math'
            }),
            df = [];
        for (; !h.end();)
            i.push(...h.parse());
        return i;
    }

    function bf(cf, df, ef) {
        var ff;
        const gf = new Ue(_wd(cf, null), df, {
            args: null,
            mathstyle: 'displaystyle',
            parseMode: null !== (d = null == ef ? void 0 : ef.parseMode) && void 0 !== d ? d : 'math'
        });
        for (; !e.end();)
            e.parse();
        return e.errors;
    }

    function ef(ff, gf, hf) {
        return 'object' == typeof ff && 'glue' in ff ? ff : 'object' == typeof ff && 'dimension' in ff ? {
            glue: ff
        } : 'number' == typeof ff ? {
            glue: {
                dimension: ff
            }
        } : new Ue(_wd(ff), gf, {
            registers: hf
        }).scanGlue();
    }

    function _ff(gf, hf, jf) {
        return 'number' == typeof gf ? {
            dimension: gf,
            unit: 'pt'
        } : ('object' == typeof gf && 'glue' in gf && (gf = gf.glue), 'object' == typeof gf && 'dimension' in gf ? gf : new Ue(_wd(gf), hf, {
            registers: jf
        }).scanDimen());
    }
    class gf extends Kd {
        static fromJson(hf, jf) {
            return new gf(hf.command, hf.body, jf, hf);
        }
        toJson() {
            return {
                ...super.toJson(),
                framecolor: this.framecolor,
                verbatimFramecolor: this.verbatimFramecolor,
                backgroundcolor: this.backgroundcolor,
                verbatimBackgroundcolor: this.verbatimBackgroundcolor,
                padding: this.padding,
                border: this.border
            };
        }
        render(hf) {
            const jf = new vc(hf, this.style),
                kf = sc(jf.getRegisterAsDimension('fboxsep')),
                lf = void 0 === this.padding ? kf : sc(_ff(this.padding, {
                    ...this.context,
                    registers: hf.registers
                })),
                mf = Kd.createBox(hf, this.body);
            if (!mf)
                return null;
            mf.setStyle('vertical-align', -mf.height, 'em');
            const nf = new Ic(mf, {
                    type: 'mord'
                }),
                pf = new Ic(null, {
                    classes: 'ML__box'
                });
            pf.height = nf.height + lf, pf.depth = nf.depth + lf, pf.setStyle('box-sizing', 'border-box'), pf.setStyle('position', 'absolute'), pf.setStyle('height', nf.height + nf.depth + 2 * lf, 'em'), 0 === lf ? pf.setStyle('width', '100%') : (pf.setStyle('width', `calc(100% + ${ 2 * lf }em)`), pf.setStyle('top', kf, 'em'), pf.setStyle('left', -lf, 'em')), pf.setStyle('z-index', '-1'), this.backgroundcolor && pf.setStyle('background-color', this.backgroundcolor), this.framecolor && pf.setStyle('border', `${ sc(jf.getRegisterAsDimension('fboxrule')) }em solid ${ this.framecolor }`), this.border && pf.setStyle('border', this.border), nf.setStyle('display', 'inline-block'), nf.setStyle('height', mf.height + mf.depth, 'em'), nf.setStyle('vertical-align', -lf, 'em');
            const qf = new Ic([
                pf,
                nf
            ]);
            return qf.setStyle('position', 'relative'), qf.setStyle('display', 'inline-block'), qf.setStyle('line-height', 0), qf.height = nf.height + lf, qf.depth = nf.depth + lf, qf.left = lf, qf.right = lf, qf.setStyle('height', nf.height + lf, 'em'), qf.setStyle('top', nf.depth - nf.height, 'em'), qf.setStyle('vertical-align', nf.depth + lf, 'em'), this.caret && (qf.caret = this.caret), this.attachSupsub(hf, {
                base: qf
            });
        }
        constructor(hf, jf, kf, lf) {
            super('box', kf, {
                command: hf,
                serialize: lf.serialize,
                style: lf.style
            }), this.body = jf, this.framecolor = lf.framecolor, this.verbatimFramecolor = lf.verbatimBackgroundcolor, this.backgroundcolor = lf.backgroundcolor, this.verbatimBackgroundcolor = lf.verbatimBackgroundcolor, this.padding = lf.padding, this.border = lf.border;
        }
    }
    class hf extends Kd {
        static fromJson(jf, kf) {
            return new hf(kf, jf.environmentName, jf.array, jf.rowGaps, jf);
        }
        toJson() {
            const jf = {
                ...super.toJson(),
                environmentName: this.environmentName,
                array: this.array.map(kf => kf.map(lf => lf.map(mf => mf.toJson()))),
                rowGaps: this.rowGaps,
                columns: this.colFormat,
                colSeparationType: this.colSeparationType
            };
            return 1 !== this.arraystretch && (jf.arraystretch = this.arraystretch), this.arraycolsep && (jf.arraycolsep = this.arraycolsep), this.leftDelim && (jf.leftDelim = this.leftDelim), this.rightDelim && (jf.rightDelim = this.rightDelim), void 0 !== this.jot && (jf.jot = this.jot), jf;
        }
        branch(jf) {
            var kf;
            if (Jd(jf))
                return null !== (kf = this.array[jf[0]][jf[1]]) && void 0 !== kf ? kf : void 0;
        }
        get branches() {
            const jf = super.branches;
            return this.array.forEach((kf, lf) => {
                this.array[lf].forEach((mf, nf) => {
                    this.array[lf][nf] && jf.push([
                        lf,
                        nf
                    ]);
                });
            }), jf;
        }
        createBranch(jf) {
            var kf;
            return Jd(jf) ? (this.isDirty = !0, null !== (kf = this.branch(jf)) && void 0 !== kf ? kf : []) : [];
        }
        get rowCount() {
            return this.array.length;
        }
        get colCount() {
            return this.array[0].length;
        }
        get maxColumns() {
            return this.colFormat.filter(jf => Boolean(jf.align)).length;
        }
        removeBranch(jf) {
            if (Id(jf))
                return super.removeBranch(jf);
            const kf = this.branch(jf);
            return this.array[jf[0]][jf[1]] = void 0, kf.forEach(lf => {
                lf.parent = void 0, lf.treeBranch = void 0;
            }), kf.shift(), this.isDirty = !0, kf;
        }
        get hasChildren() {
            return this.children.length > 0;
        }
        get children() {
            const jf = [];
            for (const kf of this.array)
                for (const lf of kf)
                    if (lf)
                        for (const mf of lf)
                            jf.push(...mf.children), jf.push(mf);
            return [
                ...jf,
                ...super.children
            ];
        }
        render(jf) {
            var kf, lf, mf, nf, pf;
            const qf = new vc(jf, this.style, this.mathstyleName),
                rf = qf.getRegisterAsEm('arrayrulewidth'),
                sf = qf.getRegisterAsEm('arraycolsep'),
                tf = qf.getRegisterAsEm('doublerulesep'),
                uf = null !== (kf = this.arraystretch) && void 0 !== kf ? kf : 1;
            let vf = 'number' == typeof this.arraycolsep ? this.arraycolsep : sf;
            'small' === this.colSeparationType && (vf = new vc(jf, void 0, 'scriptstyle').scalingFactor / jf.scalingFactor * 0.2778);
            const wf = 1.2 * uf,
                xf = 0.7 * wf,
                yf = 0.3 * wf;
            let zf = 0;
            const Af = [];
            let Bf = 0;
            const Cf = this.array.length;
            for (let Df = 0; Df < Cf; ++Df) {
                const Ef = this.array[Df];
                Bf = Math.max(Bf, Ef.length);
                const Ff = new vc(qf, this.style, this.mathstyleName);
                let Gf = xf / Ff.scalingFactor,
                    Hf = yf / Ff.scalingFactor;
                const If = {
                    cells: [],
                    height: 0,
                    depth: 0,
                    pos: 0
                };
                for (const Jf of Ef) {
                    const Kf = null !== (lf = Kd.createBox(Ff, Df, {
                        newList: !0
                    })) && void 0 !== lf ? lf : new Ic(null, {
                        newList: !0
                    });
                    Hf = Math.max(Hf, Kf.depth), Gf = Math.max(Gf, Kf.height), If.cells.push(Kf);
                }
                let Lf = null !== (mf = sc(this.rowGaps[Df])) && void 0 !== mf ? mf : 0;
                Lf > 0 && (Lf += yf, Hf = Math.max(Hf, Lf), Lf = 0), void 0 !== this.jot && (Hf += this.jot), If.height = Gf, If.depth = Hf, zf += Gf, If.pos = zf, zf += Hf + Lf, Af.push(If);
            }
            const Jf = zf / 2 + 0.25,
                Kf = [];
            for (let Lf = 0; Lf < Bf; Lf++) {
                const Mf = [];
                for (const Nf of Af) {
                    const Of = Nf.cells[Lf];
                    Of.depth = Nf.depth, Of.height = Nf.height, Mf.push({
                        box: Of,
                        shift: Nf.pos - Jf
                    });
                }
                Mf.length > 0 && Kf.push(new Yc({
                    individualShift: Mf
                }));
            }
            const Pf = [];
            let Qf = !1,
                Rf = !1,
                Sf = 0,
                Tf = !this.leftDelim;
            const {
                colFormat: Uf
            } = this;
            for (const Vf of Uf) {
                if ('align' in Vf && Sf >= Kf.length)
                    break;
                if ('align' in Vf)
                    Qf ? Pf.push(_mf(2 * vf)) : (Rf || Tf) && Pf.push(_mf(vf)), Pf.push(new Ic(Kf[Sf], {
                        classes: 'col-align-' + Vf.align
                    })), Sf++, Qf = !0, Rf = !1, Tf = !1;
                else if ('gap' in Vf) {
                    if ('number' == typeof Vf.gap)
                        Pf.push(_mf(Vf.gap));
                    else {
                        const Wf = _pf(Lf, Af, Jf, Vf.gap);
                        Wf && Pf.push(Wf);
                    }
                    Qf = !1, Rf = !1, Tf = !1;
                } else if ('separator' in Vf) {
                    const Xf = new Ic(null, {
                        classes: 'vertical-separator'
                    });
                    Lf.setStyle('height', zf, 'em'), Lf.setStyle('border-right', `${ rf }em ${ Vf.separator } currentColor`), Lf.setStyle('vertical-align', -(zf - Jf), 'em');
                    let Yf = 0;
                    Rf ? Yf = tf - rf : Qf && (Yf = vf - rf), Lf.left = Yf, Pf.push(Lf), Qf = !1, Rf = !0, Tf = !1;
                }
            }
            Qf && !this.rightDelim && Pf.push(_mf(vf));
            const Yf = new Ic(Pf, {
                classes: 'mtable'
            });
            if (!(this.leftDelim && '.' !== this.leftDelim || this.rightDelim && '.' !== this.rightDelim))
                return this.caret && (Yf.caret = this.caret), Yf;
            const Zf = Yf.height,
                $f = Yf.depth,
                ag = this.bind(Lf, new Ic([
                    this.bind(Lf, Fe('mopen', null !== (Ff = this.leftDelim) && void 0 !== Ff ? Ff : '.', Zf, $f, qf)),
                    Yf,
                    this.bind(Lf, Fe('mclose', null !== (pf = this.rightDelim) && void 0 !== pf ? pf : '.', Zf, $f, qf))
                ], {
                    type: 'mord'
                }));
            return ag ? (this.caret && (ag.caret = this.caret), this.attachSupsub(Lf, {
                base: ag
            })) : null;
        }
        serialize(jf) {
            let kf = '\\begin{' + this.environmentName + '}';
            if ('array' === this.environmentName) {
                if (kf += '{', void 0 !== this.colFormat)
                    for (const lf of this.colFormat)
                        'align' in lf ? kf += lf.align : 'separator' in lf && 'solid' === lf.separator ? kf += '|' : 'separator' in lf && 'dashed' === lf.separator && (kf += ':');
                kf += '}';
            }
            for (let mf = 0; mf < this.array.length; mf++) {
                for (let nf = 0; nf < this.array[mf].length; nf++)
                    nf > 0 && (kf += ' & '), kf = Cd([
                        kf,
                        Kd.serialize(this.array[mf][nf], lf)
                    ]);
                mf < this.array.length - 1 && (kf += ' \\\\ ');
            }
            return kf += '\\end{' + this.environmentName + '}', kf;
        }
        getCell(jf, kf) {
            return this.array[jf][kf];
        }
        setCell(jf, kf, lf) {
            for (const mf of this.array[jf][kf])
                mf.parent = void 0, mf.treeBranch = void 0;
            let nf = mf;
            0 !== mf.length && 'first' === mf[0].type || (nf = [
                new Kd('first', this.context, {
                    mode: this.mode
                }),
                ...mf
            ]), this.array[jf][kf] = nf;
            for (const pf of nf)
                pf.parent = this, pf.treeBranch = [
                    jf,
                    kf
                ];
            this.isDirty = !0;
        }
        addRowBefore(jf) {
            const kf = [];
            for (let lf = 0; lf < this.colCount; lf++)
                kf.push(_jf(this));
            this.array.splice(lf, 0, kf);
            for (let mf = lf; mf < this.rowCount; mf++)
                for (let nf = 0; nf < this.colCount; nf++) {
                    const pf = this.array[mf][nf];
                    if (pf)
                        for (const qf of pf)
                            qf.treeBranch = [
                                mf,
                                nf
                            ];
                }
            this.isDirty = !0;
        }
        addRowAfter(jf) {
            const kf = [];
            for (let lf = 0; lf < this.colCount; lf++)
                kf.push(_jf(this));
            this.array.splice(lf + 1, 0, kf);
            for (let mf = lf + 1; mf < this.rowCount; mf++)
                for (let nf = 0; nf < this.colCount; nf++) {
                    const pf = this.array[mf][nf];
                    if (pf)
                        for (const qf of pf)
                            qf.treeBranch = [
                                mf,
                                nf
                            ];
                }
            this.isDirty = !0;
        }
        removeRow(jf) {
            const kf = this.array.splice(jf, 1);
            for (const lf of kf)
                for (const mf of lf)
                    if (mf)
                        for (const nf of mf)
                            nf.parent = void 0, nf.treeBranch = void 0;
            for (let pf = nf; pf < this.rowCount; pf++)
                for (let qf = 0; qf < this.colCount; qf++) {
                    const rf = this.array[pf][qf];
                    if (rf)
                        for (const sf of rf)
                            sf.treeBranch = [
                                pf,
                                qf
                            ];
                }
            this.isDirty = !0;
        }
        addColumnBefore(jf) {
            for (const kf of this.array)
                kf.splice(jf, 0, _jf(this));
            for (let lf = 0; lf < this.rowCount; lf++)
                for (let mf = jf; mf < this.colCount; mf++) {
                    const nf = this.array[lf][mf];
                    if (nf)
                        for (const pf of nf)
                            pf.treeBranch = [
                                lf,
                                mf
                            ];
                }
            this.isDirty = !0;
        }
        addColumnAfter(jf) {
            for (const kf of this.array)
                kf.splice(jf + 1, 0, _jf(this));
            for (let lf = 0; lf < this.rowCount; lf++)
                for (let mf = jf + 1; mf < this.colCount; mf++) {
                    const nf = this.array[lf][mf];
                    if (nf)
                        for (const pf of nf)
                            pf.treeBranch = [
                                lf,
                                mf
                            ];
                }
            this.isDirty = !0;
        }
        addColumn() {
            this.addColumnAfter(this.colCount - 1);
        }
        removeColumn(jf) {
            for (const kf of this.array) {
                const lf = kf.splice(jf, 1);
                for (const mf of lf)
                    if (mf)
                        for (const nf of mf)
                            nf.parent = void 0, nf.treeBranch = void 0;
            }
            for (let pf = 0; pf < this.rowCount; pf++)
                for (let qf = mf; qf < this.colCount; qf++) {
                    const rf = this.array[pf][qf];
                    if (rf)
                        for (const sf of rf)
                            sf.treeBranch = [
                                pf,
                                qf
                            ];
                }
            this.isDirty = !0;
        }
        get cells() {
            const jf = [];
            for (const kf of this.array)
                for (const lf of kf)
                    lf && jf.push(lf);
            return jf;
        }
        constructor(jf, kf, lf, mf, nf = {}) {
            var pf, qf;
            super('array', jf), this.environmentName = kf, this.rowGaps = mf, nf.mathstyleName && (this.mathstyleName = nf.mathstyleName), nf.columns && (0 === nf.columns.length ? this.colFormat = [{
                align: 'l'
            }] : this.colFormat = nf.columns), this.colFormat || (this.colFormat = [{
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                },
                {
                    align: 'l'
                }
            ]), this.array = function(rf, sf, tf, uf) {
                let vf = 0;
                for (const wf of uf)
                    'align' in wf && (vf += 1);
                let xf = 0;
                const yf = [];
                for (const zf of tf) {
                    let Af = 0;
                    for (xf = Math.max(xf, Math.min(zf.length, vf)); Af < zf.length;) {
                        const Bf = [],
                            Cf = Math.min(zf.length, Af + vf);
                        for (; Af < Cf;)
                            0 === zf[Af].length ? xf.push([new Kd('first', wf, {
                                mode: sf.mode
                            })]) : 'first' !== zf[Af][0].type ? xf.push([
                                new Kd('first', wf, {
                                    mode: sf.mode
                                }),
                                ...zf[Af]
                            ]) : xf.push(zf[Af]), Af += 1;
                        yf.push(xf);
                    }
                }
                1 === yf[yf.length - 1].length && 0 === yf[yf.length - 1][0].length && yf.pop();
                const Cf = [];
                for (const Df of yf) {
                    if (Df.length !== xf)
                        for (let Ef = Df.length; Ef < xf; Ef++)
                            Df.push([
                                new Kd('first', wf, {
                                    mode: sf.mode
                                }),
                                new Pe(wf)
                            ]);
                    Cf.push(Df);
                }
                let Ef = 0,
                    Ff = 0;
                for (const Gf of Cf) {
                    Ff = 0;
                    for (const Hf of Gf) {
                        for (const If of Hf)
                            If.parent = sf, If.treeBranch = [
                                Ef,
                                Ff
                            ];
                        Ff += 1;
                    }
                    Ef += 1;
                }
                return sf.isDirty = !0, Cf;
            }(jf, this, lf, this.colFormat), nf.leftDelim && (this.leftDelim = nf.leftDelim), nf.rightDelim && (this.rightDelim = nf.rightDelim), void 0 !== nf.jot && (this.jot = nf.jot), nf.arraycolsep && (this.arraycolsep = nf.arraycolsep), this.colSeparationType = nf.colSeparationType, this.arraystretch = null !== (pf = nf.arraystretch) && void 0 !== pf ? pf : 1, this.minColumns = null !== (qf = nf.minColumns) && void 0 !== qf ? qf : 1;
        }
    }

    function _jf(kf) {
        const lf = new Kd('first', kf.context, {
            mode: kf.mode
        });
        lf.parent = kf;
        const mf = new Pe(kf.context, {
            mode: kf.mode
        });
        return mf.parent = kf, [
            lf,
            mf
        ];
    }

    function _mf(nf) {
        const pf = new Ic(null, {
            classes: 'arraycolsep'
        });
        return pf.width = nf, pf;
    }

    function _pf(qf, rf, sf, tf) {
        if (!tf)
            return null;
        const uf = [];
        for (const vf of rf) {
            const wf = Kd.createBox(qf, tf, {
                newList: !0
            });
            rf && (rf.depth = f.depth, rf.height = f.height, e.push({
                box: rf,
                shift: f.pos - sf
            }));
        }
        return new Yc({
            individualShift: e
        }).wrap(qf);
    }
    class tf extends Kd {
        static fromJson(uf, vf) {
            return new tf(uf.value, vf, uf);
        }
        toJson() {
            return super.toJson();
        }
        get computedStyle() {
            return {};
        }
        render(uf) {
            const vf = new Ic(this.value, {
                classes: 'ML__composition',
                type: 'composition'
            });
            return this.bind(uf, vf), this.caret && (vf.caret = this.caret), vf;
        }
        serialize(uf) {
            return '';
        }
        constructor(uf, vf, wf) {
            var xf;
            super('composition', vf, {
                mode: null !== (xf = null == wf ? void 0 : wf.mode) && void 0 !== xf ? xf : 'math',
                value: uf
            });
        }
    }
    class uf extends Kd {
        static fromJson(vf, wf) {
            return new uf(vf.command, vf.arg, wf);
        }
        toJson() {
            return {
                ...super.toJson(),
                arg: this.arg
            };
        }
        render(vf) {
            const wf = Kd.createBox(vf, this.body, {
                type: 'chem',
                newList: !0
            });
            return this.caret && (wf.caret = this.caret), this.bind(vf, wf);
        }
        serialize(vf) {
            return this.verbatimLatex;
        }
        constructor(vf, wf, xf) {
            super('chem', xf, {
                command: vf,
                mode: 'math'
            });
            const yf = _wf.go(_vf.go(wf, '\\pu' === vf ? 'pu' : 'ce'), !1);
            this.body = _Ve(yf, xf), this.verbatimLatex = vf + '{' + wf + '}', this.arg = wf, this.captureSelection = !0;
        }
    }
    tb([
        'ce',
        'pu'
    ], '{chemformula:balanced-string}', {
        createAtom: (vf, wf, xf, yf) => new uf(vf, wf[0], yf)
    });
    var _vf = {
        go: function(wf, xf) {
            if (!wf)
                return [];
            void 0 === xf && (xf = 'ce');
            var yf, zf = '0',
                Af = {
                    parenthesisLevel: 0
                };
            wf = (wf = (wf = wf.replace(/\n/g, ' ')).replace(/[\u2212\u2013\u2014\u2010]/g, '-')).replace(/[\u2026]/g, '...');
            for (var Bf = 10, Cf = [];;) {
                yf !== wf ? (Bf = 10, yf = wf) : Bf--;
                var Df = _vf.stateMachines[xf],
                    Ef = Df.transitions[zf] || Df.transitions['*'];
                e:
                    for (var Ff = 0; Ff < Ef.length; Ff++) {
                        var Gf = _vf.patterns.match_(Ef[Ff].pattern, wf);
                        if (Gf) {
                            for (var Hf = Ef[Ff].task, If = 0; If < Hf.action_.length; If++) {
                                var Jf;
                                if (Df.actions[Hf.action_[If].type_])
                                    Jf = Df.actions[Hf.action_[If].type_](Af, Gf.match_, Hf.action_[If].option);
                                else {
                                    if (!_vf.actions[Hf.action_[If].type_])
                                        throw [
                                            'MhchemBugA',
                                            'mhchem bug A. Please report. (' + Hf.action_[If].type_ + ')'
                                        ];
                                    Jf = _vf.actions[Hf.action_[If].type_](Af, Gf.match_, Hf.action_[If].option);
                                }
                                _vf.concatArray(Cf, Jf);
                            }
                            if (zf = Hf.nextState || zf, !(wf.length > 0))
                                return Cf;
                            if (Hf.revisit || (wf = Gf.remainder), !Hf.toContinue)
                                break e;
                        }
                    }
                if (Bf <= 0)
                    throw [
                        'MhchemBugU',
                        'mhchem bug U. Please report.'
                    ];
            }
        },
        concatArray: function(wf, xf) {
            if (xf)
                if (Array.isArray(xf))
                    for (var yf = 0; yf < xf.length; yf++)
                        wf.push(xf[yf]);
                else
                    wf.push(xf);
        },
        patterns: {
            patterns: {
                empty: /^$/,
                else: /^./,
                else2: /^./,
                space: /^\s/,
                'space A': /^\s(?=[A-Z\\$])/,
                space$: /^\s$/,
                'a-z': /^[a-z]/,
                x: /^x/,
                x$: /^x$/,
                i$: /^i$/,
                letters: /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
                '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
                'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
                '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
                'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
                digits: /^[0-9]+/,
                '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
                '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
                '(-)(9.,9)(e)(99)': function(wf) {
                    var xf = wf.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
                    return xf && xf[0] ? {
                        match_: xf.splice(1),
                        remainder: wf.substr(xf[0].length)
                    } : null;
                },
                '(-)(9)^(-9)': function(wf) {
                    var xf = wf.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);
                    return xf && xf[0] ? {
                        match_: xf.splice(1),
                        remainder: wf.substr(xf[0].length)
                    } : null;
                },
                'state of aggregation $': function(wf) {
                    var xf = _vf.patterns.findObserveGroups(wf, '', /^\([a-z]{1,3}(?=[\),])/, ')', '');
                    if (xf && xf.remainder.match(/^($|[\s,;\)\]\}])/))
                        return xf;
                    var yf = wf.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);
                    return yf ? {
                        match_: yf[0],
                        remainder: wf.substr(yf[0].length)
                    } : null;
                },
                '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
                '{[(': /^(?:\\\{|\[|\()/,
                ')]}': /^(?:\)|\]|\\\})/,
                ', ': /^[,;]\s*/,
                ',': /^[,;]/,
                '.': /^[.]/,
                '. ': /^([.\u22C5\u00B7\u2022])\s*/,
                '...': /^\.\.\.(?=$|[^.])/,
                '* ': /^([*])\s*/,
                '^{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '^{', '', '', '}');
                },
                '^($...$)': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '^', '$', '$', '');
                },
                '^a': /^\^([0-9]+|[^\\_])/,
                '^\\x{}{}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '^', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '^\\x{}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '^', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
                '^(-1)': /^\^(-?\d+)/,
                '\'': /^'/,
                '_{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '_{', '', '', '}');
                },
                '_($...$)': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '_', '$', '$', '');
                },
                _9: /^_([+\-]?[0-9]+|[^\\])/,
                '_\\x{}{}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '_', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '_\\x{}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '_', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '_\\x': /^_(\\[a-zA-Z]+)\s*/,
                '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
                '{}': /^\{\}/,
                '{...}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '', '{', '}', '');
                },
                '{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '{', '', '', '}');
                },
                '$...$': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '', '$', '$', '');
                },
                '${(...)}$': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '${', '', '', '}$');
                },
                '$(...)$': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '$', '', '', '$');
                },
                '=<>': /^[=<>]/,
                '#': /^[#\u2261]/,
                '+': /^\+/,
                '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
                '-9': /^-(?=[0-9])/,
                '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
                '-': /^-/,
                'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
                operator: /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
                arrowUpDown: /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
                '\\bond{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\bond{', '', '', '}');
                },
                '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
                CMT: /^[CMT](?=\[)/,
                '[(...)]': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '[', '', '', ']');
                },
                '1st-level escape': /^(&|\\\\|\\hline)\s*/,
                '\\,': /^(?:\\[,\ ;:])/,
                '\\x{}{}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', !0);
                },
                '\\x{}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '', /^\\[a-zA-Z]+\{/, '}', '');
                },
                '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
                '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
                orbital: /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
                others: /^[\/~|]/,
                '\\frac{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\frac{', '', '', '}', '{', '', '', '}');
                },
                '\\overset{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\overset{', '', '', '}', '{', '', '', '}');
                },
                '\\underset{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\underset{', '', '', '}', '{', '', '', '}');
                },
                '\\underbrace{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\underbrace{', '', '', '}_', '{', '', '', '}');
                },
                '\\color{(...)}0': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\color{', '', '', '}');
                },
                '\\color{(...)}{(...)}1': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\color{', '', '', '}', '{', '', '', '}');
                },
                '\\color(...){(...)}2': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\color', '\\', '', /^(?=\{)/, '{', '', '', '}');
                },
                '\\ce{(...)}': function(wf) {
                    return _vf.patterns.findObserveGroups(wf, '\\ce{', '', '', '}');
                },
                oxidation$: /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'd-oxidation$': /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
                'roman numeral': /^[IVX]+/,
                '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
                amount: function(wf) {
                    var xf;
                    if (xf = wf.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/))
                        return {
                            match_: xf[0],
                            remainder: wf.substr(xf[0].length)
                        };
                    var yf = _vf.patterns.findObserveGroups(wf, '', '$', '$', '');
                    return yf && (xf = yf.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/)) ? {
                        match_: xf[0],
                        remainder: wf.substr(xf[0].length)
                    } : null;
                },
                amount2: function(wf) {
                    return this.amount(wf);
                },
                '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
                formula$: function(wf) {
                    if (wf.match(/^\([a-z]+\)$/))
                        return null;
                    var xf = wf.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
                    return xf ? {
                        match_: xf[0],
                        remainder: wf.substr(xf[0].length)
                    } : null;
                },
                uprightEntities: /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
                '/': /^\s*(\/)\s*/,
                '//': /^\s*(\/\/)\s*/,
                '*': /^\s*[*.]\s*/
            },
            findObserveGroups: function(wf, xf, yf, zf, Af, Bf, Cf, Df, Ef, Ff) {
                var Gf = function(Hf, If) {
                        if ('string' == typeof If)
                            return 0 !== Hf.indexOf(If) ? null : If;
                        var Jf = Hf.match(If);
                        return Jf ? Jf[0] : null;
                    },
                    Hf = Gf(wf, xf);
                if (null === Hf)
                    return null;
                if (wf = wf.substr(Hf.length), null === (Hf = Gf(wf, yf)))
                    return null;
                var If = function(Jf, Kf, Lf) {
                    for (var Mf = 0; Kf < Jf.length;) {
                        var Nf = Jf.charAt(Kf),
                            Of = Gf(Jf.substr(Kf), Lf);
                        if (null !== Of && 0 === Mf)
                            return {
                                endMatchBegin: Kf,
                                endMatchEnd: Kf + Of.length
                            };
                        if ('{' === Nf)
                            Mf++;
                        else if ('}' === Nf) {
                            if (0 === Mf)
                                throw [
                                    'ExtraCloseMissingOpen',
                                    'Extra close brace or missing open brace'
                                ];
                            Mf--;
                        }
                        Kf++;
                    }
                    return null;
                }(wf, Hf.length, zf || Af);
                if (null === If)
                    return null;
                var Jf = wf.substring(0, zf ? If.endMatchEnd : If.endMatchBegin);
                if (Bf || Cf) {
                    var Kf = this.findObserveGroups(wf.substr(If.endMatchEnd), Bf, Cf, Df, Ef);
                    if (null === Kf)
                        return null;
                    var Lf = [
                        Jf,
                        Kf.match_
                    ];
                    return {
                        match_: Ff ? Lf.join('') : Lf,
                        remainder: Kf.remainder
                    };
                }
                return {
                    match_: Jf,
                    remainder: wf.substr(If.endMatchEnd)
                };
            },
            match_: function(wf, xf) {
                var yf = _vf.patterns.patterns[wf];
                if (void 0 === yf)
                    throw [
                        'MhchemBugP',
                        'mhchem bug P. Please report. (' + wf + ')'
                    ];
                if ('function' == typeof yf)
                    return _vf.patterns.patterns[wf](xf);
                var zf = xf.match(yf);
                return zf ? {
                    match_: zf[2] ? [
                        zf[1],
                        zf[2]
                    ] : zf[1] ? zf[1] : zf[0],
                    remainder: xf.substr(zf[0].length)
                } : null;
            }
        },
        actions: {
            'a=': function(wf, xf) {
                wf.a = (wf.a || '') + xf;
            },
            'b=': function(wf, xf) {
                wf.b = (wf.b || '') + xf;
            },
            'p=': function(wf, xf) {
                wf.p = (wf.p || '') + xf;
            },
            'o=': function(wf, xf) {
                wf.o = (wf.o || '') + xf;
            },
            'q=': function(wf, xf) {
                wf.q = (wf.q || '') + xf;
            },
            'd=': function(wf, xf) {
                wf.d = (wf.d || '') + xf;
            },
            'rm=': function(wf, xf) {
                wf.rm = (wf.rm || '') + xf;
            },
            'text=': function(wf, xf) {
                wf.text_ = (wf.text_ || '') + xf;
            },
            insert: function(wf, xf, yf) {
                return {
                    type_: yf
                };
            },
            'insert+p1': function(wf, xf, yf) {
                return {
                    type_: yf,
                    p1: xf
                };
            },
            'insert+p1+p2': function(wf, xf, yf) {
                return {
                    type_: yf,
                    p1: xf[0],
                    p2: xf[1]
                };
            },
            copy: function(wf, xf) {
                return xf;
            },
            rm: function(wf, xf) {
                return {
                    type_: 'rm',
                    p1: xf || ''
                };
            },
            text: function(wf, xf) {
                return _vf.go(xf, 'text');
            },
            '{text}': function(wf, xf) {
                var yf = ['{'];
                return _vf.concatArray(yf, _vf.go(xf, 'text')), yf.push('}'), yf;
            },
            'tex-math': function(wf, xf) {
                return _vf.go(xf, 'tex-math');
            },
            'tex-math tight': function(wf, xf) {
                return _vf.go(xf, 'tex-math tight');
            },
            bond: function(wf, xf, yf) {
                return {
                    type_: 'bond',
                    kind_: yf || xf
                };
            },
            'color0-output': function(wf, xf) {
                return {
                    type_: 'color0',
                    color: xf[0]
                };
            },
            ce: function(wf, xf) {
                return _vf.go(xf);
            },
            '1/2': function(wf, xf) {
                var yf = [];
                xf.match(/^[+\-]/) && (yf.push(xf.substr(0, 1)), xf = xf.substr(1));
                var zf = xf.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
                return zf[1] = zf[1].replace(/\$/g, ''), yf.push({
                    type_: 'frac',
                    p1: zf[1],
                    p2: zf[2]
                }), zf[3] && (zf[3] = zf[3].replace(/\$/g, ''), yf.push({
                    type_: 'tex-math',
                    p1: zf[3]
                })), yf;
            },
            '9,9': function(wf, xf) {
                return _vf.go(xf, '9,9');
            }
        },
        createTransitions: function(wf) {
            var xf, yf, zf, Af, Bf = {};
            for (xf in wf)
                for (yf in wf[xf])
                    for (zf = yf.split('|'), wf[xf][yf].stateArray = zf, Af = 0; Af < zf.length; Af++)
                        Bf[zf[Af]] = [];
            for (xf in wf)
                for (yf in wf[xf])
                    for (zf = wf[xf][yf].stateArray || [], Af = 0; Af < zf.length; Af++) {
                        var Cf = wf[xf][yf];
                        if (Cf.action_) {
                            Cf.action_ = [].concat(Cf.action_);
                            for (var Df = 0; Df < Cf.action_.length; Df++)
                                'string' == typeof Cf.action_[Df] && (Cf.action_[Df] = {
                                    type_: Cf.action_[Df]
                                });
                        } else
                            Cf.action_ = [];
                        for (var Ef = xf.split('|'), Ff = 0; Ff < Ef.length; Ff++)
                            if ('*' === zf[Af])
                                for (var Gf in Bf)
                                    Bf[Gf].push({
                                        pattern: Ef[Ff],
                                        task: Cf
                                    });
                            else
                                Bf[zf[Af]].push({
                                    pattern: Ef[Ff],
                                    task: Cf
                                });
                    }
            return Bf;
        },
        stateMachines: {}
    };
    _vf.stateMachines = {
        ce: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                else: {
                    '0|1|2': {
                        action_: 'beginsWithBond=false',
                        revisit: !0,
                        toContinue: !0
                    }
                },
                oxidation$: {
                    0: {
                        action_: 'oxidation-output'
                    }
                },
                CMT: {
                    r: {
                        action_: 'rdt=',
                        nextState: 'rt'
                    },
                    rd: {
                        action_: 'rqt=',
                        nextState: 'rdt'
                    }
                },
                arrowUpDown: {
                    '0|1|2|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '1'
                    }
                },
                uprightEntities: {
                    '0|1|2': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '1'
                    }
                },
                orbital: {
                    '0|1|2|3': {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                '->': {
                    '0|1|2|3': {
                        action_: 'r=',
                        nextState: 'r'
                    },
                    'a|as': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    },
                    '*': {
                        action_: [
                            'output',
                            'r='
                        ],
                        nextState: 'r'
                    }
                },
                '+': {
                    o: {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    'd|D': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qd|qD': {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    3: {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                amount: {
                    '0|2': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                'pm-operator': {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            {
                                type_: 'operator',
                                option: '\\pm'
                            }
                        ],
                        nextState: '0'
                    }
                },
                operator: {
                    '0|1|2|a|as': {
                        action_: [
                            'sb=false',
                            'output',
                            'operator'
                        ],
                        nextState: '0'
                    }
                },
                '-$': {
                    'o|q': {
                        action_: [
                            'charge or bond',
                            'output'
                        ],
                        nextState: 'qd'
                    },
                    d: {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    D: {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    qd: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'qD|dq': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '-9': {
                    '3|o': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '- orbital overlap': {
                    o: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    d: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    }
                },
                '-': {
                    '0|1|2': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'beginsWithBond=true',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    3: {
                        action_: {
                            type_: 'bond',
                            option: '-'
                        }
                    },
                    a: {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'hyphen'
                            }
                        ],
                        nextState: '2'
                    },
                    as: {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    },
                    b: {
                        action_: 'b='
                    },
                    o: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    q: {
                        action_: {
                            type_: '- after o/d',
                            option: !1
                        },
                        nextState: '2'
                    },
                    'd|qd|dq': {
                        action_: {
                            type_: '- after o/d',
                            option: !0
                        },
                        nextState: '2'
                    },
                    'D|qD|p': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '-'
                            }
                        ],
                        nextState: '3'
                    }
                },
                amount2: {
                    '1|3': {
                        action_: 'a=',
                        nextState: 'a'
                    }
                },
                letters: {
                    '0|1|2|3|a|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'q|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    'd|D|qd|qD': {
                        action_: 'o after d',
                        nextState: 'o'
                    }
                },
                digits: {
                    o: {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    q: {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    },
                    a: {
                        action_: 'o=',
                        nextState: 'o'
                    }
                },
                'space A': {
                    'b|p|bp': {}
                },
                space: {
                    a: {
                        nextState: 'as'
                    },
                    0: {
                        action_: 'sb=false'
                    },
                    '1|2': {
                        action_: 'sb=true'
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: 'output',
                        nextState: '0'
                    },
                    '*': {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1'
                    }
                },
                '1st-level escape': {
                    '1|2': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ]
                    },
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert+p1',
                                option: '1st-level escape'
                            }
                        ],
                        nextState: '0'
                    }
                },
                '[(...)]': {
                    'r|rt': {
                        action_: 'rd=',
                        nextState: 'rd'
                    },
                    'rd|rdt': {
                        action_: 'rq=',
                        nextState: 'rdq'
                    }
                },
                '...': {
                    'o|d|D|dq|qd|qD': {
                        action_: [
                            'output',
                            {
                                type_: 'bond',
                                option: '...'
                            }
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            {
                                type_: 'insert',
                                option: 'ellipsis'
                            }
                        ],
                        nextState: '1'
                    }
                },
                '. |* ': {
                    '*': {
                        action_: [
                            'output',
                            {
                                type_: 'insert',
                                option: 'addition compound'
                            }
                        ],
                        nextState: '1'
                    }
                },
                'state of aggregation $': {
                    '*': {
                        action_: [
                            'output',
                            'state of aggregation'
                        ],
                        nextState: '1'
                    }
                },
                '{[(': {
                    'a|as|o': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '0|1|2|3': {
                        action_: [
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output',
                            'parenthesisLevel++'
                        ],
                        nextState: '2'
                    }
                },
                ')]}': {
                    '0|1|2|3|b|p|bp|o': {
                        action_: [
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    },
                    'a|as|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o=',
                            'parenthesisLevel--'
                        ],
                        nextState: 'o'
                    }
                },
                ', ': {
                    '*': {
                        action_: [
                            'output',
                            'comma'
                        ],
                        nextState: '0'
                    }
                },
                '^_': {
                    '*': {}
                },
                '^{(...)}|^($...$)': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'D'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qD'
                    },
                    'd|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'D'
                    }
                },
                '^a|^\\x{}{}|^\\x{}|^\\x|\'': {
                    '0|1|2|as': {
                        action_: 'b=',
                        nextState: 'b'
                    },
                    p: {
                        action_: 'b=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'd= kv',
                        nextState: 'd'
                    },
                    q: {
                        action_: 'd=',
                        nextState: 'qd'
                    },
                    'd|qd|D|qD': {
                        action_: 'd='
                    },
                    dq: {
                        action_: [
                            'output',
                            'd='
                        ],
                        nextState: 'd'
                    }
                },
                '_{(state of aggregation)}$': {
                    'd|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
                    '0|1|2|as': {
                        action_: 'p=',
                        nextState: 'p'
                    },
                    b: {
                        action_: 'p=',
                        nextState: 'bp'
                    },
                    '3|o': {
                        action_: 'q=',
                        nextState: 'q'
                    },
                    'd|D': {
                        action_: 'q=',
                        nextState: 'dq'
                    },
                    'q|qd|qD|dq': {
                        action_: [
                            'output',
                            'q='
                        ],
                        nextState: 'q'
                    }
                },
                '=<>': {
                    '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '#': {
                    '0|1|2|3|a|as|o': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            {
                                type_: 'bond',
                                option: '#'
                            }
                        ],
                        nextState: '3'
                    }
                },
                '{}': {
                    '*': {
                        action_: {
                            type_: 'output',
                            option: 1
                        },
                        nextState: '1'
                    }
                },
                '{...}': {
                    '0|1|2|3|a|as|b|p|bp': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'o|d|D|q|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '$...$': {
                    a: {
                        action_: 'a='
                    },
                    '0|1|2|3|as|b|p|bp|o': {
                        action_: 'o=',
                        nextState: 'o'
                    },
                    'as|o': {
                        action_: 'o='
                    },
                    'q|d|D|qd|qD|dq': {
                        action_: [
                            'output',
                            'o='
                        ],
                        nextState: 'o'
                    }
                },
                '\\bond{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'bond'
                        ],
                        nextState: '3'
                    }
                },
                '\\frac{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'frac-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\overset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'overset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underset{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underset-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\underbrace{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'underbrace-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color-output'
                        ],
                        nextState: '3'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'color0-output'
                        ]
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 2
                            },
                            'ce'
                        ],
                        nextState: '3'
                    }
                },
                '\\,': {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '1'
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '0|1|2|3|a|as|b|p|bp|o|c0': {
                        action_: [
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    },
                    '*': {
                        action_: [
                            'output',
                            'o=',
                            'output'
                        ],
                        nextState: '3'
                    }
                },
                others: {
                    '*': {
                        action_: [{
                                type_: 'output',
                                option: 1
                            },
                            'copy'
                        ],
                        nextState: '3'
                    }
                },
                else2: {
                    a: {
                        action_: 'a to o',
                        nextState: 'o',
                        revisit: !0
                    },
                    as: {
                        action_: [
                            'output',
                            'sb=true'
                        ],
                        nextState: '1',
                        revisit: !0
                    },
                    'r|rt|rd|rdt|rdq': {
                        action_: ['output'],
                        nextState: '0',
                        revisit: !0
                    },
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ],
                        nextState: '3'
                    }
                }
            }),
            actions: {
                'o after d': function(wf, xf) {
                    var yf;
                    if ((wf.d || '').match(/^[0-9]+$/)) {
                        var zf = wf.d;
                        wf.d = void 0, yf = this.output(wf), wf.b = zf;
                    } else
                        yf = this.output(wf);
                    return _vf.actions['o='](wf, xf), yf;
                },
                'd= kv': function(wf, xf) {
                    wf.d = xf, wf.dType = 'kv';
                },
                'charge or bond': function(wf, xf) {
                    if (wf.beginsWithBond) {
                        var yf = [];
                        return _vf.concatArray(yf, this.output(wf)), _vf.concatArray(yf, _vf.actions.bond(wf, xf, '-')), yf;
                    }
                    wf.d = xf;
                },
                '- after o/d': function(wf, xf, yf) {
                    var zf = _vf.patterns.match_('orbital', wf.o || ''),
                        Af = _vf.patterns.match_('one lowercase greek letter $', wf.o || ''),
                        Bf = _vf.patterns.match_('one lowercase latin letter $', wf.o || ''),
                        Cf = _vf.patterns.match_('$one lowercase latin letter$ $', wf.o || ''),
                        Df = '-' === xf && (zf && '' === zf.remainder || Af || Bf || Cf);
                    !Df || wf.a || wf.b || wf.p || wf.d || wf.q || zf || !Bf || (wf.o = '$' + wf.o + '$');
                    var Ef = [];
                    return Df ? (_vf.concatArray(Ef, this.output(wf)), Ef.push({
                        type_: 'hyphen'
                    })) : (zf = _vf.patterns.match_('digits', wf.d || ''), yf && zf && '' === zf.remainder ? (_vf.concatArray(Ef, _vf.actions['d='](wf, xf)), _vf.concatArray(Ef, this.output(wf))) : (_vf.concatArray(Ef, this.output(wf)), _vf.concatArray(Ef, _vf.actions.bond(wf, xf, '-')))), Ef;
                },
                'a to o': function(wf) {
                    wf.o = wf.a, wf.a = void 0;
                },
                'sb=true': function(wf) {
                    wf.sb = !0;
                },
                'sb=false': function(wf) {
                    wf.sb = !1;
                },
                'beginsWithBond=true': function(wf) {
                    wf.beginsWithBond = !0;
                },
                'beginsWithBond=false': function(wf) {
                    wf.beginsWithBond = !1;
                },
                'parenthesisLevel++': function(wf) {
                    wf.parenthesisLevel++;
                },
                'parenthesisLevel--': function(wf) {
                    wf.parenthesisLevel--;
                },
                'state of aggregation': function(wf, xf) {
                    return {
                        type_: 'state of aggregation',
                        p1: _vf.go(xf, 'o')
                    };
                },
                comma: function(wf, xf) {
                    var yf = xf.replace(/\s*$/, '');
                    return yf !== xf && 0 === wf.parenthesisLevel ? {
                        type_: 'comma enumeration L',
                        p1: yf
                    } : {
                        type_: 'comma enumeration M',
                        p1: yf
                    };
                },
                output: function(wf, xf, yf) {
                    var zf, Af, Bf;
                    for (var Cf in (wf.r ? (Af = 'M' === wf.rdt ? _vf.go(wf.rd, 'tex-math') : 'T' === wf.rdt ? [{
                            type_: 'text',
                            p1: wf.rd || ''
                        }] : _vf.go(wf.rd), Bf = 'M' === wf.rqt ? _vf.go(wf.rq, 'tex-math') : 'T' === wf.rqt ? [{
                            type_: 'text',
                            p1: wf.rq || ''
                        }] : _vf.go(wf.rq), zf = {
                            type_: 'arrow',
                            r: wf.r,
                            rd: Af,
                            rq: Bf
                        }) : (zf = [], (wf.a || wf.b || wf.p || wf.o || wf.q || wf.d || yf) && (wf.sb && zf.push({
                            type_: 'entitySkip'
                        }), wf.o || wf.q || wf.d || wf.b || wf.p || 2 === yf ? wf.o || wf.q || wf.d || !wf.b && !wf.p ? wf.o && 'kv' === wf.dType && _vf.patterns.match_('d-oxidation$', wf.d || '') ? wf.dType = 'oxidation' : wf.o && 'kv' === wf.dType && !wf.q && (wf.dType = void 0) : (wf.o = wf.a, wf.d = wf.b, wf.q = wf.p, wf.a = wf.b = wf.p = void 0) : (wf.o = wf.a, wf.a = void 0), zf.push({
                            type_: 'chemfive',
                            a: _vf.go(wf.a, 'a'),
                            b: _vf.go(wf.b, 'bd'),
                            p: _vf.go(wf.p, 'pq'),
                            o: _vf.go(wf.o, 'o'),
                            q: _vf.go(wf.q, 'pq'),
                            d: _vf.go(wf.d, 'oxidation' === wf.dType ? 'oxidation' : 'bd'),
                            dType: wf.dType
                        }))), wf))
                        'parenthesisLevel' !== Cf && 'beginsWithBond' !== Cf && delete wf[Cf];
                    return zf;
                },
                'oxidation-output': function(wf, xf) {
                    var yf = ['{'];
                    return _vf.concatArray(yf, _vf.go(xf, 'oxidation')), yf.push('}'), yf;
                },
                'frac-output': function(wf, xf) {
                    return {
                        type_: 'frac-ce',
                        p1: _vf.go(xf[0]),
                        p2: _vf.go(xf[1])
                    };
                },
                'overset-output': function(wf, xf) {
                    return {
                        type_: 'overset',
                        p1: _vf.go(xf[0]),
                        p2: _vf.go(xf[1])
                    };
                },
                'underset-output': function(wf, xf) {
                    return {
                        type_: 'underset',
                        p1: _vf.go(xf[0]),
                        p2: _vf.go(xf[1])
                    };
                },
                'underbrace-output': function(wf, xf) {
                    return {
                        type_: 'underbrace',
                        p1: _vf.go(xf[0]),
                        p2: _vf.go(xf[1])
                    };
                },
                'color-output': function(wf, xf) {
                    return {
                        type_: 'color',
                        color1: xf[0],
                        color2: _vf.go(xf[1])
                    };
                },
                'r=': function(wf, xf) {
                    wf.r = xf;
                },
                'rdt=': function(wf, xf) {
                    wf.rdt = xf;
                },
                'rd=': function(wf, xf) {
                    wf.rd = xf;
                },
                'rqt=': function(wf, xf) {
                    wf.rqt = xf;
                },
                'rq=': function(wf, xf) {
                    wf.rq = xf;
                },
                operator: function(wf, xf, yf) {
                    return {
                        type_: 'operator',
                        kind_: yf || xf
                    };
                }
            }
        },
        a: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                '$(...)$': {
                    '*': {
                        action_: 'tex-math tight',
                        nextState: '1'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'commaDecimal'
                        }
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        o: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {}
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '1',
                        revisit: !0
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\\ca': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'circa'
                        }
                    }
                },
                '\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: '{text}'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {}
        },
        text: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '{...}': {
                    '*': {
                        action_: 'text='
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '\\greek': {
                    '*': {
                        action_: [
                            'output',
                            'rm'
                        ]
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: [
                            'output',
                            'copy'
                        ]
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                output: function(wf) {
                    if (wf.text_) {
                        var xf = {
                            type_: 'text',
                            p1: wf.text_
                        };
                        for (var yf in wf)
                            delete wf[yf];
                        return xf;
                    }
                }
            }
        },
        pq: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {}
                },
                'state of aggregation $': {
                    '*': {
                        action_: 'state of aggregation'
                    }
                },
                i$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '(KV letters),': {
                    0: {
                        action_: 'rm',
                        nextState: '0'
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                '1/2$': {
                    0: {
                        action_: '1/2'
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '-9.,9': {
                    '*': {
                        action_: '9,9'
                    }
                },
                ',': {
                    '*': {
                        action_: {
                            type_: 'insert+p1',
                            option: 'comma enumeration S'
                        }
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'state of aggregation': function(wf, xf) {
                    return {
                        type_: 'state of aggregation subscript',
                        p1: _vf.go(xf, 'o')
                    };
                },
                'color-output': function(wf, xf) {
                    return {
                        type_: 'color',
                        color1: xf[0],
                        color2: _vf.go(xf[1], 'pq')
                    };
                }
            }
        },
        bd: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {}
                },
                x$: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                formula$: {
                    0: {
                        nextState: 'f',
                        revisit: !0
                    }
                },
                else: {
                    0: {
                        nextState: '!f',
                        revisit: !0
                    }
                },
                '-9.,9 no missing 0': {
                    '*': {
                        action_: '9,9'
                    }
                },
                '.': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'electron dot'
                        }
                    }
                },
                'a-z': {
                    f: {
                        action_: 'tex-math'
                    }
                },
                x: {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'KV x'
                        }
                    }
                },
                letters: {
                    '*': {
                        action_: 'rm'
                    }
                },
                '\'': {
                    '*': {
                        action_: {
                            type_: 'insert',
                            option: 'prime'
                        }
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                '{(...)}': {
                    '*': {
                        action_: 'text'
                    }
                },
                '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                    '*': {
                        action_: 'color-output'
                    }
                },
                '\\color{(...)}0': {
                    '*': {
                        action_: 'color0-output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: 'ce'
                    }
                },
                '\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'copy'
                    }
                },
                else2: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'color-output': function(wf, xf) {
                    return {
                        type_: 'color',
                        color1: xf[0],
                        color2: _vf.go(xf[1], 'bd')
                    };
                }
            }
        },
        oxidation: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {}
                },
                'roman numeral': {
                    '*': {
                        action_: 'roman-numeral'
                    }
                },
                '${(...)}$|$(...)$': {
                    '*': {
                        action_: 'tex-math'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                'roman-numeral': function(wf, xf) {
                    return {
                        type_: 'roman numeral',
                        p1: xf || ''
                    };
                }
            }
        },
        'tex-math': {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                output: function(wf) {
                    if (wf.o) {
                        var xf = {
                            type_: 'tex-math',
                            p1: wf.o
                        };
                        for (var yf in wf)
                            delete wf[yf];
                        return xf;
                    }
                }
            }
        },
        'tex-math tight': {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '\\ce{(...)}': {
                    '*': {
                        action_: [
                            'output',
                            'ce'
                        ]
                    }
                },
                '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                    '*': {
                        action_: 'o='
                    }
                },
                '-|+': {
                    '*': {
                        action_: 'tight operator'
                    }
                },
                else: {
                    '*': {
                        action_: 'o='
                    }
                }
            }),
            actions: {
                'tight operator': function(wf, xf) {
                    wf.o = (wf.o || '') + '{' + xf + '}';
                },
                output: function(wf) {
                    if (wf.o) {
                        var xf = {
                            type_: 'tex-math',
                            p1: wf.o
                        };
                        for (var yf in wf)
                            delete wf[yf];
                        return xf;
                    }
                }
            }
        },
        '9,9': {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {}
                },
                ',': {
                    '*': {
                        action_: 'comma'
                    }
                },
                else: {
                    '*': {
                        action_: 'copy'
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                }
            }
        },
        pu: {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                space$: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ]
                    }
                },
                '{[(|)]}': {
                    '0|a': {
                        action_: 'copy'
                    }
                },
                '(-)(9)^(-9)': {
                    0: {
                        action_: 'number^',
                        nextState: 'a'
                    }
                },
                '(-)(9.,9)(e)(99)': {
                    0: {
                        action_: 'enumber',
                        nextState: 'a'
                    }
                },
                space: {
                    '0|a': {}
                },
                'pm-operator': {
                    '0|a': {
                        action_: {
                            type_: 'operator',
                            option: '\\pm'
                        },
                        nextState: '0'
                    }
                },
                operator: {
                    '0|a': {
                        action_: 'copy',
                        nextState: '0'
                    }
                },
                '//': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '/': {
                    d: {
                        action_: 'o=',
                        nextState: '/'
                    }
                },
                '{...}|else': {
                    '0|d': {
                        action_: 'd=',
                        nextState: 'd'
                    },
                    a: {
                        action_: [
                            'space',
                            'd='
                        ],
                        nextState: 'd'
                    },
                    '/|q': {
                        action_: 'q=',
                        nextState: 'q'
                    }
                }
            }),
            actions: {
                enumber: function(wf, xf) {
                    var yf = [];
                    return '+-' === xf[0] || '+/-' === xf[0] ? yf.push('\\pm ') : xf[0] && yf.push(xf[0]), xf[1] && (_vf.concatArray(yf, _vf.go(xf[1], 'pu-9,9')), xf[2] && (xf[2].match(/[,.]/) ? _vf.concatArray(yf, _vf.go(xf[2], 'pu-9,9')) : yf.push(xf[2])), xf[3] = xf[4] || xf[3], xf[3] && (xf[3] = xf[3].trim(), 'e' === xf[3] || '*' === xf[3].substr(0, 1) ? yf.push({
                        type_: 'cdot'
                    }) : yf.push({
                        type_: 'times'
                    }))), xf[3] && yf.push('10^{' + xf[5] + '}'), yf;
                },
                'number^': function(wf, xf) {
                    var yf = [];
                    return '+-' === xf[0] || '+/-' === xf[0] ? yf.push('\\pm ') : xf[0] && yf.push(xf[0]), _vf.concatArray(yf, _vf.go(xf[1], 'pu-9,9')), yf.push('^{' + xf[2] + '}'), yf;
                },
                operator: function(wf, xf, yf) {
                    return {
                        type_: 'operator',
                        kind_: yf || xf
                    };
                },
                space: function() {
                    return {
                        type_: 'pu-space-1'
                    };
                },
                output: function(wf) {
                    var xf, yf = _vf.patterns.match_('{(...)}', wf.d || '');
                    yf && '' === yf.remainder && (wf.d = yf.match_);
                    var zf = _vf.patterns.match_('{(...)}', wf.q || '');
                    if (zf && '' === zf.remainder && (wf.q = zf.match_), wf.d && (wf.d = wf.d.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), wf.d = wf.d.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F')), wf.q) {
                        wf.q = wf.q.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C'), wf.q = wf.q.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F');
                        var Af = {
                            d: _vf.go(wf.d, 'pu'),
                            q: _vf.go(wf.q, 'pu')
                        };
                        '//' === wf.o ? xf = {
                            type_: 'pu-frac',
                            p1: Af.d,
                            p2: Af.q
                        } : (xf = Af.d, Af.d.length > 1 || Af.q.length > 1 ? xf.push({
                            type_: ' / '
                        }) : xf.push({
                            type_: '/'
                        }), _vf.concatArray(xf, Af.q));
                    } else
                        xf = _vf.go(wf.d, 'pu-2');
                    for (var Bf in wf)
                        delete wf[Bf];
                    return xf;
                }
            }
        },
        'pu-2': {
            transitions: _vf.createTransitions({
                empty: {
                    '*': {
                        action_: 'output'
                    }
                },
                '*': {
                    '*': {
                        action_: [
                            'output',
                            'cdot'
                        ],
                        nextState: '0'
                    }
                },
                '\\x': {
                    '*': {
                        action_: 'rm='
                    }
                },
                space: {
                    '*': {
                        action_: [
                            'output',
                            'space'
                        ],
                        nextState: '0'
                    }
                },
                '^{(...)}|^(-1)': {
                    1: {
                        action_: '^(-1)'
                    }
                },
                '-9.,9': {
                    0: {
                        action_: 'rm=',
                        nextState: '0'
                    },
                    1: {
                        action_: '^(-1)',
                        nextState: '0'
                    }
                },
                '{...}|else': {
                    '*': {
                        action_: 'rm=',
                        nextState: '1'
                    }
                }
            }),
            actions: {
                cdot: function() {
                    return {
                        type_: 'tight cdot'
                    };
                },
                '^(-1)': function(wf, xf) {
                    wf.rm += '^{' + xf + '}';
                },
                space: function() {
                    return {
                        type_: 'pu-space-2'
                    };
                },
                output: function(wf) {
                    var xf = [];
                    if (wf.rm) {
                        var yf = _vf.patterns.match_('{(...)}', wf.rm || '');
                        xf = yf && '' === yf.remainder ? _vf.go(yf.match_, 'pu') : {
                            type_: 'rm',
                            p1: wf.rm
                        };
                    }
                    for (var zf in wf)
                        delete wf[zf];
                    return xf;
                }
            }
        },
        'pu-9,9': {
            transitions: _vf.createTransitions({
                empty: {
                    0: {
                        action_: 'output-0'
                    },
                    o: {
                        action_: 'output-o'
                    }
                },
                ',': {
                    0: {
                        action_: [
                            'output-0',
                            'comma'
                        ],
                        nextState: 'o'
                    }
                },
                '.': {
                    0: {
                        action_: [
                            'output-0',
                            'copy'
                        ],
                        nextState: 'o'
                    }
                },
                else: {
                    '*': {
                        action_: 'text='
                    }
                }
            }),
            actions: {
                comma: function() {
                    return {
                        type_: 'commaDecimal'
                    };
                },
                'output-0': function(wf) {
                    var xf = [];
                    if (wf.text_ = wf.text_ || '', wf.text_.length > 4) {
                        var yf = wf.text_.length % 3;
                        0 === yf && (yf = 3);
                        for (var zf = wf.text_.length - 3; zf > 0; zf -= 3)
                            xf.push(wf.text_.substr(zf, 3)), xf.push({
                                type_: '1000 separator'
                            });
                        xf.push(wf.text_.substr(0, yf)), xf.reverse();
                    } else
                        xf.push(wf.text_);
                    for (var Af in wf)
                        delete wf[Af];
                    return xf;
                },
                'output-o': function(wf) {
                    var xf = [];
                    if (wf.text_ = wf.text_ || '', wf.text_.length > 4) {
                        for (var yf = wf.text_.length - 3, zf = 0; zf < yf; zf += 3)
                            xf.push(wf.text_.substr(zf, 3)), xf.push({
                                type_: '1000 separator'
                            });
                        xf.push(wf.text_.substr(zf));
                    } else
                        xf.push(wf.text_);
                    for (var Af in wf)
                        delete wf[Af];
                    return xf;
                }
            }
        }
    };
    var _wf = {
        go: function(xf, yf) {
            if (!xf)
                return '';
            for (var zf = '', Af = !1, Bf = 0; Bf < xf.length; Bf++) {
                var Cf = xf[Bf];
                'string' == typeof Cf ? zf += Cf : (zf += _wf._go2(Cf), '1st-level escape' === Cf.type_ && (Af = !0));
            }
            return yf || Af || !zf || (zf = '{' + zf + '}'), zf;
        },
        _goInner: function(xf) {
            return xf ? _wf.go(xf, !0) : xf;
        },
        _go2: function(xf) {
            var yf;
            switch (xf.type_) {
                case 'chemfive':
                    yf = '';
                    var zf = {
                        a: _wf._goInner(xf.a),
                        b: _wf._goInner(xf.b),
                        p: _wf._goInner(xf.p),
                        o: _wf._goInner(xf.o),
                        q: _wf._goInner(xf.q),
                        d: _wf._goInner(xf.d)
                    };
                    zf.a && (zf.a.match(/^[+\-]/) && (zf.a = '{' + zf.a + '}'), yf += zf.a + '\\,'), (zf.b || zf.p) && (yf += '{\\vphantom{X}}', yf += '^{\\hphantom{' + (zf.b || '') + '}}_{\\hphantom{' + (zf.p || '') + '}}', yf += '{\\vphantom{X}}', yf += '^{\\smash[t]{\\vphantom{2}}\\mathllap{' + (zf.b || '') + '}}', yf += '_{\\vphantom{2}\\mathllap{\\smash[t]{' + (zf.p || '') + '}}}'), zf.o && (zf.o.match(/^[+\-]/) && (zf.o = '{' + zf.o + '}'), yf += zf.o), 'kv' === xf.dType ? ((zf.d || zf.q) && (yf += '{\\vphantom{X}}'), zf.d && (yf += '^{' + zf.d + '}'), zf.q && (yf += '_{\\smash[t]{' + zf.q + '}}')) : 'oxidation' === xf.dType ? (zf.d && (yf += '{\\vphantom{X}}', yf += '^{' + zf.d + '}'), zf.q && (yf += '{\\vphantom{X}}', yf += '_{\\smash[t]{' + zf.q + '}}')) : (zf.q && (yf += '{\\vphantom{X}}', yf += '_{\\smash[t]{' + zf.q + '}}'), zf.d && (yf += '{\\vphantom{X}}', yf += '^{' + zf.d + '}'));
                    break;
                case 'rm':
                case 'roman numeral':
                    yf = '\\mathrm{' + xf.p1 + '}';
                    break;
                case 'text':
                    xf.p1.match(/[\^_]/) ? (xf.p1 = xf.p1.replace(' ', '~').replace('-', '\\text{-}'), yf = '\\mathrm{' + xf.p1 + '}') : yf = '\\text{' + xf.p1 + '}';
                    break;
                case 'state of aggregation':
                    yf = '\\mskip2mu ' + _wf._goInner(xf.p1);
                    break;
                case 'state of aggregation subscript':
                    yf = '\\mskip1mu ' + _wf._goInner(xf.p1);
                    break;
                case 'bond':
                    if (!(yf = _wf._getBond(xf.kind_)))
                        throw [
                            'MhchemErrorBond',
                            'mhchem Error. Unknown bond type (' + xf.kind_ + ')'
                        ];
                    break;
                case 'frac':
                    var Af = '\\frac{' + xf.p1 + '}{' + xf.p2 + '}';
                    yf = '\\mathchoice{\\textstyle' + Af + '}{' + Af + '}{' + Af + '}{' + Af + '}';
                    break;
                case 'pu-frac':
                    var Bf = '\\frac{' + _wf._goInner(xf.p1) + '}{' + _wf._goInner(xf.p2) + '}';
                    yf = '\\mathchoice{\\textstyle' + Bf + '}{' + Bf + '}{' + Bf + '}{' + Bf + '}';
                    break;
                case 'tex-math':
                case '1st-level escape':
                    yf = xf.p1 + ' ';
                    break;
                case 'frac-ce':
                    yf = '\\frac{' + _wf._goInner(xf.p1) + '}{' + _wf._goInner(xf.p2) + '}';
                    break;
                case 'overset':
                    yf = '\\overset{' + _wf._goInner(xf.p1) + '}{' + _wf._goInner(xf.p2) + '}';
                    break;
                case 'underset':
                    yf = '\\underset{' + _wf._goInner(xf.p1) + '}{' + _wf._goInner(xf.p2) + '}';
                    break;
                case 'underbrace':
                    yf = '\\underbrace{' + _wf._goInner(xf.p1) + '}_{' + _wf._goInner(xf.p2) + '}';
                    break;
                case 'color':
                    yf = '{\\color{' + xf.color1 + '}{' + _wf._goInner(xf.color2) + '}}';
                    break;
                case 'color0':
                    yf = '\\color{' + xf.color + '}';
                    break;
                case 'arrow':
                    var Cf = {
                            rd: _wf._goInner(xf.rd),
                            rq: _wf._goInner(xf.rq)
                        },
                        Df = '\\x' + _wf._getArrow(xf.r);
                    Cf.rq && (Df += '[{' + Cf.rq + '}]'), yf = Df += Cf.rd ? '{' + Cf.rd + '}' : '{}';
                    break;
                case 'operator':
                    yf = _wf._getOperator(xf.kind_);
                    break;
                case 'space':
                    yf = ' ';
                    break;
                case 'entitySkip':
                case 'pu-space-1':
                    yf = '~';
                    break;
                case 'pu-space-2':
                    yf = '\\mkern3mu ';
                    break;
                case '1000 separator':
                    yf = '\\mkern2mu ';
                    break;
                case 'commaDecimal':
                    yf = '{,}';
                    break;
                case 'comma enumeration L':
                    yf = '{' + xf.p1 + '}\\mkern6mu ';
                    break;
                case 'comma enumeration M':
                    yf = '{' + xf.p1 + '}\\mkern3mu ';
                    break;
                case 'comma enumeration S':
                    yf = '{' + xf.p1 + '}\\mkern1mu ';
                    break;
                case 'hyphen':
                    yf = '\\text{-}';
                    break;
                case 'addition compound':
                    yf = '\\,{\\cdot}\\,';
                    break;
                case 'electron dot':
                    yf = '\\mkern1mu \\bullet\\mkern1mu ';
                    break;
                case 'KV x':
                    yf = '{\\times}';
                    break;
                case 'prime':
                    yf = '\\prime ';
                    break;
                case 'cdot':
                    yf = '\\cdot ';
                    break;
                case 'tight cdot':
                    yf = '\\mkern1mu{\\cdot}\\mkern1mu ';
                    break;
                case 'times':
                    yf = '\\times ';
                    break;
                case 'circa':
                    yf = '{\\sim}';
                    break;
                case '^':
                    yf = 'uparrow';
                    break;
                case 'v':
                    yf = 'downarrow';
                    break;
                case 'ellipsis':
                    yf = '\\ldots ';
                    break;
                case '/':
                    yf = '/';
                    break;
                case ' / ':
                    yf = '\\,/\\,';
                    break;
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
            return yf;
        },
        _getArrow: function(xf) {
            switch (xf) {
                case '->':
                case '\u2192':
                case '\u27F6':
                    return 'rightarrow';
                case '<-':
                    return 'leftarrow';
                case '<->':
                    return 'leftrightarrow';
                case '<-->':
                    return 'rightleftarrows';
                case '<=>':
                case '\u21CC':
                    return 'rightleftharpoons';
                case '<=>>':
                    return 'rightequilibrium';
                case '<<=>':
                    return 'leftequilibrium';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getBond: function(xf) {
            switch (xf) {
                case '-':
                case '1':
                    return '{-}';
                case '=':
                case '2':
                    return '{=}';
                case '#':
                case '3':
                    return '{\\equiv}';
                case '~':
                    return '{\\tripledash}';
                case '~-':
                    return '{\\mathrlap{\\raisebox{-.1em}{$-$}}\\raisebox{.1em}{$\\tripledash$}}';
                case '~=':
                case '~--':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$\\tripledash$}}-}';
                case '-~-':
                    return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$-$}}\\tripledash}';
                case '...':
                    return '{{\\cdot}{\\cdot}{\\cdot}}';
                case '....':
                    return '{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}';
                case '->':
                    return '{\\rightarrow}';
                case '<-':
                    return '{\\leftarrow}';
                case '<':
                    return '{<}';
                case '>':
                    return '{>}';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        },
        _getOperator: function(xf) {
            switch (xf) {
                case '+':
                    return ' {}+{} ';
                case '-':
                    return ' {}-{} ';
                case '=':
                    return ' {}={} ';
                case '<':
                    return ' {}<{} ';
                case '>':
                    return ' {}>{} ';
                case '<<':
                    return ' {}\\ll{} ';
                case '>>':
                    return ' {}\\gg{} ';
                case '\\pm':
                    return ' {}\\pm{} ';
                case '\\approx':
                case '$\\approx$':
                    return ' {}\\approx{} ';
                case 'v':
                case '(v)':
                    return ' \\downarrow{} ';
                case '^':
                case '(^)':
                    return ' \\uparrow{} ';
                default:
                    throw [
                        'MhchemBugT',
                        'mhchem bug T. Please report.'
                    ];
            }
        }
    };
    class xf extends Kd {
        static fromJson(yf, zf) {
            return new xf(yf.command, yf.delim, zf, yf);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size
            };
        }
        render(yf) {
            const zf = new Ic(null);
            return zf.delim = this.value, zf;
        }
        serialize(yf) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(yf, zf, Af, Bf) {
            super('delim', Af, {
                command: yf,
                style: null == Bf ? void 0 : Bf.style
            }), this.value = zf, this.size = null == Bf ? void 0 : Bf.size;
        }
    }
    class yf extends Kd {
        static fromJson(zf, Af) {
            return new yf(zf.command, zf.delim, Af, zf);
        }
        toJson() {
            return {
                ...super.toJson(),
                delim: this.value,
                size: this.size,
                delimClass: this.delimClass
            };
        }
        render(zf) {
            let Af = function(Bf, Cf, Df, Ef) {
                var Ff;
                return void 0 === Bf || '.' === Bf ? _Ie(Df, null !== (Ff = Ef.type) && void 0 !== Ff ? Ff : 'minner', Ef.classes) : ('<' === Bf || '\\lt' === Bf || '\u27E8' === Bf ? Bf = '\\langle' : '>' !== Bf && '\\gt' !== Bf && '\u27E9' !== Bf || (Bf = '\\rangle'), ue.has(Bf) || we.has(Bf) ? be(Bf, Cf, !1, Df, Ef) : ve.has(Bf) ? ee(Bf, xe[Cf], !1, Df, Ef) : null);
            }(this.value, this.size, zf, {
                classes: this.delimClass
            });
            return Af ? (Af = this.bind(zf, Af), this.caret && (Af.caret = this.caret), Af) : null;
        }
        serialize(zf) {
            return 1 === this.value.length ? this.command + this.value : `${ this.command }{${ this.value }}`;
        }
        constructor(zf, Af, Bf, Cf) {
            super('sizeddelim', Bf, {
                command: zf,
                style: Cf.style
            }), this.value = Af, this.delimClass = Cf.delimClass, this.size = Cf.size;
        }
    }
    class zf extends Kd {
        static fromJson(Af, Bf) {
            return new zf(Af.command, Af.body, Af.notation, Bf, Af);
        }
        toJson() {
            const Af = {};
            return this.notation.downdiagonalstrike && (Af.downdiagonalstrike = !0), this.notation.updiagonalstrike && (Af.downdiagonalstrike = !0), this.notation.verticalstrike && (Af.downdiagonalstrike = !0), this.notation.horizontalstrike && (Af.downdiagonalstrike = !0), this.notation.updiagonalarrow && (Af.downdiagonalstrike = !0), this.notation.right && (Af.downdiagonalstrike = !0), this.notation.bottom && (Af.downdiagonalstrike = !0), this.notation.left && (Af.downdiagonalstrike = !0), this.notation.top && (Af.downdiagonalstrike = !0), this.notation.circle && (Af.downdiagonalstrike = !0), this.notation.roundedbox && (Af.downdiagonalstrike = !0), this.notation.madruwb && (Af.downdiagonalstrike = !0), this.notation.actuarial && (Af.downdiagonalstrike = !0), this.notation.box && (Af.downdiagonalstrike = !0), {
                ...super.toJson(),
                notation: Af,
                shadow: this.shadow,
                strokeWidth: this.strokeWidth,
                strokeStyle: this.strokeStyle,
                svgStrokeStyle: this.svgStrokeStyle,
                strokeColor: this.strokeColor,
                borderStyle: this.borderStyle,
                padding: this.padding
            };
        }
        serialize(Af) {
            var Bf;
            let Cf = null !== (Bf = this.command) && void 0 !== Bf ? Bf : '';
            if ('\\enclose' === this.command) {
                Cf += '{' + Object.keys(this.notation).join(' ') + '}';
                let Df = '',
                    Ef = '';
                this.backgroundcolor && 'transparent' !== this.backgroundcolor && (Df += Ef + 'mathbackground="' + this.backgroundcolor + '"', Ef = ','), this.shadow && 'auto' !== this.shadow && (Df += Ef + 'shadow="' + this.shadow + '"', Ef = ','), this.strokeWidth || 'solid' !== this.strokeStyle ? (Df += Ef + this.borderStyle, Ef = ',') : this.strokeColor && 'currentColor' !== this.strokeColor && (Df += Ef + 'mathcolor="' + this.strokeColor + '"', Ef = ','), Df && (Cf += `[${ Df }]`);
            }
            return Cf += `{${ this.bodyToLatex(Af) }}`, Cf;
        }
        render(Af) {
            var Bf;
            const Cf = new vc(Af, this.style),
                Df = Kd.createBox(Cf, this.body);
            if (!Df)
                return null;
            const Ef = null !== (Bf = sc(this.padding && 'auto' !== this.padding ? _ff(this.padding, {
                    ...this.context,
                    registers: Af.registers
                }) : Cf.getRegisterAsDimension('fboxsep'))) && void 0 !== Bf ? Bf : 0,
                Ff = function(Gf) {
                    if (!Gf)
                        return '1px';
                    const Hf = Gf.match(/([0-9][a-zA-Z\%]+)/);
                    return null === Hf ? '1px' : Hf[1];
                }(this.borderStyle),
                Gf = new Ic(null, {
                    classes: 'ML__notation'
                });
            Gf.setStyle('position', 'absolute'), Gf.setStyle('z-index', '-1'), Gf.setStyle('box-sizing', 'border-box'), Gf.setStyle('top', `calc(-${ Ff } / 2 - ${ Ef }em)`), Gf.setStyle('left', `calc(-${ Ff } / 2 - ${ Ef }em)`), Gf.setStyle('height', `calc(100% + ${ 2 * Ef }em + 2 * ${ Ff })`), Gf.height = Df.height + Ef, Gf.depth = Df.depth + Ef, Gf.setStyle('width', `calc(100% + ${ 2 * Ef }em + 2 * ${ Ff })`), this.backgroundcolor && Gf.setStyle('background-color', this.backgroundcolor), this.notation.box && Gf.setStyle('border', this.borderStyle), this.notation.actuarial && (Gf.setStyle('border-top', this.borderStyle), Gf.setStyle('border-right', this.borderStyle)), this.notation.madruwb && (Gf.setStyle('border-bottom', this.borderStyle), Gf.setStyle('border-right', this.borderStyle)), this.notation.roundedbox && (Gf.setStyle('border-radius', '8px'), Gf.setStyle('border', this.borderStyle)), this.notation.circle && (Gf.setStyle('border-radius', '50%'), Gf.setStyle('border', this.borderStyle)), this.notation.top && Gf.setStyle('border-top', this.borderStyle), this.notation.left && Gf.setStyle('border-left', this.borderStyle), this.notation.right && Gf.setStyle('border-right', this.borderStyle), this.notation.bottom && Gf.setStyle('border-bottom', this.borderStyle);
            let Hf = '';
            if (this.notation.horizontalstrike && (Hf += '<line x1="3%"  y1="50%" x2="97%" y2="50%"', Hf += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, Hf += ' stroke-linecap="round"', this.svgStrokeStyle && (Hf += ` stroke-dasharray="${ this.svgStrokeStyle }"`), Hf += '/>'), this.notation.verticalstrike && (Hf += '<line x1="50%"  y1="3%" x2="50%" y2="97%"', Hf += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, Hf += ' stroke-linecap="round"', this.svgStrokeStyle && (Hf += ` stroke-dasharray="${ this.svgStrokeStyle }"`), Hf += '/>'), this.notation.updiagonalstrike && (Hf += '<line x1="3%"  y1="97%" x2="97%" y2="3%"', Hf += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, Hf += ' stroke-linecap="round"', this.svgStrokeStyle && (Hf += ` stroke-dasharray="${ this.svgStrokeStyle }"`), Hf += '/>'), this.notation.downdiagonalstrike && (Hf += '<line x1="3%"  y1="3%" x2="97%" y2="97%"', Hf += ` stroke-width="${ this.strokeWidth }" stroke="${ this.strokeColor }"`, Hf += ' stroke-linecap="round"', this.svgStrokeStyle && (Hf += ` stroke-dasharray="${ this.svgStrokeStyle }"`), Hf += '/>'), Hf) {
                let If;
                'none' !== this.shadow && (If = 'auto' === this.shadow ? 'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)' : 'filter: drop-shadow(' + this.shadow + ')'),
                    function(Jf, Kf, Lf) {
                        Jf.svgOverlay = Kf, Jf.svgStyle = Lf;
                    }(Gf, Hf, If);
            }
            const If = new Ic([
                Gf,
                Df
            ]);
            return If.setStyle('position', 'relative'), If.setStyle('display', 'inline'), If.height = Df.height + Ef, If.depth = Df.depth + Ef, If.left = Ef, If.right = Ef, this.caret && (If.caret = this.caret), If.wrap(Cf);
        }
        constructor(Af, Bf, Cf, Df, Ef) {
            super('enclose', Df, {
                command: Af,
                style: Ef.style
            }), this.body = Bf, this.backgroundcolor = Ef.backgroundcolor, Cf.updiagonalarrow && (Cf.updiagonalstrike = !1), Cf.box && (Cf.left = !1, Cf.right = !1, Cf.bottom = !1, Cf.top = !1), this.notation = Cf, this.shadow = Ef.shadow, this.strokeWidth = Ef.strokeWidth, this.strokeStyle = Ef.strokeStyle, this.svgStrokeStyle = Ef.svgStrokeStyle, this.strokeColor = Ef.strokeColor, this.borderStyle = Ef.borderStyle, this.padding = Ef.padding, this.captureSelection = !0;
        }
    }
    class Af extends Kd {
        static fromJson(Bf, Cf) {
            return new Af(Bf.command, Bf.above, Bf.below, Cf, Bf);
        }
        toJson() {
            const Bf = {};
            return this.continuousFraction && (Bf.continuousFraction = !0), this.numerPrefix && (Bf.numerPrefix = this.numerPrefix), this.denomPrefix && (Bf.denomPrefix = this.denomPrefix), this.leftDelim && (Bf.leftDelim = this.leftDelim), this.rightDelim && (Bf.rightDelim = this.rightDelim), this.hasBarLine || (Bf.hasBarLine = !1), this.mathstyleName && (Bf.mathstyleName = this.mathstyleName), {
                ...super.toJson(),
                ...Bf
            };
        }
        serialize(Bf) {
            return this.command + `{${ this.aboveToLatex(Bf) }}` + `{${ this.belowToLatex(Bf) }}`;
        }
        get children() {
            if (this._children)
                return this._children;
            const Bf = [];
            if ('numerator-denominator' === this.context.fractionNavigationOrder) {
                for (const Cf of this.above)
                    Bf.push(...Cf.children), Bf.push(Cf);
                for (const Df of this.below)
                    Bf.push(...Df.children), Bf.push(Df);
            } else {
                for (const Ef of this.below)
                    Bf.push(...Ef.children), Bf.push(Ef);
                for (const Ff of this.above)
                    Bf.push(...Ff.children), Bf.push(Ff);
            }
            return this._children = Bf, Bf;
        }
        render(Bf) {
            var Cf, Df;
            const Ef = new vc(Bf, this.style, this.mathstyleName),
                Ff = Ef.metrics,
                Gf = new vc(Ef, this.style, this.continuousFraction ? '' : 'numerator'),
                Hf = this.numerPrefix ? new Ic([
                    new Ic(this.numerPrefix),
                    Kd.createBox(Gf, this.above)
                ], {
                    isTight: Gf.isTight,
                    newList: !0
                }) : null !== (Cf = Kd.createBox(Gf, this.above, {
                    newList: !0
                })) && void 0 !== Cf ? Cf : new Ic(null, {
                    newList: !0
                }),
                If = new vc(Ef, this.style, this.continuousFraction ? '' : 'denominator'),
                Jf = this.denomPrefix ? new Ic([
                    new Ic(this.denomPrefix),
                    Kd.createBox(If, this.below, {
                        newList: !0
                    })
                ]) : null !== (Df = Kd.createBox(If, this.below, {
                    newList: !0
                })) && void 0 !== Df ? Df : new Ic(null, {
                    newList: !0
                }),
                Kf = this.hasBarLine ? Ff.defaultRuleThickness : 0;
            let Lf, Mf, Nf = 0;
            Ef.isDisplayStyle ? (Lf = Ff.num1, Nf = Kf > 0 ? 3 * Kf : 7 * Kf, Mf = Ff.denom1) : (Kf > 0 ? (Lf = Ff.num2, Nf = Kf) : (Lf = Ff.num3, Nf = 3 * Kf), Mf = Ff.denom2);
            const Of = [];
            this.isSelected && Of.push('ML__selected');
            const Pf = Hf.depth,
                Qf = Jf.height;
            let Rf;
            if (Kf <= 0) {
                const Sf = Lf - Pf - (Qf - Mf);
                Sf < Nf && (Lf += (Nf - Sf) / 2, Mf += (Nf - Sf) / 2), Rf = new Yc({
                    individualShift: [{
                            box: Hf,
                            shift: -Lf,
                            classes: [
                                ...Of,
                                'ML__center'
                            ]
                        },
                        {
                            box: Jf,
                            shift: Mf,
                            classes: [
                                ...Of,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(Ef);
            } else {
                const Tf = 0.25 + Kf / 2,
                    Uf = 0.25 - Kf / 2;
                Lf < Nf + Pf + Tf && (Lf = Nf + Pf + Tf), Mf < Nf + Qf - Uf && (Mf = Nf + Qf - Uf);
                const Vf = new Ic(null, {
                    classes: 'ML__frac-line',
                    mode: this.mode,
                    style: this.style
                });
                Vf.height = Kf / 2, Vf.depth = Kf / 2, Rf = new Yc({
                    individualShift: [{
                            box: Jf,
                            shift: Mf,
                            classes: [
                                ...Of,
                                'ML__center'
                            ]
                        },
                        {
                            box: Vf,
                            shift: Kf / 2 - Uf,
                            classes: Of
                        },
                        {
                            box: Hf,
                            shift: -Lf,
                            classes: [
                                ...Of,
                                'ML__center'
                            ]
                        }
                    ]
                }).wrap(Ef);
            }
            const Wf = Ef.isDisplayStyle ? Ff.delim1 : Ff.delim2,
                Xf = this.isSelected ? ' ML__selected' : '',
                Yf = this.leftDelim ? this.bind(Tf, Be('mopen', this.leftDelim, Wf, !0, Tf, {
                    style: this.style,
                    mode: this.mode,
                    classes: Xf
                })) : _Ie(Ef, 'mopen');
            let Zf = null;
            Zf = this.continuousFraction ? new Ic(null, {
                type: 'mclose'
            }) : this.rightDelim ? this.bind(Tf, Be('mclose', this.rightDelim, Wf, !0, Tf, {
                style: this.style,
                mode: this.mode,
                classes: Xf
            })) : _Ie(Ef, 'mclose');
            const $f = this.bind(Tf, new Ic([
                Yf,
                Rf,
                Zf
            ], {
                isTight: Ef.isTight,
                type: 'mord',
                classes: 'mfrac'
            }));
            return $f ? (this.caret && ($f.caret = this.caret), this.attachSupsub(Tf, {
                base: $f
            })) : null;
        }
        constructor(Bf, Cf, Df, Ef, Ff) {
            var Gf, Hf;
            super('genfrac', Ef, {
                style: Ff.style,
                command: Bf,
                serialize: Ff.serialize,
                displayContainsHighlight: !0
            }), this.above = Cf, this.below = Df, this.hasBarLine = null === (Gf = null == Ff ? void 0 : Ff.hasBarLine) || void 0 === Gf || Gf, this.continuousFraction = null !== (Hf = null == Ff ? void 0 : Ff.continuousFraction) && void 0 !== Hf && Hf, this.numerPrefix = null == Ff ? void 0 : Ff.numerPrefix, this.denomPrefix = null == Ff ? void 0 : Ff.denomPrefix, this.mathstyleName = null == Ff ? void 0 : Ff.mathstyleName, this.leftDelim = null == Ff ? void 0 : Ff.leftDelim, this.rightDelim = null == Ff ? void 0 : Ff.rightDelim;
        }
    }
    class Bf extends Kd {
        static fromJson(Cf, Df) {
            const Ef = new Bf(Cf.command, Df);
            return Cf.isSuggestion && (Ef.isSuggestion = !0), Cf.isError && (Ef.isError = !0), Ef;
        }
        toJson() {
            const Cf = {};
            return this.isSuggestion && (Cf.isSuggestion = !0), this.isError && (Cf.isError = !0), {
                ...super.toJson(),
                ...Cf
            };
        }
        get computedStyle() {
            return {};
        }
        render(Cf) {
            const Df = new Ic(this.value, {
                classes: this.isSuggestion ? 'ML__suggestion' : this.isError ? 'ML__error' : '',
                type: 'latex',
                maxFontSize: 1
            });
            return Df ? (this.caret && (Df.caret = this.caret), this.bind(Cf, Df)) : null;
        }
        constructor(Cf, Df, Ef) {
            var Ff;
            super('latex', Df, {
                value: Cf,
                mode: 'latex'
            }), this.isSuggestion = null !== (Ff = null == Ef ? void 0 : Ef.isSuggestion) && void 0 !== Ff && Ff, this.isError = !1, this.verbatimLatex = Cf;
        }
    }
    class Cf extends Kd {
        static fromJson(Df, Ef) {
            return new Cf('', Ef);
        }
        toJson() {
            return super.toJson();
        }
        render(Df) {
            const Ef = Kd.createBox(Df, this.body, {
                newList: !0
            });
            return Ef ? (this.caret && (Ef.caret = this.caret), this.bind(Df, Ef)) : null;
        }
        serialize(Df) {
            var Ef, Ff;
            return null !== (Ff = null === (Ef = this.body) || void 0 === Ef ? void 0 : Ef.map(Gf => Gf.value).join('')) && void 0 !== Ff ? Ff : '';
        }
        constructor(Df, Ef) {
            super('latexgroup', Ef, {
                mode: 'latex'
            }), this.body = [...Df].map(Ff => new Bf(Ff, Ef)), this.skipBoundary = !1;
        }
    }
    class Df extends Kd {
        static fromJson(Ef, Ff) {
            return new Df(Ef.command, Ef.body, Ff, Ef);
        }
        toJson() {
            return {
                ...super.toJson(),
                position: this.position
            };
        }
        render(Ef) {
            const Ff = new vc(Ef, this.style, 'cramp'),
                Gf = Kd.createBox(Ff, this.body);
            if (!Gf)
                return null;
            const Hf = Ff.metrics.defaultRuleThickness / Ff.scalingFactor,
                If = new Ic(null, {
                    classes: this.position + '-line'
                });
            let Jf;
            return If.height = Hf, If.maxFontSize = 1.125 * Hf * Ff.scalingFactor, Jf = 'overline' === this.position ? new Yc({
                shift: 0,
                children: [{
                        box: Gf
                    },
                    3 * Hf,
                    {
                        box: If
                    },
                    Hf
                ]
            }) : new Yc({
                top: Gf.height,
                children: [
                    Hf,
                    {
                        box: If
                    },
                    3 * Hf,
                    {
                        box: Gf
                    }
                ]
            }), this.caret && (Jf.caret = this.caret), new Ic(Jf, {
                classes: this.position,
                type: 'mord'
            });
        }
        constructor(Ef, Ff, Gf, Hf) {
            super('line', Gf, {
                command: Ef,
                style: Hf.style
            }), this.skipBoundary = !0, this.body = Ff, this.position = Hf.position;
        }
    }
    class Ef extends Kd {
        static fromJson(Ff, Gf) {
            return new Ef(Ff.command, Ff.body ? Ff.body : Ff.value, Gf, Ff);
        }
        toJson() {
            const Ff = super.toJson();
            return this.hasArgument && (Ff.hasArgument = !0), this.variant && (Ff.variant = this.variant), this.variantStyle && (Ff.variantStyle = this.variantStyle), this.subsupPlacement && (Ff.limits = this.subsupPlacement), this.isExtensibleSymbol && (Ff.isExtensibleSymbol = !0), this.value && (Ff.symbol = this.value), Ff;
        }
        render(Ff) {
            var Gf;
            let Hf, If = 0,
                Jf = 0;
            if (this.isExtensibleSymbol) {
                const Kf = Ff.isDisplayStyle && '\\smallint' !== this.value;
                if (Hf = new Ic(this.value, {
                        fontFamily: Kf ? 'Size2-Regular' : 'Size1-Regular',
                        classes: 'op-symbol ' + (Kf ? 'large-op' : 'small-op'),
                        type: 'mop',
                        maxFontSize: Ff.scalingFactor
                    }), !Hf)
                    return null;
                Hf.right = Hf.italic, If = (Hf.height - Hf.depth) / 2 - 0.25 * Ff.scalingFactor, Jf = Hf.italic, Hf.setStyle('color', this.style.color), Hf.setStyle('background-color', this.style.backgroundColor);
            } else if (this.body) {
                if (Hf = Kd.createBox(Ff, this.body, {
                        newList: !0
                    }), !Hf)
                    return null;
                Hf.setStyle('color', this.style.color), Hf.setStyle('background-color', this.style.backgroundColor);
            } else
                Hf = new Ic(this.value, {
                    type: 'mop',
                    mode: 'math',
                    maxFontSize: Ff.scalingFactor,
                    style: {
                        color: this.style.color,
                        backgroundColor: this.style.backgroundColor,
                        letterShapeStyle: Ff.letterShapeStyle,
                        variant: this.variant,
                        variantStyle: this.variantStyle
                    }
                });
            this.isExtensibleSymbol && Hf.setTop(If);
            let Lf = Hf;
            if (this.superscript || this.subscript) {
                const Mf = null !== (Kf = this.subsupPlacement) && void 0 !== Kf ? Kf : 'auto';
                Lf = 'over-under' === Mf || 'auto' === Mf && Ff.isDisplayStyle ? this.attachLimits(Ff, {
                    base: Hf,
                    baseShift: If,
                    slant: Jf
                }) : this.attachSupsub(Ff, {
                    base: Hf
                });
            }
            return this.caret && (Lf.caret = this.caret), new Ic(this.bind(Ff, Lf), {
                type: 'mop',
                classes: 'op-group' + (this.isSelected ? ' ML__selected' : '')
            });
        }
        serialize(Ff) {
            if ('\u200B' === this.value)
                return this.supsubToLatex(Ff);
            const Gf = [];
            return Gf.push(this.command), this.hasArgument && Gf.push(`{${ this.bodyToLatex(Ff) }}`), this.explicitSubsupPlacement && ('over-under' === this.subsupPlacement && Gf.push('\\limits'), 'adjacent' === this.subsupPlacement && Gf.push('\\nolimits'), 'auto' === this.subsupPlacement && Gf.push('\\displaylimits')), Gf.push(this.supsubToLatex(Ff)), Cd(Gf);
        }
        constructor(Ff, Gf, Hf, If) {
            var Jf, Kf, Lf, Mf;
            super(null !== (Jf = If.type) && void 0 !== Jf ? Jf : 'mop', Hf, {
                command: Ff,
                style: If.style,
                isFunction: null == If ? void 0 : If.isFunction
            }), 'string' == typeof Gf ? this.value = Gf : this.body = Gf, this.captureSelection = null !== (Kf = If.captureSelection) && void 0 !== Kf && Kf, this.hasArgument = null !== (Lf = If.hasArgument) && void 0 !== Lf && Lf, this.variant = null == If ? void 0 : If.variant, this.variantStyle = null == If ? void 0 : If.variantStyle, this.subsupPlacement = null == If ? void 0 : If.limits, this.isExtensibleSymbol = null !== (Mf = null == If ? void 0 : If.isExtensibleSymbol) && void 0 !== Mf && Mf;
        }
    }
    class Ff extends Kd {
        static fromJson(Gf, Hf) {
            return new Ff(Gf.command, Gf.body, Hf, Gf);
        }
        toJson() {
            const Gf = {};
            return this.align && (Gf.align = this.align), this.boxType && (Gf.boxType = this.boxType), {
                ...super.toJson(),
                ...Gf
            };
        }
        render(Gf) {
            const Hf = Kd.createBox(Gf, this.body, {
                classes: 'inner'
            });
            return Hf ? (this.caret && (Hf.caret = this.caret), this.bind(Gf, new Ic([
                Hf,
                new Ic(null, {
                    classes: 'fix'
                })
            ], {
                classes: 'left' === this.align ? 'llap' : 'rlap',
                type: this.boxType
            }))) : null;
        }
        constructor(Gf, Hf, If, Jf) {
            var Kf, Lf;
            super('overlap', If, {
                command: Gf,
                style: null == Jf ? void 0 : Jf.style
            }), this.skipBoundary = !0, this.body = 'string' == typeof Hf ? [new Kd('mord', If, {
                value: Hf
            })] : Hf, this.align = null !== (Kf = null == Jf ? void 0 : Jf.align) && void 0 !== Kf ? Kf : 'left', this.boxType = null !== (Lf = null == Jf ? void 0 : Jf.boxType) && void 0 !== Lf ? Lf : 'mord';
        }
    }
    class Gf extends Kd {
        static fromJson(Hf, If) {
            return new Gf(Hf.command, Hf.body, If, Hf);
        }
        toJson() {
            const Hf = {};
            return this.isInvisible && (Hf.isInvisible = !0), this.smashDepth && (Hf.smashDepth = !0), this.smashHeight && (Hf.smashHeight = !0), this.smashWidth && (Hf.smashWidth = !0), {
                ...super.toJson(),
                ...Hf
            };
        }
        render(Hf) {
            const If = new vc(Hf, {
                isPhantom: !0
            });
            if (!this.smashDepth && !this.smashHeight && !this.smashWidth)
                return Kd.createBox(If, this.body, {
                    classes: 'inner'
                });
            const Jf = Kd.createBox(this.isInvisible ? If : Hf, this.body);
            if (!Jf)
                return null;
            if (this.smashWidth) {
                const Kf = new Ic(null, {
                    classes: 'fix'
                });
                return new Ic([
                    Jf,
                    Kf
                ], {
                    classes: 'rlap'
                }).wrap(Hf);
            }
            if (!this.smashHeight && !this.smashDepth)
                return Jf;
            if (this.smashHeight && (Jf.height = 0), this.smashDepth && (Jf.depth = 0), Jf.children)
                for (const Lf of Jf.children)
                    this.smashHeight && (Lf.height = 0), this.smashDepth && (Lf.depth = 0);
            return new Yc({
                firstBaseline: [{
                    box: Jf
                }]
            }, {
                type: 'mord'
            }).wrap(Lf);
        }
        constructor(Hf, If, Jf, Kf) {
            var Lf, Mf, Nf, Of;
            super('phantom', Jf, {
                command: Hf,
                style: Kf.style
            }), this.captureSelection = !0, this.body = If, this.isInvisible = null !== (Lf = Kf.isInvisible) && void 0 !== Lf && Lf, this.smashDepth = null !== (Mf = Kf.smashDepth) && void 0 !== Mf && Mf, this.smashHeight = null !== (Nf = Kf.smashHeight) && void 0 !== Nf && Nf, this.smashWidth = null !== (Of = Kf.smashWidth) && void 0 !== Of && Of;
        }
    }
    class Hf extends Kd {
        static fromJson(If, Jf) {
            return new Hf(If.command, Jf, If);
        }
        toJson() {
            const If = {
                height: this.height,
                width: this.width
            };
            return this.shift && (If.shift = this.shift), {
                ...super.toJson(),
                ...If
            };
        }
        render(If) {
            const Jf = new vc(If, this.style, 'textstyle'),
                Kf = sc(this.shift),
                Lf = sc(this.width),
                Mf = sc(this.height),
                Nf = new Ic(null, {
                    classes: 'rule',
                    type: 'mord'
                });
            return Nf.setStyle('border-right-width', Lf, 'em'), Nf.setStyle('border-top-width', Mf, 'em'), Nf.setStyle('border-color', this.style.color), Nf.setStyle('vertical-align', Kf, 'em'), this.isSelected && Nf.setStyle('opacity', '50%'), Nf.width = Lf, Nf.height = Mf + Kf, Nf.depth = -Kf, this.bind(If, Nf), this.caret && (Nf.caret = this.caret), Nf.wrap(Jf);
        }
        serialize(If) {
            var Jf;
            let Kf = null !== (Jf = this.command) && void 0 !== Jf ? Jf : '';
            return this.shift && (Kf += `[${ tc(this.shift) }]`), Kf += `{${ tc(this.width) }}{${ tc(this.height) }}`, Kf;
        }
        constructor(If, Jf, Kf) {
            var Lf;
            super('rule', Jf, {
                command: If,
                style: Kf.style
            }), this.shift = null !== (Lf = Kf.shift) && void 0 !== Lf ? Lf : {
                dimension: 0
            }, this.height = Kf.height, this.width = Kf.width;
        }
    }
    class If extends Kd {
        static fromJson(Jf, Kf) {
            return new If(Jf.command, Kf, {
                ...Jf,
                index: Jf.above
            });
        }
        toJson() {
            return super.toJson();
        }
        serialize(Jf) {
            let Kf = '';
            return this.above && (Kf += `[${ this.aboveToLatex(Jf) }]`), Kf += `{${ this.bodyToLatex(Jf) }}`, this.command + Kf;
        }
        render(Jf) {
            var Kf;
            const Lf = new vc(Jf, this.style, 'cramp'),
                Mf = null !== (Kf = Kd.createBox(Lf, this.body, {
                    style: this.style,
                    newList: !0
                })) && void 0 !== Kf ? Kf : new Ic(null),
                Nf = Lf.scalingFactor,
                Of = Lf.metrics.defaultRuleThickness / Nf,
                Pf = Jf.isDisplayStyle ? 0.431 : Of,
                Qf = new Ic(null, {
                    classes: 'ML__sqrt-line',
                    style: this.style,
                    height: Of
                });
            let Rf = Nf * (Of + Pf / 4);
            const Sf = Math.max(2 * Nf * Pf, Mf.height + Mf.depth) + Rf + Of,
                Tf = new vc(Jf, this.style),
                Uf = this.isSelected ? ' ML__selected' : '',
                Vf = this.bind(Tf, new Ic(Be('', '\\surd', Sf, !1, Tf, {
                    classes: Uf
                }), {
                    classes: 'ML__sqrt-sign' + Uf,
                    style: this.style
                }));
            if (!Vf)
                return null;
            const Wf = Vf.height + Vf.depth - Of;
            Wf > Mf.height + Mf.depth + Rf && (Rf = (Rf + Wf - (Mf.height + Mf.depth)) / 2), Vf.setTop(Vf.height - Mf.height - Rf);
            const Xf = this.bind(Jf, new Yc({
                    firstBaseline: [{
                            box: new Ic(Mf)
                        },
                        Rf - 2 * Of,
                        {
                            box: Qf
                        },
                        Of
                    ]
                }).wrap(Jf)),
                Yf = Kd.createBox(new vc(Jf, this.style, 'scriptscriptstyle'), this.above, {
                    style: this.style,
                    newList: !0
                });
            if (!Yf) {
                const Zf = new Ic([
                    Vf,
                    Xf
                ], {
                    classes: this.containsCaret ? 'ML__contains-caret' : '',
                    type: 'mord'
                });
                return this.caret && (Zf.caret = this.caret), this.bind(Jf, Zf.wrap(Jf));
            }
            const $f = new Yc({
                    shift: -0.6 * (Math.max(Vf.height, Xf.height) - Math.max(Vf.depth, Xf.depth)),
                    children: [{
                        box: Yf
                    }]
                }),
                ag = new Ic([
                    new Ic($f, {
                        classes: 'ML__sqrt-index'
                    }),
                    Vf,
                    Xf
                ], {
                    type: 'mord',
                    classes: this.containsCaret ? 'ML__contains-caret' : ''
                });
            return ag.height = Vf.height, ag.depth = Vf.depth, this.caret && (ag.caret = this.caret), this.bind(Jf, ag.wrap(Jf));
        }
        constructor(Jf, Kf, Lf) {
            var Mf;
            super('surd', Kf, {
                command: Jf,
                mode: null !== (Mf = Lf.mode) && void 0 !== Mf ? Mf : 'math',
                style: Lf.style,
                displayContainsHighlight: !0
            }), this.body = Lf.body, this.above = Lf.index;
        }
    }
    const Jf = {
            'p@': '1pt ',
            'z@': '0pt',
            maxdimen: '16383.99999pt',
            hfuzz: '0.1pt',
            vfuzz: '0.1pt',
            overfullrule: '5pt',
            hsize: '6.5in',
            vsize: '8.9in',
            parindent: '20pt',
            maxdepth: '4pt',
            splitmaxdepth: '\\maxdimen',
            boxmaxdepth: '\\maxdimen',
            delimitershortfall: '5pt',
            nulldelimiterspace: '1.2pt',
            scriptspace: '0.5pt',
            topskip: '10pt',
            splittopskip: '10pt',
            normalbaselineskip: '12pt',
            normallineskip: '1pt',
            normallineskiplimit: '0pt',
            jot: '3pt',
            doublerulesep: '2pt',
            arrayrulewidth: '0.4pt',
            arraycolsep: '5pt',
            fboxsep: '3pt',
            fboxrule: '0.4pt'
        },
        Kf = {
            'z@skip': '0pt plust0pt minus0pt',
            hideskip: '-1000pt plust 1fill',
            '@flushglue': '0pt plust 1fill',
            parskip: '0pt plus 1pt',
            abovedisplayskip: '12pt plus 3pt minus 9pt',
            abovedisplayshortskip: '0pt plus 3pt',
            belowdisplayskip: '12pt plus 3pt minus 9pt',
            belowdisplayshortskip: '7pt plus 3pt minus 4pt',
            parfillskip: '0pt plus 1fil',
            thinmuskip: '3mu',
            medmuskip: '4mu plus 2mu minus 4mu',
            thickmuskip: '5mu plus 5mu',
            smallskipamount: '3pt plus1pt minus1pt',
            medskipamount: '6pt plus2pt minus2pt',
            bigskipamount: '12pt plus4pt minus4pt'
        },
        Lf = {
            pretolerance: 100,
            tolerance: 200,
            hbadness: 1000,
            vbadness: 1000,
            linepenalty: 10,
            hyphenpenalty: 50,
            exhyphenpenalty: 50,
            binoppenalty: 700,
            relpenalty: 500,
            clubpenalty: 150,
            widowpenalty: 150,
            displaywidowpenalty: 50,
            brokenpenalty: 100,
            predisplaypenalty: 10000,
            doublehyphendemerits: 10000,
            finalhyphendemerits: 5000,
            adjdemerits: 10000,
            tracinglostchars: 1,
            uchyph: 1,
            delimiterfactor: 901,
            defaulthyphenchar: '\\-',
            defaultskewchar: -1,
            newlinechar: -1,
            showboxbreadth: 5,
            showboxdepth: 3,
            errorcontextlines: 5,
            interdisplaylinepenalty: 100,
            interfootnotelinepenalty: 100,
            baselineSkip: 1.2,
            arraystretch: '',
            month: new Date().getMonth() + 1,
            day: new Date().getDate(),
            year: new Date().getFullYear()
        };
    let Mf;

    function Nf(Of) {
        var Pf, Qf;
        if (Mf)
            return Mf;
        Mf = {
            ...Lf
        };
        for (const Rf of Object.keys(Jf))
            Mf[Rf] = null !== (Pf = _ff(Jf[Rf], Of, Mf)) && void 0 !== Pf ? Pf : 0;
        for (const Sf of Object.keys(Kf))
            Mf[Sf] = null !== (Rf = ef(Kf[Sf], Of, Mf)) && void 0 !== Rf ? Rf : 0;
        return Mf;
    }

    function Sf() {
        const Tf = {
            registers: {},
            smartFence: !1,
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            letterShapeStyle: p.locale.startsWith('fr') ? 'french' : 'tex',
            colorMap: y,
            backgroundColorMap: N,
            getDefinition: _Uf,
            getMacro: Uf => _Wf(Uf, zb())
        };
        return {
            ...Tf,
            registers: Nf(Tf)
        };
    }

    function _Uf(Vf, Wf = 'math') {
        if (!Vf || 0 === Vf.length)
            return null;
        let Xf = null;
        if (Vf.startsWith('\\')) {
            if (Xf = Fe[Vf], Xf)
                return Xf;
            'math' === Wf ? Xf = De[Vf] : Y[Vf] && (Xf = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: Y[Vf]
            });
        } else if ('math' === Wf) {
            if (Xf = De[Vf], !Xf && 1 === Vf.length) {
                const Yf = fb('math', Vf.codePointAt(0));
                return Wf.startsWith('\\') ? {
                    ..._Uf(Wf, 'math'),
                    command: Wf
                } : null;
            }
        } else
            Y[Vf] ? Xf = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: Y[Vf]
            } : 'text' === Wf && (Xf = {
                definitionType: 'symbol',
                type: 'mord',
                codepoint: Vf.codePointAt(0)
            });
        return !Xf || 'symbol' !== Xf.definitionType || 'mord' !== Xf.type || 102 !== Xf.codepoint && 103 !== Xf.codepoint && 104 !== Xf.codepoint || (Xf.isFunction = !0), null != Xf ? Xf : null;
    }

    function _Wf(Xf, Yf) {
        return Xf.startsWith('\\') ? Yf[Xf.slice(1)] : null;
    }
    class Xf extends Kd {
        static fromJson(Yf, Zf) {
            return new Xf(Yf.body, _Yf(Yf.tooltip, Zf), Zf, Yf);
        }
        toJson() {
            var Yf;
            const Zf = null === (Yf = this.tooltip.body) || void 0 === Yf ? void 0 : Yf.filter($f => 'first' !== $f.type).map($f => $f.toJson());
            return {
                ...super.toJson(),
                tooltip: Zf
            };
        }
        render(Yf) {
            const Zf = Kd.createBox(Yf, this.body, {
                style: this.style
            });
            if (!Zf)
                return null;
            const $f = Lc(Qc(new Ic(this.tooltip.render(new vc({
                    registers: Yf.registers
                }, {
                    fontSize: 5
                }, 'displaystyle')), {
                    classes: 'ML__tooltip-content'
                }))),
                ag = new Ic([
                    $f,
                    Zf
                ], {
                    classes: 'ML__tooltip-container'
                });
            return this.caret && (ag.caret = this.caret), this.bind(Yf, ag);
        }
        serialize(Yf) {
            return `${ this.command }{${ this.bodyToLatex(Yf) }}{${ Kd.serialize(this.tooltip.body, Yf) }}`;
        }
        constructor(Yf, Zf, $f, ag) {
            super('tooltip', $f, {
                command: null == ag ? void 0 : ag.command,
                mode: 'math',
                serialize: null == ag ? void 0 : ag.serialize,
                style: null == ag ? void 0 : ag.style,
                displayContainsHighlight: !0
            }), this.body = Yf;
            const bg = Sf();
            this.tooltip = new Kd('root', bg, {
                style: {}
            }), this.tooltip.body = Zf, this.skipBoundary = !0, this.captureSelection = !1;
        }
    }

    function _Yf(Zf, $f) {
        if (d(Zf))
            return Zf.map(ag => _Yf(ag, $f));
        Zf = {
            ...Zf
        };
        for (const ag of Hd)
            Zf[ag] && (Zf[ag] = _Yf(Zf[ag], $f));
        Zf.array && (Zf.array = _Yf(Zf.array, $f));
        const bg = Zf.type;
        let cg;
        'accent' === bg && (cg = Xd.fromJson(Zf, $f)), 'array' === bg && (cg = hf.fromJson(Zf, $f)), 'box' === bg && (cg = gf.fromJson(Zf, $f)), 'composition' === bg && (cg = tf.fromJson(Zf, $f)), 'chem' === bg && (cg = uf.fromJson(Zf, $f)), 'choice' === bg && (cg = _bg.fromJson(Zf, $f)), 'delim' === bg && (cg = xf.fromJson(Zf, $f)), 'enclose' === bg && (cg = zf.fromJson(Zf, $f)), 'error' === bg && (cg = Qe.fromJson(Zf, $f)), 'genfrac' === bg && (cg = Af.fromJson(Zf, $f)), 'group' === bg && (cg = Le.fromJson(Zf, $f)), 'latex' === bg && (cg = Bf.fromJson(Zf, $f)), 'latexgroup' === bg && (cg = Cf.fromJson(Zf, $f)), 'leftright' === bg && (cg = Ne.fromJson(Zf, $f)), 'line' === bg && (cg = Df.fromJson(Zf, $f)), 'macro' === bg && (cg = Re.fromJson(Zf, $f)), 'msubsup' === bg && (cg = Oe.fromJson(Zf, $f)), 'overlap' === bg && (cg = Ff.fromJson(Zf, $f)), 'overunder' === bg && (cg = Ke.fromJson(Zf, $f)), 'placeholder' === bg && (Zf.defaultValue && (Zf.defaultValue = _Yf(Zf.defaultValue, $f)), cg = Pe.fromJson(Zf, $f)), 'phantom' === bg && (cg = Gf.fromJson(Zf, $f)), 'rule' === bg && (cg = Hf.fromJson(Zf, $f)), 'sizeddelim' === bg && (cg = yf.fromJson(Zf, $f)), 'spacing' === bg && (cg = Me.fromJson(Zf, $f)), 'surd' === bg && (cg = If.fromJson(Zf, $f)), 'text' === bg && (cg = Se.fromJson(Zf, $f)), 'tooltip' === bg && (cg = Xf.fromJson(Zf, $f)), 'mop' === bg && (cg = Ef.fromJson(Zf, $f)), cg || (cg = Kd.fromJson(Zf, $f));
        for (const dg of Hd)
            Zf[$f] && cg.setChildren(Zf[$f], $f);
        return void 0 !== Zf.verbatimLatex && (cg.verbatimLatex = Zf.verbatimLatex), Zf.subsupPlacement && (cg.subsupPlacement = Zf.subsupPlacement), Zf.explicitSubsupPlacement && (cg.explicitSubsupPlacement = !0), Zf.isFunction && (cg.isFunction = !0), Zf.isExtensibleSymbol && (cg.isExtensibleSymbol = !0), Zf.skipBoundary && (cg.skipBoundary = !0), Zf.captureSelection && (cg.captureSelection = !0), cg;
    }
    class _bg extends Kd {
        static fromJson(cg, dg) {
            return new _bg([
                _Yf(cg.choices[0], dg),
                _Yf(cg.choices[1], dg),
                _Yf(cg.choices[2], dg),
                _Yf(cg.choices[3], dg)
            ], dg);
        }
        toJson() {
            const cg = [];
            for (const dg of this.choices)
                cg.push(dg.filter(eg => 'first' !== eg.type).map(eg => eg.toJson()));
            return {
                ...super.toJson(),
                choices: cg
            };
        }
        render(cg) {
            const dg = Kd.createBox(cg, this.choices[Math.floor(cg.mathstyle.id / 2)]);
            return dg ? (this.caret && (dg.caret = this.caret), this.bind(cg, dg)) : null;
        }
        serialize(cg) {
            return `\\mathchoice{${ Kd.serialize(this.choices[0], cg) }}{${ Kd.serialize(this.choices[1], cg) }}{${ Kd.serialize(this.choices[2], cg) }}{${ Kd.serialize(this.choices[3], cg) }}`;
        }
        constructor(cg, dg) {
            super('choice', dg), this.choices = cg, this.skipBoundary = !0;
        }
    }
    tb('mathtip', '{:math}{:math}', {
        createAtom: (cg, dg, eg, fg) => new Xf(dg[0], dg[1], fg, {
            command: cg,
            content: 'math',
            style: eg
        })
    }), tb('texttip', '{:math}{:text}', {
        createAtom: (cg, dg, eg, fg) => new Xf(dg[0], dg[1], fg, {
            command: cg,
            content: 'text',
            style: eg
        })
    }), tb('error', '{:math}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            mode: 'math',
            command: '\\error',
            customClass: 'ML__error',
            style: eg,
            serialize: (gg, hg) => `\\error{${ gg.bodyToLatex(hg) }}`
        })
    }), tb('ensuremath', '{:math}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            mode: 'math',
            latexOpen: '\\ensuremath{',
            latexClose: '}',
            style: eg
        })
    }), tb('color', '{:string}', {
        applyStyle: (cg, dg, eg) => {
            var fg, gg;
            const hg = dg[0];
            return {
                verbatimColor: dg[0],
                color: null !== (gg = null === (fg = eg.colorMap) || void 0 === fg ? void 0 : fg.call(eg, hg)) && void 0 !== gg ? gg : hg
            };
        }
    }), tb('textcolor', '{:string}{content:auto*}', {
        applyStyle: (cg, dg, eg) => {
            var fg, gg;
            const hg = dg[0];
            return {
                verbatimColor: hg,
                color: null !== (gg = null === (fg = eg.colorMap) || void 0 === fg ? void 0 : fg.call(eg, hg)) && void 0 !== gg ? gg : hg
            };
        }
    }), tb('boxed', '{content:math}', {
        createAtom: (cg, dg, eg, fg) => new gf(cg, dg[0], fg, {
            framecolor: 'black',
            style: eg
        })
    }), tb('colorbox', '{:string}{content:auto*}', {
        applyMode: 'text',
        applyStyle: (cg, dg, eg) => {
            var fg, gg;
            const hg = dg[0];
            return {
                verbatimBackgroundColor: dg[0],
                backgroundColor: null !== (gg = null === (fg = eg.backgroundColorMap) || void 0 === fg ? void 0 : fg.call(eg, hg)) && void 0 !== gg ? gg : hg
            };
        }
    }), tb('fcolorbox', '{frame-color:string}{background-color:string}{content:auto}', {
        applyMode: 'text',
        createAtom: (cg, dg, eg, fg) => {
            var gg, hg, ig, jg;
            const kg = dg[0],
                lg = dg[1];
            return new gf(cg, dg[2], fg, {
                verbatimFramecolor: kg,
                framecolor: null !== (hg = null === (gg = fg.colorMap) || void 0 === gg ? void 0 : gg.call(fg, kg)) && void 0 !== hg ? hg : kg,
                verbatimBackgroundcolor: dg[1],
                backgroundcolor: null !== (jg = null === (ig = fg.backgroundColorMap) || void 0 === ig ? void 0 : ig.call(fg, lg)) && void 0 !== jg ? jg : lg,
                style: eg,
                serialize: (mg, ng) => {
                    var og, pg;
                    return `${ mg.command }{${ null !== (og = mg.verbatimFramecolor) && void 0 !== og ? og : mg.framecolor }{${ null !== (pg = mg.verbatimBackgroundcolor) && void 0 !== pg ? pg : mg.backgroundcolor }}{${ mg.bodyToLatex(ng) }}`;
                }
            });
        }
    }), tb('bbox', '[:bbox]{body:auto}', {
        createAtom: (cg, dg, eg, fg) => {
            if (dg[0]) {
                const gg = dg[0];
                return new gf(cg, dg[1], fg, {
                    padding: gg.padding,
                    border: gg.border,
                    backgroundcolor: gg.backgroundcolor,
                    style: eg,
                    serialize: (hg, ig) => {
                        var jg;
                        let kg = cg;
                        if (Number.isFinite(hg.padding) || void 0 !== hg.border || void 0 !== hg.backgroundcolor) {
                            const lg = [];
                            hg.padding && lg.push(hg.padding), hg.border && lg.push(`border: ${ hg.border }`), (hg.verbatimBackgroundcolor || hg.backgroundcolor) && lg.push(null !== (jg = hg.verbatimBackgroundcolor) && void 0 !== jg ? jg : hg.backgroundcolor), kg += `[${ lg.join(',') }]`;
                        }
                        return kg + `{${ hg.bodyToLatex(ig) }}`;
                    }
                });
            }
            return new gf(cg, dg[1], fg, {
                style: eg
            });
        }
    }), tb([
        'displaystyle',
        'textstyle',
        'scriptstyle',
        'scriptscriptstyle'
    ], '{:rest}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            latexOpen: `{${ cg } `,
            latexClose: '}',
            style: eg,
            mathstyleName: cg.slice(1)
        })
    }), tb([
        'tiny',
        'scriptsize',
        'footnotesize',
        'small',
        'normalsize',
        'large',
        'Large',
        'LARGE',
        'huge',
        'Huge'
    ], '', {
        applyStyle: (cg, dg) => ({
            fontSize: {
                '\\tiny': 1,
                '\\scriptsize': 2,
                '\\footnotesize': 3,
                '\\small': 4,
                '\\normalsize': 5,
                '\\large': 6,
                '\\Large': 7,
                '\\LARGE': 8,
                '\\huge': 9,
                '\\Huge': 10
            } [cg]
        })
    }), tb('fontseries', '{:string}', {
        ifMode: 'text',
        applyStyle: (cg, dg) => ({
            fontSeries: dg[0]
        })
    }), tb('fontshape', '{:string}', {
        ifMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: dg[0]
        })
    }), tb('fontfamily', '{:string}', {
        ifMode: 'text',
        applyStyle: (cg, dg) => ({
            fontFamily: dg[0]
        })
    }), tb('selectfont', '', {
        ifMode: 'text',
        applyStyle: (cg, dg) => ({})
    }), tb('bf', '', {
        applyStyle: (cg, dg) => ({
            fontSeries: 'b',
            fontShape: 'n',
            fontFamily: 'cmr'
        })
    }), tb([
        'boldsymbol',
        'bm'
    ], '{:math*}', {
        applyMode: 'math',
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            latexOpen: `${ cg }{`,
            latexClose: '}',
            style: eg,
            customClass: 'ML__boldsymbol'
        })
    }), tb('bold', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variantStyle: 'bold'
        })
    }), tb('bfseries', '', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontSeries: 'b'
        })
    }), tb('mdseries', '', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontSeries: 'm'
        })
    }), tb('upshape', '', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'n'
        })
    }), tb('slshape', '', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'sl'
        })
    }), tb('scshape', '', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'sc'
        })
    }), tb('textbf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontSeries: 'b'
        })
    }), tb('textmd', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontSeries: 'm'
        })
    }), tb('textup', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'n'
        })
    }), tb('textnormal', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'n',
            fontSeries: 'm'
        })
    }), tb('textsl', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'sl'
        })
    }), tb('textit', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'it'
        })
    }), tb('textsc', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontShape: 'sc'
        })
    }), tb('textrm', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontFamily: 'roman'
        })
    }), tb('textsf', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontFamily: 'sans-serif'
        })
    }), tb('texttt', '{:text*}', {
        applyMode: 'text',
        applyStyle: (cg, dg) => ({
            fontFamily: 'monospace'
        })
    }), tb('mathbf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'normal',
            variantStyle: 'bold'
        })
    }), tb('mathit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'main',
            variantStyle: 'italic'
        })
    }), tb('mathnormal', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'normal',
            variantStyle: 'italic'
        })
    }), tb('mathbfit', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'main',
            variantStyle: 'bolditalic'
        })
    }), tb('mathrm', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'normal',
            variantStyle: 'up'
        })
    }), tb('mathsf', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'sans-serif',
            variantStyle: 'up'
        })
    }), tb('mathtt', '{:math*}', {
        applyMode: 'math',
        applyStyle: (cg, dg) => ({
            variant: 'monospace',
            variantStyle: 'up'
        })
    }), tb('it', '', {
        applyStyle: (cg, dg) => ({
            fontSeries: 'm',
            fontShape: 'it',
            fontFamily: 'cmr',
            variantStyle: 'italic'
        })
    }), tb('rmfamily', '', {
        applyStyle: (cg, dg) => ({
            fontFamily: 'roman'
        })
    }), tb('sffamily', '', {
        applyStyle: (cg, dg) => ({
            fontFamily: 'sans-serif'
        })
    }), tb('ttfamily', '', {
        applyStyle: (cg, dg) => ({
            fontFamily: 'monospace'
        })
    }), tb([
        'Bbb',
        'mathbb'
    ], '{:math*}', {
        applyStyle: (cg, dg) => ({
            variant: 'double-struck',
            variantStyle: 'up'
        })
    }), tb([
        'frak',
        'mathfrak'
    ], '{:math*}', {
        applyStyle: (cg, dg) => ({
            variant: 'fraktur',
            variantStyle: 'up'
        })
    }), tb('mathcal', '{:math*}', {
        applyStyle: (cg, dg) => ({
            variant: 'calligraphic',
            variantStyle: 'up'
        })
    }), tb('mathscr', '{:math*}', {
        applyStyle: (cg, dg) => ({
            variant: 'script',
            variantStyle: 'up'
        })
    }), tb('mbox', '{:text}', {
        ifMode: 'math',
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            changeMode: !0,
            style: eg,
            mode: 'text',
            command: cg,
            serialize: (gg, hg) => `\\mbox{${ gg.bodyToLatex({
                ...hg,
                skipModeCommand: !0
            }) }}`
        })
    }), tb('text', '{:text}', {
        ifMode: 'math',
        applyMode: 'text'
    }), tb('class', '{name:string}{content:auto*}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[1], fg, {
            customClass: dg[0],
            style: eg
        })
    }), tb('cssId', '{id:string}{content:auto}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[1], fg, {
            cssId: dg[0],
            style: eg
        })
    }), tb('htmlData', '{data:string}{content:auto}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[1], fg, {
            htmlData: dg[0],
            style: eg
        })
    }), tb('htmlStyle', '{data:string}{content:auto}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[1], fg, {
            htmlStyle: dg[0],
            style: eg
        })
    }), tb('em', '{:auto*}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            latexOpen: '\\em',
            latexClose: '',
            customClass: 'ML__emph',
            style: eg
        })
    }), tb('emph', '{:auto}', {
        createAtom: (cg, dg, eg, fg) => new Le(dg[0], fg, {
            latexOpen: '\\emph{',
            latexClose: '}',
            customClass: 'ML__emph',
            style: eg
        })
    });
    const cg = {
        '\\bigl': {
            mclass: 'mopen',
            size: 1
        },
        '\\Bigl': {
            mclass: 'mopen',
            size: 2
        },
        '\\biggl': {
            mclass: 'mopen',
            size: 3
        },
        '\\Biggl': {
            mclass: 'mopen',
            size: 4
        },
        '\\bigr': {
            mclass: 'mclose',
            size: 1
        },
        '\\Bigr': {
            mclass: 'mclose',
            size: 2
        },
        '\\biggr': {
            mclass: 'mclose',
            size: 3
        },
        '\\Biggr': {
            mclass: 'mclose',
            size: 4
        },
        '\\bigm': {
            mclass: 'mrel',
            size: 1
        },
        '\\Bigm': {
            mclass: 'mrel',
            size: 2
        },
        '\\biggm': {
            mclass: 'mrel',
            size: 3
        },
        '\\Biggm': {
            mclass: 'mrel',
            size: 4
        },
        '\\big': {
            mclass: 'mord',
            size: 1
        },
        '\\Big': {
            mclass: 'mord',
            size: 2
        },
        '\\bigg': {
            mclass: 'mord',
            size: 3
        },
        '\\Bigg': {
            mclass: 'mord',
            size: 4
        }
    };
    tb([
        'bigl',
        'Bigl',
        'biggl',
        'Biggl',
        'bigr',
        'Bigr',
        'biggr',
        'Biggr',
        'bigm',
        'Bigm',
        'biggm',
        'Biggm',
        'big',
        'Big',
        'bigg',
        'Bigg'
    ], '{:delim}', {
        createAtom: (dg, eg, fg, gg) => new yf(dg, eg[0], gg, {
            size: cg[dg].size,
            delimClass: cg[dg].mclass,
            style: fg
        })
    }), tb([
        'hspace',
        'hspace*'
    ], '{width:glue}', {
        createAtom: (dg, eg, fg, gg) => {
            var hg;
            return new Me(dg, fg, gg, null !== (hg = eg[0]) && void 0 !== hg ? hg : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), tb([
        'mkern',
        'kern'
    ], '{width:glue}', {
        createAtom: (dg, eg, fg, gg) => {
            var hg;
            return new Me(dg, fg, gg, null !== (hg = eg[0]) && void 0 !== hg ? hg : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), tb('mspace', '{width:glue}', {
        createAtom: (dg, eg, fg, gg) => {
            var hg;
            return new Me(dg, fg, gg, null !== (hg = eg[0]) && void 0 !== hg ? hg : {
                glue: {
                    dimension: 0
                }
            });
        }
    }), tb('mathop', '{:auto}', {
        createAtom: (dg, eg, fg, gg) => new Ef(dg, eg[0], gg, {
            type: 'mop',
            captureSelection: !0,
            limits: 'over-under',
            isFunction: !0,
            hasArgument: !0,
            style: fg
        })
    }), tb('mathchoice', '{:math}{:math}{:math}{:math}', {
        createAtom: (dg, eg, fg, gg) => new _bg(eg, gg)
    }), tb([
        'mathbin',
        'mathrel',
        'mathopen',
        'mathclose',
        'mathpunct',
        'mathord',
        'mathinner'
    ], '{:auto}', {
        createAtom: (dg, eg, fg, gg) => new Ef(dg, eg[0], gg, {
            type: {
                '\\mathbin': 'mbin',
                '\\mathrel': 'mrel',
                '\\mathopen': 'mopen',
                '\\mathclose': 'mclose',
                '\\mathpunct': 'mpunct',
                '\\mathord': 'mord',
                '\\mathinner': 'minner'
            } [dg],
            captureSelection: !0,
            hasArgument: !0,
            style: fg
        })
    }), tb([
        'operatorname',
        'operatorname*'
    ], '{operator:math}', {
        createAtom: (dg, eg, fg, gg) => {
            const hg = new Ef(dg, eg[0], gg, {
                isFunction: !0,
                hasArgument: !0,
                limits: '\\operatorname' === dg ? 'adjacent' : 'over-under',
                style: fg
            });
            return hg.captureSelection = !0, hg.body && hg.body.forEach(ig => {
                var jg;
                'first' !== ig.type && (ig.type = 'mord', ig.value = null !== (jg = {
                    '\u2217': '*',
                    '\u2212': '-'
                } [ig.value]) && void 0 !== jg ? jg : ig.value, ig.isFunction = !1, ig.style.variant || ig.style.variantStyle || (ig.style.variant = 'main', ig.style.variantStyle = 'up'));
            }), hg;
        }
    });
    class dg extends Kd {
        serialize(eg) {
            return '\\unicode"' + ('000000' + this.codepoint.toString(16)).toUpperCase().slice(-6);
        }
        constructor(eg, fg, gg) {
            let hg = Number.parseInt(eg);
            Number.isFinite(hg) || (hg = 10067), super('mord', gg, {
                value: String.fromCodePoint(hg),
                style: fg
            }), this.codepoint = hg;
        }
    }

    function eg(fg) {
        if (1 === fg.length) {
            const gg = fg[0];
            if ('mbin' === gg.type)
                return 'mbin';
            if ('mrel' === gg.type)
                return 'mrel';
        }
        return 'mord';
    }
    tb('unicode', '{charcode:number}', {
        createAtom: (gg, hg, ig, jg) => new dg(hg[0], ig, jg)
    }), tb('rule', '[raise:dimen]{width:dimen}{thickness:dimen}', {
        createAtom: (gg, hg, ig, jg) => new Hf(gg, jg, {
            shift: hg[0],
            width: hg[1],
            height: hg[2],
            style: ig
        })
    }), tb('overline', '{:auto}', {
        createAtom: (gg, hg, ig, jg) => new Df(gg, hg[0], jg, {
            position: 'overline',
            style: ig
        })
    }), tb('underline', '{:auto}', {
        createAtom: (gg, hg, ig, jg) => new Df(gg, hg[0], jg, {
            position: 'underline',
            style: ig
        })
    }), tb('overset', '{above:auto}{base:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ke(gg, jg, {
            above: hg[0],
            body: hg[1],
            skipBoundary: !1,
            style: ig,
            boxType: eg(hg[1]),
            serialize: (kg, lg) => `${ kg.command }{${ kg.aboveToLatex(lg) }}{${ kg.bodyToLatex(lg) }}`
        })
    }), tb('underset', '{below:auto}{base:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ke(gg, jg, {
            below: hg[0],
            body: hg[1],
            skipBoundary: !1,
            style: ig,
            boxType: eg(hg[1]),
            serialize: (kg, lg) => `${ gg }{${ kg.belowToLatex(lg) }}{${ kg.bodyToLatex(lg) }}`
        })
    }), tb('overunderset', '{above:auto}{below:auto}{base:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ke(gg, jg, {
            above: hg[0],
            below: hg[1],
            body: hg[2],
            skipBoundary: !1,
            style: ig,
            boxType: eg(hg[2]),
            serialize: (kg, lg) => `${ kg.command }{${ kg.aboveToLatex(lg) }}{${ kg.bodyToLatex(lg) }}`
        })
    }), tb([
        'stackrel',
        'stackbin'
    ], '[below:auto]{above:auto}{base:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ke(gg, jg, {
            body: hg[2],
            above: hg[1],
            below: hg[0],
            skipBoundary: !1,
            style: ig,
            boxType: '\\stackrel' === gg ? 'mrel' : 'mbin',
            serialize: (kg, lg) => `${ kg.command }{${ kg.aboveToLatex(lg) }}{${ kg.bodyToLatex(lg) }}`
        })
    }), tb('smash', '[:string]{:auto}', {
        createAtom: (gg, hg, ig, jg) => hg[0] ? new Gf(gg, hg[1], jg, {
            smashHeight: hg[0].includes('t'),
            smashDepth: hg[0].includes('b'),
            style: ig
        }) : new Gf(gg, hg[1], jg, {
            smashHeight: !0,
            smashDepth: !0,
            style: ig
        })
    }), tb(['vphantom'], '{:auto*}', {
        createAtom: (gg, hg, ig, jg) => new Gf(gg, hg[1], jg, {
            isInvisible: !0,
            smashWidth: !0,
            style: ig
        })
    }), tb(['hphantom'], '{:auto*}', {
        createAtom: (gg, hg, ig, jg) => new Gf(gg, hg[1], jg, {
            isInvisible: !0,
            smashHeight: !0,
            smashDepth: !0,
            style: ig
        })
    }), tb(['phantom'], '{:auto*}', {
        createAtom: (gg, hg, ig, jg) => new Gf(gg, hg[1], jg, {
            isInvisible: !0,
            style: ig
        })
    }), tb('not', '{:math}', {
        createAtom: (gg, hg, ig, jg) => {
            if (hg.length < 1 || null === hg[0])
                return new Kd('mrel', jg, {
                    command: gg,
                    style: ig,
                    value: '\uE020'
                });
            const kg = hg[0];
            return new Le([
                new Ff(gg, '\uE020', jg, {
                    align: 'right',
                    style: ig,
                    boxType: 'mrel'
                }),
                ...kg
            ], jg, {
                boxType: 'mrel',
                captureSelection: !0,
                command: '\\not',
                serialize: (lg, mg) => {
                    const ng = Kd.serialize(kg, mg);
                    return 1 !== ng.length || /[a-zA-Z]/.test(ng) ? `\\not{${ ng }}` : '\\not' + ng;
                }
            });
        }
    }), tb([
        'ne',
        'neq'
    ], '', {
        createAtom: (gg, hg, ig, jg) => new Le([
            new Ff(gg, '\uE020', jg, {
                align: 'right',
                style: ig,
                boxType: 'mrel'
            }),
            new Kd('mrel', jg, {
                style: ig,
                value: '='
            })
        ], jg, {
            boxType: 'mrel',
            captureSelection: !0,
            serialize: () => gg,
            command: gg
        })
    }), tb('rlap', '{:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ff(gg, hg[0], jg, {
            align: 'right',
            style: ig
        })
    }), tb('llap', '{:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ff(gg, hg[0], jg, {
            style: ig
        })
    }), tb('mathllap', '{:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ff(gg, hg[0], jg, {
            style: ig
        })
    }), tb('mathrlap', '{:auto}', {
        createAtom: (gg, hg, ig, jg) => new Ff(gg, hg[0], jg, {
            align: 'right',
            style: ig
        })
    });
    const gg = {
        acute: 714,
        grave: 715,
        dot: 729,
        ddot: 168,
        mathring: 730,
        tilde: 126,
        bar: 713,
        breve: 728,
        check: 711,
        hat: 94,
        vec: 8407
    };

    function hg(ig) {
        for (const jg of ig)
            for (const kg of jg)
                if (ig.length > 0)
                    return !1;
        return !0;
    }
    tb(Object.keys(gg), '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => new Xd(kg, lg[0], ng, {
            accentChar: gg[kg.slice(1)],
            style: mg
        })
    }), tb([
        'widehat',
        'widecheck',
        'widetilde'
    ], '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => {
            const og = nb(lg[0]);
            return new Xd(kg, lg[0], ng, {
                style: mg,
                svgAccent: kg.slice(1) + (og.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][og.length])
            });
        }
    }), tb([
        'overarc',
        'overparen',
        'wideparen'
    ], '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => new Xd(kg, lg[0], ng, {
            style: mg,
            svgAccent: 'overarc'
        })
    }), tb([
        'underarc',
        'underparen'
    ], '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => new Ke(kg, ng, {
            body: lg[0],
            style: mg,
            svgBelow: 'underarc'
        })
    }), tb('utilde', '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => {
            const og = nb(lg[0]),
                pg = 'widetilde' + (og.length > 5 ? '4' : [
                    '1',
                    '1',
                    '2',
                    '2',
                    '3',
                    '3'
                ][og.length]);
            return new Ke(kg, ng, {
                body: lg[0],
                svgBelow: pg,
                style: mg,
                boxType: eg(lg[0])
            });
        }
    }), tb('^', '{:string}', {
        createAtom: (kg, lg, mg, ng) => {
            var og;
            return new Kd('mord', ng, {
                command: kg,
                isFunction: !1,
                limits: 'adjacent',
                style: mg,
                value: lg[0] && null !== (og = {
                    a: 'â',
                    e: 'ê',
                    i: 'î',
                    o: 'ô',
                    u: 'û',
                    A: 'Â',
                    E: 'Ê',
                    I: 'Î',
                    O: 'Ô',
                    U: 'Û'
                } [lg[0]]) && void 0 !== og ? og : '^'
            });
        }
    }), tb('`', '{:string}', {
        createAtom: (kg, lg, mg, ng) => {
            var og;
            return new Kd('mord', ng, {
                command: kg,
                isFunction: !1,
                limits: 'adjacent',
                style: mg,
                value: lg[0] && null !== (og = {
                    a: 'à',
                    e: 'è',
                    i: 'ì',
                    o: 'ò',
                    u: 'ù',
                    A: 'À',
                    E: 'È',
                    I: 'Ì',
                    O: 'Ò',
                    U: 'Ù'
                } [lg[0]]) && void 0 !== og ? og : '`'
            });
        }
    }), tb('\'', '{:string}', {
        createAtom: (kg, lg, mg, ng) => {
            var og;
            return new Kd('mord', ng, {
                command: kg,
                isFunction: !1,
                limits: 'adjacent',
                style: mg,
                value: lg[0] && null !== (og = {
                    a: 'á',
                    e: 'é',
                    i: 'í',
                    o: 'ó',
                    u: 'ú',
                    A: 'Á',
                    E: 'É',
                    I: 'Í',
                    O: 'Ó',
                    U: 'Ú'
                } [lg[0]]) && void 0 !== og ? og : '^'
            });
        }
    }), tb('~', '{:string}', {
        createAtom: (kg, lg, mg, ng) => {
            var og;
            return new Kd('mord', ng, {
                command: kg,
                isFunction: !1,
                limits: 'adjacent',
                style: mg,
                value: lg[0] && null !== (og = {
                    n: 'ñ',
                    N: 'Ñ',
                    a: 'ã',
                    o: 'õ',
                    A: 'Ã',
                    O: 'Õ'
                } [lg[0]]) && void 0 !== og ? og : '\xB4'
            });
        }
    }), tb('c', '{:string}', {
        createAtom: (kg, lg, mg, ng) => {
            var og;
            return new Kd('mord', ng, {
                command: kg,
                isFunction: !1,
                limits: 'adjacent',
                style: mg,
                value: lg[0] && null !== (og = {
                    c: 'ç',
                    C: 'Ç'
                } [lg[0]]) && void 0 !== og ? og : ''
            });
        }
    }), tb('enclose', '{notation:string}[style:string]{body:auto}', {
        createAtom: (kg, lg, mg, ng) => {
            var og;
            const pg = {
                strokeColor: 'currentColor',
                strokeWidth: '',
                strokeStyle: 'solid',
                backgroundcolor: 'transparent',
                padding: 'auto',
                shadow: 'auto',
                svgStrokeStyle: void 0,
                borderStyle: void 0,
                style: mg
            };
            if (lg[1]) {
                const qg = lg[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
                for (const rg of qg) {
                    const sg = rg.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                    if (sg)
                        pg.strokeWidth = sg[1], pg.strokeStyle = sg[2], pg.strokeColor = sg[3];
                    else {
                        const tg = rg.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                        tg && ('mathbackground' === tg[1] ? pg.backgroundcolor = tg[2] : 'mathcolor' === tg[1] ? pg.strokeColor = tg[2] : 'padding' === tg[1] ? pg.padding = tg[2] : 'shadow' === tg[1] && (pg.shadow = tg[2]));
                    }
                }
                'dashed' === pg.strokeStyle ? pg.svgStrokeStyle = '5,5' : 'dotted' === pg.strokeStyle && (pg.svgStrokeStyle = '1,5');
            }
            pg.borderStyle = `${ pg.strokeWidth } ${ pg.strokeStyle } ${ pg.strokeColor }`;
            const ug = {};
            return (null !== (og = rg[0]) && void 0 !== og ? og : '').split(/[, ]/).filter(vg => vg.length > 0).forEach(vg => {
                ug[vg.toLowerCase()] = !0;
            }), new zf(tg, rg[2], ug, ng, pg);
        }
    }), tb('cancel', '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => new zf(kg, lg[0], {
            updiagonalstrike: !0
        }, ng, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: mg
        })
    }), tb('bcancel', '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => new zf(kg, lg[0], {
            downdiagonalstrike: !0
        }, ng, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: mg
        })
    }), tb('xcancel', '{body:auto}', {
        createAtom: (kg, lg, mg, ng) => new zf(kg, lg[0], {
            updiagonalstrike: !0,
            downdiagonalstrike: !0
        }, ng, {
            strokeColor: 'currentColor',
            strokeWidth: '',
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            style: mg
        })
    }), pb('math', '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        mathstyleName: 'textstyle'
    }))), pb('displaymath', '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        mathstyleName: 'textstyle'
    }))), sb('array', '{columns:colspec}', (kg, lg, mg, ng, og) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        columns: og[0],
        mathstyleName: 'textstyle'
    }))), sb([
        'equation',
        'equation*',
        'subequations'
    ], '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        columns: [{
            align: 'c'
        }]
    }))), sb('multline', '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        columns: [{
            align: 'm'
        }]
    }))), sb([
        'align',
        'align*',
        'aligned',
        'eqnarray'
    ], '', (kg, lg, mg, ng) => {
        let og = 0;
        hg(mg) && (mg = [
            [
                [
                    new Kd('first', kg),
                    new Pe(kg)
                ],
                [
                    new Kd('first', kg),
                    new Pe(kg)
                ]
            ]
        ]);
        for (const pg of mg)
            og = Math.max(og, pg.length);
        const qg = [{
                gap: 0
            },
            {
                align: 'r'
            },
            {
                gap: 0.25
            },
            {
                align: 'l'
            }
        ];
        let rg = 2;
        for (; rg < og;)
            qg.push({
                gap: 1
            }), qg.push({
                align: 'r'
            }), qg.push({
                gap: 0.25
            }), qg.push({
                align: 'l'
            }), rg += 2;
        return qg.push({
            gap: 0
        }), new hf(pg, lg, mg, ng, {
            arraycolsep: 0,
            columns: qg,
            colSeparationType: 'align',
            jot: 0.3,
            minColumns: 2
        });
    }), sb('split', '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ],
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        columns: [{
                align: 'r'
            },
            {
                align: 'l'
            }
        ],
        minColumns: 2
    }))), sb([
        'gather',
        'gathered'
    ], '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        columns: [{
                gap: 0.25
            },
            {
                align: 'c'
            },
            {
                gap: 0
            }
        ],
        colSeparationType: 'gather'
    }))), sb([
        'matrix',
        'pmatrix',
        'bmatrix',
        'Bmatrix',
        'vmatrix',
        'Vmatrix',
        'matrix*',
        'pmatrix*',
        'bmatrix*',
        'Bmatrix*',
        'vmatrix*',
        'Vmatrix*'
    ], '[columns:colspec]', (kg, lg, mg, ng, og) => {
        var pg;
        hg(mg) && (mg = [
            [
                [
                    new Kd('first', kg),
                    new Pe(kg)
                ]
            ]
        ]);
        let qg = '.',
            rg = '.';
        switch (lg) {
            case 'pmatrix':
            case 'pmatrix*':
                qg = '(', rg = ')';
                break;
            case 'bmatrix':
            case 'bmatrix*':
                qg = '[', rg = ']';
                break;
            case 'Bmatrix':
            case 'Bmatrix*':
                qg = '\\lbrace', rg = '\\rbrace';
                break;
            case 'vmatrix':
            case 'vmatrix*':
                qg = '\\vert', rg = '\\vert';
                break;
            case 'Vmatrix':
            case 'Vmatrix*':
                qg = '\\Vert', rg = '\\Vert';
                break;
            case 'matrix':
            case 'matrix*':
                qg = '.', rg = '.';
        }
        return new hf(kg, lg, mg, ng, {
            mathstyleName: 'textstyle',
            leftDelim: qg,
            rightDelim: rg,
            columns: null !== (pg = og[0]) && void 0 !== pg ? pg : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ]
        });
    }), sb([
        'smallmatrix',
        'smallmatrix*'
    ], '[columns:colspec]', (kg, lg, mg, ng, og) => {
        var pg;
        return hg(mg) && (mg = [
            [
                [
                    new Kd('first', kg),
                    new Pe(kg)
                ]
            ]
        ]), new hf(kg, lg, mg, ng, {
            mathstyleName: 'scriptstyle',
            columns: null !== (pg = og[0]) && void 0 !== pg ? pg : [{
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                },
                {
                    align: 'c'
                }
            ],
            colSeparationType: 'small',
            arraystretch: 0.5
        });
    }), sb([
        'cases',
        'dcases'
    ], '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        mathstyleName: 'dcases' === lg ? 'displaystyle' : 'textstyle',
        arraystretch: 1.2,
        leftDelim: '\\lbrace',
        rightDelim: '.',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), sb('rcases', '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        arraystretch: 1.2,
        leftDelim: '.',
        rightDelim: '\\rbrace',
        columns: [{
                align: 'l'
            },
            {
                gap: 1
            },
            {
                align: 'l'
            }
        ]
    }))), pb('center', '', (kg, lg, mg, ng) => (hg(mg) && (mg = [
        [
            [
                new Kd('first', kg),
                new Pe(kg)
            ]
        ]
    ]), new hf(kg, lg, mg, ng, {
        columns: [{
            align: 'c'
        }]
    }))), tb([
        'overrightarrow',
        'overleftarrow',
        'Overrightarrow',
        'overleftharpoon',
        'overrightharpoon',
        'overleftrightarrow',
        'overlinesegment',
        'overgroup'
    ], '{:auto}', {
        createAtom: (kg, lg, mg, ng) => new Ke(kg, ng, {
            body: lg[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: mg,
            svgAbove: kg.slice(1)
        })
    }), tb('overbrace', '{:auto}', {
        createAtom: (kg, lg, mg, ng) => new Ke(kg, ng, {
            body: lg[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: mg,
            svgAbove: kg.slice(1)
        })
    }), tb([
        'underrightarrow',
        'underleftarrow',
        'underleftrightarrow',
        'underlinesegment',
        'undergroup'
    ], '{:auto}', {
        createAtom: (kg, lg, mg, ng) => new Ke(kg, ng, {
            body: lg[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mrel',
            style: mg,
            svgBelow: kg.slice(1)
        })
    }), tb(['underbrace'], '{:auto}', {
        createAtom: (kg, lg, mg, ng) => new Ke(kg, ng, {
            body: lg[0],
            skipBoundary: !1,
            supsubPlacement: 'over-under',
            paddedBody: !0,
            boxType: 'mord',
            style: mg,
            svgBelow: kg.slice(1)
        })
    }), tb([
        'xrightarrow',
        'xleftarrow',
        'xRightarrow',
        'xLeftarrow',
        'xleftharpoonup',
        'xleftharpoondown',
        'xrightharpoonup',
        'xrightharpoondown',
        'xlongequal',
        'xtwoheadleftarrow',
        'xtwoheadrightarrow',
        'xleftrightarrow',
        'xLeftrightarrow',
        'xrightleftharpoons',
        'xleftrightharpoons',
        'xhookleftarrow',
        'xhookrightarrow',
        'xmapsto',
        'xtofrom',
        'xrightleftarrows',
        'xrightequilibrium',
        'xleftequilibrium'
    ], '[:auto]{:auto}', {
        createAtom: (kg, lg, mg, ng) => {
            var og, pg;
            return new Ke(kg, ng, {
                style: mg,
                svgBody: kg.slice(1),
                above: 0 === (null === (og = lg[1]) || void 0 === og ? void 0 : og.length) ? void 0 : lg[1],
                below: null !== (pg = lg[0]) && void 0 !== pg ? pg : null,
                skipBoundary: !1,
                supsubPlacement: 'over-under',
                paddedBody: !0,
                paddedLabels: !0,
                boxType: 'mrel',
                serialize: (qg, rg) => kg + (qg.hasEmptyBranch('below') ? '' : `[${ qg.belowToLatex(rg) }]`) + `{${ qg.aboveToLatex(rg) }}${ qg.supsubToLatex(rg) }`
            });
        }
    }), tb([
        'arccos',
        'arcsin',
        'arctan',
        'arctg',
        'arcctg',
        'arg',
        'ch',
        'cos',
        'cosh',
        'cot',
        'cotg',
        'coth',
        'ctg',
        'cth',
        'csc',
        'cosec',
        'dim',
        'exp',
        'hom',
        'inf',
        'ker',
        'lb',
        'lg',
        'ln',
        'log',
        'Pr',
        'sec',
        'sh',
        'sin',
        'sinh',
        'sup',
        'tan',
        'tanh',
        'tg',
        'th',
        'arcsec',
        'arccsc',
        'arsinh',
        'arcosh',
        'artanh',
        'arcsech',
        'arccsch'
    ], '', {
        isFunction: !0,
        createAtom: (kg, lg, mg, ng) => new Ef(kg, kg.slice(1), ng, {
            limits: 'adjacent',
            isFunction: !0,
            variant: 'main',
            variantStyle: 'up',
            style: mg
        })
    }), tb([
        'liminf',
        'limsup'
    ], '', {
        createAtom: (kg, lg, mg, ng) => new Ef(kg, {
            '\\liminf': 'lim inf',
            '\\limsup': 'lim sup'
        } [kg], ng, {
            limits: 'over-under',
            variant: 'main',
            style: mg
        })
    }), tb([
        'lim',
        'mod'
    ], '', {
        createAtom: (kg, lg, mg, ng) => new Ef(kg, kg.slice(1), ng, {
            limits: 'over-under',
            variant: 'main',
            style: mg
        })
    }), tb([
        'det',
        'max',
        'min'
    ], '', {
        isFunction: !0,
        createAtom: (kg, lg, mg, ng) => new Ef(kg, kg.slice(1), ng, {
            limits: 'over-under',
            isFunction: !0,
            variant: 'main',
            style: mg
        })
    }), tb(['ang'], '{:math}', {
        isFunction: !0,
        createAtom: (kg, lg, mg, ng) => new Le([
            ...lg[0],
            new Kd('mord', ng, {
                value: '\xB0',
                style: mg
            })
        ], ng, {
            mode: 'math',
            latexOpen: '\\ang{',
            latexClose: '}',
            style: mg
        })
    }), tb('sqrt', '[index:auto]{radicand:auto}', {
        createAtom: (kg, lg, mg, ng) => new If(kg, ng, {
            body: lg[1],
            index: lg[0],
            style: mg
        })
    }), tb([
        'frac',
        'dfrac',
        'tfrac',
        'cfrac',
        'binom',
        'dbinom',
        'tbinom'
    ], '{numerator}{denominator}', {
        createAtom: (kg, lg, mg, ng) => {
            const og = {
                style: mg
            };
            switch (kg) {
                case '\\dfrac':
                case '\\frac':
                case '\\tfrac':
                    og.hasBarLine = !0;
                    break;
                case '\\atopfrac':
                    og.hasBarLine = !1;
                    break;
                case '\\dbinom':
                case '\\binom':
                case '\\tbinom':
                    og.hasBarLine = !1, og.leftDelim = '(', og.rightDelim = ')';
            }
            switch (kg) {
                case '\\dfrac':
                case '\\dbinom':
                    og.mathstyleName = 'displaystyle';
                    break;
                case '\\tfrac':
                case '\\tbinom':
                    og.mathstyleName = 'textstyle';
                    break;
                case '\\cfrac':
                    og.hasBarLine = !0, og.continuousFraction = !0;
            }
            return new Af(kg, lg[0], lg[1], ng, og);
        }
    }), tb([
        'brace',
        'brack'
    ], '', {
        infix: !0,
        createAtom: (kg, lg, mg, ng) => new Af(kg, lg[0], lg[1], ng, {
            hasBarLine: !1,
            leftDelim: '\\brace' === kg ? '\\lbrace' : '\\lbrack',
            rightDelim: '\\brace' === kg ? '\\rbrace' : '\\rbrack',
            style: mg,
            serialize: (og, pg) => Cd([
                og.aboveToLatex(pg),
                og.command,
                og.belowToLatex(pg)
            ])
        })
    }), tb([
        'over',
        'atop',
        'choose'
    ], '', {
        infix: !0,
        createAtom: (kg, lg, mg, ng) => {
            let og, pg;
            return '\\choose' === kg && (og = '(', pg = ')'), new Af(kg, lg[0], lg[1], ng, {
                hasBarLine: '\\over' === kg,
                leftDelim: og,
                rightDelim: pg,
                style: mg,
                serialize: (qg, rg) => Cd([
                    qg.aboveToLatex(rg),
                    qg.command,
                    qg.belowToLatex(rg)
                ])
            });
        }
    }), tb([
        'overwithdelims',
        'atopwithdelims'
    ], '{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}', {
        infix: !0,
        createAtom: (kg, lg, mg, ng) => new Af(kg, lg[0], lg[1], ng, {
            leftDelim: lg[2],
            rightDelim: lg[3],
            hasBarLine: !1,
            style: mg,
            serialize: (og, pg) => `${ og.aboveToLatex(pg) } ${ og.command }${ og.leftDelim }${ og.rightDelim }${ og.belowToLatex(pg) }`
        })
    }), tb('pdiff', '{numerator}{denominator}', {
        createAtom: (kg, lg, mg, ng) => new Af(kg, lg[0], lg[1], ng, {
            hasBarLine: !0,
            numerPrefix: '\u2202',
            denomPrefix: '\u2202',
            style: mg
        })
    }), tb([
        'sum',
        'prod',
        'bigcup',
        'bigcap',
        'coprod',
        'bigvee',
        'bigwedge',
        'biguplus',
        'bigotimes',
        'bigoplus',
        'bigodot',
        'bigsqcup',
        'smallint',
        'intop'
    ], '', {
        createAtom: (kg, lg, mg, ng) => new Ef(kg, {
            coprod: '\u2210',
            bigvee: '\u22C1',
            bigwedge: '\u22C0',
            biguplus: '\u2A04',
            bigcap: '\u22C2',
            bigcup: '\u22C3',
            intop: '\u222B',
            prod: '\u220F',
            sum: '\u2211',
            bigotimes: '\u2A02',
            bigoplus: '\u2A01',
            bigodot: '\u2A00',
            bigsqcup: '\u2A06',
            smallint: '\u222B'
        } [kg.slice(1)], ng, {
            isExtensibleSymbol: !0,
            limits: 'auto',
            variant: 'main',
            style: mg
        })
    });
    const kg = {
        int: '\u222B',
        iint: '\u222C',
        iiint: '\u222D',
        oint: '\u222E',
        oiint: '\u222F',
        oiiint: '\u2230',
        intclockwise: '\u2231',
        varointclockwise: '\u2232',
        ointctrclockwise: '\u2233',
        intctrclockwise: '\u2A11',
        sqcup: '\u2294',
        sqcap: '\u2293',
        uplus: '\u228E',
        wr: '\u2240',
        amalg: '\u2A3F',
        Cap: '\u22D2',
        Cup: '\u22D3',
        doublecap: '\u22D2',
        doublecup: '\u22D3'
    };

    function lg(mg, ng) {
        return mg[0] === ng[0] && mg[1] === ng[1] ? 'equal' : 'different';
    }

    function mg(ng) {
        let og = 1 / 0,
            pg = -1 / 0;
        for (const qg of ng.ranges)
            og = Math.min(og, d[0], d[1]), pg = Math.max(pg, d[0], d[1]);
        return [
            og,
            pg
        ];
    }

    function og(pg, qg, rg) {
        return rg ? function(sg, tg) {
            if (!tg)
                return '';
            if ('string' == typeof tg)
                return tg;
            if (!sg || void 0 === tg.after)
                return tg.value;
            let ug = !1,
                vg = !1,
                wg = !1,
                xg = !1,
                yg = !1,
                zg = !1,
                Ag = !1,
                Bg = !1,
                Cg = !1,
                Dg = !1,
                Eg = !1,
                Fg = !1,
                Gg = !1,
                Hg = !1,
                Ig = !1,
                Jg = sg[0],
                Kg = 0;
            for (; Jg && /msubsup|placeholder/.test(Jg.type);)
                Kg += 1, Jg = sg[Kg];
            return ug = !Jg || 'first' === Jg.type, Jg && (Hg = 'text' === Jg.mode, vg = !Hg && 'mord' === Jg.type && $.test(Jg.value), wg = !Hg && 'mord' === Jg.type && /\d+$/.test(Jg.value), xg = !Hg && Jg.isFunction, yg = 'genfrac' === Jg.type, zg = 'surd' === Jg.type, Ag = 'mbin' === Jg.type, Bg = 'mrel' === Jg.type, Cg = 'mop' === Jg.type, Dg = 'mpunct' === Jg.type || 'minner' === Jg.type, Eg = 'array' === Jg.type, Fg = 'mopen' === Jg.type, Gg = 'mclose' === Jg.type || 'leftright' === Jg.type, Ig = 'space' === Jg.type), tg.after.includes('nothing') && ug || tg.after.includes('letter') && vg || tg.after.includes('digit') && wg || tg.after.includes('function') && xg || tg.after.includes('frac') && yg || tg.after.includes('surd') && zg || tg.after.includes('binop') && Ag || tg.after.includes('relop') && Bg || tg.after.includes('operator') && Cg || tg.after.includes('punct') && Dg || tg.after.includes('array') && Eg || tg.after.includes('openfence') && Fg || tg.after.includes('closefence') && Gg || tg.after.includes('text') && Hg || tg.after.includes('space') && Ig ? tg.value : '';
        }(pg, rg[qg]) : '';
    }
    tb(Object.keys(kg), '', {
        createAtom: (pg, qg, rg, sg) => new Ef(pg, kg[pg.slice(1)], sg, {
            limits: 'adjacent',
            isExtensibleSymbol: !0,
            style: rg,
            variant: {
                '\u22D2': 'ams',
                '\u22D3': 'ams'
            } [kg[pg.slice(1)]]
        })
    }), tb([
        'Re',
        'Im'
    ], '', {
        createAtom: (pg, qg, rg, sg) => new Ef(pg, {
            '\\Re': 'ℜ',
            '\\Im': 'ℑ'
        } [pg], sg, {
            limits: 'adjacent',
            style: rg,
            isFunction: !0,
            variant: 'fraktur'
        })
    }), tb('middle', '{:delim}', {
        createAtom: (pg, qg, rg, sg) => new xf(pg, qg[0], sg, {
            size: 1,
            style: rg
        })
    }), cb('0123456789/@.?!'), eb(65, 90), eb(97, 122), cb([
        [
            '\\forall',
            8704
        ],
        [
            '\\exists',
            8707
        ],
        [
            '\\nexists',
            8708,
            'mord',
            'ams'
        ],
        [
            '\\mid',
            8739,
            'mrel'
        ],
        [
            '\\top',
            8868
        ],
        [
            '\\bot',
            8869
        ]
    ]), cb([
        [
            '\\sharp',
            9839
        ],
        [
            '\\flat',
            9837
        ],
        [
            '\\natural',
            9838
        ],
        [
            '\\#',
            35
        ],
        [
            '\\&',
            38
        ],
        [
            '\\clubsuit',
            9827
        ],
        [
            '\\heartsuit',
            9825
        ],
        [
            '\\spadesuit',
            9824
        ],
        [
            '\\diamondsuit',
            9826
        ],
        [
            '\\parallelogram',
            9649
        ]
    ]), cb([
        [
            '\\backslash',
            92
        ],
        [
            '\\nabla',
            8711
        ],
        [
            '\\partial',
            8706
        ],
        [
            '\\ell',
            8467
        ],
        [
            '\\hbar',
            8463
        ],
        [
            '\\Q',
            81,
            'mord',
            'double-struck'
        ],
        [
            '\\C',
            67,
            'mord',
            'double-struck'
        ],
        [
            '\\P',
            80,
            'mord',
            'double-struck'
        ],
        [
            '\\pounds',
            163
        ],
        [
            '\\euro',
            8364
        ]
    ]), cb([
        [
            '\\rightarrow',
            8594
        ],
        [
            '\\to',
            8594
        ],
        [
            '\\leftarrow',
            8592
        ],
        [
            '\\gets',
            8592
        ],
        [
            '\\Rightarrow',
            8658
        ],
        [
            '\\Leftarrow',
            8656
        ],
        [
            '\\longrightarrow',
            10230
        ],
        [
            '\\longleftarrow',
            10229
        ],
        [
            '\\Longrightarrow',
            10233
        ],
        [
            '\\implies',
            10233
        ],
        [
            '\\Longleftarrow',
            10232
        ],
        [
            '\\impliedby',
            10232
        ],
        [
            '\\longleftrightarrow',
            10231
        ],
        [
            '\\biconditional',
            10231
        ],
        [
            '\\Longleftrightarrow',
            10234
        ],
        [
            '\\mapsto',
            8614
        ],
        [
            '\\longmapsto',
            10236
        ],
        [
            '\\uparrow',
            8593
        ],
        [
            '\\downarrow',
            8595
        ],
        [
            '\\Uparrow',
            8657
        ],
        [
            '\\Downarrow',
            8659
        ],
        [
            '\\updownarrow',
            8597
        ],
        [
            '\\Updownarrow',
            8661
        ],
        [
            '\\hookrightarrow',
            8618
        ],
        [
            '\\hookleftarrow',
            8617
        ],
        [
            '\\rightharpoonup',
            8640
        ],
        [
            '\\leftharpoonup',
            8636
        ],
        [
            '\\rightharpoondown',
            8641
        ],
        [
            '\\leftharpoondown',
            8637
        ],
        [
            '\\searrow',
            8600
        ],
        [
            '\\nearrow',
            8599
        ],
        [
            '\\swarrow',
            8601
        ],
        [
            '\\nwarrow',
            8598
        ],
        [
            '\\originalof',
            8886
        ],
        [
            '\\laplace',
            8886
        ],
        [
            '\\imageof',
            8887
        ],
        [
            '\\Laplace',
            8887
        ]
    ], 'mrel'), cb([
        [
            '\\lbrace',
            123,
            'mopen'
        ],
        [
            '\\rbrace',
            125,
            'mclose'
        ],
        [
            '\\lparen',
            40,
            'mopen'
        ],
        [
            '\\rparen',
            41,
            'mclose'
        ],
        [
            '\\langle',
            10216,
            'mopen'
        ],
        [
            '\\rangle',
            10217,
            'mclose'
        ],
        [
            '\\lfloor',
            8970,
            'mopen'
        ],
        [
            '\\rfloor',
            8971,
            'mclose'
        ],
        [
            '\\lceil',
            8968,
            'mopen'
        ],
        [
            '\\rceil',
            8969,
            'mclose'
        ],
        [
            '\\vert',
            8739
        ],
        [
            '\\lvert',
            8739,
            'mopen'
        ],
        [
            '\\rvert',
            8739,
            'mclose'
        ],
        [
            '\\|',
            8741
        ],
        [
            '\\Vert',
            8741
        ],
        [
            '\\mVert',
            8741
        ],
        [
            '\\lVert',
            8741,
            'mopen'
        ],
        [
            '\\rVert',
            8741,
            'mclose'
        ],
        [
            '\\lbrack',
            91,
            'mopen'
        ],
        [
            '\\rbrack',
            93,
            'mclose'
        ],
        [
            '\\{',
            123,
            'mopen'
        ],
        [
            '\\}',
            125,
            'mclose'
        ],
        [
            '(',
            40,
            'mopen'
        ],
        [
            ')',
            41,
            'mclose'
        ],
        [
            '[',
            91,
            'mopen'
        ],
        [
            ']',
            93,
            'mclose'
        ],
        [
            '\\ulcorner',
            9484,
            'mopen',
            'ams'
        ],
        [
            '\\urcorner',
            9488,
            'mclose',
            'ams'
        ],
        [
            '\\llcorner',
            9492,
            'mopen',
            'ams'
        ],
        [
            '\\lrcorner',
            9496,
            'mclose',
            'ams'
        ],
        [
            '\\lgroup',
            10222,
            'mopen'
        ],
        [
            '\\rgroup',
            10223,
            'mclose'
        ],
        [
            '\\lmoustache',
            9136,
            'mopen'
        ],
        [
            '\\rmoustache',
            9137,
            'mclose'
        ]
    ]), cb([
        [
            '\\dashrightarrow',
            8674
        ],
        [
            '\\dashleftarrow',
            8672
        ],
        [
            '\\Rrightarrow',
            8667
        ],
        [
            '\\Lleftarrow',
            8666
        ],
        [
            '\\leftrightarrows',
            8646
        ],
        [
            '\\rightleftarrows',
            8644
        ],
        [
            '\\curvearrowright',
            8631
        ],
        [
            '\\curvearrowleft',
            8630
        ],
        [
            '\\rightrightarrows',
            8649
        ],
        [
            '\\leftleftarrows',
            8647
        ],
        [
            '\\upuparrows',
            8648
        ],
        [
            '\\downdownarrows',
            8650
        ],
        [
            '\\vartriangle',
            9651
        ],
        [
            '\\triangleq',
            8796
        ],
        [
            '\\vartriangleleft',
            8882
        ],
        [
            '\\trianglelefteq',
            8884
        ],
        [
            '\\ntriangleleft',
            8938
        ],
        [
            '\\ntrianglelefteq',
            8940
        ],
        [
            '\\vartriangleright',
            8883
        ],
        [
            '\\trianglerighteq',
            8885
        ],
        [
            '\\ntriangleright',
            8939
        ],
        [
            '\\ntrianglerighteq',
            8941
        ],
        [
            '\\blacktriangleleft',
            9664
        ],
        [
            '\\blacktriangleright',
            9654
        ],
        [
            '\\leftarrowtail',
            8610
        ],
        [
            '\\rightarrowtail',
            8611
        ],
        [
            '\\looparrowright',
            8620
        ],
        [
            '\\looparrowleft',
            8619
        ],
        [
            '\\twoheadleftarrow',
            8606
        ],
        [
            '\\twoheadrightarrow',
            8608
        ],
        [
            '\\rightleftharpoons',
            8652
        ],
        [
            '\\leftrightharpoons',
            8651
        ],
        [
            '\\Rsh',
            8625
        ],
        [
            '\\Lsh',
            8624
        ],
        [
            '\\circlearrowright',
            8635
        ],
        [
            '\\circlearrowleft',
            8634
        ],
        [
            '\\restriction',
            8638
        ],
        [
            '\\upharpoonright',
            8638
        ],
        [
            '\\upharpoonleft',
            8639
        ],
        [
            '\\downharpoonright',
            8642
        ],
        [
            '\\downharpoonleft',
            8643
        ],
        [
            '\\rightsquigarrow',
            8669
        ],
        [
            '\\leadsto',
            8669
        ],
        [
            '\\leftrightsquigarrow',
            8621
        ],
        [
            '\\multimap',
            8888
        ],
        [
            '\\nrightarrow',
            8603
        ],
        [
            '\\nleftarrow',
            8602
        ],
        [
            '\\nRightarrow',
            8655
        ],
        [
            '\\nLeftarrow',
            8653
        ],
        [
            '\\nleftrightarrow',
            8622
        ],
        [
            '\\nLeftrightarrow',
            8654
        ],
        [
            '\\shortparallel',
            8741
        ],
        [
            '\\nless',
            8814
        ],
        [
            '\\nleqslant',
            57360
        ],
        [
            '\\lneq',
            10887
        ],
        [
            '\\lneqq',
            8808
        ],
        [
            '\\nleqq',
            57361
        ],
        [
            '\\lvertneqq',
            57356
        ],
        [
            '\\lnsim',
            8934
        ],
        [
            '\\lnapprox',
            10889
        ],
        [
            '\\nprec',
            8832
        ],
        [
            '\\npreceq',
            8928
        ],
        [
            '\\precnsim',
            8936
        ],
        [
            '\\precnapprox',
            10937
        ],
        [
            '\\nsim',
            8769
        ],
        [
            '\\nshortmid',
            57350
        ],
        [
            '\\nmid',
            8740
        ],
        [
            '\\nvdash',
            8876
        ],
        [
            '\\nvDash',
            8877
        ],
        [
            '\\ngtr',
            8815
        ],
        [
            '\\ngeqslant',
            57359
        ],
        [
            '\\ngeqq',
            57358
        ],
        [
            '\\gneq',
            10888
        ],
        [
            '\\gneqq',
            8809
        ],
        [
            '\\gvertneqq',
            57357
        ],
        [
            '\\gnsim',
            8935
        ],
        [
            '\\gnapprox',
            10890
        ],
        [
            '\\nsucc',
            8833
        ],
        [
            '\\nsucceq',
            8929
        ],
        [
            '\\succnsim',
            8937
        ],
        [
            '\\succnapprox',
            10938
        ],
        [
            '\\ncong',
            8774
        ],
        [
            '\\nshortparallel',
            57351
        ],
        [
            '\\nparallel',
            8742
        ],
        [
            '\\nVDash',
            8879
        ],
        [
            '\\nsupseteqq',
            57368
        ],
        [
            '\\supsetneq',
            8843
        ],
        [
            '\\varsupsetneq',
            57371
        ],
        [
            '\\supsetneqq',
            10956
        ],
        [
            '\\varsupsetneqq',
            57369
        ],
        [
            '\\nVdash',
            8878
        ],
        [
            '\\precneqq',
            10933
        ],
        [
            '\\succneqq',
            10934
        ],
        [
            '\\nsubseteqq',
            57366
        ],
        [
            '\\leqslant',
            10877
        ],
        [
            '\\geqslant',
            10878
        ],
        [
            '\\gtrsim',
            8819
        ],
        [
            '\\approxeq',
            8778
        ],
        [
            '\\thickapprox',
            8776
        ],
        [
            '\\lessapprox',
            10885
        ],
        [
            '\\gtrapprox',
            10886
        ],
        [
            '\\precapprox',
            10935
        ],
        [
            '\\succapprox',
            10936
        ],
        [
            '\\thicksim',
            8764
        ],
        [
            '\\succsim',
            8831
        ],
        [
            '\\precsim',
            8830
        ],
        [
            '\\backsim',
            8765
        ],
        [
            '\\eqsim',
            8770
        ],
        [
            '\\backsimeq',
            8909
        ],
        [
            '\\lesssim',
            8818
        ],
        [
            '\\nleq',
            8816
        ],
        [
            '\\ngeq',
            8817
        ],
        [
            '\\smallsmile',
            8995
        ],
        [
            '\\smallfrown',
            8994
        ],
        [
            '\\leqq',
            8806
        ],
        [
            '\\eqslantless',
            10901
        ],
        [
            '\\lll',
            8920
        ],
        [
            '\\lessgtr',
            8822
        ],
        [
            '\\lesseqgtr',
            8922
        ],
        [
            '\\lesseqqgtr',
            10891
        ],
        [
            '\\risingdotseq',
            8787
        ],
        [
            '\\fallingdotseq',
            8786
        ],
        [
            '\\subseteqq',
            10949
        ],
        [
            '\\Subset',
            8912
        ],
        [
            '\\sqsubset',
            8847
        ],
        [
            '\\preccurlyeq',
            8828
        ],
        [
            '\\curlyeqprec',
            8926
        ],
        [
            '\\vDash',
            8872
        ],
        [
            '\\Vvdash',
            8874
        ],
        [
            '\\bumpeq',
            8783
        ],
        [
            '\\Bumpeq',
            8782
        ],
        [
            '\\geqq',
            8807
        ],
        [
            '\\eqslantgtr',
            10902
        ],
        [
            '\\ggg',
            8921
        ],
        [
            '\\gtrless',
            8823
        ],
        [
            '\\gtreqless',
            8923
        ],
        [
            '\\gtreqqless',
            10892
        ],
        [
            '\\supseteqq',
            10950
        ],
        [
            '\\Supset',
            8913
        ],
        [
            '\\sqsupset',
            8848
        ],
        [
            '\\succcurlyeq',
            8829
        ],
        [
            '\\curlyeqsucc',
            8927
        ],
        [
            '\\Vdash',
            8873
        ],
        [
            '\\shortmid',
            8739
        ],
        [
            '\\between',
            8812
        ],
        [
            '\\pitchfork',
            8916
        ],
        [
            '\\varpropto',
            8733
        ],
        [
            '\\backepsilon',
            8717
        ],
        [
            '\\llless',
            8920
        ],
        [
            '\\gggtr',
            8921
        ],
        [
            '\\doteqdot',
            8785
        ],
        [
            '\\Doteq',
            8785
        ],
        [
            '\\eqcirc',
            8790
        ],
        [
            '\\circeq',
            8791
        ],
        [
            '\\therefore',
            8756
        ],
        [
            '\\because',
            8757
        ]
    ], 'mrel', 'ams'), cb([
        [
            '+',
            43
        ],
        [
            '-',
            8722
        ],
        [
            '\u2212',
            8722
        ],
        [
            '\\pm',
            177
        ],
        [
            '\\mp',
            8723
        ],
        [
            '*',
            8727
        ],
        [
            '\\times',
            215
        ],
        [
            '\\div',
            247
        ],
        [
            '\\divides',
            8739
        ],
        [
            '\\cdot',
            8901
        ],
        [
            '\\cap',
            8745
        ],
        [
            '\\cup',
            8746
        ],
        [
            '\\setminus',
            8726
        ],
        [
            '\\land',
            8743
        ],
        [
            '\\wedge',
            8743
        ],
        [
            '\\lor',
            8744
        ],
        [
            '\\vee',
            8744
        ],
        [
            '\\circ',
            8728
        ],
        [
            '\\bigcirc',
            9711
        ],
        [
            '\\bullet',
            8729
        ],
        [
            '\\oplus',
            8853
        ],
        [
            '\\ominus',
            8854
        ],
        [
            '\\otimes',
            8855
        ],
        [
            '\\odot',
            8857
        ],
        [
            '\\oslash',
            8856
        ],
        [
            '\\bigtriangleup',
            9651
        ],
        [
            '\\bigtriangledown',
            9661
        ],
        [
            '\\triangleleft',
            9667
        ],
        [
            '\\triangleright',
            9657
        ],
        [
            '\\And',
            38
        ],
        [
            '\\dagger',
            8224
        ],
        [
            '\\dag',
            8224
        ],
        [
            '\\ddag',
            8225
        ],
        [
            '\\ddagger',
            8225
        ],
        [
            '\\ast',
            8727
        ],
        [
            '\\star',
            8902
        ],
        [
            '\\bigstar',
            9733
        ],
        [
            '\\diamond',
            8900
        ]
    ], 'mbin'), cb([
        [
            '\\lhd',
            8882
        ],
        [
            '\\rhd',
            8883
        ],
        [
            '\\lessdot',
            8918
        ],
        [
            '\\gtrdot',
            8919
        ],
        [
            '\\ltimes',
            8905
        ],
        [
            '\\rtimes',
            8906
        ],
        [
            '\\leftthreetimes',
            8907
        ],
        [
            '\\rightthreetimes',
            8908
        ],
        [
            '\\intercal',
            8890
        ],
        [
            '\\dotplus',
            8724
        ],
        [
            '\\doublebarwedge',
            10846
        ],
        [
            '\\divideontimes',
            8903
        ],
        [
            '\\centerdot',
            8901
        ],
        [
            '\\smallsetminus',
            8726
        ],
        [
            '\\barwedge',
            8892
        ],
        [
            '\\veebar',
            8891
        ],
        [
            '\\nor',
            8891
        ],
        [
            '\\curlywedge',
            8911
        ],
        [
            '\\curlyvee',
            8910
        ],
        [
            '\\boxminus',
            8863
        ],
        [
            '\\boxplus',
            8862
        ],
        [
            '\\boxtimes',
            8864
        ],
        [
            '\\boxdot',
            8865
        ],
        [
            '\\circleddash',
            8861
        ],
        [
            '\\circledast',
            8859
        ],
        [
            '\\circledcirc',
            8858
        ],
        [
            '\\unlhd',
            8884
        ],
        [
            '\\unrhd',
            8885
        ]
    ], 'mbin', 'ams'), cb([
        [
            '\\surd',
            8730
        ],
        [
            '\\infty',
            8734
        ],
        [
            '\\prime',
            8242
        ],
        [
            '\\doubleprime',
            8243
        ],
        [
            '\\angle',
            8736
        ],
        [
            '`',
            8216
        ],
        [
            '\\$',
            36
        ],
        [
            '\\%',
            37
        ],
        [
            '\\_',
            95
        ],
        [
            '\\alpha',
            945
        ],
        [
            '\\beta',
            946
        ],
        [
            '\\gamma',
            947
        ],
        [
            '\\delta',
            948
        ],
        [
            '\\epsilon',
            1013
        ],
        [
            '\\varepsilon',
            949
        ],
        [
            '\\zeta',
            950
        ],
        [
            '\\eta',
            951
        ],
        [
            '\\theta',
            952
        ],
        [
            '\\vartheta',
            977
        ],
        [
            '\\iota',
            953
        ],
        [
            '\\kappa',
            954
        ],
        [
            '\\varkappa',
            1008,
            'mord',
            'ams'
        ],
        [
            '\\lambda',
            955
        ],
        [
            '\\mu',
            956
        ],
        [
            '\\nu',
            957
        ],
        [
            '\\xi',
            958
        ],
        [
            '\\omicron',
            111
        ],
        [
            '\\pi',
            960
        ],
        [
            '\\varpi',
            982
        ],
        [
            '\\rho',
            961
        ],
        [
            '\\varrho',
            1009
        ],
        [
            '\\sigma',
            963
        ],
        [
            '\\varsigma',
            962
        ],
        [
            '\\tau',
            964
        ],
        [
            '\\phi',
            981
        ],
        [
            '\\varphi',
            966
        ],
        [
            '\\upsilon',
            965
        ],
        [
            '\\chi',
            967
        ],
        [
            '\\psi',
            968
        ],
        [
            '\\omega',
            969
        ],
        [
            '\\Gamma',
            915
        ],
        [
            '\\Delta',
            916
        ],
        [
            '\\Theta',
            920
        ],
        [
            '\\Lambda',
            923
        ],
        [
            '\\Xi',
            926
        ],
        [
            '\\Pi',
            928
        ],
        [
            '\\Sigma',
            931
        ],
        [
            '\\Upsilon',
            933
        ],
        [
            '\\Phi',
            934
        ],
        [
            '\\Psi',
            936
        ],
        [
            '\\Omega',
            937
        ],
        [
            '\\digamma',
            989,
            'mord',
            'ams'
        ],
        [
            '\\emptyset',
            8709
        ]
    ]), cb([
        [
            '=',
            61
        ],
        [
            '<',
            60
        ],
        [
            '\\lt',
            60
        ],
        [
            '>',
            62
        ],
        [
            '\\gt',
            62
        ],
        [
            '\\le',
            8804
        ],
        [
            '\\leq',
            8804
        ],
        [
            '\\ge',
            8805
        ],
        [
            '\\geq',
            8805
        ],
        [
            '\\ll',
            8810
        ],
        [
            '\\gg',
            8811
        ],
        [
            '\\coloneq',
            8788
        ],
        [
            '\\measeq',
            8797
        ],
        [
            '\\eqdef',
            8798
        ],
        [
            '\\questeq',
            8799
        ],
        [
            ':',
            58
        ],
        [
            '\\cong',
            8773
        ],
        [
            '\\equiv',
            8801
        ],
        [
            '\\prec',
            8826
        ],
        [
            '\\preceq',
            10927
        ],
        [
            '\\succ',
            8827
        ],
        [
            '\\succeq',
            10928
        ],
        [
            '\\perp',
            8869
        ],
        [
            '\\propto',
            8733
        ],
        [
            '\\Colon',
            8759
        ],
        [
            '\\smile',
            8995
        ],
        [
            '\\frown',
            8994
        ],
        [
            '\\sim',
            8764
        ],
        [
            '\\doteq',
            8784
        ],
        [
            '\\bowtie',
            8904
        ],
        [
            '\\Join',
            8904
        ],
        [
            '\\asymp',
            8781
        ],
        [
            '\\sqsubseteq',
            8849
        ],
        [
            '\\sqsupseteq',
            8850
        ],
        [
            '\\approx',
            8776
        ],
        [
            '\\~',
            126
        ],
        [
            '\\leftrightarrow',
            8596
        ],
        [
            '\\Leftrightarrow',
            8660
        ],
        [
            '\\models',
            8872
        ],
        [
            '\\vdash',
            8866
        ],
        [
            '\\dashv',
            8867
        ],
        [
            '\\roundimplies',
            10608
        ],
        [
            '\\in',
            8712
        ],
        [
            '\\notin',
            8713
        ],
        [
            '\\ni',
            8715
        ],
        [
            '\\owns',
            8715
        ],
        [
            '\\subset',
            8834
        ],
        [
            '\\supset',
            8835
        ],
        [
            '\\subseteq',
            8838
        ],
        [
            '\\supseteq',
            8839
        ],
        [
            '\\differencedelta',
            8710
        ],
        [
            '\\mvert',
            8739
        ],
        [
            '\\parallel',
            8741
        ],
        [
            '\\simeq',
            8771
        ]
    ], 'mrel'), cb([
        [
            '\\lnot',
            172
        ],
        [
            '\\neg',
            172
        ],
        [
            '\\triangle',
            9651
        ],
        [
            '\\subsetneq',
            8842
        ],
        [
            '\\varsubsetneq',
            57370
        ],
        [
            '\\subsetneqq',
            10955
        ],
        [
            '\\varsubsetneqq',
            57367
        ],
        [
            '\\nsubset',
            8836
        ],
        [
            '\\nsupset',
            8837
        ],
        [
            '\\nsubseteq',
            8840
        ],
        [
            '\\nsupseteq',
            8841
        ]
    ], 'mrel', 'ams'), cb([
        [
            '\\wp',
            8472
        ],
        [
            '\\aleph',
            8501
        ]
    ]), cb([
        [
            '\\blacktriangle',
            9650
        ],
        [
            '\\hslash',
            8463
        ],
        [
            '\\Finv',
            8498
        ],
        [
            '\\Game',
            8513
        ],
        [
            '\\eth',
            240
        ],
        [
            '\\mho',
            8487
        ],
        [
            '\\Bbbk',
            107
        ],
        [
            '\\yen',
            165
        ],
        [
            '\\square',
            9633
        ],
        [
            '\\Box',
            9633
        ],
        [
            '\\blacksquare',
            9632
        ],
        [
            '\\circledS',
            9416
        ],
        [
            '\\circledR',
            174
        ],
        [
            '\\triangledown',
            9661
        ],
        [
            '\\blacktriangledown',
            9660
        ],
        [
            '\\checkmark',
            10003
        ],
        [
            '\\diagup',
            9585
        ],
        [
            '\\measuredangle',
            8737
        ],
        [
            '\\sphericalangle',
            8738
        ],
        [
            '\\backprime',
            8245
        ],
        [
            '\\backdoubleprime',
            8246
        ],
        [
            '\\Diamond',
            9674
        ],
        [
            '\\lozenge',
            9674
        ],
        [
            '\\blacklozenge',
            10731
        ],
        [
            '\\varnothing',
            8709
        ],
        [
            '\\complement',
            8705
        ],
        [
            '\\maltese',
            10016
        ],
        [
            '\\beth',
            8502
        ],
        [
            '\\daleth',
            8504
        ],
        [
            '\\gimel',
            8503
        ]
    ], 'mord', 'ams'), cb([
        [
            '\\ ',
            160
        ],
        [
            '~',
            160
        ],
        [
            '\\space',
            160
        ]
    ], 'space'), tb([
        '!',
        ',',
        ':',
        ';',
        'enskip',
        'enspace',
        'quad',
        'qquad'
    ], '', {
        createAtom: (pg, qg, rg, sg) => new Me(pg, rg, sg)
    }), cb([
        [
            '\\colon',
            58
        ],
        [
            '\\cdotp',
            8901
        ],
        [
            '\\vdots',
            8942,
            'mord'
        ],
        [
            '\\ldotp',
            46
        ],
        [
            ',',
            44
        ],
        [
            ';',
            59
        ]
    ], 'mpunct'), cb([
        [
            '\\cdots',
            8943
        ],
        [
            '\\ddots',
            8945
        ],
        [
            '\\ldots',
            8230
        ],
        [
            '\\mathellipsis',
            8230
        ]
    ], 'minner'), cb([
        [
            '\\/',
            47
        ],
        [
            '|',
            8739,
            'mord'
        ],
        [
            '\\imath',
            305
        ],
        [
            '\\jmath',
            567
        ],
        [
            '\\degree',
            176
        ],
        [
            '\'',
            8242
        ],
        [
            '"',
            8221
        ]
    ]);
    const pg = {
        '&': '\\&',
        '%': '\\%',
        '\'\'': '^{\\doubleprime}',
        alpha: '\\alpha',
        delta: '\\delta',
        Delta: '\\Delta',
        pi: '\\pi',
        Pi: '\\Pi',
        theta: '\\theta',
        Theta: '\\Theta',
        ii: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryI'
        },
        jj: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryJ'
        },
        ee: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\exponentialE'
        },
        nabla: '\\nabla',
        grad: '\\nabla',
        del: '\\partial',
        deg: {
            after: 'digit+space',
            value: '\\degree'
        },
        infty: '\\infty',
        '\u221E': '\\infty',
        oo: {
            after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\infty'
        },
        '\u2211': '\\sum',
        sum: '\\sum_{#?}^{#?}',
        int: '\\int_{#?}^{#?}',
        prod: '\\prod_{#?}^{#?}',
        sqrt: '\\sqrt{#?}',
        '\u2206': '\\differentialD',
        '\u2202': '\\differentialD',
        arcsin: '\\arcsin',
        arccos: '\\arccos',
        arctan: '\\arctan',
        arcsec: '\\arcsec',
        arccsc: '\\arccsc',
        arsinh: '\\arsinh',
        arcosh: '\\arcosh',
        artanh: '\\artanh',
        arcsech: '\\arcsech',
        arccsch: '\\arccsch',
        arg: '\\arg',
        ch: '\\ch',
        cosec: '\\cosec',
        cosh: '\\cosh',
        cot: '\\cot',
        cotg: '\\cotg',
        coth: '\\coth',
        csc: '\\csc',
        ctg: '\\ctg',
        cth: '\\cth',
        sec: '\\sec',
        sinh: '\\sinh',
        sh: '\\sh',
        tanh: '\\tanh',
        tg: '\\tg',
        th: '\\th',
        sin: '\\sin',
        cos: '\\cos',
        tan: '\\tan',
        lg: '\\lg',
        lb: '\\lb',
        log: '\\log',
        ln: '\\ln',
        exp: '\\exp',
        lim: '\\lim_{#?}',
        dx: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD x'
        },
        dy: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD y'
        },
        dt: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD t'
        },
        AA: '\\forall',
        EE: '\\exists',
        '!EE': '\\nexists',
        '&&': '\\land',
        xin: {
            after: 'nothing+text+relop+punct+openfence+space',
            value: 'x \\in'
        },
        in: {
            after: 'nothing+letter+closefence',
            value: '\\in'
        },
        '!in': '\\notin',
        NN: '\\mathbb{N}',
        ZZ: '\\Z',
        QQ: '\\Q',
        RR: '\\R',
        CC: '\\C',
        xx: '\\times',
        '+-': '\\pm',
        '\u2260': '\\ne',
        '!=': '\\ne',
        '\u2265': '\\ge',
        '>=': '\\ge',
        '\u2264': '\\le',
        '<=': '\\le',
        '<<': '\\ll',
        '>>': '\\gg',
        '~~': '\\approx',
        '\u2248': '\\approx',
        '?=': '\\questeq',
        '\xF7': '\\div',
        '\xAC': '\\neg',
        ':=': '\\coloneq',
        '::': '\\Colon',
        '(:': '\\langle',
        ':)': '\\rangle',
        beta: '\\beta',
        chi: '\\chi',
        epsilon: '\\epsilon',
        varepsilon: '\\varepsilon',
        eta: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\eta'
        },
        gamma: '\\gamma',
        Gamma: '\\Gamma',
        iota: '\\iota',
        kappa: '\\kappa',
        lambda: '\\lambda',
        Lambda: '\\Lambda',
        mu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\mu'
        },
        nu: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\nu'
        },
        'µ': '\\mu',
        phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\phi'
        },
        Phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Phi'
        },
        varphi: '\\varphi',
        psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\psi'
        },
        Psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Psi'
        },
        rho: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\rho'
        },
        sigma: '\\sigma',
        Sigma: '\\Sigma',
        tau: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\tau'
        },
        vartheta: '\\vartheta',
        upsilon: '\\upsilon',
        xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\xi'
        },
        Xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Xi'
        },
        zeta: '\\zeta',
        omega: '\\omega',
        Omega: '\\Omega',
        'Ω': '\\omega',
        forall: '\\forall',
        exists: '\\exists',
        '!exists': '\\nexists',
        ':.': '\\therefore',
        liminf: '\\liminf_{#?}',
        limsup: '\\limsup_{#?}',
        argmin: '\\operatorname*{arg~min}_{#?}',
        argmax: '\\operatorname*{arg~max}_{#?}',
        det: '\\det',
        mod: '\\mod',
        max: '\\max',
        min: '\\min',
        erf: '\\operatorname{erf}',
        erfc: '\\operatorname{erfc}',
        bessel: '\\operatorname{bessel}',
        mean: '\\operatorname{mean}',
        median: '\\operatorname{median}',
        fft: '\\operatorname{fft}',
        lcm: '\\operatorname{lcm}',
        gcd: '\\operatorname{gcd}',
        randomReal: '\\operatorname{randomReal}',
        randomInteger: '\\operatorname{randomInteger}',
        Re: '\\operatorname{Re}',
        Im: '\\operatorname{Im}',
        mm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{mm}'
        },
        cm: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{cm}'
        },
        km: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{km}'
        },
        kg: {
            after: 'nothing+digit+operator',
            value: '\\operatorname{kg}'
        },
        '...': '\\ldots',
        '+...': '+\\cdots',
        '-...': '-\\cdots',
        '->...': '\\to\\cdots',
        '->': '\\to',
        '|->': '\\mapsto',
        '-->': '\\longrightarrow',
        '<--': '\\longleftarrow',
        '=>': '\\Rightarrow',
        '==>': '\\Longrightarrow',
        '<=>': '\\Leftrightarrow',
        '<->': '\\leftrightarrow',
        '(.)': '\\odot',
        '(+)': '\\oplus',
        '(/)': '\\oslash',
        '(*)': '\\otimes',
        '(-)': '\\ominus',
        '||': '\\Vert',
        '{': '\\{',
        '}': '\\}',
        '*': '\\cdot'
    };

    function qg(rg, sg) {
        var tg;
        let ug = null !== (tg = null == sg ? void 0 : sg.format) && void 0 !== tg ? tg : 'auto';
        return 'auto' === ug && ([vg, wg] = function(xg) {
            if ((xg = xg.trim()).length <= 1)
                return [
                    'latex',
                    xg
                ];
            let yg;
            return [zg, Ag] = _Bg(Ag), zg ? [
                'latex',
                Ag
            ] : Ag.startsWith('`') && Ag.endsWith('`') ? [
                'ascii-math',
                Ag = Ag.substring(1, Ag.length - 1)
            ] : Ag.includes('\\') ? [
                'latex',
                Ag
            ] : /\$.+\$/.test(Ag) ? [
                'latex',
                `\\text{${ Ag }}`
            ] : [
                void 0,
                Ag
            ];
        }(wg)), 'ascii-math' === vg ? [
            'ascii-math',
            _sg(wg = (wg = (wg = (wg = (wg = (wg = wg.replace(/\u2061/gu, '')).replace(/\u3016/gu, '{')).replace(/\u3017/gu, '}')).replace(/([^\\])sinx/g, '$1\\sin x')).replace(/([^\\])cosx/g, '$1\\cos x ')).replace(/\u2013/g, '-'), {
                inlineShortcuts: null == sg ? void 0 : sg.inlineShortcuts
            })
        ] : [
            'latex',
            wg
        ];
    }

    function _sg(tg, ug) {
        var vg, wg, xg;
        if (!tg)
            return '';
        let yg, zg = !1;
        const Ag = null !== (vg = ug.inlineShortcuts) && void 0 !== vg ? vg : pg;
        if (zg || !tg.startsWith('^') && !tg.startsWith('_') || (yg = _yg(tg.slice(1), {
                inlineShortcuts: h,
                noWrap: !0
            }), tg = tg[0] + '{' + yg.match + '}', tg += _sg(yg.rest, ug), zg = !0), !zg && (yg = tg.match(/^(sqrt|\u221A)(.*)/), yg) && (yg = _yg(yg[2], {
                inlineShortcuts: h,
                noWrap: !0
            }), tg = '\\sqrt{' + (null !== (d = yg.match) && void 0 !== d ? d : '\\placeholder{}') + '}', tg += _sg(yg.rest, ug), zg = !0), !zg && (yg = tg.match(/^(\\cbrt|\u221B)(.*)/), yg) && (yg = _yg(yg[2], {
                inlineShortcuts: h,
                noWrap: !0
            }), tg = '\\sqrt[3]{' + (null !== (e = yg.match) && void 0 !== e ? e : '\\placeholder{}') + '}', tg += _sg(yg.rest, ug), zg = !0), zg || (yg = tg.match(/^abs(.*)/), yg && (yg = _yg(yg[1], {
                inlineShortcuts: h,
                noWrap: !0
            }), tg = '\\left|' + yg.match + '\\right|', tg += _sg(yg.rest, ug), zg = !0)), zg || (yg = tg.match(/^["\u201d\u201c](.*?)["\u201d\u201c](.*)/), yg && (tg = '\\text{' + yg[1] + '}', tg += _sg(yg[2], ug), zg = !0)), zg || (yg = tg.match(/^([^a-zA-Z\(\{\[\_\^\\\s"]+)(.*)/), yg && (tg = _zg(yg[1], h), tg += _sg(yg[2], ug), zg = !0)), !zg && /^([fgh])[^a-zA-Z]/.test(tg) && (yg = _yg(tg.slice(1), {
                inlineShortcuts: h,
                noWrap: !0
            }), tg = '(' === tg[1] ? tg[0] + '\\left(' + yg.match + '\\right)' : tg[0] + yg.match, tg += _sg(yg.rest, ug), zg = !0), zg || (yg = tg.match(/^([a-zA-Z]+)(.*)/), yg && (tg = _zg(yg[1], h), tg += _sg(yg[2], ug), zg = !0)), !zg)
            if (yg = _yg(tg, {
                    inlineShortcuts: h,
                    noWrap: !0
                }), yg.match && '/' === yg.rest[0]) {
                const Bg = _yg(yg.rest.slice(1), {
                    inlineShortcuts: h,
                    noWrap: !0
                });
                Bg.match && (tg = '\\frac{' + yg.match + '}{' + Bg.match + '}' + _sg(Bg.rest, ug)), zg = !0;
            } else
                yg.match && (tg = tg.startsWith('(') ? '\\left(' + yg.match + '\\right)' + _sg(yg.rest, ug) : yg.match + _sg(yg.rest, ug), zg = !0);
        return zg || (yg = tg.match(/^(\s+)(.*)$/), yg && (tg = ' ' + _sg(yg[2], ug), zg = !0)), tg;
    }

    function _yg(zg, Ag) {
        let Bg = '',
            Cg = zg = zg.trim(),
            Dg = zg.charAt(0),
            Eg = {
                '(': ')',
                '{': '}',
                '[': ']'
            } [Dg];
        if (Eg) {
            let Fg = 1,
                Gg = 1;
            for (; Gg < zg.length && Fg > 0;)
                zg[Gg] === Dg && Fg++, zg[Gg] === Eg && Fg--, Gg++;
            0 === Fg ? (Ag.noWrap && '(' === Dg ? Bg = _sg(zg.substring(1, Gg - 1), Ag) : ('{' === Dg && '}' === Eg && (Dg = '\\{', Eg = '\\}'), Bg = '\\left' + Dg + _sg(zg.substring(1, Gg - 1), Ag) + '\\right' + Eg), Cg = zg.slice(Math.max(0, Gg))) : (Bg = zg.substring(1, Gg), Cg = '');
        } else {
            let Fg = zg.match(/^([a-zA-Z]+)/);
            if (Fg) {
                let Gg = og(null, zg, Ag.inlineShortcuts);
                if (Gg)
                    return Gg = Gg.replace('_{#?}', ''), Gg = Gg.replace('^{#?}', ''), {
                        match: Gg,
                        rest: zg.slice(Gg.length)
                    };
            }
            if (Fg = zg.match(/^([a-zA-Z])/), Fg)
                return {
                    match: Fg[1],
                    rest: zg.slice(1)
                };
            if (Fg = zg.match(/^(-)?\d+(\.\d*)?/), Fg)
                return {
                    match: Fg[0],
                    rest: zg.slice(Fg[0].length)
                };
            /^\\(left|right)/.test(zg) || (Fg = zg.match(/^(\\[a-zA-Z]+)/), Fg && (Cg = zg.slice(Fg[1].length), Bg = Fg[1]));
        }
        return {
            match: Bg,
            rest: Cg
        };
    }

    function _zg(Ag, Bg) {
        let Cg = og(null, Ag, Bg);
        return Cg ? (Cg = Cg.replace('_{#?}', ''), Cg = Cg.replace('^{#?}', ''), Cg += ' ') : Cg = Ag, Cg;
    }
    const Ag = [
        [
            '\\[',
            '\\]'
        ],
        [
            '\\(',
            '\\)'
        ],
        [
            '$$',
            '$$'
        ],
        [
            '$',
            '$'
        ],
        [
            '\\begin{math}',
            '\\end{math}'
        ],
        [
            '\\begin{displaymath}',
            '\\end{displaymath}'
        ],
        [
            '\\begin{equation}',
            '\\end{equation}'
        ],
        [
            '\\begin{equation*}',
            '\\end{equation*}'
        ]
    ];

    function _Bg(Cg) {
        const Dg = Cg.trim();
        for (const Eg of Ag)
            if (Dg.startsWith(Cg[0]) && Dg.endsWith(Cg[1]))
                return [
                    !0,
                    Dg.substring(Cg[0].length, Dg.length - Cg[1].length)
                ];
        return [
            !1,
            Cg
        ];
    }
    const Eg = (Fg, Gg, Hg) => (Ag.some(Ig => Gg.startsWith(Ig[0]) && Gg.endsWith(Ig[1])) || (Gg = `$$ ${ Gg } $$`), Gg);
    class Fg {
        static onPaste(Gg, Hg, Ig) {
            var Jg;
            const Kg = new ClipboardEvent('paste', {
                clipboardData: Ig.clipboardData,
                cancelable: !0
            });
            return !!(null === (Jg = Hg.host) || void 0 === Jg ? void 0 : Jg.dispatchEvent(Kg)) && Fg._registry[Gg].onPaste(Hg, Ig);
        }
        static onCopy(Gg, Hg) {
            if (!Hg.clipboardData)
                return;
            const Ig = Gg.model,
                Jg = Ig.selectionIsCollapsed ? [
                    0,
                    Ig.lastOffset
                ] : mg(Ig.selection);
            let Kg = Ig.getAtoms(Jg);
            if (Kg.every(Lg => 'text' === Lg.mode || !Lg.mode))
                Hg.clipboardData.setData('text/plain', Kg.filter(Lg => Lg instanceof Se).map(Lg => Lg.value).join(''));
            else if (Kg.every(Lg => 'latex' === Lg.mode))
                Hg.clipboardData.setData('text/plain', Ig.getAtoms(Jg, {
                    includeChildren: !0
                }).map(Lg => {
                    var Mg;
                    return null !== (Mg = Lg.value) && void 0 !== Mg ? Mg : '';
                }).join(''));
            else {
                let Lg;
                Lg = 1 === Kg.length && void 0 !== Kg[0].verbatimLatex ? Kg[0].verbatimLatex : Ig.getValue(Jg, 'latex-expanded'), Hg.clipboardData.setData('application/x-latex', Lg);
                try {
                    Hg.clipboardData.setData('text/plain', Gg.options.onExport(Gg, Lg, Jg));
                } catch {}
                1 !== Kg.length || 'root' !== Kg[0].type && 'group' !== Kg[0].type || (Kg = Kg[0].body.filter(Mg => 'first' !== Mg.type));
                try {
                    Hg.clipboardData.setData('application/json+mathlive', JSON.stringify(Kg.map(Mg => Mg.toJson())));
                } catch {}
                const Mg = Gg.computeEngine;
                if (Mg)
                    try {
                        Mg.jsonSerializationOptions = {
                            metadata: ['latex']
                        };
                        const Ng = Mg.parse(Lg),
                            Og = JSON.stringify(Ng.json);
                        Og && Hg.clipboardData.setData('application/json', Og);
                    } catch {}
            }
            Hg.preventDefault();
        }
        static insert(Gg, Hg, Ig, Jg = {}) {
            return Fg._registry[Gg].insert(Hg, Ig, Jg);
        }
        onPaste(Gg, Hg) {
            return !1;
        }
        insert(Gg, Hg, Ig) {
            return !1;
        }
        constructor(Gg) {
            Fg._registry[Gg] = this;
        }
    }
    Fg._registry = {};
    const Gg = {
        '\\ne': '<mo>&ne;</mo>',
        '\\neq': '<mo>&neq;</mo>',
        '\\pm': '&#177;',
        '\\times': '&#215;',
        '\\colon': ':',
        '\\vert': '|',
        '\\Vert': '\u2225',
        '\\mid': '\u2223',
        '\\lbrace': '{',
        '\\rbrace': '}',
        '\\lparen': '(',
        '\\rparen': ')',
        '\\langle': '\u27E8',
        '\\rangle': '\u27E9',
        '\\lfloor': '\u230A',
        '\\rfloor': '\u230B',
        '\\lceil': '\u2308',
        '\\rceil': '\u2309',
        '\\vec': '&#x20d7;',
        '\\acute': '&#x00b4;',
        '\\grave': '&#x0060;',
        '\\dot': '&#x02d9;',
        '\\ddot': '&#x00a8;',
        '\\tilde': '&#x007e;',
        '\\bar': '&#x00af;',
        '\\breve': '&#x02d8;',
        '\\check': '&#x02c7;',
        '\\hat': '&#x005e;'
    };

    function Hg(Ig) {
        return Ig.replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function Ig(Jg, Kg) {
        return Jg && Kg.generateID ? ` extid="${ Jg }"` : '';
    }

    function Jg(Kg, Lg, Mg) {
        let Ng = !1;
        Lg = null != Lg ? Lg : Kg.atoms.length;
        let Og = '',
            Pg = '';
        const Qg = Kg.atoms[Kg.index];
        return Kg.index < Lg && ('mord' === g.type || 'macro' === g.type) && !g.isDigit() && (Pg = _gh(g, Mg), Kg.index += 1), Pg.length > 0 && (Ng = !0, Og = Pg, 'mi' !== Kg.lastType && 'mn' !== Kg.lastType && 'mtext' !== Kg.lastType && 'fence' !== Kg.lastType || /^<mo>(.*)<\/mo>$/.test(Og) || (Og = `<mo>&#8290;</mo>${ Og }`), Pg.endsWith('>f</mi>') || Pg.endsWith('>g</mi>') ? (Og += '<mo>&#x2061;</mo>', Kg.lastType = 'applyfunction') : Kg.lastType = /^<mo>(.*)<\/mo>$/.test(Og) ? 'mo' : 'mi', _Mg(Pg, Kg, Mg) || (Kg.mathML += Og)), Ng;
    }

    function Lg(Mg) {
        return Mg.index < Mg.atoms.length && Mg.atoms[Mg.index].superscript && 'msubsup' === Mg.atoms[Mg.index].type;
    }

    function _Mg(Ng, Og, Pg) {
        let Qg = Og.atoms[Og.index - 1];
        if (!Qg)
            return !1;
        if (Qg.superscript || Qg.subscript || (Lg(Og) || function(Rg) {
                return Rg.index < Rg.atoms.length && Rg.atoms[Rg.index].subscript && 'msubsup' === Rg.atoms[Rg.index].type;
            }(Og)) && (Qg = Og.atoms[Og.index], Og.index += 1), !Qg)
            return !1;
        const Rg = _ah(Qg.superscript, Pg),
            Sg = _ah(Qg.subscript, Pg);
        if (!e && !f)
            return !1;
        let Tg = '';
        return e && f ? Tg = `<msubsup>${ Ng }${ f }${ e }</msubsup>` : e ? Tg = `<msup>${ Ng }${ e }</msup>` : f && (Tg = `<msub>${ Ng }${ f }</msub>`), Og.mathML += Tg, Og.lastType = '', !0;
    }

    function Pg(Qg, Rg, Sg) {
        Rg = null != Rg ? Rg : Qg.atoms.length;
        const Tg = Qg.index;
        let Ug = '';
        for (; Qg.index < Rg && 'text' === Qg.atoms[Qg.index].mode;)
            Ug += Qg.atoms[Qg.index].value ? Qg.atoms[Qg.index].value : ' ', Qg.index += 1;
        return Ug.length > 0 && (Qg.mathML += `<mtext ${ Ig(Qg.atoms[d].id, Sg) }\n      >${ Ug }</mtext>`, Qg.lastType = 'mtext', !0);
    }

    function Rg(Sg, Tg, Ug) {
        Tg = null != Tg ? Tg : Sg.atoms.length;
        const Vg = Sg.index;
        let Wg = '',
            Xg = function(Yg) {
                let Zg = -1,
                    $g = Yg.index,
                    ah = !1,
                    bh = !1;
                for (; $g < Yg.atoms.length && !ah && !bh;) {
                    const ch = Yg.atoms[$g];
                    ah = !Zg.isDigit(), bh = !ah && void 0 !== Zg.superscript, $g++;
                }
                return bh && (Zg = $g - 1), Zg;
            }(Sg);
        for (Xg >= 0 && Xg < Tg && (Tg = Xg); Sg.index < Tg && Sg.atoms[Sg.index].isDigit();)
            Wg += Sg.atoms[Sg.index].asDigit(), Sg.index += 1;
        return !(Wg.length <= 0 || (Wg = '<mn' + Ig(Sg.atoms[d].id, Ug) + '>' + Wg + '</mn>', Xg < 0 && Lg(Sg) && (Xg = Sg.index, Sg.index += 1), _Mg(Wg, Sg, Ug) || (Sg.mathML += Wg, Sg.lastType = 'mn'), 0));
    }

    function Tg(Ug, Vg, Wg) {
        let Xg = !1;
        Vg = null != Vg ? Vg : Ug.atoms.length;
        let Yg = '',
            Zg = '';
        if (Ug.index < Vg && 'mopen' === Ug.atoms[Ug.index].type) {
            let $g = !1,
                ah = 0;
            const bh = Ug.index;
            let ch = -1,
                dh = i + 1;
            for (; dh < Vg && !$g;)
                'mopen' === Ug.atoms[dh].type ? ah += 1 : 'mclose' === Ug.atoms[dh].type && (ah -= 1), -1 === ah && ($g = !0, ch = dh), dh += 1;
            $g && (Yg = '<mrow>', Yg += _ch(Ug.atoms[i], Wg), Yg += _ah(Ug.atoms, Wg, i + 1, ch), Yg += _ch(Ug.atoms[ch], Wg), Yg += '</mrow>', 'mi' !== Ug.lastType && 'mn' !== Ug.lastType && 'mfrac' !== Ug.lastType && 'fence' !== Ug.lastType || (Yg = `<mo>&#8290;</mo>${ Yg }`), Ug.index = ch + 1, _Mg(Yg, Ug, Wg) && (Xg = !0, Ug.lastType = '', Yg = ''), Zg = 'fence');
        }
        return Yg.length > 0 && (Xg = !0, Ug.mathML += Yg, Ug.lastType = Zg), Xg;
    }

    function Vg(Wg, Xg, Yg) {
        let Zg = !1;
        Xg = null != Xg ? Xg : Wg.atoms.length;
        let $g = '',
            ah = '';
        const bh = Wg.atoms[Wg.index];
        if (Wg.index < Xg && ('mbin' === g.type || 'mrel' === g.type))
            $g += _gh(Wg.atoms[Wg.index], Yg), Wg.index += 1, ah = 'mo';
        else if (Wg.index < Xg && 'mop' === g.type) {
            if ('over-under' === g.subsupPlacement && (g.superscript || g.subscript)) {
                const ch = _ch(g, Yg);
                g.superscript && g.subscript ? ($g += '<munderover>' + Wg, $g += _ah(g.subscript, Yg), $g += _ah(g.superscript, Yg), $g += '</munderover>') : g.superscript ? ($g += '<mover>' + Wg, $g += _ah(g.superscript, Yg), $g += '</mover>') : g.subscript && ($g += '<munder>' + Wg, $g += _ah(g.subscript, Yg), $g += '</munder>'), ah = 'mo';
            } else {
                const dh = Wg.atoms[Wg.index],
                    eh = '\\operatorname' === Xg.value,
                    fh = Zg ? '<mi class="MathML-Unit"' + Ig(Xg.id, Yg) + '>' + _eh(Xg.value) + '</mi>' : _ch(Xg, Yg);
                $g += g, Zg || /^<mo>(.*)<\/mo>$/.test(g) ? ah = Zg ? 'mi' : 'mo' : ($g += '<mo>&#x2061;</mo>', ah = 'applyfunction');
            }
            'mi' !== Wg.lastType && 'mn' !== Wg.lastType || /^<mo>(.*)<\/mo>$/.test($g) || ($g = `<mo>&#8290;</mo>${ $g }`), Wg.index += 1;
        }
        return _Mg($g, Wg, Yg) || $g.length > 0 && (Zg = !0, Wg.mathML += $g, Wg.lastType = ah), Zg;
    }

    function _ah(bh, ch, dh, eh) {
        const fh = {
            atoms: [],
            index: null != dh ? dh : 0,
            mathML: '',
            lastType: ''
        };
        if ('number' == typeof bh || 'boolean' == typeof bh)
            e.mathML = bh.toString();
        else if ('string' == typeof bh)
            e.mathML = bh;
        else if (bh instanceof Kd)
            e.mathML = _gh(bh, ch);
        else if (Array.isArray(bh)) {
            e.atoms = bh;
            let gh = 0;
            for (eh = eh || (bh ? bh.length : 0); e.index < eh;)
                if (Pg(e, eh, ch) || Rg(e, eh, ch) || Jg(e, eh, ch) || Vg(e, eh, ch) || Tg(e, eh, ch))
                    gh += 1;
                else if (e.index < eh) {
                let hh = _gh(e.atoms[e.index], ch);
                'mn' === e.lastType && hh.length > 0 && 'genfrac' === e.atoms[e.index].type && (hh = '<mo>&#x2064;</mo>' + hh), 'genfrac' === e.atoms[e.index].type ? e.lastType = 'mfrac' : e.lastType = '', e.index += 1, _Mg(hh, e, ch) ? gh += 2 : hh.length > 0 && (e.mathML += hh, gh += 1);
            }
            gh > 1 && (e.mathML = '<mrow>' + e.mathML + '</mrow>');
        }
        return e.mathML;
    }

    function _ch(dh, eh) {
        let fh = '';
        const gh = _eh(dh.value);
        return d && (fh = '<mo' + Ig(dh.id, eh) + '>' + d + '</mo>'), fh;
    }

    function _eh(fh) {
        if (!fh)
            return '';
        if ('string' == typeof fh)
            return Hg(fh);
        if (!Array.isArray(fh) && 'string' == typeof fh.body)
            return Hg(fh.body);
        let gh = '';
        for (const hh of fh)
            'string' == typeof hh.value && (gh += hh.value);
        return Hg(gh);
    }

    function _gh(hh, ih) {
        var jh, kh, lh, mh, nh, oh, ph, qh, rh, sh, th, uh, vh, wh, xh, yh, zh, Ah, Bh, Ch, Dh, Eh, Fh, Gh, Hh;
        const Ih = {
                widehat: '^',
                widecheck: 'ˇ',
                widetilde: '~',
                utilde: '~',
                overleftarrow: '\u2190',
                underleftarrow: '\u2190',
                xleftarrow: '\u2190',
                overrightarrow: '\u2192',
                underrightarrow: '\u2192',
                xrightarrow: '\u2192',
                underbrace: '\u23DF',
                overbrace: '\u23DE',
                overgroup: '\u23E0',
                undergroup: '\u23E1',
                overleftrightarrow: '\u2194',
                underleftrightarrow: '\u2194',
                xleftrightarrow: '\u2194',
                Overrightarrow: '\u21D2',
                xRightarrow: '\u21D2',
                overleftharpoon: '\u21BC',
                xleftharpoonup: '\u21BC',
                overrightharpoon: '\u21C0',
                xrightharpoonup: '\u21C0',
                xLeftarrow: '\u21D0',
                xLeftrightarrow: '\u21D4',
                xhookleftarrow: '\u21A9',
                xhookrightarrow: '\u21AA',
                xmapsto: '\u21A6',
                xrightharpoondown: '\u21C1',
                xleftharpoondown: '\u21BD',
                xrightleftharpoons: '\u21CC',
                xleftrightharpoons: '\u21CB',
                xtwoheadleftarrow: '\u219E',
                xtwoheadrightarrow: '\u21A0',
                xlongequal: '=',
                xtofrom: '\u21C4',
                xrightleftarrows: '\u21C4',
                xrightequilibrium: '\u21CC',
                xleftequilibrium: '\u21CB'
            },
            Jh = {
                '\\exponentialE': '&#x02147;',
                '\\imaginaryI': '&#x2148;',
                '\\differentialD': '&#x2146;',
                '\\capitalDifferentialD': '&#x2145;',
                '\\alpha': '&#x03b1;',
                '\\pi': '&#x03c0;',
                '\\infty': '&#x221e;',
                '\\forall': '&#x2200;',
                '\\nexists': '&#x2204;',
                '\\exists': '&#x2203;',
                '\\hbar': 'ℏ',
                '\\cdotp': '\u22C5',
                '\\ldots': '\u2026',
                '\\cdots': '\u22EF',
                '\\ddots': '\u22F1',
                '\\vdots': '\u22EE',
                '\\ldotp': '.'
            },
            Kh = {
                '\\!': -3 / 18,
                '\\ ': 6 / 18,
                '\\,': 3 / 18,
                '\\:': 4 / 18,
                '\\;': 5 / 18,
                '\\enspace': 0.5,
                '\\quad': 1,
                '\\qquad': 2,
                '\\enskip': 0.5
            };
        let Lh, Mh, Nh, Oh, Ph, Qh, Rh = '',
            Sh = '',
            Th = null !== (d = {
                cal: 'script',
                frak: 'fraktur',
                bb: 'double-struck',
                scr: 'script',
                cmtt: 'monospace',
                cmss: 'sans-serif'
            } [null !== (jh = hh.fontFamily) && void 0 !== jh ? jh : hh.font]) && void 0 !== d ? d : '';
        Th && (Th = ` mathvariant="${ Th }"`);
        const {
            command: Uh
        } = hh;
        if ('text' === hh.mode)
            Rh = `<mi${ Ig(hh.id, ih) }>${ hh.value }</mi>`;
        else
            switch (hh.type) {
                case 'first':
                case 'line':
                case 'overlap':
                case 'msubsup':
                case 'phantom':
                case 'composition':
                case 'rule':
                case 'chem':
                case 'error':
                    break;
                case 'group':
                case 'root':
                    Rh = Gg[hh.command] ? Gg[hh.command] : _ah(hh.body, ih);
                    break;
                case 'array':
                    if ((hh.leftDelim && '.' !== hh.leftDelim || hh.rightDelim && '.' !== hh.rightDelim) && (Rh += '<mrow>', hh.leftDelim && '.' !== hh.leftDelim && (Rh += '<mo>' + (Gg[hh.leftDelim] || hh.leftDelim) + '</mo>')), Rh += '<mtable', hh.colFormat) {
                        for (Rh += ' columnalign="', Nh = 0; Nh < hh.colFormat.length; Nh++)
                            hh.colFormat[Nh].align && (Rh += {
                                l: 'left',
                                c: 'center',
                                r: 'right'
                            } [hh.colFormat[Nh].align] + ' ');
                        Rh += '"';
                    }
                    for (Rh += '>', Mh = 0; Mh < hh.array.length; Mh++) {
                        for (Rh += '<mtr>', Lh = 0; Lh < hh.array[Mh].length; Lh++)
                            Rh += '<mtd>' + _ah(hh.array[Mh][Lh], ih) + '</mtd>';
                        Rh += '</mtr>';
                    }
                    Rh += '</mtable>', (hh.leftDelim && '.' !== hh.leftDelim || hh.rightDelim && '.' !== hh.rightDelim) && (hh.rightDelim && '.' !== hh.rightDelim && (Rh += '<mo>' + (Gg[hh.leftDelim] || hh.rightDelim) + '</mo>'), Rh += '</mrow>');
                    break;
                case 'genfrac':
                    (hh.leftDelim || hh.rightDelim) && (Rh += '<mrow>'), hh.leftDelim && '.' !== hh.leftDelim && (Rh += '<mo' + Ig(hh.id, ih) + '>' + (Gg[hh.leftDelim] || hh.leftDelim) + '</mo>'), hh.hasBarLine ? (Rh += '<mfrac>', Rh += _ah(hh.above, ih) || '<mi>&nbsp;</mi>', Rh += _ah(hh.below, ih) || '<mi>&nbsp;</mi>', Rh += '</mfrac>') : (Rh += '<mtable' + Ig(hh.id, ih) + '>', Rh += '<mtr>' + _ah(hh.above, ih) + '</mtr>', Rh += '<mtr>' + _ah(hh.below, ih) + '</mtr>', Rh += '</mtable>'), hh.rightDelim && '.' !== hh.rightDelim && (Rh += '<mo' + Ig(hh.id, ih) + '>' + (Gg[hh.rightDelim] || hh.rightDelim) + '</mo>'), (hh.leftDelim || hh.rightDelim) && (Rh += '</mrow>');
                    break;
                case 'surd':
                    hh.hasEmptyBranch('above') ? (Rh += '<msqrt' + Ig(hh.id, ih) + '>', Rh += _ah(hh.body, ih), Rh += '</msqrt>') : (Rh += '<mroot' + Ig(hh.id, ih) + '>', Rh += _ah(hh.body, ih), Rh += _ah(hh.above, ih), Rh += '</mroot>');
                    break;
                case 'leftright':
                    Rh = '<mrow>', hh.leftDelim && '.' !== hh.leftDelim && (Rh += '<mo' + Ig(hh.id, ih) + '>' + (null !== (e = Gg[hh.leftDelim]) && void 0 !== e ? e : hh.leftDelim) + '</mo>'), hh.body && (Rh += _ah(hh.body, ih)), hh.rightDelim && '.' !== hh.rightDelim && (Rh += '<mo' + Ig(hh.id, ih) + '>' + (null !== (f = Gg[hh.rightDelim]) && void 0 !== f ? f : hh.rightDelim) + '</mo>'), Rh += '</mrow>';
                    break;
                case 'sizeddelim':
                case 'delim':
                    Rh += '<mo separator="true"' + Ig(hh.id, ih) + '>' + (Gg[hh.delim] || hh.delim) + '</mo>';
                    break;
                case 'accent':
                    Rh += '<mover accent="true"' + Ig(hh.id, ih) + '>', Rh += _ah(hh.body, ih), Rh += '<mo>' + (Gg[lb] || hh.accent) + '</mo>', Rh += '</mover>';
                    break;
                case 'overunder':
                    Ph = hh.above, Oh = hh.below, (hh.svgAbove || Ph) && (hh.svgBelow || Oh) ? Qh = hh.body : Ph && Ph.length > 0 ? (Qh = hh.body, (null === (h = null === (g = hh.body) || void 0 === g ? void 0 : g[0]) || void 0 === h ? void 0 : h.below) ? (Oh = hh.body[0].below, Qh = hh.body[0].body) : 'first' === (null === (m = null === (i = hh.body) || void 0 === i ? void 0 : i[0]) || void 0 === m ? void 0 : m.type) && (null === (q = null === (rh = hh.body) || void 0 === rh ? void 0 : rh[1]) || void 0 === q ? void 0 : q.below) && (Oh = hh.body[1].below, Qh = hh.body[1].body)) : Oh && Oh.length > 0 && (Qh = hh.body, (null === (uh = null === (th = hh.body) || void 0 === th ? void 0 : th[0]) || void 0 === uh ? void 0 : uh.above) ? (Ph = hh.body[0].above, Qh = hh.body[0].body) : 'first' === (null === (wh = null === (vh = hh.body) || void 0 === vh ? void 0 : vh[0]) || void 0 === wh ? void 0 : wh.type) && (null === (yh = null === (xh = hh.body) || void 0 === xh ? void 0 : xh[1]) || void 0 === yh ? void 0 : yh.above) && (Ph = hh.body[1].overscript, Qh = hh.body[1].body)), (hh.svgAbove || Ph) && (hh.svgBelow || Oh) ? (Rh += `<munderover ${ Th } ${ Ig(hh.id, ih) }>`, Rh += null !== (y = Ih[hh.svgBody]) && void 0 !== y ? y : _ah(Qh, ih), Rh += null !== (N = Ih[hh.svgBelow]) && void 0 !== N ? N : _ah(Oh, ih), Rh += null !== (Q = Ih[hh.svgAbove]) && void 0 !== Q ? Q : _ah(Ph, ih), Rh += '</munderover>') : hh.svgAbove || Ph ? (Rh += `<mover ${ Th } ${ Ig(hh.id, ih) }>` + (null !== (R = Ih[hh.svgBody]) && void 0 !== R ? R : _ah(Qh, ih)), Rh += null !== (S = Ih[hh.svgAbove]) && void 0 !== S ? S : _ah(Ph, ih), Rh += '</mover>') : (hh.svgBelow || Oh) && (Rh += `<munder ${ Th } ${ Ig(hh.id, ih) }>` + (null !== (Eh = Ih[hh.svgBody]) && void 0 !== Eh ? Eh : _ah(Qh, ih)), Rh += null !== (Fh = Ih[hh.svgBelow]) && void 0 !== Fh ? Fh : _ah(Oh, ih), Rh += '</munder>');
                    break;
                case 'placeholder':
                case 'mord': {
                    Rh = Jh[lb] || lb || ('string' == typeof hh.value ? hh.value : '');
                    const Vh = lb ? lb.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null;
                    Vh ? Rh = '&#x' + Vh[1] + ';' : Rh.length > 0 && Rh.startsWith('\\') && (Rh = 'string' == typeof hh.value && hh.value.charCodeAt(0) > 255 ? '&#x' + ('000000' + hh.value.charCodeAt(0).toString(16)).slice(-4) + ';' : 'string' == typeof hh.value ? hh.value.charAt(0) : '');
                    const Wh = /\d/.test(Rh) ? 'mn' : 'mi';
                    Rh = `<${ d }${ Th }${ Ig(hh.id, ih) }>${ Hg(Rh) }</${ d }>`;
                    break;
                }
                case 'mbin':
                case 'mrel':
                case 'minner':
                    Rh = lb && Jh[lb] ? '<mi' + Ig(hh.id, ih) + '>' + Jh[lb] + '</mi>' : lb && Gg[lb] ? '<mo' + Ig(hh.id, ih) + '>' + Gg[lb] + '</mo>' : _ch(hh, ih);
                    break;
                case 'mpunct':
                    Rh = '<mo separator="true"' + Ig(hh.id, ih) + '>' + (null !== (Gh = Gg[lb]) && void 0 !== Gh ? Gh : lb) + '</mo>';
                    break;
                case 'mop':
                    '\u200B' !== hh.body && (Rh = '<mo' + Ig(hh.id, ih) + '>', Rh += '\\operatorname' === lb ? hh.body : lb || hh.body, Rh += '</mo>');
                    break;
                case 'box':
                    Rh = '<menclose notation="box"', hh.backgroundcolor && (Rh += ' mathbackground="' + hh.backgroundcolor + '"'), Rh += Ig(hh.id, ih) + '>' + _ah(hh.body, ih) + '</menclose>';
                    break;
                case 'spacing':
                    Rh += '<mspace width="' + (null !== (Hh = Kh[lb]) && void 0 !== Hh ? Hh : 0) + 'em"/>';
                    break;
                case 'enclose':
                    Rh = '<menclose notation="';
                    for (const Xh in hh.notation)
                        Object.prototype.hasOwnProperty.call(hh.notation, ih) && hh.notation[ih] && (Rh += Sh + ih, Sh = ' ');
                    Rh += Ig(hh.id, ih) + '">' + _ah(hh.body, ih) + '</menclose>';
                    break;
                case 'space':
                    Rh += '&nbsp;';
                    break;
                case 'mopen':
                case 'mclose':
                    Rh += _ch(hh, ih);
                    break;
                case 'macro': {
                    const Yh = hh.command + _eh(hh.macroArgs);
                    Yh && (Rh += `<mo ${ Ig(hh.id, ih) }>${ Yh }</mo>`);
                }
                break;
                case 'latexgroup':
                case 'tooltip':
                    Rh += _ah(hh.body, ih);
                    break;
                case 'latex':
                    Rh += '<mtext' + Ig(hh.id, ih) + '>' + hh.value + '</mtext>';
            }
        return Rh;
    }
    const Oh = {
        '\\alpha': 'alpha ',
        '\\mu': 'mew ',
        '\\sigma': 'sigma ',
        '\\pi': 'pie ',
        '\\imaginaryI': 'eye ',
        '\\sum': 'Summation ',
        '\\prod': 'Product ',
        a: '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
        A: 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
        '+': 'plus ',
        '-': 'minus ',
        ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
        ',': '<break time="150ms"/> comma  <break time="150ms"/>',
        '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
        '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
        ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
        '=': 'equals ',
        '<': 'is less than ',
        '\\lt': 'is less than ',
        '<=': 'is less than or equal to ',
        '\\le': 'is less than or equal to ',
        '\\gt': 'is greater than ',
        '>': 'is greater than ',
        '\\ge': 'is greater than or equal to ',
        '\\geq': 'is greater than or equal to ',
        '\\leq': 'is less than or equal to ',
        '!': 'factorial ',
        '\\sin': 'sine ',
        '\\cos': 'cosine ',
        '\u200B': '',
        '\u2212': 'minus ',
        ':': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\hbar': 'etch bar ',
        '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\land': 'and ',
        '\\lor': 'or ',
        '\\neg': 'not ',
        '\\div': 'divided by ',
        '\\forall': 'for all ',
        '\\exists': 'there exists ',
        '\\nexists': 'there does not exists ',
        '\\in': 'element of ',
        '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
        '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
        '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
        '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
        '\\infty': 'infinity ',
        '\\nabla': 'nabla ',
        '\\partial': 'partial derivative of ',
        '\\cdot': 'times ',
        '\\cdots': 'dot dot dot ',
        '\\Rightarrow': 'implies ',
        '\\lparen': '<break time="150ms"/>open paren<break time="150ms"/>',
        '\\rparen': '<break time="150ms"/>close paren<break time="150ms"/>',
        '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
        '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
        '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
        '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
        '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
        '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
        '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
        '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
        '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
        '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
        '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
        '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
        mm: 'millimeters',
        cm: 'centimeters',
        km: 'kilometers',
        kg: 'kilograms'
    };

    function Ph(Qh) {
        let Rh = 0;
        if (d(Qh))
            for (const Sh of Qh)
                'first' !== Sh.type && (Rh += 1);
        return 1 === Rh;
    }

    function Rh(Sh) {
        let Th = '';
        if (d(Sh))
            for (const Uh of Sh)
                'first' !== Uh.type && 'string' == typeof Uh.value && (Th += Uh.value);
        return Th;
    }

    function Th(Uh, Vh, Wh) {
        var Xh, Yh, Zh, $h;

        function ai(bi) {
            return '<emphasis>' + bi + '</emphasis>';
        }
        if (!Vh)
            return '';
        let bi = '';
        if (d(Vh)) {
            let ci = !1,
                di = !1;
            for (let ei = 0; ei < Vh.length; ei++)
                'text' !== Vh[ei].mode && (di = !1), ei < Vh.length - 2 && 'mopen' === Vh[ei].type && 'mclose' === Vh[ei + 2].type && 'mord' === Vh[ei + 1].type ? (bi += ' of ', bi += ai(Th(Uh, Vh[ei + 1], Wh)), ei += 2) : 'text' === Vh[ei].mode ? di ? bi += null !== (e = Vh[ei].value) && void 0 !== e ? e : ' ' : (di = !0, bi += Th('text', Vh[ei], Wh)) : Vh[ei].isDigit() ? ci ? bi += Vh[ei].asDigit() : (ci = !0, bi += Th(Uh, Vh[ei], Wh)) : (ci = !1, bi += Th(Uh, Vh[ei], Wh));
        } else if ('text' === Vh.mode)
            Vh.id && 'math' === Uh && (bi += '<mark name="' + Vh.id.toString() + '"/>'), bi += Vh.value;
        else {
            Vh.id && 'math' === Uh && (bi += '<mark name="' + Vh.id.toString() + '"/>');
            let ci = '',
                di = '',
                ei = '',
                fi = !1;
            switch (Vh.type) {
                case 'group':
                case 'root':
                    bi += Th('math', Vh.body, Wh);
                    break;
                case 'genfrac':
                    if (ci = Th('math', Vh.above, Wh), di = Th('math', Vh.below, Wh), Ph(Vh.above) && Ph(Vh.below)) {
                        const gi = {
                            '1/2': ' half ',
                            '1/3': ' one third ',
                            '2/3': ' two third',
                            '1/4': ' one quarter ',
                            '3/4': ' three quarter ',
                            '1/5': ' one fifth ',
                            '2/5': ' two fifths ',
                            '3/5': ' three fifths ',
                            '4/5': ' four fifths ',
                            '1/6': ' one sixth ',
                            '5/6': ' five sixths ',
                            '1/8': ' one eight ',
                            '3/8': ' three eights ',
                            '5/8': ' five eights ',
                            '7/8': ' seven eights ',
                            '1/9': ' one ninth ',
                            '2/9': ' two ninths ',
                            '4/9': ' four ninths ',
                            '5/9': ' five ninths ',
                            '7/9': ' seven ninths ',
                            '8/9': ' eight ninths '
                        } [Rh(Vh.above) + '/' + Rh(Vh.below)];
                        Uh ? bi = Uh : bi += ci + ' over ' + di;
                    } else
                        bi += ' the fraction <break time="150ms"/>' + ci + ', over <break time="150ms"/>' + di + '.<break time="150ms"/> End fraction.<break time="150ms"/>';
                    break;
                case 'surd':
                    if (ei = Th('math', Vh.body, Wh), Vh.hasEmptyBranch('above'))
                        bi += Ph(Vh.body) ? ' the square root of ' + ei + ' , ' : ' the square root of <break time="200ms"/>' + ei + '. <break time="200ms"/> End square root';
                    else {
                        let hi = Th('math', Vh.above, Wh);
                        hi = hi.trim();
                        const ii = hi.replace(/<mark([^/]*)\/>/g, '');
                        bi += '3' === d ? ' the cube root of <break time="200ms"/>' + ei + '. <break time="200ms"/> End cube root' : 'n' === d ? ' the nth root of <break time="200ms"/>' + ei + '. <break time="200ms"/> End root' : ' the root with index: <break time="200ms"/>' + hi + ', of <break time="200ms"/>' + ei + '. <break time="200ms"/> End root';
                    }
                    break;
                case 'leftright': {
                    const ii = Vh;
                    bi += null !== (f = Uh.leftDelim ? Oh[Uh.leftDelim] : void 0) && void 0 !== f ? f : Uh.leftDelim, bi += Th('math', Vh.body, Wh), bi += null !== (g = Uh.rightDelim ? Oh[Uh.rightDelim] : void 0) && void 0 !== g ? g : Uh.rightDelim;
                }
                break;
                case 'rule':
                case 'overunder':
                case 'overlap':
                    break;
                case 'placeholder':
                    bi += 'placeholder ';
                    break;
                case 'delim':
                case 'sizeddelim':
                case 'mord':
                case 'minner':
                case 'mbin':
                case 'mrel':
                case 'mpunct':
                case 'mopen':
                case 'mclose': {
                    const {
                        command: ji
                    } = Vh;
                    if ('\\mathbin' === d || '\\mathrel' === d || '\\mathopen' === d || '\\mathclose' === d || '\\mathpunct' === d || '\\mathord' === d || '\\mathinner' === d) {
                        bi = Th(Uh, Vh.body, Wh);
                        break;
                    }
                    let ki = Vh.isDigit() ? Vh.asDigit() : Vh.value,
                        li = Vh.command;
                    if ('delim' !== Vh.type && 'sizeddelim' !== Vh.type || (li = Vh.value, ki = li), 'text' === Uh)
                        bi += ki;
                    else {
                        if ('mbin' === Vh.type && (bi += '<break time="150ms"/>'), ki) {
                            const mi = Oh[ki] || (li ? Oh[li.trim()] : '');
                            if (Uh)
                                bi += ' ' + Uh;
                            else {
                                const ni = li ? function(oi) {
                                    let pi = '';
                                    return oi.startsWith('\\') && (pi = ' ' + oi.replace('\\', '') + ' '), pi;
                                }(li.trim()) : '';
                                bi += Uh || (q = ki, Wh.textToSpeechMarkup ? /[a-z]/.test(q) ? ` <say-as interpret-as="character">${ q }</say-as>` : /[A-Z]/.test(q) ? `capital <say-as interpret-as="character">${ q.toLowerCase() }</say-as>` : q : /[a-z]/.test(q) ? ' \'' + q.toUpperCase() + '\'' : /[A-Z]/.test(q) ? ' \'capital ' + q.toUpperCase() + '\'' : q);
                            }
                        } else
                            bi += Th('math', Vh.body, Wh);
                        'mbin' === Vh.type && (bi += '<break time="150ms"/>');
                    }
                    break;
                }
                case 'mop':
                    if ('\u200B' !== Vh.value) {
                        const mi = Vh.command;
                        if ('\\sum' === Uh)
                            if (Vh.hasEmptyBranch('superscript') || Vh.hasEmptyBranch('subscript'))
                                if (Vh.hasEmptyBranch('subscript'))
                                    bi += ' the summation of';
                                else {
                                    let ni = Th('math', Vh.subscript, Wh);
                                    ni = ni.trim(), bi += ' the summation from <break time="200ms"/>' + ni + '<break time="200ms"/> of <break time="150ms"/>', fi = !0;
                                }
                        else {
                            let ni = Th('math', Vh.superscript, Wh);
                            ni = ni.trim();
                            let oi = Th('math', Vh.subscript, Wh);
                            oi = oi.trim(), bi += ' the summation from <break time="200ms"/>' + oi + '<break time="200ms"/> to  <break time="200ms"/>' + ni + '<break time="200ms"/> of <break time="150ms"/>', fi = !0;
                        } else if ('\\prod' === Uh)
                            if (Vh.hasEmptyBranch('superscript') || Vh.hasEmptyBranch('subscript'))
                                if (Vh.hasEmptyBranch('subscript'))
                                    bi += ' the product  of ';
                                else {
                                    let ni = Th('math', Vh.subscript, Wh);
                                    ni = ni.trim(), bi += ' the product from <break time="200ms"/>' + ni + '<break time="200ms"/> of <break time="150ms"/>', fi = !0;
                                }
                        else {
                            let ni = Th('math', Vh.superscript, Wh);
                            ni = ni.trim();
                            let oi = Th('math', Vh.subscript, Wh);
                            oi = oi.trim(), bi += ' the product from <break time="200ms"/>' + oi + '<break time="200ms"/> to <break time="200ms"/>' + ni + '<break time="200ms"/> of <break time="150ms"/>', fi = !0;
                        } else if ('\\int' === Uh)
                            if (Vh.hasEmptyBranch('superscript') || Vh.hasEmptyBranch('subscript'))
                                bi += ' the integral of <break time="200ms"/> ';
                            else {
                                let ni = Th('math', Vh.superscript, Wh);
                                ni = ni.trim();
                                let oi = Th('math', Vh.subscript, Wh);
                                oi = oi.trim(), bi += ' the integral from <break time="200ms"/>' + ai(oi) + '<break time="200ms"/> to <break time="200ms"/>' + ai(ni) + ' <break time="200ms"/> of ', fi = !0;
                            }
                        else
                            'string' == typeof Vh.value ? bi += (null !== (h = Oh[Vh.value]) && void 0 !== h ? h : Vh.command ? Oh[Vh.command] : void 0) || ' ' + Vh.value : Vh.command && ('\\mathop' === Vh.command ? bi += Th('math', Vh.body, Wh) : '\\operatorname' === Vh.command ? bi += (rh = Vh.body) ? rh.map(ni => ni.value).join('') : '' : bi += Vh.command.startsWith('\\') ? ' ' + Vh.command.slice(1) : ' ' + Vh.command);
                    }
                    break;
                case 'enclose':
                    ei = Th('math', Vh.body, Wh), bi += ' crossed out ' + ei + '. End crossed out.';
            }
            if (!fi && !Vh.hasEmptyBranch('superscript')) {
                let ni = Th(Uh, Vh.superscript, Wh);
                ni = ni.trim();
                const oi = ni.replace(/<[^>]*>/g, '');
                if (Ph(Vh.superscript)) {
                    if ('math' === Uh) {
                        const pi = function(qi) {
                            if (d(qi))
                                for (const ri of qi)
                                    if ('first' !== ri.type && ri.id)
                                        return ri.id.toString();
                            return '';
                        }(Vh.superscript);
                        Uh && (bi += '<mark name="' + Uh + '"/>');
                    }
                    '\u2032' === f ? bi += ' prime ' : '2' === f ? bi += ' squared ' : '3' === f ? bi += ' cubed ' : Number.isNaN(Number.parseInt(f)) ? bi += ' to the ' + ni + '; ' : bi += ' to the <say-as interpret-as="ordinal">' + f + '</say-as> power; ';
                } else
                    Number.isNaN(Number.parseInt(f)) ? bi += ' raised to the ' + ni + '; ' : bi += ' raised to the <say-as interpret-as="ordinal">' + f + '</say-as> power; ';
            }
            if (!fi && !Vh.hasEmptyBranch('subscript')) {
                let pi = Th('math', Vh.subscript, Wh);
                pi = pi.trim(), bi += Ph(Vh.subscript) ? ' sub ' + pi : ' subscript ' + pi + '. End subscript. ';
            }
        }
        var li, mi;
        return bi;
    }

    function ii(ji, ki) {
        var li;
        const mi = {
            ...ki,
            textToSpeechRulesOptions: {
                ...ki.textToSpeechRulesOptions
            }
        };
        if ('sre' === d.textToSpeechRules && 'sre' in globalThis) {
            const ni = _ah(ji, d);
            return ki ? (d.textToSpeechMarkup && (d.textToSpeechRulesOptions = null !== (li = d.textToSpeechRulesOptions) && void 0 !== li ? li : {}, d.textToSpeechRulesOptions.markup = d.textToSpeechMarkup, 'ssml' === d.textToSpeechRulesOptions.markup && (d.textToSpeechRulesOptions.markup = 'ssml_step'), d.textToSpeechRulesOptions.rate = d.speechEngineRate), d.textToSpeechRulesOptions && globalThis.sre.System.getInstance().setupEngine(d.textToSpeechRulesOptions), globalThis.sre.System.getInstance().toSpeech(ki)) : '';
        }
        let oi = Th('math', ji, d);
        if ('ssml' === d.textToSpeechMarkup) {
            let pi = '';
            d.speechEngineRate && (pi = '<prosody rate="' + d.speechEngineRate + '">'), oi = '<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US"><amazon:auto-breaths>' + pi + '<p><s>' + oi + '</s></p>' + (pi ? '</prosody>' : '') + '</amazon:auto-breaths></speak>';
        } else
            oi = 'mac' === d.textToSpeechMarkup && 'macos' === i() ? oi.replace(/<mark([^/]*)\/>/g, '').replace(/<emphasis>/g, '[[emph+]]').replace(/<\/emphasis>/g, '').replace(/<break time="(\d*)ms"\/>/g, '[[slc $1]]').replace(/<say-as[^>]*>/g, '').replace(/<\/say-as>/g, '') : oi.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
        return oi;
    }

    function mi(ni, oi, pi, qi) {
        const ri = oi.split(' ');
        for (const si of e) {
            const ti = oi.match(/(.*):(.*)/);
            if (e) {
                const ui = null != qi ? qi : {};
                'active' === e[2] ? oi.passive = !1 : oi[e[2]] = !0, ni.addEventListener(e[1], pi, oi);
            } else
                ni.addEventListener(oi, pi, qi);
        }
    }

    function ri(si, ti, ui, vi) {
        const wi = ti.split(' ');
        for (const xi of e) {
            const yi = ti.match(/(.*):(.*)/);
            if (e) {
                const zi = null != vi ? vi : {};
                'active' === e[2] ? ti.passive = !1 : ti[e[2]] = !0, si.removeEventListener(e[1], ui, ti);
            } else
                si.removeEventListener(ti, ui, vi);
        }
    }

    function wi(xi) {
        var yi;
        f();
        let zi = document.getElementById(xi);
        return zi ? zi.dataset.refcount = Number(Number.parseInt(null !== (yi = zi.getAttribute('data-refcount')) && void 0 !== yi ? yi : '0') + 1).toString() : (zi = document.createElement('div'), zi.setAttribute('aria-hidden', 'true'), zi.dataset.refcount = '1', zi.id = xi, document.body.append(zi)), zi;
    }

    function yi(zi) {
        var Ai;
        if (!zi)
            return;
        const Bi = Number.parseInt(null !== (Ai = zi.getAttribute('data-refcount')) && void 0 !== Ai ? Ai : '0');
        Bi <= 1 ? zi.remove() : zi.dataset.refcount = Number(Bi - 1).toString();
    }

    function Bi(Ci) {
        var Di;
        return (null === (Di = Ci.element) || void 0 === Di ? void 0 : Di.mathfield) === Ci;
    }

    function Di(Ei) {
        const Fi = function(Gi) {
            var Hi, Ii;
            return null !== (Ii = null !== (Hi = Gi.querySelector('.ML__caret')) && void 0 !== Hi ? Hi : Gi.querySelector('.ML__text-caret')) && void 0 !== Ii ? Ii : Gi.querySelector('.ML__latex-caret');
        }(Ei);
        if (!Fi)
            return null;
        const Gi = Fi.getBoundingClientRect();
        return {
            x: Gi.right,
            y: Gi.bottom,
            height: Gi.height
        };
    }

    function Gi(Hi) {
        var Ii;
        if (!Hi.parent)
            return 'root';
        let Ji = null !== (Ii = Hi.parent.id) && void 0 !== Ii ? Ii : '';
        return Ji += 'string' == typeof Hi.treeBranch ? '-' + Hi.treeBranch : `-${ Hi.treeBranch[0] }/${ Hi.treeBranch[0] }`, Ji;
    }

    function Ii(Ji, Ki) {
        if (!Ki)
            return null;
        const Li = Ji.field.getBoundingClientRect(),
            Mi = Ki.right - Ki.left,
            Ni = Ki.bottom - Ki.top,
            Oi = Math.ceil(Ki.left - Li.left + Ji.field.scrollLeft),
            Pi = Math.ceil(Ki.top - Li.top);
        return {
            left: f,
            right: f + d,
            top: g,
            bottom: g + e
        };
    }

    function Oi(Pi) {
        const Qi = Pi.getBoundingClientRect(),
            Ri = parseInt(getComputedStyle(Pi).marginRight),
            Si = {
                top: Qi.top - 1,
                bottom: Qi.bottom,
                left: Qi.left,
                right: Qi.right - 1 + Ri
            };
        if (0 === Pi.children.length || 'SVG' === Pi.tagName.toUpperCase())
            return d;
        for (const Ti of Pi.children)
            if (1 === Ti.nodeType && 'atomId' in Ti.dataset && !Ti.classList.contains('pstrut')) {
                const Ui = Oi(Ti);
                d.left = Math.min(d.left, Pi.left), d.right = Math.max(d.right, Pi.right), d.top = Math.min(d.top, Pi.top), d.bottom = Math.max(d.bottom, Pi.bottom);
            }
        return d;
    }

    function Ui(Vi, Wi) {
        var Xi, Yi;
        if (!Wi.id)
            return null;
        let Zi = null !== (d = null === (Xi = Vi.atomBoundsCache) || void 0 === Xi ? void 0 : Xi.get(Wi.id)) && void 0 !== d ? d : null;
        if (null !== Zi)
            return Zi;
        const $i = Vi.field.querySelector(`[data-atom-id="${ Wi.id }"]`);
        return Zi = f ? Oi(f) : null, Vi.atomBoundsCache && (Zi ? Vi.atomBoundsCache.set(Wi.id, Zi) : Vi.atomBoundsCache.delete(Wi.id)), null != Zi ? Zi : null;
    }

    function Yi(Zi, $i) {
        return Zi.model.selection.ranges.reduce((aj, bj) => aj.concat(... function(cj, dj, ej) {
            const fj = new Map();
            for (const gj of cj.model.getAtoms(dj, {
                    includeChildren: !0
                })) {
                if ((null == ej ? void 0 : ej.excludeAtomsWithBackground) && gj.style.backgroundColor)
                    break;
                const hj = Ii(cj, Ui(cj, gj));
                if (hj) {
                    const ij = Gi(gj);
                    if (fj.has(ij)) {
                        const jj = fj.get(ij);
                        fj.set(ij, {
                            left: Math.min(jj.left, hj.left),
                            right: Math.max(jj.right, hj.right),
                            top: Math.min(jj.top, hj.top),
                            bottom: Math.max(jj.bottom, hj.bottom)
                        });
                    } else
                        fj.set(ij, hj);
                }
            }
            return [...fj.values()];
        }(Zi, bj, $i)), []);
    }

    function Zi($i, aj) {
        return '*' === $i || 'none' === aj || ('same-origin' === aj ? !globalThis.origin || $i === globalThis.origin : 'function' == typeof aj && aj($i));
    }

    function $i(aj) {
        let bj = 0,
            cj = 0;
        const dj = aj.offsetWidth,
            ej = aj.offsetHeight;
        for (; aj instanceof HTMLElement;)
            bj += aj.offsetTop, cj += aj.offsetLeft, aj = aj.offsetParent;
        return new DOMRect(cj, bj, d, e);
    }
    const cj = {
            main: [
                'Main-Regular',
                'ML__cmr'
            ],
            'main-italic': [
                'Main-Italic',
                'ML__cmr ML__it'
            ],
            'main-bold': [
                'Main-Bold',
                'ML__cmr ML__bold'
            ],
            'main-bolditalic': [
                'Main-BoldItalic',
                'ML__cmr ML__bold ML__it'
            ],
            normal: [
                'Main-Regular',
                'ML__cmr'
            ],
            'normal-bold': [
                'Main-Bold',
                'ML__mathbf'
            ],
            'normal-italic': [
                'Math-Italic',
                'ML__mathit'
            ],
            'normal-bolditalic': [
                'Math-BoldItalic',
                'ML__mathbfit'
            ],
            ams: [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bold': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-italic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'ams-bolditalic': [
                'AMS-Regular',
                'ML__ams'
            ],
            'sans-serif': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bold': [
                'SansSerif-Regular',
                'ML__sans ML__bold'
            ],
            'sans-serif-italic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            'sans-serif-bolditalic': [
                'SansSerif-Regular',
                'ML__sans'
            ],
            calligraphic: [
                'Caligraphic-Regular',
                'ML__cal'
            ],
            'calligraphic-bold': [
                'Caligraphic-Regular',
                'ML__cal ML__bold'
            ],
            'calligraphic-italic': [
                'Caligraphic-Regular',
                'ML__cal ML__it'
            ],
            'calligraphic-bolditalic': [
                'Caligraphic-Regular',
                'ML__cal ML__bold ML__it'
            ],
            script: [
                'Script-Regular',
                'ML__script'
            ],
            'script-bold': [
                'Script-Regular',
                'ML__script ML__bold'
            ],
            'script-italic': [
                'Script-Regular',
                'ML__script ML__it'
            ],
            'script-bolditalic': [
                'Script-Regular',
                'ML__script ML__bold ML__it'
            ],
            fraktur: [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bold': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-italic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            'fraktur-bolditalic': [
                'Fraktur-Regular',
                'ML__frak'
            ],
            monospace: [
                'Typewriter-Regular',
                'ML__tt'
            ],
            'monospace-bold': [
                'Typewriter-Regular',
                'ML__tt ML__bold'
            ],
            'monospace-italic': [
                'Typewriter-Regular',
                'ML__tt ML__it'
            ],
            'monospace-bolditalic': [
                'Typewriter-Regular',
                'ML__tt ML__bold ML__it'
            ],
            'double-struck': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bold': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-italic': [
                'AMS-Regular',
                'ML__bb'
            ],
            'double-struck-bolditalic': [
                'AMS-Regular',
                'ML__bb'
            ]
        },
        dj = {
            'double-struck': /^[A-Z ]$/,
            script: /^[A-Z ]$/,
            calligraphic: /^[\dA-Z ]$/,
            fraktur: /^[\dA-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^\u2019\u2018]$/,
            monospace: /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
            'sans-serif': /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/
        },
        ej = /^[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5]$/,
        fj = [
            /^[a-z]$/,
            /^[A-Z]$/,
            ej,
            /^[\u0393|\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A6\u03A8\u03A9]$/
        ],
        gj = {
            iso: [
                'it',
                'it',
                'it',
                'it'
            ],
            tex: [
                'it',
                'it',
                'it',
                'up'
            ],
            french: [
                'it',
                'up',
                'up',
                'up'
            ],
            upright: [
                'up',
                'up',
                'up',
                'up'
            ]
        };

    function hj(ij) {
        if (!ij)
            return '';
        const {
            style: jj
        } = ij;
        if (void 0 === jj.variant)
            return '';
        let kj = jj.variant;
        return jj.variantStyle && 'up' !== jj.variantStyle && (kj += '-' + jj.variantStyle), kj;
    }

    function jj(kj) {
        return [
            Cd(kj.map(lj => lj[0])),
            kj.map(lj => lj[1]).some(lj => !0 === lj)
        ];
    }
    new class extends zc {
        createAtom(kj, lj, mj) {
            var nj, oj, pj, qj, rj;
            const sj = lj.getDefinition(kj, 'math');
            if (null === sj)
                return new Kd('mord', lj, {
                    mode: 'math',
                    command: kj,
                    value: kj,
                    style: mj
                });
            if ('symbol' === sj.definitionType) {
                const tj = new Kd(null !== (nj = sj.type) && void 0 !== nj ? nj : 'mord', lj, {
                    mode: 'math',
                    command: null !== (oj = sj.command) && void 0 !== oj ? oj : kj,
                    value: String.fromCodePoint(sj.codepoint),
                    style: mj
                });
                return null !== (pj = sj.isFunction) && void 0 !== pj && pj && (tj.isFunction = !0), kj.startsWith('\\') && (tj.verbatimLatex = kj), tj;
            }
            const uj = new Kd('mord', lj, {
                mode: 'math',
                command: null !== (tj = sj.command) && void 0 !== tj ? tj : kj,
                value: kj,
                style: mj
            });
            return null !== (rj = sj.isFunction) && void 0 !== rj && rj && (uj.isFunction = !0), kj.startsWith('\\') && (uj.verbatimLatex = kj), uj;
        }
        serialize(kj, lj) {
            const {
                parent: mj
            } = kj[0], nj = null == mj ? void 0 : mj.computedStyle.fontSize;
            return Cd(Ac(kj, 'fontSize').map(oj => {
                const pj = function(qj, rj) {
                        const {
                            parent: sj
                        } = qj[0], tj = null == sj ? void 0 : sj.computedStyle.backgroundColor;
                        return Cd(Ac(qj, 'backgroundColor').map(uj => {
                            var vj, wj;
                            let xj = function(yj, zj) {
                                const {
                                    parent: Aj
                                } = yj[0], Bj = null == Aj ? void 0 : Aj.computedStyle.color;
                                return Cd(Ac(yj, 'color').map(Cj => {
                                    var Dj, Ej;
                                    const Fj = function(Gj, Hj) {
                                            var Ij;
                                            const {
                                                parent: Jj
                                            } = Gj[0], Kj = hj(Jj), Lj = null !== (Ij = null == Jj ? void 0 : Jj.mode) && void 0 !== Ij ? Ij : 'math';
                                            return Cd(Ac(Gj, 'variant').map(Mj => {
                                                const Nj = hj(Mj[0]);
                                                if (Mj.every(Oj => {
                                                        const Pj = Oj.context.getDefinition(Oj.command, Lj);
                                                        return !(!Pj || 'function' === Pj.definitionType || !Pj.variant) && hj(Oj) === Nj;
                                                    }))
                                                    return Cd(Mj.map(Oj => Kd.serialize(Oj, Hj)));
                                                let Oj = '';
                                                return Nj && Nj !== Kj && (Oj = {
                                                    calligraphic: '\\mathcal{',
                                                    fraktur: '\\mathfrak{',
                                                    'double-struck': '\\mathbb{',
                                                    script: '\\mathscr{',
                                                    monospace: '\\mathtt{',
                                                    'sans-serif': '\\mathsf{',
                                                    normal: '\\mathrm{',
                                                    'normal-italic': '\\mathnormal{',
                                                    'normal-bold': '\\mathbf{',
                                                    'normal-bolditalic': '\\mathbfit{',
                                                    ams: '',
                                                    'ams-italic': '\\mathit{',
                                                    'ams-bold': '\\mathbf{',
                                                    'ams-bolditalic': '\\mathbfit{',
                                                    main: '',
                                                    'main-italic': '\\mathit{',
                                                    'main-bold': '\\mathbf{',
                                                    'main-bolditalic': '\\mathbfit{'
                                                } [Nj]), Oj ? Oj + Cd(Mj.map(Pj => Kd.serialize(Pj, Hj))) + '}' : Cd(Mj.map(Pj => Kd.serialize(Pj, Hj)));
                                            }));
                                        }(Cj, zj),
                                        Gj = Cj[0].computedStyle;
                                    return null !== (Dj = zj.skipStyles) && void 0 !== Dj && Dj || !Gj.color || Aj && Bj === Gj.color ? Fj : '\\textcolor{' + (null !== (Ej = Gj.verbatimColor) && void 0 !== Ej ? Ej : Gj.color) + '}{' + Fj + '}';
                                }));
                            }(uj, rj);
                            const yj = uj[0].computedStyle;
                            return null !== (vj = rj.skipStyles) && void 0 !== vj && vj || !xj.trim() || !yj.backgroundColor || sj && tj === yj.backgroundColor || !(uj.length > 0) && uj[0] instanceof gf || (xj = `\\ensuremath{${ xj }}`, xj = `\\colorbox{${ null !== (wj = yj.verbatimBackgroundColor) && void 0 !== wj ? wj : yj.backgroundColor }}{${ xj }}`), xj;
                        }));
                    }(oj, lj),
                    qj = oj[0].computedStyle.fontSize;
                return !qj || mj && nj === qj ? pj : '\\' + [
                    '',
                    'tiny',
                    'scriptsize',
                    'footnotesize',
                    'small',
                    'normalsize',
                    'large',
                    'Large',
                    'LARGE',
                    'huge',
                    'Huge'
                ][qj] + ' ' + pj;
            }));
        }
        applyStyle(kj, lj) {
            if (void 0 === lj.variant)
                return '';
            const mj = 'auto' !== lj.letterShapeStyle && lj.letterShapeStyle ? lj.letterShapeStyle : 'tex';
            let {
                variant: nj
            } = lj, {
                variantStyle: oj
            } = lj;
            'normal' === nj && !oj && /[\u00A3\u0131\u0237]/.test(kj.value) && (nj = 'main', oj = 'italic'), 'normal' !== nj || oj || 1 !== kj.value.length || fj.forEach((pj, qj) => {
                pj.test(kj.value) && 'it' === gj[mj][qj] && (oj = 'italic');
            }), 'up' === oj && (oj = void 0);
            const pj = oj ? nj + '-' + oj : nj,
                [qj, rj] = cj[pj];
            return dj[nj] && !dj[nj].test(kj.value) ? (kj.value = function(sj, tj, uj) {
                if (!/[A-Za-z\d]/.test(sj))
                    return sj;
                if (!tj && !uj)
                    return sj;
                const vj = sj.codePointAt(0);
                if (void 0 === vj)
                    return sj;
                for (const wj of ib)
                    if ((!tj || wj.variant === tj) && (!uj || wj.style === uj) && vj >= wj.offset && vj < wj.offset + wj.len) {
                        const xj = wj.start + vj - wj.offset;
                        return String.fromCodePoint(hb[xj] || xj);
                    }
                return wj;
            }(kj.value, nj, oj), null) : (ej.test(kj.value) && (kj.classes += ' lcGreek'), rj && (kj.classes += ' ' + rj), qj);
        }
        constructor() {
            super('math');
        }
    }();
    const kj = {
        roman: '',
        'sans-serif': 'ML__sans',
        monospace: 'ML__tt'
    };

    function lj(mj) {
        let nj = 0;
        for (let oj = 0; oj < mj.length; oj++)
            nj = Math.imul(31, nj) + mj.charCodeAt(oj) | 0;
        return Math.abs(nj);
    }

    function mj(nj, oj, pj) {
        var qj, rj;
        if (f(), !oj)
            return null;
        let sj = null !== (d = null == nj ? void 0 : nj.getRootNode()) && void 0 !== d ? d : null === document || void 0 === document ? void 0 : document.head;
        if (!sj)
            return null;
        sj === document && (sj = document.head);
        const tj = sj.querySelector(`style[data-id="${ pj }"]`);
        if (h) {
            const uj = Number.parseFloat(null !== (e = h.getAttribute('data-refcount')) && void 0 !== e ? e : '0');
            h.dataset.refcount = Number(nj + 1).toString();
        } else {
            const vj = document.createElement('style');
            nj.dataset.id = pj, nj.dataset.refcount = '1', nj.append(document.createTextNode(oj)), sj.appendChild(nj);
        }
        return {
            release: () => {
                var wj;
                const xj = document.head.querySelector(`style[data-id="${ pj }"]`);
                if (xj) {
                    const yj = Number.parseFloat(null !== (wj = xj.getAttribute('data-refcount')) && void 0 !== wj ? wj : '0');
                    1 === yj ? xj.remove() : xj.dataset.refcount = Number(yj - 1).toString();
                }
            }
        };
    }

    function sj(tj) {
        const uj = tj.split('+'),
            vj = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: uj.pop()
            };
        return uj.includes('shift') && (vj.shift = !0), uj.includes('alt') && (vj.alt = !0), uj.includes('ctrl') && (vj.ctrl = !0), uj.includes('cmd') && (vj.cmd = !0), uj.includes('win') && (vj.win = !0), uj.includes('meta') && (vj.meta = !0), vj;
    }

    function vj(wj) {
        let xj = '';
        return wj.shift && (xj += 'shift+'), wj.alt && (xj += 'alt+'), wj.ctrl && (xj += 'ctrl+'), wj.cmd && (xj += 'cmd+'), wj.win && (xj += 'win+'), wj.meta && (xj += 'meta+'), xj + wj.key;
    }
    new class extends zc {
        createAtom(wj, xj, yj) {
            const zj = xj.getDefinition(wj, 'text');
            return zj && 'symbol' === zj.definitionType ? new Se(wj, String.fromCodePoint(zj.codepoint), null != yj ? yj : {}, xj) : null;
        }
        serialize(wj, xj) {
            var yj;
            let [zj, Aj] = function(Bj, Cj) {
                return jj(Ac(Bj, 'backgroundColor').map(Dj => {
                    var Ej, Fj;
                    const [Gj, Hj] = function(Ij, Jj) {
                        var Kj;
                        if (!Ij || 0 === Ij.length)
                            return [
                                '',
                                !1
                            ];
                        const Lj = null === (Kj = Ij[0].parent) || void 0 === Kj ? void 0 : Kj.style.color;
                        return jj(Ac(Ij, 'color').map(Mj => {
                            var Nj, Oj;
                            const [Pj, Qj] = function(Rj, Sj) {
                                return function(Tj, Uj) {
                                    return jj(Ac(Tj, 'fontFamily').map(Vj => {
                                        var Wj, Xj;
                                        const [Yj, Zj] = function($j, ak) {
                                            return jj(Ac($j, 'fontSize').map(bk => {
                                                var ck, dk;
                                                const [ek, fk] = function(gk, hk) {
                                                    return jj(Ac(gk, 'fontSeries').map(ik => {
                                                        const [jk, kk] = function(lk, mk) {
                                                            return jj(Ac(lk, 'fontShape').map(nk => {
                                                                const [ok, pk] = function(qk, rk) {
                                                                    return [
                                                                        Cd(qk.map(sk => Kd.serialize(sk, rk))),
                                                                        !0
                                                                    ];
                                                                }(nk, mk), {
                                                                    fontShape: qk
                                                                } = nk[0].style;
                                                                return 'it' === qk ? [
                                                                    '\\textit{' + ok + '}',
                                                                    !1
                                                                ] : 'sl' === qk ? [
                                                                    '\\textsl{' + ok + '}',
                                                                    !1
                                                                ] : 'sc' === qk ? [
                                                                    '\\textsc{' + ok + '}',
                                                                    !1
                                                                ] : 'n' === qk ? [
                                                                    '\\textup{' + ok + '}',
                                                                    !1
                                                                ] : qk ? [
                                                                    `{\\fontshape{${ nk[0].style.fontShape }}${ ok }`,
                                                                    !1
                                                                ] : [
                                                                    ok,
                                                                    pk
                                                                ];
                                                            }));
                                                        }(ik, hk), {
                                                            fontSeries: lk
                                                        } = ik[0].style;
                                                        return 'b' === lk ? [
                                                            `\\textbf{${ jk }}`,
                                                            !1
                                                        ] : 'l' === lk ? [
                                                            `\\textlf{${ jk }}`,
                                                            !1
                                                        ] : 'm' === lk ? [
                                                            `\\textmd{${ jk }}`,
                                                            !1
                                                        ] : lk ? [
                                                            `\\fontseries{${ lk }}${ jk }`,
                                                            !1
                                                        ] : [
                                                            jk,
                                                            kk
                                                        ];
                                                    }));
                                                }(bk, ak), gk = null !== (dk = [
                                                    '',
                                                    'tiny',
                                                    'scriptsize',
                                                    'footnotesize',
                                                    'small',
                                                    'normalsize',
                                                    'large',
                                                    'Large',
                                                    'LARGE',
                                                    'huge',
                                                    'Huge'
                                                ][null !== (ck = bk[0].style.fontSize) && void 0 !== ck ? ck : '']) && void 0 !== dk ? dk : '';
                                                return gk ? [
                                                    `{\\${ gk } ${ ek }}`,
                                                    fk
                                                ] : [
                                                    ek,
                                                    fk
                                                ];
                                            }));
                                        }(Vj, Uj), $j = null !== (Xj = {
                                            roman: 'textrm',
                                            monospace: 'texttt',
                                            'sans-serif': 'textsf'
                                        } [null !== (Wj = Vj[0].style.fontFamily) && void 0 !== Wj ? Wj : '']) && void 0 !== Xj ? Xj : '';
                                        return $j ? [
                                            `\\${ $j }{${ Yj }}`,
                                            !1
                                        ] : Vj[0].style.fontFamily ? [
                                            `\\fontfamily{${ Vj[0].style.fontFamily }}${ Yj }`,
                                            Zj
                                        ] : [
                                            Yj,
                                            Zj
                                        ];
                                    }));
                                }(Rj, Sj);
                            }(Mj, Jj);
                            return null !== (Nj = Jj.skipStyles) && void 0 !== Nj && Nj || !Mj[0].style.color || 'none' === Mj[0].style.color || Lj === Mj[0].style.color ? [
                                Pj,
                                Qj
                            ] : [
                                `\\textcolor{${ null !== (Oj = Mj[0].style.verbatimColor) && void 0 !== Oj ? Oj : Mj[0].style.color }}{${ Pj }}`,
                                !1
                            ];
                        }));
                    }(Dj, Cj), Ij = Dj[0].computedStyle;
                    return null !== (Ej = Cj.skipStyles) && void 0 !== Ej && Ej || !Ij.backgroundColor || 'none' === Ij.backgroundColor ? [
                        Gj,
                        Hj
                    ] : [
                        `\\colorbox{${ null !== (Fj = Ij.verbatimBackgroundColor) && void 0 !== Fj ? Fj : Ij.backgroundColor }}{${ Gj }}`,
                        !1
                    ];
                }));
            }(wj, xj);
            return !0 === (null !== (yj = xj.skipModeCommand) && void 0 !== yj && yj) && (Aj = !1), Aj && (zj = `\\text{${ zj }}`), zj;
        }
        applyStyle(wj, xj) {
            var yj, zj, Aj, Bj, Cj, Dj;
            const {
                fontFamily: Ej
            } = xj;
            if (kj[Ej] ? wj.classes += void 0 !== (yj = ' ' + kj[Ej]) ? yj : '' : Ej && wj.setStyle('font-family', Ej), xj.fontShape && (wj.classes += ' ', wj.classes += null !== (zj = {
                    it: 'ML__it',
                    sl: 'ML__shape_sl',
                    sc: 'ML__shape_sc',
                    ol: 'ML__shape_ol'
                } [xj.fontShape]) && void 0 !== zj ? zj : ''), xj.fontSeries) {
                const Fj = xj.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
                Fj && (wj.classes += ' ', wj.classes += null !== (Bj = {
                    ul: 'ML__series_ul',
                    el: 'ML__series_el',
                    l: 'ML__series_l',
                    sl: 'ML__series_sl',
                    m: '',
                    sb: 'ML__series_sb',
                    b: 'ML__bold',
                    eb: 'ML__series_eb',
                    ub: 'ML__series_ub'
                } [null !== (Aj = Fj[1]) && void 0 !== Aj ? Aj : '']) && void 0 !== Bj ? Bj : '', wj.classes += ' ', wj.classes += null !== (Dj = {
                    uc: 'ML__series_uc',
                    ec: 'ML__series_ec',
                    c: 'ML__series_c',
                    sc: 'ML__series_sc',
                    n: '',
                    sx: 'ML__series_sx',
                    x: 'ML__series_x',
                    ex: 'ML__series_ex',
                    ux: 'ML__series_ux'
                } [null !== (Cj = Fj[2]) && void 0 !== Cj ? Cj : '']) && void 0 !== Dj ? Dj : '');
            }
            return 'Main-Regular';
        }
        constructor() {
            super('text');
        }
    }(), new class extends zc {
        createAtom(wj, xj, yj) {
            return new Bf(wj, xj);
        }
        serialize(wj, xj) {
            return wj.filter(yj => yj instanceof Bf && !yj.isSuggestion).map(yj => yj.value).join('');
        }
        applyStyle() {
            return null;
        }
        constructor() {
            super('latex');
        }
    }();
    const wj = 'apple' === _zj() ? {
            id: 'apple.en-intl',
            displayName: 'English (international)',
            virtualLayout: 'qwerty',
            platform: 'apple',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'å',
                    'Å'
                ],
                KeyB: [
                    'b',
                    'B',
                    '\u222B',
                    'ı'
                ],
                KeyC: [
                    'c',
                    'C',
                    'ç',
                    'Ç'
                ],
                KeyD: [
                    'd',
                    'D',
                    '\u2202',
                    'Î'
                ],
                KeyE: [
                    'e',
                    'E',
                    '\xB4',
                    '\xB4'
                ],
                KeyF: [
                    'f',
                    'F',
                    'ƒ',
                    'Ï'
                ],
                KeyG: [
                    'g',
                    'G',
                    '\xA9',
                    '\u02DD'
                ],
                KeyH: [
                    'h',
                    'H',
                    '\u02D9',
                    'Ó'
                ],
                KeyI: [
                    'i',
                    'I',
                    'ˆ',
                    'ˆ'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '\u2206',
                    'Ô'
                ],
                KeyK: [
                    'k',
                    'K',
                    '\u02DA',
                    '\uF8FF'
                ],
                KeyL: [
                    'l',
                    'L',
                    '\xAC',
                    'Ò'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    'Â'
                ],
                KeyN: [
                    'n',
                    'N',
                    '\u02DC',
                    '\u02DC'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ø',
                    'Ø'
                ],
                KeyP: [
                    'p',
                    'P',
                    'π',
                    '\u220F'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'œ',
                    'Œ'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    '\u2030'
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    'Í'
                ],
                KeyT: [
                    't',
                    'T',
                    '\u2020',
                    'ˇ'
                ],
                KeyU: [
                    'u',
                    'U',
                    '\xA8',
                    '\xA8'
                ],
                KeyV: [
                    'v',
                    'V',
                    '\u221A',
                    '\u25CA'
                ],
                KeyW: [
                    'w',
                    'W',
                    '\u2211',
                    '\u201E'
                ],
                KeyX: [
                    'x',
                    'X',
                    '\u2248',
                    '\u02DB'
                ],
                KeyY: [
                    'y',
                    'Y',
                    '\xA5',
                    'Á'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'Ω',
                    '\xB8'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\u2044'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\u2122',
                    '\u20AC'
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xA3',
                    '\u2039'
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA2',
                    '\u203A'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u221E',
                    'ﬁ'
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xA7',
                    'ﬂ'
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xB6',
                    '\u2021'
                ],
                Digit8: [
                    '8',
                    '*',
                    '\u2022',
                    '\xB0'
                ],
                Digit9: [
                    '9',
                    '(',
                    'ª',
                    '\xB7'
                ],
                Digit0: [
                    '0',
                    ')',
                    'º',
                    '\u201A'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '\u2013',
                    '\u2014'
                ],
                Equal: [
                    '=',
                    '+',
                    '\u2260',
                    '\xB1'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\u201C',
                    '\u201D'
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\u2018',
                    '\u2019'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAB',
                    '\xBB'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\u2026',
                    'Ú'
                ],
                Quote: [
                    '\'',
                    '"',
                    'æ',
                    'Æ'
                ],
                Backquote: [
                    '`',
                    '\u02DC',
                    '`',
                    '`'
                ],
                Comma: [
                    ',',
                    '<',
                    '\u2264',
                    '\xAF'
                ],
                Period: [
                    '.',
                    '>',
                    '\u2265',
                    '\u02D8'
                ],
                Slash: [
                    '/',
                    '?',
                    '\xF7',
                    '\xBF'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                IntlBackslash: [
                    '\xA7',
                    '\xB1',
                    '\xA7',
                    '\xB1'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                AudioVolumeUp: [
                    '',
                    '=',
                    '',
                    '='
                ]
            }
        } : 'windows' === _zj() ? {
            id: 'windows.en-intl',
            displayName: 'English (international)',
            platform: 'windows',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'á',
                    'Á'
                ],
                KeyB: [
                    'b',
                    'B',
                    '',
                    ''
                ],
                KeyC: [
                    'c',
                    'C',
                    '\xA9',
                    '\xA2'
                ],
                KeyD: [
                    'd',
                    'D',
                    'ð',
                    'Ð'
                ],
                KeyE: [
                    'e',
                    'E',
                    'é',
                    'É'
                ],
                KeyF: [
                    'f',
                    'F',
                    '',
                    ''
                ],
                KeyG: [
                    'g',
                    'G',
                    '',
                    ''
                ],
                KeyH: [
                    'h',
                    'H',
                    '',
                    ''
                ],
                KeyI: [
                    'i',
                    'I',
                    'í',
                    'Í'
                ],
                KeyJ: [
                    'j',
                    'J',
                    '',
                    ''
                ],
                KeyK: [
                    'k',
                    'K',
                    '',
                    ''
                ],
                KeyL: [
                    'l',
                    'L',
                    'ø',
                    'Ø'
                ],
                KeyM: [
                    'm',
                    'M',
                    'µ',
                    ''
                ],
                KeyN: [
                    'n',
                    'N',
                    'ñ',
                    'Ñ'
                ],
                KeyO: [
                    'o',
                    'O',
                    'ó',
                    'Ó'
                ],
                KeyP: [
                    'p',
                    'P',
                    'ö',
                    'Ö'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'ä',
                    'Ä'
                ],
                KeyR: [
                    'r',
                    'R',
                    '\xAE',
                    ''
                ],
                KeyS: [
                    's',
                    'S',
                    'ß',
                    '\xA7'
                ],
                KeyT: [
                    't',
                    'T',
                    'þ',
                    'Þ'
                ],
                KeyU: [
                    'u',
                    'U',
                    'ú',
                    'Ú'
                ],
                KeyV: [
                    'v',
                    'V',
                    '',
                    ''
                ],
                KeyW: [
                    'w',
                    'W',
                    'å',
                    'Å'
                ],
                KeyX: [
                    'x',
                    'X',
                    '',
                    ''
                ],
                KeyY: [
                    'y',
                    'Y',
                    'ü',
                    'Ü'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'æ',
                    'Æ'
                ],
                Digit1: [
                    '1',
                    '!',
                    '\xA1',
                    '\xB9'
                ],
                Digit2: [
                    '2',
                    '@',
                    '\xB2',
                    ''
                ],
                Digit3: [
                    '3',
                    '#',
                    '\xB3',
                    ''
                ],
                Digit4: [
                    '4',
                    '$',
                    '\xA4',
                    '\xA3'
                ],
                Digit5: [
                    '5',
                    '%',
                    '\u20AC',
                    ''
                ],
                Digit6: [
                    '6',
                    '^',
                    '\xBC',
                    ''
                ],
                Digit7: [
                    '7',
                    '&',
                    '\xBD',
                    ''
                ],
                Digit8: [
                    '8',
                    '*',
                    '\xBE',
                    ''
                ],
                Digit9: [
                    '9',
                    '(',
                    '\u2018',
                    ''
                ],
                Digit0: [
                    '0',
                    ')',
                    '\u2019',
                    ''
                ],
                Space: [
                    ' ',
                    ' ',
                    '',
                    ''
                ],
                Minus: [
                    '-',
                    '_',
                    '\xA5',
                    ''
                ],
                Equal: [
                    '=',
                    '+',
                    '\xD7',
                    '\xF7'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '\xAB',
                    ''
                ],
                BracketRight: [
                    ']',
                    '}',
                    '\xBB',
                    ''
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\xAC',
                    '\xA6'
                ],
                Semicolon: [
                    ';',
                    ':',
                    '\xB6',
                    '\xB0'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\xB4',
                    '\xA8'
                ],
                Backquote: [
                    '`',
                    '~',
                    '',
                    ''
                ],
                Comma: [
                    ',',
                    '<',
                    'ç',
                    'Ç'
                ],
                Period: [
                    '.',
                    '>',
                    '',
                    ''
                ],
                Slash: [
                    '/',
                    '?',
                    '\xBF',
                    ''
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '',
                    ''
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '',
                    ''
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '',
                    ''
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '',
                    ''
                ],
                IntlBackslash: [
                    '\\',
                    '|',
                    '',
                    ''
                ]
            }
        } : {
            id: 'linux.en',
            displayName: 'English',
            platform: 'linux',
            virtualLayout: 'qwerty',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: [
                    'a',
                    'A',
                    'a',
                    'A'
                ],
                KeyB: [
                    'b',
                    'B',
                    'b',
                    'B'
                ],
                KeyC: [
                    'c',
                    'C',
                    'c',
                    'C'
                ],
                KeyD: [
                    'd',
                    'D',
                    'd',
                    'D'
                ],
                KeyE: [
                    'e',
                    'E',
                    'e',
                    'E'
                ],
                KeyF: [
                    'f',
                    'F',
                    'f',
                    'F'
                ],
                KeyG: [
                    'g',
                    'G',
                    'g',
                    'G'
                ],
                KeyH: [
                    'h',
                    'H',
                    'h',
                    'H'
                ],
                KeyI: [
                    'i',
                    'I',
                    'i',
                    'I'
                ],
                KeyJ: [
                    'j',
                    'J',
                    'j',
                    'J'
                ],
                KeyK: [
                    'k',
                    'K',
                    'k',
                    'K'
                ],
                KeyL: [
                    'l',
                    'L',
                    'l',
                    'L'
                ],
                KeyM: [
                    'm',
                    'M',
                    'm',
                    'M'
                ],
                KeyN: [
                    'n',
                    'N',
                    'n',
                    'N'
                ],
                KeyO: [
                    'o',
                    'O',
                    'o',
                    'O'
                ],
                KeyP: [
                    'p',
                    'P',
                    'p',
                    'P'
                ],
                KeyQ: [
                    'q',
                    'Q',
                    'q',
                    'Q'
                ],
                KeyR: [
                    'r',
                    'R',
                    'r',
                    'R'
                ],
                KeyS: [
                    's',
                    'S',
                    's',
                    'S'
                ],
                KeyT: [
                    't',
                    'T',
                    't',
                    'T'
                ],
                KeyU: [
                    'u',
                    'U',
                    'u',
                    'U'
                ],
                KeyV: [
                    'v',
                    'V',
                    'v',
                    'V'
                ],
                KeyW: [
                    'w',
                    'W',
                    'w',
                    'W'
                ],
                KeyX: [
                    'x',
                    'X',
                    'x',
                    'X'
                ],
                KeyY: [
                    'y',
                    'Y',
                    'y',
                    'Y'
                ],
                KeyZ: [
                    'z',
                    'Z',
                    'z',
                    'Z'
                ],
                Digit1: [
                    '1',
                    '!',
                    '1',
                    '!'
                ],
                Digit2: [
                    '2',
                    '@',
                    '2',
                    '@'
                ],
                Digit3: [
                    '3',
                    '#',
                    '3',
                    '#'
                ],
                Digit4: [
                    '4',
                    '$',
                    '4',
                    '$'
                ],
                Digit5: [
                    '5',
                    '%',
                    '5',
                    '%'
                ],
                Digit6: [
                    '6',
                    '^',
                    '6',
                    '^'
                ],
                Digit7: [
                    '7',
                    '&',
                    '7',
                    '&'
                ],
                Digit8: [
                    '8',
                    '*',
                    '8',
                    '*'
                ],
                Digit9: [
                    '9',
                    '(',
                    '9',
                    '('
                ],
                Digit0: [
                    '0',
                    ')',
                    '0',
                    ')'
                ],
                Space: [
                    ' ',
                    ' ',
                    ' ',
                    ' '
                ],
                Minus: [
                    '-',
                    '_',
                    '-',
                    '_'
                ],
                Equal: [
                    '=',
                    '+',
                    '=',
                    '+'
                ],
                BracketLeft: [
                    '[',
                    '{',
                    '[',
                    '{'
                ],
                BracketRight: [
                    ']',
                    '}',
                    ']',
                    '}'
                ],
                Backslash: [
                    '\\',
                    '|',
                    '\\',
                    '|'
                ],
                Semicolon: [
                    ';',
                    ':',
                    ';',
                    ':'
                ],
                Quote: [
                    '\'',
                    '"',
                    '\'',
                    '"'
                ],
                Backquote: [
                    '`',
                    '~',
                    '`',
                    '~'
                ],
                Comma: [
                    ',',
                    '<',
                    ',',
                    '<'
                ],
                Period: [
                    '.',
                    '>',
                    '.',
                    '>'
                ],
                Slash: [
                    '/',
                    '?',
                    '/',
                    '?'
                ],
                NumpadDivide: [
                    '/',
                    '/',
                    '/',
                    '/'
                ],
                NumpadMultiply: [
                    '*',
                    '*',
                    '*',
                    '*'
                ],
                NumpadSubtract: [
                    '-',
                    '-',
                    '-',
                    '-'
                ],
                NumpadAdd: [
                    '+',
                    '+',
                    '+',
                    '+'
                ],
                Numpad1: [
                    '1',
                    '1',
                    '1',
                    '1'
                ],
                Numpad2: [
                    '2',
                    '2',
                    '2',
                    '2'
                ],
                Numpad3: [
                    '3',
                    '3',
                    '3',
                    '3'
                ],
                Numpad4: [
                    '4',
                    '4',
                    '4',
                    '4'
                ],
                Numpad5: [
                    '5',
                    '5',
                    '5',
                    '5'
                ],
                Numpad6: [
                    '6',
                    '6',
                    '6',
                    '6'
                ],
                Numpad7: [
                    '7',
                    '7',
                    '7',
                    '7'
                ],
                Numpad8: [
                    '8',
                    '8',
                    '8',
                    '8'
                ],
                Numpad9: [
                    '9',
                    '9',
                    '9',
                    '9'
                ],
                Numpad0: [
                    '0',
                    '0',
                    '0',
                    '0'
                ],
                NumpadDecimal: [
                    '',
                    '.',
                    '',
                    '.'
                ],
                IntlBackslash: [
                    '<',
                    '>',
                    '|',
                    '\xA6'
                ],
                NumpadEqual: [
                    '=',
                    '=',
                    '=',
                    '='
                ],
                NumpadComma: [
                    '.',
                    '.',
                    '.',
                    '.'
                ],
                NumpadParenLeft: [
                    '(',
                    '(',
                    '(',
                    '('
                ],
                NumpadParenRight: [
                    ')',
                    ')',
                    ')',
                    ')'
                ]
            }
        },
        xj = {
            enter: '[Enter]',
            escape: '[Escape]',
            backspace: '[Backspace]',
            tab: '[Tab]',
            space: '[Space]',
            pausebreak: '[Pause]',
            insert: '[Insert]',
            home: '[Home]',
            pageup: '[PageUp]',
            delete: '[Delete]',
            end: '[End]',
            pagedown: '[PageDown]',
            right: '[ArrowRight]',
            left: '[ArrowLeft]',
            down: '[ArrowDown]',
            up: '[ArrowUp]',
            numpad0: '[Numpad0]',
            numpad1: '[Numpad1]',
            numpad2: '[Numpad2]',
            numpad3: '[Numpad3]',
            numpad4: '[Numpad4]',
            numpad5: '[Numpad5]',
            numpad6: '[Numpad6]',
            numpad7: '[Numpad7]',
            numpad8: '[Numpad8]',
            numpad9: '[Numpad9]',
            numpad_divide: '[NumpadDivide]',
            numpad_multiply: '[NumpadMultiply]',
            numpad_subtract: '[NumpadSubtract]',
            numpad_add: '[NumpadAdd]',
            numpad_decimal: '[NumpadDecimal]',
            numpad_separator: '[NumpadComma]',
            capslock: '[Capslock]',
            f1: '[F1]',
            f2: '[F2]',
            f3: '[F3]',
            f4: '[F4]',
            f5: '[F5]',
            f6: '[F6]',
            f7: '[F7]',
            f8: '[F8]',
            f9: '[F9]',
            f10: '[F10]',
            f11: '[F11]',
            f12: '[F12]',
            f13: '[F13]',
            f14: '[F14]',
            f15: '[F15]',
            f16: '[F16]',
            f17: '[F17]',
            f18: '[F18]',
            f19: '[F19]'
        },
        yj = [];

    function _zj() {
        switch (i()) {
            case 'macos':
            case 'ios':
                return 'apple';
            case 'windows':
                return 'windows';
        }
        return 'linux';
    }

    function Aj(Bj) {
        Bj.platform && Bj.platform !== _zj() || yj.push(Bj);
    }

    function Bj() {
        return yj[0];
    }
    Aj(wj), Aj({
        id: 'apple.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'apple',
        virtualLayout: 'azerty',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '\u2021',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                '\u222B'
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                '\xA2'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                'ê',
                'Ê'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                '\xB7'
            ],
            KeyG: [
                'g',
                'G',
                'ﬁ',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                'Ì',
                'Î'
            ],
            KeyI: [
                'i',
                'I',
                'î',
                'ï'
            ],
            KeyJ: [
                'j',
                'J',
                'Ï',
                'Í'
            ],
            KeyK: [
                'k',
                'K',
                'È',
                'Ë'
            ],
            KeyL: [
                'l',
                'L',
                '\xAC',
                '|'
            ],
            KeyM: [
                ',',
                '?',
                '\u221E',
                '\xBF'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                'ı'
            ],
            KeyO: [
                'o',
                'O',
                'œ',
                'Œ'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\u201A'
            ],
            KeyS: [
                's',
                'S',
                'Ò',
                '\u2211'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2122'
            ],
            KeyU: [
                'u',
                'U',
                'º',
                'ª'
            ],
            KeyV: [
                'v',
                'V',
                '\u25CA',
                '\u221A'
            ],
            KeyW: [
                'z',
                'Z',
                'Â',
                'Å'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                '\u2044'
            ],
            KeyY: [
                'y',
                'Y',
                'Ú',
                'Ÿ'
            ],
            KeyZ: [
                'w',
                'W',
                '\u2039',
                '\u203A'
            ],
            Digit1: [
                '&',
                '1',
                '\uF8FF',
                '\xB4'
            ],
            Digit2: [
                'é',
                '2',
                'ë',
                '\u201E'
            ],
            Digit3: [
                '"',
                '3',
                '\u201C',
                '\u201D'
            ],
            Digit4: [
                '\'',
                '4',
                '\u2018',
                '\u2019'
            ],
            Digit5: [
                '(',
                '5',
                '{',
                '['
            ],
            Digit6: [
                '\xA7',
                '6',
                '\xB6',
                'å'
            ],
            Digit7: [
                'è',
                '7',
                '\xAB',
                '\xBB'
            ],
            Digit8: [
                '!',
                '8',
                '\xA1',
                'Û'
            ],
            Digit9: [
                'ç',
                '9',
                'Ç',
                'Á'
            ],
            Digit0: [
                'à',
                '0',
                'ø',
                'Ø'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                '}',
                ']'
            ],
            Equal: [
                '-',
                '_',
                '\u2014',
                '\u2013'
            ],
            BracketLeft: [
                '^',
                '\xA8',
                'ô',
                'Ô'
            ],
            BracketRight: [
                '$',
                '*',
                '\u20AC',
                '\xA5'
            ],
            Backslash: [
                '`',
                '\xA3',
                '@',
                '#'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'Ó'
            ],
            Quote: [
                'ù',
                '%',
                'Ù',
                '\u2030'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ';',
                '.',
                '\u2026',
                '\u2022'
            ],
            Period: [
                ':',
                '/',
                '\xF7',
                '\\'
            ],
            Slash: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                '.',
                ',',
                '.'
            ],
            IntlBackslash: [
                '@',
                '#',
                '\u2022',
                'Ÿ'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Aj({
        id: 'apple.spanish',
        locale: 'es',
        displayName: 'Spanish ISO',
        platform: 'apple',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                'ß',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '\xA9',
                ' '
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2206'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u20AC'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'ﬁ'
            ],
            KeyG: [
                'g',
                'G',
                '\uF8FF',
                'ﬂ'
            ],
            KeyH: [
                'h',
                'H',
                '\u2122',
                ' '
            ],
            KeyI: [
                'i',
                'I',
                ' ',
                ' '
            ],
            KeyJ: [
                'j',
                'J',
                '\xB6',
                '\xAF'
            ],
            KeyK: [
                'k',
                'K',
                '\xA7',
                'ˇ'
            ],
            KeyL: [
                'l',
                'L',
                ' ',
                '\u02D8'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02DA'
            ],
            KeyN: [
                'n',
                'N',
                ' ',
                '\u02D9'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                ' '
            ],
            KeyS: [
                's',
                'S',
                '\u222B',
                ' '
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u2021'
            ],
            KeyU: [
                'u',
                'U',
                ' ',
                ' '
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                'æ',
                'Æ'
            ],
            KeyX: [
                'x',
                'X',
                '\u2211',
                '\u203A'
            ],
            KeyY: [
                'y',
                'Y',
                '\xA5',
                ' '
            ],
            KeyZ: [
                'z',
                'Z',
                'Ω',
                '\u2039'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                'ı'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u02DD'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\u2022'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                '\u2030'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ' '
            ],
            Digit7: [
                '7',
                '/',
                '\xF7',
                '\u2044'
            ],
            Digit8: [
                '8',
                '(',
                '\u201C',
                '\u2018'
            ],
            Digit9: [
                '9',
                ')',
                '\u201D',
                '\u2019'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\u2248'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\xB4',
                '\xB8'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '\u201A',
                '\u02DB'
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                'ˆ'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '\xB1'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '\xBB'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '\u02DC'
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                '\xAB'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u201E',
                ''
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\u2026'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                ',',
                ',',
                ',',
                ','
            ],
            IntlBackslash: [
                'º',
                'ª',
                '\\',
                '\xB0'
            ]
        }
    }), Aj({
        id: 'windows.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'windows',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'z',
                'Z',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '|',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '@',
                ''
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '~',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '\u20AC',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '',
                ''
            ],
            Digit9: [
                '9',
                ')',
                '',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                '\'',
                '?',
                '',
                ''
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '',
                ''
            ],
            BracketLeft: [
                '`',
                '^',
                '[',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                ''
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                ''
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '',
                ''
            ],
            Quote: [
                '\xB4',
                '\xA8',
                '{',
                ''
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Aj({
        id: 'linux.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'linux',
        virtualLayout: 'qwerty',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'º'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            Digit1: [
                '1',
                '!',
                '|',
                '\xA1'
            ],
            Digit2: [
                '2',
                '"',
                '@',
                '\u215B'
            ],
            Digit3: [
                '3',
                '\xB7',
                '#',
                '\xA3'
            ],
            Digit4: [
                '4',
                '$',
                '~',
                '$'
            ],
            Digit5: [
                '5',
                '%',
                '\xBD',
                '\u215C'
            ],
            Digit6: [
                '6',
                '&',
                '\xAC',
                '\u215D'
            ],
            Digit7: [
                '7',
                '/',
                '{',
                '\u215E'
            ],
            Digit8: [
                '8',
                '(',
                '[',
                '\u2122'
            ],
            Digit9: [
                '9',
                ')',
                ']',
                '\xB1'
            ],
            Digit0: [
                '0',
                '=',
                '}',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '\'',
                '?',
                '\\',
                '\xBF'
            ],
            Equal: [
                '\xA1',
                '\xBF',
                '̃',
                '~'
            ],
            BracketLeft: [
                '̀',
                '̂',
                '[',
                '̊'
            ],
            BracketRight: [
                '+',
                '*',
                ']',
                '̄'
            ],
            Backslash: [
                'ç',
                'Ç',
                '}',
                '̆'
            ],
            Semicolon: [
                'ñ',
                'Ñ',
                '~',
                '̋'
            ],
            Quote: [
                '́',
                '̈',
                '{',
                '{'
            ],
            Backquote: [
                'º',
                'ª',
                '\\',
                '\\'
            ],
            Comma: [
                ',',
                ';',
                '\u2500',
                '\xD7'
            ],
            Period: [
                '.',
                ':',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '̣',
                '̇'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadEnter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Numpad1: [
                '',
                '1',
                '',
                '1'
            ],
            Numpad2: [
                '',
                '2',
                '',
                '2'
            ],
            Numpad3: [
                '',
                '3',
                '',
                '3'
            ],
            Numpad4: [
                '',
                '4',
                '',
                '4'
            ],
            Numpad5: [
                '',
                '5',
                '',
                '5'
            ],
            Numpad6: [
                '',
                '6',
                '',
                '6'
            ],
            Numpad7: [
                '',
                '7',
                '',
                '7'
            ],
            Numpad8: [
                '',
                '8',
                '',
                '8'
            ],
            Numpad9: [
                '',
                '9',
                '',
                '9'
            ],
            Numpad0: [
                '',
                '0',
                '',
                '0'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            NumpadComma: [
                '.',
                '.',
                '.',
                '.'
            ],
            NumpadParenLeft: [
                '(',
                '(',
                '(',
                '('
            ],
            NumpadParenRight: [
                ')',
                ')',
                ')',
                ')'
            ]
        }
    }), Aj({
        id: 'linux.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'linux',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '@',
                'Ω'
            ],
            KeyB: [
                'b',
                'B',
                '\u201D',
                '\u2019'
            ],
            KeyC: [
                'c',
                'C',
                '\xA2',
                '\xA9'
            ],
            KeyD: [
                'd',
                'D',
                'ð',
                'Ð'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\xA2'
            ],
            KeyF: [
                'f',
                'F',
                'đ',
                'ª'
            ],
            KeyG: [
                'g',
                'G',
                'ŋ',
                'Ŋ'
            ],
            KeyH: [
                'h',
                'H',
                'ħ',
                'Ħ'
            ],
            KeyI: [
                'i',
                'I',
                '\u2192',
                'ı'
            ],
            KeyJ: [
                'j',
                'J',
                '̉',
                '̛'
            ],
            KeyK: [
                'k',
                'K',
                'ĸ',
                '&'
            ],
            KeyL: [
                'l',
                'L',
                'ł',
                'Ł'
            ],
            KeyM: [
                ',',
                '?',
                '́',
                '̋'
            ],
            KeyN: [
                'n',
                'N',
                'n',
                'N'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'þ',
                'Þ'
            ],
            KeyQ: [
                'a',
                'A',
                'æ',
                'Æ'
            ],
            KeyR: [
                'r',
                'R',
                '\xB6',
                '\xAE'
            ],
            KeyS: [
                's',
                'S',
                'ß',
                '\xA7'
            ],
            KeyT: [
                't',
                'T',
                'ŧ',
                'Ŧ'
            ],
            KeyU: [
                'u',
                'U',
                '\u2193',
                '\u2191'
            ],
            KeyV: [
                'v',
                'V',
                '\u201C',
                '\u2018'
            ],
            KeyW: [
                'z',
                'Z',
                '\xAB',
                '<'
            ],
            KeyX: [
                'x',
                'X',
                '\xBB',
                '>'
            ],
            KeyY: [
                'y',
                'Y',
                '\u2190',
                '\xA5'
            ],
            KeyZ: [
                'w',
                'W',
                'ł',
                'Ł'
            ],
            Digit1: [
                '&',
                '1',
                '\xB9',
                '\xA1'
            ],
            Digit2: [
                'é',
                '2',
                '~',
                '\u215B'
            ],
            Digit3: [
                '"',
                '3',
                '#',
                '\xA3'
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                '$'
            ],
            Digit5: [
                '(',
                '5',
                '[',
                '\u215C'
            ],
            Digit6: [
                '-',
                '6',
                '|',
                '\u215D'
            ],
            Digit7: [
                'è',
                '7',
                '`',
                '\u215E'
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                '\u2122'
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                '\xB1'
            ],
            Digit0: [
                'à',
                '0',
                '@',
                '\xB0'
            ],
            Enter: [
                '\r',
                '\r',
                '\r',
                '\r'
            ],
            Escape: [
                '\x1B',
                '\x1B',
                '\x1B',
                '\x1B'
            ],
            Backspace: [
                '\b',
                '\b',
                '\b',
                '\b'
            ],
            Tab: [
                '\t',
                '',
                '\t',
                ''
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                '\xBF'
            ],
            Equal: [
                '=',
                '+',
                '}',
                '̨'
            ],
            BracketLeft: [
                '̂',
                '̈',
                '̈',
                '̊'
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                '̄'
            ],
            Backslash: [
                '*',
                'µ',
                '̀',
                '̆'
            ],
            Semicolon: [
                'm',
                'M',
                'µ',
                'º'
            ],
            Quote: [
                'ù',
                '%',
                '̂',
                '̌'
            ],
            Backquote: [
                '\xB2',
                '~',
                '\xAC',
                '\xAC'
            ],
            Comma: [
                ';',
                '.',
                '\u2500',
                '\xD7'
            ],
            Period: [
                ':',
                '/',
                '\xB7',
                '\xF7'
            ],
            Slash: [
                '!',
                '\xA7',
                '̣',
                '̇'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                '',
                '.',
                '',
                '.'
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                '\xA6'
            ]
        }
    }), Aj({
        id: 'windows.french',
        locale: 'fr',
        displayName: 'French',
        virtualLayout: 'azerty',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: [
                'q',
                'Q',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                ',',
                '?',
                '',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'a',
                'A',
                '',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'y',
                'Y',
                '',
                ''
            ],
            KeyZ: [
                'w',
                'W',
                '',
                ''
            ],
            Digit1: [
                '&',
                '1',
                '',
                ''
            ],
            Digit2: [
                'é',
                '2',
                '~',
                ''
            ],
            Digit3: [
                '"',
                '3',
                '#',
                ''
            ],
            Digit4: [
                '\'',
                '4',
                '{',
                ''
            ],
            Digit5: [
                '(',
                '5',
                '[',
                ''
            ],
            Digit6: [
                '-',
                '6',
                '|',
                ''
            ],
            Digit7: [
                'è',
                '7',
                '`',
                ''
            ],
            Digit8: [
                '_',
                '8',
                '\\',
                ''
            ],
            Digit9: [
                'ç',
                '9',
                '^',
                ''
            ],
            Digit0: [
                'à',
                '0',
                '@',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                ')',
                '\xB0',
                ']',
                ''
            ],
            Equal: [
                '=',
                '+',
                '}',
                ''
            ],
            BracketLeft: [
                '^',
                '\xA8',
                '',
                ''
            ],
            BracketRight: [
                '$',
                '\xA3',
                '\xA4',
                ''
            ],
            Backslash: [
                '*',
                'µ',
                '',
                ''
            ],
            Semicolon: [
                'm',
                'M',
                '',
                ''
            ],
            Quote: [
                'ù',
                '%',
                '',
                ''
            ],
            Backquote: [
                '\xB2',
                '',
                '',
                ''
            ],
            Comma: [
                ';',
                '.',
                '',
                ''
            ],
            Period: [
                ':',
                '/',
                '',
                ''
            ],
            Slash: [
                '!',
                '\xA7',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '',
                ''
            ]
        }
    }), Aj({
        id: 'windows.german',
        locale: 'de',
        displayName: 'German',
        platform: 'windows',
        virtualLayout: 'qwertz',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                '',
                ''
            ],
            KeyB: [
                'b',
                'B',
                '',
                ''
            ],
            KeyC: [
                'c',
                'C',
                '',
                ''
            ],
            KeyD: [
                'd',
                'D',
                '',
                ''
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                ''
            ],
            KeyF: [
                'f',
                'F',
                '',
                ''
            ],
            KeyG: [
                'g',
                'G',
                '',
                ''
            ],
            KeyH: [
                'h',
                'H',
                '',
                ''
            ],
            KeyI: [
                'i',
                'I',
                '',
                ''
            ],
            KeyJ: [
                'j',
                'J',
                '',
                ''
            ],
            KeyK: [
                'k',
                'K',
                '',
                ''
            ],
            KeyL: [
                'l',
                'L',
                '',
                ''
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                ''
            ],
            KeyN: [
                'n',
                'N',
                '',
                ''
            ],
            KeyO: [
                'o',
                'O',
                '',
                ''
            ],
            KeyP: [
                'p',
                'P',
                '',
                ''
            ],
            KeyQ: [
                'q',
                'Q',
                '@',
                ''
            ],
            KeyR: [
                'r',
                'R',
                '',
                ''
            ],
            KeyS: [
                's',
                'S',
                '',
                ''
            ],
            KeyT: [
                't',
                'T',
                '',
                ''
            ],
            KeyU: [
                'u',
                'U',
                '',
                ''
            ],
            KeyV: [
                'v',
                'V',
                '',
                ''
            ],
            KeyW: [
                'w',
                'W',
                '',
                ''
            ],
            KeyX: [
                'x',
                'X',
                '',
                ''
            ],
            KeyY: [
                'z',
                'Z',
                '',
                ''
            ],
            KeyZ: [
                'y',
                'Y',
                '',
                ''
            ],
            Digit1: [
                '1',
                '!',
                '',
                ''
            ],
            Digit2: [
                '2',
                '"',
                '\xB2',
                ''
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB3',
                ''
            ],
            Digit4: [
                '4',
                '$',
                '',
                ''
            ],
            Digit5: [
                '5',
                '%',
                '',
                ''
            ],
            Digit6: [
                '6',
                '&',
                '',
                ''
            ],
            Digit7: [
                '7',
                '/',
                '{',
                ''
            ],
            Digit8: [
                '8',
                '(',
                '[',
                ''
            ],
            Digit9: [
                '9',
                ')',
                ']',
                ''
            ],
            Digit0: [
                '0',
                '=',
                '}',
                ''
            ],
            Space: [
                ' ',
                ' ',
                '',
                ''
            ],
            Minus: [
                'ß',
                '?',
                '\\',
                'ẞ'
            ],
            Equal: [
                '\xB4',
                '`',
                '',
                ''
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '',
                ''
            ],
            BracketRight: [
                '+',
                '*',
                '~',
                ''
            ],
            Backslash: [
                '#',
                '\'',
                '',
                ''
            ],
            Semicolon: [
                'ö',
                'Ö',
                '',
                ''
            ],
            Quote: [
                'ä',
                'Ä',
                '',
                ''
            ],
            Backquote: [
                '^',
                '\xB0',
                '',
                ''
            ],
            Comma: [
                ',',
                ';',
                '',
                ''
            ],
            Period: [
                '.',
                ':',
                '',
                ''
            ],
            Slash: [
                '-',
                '_',
                '',
                ''
            ],
            NumpadDivide: [
                '/',
                '/',
                '',
                ''
            ],
            NumpadMultiply: [
                '*',
                '*',
                '',
                ''
            ],
            NumpadSubtract: [
                '-',
                '-',
                '',
                ''
            ],
            NumpadAdd: [
                '+',
                '+',
                '',
                ''
            ],
            IntlBackslash: [
                '<',
                '>',
                '|',
                ''
            ]
        }
    }), Aj({
        id: 'apple.german',
        locale: 'de',
        displayName: 'German',
        virtualLayout: 'qwertz',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'b',
                'B',
                '\u222B',
                '\u2039'
            ],
            KeyC: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyD: [
                'd',
                'D',
                '\u2202',
                '\u2122'
            ],
            KeyE: [
                'e',
                'E',
                '\u20AC',
                '\u2030'
            ],
            KeyF: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyG: [
                'g',
                'G',
                '\xA9',
                'Ì'
            ],
            KeyH: [
                'h',
                'H',
                'ª',
                'Ó'
            ],
            KeyI: [
                'i',
                'I',
                '\u2044',
                'Û'
            ],
            KeyJ: [
                'j',
                'J',
                'º',
                'ı'
            ],
            KeyK: [
                'k',
                'K',
                '\u2206',
                'ˆ'
            ],
            KeyL: [
                'l',
                'L',
                '@',
                'ﬂ'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                '\u02D8'
            ],
            KeyN: [
                'n',
                'N',
                '~',
                '\u203A'
            ],
            KeyO: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyP: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyQ: [
                'q',
                'Q',
                '\xAB',
                '\xBB'
            ],
            KeyR: [
                'r',
                'R',
                '\xAE',
                '\xB8'
            ],
            KeyS: [
                's',
                'S',
                '\u201A',
                'Í'
            ],
            KeyT: [
                't',
                'T',
                '\u2020',
                '\u02DD'
            ],
            KeyU: [
                'u',
                'U',
                '\xA8',
                'Á'
            ],
            KeyV: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            KeyW: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            KeyX: [
                'x',
                'X',
                '\u2248',
                'Ù'
            ],
            KeyY: [
                'z',
                'Z',
                'Ω',
                'ˇ'
            ],
            KeyZ: [
                'y',
                'Y',
                '\xA5',
                '\u2021'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\xAC'
            ],
            Digit2: [
                '2',
                '"',
                '\u201C',
                '\u201D'
            ],
            Digit3: [
                '3',
                '\xA7',
                '\xB6',
                '#'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\xA3'
            ],
            Digit5: [
                '5',
                '%',
                '[',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '&',
                ']',
                '^'
            ],
            Digit7: [
                '7',
                '/',
                '|',
                '\\'
            ],
            Digit8: [
                '8',
                '(',
                '{',
                '\u02DC'
            ],
            Digit9: [
                '9',
                ')',
                '}',
                '\xB7'
            ],
            Digit0: [
                '0',
                '=',
                '\u2260',
                '\xAF'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                'ß',
                '?',
                '\xBF',
                '\u02D9'
            ],
            Equal: [
                '\xB4',
                '`',
                '\'',
                '\u02DA'
            ],
            BracketLeft: [
                'ü',
                'Ü',
                '\u2022',
                '\xB0'
            ],
            BracketRight: [
                '+',
                '*',
                '\xB1',
                '\uF8FF'
            ],
            Backslash: [
                '#',
                '\'',
                '\u2018',
                '\u2019'
            ],
            Semicolon: [
                'ö',
                'Ö',
                'œ',
                'Œ'
            ],
            Quote: [
                'ä',
                'Ä',
                'æ',
                'Æ'
            ],
            Backquote: [
                '<',
                '>',
                '\u2264',
                '\u2265'
            ],
            Comma: [
                ',',
                ';',
                '\u221E',
                '\u02DB'
            ],
            Period: [
                '.',
                ':',
                '\u2026',
                '\xF7'
            ],
            Slash: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            NumpadDecimal: [
                ',',
                ',',
                '.',
                '.'
            ],
            IntlBackslash: [
                '^',
                '\xB0',
                '\u201E',
                '\u201C'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ]
        }
    }), Aj({
        id: 'dvorak',
        locale: 'en',
        displayName: 'Dvorak',
        virtualLayout: 'dvorak',
        platform: '',
        score: 0,
        mapping: {
            KeyA: [
                'a',
                'A',
                'å',
                'Å'
            ],
            KeyB: [
                'x',
                'X',
                '\u2248',
                '\u02DB'
            ],
            KeyC: [
                'j',
                'J',
                '\u2206',
                'Ô'
            ],
            KeyD: [
                'e',
                'E',
                '\xB4',
                '\xB4'
            ],
            KeyE: [
                '.',
                '>',
                '\u2265',
                '\u02D8'
            ],
            KeyF: [
                'u',
                'U',
                '\xA8',
                '\xA8'
            ],
            KeyG: [
                'i',
                'I',
                'ˆ',
                'ˆ'
            ],
            KeyH: [
                'd',
                'D',
                '\u2202',
                'Î'
            ],
            KeyI: [
                'c',
                'C',
                'ç',
                'Ç'
            ],
            KeyJ: [
                'h',
                'H',
                '\u02D9',
                'Ó'
            ],
            KeyK: [
                't',
                'T',
                '\u2020',
                'ˇ'
            ],
            KeyL: [
                'n',
                'N',
                '\u02DC',
                '\u02DC'
            ],
            KeyM: [
                'm',
                'M',
                'µ',
                'Â'
            ],
            KeyN: [
                'b',
                'B',
                '\u222B',
                'ı'
            ],
            KeyO: [
                'r',
                'R',
                '\xAE',
                '\u2030'
            ],
            KeyP: [
                'l',
                'L',
                '\xAC',
                'Ò'
            ],
            KeyQ: [
                '\'',
                '"',
                'æ',
                'Æ'
            ],
            KeyR: [
                'p',
                'P',
                'π',
                '\u220F'
            ],
            KeyS: [
                'o',
                'O',
                'ø',
                'Ø'
            ],
            KeyT: [
                'y',
                'Y',
                '\xA5',
                'Á'
            ],
            KeyU: [
                'g',
                'G',
                '\xA9',
                '\u02DD'
            ],
            KeyV: [
                'k',
                'K',
                '\u02DA',
                '\uF8FF'
            ],
            KeyW: [
                ',',
                '<',
                '\u2264',
                '\xAF'
            ],
            KeyX: [
                'q',
                'Q',
                'œ',
                'Œ'
            ],
            KeyY: [
                'f',
                'F',
                'ƒ',
                'Ï'
            ],
            KeyZ: [
                ';',
                ':',
                '\u2026',
                'Ú'
            ],
            Digit1: [
                '1',
                '!',
                '\xA1',
                '\u2044'
            ],
            Digit2: [
                '2',
                '@',
                '\u2122',
                '\u20AC'
            ],
            Digit3: [
                '3',
                '#',
                '\xA3',
                '\u2039'
            ],
            Digit4: [
                '4',
                '$',
                '\xA2',
                '\u203A'
            ],
            Digit5: [
                '5',
                '%',
                '\u221E',
                'ﬁ'
            ],
            Digit6: [
                '6',
                '^',
                '\xA7',
                'ﬂ'
            ],
            Digit7: [
                '7',
                '&',
                '\xB6',
                '\u2021'
            ],
            Digit8: [
                '8',
                '*',
                '\u2022',
                '\xB0'
            ],
            Digit9: [
                '9',
                '(',
                'ª',
                '\xB7'
            ],
            Digit0: [
                '0',
                ')',
                'º',
                '\u201A'
            ],
            Space: [
                ' ',
                ' ',
                ' ',
                ' '
            ],
            Minus: [
                '[',
                '{',
                '\u201C',
                '\u201D'
            ],
            Equal: [
                ']',
                '}',
                '\u2018',
                '\u2019'
            ],
            BracketLeft: [
                '/',
                '?',
                '\xF7',
                '\xBF'
            ],
            BracketRight: [
                '=',
                '+',
                '\u2260',
                '\xB1'
            ],
            Backslash: [
                '\\',
                '|',
                '\xAB',
                '\xBB'
            ],
            Semicolon: [
                's',
                'S',
                'ß',
                'Í'
            ],
            Quote: [
                '-',
                '_',
                '\u2013',
                '\u2014'
            ],
            Backquote: [
                '`',
                '~',
                '`',
                '`'
            ],
            Comma: [
                'w',
                'W',
                '\u2211',
                '\u201E'
            ],
            Period: [
                'v',
                'V',
                '\u221A',
                '\u25CA'
            ],
            Slash: [
                'z',
                'Z',
                'Ω',
                '\xB8'
            ],
            NumpadDivide: [
                '/',
                '/',
                '/',
                '/'
            ],
            NumpadMultiply: [
                '*',
                '*',
                '*',
                '*'
            ],
            NumpadSubtract: [
                '-',
                '-',
                '-',
                '-'
            ],
            NumpadAdd: [
                '+',
                '+',
                '+',
                '+'
            ],
            Numpad1: [
                '1',
                '1',
                '1',
                '1'
            ],
            Numpad2: [
                '2',
                '2',
                '2',
                '2'
            ],
            Numpad3: [
                '3',
                '3',
                '3',
                '3'
            ],
            Numpad4: [
                '4',
                '4',
                '4',
                '4'
            ],
            Numpad5: [
                '5',
                '5',
                '5',
                '5'
            ],
            Numpad6: [
                '6',
                '6',
                '6',
                '6'
            ],
            Numpad7: [
                '7',
                '7',
                '7',
                '7'
            ],
            Numpad8: [
                '8',
                '8',
                '8',
                '8'
            ],
            Numpad9: [
                '9',
                '9',
                '9',
                '9'
            ],
            Numpad0: [
                '0',
                '0',
                '0',
                '0'
            ],
            NumpadDecimal: [
                '.',
                '.',
                '.',
                '.'
            ],
            IntlBackslash: [
                '\xA7',
                '\xB1',
                '\xA7',
                '\xB1'
            ],
            NumpadEqual: [
                '=',
                '=',
                '=',
                '='
            ],
            AudioVolumeUp: [
                '',
                '=',
                '',
                '='
            ]
        }
    });
    const Cj = [{
                key: 'left',
                command: 'moveToPreviousChar'
            },
            {
                key: 'right',
                command: 'moveToNextChar'
            },
            {
                key: 'up',
                command: 'moveUp'
            },
            {
                key: 'down',
                command: 'moveDown'
            },
            {
                key: 'shift+[ArrowLeft]',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+[ArrowRight]',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+[ArrowUp]',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+[ArrowDown]',
                command: 'extendSelectionDownward'
            },
            {
                key: '[Backspace]',
                command: 'deleteBackward'
            },
            {
                key: 'alt+[Delete]',
                command: 'deleteBackward'
            },
            {
                key: '[Delete]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[Backspace]',
                command: 'deleteForward'
            },
            {
                key: 'alt+[ArrowLeft]',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+[ArrowRight]',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+[ArrowLeft]',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+[ArrowRight]',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+[ArrowLeft]',
                command: 'moveToGroupStart'
            },
            {
                key: 'ctrl+[ArrowRight]',
                command: 'moveToGroupEnd'
            },
            {
                key: 'shift+ctrl+[ArrowLeft]',
                command: 'extendToGroupStart'
            },
            {
                key: 'shift+ctrl+[ArrowRight]',
                command: 'extendToGroupEnd'
            },
            {
                key: '[Space]',
                ifMode: 'math',
                command: 'moveAfterParent'
            },
            {
                key: 'shift+[Space]',
                ifMode: 'math',
                command: 'moveBeforeParent'
            },
            {
                key: '[Home]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'cmd+[ArrowLeft]',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'shift+[Home]',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+cmd+[ArrowLeft]',
                command: 'extendToMathFieldStart'
            },
            {
                key: '[End]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'cmd+[ArrowRight]',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+[End]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'shift+cmd+[ArrowRight]',
                command: 'extendToMathFieldEnd'
            },
            {
                key: '[Pageup]',
                command: 'moveToGroupStart'
            },
            {
                key: '[Pagedown]',
                command: 'moveToGroupEnd'
            },
            {
                key: '[Tab]',
                ifMode: 'math',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'math',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Tab]',
                ifMode: 'text',
                command: 'moveToNextPlaceholder'
            },
            {
                key: 'shift+[Tab]',
                ifMode: 'text',
                command: 'moveToPreviousPlaceholder'
            },
            {
                key: '[Escape]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'text',
                command: [
                    'switchMode',
                    'latex'
                ]
            },
            {
                key: '\\',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[IntlBackslash]',
                ifMode: 'math',
                command: [
                    'switchMode',
                    'latex',
                    '\\'
                ]
            },
            {
                key: '[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'complete',
                    {
                        selectItem: 'true'
                    }
                ]
            },
            {
                key: '[Tab]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'accept-suggestion'
                ]
            },
            {
                key: '[Return]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: '[Enter]',
                ifMode: 'latex',
                command: 'complete'
            },
            {
                key: 'shift+[Escape]',
                ifMode: 'latex',
                command: [
                    'complete',
                    'reject'
                ]
            },
            {
                key: '[ArrowDown]',
                ifMode: 'latex',
                command: 'nextSuggestion'
            },
            {
                key: '[ArrowUp]',
                ifMode: 'latex',
                command: 'previousSuggestion'
            },
            {
                key: 'ctrl+a',
                ifPlatform: '!macos',
                command: 'selectAll'
            },
            {
                key: 'cmd+a',
                command: 'selectAll'
            },
            {
                key: '[Cut]',
                command: 'cutToClipboard'
            },
            {
                key: '[Copy]',
                command: 'copyToClipboard'
            },
            {
                key: '[Paste]',
                command: 'pasteFromClipboard'
            },
            {
                key: '[Clear]',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+z',
                ifPlatform: '!macos',
                command: 'undo'
            },
            {
                key: 'cmd+z',
                command: 'undo'
            },
            {
                key: '[Undo]',
                command: 'undo'
            },
            {
                key: 'ctrl+y',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+y',
                command: 'redo'
            },
            {
                key: 'shift+ctrl+z',
                ifPlatform: '!macos',
                command: 'redo'
            },
            {
                key: 'shift+cmd+z',
                command: 'redo'
            },
            {
                key: '[Redo]',
                command: 'redo'
            },
            {
                key: '[EraseEof]',
                command: 'deleteToGroupEnd'
            },
            {
                key: 'ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousChar'
            },
            {
                key: 'ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextChar'
            },
            {
                key: 'ctrl+p',
                ifPlatform: 'macos',
                command: 'moveUp'
            },
            {
                key: 'ctrl+n',
                ifPlatform: 'macos',
                command: 'moveDown'
            },
            {
                key: 'ctrl+a',
                ifPlatform: 'macos',
                command: 'moveToMathFieldStart'
            },
            {
                key: 'ctrl+e',
                ifPlatform: 'macos',
                command: 'moveToMathFieldEnd'
            },
            {
                key: 'shift+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendSelectionBackward'
            },
            {
                key: 'shift+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendSelectionForward'
            },
            {
                key: 'shift+ctrl+p',
                ifPlatform: 'macos',
                command: 'extendSelectionUpward'
            },
            {
                key: 'shift+ctrl+n',
                ifPlatform: 'macos',
                command: 'extendSelectionDownward'
            },
            {
                key: 'shift+ctrl+a',
                ifPlatform: 'macos',
                command: 'extendToMathFieldStart'
            },
            {
                key: 'shift+ctrl+e',
                ifPlatform: 'macos',
                command: 'extendToMathFieldEnd'
            },
            {
                key: 'alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'moveToPreviousWord'
            },
            {
                key: 'alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'moveToNextWord'
            },
            {
                key: 'shift+alt+ctrl+b',
                ifPlatform: 'macos',
                command: 'extendToPreviousWord'
            },
            {
                key: 'shift+alt+ctrl+f',
                ifPlatform: 'macos',
                command: 'extendToNextWord'
            },
            {
                key: 'ctrl+h',
                ifPlatform: 'macos',
                command: 'deleteBackward'
            },
            {
                key: 'ctrl+d',
                ifPlatform: 'macos',
                command: 'deleteForward'
            },
            {
                key: 'ctrl+l',
                ifPlatform: 'macos',
                command: 'scrollIntoView'
            },
            {
                key: 'ctrl+[Digit2]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'ctrl+[Digit5]',
                ifMode: 'math',
                command: 'moveToOpposite'
            },
            {
                key: 'ctrl+[Digit6]',
                ifMode: 'math',
                command: 'moveToSuperscript'
            },
            {
                key: 'ctrl+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'ctrl+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Return]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+[Enter]',
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\pi'
                ]
            },
            {
                key: 'alt+v',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sqrt{#0}'
                ]
            },
            {
                key: 'alt+w',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\sum_{i=#?}^{#?}'
                ]
            },
            {
                key: 'alt+b',
                command: [
                    'insert',
                    '\\int_{#?}^{#?}'
                ]
            },
            {
                key: 'alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cup'
                ]
            },
            {
                key: 'alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\cap'
                ]
            },
            {
                key: 'alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\emptyset'
                ]
            },
            {
                key: 'alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\differentialD'
                ]
            },
            {
                key: 'shift+alt+o',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\varnothing'
                ]
            },
            {
                key: 'shift+alt+d',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\partial'
                ]
            },
            {
                key: 'shift+alt+p',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\prod_{i=#?}^{#?}'
                ]
            },
            {
                key: 'shift+alt+u',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcup'
                ]
            },
            {
                key: 'shift+alt+n',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\bigcap'
                ]
            },
            {
                key: 'shift+alt+a',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\forall'
                ]
            },
            {
                key: 'shift+alt+e',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\exists'
                ]
            },
            {
                key: 'alt+[Backslash]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\backslash'
                ]
            },
            {
                key: '[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+[NumpadDivide]',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#?}{#@}'
                ]
            },
            {
                key: 'shift+alt+k',
                command: 'toggleKeystrokeCaption'
            },
            {
                key: 'alt+[Space]',
                command: 'toggleVirtualKeyboard'
            },
            {
                key: 'alt+ctrl+[ArrowUp]',
                command: [
                    'speak',
                    'all',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+ctrl+[ArrowDown]',
                command: [
                    'speak',
                    'selection',
                    {
                        withHighlighting: !1
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'applyStyle',
                    {
                        mode: 'text'
                    }
                ]
            },
            {
                key: 'alt+[Equal]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'applyStyle',
                    {
                        mode: 'math'
                    }
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'switchMode',
                    'text',
                    '',
                    ''
                ]
            },
            {
                key: 'shift+[Quote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'text',
                command: [
                    'switchMode',
                    'math',
                    '',
                    ''
                ]
            },
            {
                key: '/',
                ifMode: 'math',
                command: [
                    'insert',
                    '\\frac{#@}{#?}'
                ]
            },
            {
                key: 'alt+/',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\/'
                ]
            },
            {
                key: 'alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrack #0 \\right\\rbrack'
                ]
            },
            {
                key: 'ctrl+[Minus]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'moveToSubscript'
            },
            {
                key: 'shift+alt+[BracketLeft]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\left\\lbrace #0 \\right\\rbrace'
                ]
            },
            {
                key: 'ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowAfter'
            },
            {
                key: 'shift+ctrl+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'shift+cmd+;',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addRowBefore'
            },
            {
                key: 'ctrl+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'cmd+[Backspace]',
                ifMode: 'math',
                command: 'removeRow'
            },
            {
                key: 'ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnAfter'
            },
            {
                key: 'shift+ctrl+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+cmd+[Comma]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: 'addColumnBefore'
            },
            {
                key: 'shift+[Backspace]',
                ifMode: 'math',
                command: 'removeColumn'
            },
            {
                key: 'alt+[Digit5]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '$\\infty'
                ]
            },
            {
                key: 'alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\wedge'
                ]
            },
            {
                key: 'shift+alt+[Digit6]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\vee'
                ]
            },
            {
                key: 'alt+[Digit9]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '('
                ]
            },
            {
                key: 'alt+[Digit0]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    ')'
                ]
            },
            {
                key: 'alt+|',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '|'
                ]
            },
            {
                key: 'shift+[Backquote]',
                ifLayout: [
                    'apple.en-intl',
                    'windows.en-intl',
                    'linux.en'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '\\~'
                ]
            },
            {
                key: '[Backquote]',
                ifLayout: [
                    'windows.french',
                    'linux.french'
                ],
                ifMode: 'math',
                command: [
                    'insert',
                    '^2'
                ]
            }
        ],
        Dj = {
            '\\theta': 'alt+q',
            '\\sqrt': [
                'alt+v',
                'ctrl+[Digit2]'
            ],
            '\\pi': 'alt+p',
            '\\prod': 'shift+alt+p',
            '\\sum': 'alt+w',
            '\\int': 'alt+b',
            '\\cup': 'alt+u',
            '\\cap': 'alt+n',
            '\\bigcup': 'shift+alt+u',
            '\\bigcap': 'shift+alt+n',
            '\\forall': 'shift+alt+a',
            '\\exists': 'shift+alt+e',
            '\\infty': 'alt+[Digit5]',
            '\\wedge': 'alt+[Digit6]',
            '\\vee': 'shift+alt+[Digit6]',
            '\\differentialD': 'alt+d',
            '\\partial': 'shift+alt+d',
            '\\frac': 'Slash',
            '\\emptyset': 'alt+o',
            '\\varnothing': 'shift+alt+o',
            '\\~': '~'
        };

    function Ej(Fj) {
        let Gj = Fj;
        return d(Gj) && (Gj = Gj.length > 0 ? Gj[0] + '(' + Gj.slice(1).join('') + ')' : ''), Gj;
    }

    function Fj(Gj, Hj) {
        let Ij = [];
        if ('string' == typeof Hj) {
            const Jj = Dj[Hj];
            d(Gj) ? Ij = Gj.slice() : Gj && Ij.push(Gj);
        }
        const Kj = Ej(Hj),
            Lj = new RegExp('^' + e.replace('\\', '\\\\').replace('|', '\\|').replace('*', '\\*').replace('$', '\\$').replace('^', '\\^') + '([^*a-zA-Z]|$)');
        for (const Mj of Gj)
            f.test(Ej(Hj.command)) && Ij.push(Hj.key);
        return Ij.map(_Kj);
    }

    function _Kj(Lj) {
        var Mj;
        const Nj = /macos|ios|/.test(i()),
            Oj = Lj.split('+');
        let Pj = '';
        for (const Qj of d)
            !Nj && Pj && (Pj += '<span class="ML__shortcut-join">+</span>'), Lj.startsWith('[Key') ? Pj += Lj.slice(4, 5) : Lj.startsWith('Key') ? Pj += Lj.slice(3, 4) : Lj.startsWith('[Digit') ? Pj += Lj.slice(6, 7) : Lj.startsWith('Digit') ? Pj += Lj.slice(5, 6) : Pj += null !== (Mj = {
                cmd: '\u2318',
                meta: Nj ? '\u2318' : 'command',
                shift: Nj ? '\u21E7' : 'shift',
                alt: Nj ? '\u2325' : 'alt',
                ctrl: Nj ? '\u2303' : 'control',
                '\n': Nj ? '\u23CE' : 'return',
                '[return]': Nj ? '\u23CE' : 'return',
                '[enter]': Nj ? '\u2324' : 'enter',
                '[tab]': Nj ? '\u21E5' : 'tab',
                '[escape]': 'esc',
                '[backspace]': Nj ? '\u232B' : 'backspace',
                '[delete]': Nj ? '\u2326' : 'del',
                '[pageup]': Nj ? '\u21DE' : 'page up',
                '[pagedown]': Nj ? '\u21DF' : 'page down',
                '[home]': Nj ? '\u2912' : 'home',
                '[end]': Nj ? '\u2913' : 'end',
                '[space]': 'space',
                '[equal]': '=',
                '[minus]': '-',
                '[comma]': ',',
                '[slash]': '/',
                '[backslash]': '\\',
                '[bracketleft]': '[',
                '[bracketright]': ']',
                semicolon: ';',
                period: '.',
                comma: ',',
                minus: '-',
                equal: '=',
                quote: '\'',
                bracketLeft: '[',
                bracketRight: ']',
                backslash: '\\',
                intlbackslash: '\\',
                backquote: '`',
                slash: '/',
                numpadmultiply: '* &#128290;',
                numpaddivide: '/ &#128290;',
                numpadsubtract: '- &#128290;',
                numpadadd: '+ &#128290;',
                numpaddecimal: '. &#128290;',
                numpadcomma: ', &#128290;',
                help: 'help',
                left: '\u21E0',
                up: '\u21E1',
                right: '\u21E2',
                down: '\u21E3',
                '[arrowleft]': '\u21E0',
                '[arrowup]': '\u21E1',
                '[arrowright]': '\u21E2',
                '[arrowdown]': '\u21E3',
                '[digit0]': '0',
                '[digit1]': '1',
                '[digit2]': '2',
                '[digit3]': '3',
                '[digit4]': '4',
                '[digit5]': '5',
                '[digit6]': '6',
                '[digit7]': '7',
                '[digit8]': '8',
                '[digit9]': '9'
            } [Lj.toLowerCase()]) && void 0 !== Mj ? Mj : Lj.toUpperCase();
        return Pj;
    }

    function Pj(Qj, Rj) {
        if (Qj.ifPlatform && !/^!?(macos|windows|android|ios|chromeos|other)$/.test(Qj.ifPlatform))
            throw new Error(`Unexpected platform "${ Qj.ifPlatform }" for keybinding ${ Qj.key }`);
        if (void 0 !== Qj.ifLayout && (0 === Rj.score || !Qj.ifLayout.includes(Rj.id)))
            return;
        const Sj = sj(Qj.key);
        let Tj = Qj.ifPlatform;
        if (Sj.cmd) {
            if (Tj && 'macos' !== Tj && 'ios' !== Tj)
                throw new Error('Unexpected "cmd" modifier with platform "' + Tj + '"\n"cmd" modifier can only be used with macOS or iOS platform.');
            Tj || (Tj = 'ios' === i() ? 'ios' : 'macos'), Sj.win = !1, Sj.cmd = !1, Sj.meta = !0;
        }
        if (Sj.win) {
            if (Tj && 'windows' !== Tj)
                throw new Error('Unexpected "win" modifier with platform "' + Tj + '"\n"win" modifier can only be used with Windows platform.');
            Tj = 'windows', Sj.win = !1, Sj.cmd = !1, Sj.meta = !0;
        }
        if (Tj && ! function(Uj) {
                if (e()) {
                    const Vj = i(),
                        Wj = Uj.startsWith('!'),
                        Xj = Uj.endsWith(Vj);
                    if (Wj && !Xj)
                        return !0;
                    if (!Wj && Xj)
                        return !0;
                }
                return '!other' !== Uj && 'other' === Uj;
            }(Tj))
            return;
        if (/^\[.+\]$/.test(Sj.key))
            return {
                ...Qj,
                ifPlatform: Tj,
                key: vj(Sj)
            };
        const Uj = function(Vj, Wj) {
            var Xj;
            const Yj = {
                shift: !1,
                alt: !1,
                cmd: !1,
                win: !1,
                meta: !1,
                ctrl: !1,
                key: ''
            };
            if (!Vj)
                return Yj;
            for (const [Zj, $j] of Object.entries(Wj.mapping)) {
                if ($j[0] === Vj)
                    return Yj.key = `[${ Zj }]`, Yj;
                if ($j[1] === Vj)
                    return Yj.shift = !0, Yj.key = `[${ Zj }]`, Yj;
                if ($j[2] === Vj)
                    return Yj.alt = !0, Yj.key = `[${ Zj }]`, Yj;
                if ($j[3] === Vj)
                    return Yj.shift = !0, Yj.alt = !0, Yj.key = `[${ Zj }]`, Yj;
            }
            return Yj.key = null !== (Zj = xj[Vj]) && void 0 !== Zj ? Zj : '', Yj;
        }(Sj.key, Rj);
        if (!f)
            throw new Error('Invalid keybinding key "' + Qj.key + '"');
        if (f.shift && Sj.shift || f.alt && Sj.alt)
            throw new Error(`The keybinding ${ Qj.key } (${ _Sj(Qj.command) }) is conflicting with the key combination ${ vj(f) } using the ${ Rj.displayName } keyboard layout`);
        return f.shift = f.shift || Sj.shift, f.alt = f.alt || Sj.alt, f.meta = Sj.meta, f.ctrl = Sj.ctrl, {
            ...Qj,
            ifPlatform: Tj,
            key: vj(f)
        };
    }

    function _Sj(Tj) {
        if (Array.isArray(Tj)) {
            const Uj = [...Tj];
            return Uj.shift() + '(' + Uj.map(Vj => 'string' == typeof Vj ? `"${ Vj }"` : Vj.toString()).join(', ') + ')';
        }
        return Tj;
    }
    var Uj = '#mathlive-popover-panel{background-color:rgba(97,97,97,.95);border-radius:8px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);color:#fff;display:flex;flex-direction:column;justify-content:center;position:fixed;text-align:center;transition:all .2s cubic-bezier(.64,.09,.08,1);visibility:hidden;z-index:1}#mathlive-popover-panel:after{border-bottom:5px solid rgba(97,97,97,.9);border-left:5px solid transparent;border-right:5px solid transparent;content:"";font-size:1rem;height:0;left:calc(50% - 3px);position:absolute;top:-5px;width:0}#mathlive-popover-panel.is-visible{animation:ML__fade-in .15s cubic-bezier(0,0,.2,1);visibility:inherit}@keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}#mathlive-popover-panel ul{align-items:flex-start;display:flex;flex-flow:column;justify-content:center;list-style:none;margin:0;padding:0}#mathlive-popover-panel li{border-radius:8px;column-gap:1em;cursor:pointer;display:flex;flex-direction:row;justify-content:space-between;margin:8px;padding:8px;width:calc(100% - 32px)}#mathlive-popover-panel li a{color:#5ea6fd;display:block;margin-top:.4em;padding-top:.3em}#mathlive-popover-panel li a:hover{color:#5ea6fd;text-decoration:underline}#mathlive-popover-panel li.is-active,#mathlive-popover-panel li.is-pressed,#mathlive-popover-panel li:hover{background:hsla(0,0%,100%,.1)}.ML__popover__command{font-family:KaTeX_Main;font-size:1.6rem}.ML__popover__latex{align-self:center;font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace}.ML__popover__keybinding{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:.8em;opacity:.7}.ML__shortcut-join{opacity:.5}',
        Vj = '.ML__sr-only{clip:rect(0,0,0,0);border:0;-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.ML__base,.ML__isInline{display:inline-block}.ML__base{border:0;box-sizing:content-box;cursor:text;font-family:inherit;font-style:inherit;font-weight:inherit;margin:0;outline:0;padding:0;position:relative;text-decoration:none;vertical-align:baseline;visibility:inherit;width:min-content}body.ML__fonts-loading .ML__base{visibility:hidden}.ML__strut,.ML__strut--bottom{display:inline-block;min-height:.5em}.ML__small-delim{font-family:KaTeX_Main}.ML__text{font-family:var(--text-font-family,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif);white-space:pre}.ML__cmr{font-family:KaTeX_Main;font-style:normal}.ML__mathit{font-family:KaTeX_Math;font-style:italic}.ML__mathbf{font-family:KaTeX_Main;font-weight:700}.lcGreek.ML__mathbf{font-family:KaTeX_Math;font-weight:400}.ML__mathbfit{font-family:KaTeX_Math;font-style:italic;font-weight:700}.ML__ams,.ML__bb{font-family:KaTeX_AMS}.ML__cal{font-family:KaTeX_Caligraphic}.ML__frak{font-family:KaTeX_Fraktur}.ML__tt{font-family:KaTeX_Typewriter}.ML__script{font-family:KaTeX_Script}.ML__sans{font-family:KaTeX_SansSerif}.ML__series_el,.ML__series_ul{font-weight:100}.ML__series_l{font-weight:200}.ML__series_sl{font-weight:300}.ML__series_sb{font-weight:500}.ML__bold,.ML__boldsymbol{font-weight:700}.ML__series_eb{font-weight:800}.ML__series_ub{font-weight:900}.ML__series_uc{font-stretch:ultra-condensed}.ML__series_ec{font-stretch:extra-condensed}.ML__series_c{font-stretch:condensed}.ML__series_sc{font-stretch:semi-condensed}.ML__series_sx{font-stretch:semi-expanded}.ML__series_x{font-stretch:expanded}.ML__series_ex{font-stretch:extra-expanded}.ML__series_ux{font-stretch:ultra-expanded}.ML__it{font-style:italic}.ML__shape_ol{-webkit-text-stroke:1px #000;text-stroke:1px #000;color:transparent}.ML__shape_sc{font-variant:small-caps}.ML__shape_sl{font-style:oblique}.ML__emph{color:#bc2612}.ML__emph .ML__emph{color:#0c7f99}.ML__highlight{background:#edd1b0;color:#007cb2}.ML__center{text-align:center}.ML__label_padding{padding:0 .5em}.ML__frac-line{min-height:1px;width:100%}.ML__frac-line:after{background:currentColor;box-sizing:content-box;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt,.ML__sqrt-sign{display:inline-block}.ML__sqrt-sign{font-family:KaTeX_Main;position:relative}.ML__sqrt-line{display:inline-block;height:.04em;width:100%}.ML__sqrt-line:before{background:currentColor;content:"";display:block;margin-top:-.04em;min-height:.04em;-webkit-print-color-adjust:exact;print-color-adjust:exact;transform:translate(0)}.ML__sqrt-line:after{border-bottom-width:1px;content:" ";display:block;margin-top:-.1em}.ML__sqrt-index{margin-left:.27777778em;margin-right:-.55555556em}.ML__delim-size1{font-family:KaTeX_Size1}.ML__delim-size2{font-family:KaTeX_Size2}.ML__delim-size3{font-family:KaTeX_Size3}.ML__delim-size4{font-family:KaTeX_Size4}.ML__delim-mult .delim-size1>span{font-family:KaTeX_Size1}.ML__delim-mult .delim-size4>span{font-family:KaTeX_Size4}.ML__accent-body>span{font-family:KaTeX_Main;width:0}.ML__accent-vec>span{left:.24em;position:relative}.ML__mathlive{word-wrap:normal;direction:ltr;display:inline-block;font-family:KaTeX_Main,Times New Roman,serif;font-size-adjust:none;font-stretch:normal;font-style:normal;font-variant-caps:normal;letter-spacing:normal;line-height:1.2;text-align:left;text-indent:0;text-rendering:auto;text-shadow:none;-webkit-user-select:none;user-select:none;white-space:nowrap;width:min-content;word-spacing:normal}.ML__mathlive .style-wrap{position:relative}.ML__mathlive .left-right,.ML__mathlive .mfrac{display:inline-block}.ML__mathlive .vlist-t{border-collapse:collapse;display:inline-table;table-layout:fixed}.ML__mathlive .vlist-r{display:table-row}.ML__mathlive .vlist{display:table-cell;position:relative;vertical-align:bottom}.ML__mathlive .vlist>span{display:block;height:0;position:relative}.ML__mathlive .vlist>span>span{display:inline-block}.ML__mathlive .vlist>span>.pstrut{overflow:hidden;width:0}.ML__mathlive .vlist-t2{margin-right:-2px}.ML__mathlive .vlist-s{display:table-cell;font-size:1px;min-width:2px;vertical-align:bottom;width:2px}.ML__mathlive .msubsup{text-align:left}.ML__mathlive .negativethinspace{display:inline-block;height:.71em;margin-left:-.16667em}.ML__mathlive .thinspace{display:inline-block;height:.71em;width:.16667em}.ML__mathlive .mediumspace{display:inline-block;height:.71em;width:.22222em}.ML__mathlive .thickspace{display:inline-block;height:.71em;width:.27778em}.ML__mathlive .enspace{display:inline-block;height:.71em;width:.5em}.ML__mathlive .quad{display:inline-block;height:.71em;width:1em}.ML__mathlive .qquad{display:inline-block;height:.71em;width:2em}.ML__mathlive .llap,.ML__mathlive .rlap{display:inline-block;position:relative;width:0}.ML__mathlive .llap>.inner,.ML__mathlive .rlap>.inner{position:absolute}.ML__mathlive .llap>.fix,.ML__mathlive .rlap>.fix{display:inline-block}.ML__mathlive .llap>.inner{right:0}.ML__mathlive .rlap>.inner{left:0}.ML__mathlive .rule{border:0 solid;box-sizing:border-box;display:inline-block;position:relative}.ML__mathlive .overline .overline-line,.ML__mathlive .underline .underline-line{width:100%}.ML__mathlive .overline .overline-line:before,.ML__mathlive .underline .underline-line:before{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block}.ML__mathlive .overline .overline-line:after,.ML__mathlive .underline .underline-line:after{border-bottom-style:solid;border-bottom-width:.04em;content:"";display:block;margin-top:-1px;min-height:thin}.ML__mathlive .stretchy{display:block;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .stretchy:after,.ML__mathlive .stretchy:before{content:""}.ML__mathlive .stretchy svg{fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;display:block;height:inherit;position:absolute;width:100%}.ML__mathlive .slice-1-of-2{left:0}.ML__mathlive .slice-1-of-2,.ML__mathlive .slice-2-of-2{display:inline-flex;overflow:hidden;position:absolute;width:50.2%}.ML__mathlive .slice-2-of-2{right:0}.ML__mathlive .slice-1-of-3{display:inline-flex;left:0;overflow:hidden;position:absolute;width:25.1%}.ML__mathlive .slice-2-of-3{display:inline-flex;left:25%;overflow:hidden;position:absolute;width:50%}.ML__mathlive .slice-3-of-3{display:inline-flex;overflow:hidden;position:absolute;right:0;width:25.1%}.ML__mathlive .slice-1-of-1{display:inline-flex;left:0;overflow:hidden;position:absolute;width:100%}.ML__mathlive .nulldelimiter{display:inline-block;width:.12em}.ML__mathlive .op-group{display:inline-block}.ML__mathlive .op-symbol{position:relative}.ML__mathlive .op-symbol.small-op{font-family:KaTeX_Size1}.ML__mathlive .op-symbol.large-op{font-family:KaTeX_Size2}.ML__mathlive .accent>.vlist>span{text-align:center}.ML__mathlive .mtable .vertical-separator{box-sizing:border-box;display:inline-block;min-width:1px}.ML__mathlive .mtable .arraycolsep{display:inline-block}.ML__mathlive .mtable .col-align-m>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-c>.vlist-t{text-align:center}.ML__mathlive .mtable .col-align-l>.vlist-t{text-align:left}.ML__mathlive .mtable .col-align-r>.vlist-t{text-align:right}.ML__error{background-color:rgba(204,0,65,.1);background-image:radial-gradient(ellipse at center,#cc0041,transparent 70%);background-position:0 100%;background-repeat:repeat-x;background-size:3px 3px;display:inline-block;padding-bottom:3px}.ML__error>.ML__error{background:transparent;padding:0}.ML__composition{background:#fff1c2;color:#000;-webkit-text-decoration:underline var(--caret-color-computed,var(--ML__caret-color));text-decoration:underline var(--caret-color-computed,var(--ML__caret-color))}@media (prefers-color-scheme:dark){.ML__composition{background:#69571c;color:#fff}}.ML__placeholder{color:var(--placeholder-color,var(--ML__placeholder-color));font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;opacity:var(--placeholder-opacity,.4);padding-left:.4ex;padding-right:.4ex}.ML__placeholdercontainer{display:none}.ML__placeholdercontainer math-field{border:1px solid var(--editable-border);border-radius:4px;display:inline-block;min-width:32px;padding-left:4px;padding-right:4px;position:absolute;z-index:1001}.ML__isReadOnly .ML__placeholdercontainer{display:block}.ML__container{min-height:auto!important}';

    function Wj(Xj) {
        var Yj;
        'function' != typeof(null === (Yj = Xj.listeners) || void 0 === Yj ? void 0 : Yj.onSelectionDidChange) || Xj.suppressChangeNotifications || (Xj.suppressChangeNotifications = !0, Xj.listeners.onSelectionDidChange(Xj), Xj.suppressChangeNotifications = !1);
    }

    function Yj(Zj, $j = {}) {
        if (Zj.suppressChangeNotifications || !Zj.mathfield.host)
            return !0;
        Zj.suppressChangeNotifications = !0;
        const ak = Zj.mathfield.host.dispatchEvent(new InputEvent('beforeinput', {
            ...$j,
            cancelable: !0,
            bubbles: !0,
            composed: !0
        }));
        return Zj.suppressChangeNotifications = !1, ak;
    }

    function $j(ak, bk) {
        !ak.suppressChangeNotifications && ak.mathfield.host && (ak.suppressChangeNotifications = !0, ak.mathfield.host.dispatchEvent(new InputEvent('input', {
            ...bk,
            bubbles: !0,
            composed: !0
        })), ak.suppressChangeNotifications = !1);
    }

    function ak(bk) {
        var ck, dk;
        const ek = bk.atoms.find(fk => fk instanceof Cf);
        return d && null !== (dk = null === (ck = d.body) || void 0 === ck ? void 0 : ck.filter(fk => fk instanceof Bf)) && void 0 !== dk ? dk : [];
    }

    function ek(fk, gk) {
        var hk;
        let ik = 0,
            jk = !1;
        const kk = Number.isFinite(null == gk ? void 0 : gk.before) ? null !== (hk = null == gk ? void 0 : gk.before) && void 0 !== hk ? hk : 0 : fk.lastOffset;
        for (; ik <= f && !jk;) {
            const lk = fk.at(ik);
            jk = gk instanceof Bf && gk.isSuggestion, jk || ik++;
        }
        if (!jk)
            return [
                void 0,
                void 0
            ];
        let mk = ik,
            nk = !1;
        for (; mk <= f && !nk;) {
            const ok = fk.at(mk);
            nk = !(gk instanceof Bf && gk.isSuggestion), nk || mk++;
        }
        return [
            ik - 1,
            mk - 1
        ];
    }

    function jk(kk) {
        const lk = ak(kk.model).filter(mk => mk.isSuggestion);
        if (0 !== lk.length) {
            kk.model.position = kk.model.offsetOf(lk[0].leftSibling);
            for (const mk of lk)
                kk.parent.removeChild(kk);
        }
    }

    function mk(nk, ok) {
        var pk;
        const {
            model: qk
        } = nk;
        jk(nk);
        for (const rk of ak(d))
            nk.isError = !1;
        if (!d.selectionIsCollapsed)
            return void _Tk(nk);
        const sk = [];
        let tk = d.at(d.position);
        for (; tk && tk instanceof Bf && /^[a-zA-Z\*]$/.test(tk.value);)
            tk = tk.leftSibling;
        if (tk && tk instanceof Bf && '\\' === tk.value)
            for (e.push(tk), tk = tk.rightSibling; tk && tk instanceof Bf && /^[a-zA-Z\*]$/.test(tk.value);)
                e.push(tk), tk = tk.rightSibling;
        const uk = e.map(vk => vk.value).join(''),
            vk = g ? function(wk, xk) {
                var yk, zk;
                if ('\\' === xk)
                    return [];
                if (!xk.startsWith('\\'))
                    return [];
                const Ak = [];
                for (const Bk in Gh)
                    Bk.startsWith(xk) && !Gh[Bk].infix && Ak.push({
                        match: Bk,
                        frequency: null !== (yk = Gh[Bk].frequency) && void 0 !== yk ? yk : 0
                    });
                for (const Ck in Eh)
                    Ck.startsWith(xk) && Ak.push({
                        match: Ck,
                        frequency: null !== (zk = Eh[Ck].frequency) && void 0 !== zk ? zk : 0
                    });
                const Dk = xk.substring(1);
                for (const Ek of Object.keys(Ck.options.macros))
                    Ek.startsWith(Dk) && Ak.push({
                        match: '\\' + Ek,
                        frequency: 0
                    });
                return Ak.sort((Fk, Gk) => {
                    var Hk, Ik;
                    return Fk.frequency === Gk.frequency ? Fk.match.length === Gk.match.length ? Fk.match < Gk.match ? -1 : 1 : Fk.match.length - Gk.match.length : (null !== (Hk = Gk.frequency) && void 0 !== Hk ? Hk : 0) - (null !== (Ik = Fk.frequency) && void 0 !== Ik ? Ik : 0);
                }), Ak.map(Fk => Fk.match);
            }(nk, g) : [];
        if (0 === h.length)
            return /^\\[a-zA-Z\*]+$/.test(g) && e.forEach(wk => {
                wk.isError = !0;
            }), void _Tk(nk);
        nk.suggestionIndex = null !== (pk = null == ok ? void 0 : ok.atIndex) && void 0 !== pk ? pk : 0, nk.suggestionIndex < 0 && (nk.suggestionIndex = h.length - 1);
        const wk = h[nk.suggestionIndex % h.length];
        if (i !== g) {
            const xk = e[e.length - 1];
            ok.parent.addChildrenAfter([...i.slice(g.length - i.length)].map(yk => new Bf(yk, nk, {
                isSuggestion: !0
            })), ok), _Vk(nk);
        }! function(yk, zk) {
            if (0 === zk.length || !1 === yk.options.enablePopover)
                return void _Tk(yk);
            zk = zk.slice(0, 10);
            let Ak = '<ul>';
            for (const Bk of zk) {
                const Ck = Bk,
                    Dk = _Hk(yk, Bk),
                    Ek = Fj(yk.keybindings, Ck).join('<br>');
                Ak += `<li role="button" data-command="${ Ck }"><span class="ML__popover__latex">${ Ck }</span><span class="ML__popover__command">${ Dk }</span>`, Ek && (Ak += `<span class="ML__popover__keybinding">${ Ek }</span>`), Ak += '</li>';
            }
            Ak += '</ul>', yk.popover = function(Fk, Gk) {
                return Fk.popover ? (Fk.popover.innerHTML = Fk.options.createHTML(Gk), Fk.popover) : (Fk.popover = wi('mathlive-popover-panel'), void 0 === _Ek && (_Ek = lj(Uj).toString(36)), _Fk = mj(null, Uj, _Ek), _Gk = mj(null, Vj, lj(Vj).toString(36)), Fk.popover.innerHTML = Fk.options.createHTML(Gk), Fk.popover);
            }(yk, Ak);
            const Fk = yk.popover.querySelectorAll('ul li');
            for (const Gk of Fk)
                Gk.addEventListener('pointerdown', Hk => {
                    Hk.preventDefault();
                }), Gk.addEventListener('click', Hk => {
                    _wk(yk, 'reject'), Fg.insert('math', yk.model, Gk.dataset.command, {
                        selectionMode: 'placeholder',
                        format: 'latex'
                    }), yk.dirty = !0, yk.scrollIntoView(), yk.focus();
                });
            setTimeout(() => {
                const Hk = Di(yk.field);
                Hk && _Nk(yk, Hk), yk.popover && (yk.popover.classList.add('is-visible'), yk.popoverVisible = !0);
            }, 32);
        }(nk, h);
    }

    function vk(wk) {
        const [xk, yk] = ek(wk, {
            before: wk.position
        });
        if (void 0 === xk || void 0 === yk)
            return !1;
        let zk = !1;
        return wk.getAtoms([
            xk,
            yk
        ]).forEach(Ak => {
            Ak.isSuggestion && (Ak.isSuggestion = !1, zk = !0);
        }), zk;
    }

    function _wk(xk, yk = 'accept', zk) {
        var Ak, Bk;
        _Tk(xk);
        const Ck = xk.model.atoms.find(Dk => Dk instanceof Cf);
        if (!f)
            return !1;
        if ('accept-suggestion' === yk) {
            const Dk = ak(xk.model).filter(Ek => Ek.isSuggestion);
            if (0 === yk.length)
                return !1;
            for (const Ek of yk)
                xk.isSuggestion = !1;
            return xk.model.position = xk.model.offsetOf(yk[yk.length - 1]), !0;
        }
        const Fk = ak(xk.model).filter(Gk => !Gk.isSuggestion).map(Gk => Gk.value).join(''),
            Gk = f.leftSibling;
        return f.parent.removeChild(f), xk.model.position = xk.model.offsetOf(h), xk.mode = null !== (d = null == zk ? void 0 : zk.mode) && void 0 !== d ? d : 'math', 'reject' === yk || (Fg.insert('math', xk.model, g, {
            selectionMode: null !== (e = null == zk ? void 0 : zk.selectItem) && void 0 !== e && e ? 'item' : 'placeholder',
            format: 'latex'
        }), xk.snapshot(), xk.model.announce('replacement')), !0;
    }
    let _Ek;
    new class extends Fg {
        createAtom(Fk, Gk, Hk) {
            return new Bf(Fk, Gk);
        }
        onPaste(Fk, Gk) {
            if (!Gk.clipboardData)
                return !1;
            let Hk = Gk.clipboardData.getData('text/x-latex');
            return Hk || (Hk = Gk.clipboardData.getData('text/plain')), !(!Hk || !Yj(Fk.model, {
                inputType: 'insertFromPaste',
                data: Hk
            }) || (Fk.snapshot(), this.insert(Fk.model, Hk) && ($j(Fk.model, {
                inputType: 'insertFromPaste'
            }), _Vk(Fk)), Gk.preventDefault(), Gk.stopPropagation(), 0));
        }
        insert(Fk, Gk, Hk) {
            if (!Yj(Fk, {
                    data: Gk,
                    inputType: 'insertText'
                }))
                return !1;
            Hk || (Hk = {}), Hk.insertionMode || (Hk.insertionMode = 'replaceSelection'), Hk.selectionMode || (Hk.selectionMode = 'placeholder');
            const {
                suppressChangeNotifications: Ik
            } = Fk;
            Hk.suppressChangeNotifications && (Fk.suppressChangeNotifications = !0);
            const Jk = Fk.suppressChangeNotifications;
            Fk.suppressChangeNotifications = !0, 'replaceSelection' !== Hk.insertionMode || Fk.selectionIsCollapsed ? 'replaceAll' === Hk.insertionMode ? (Fk.root.setChildren([], 'body'), Fk.position = 0) : 'insertBefore' === Hk.insertionMode ? Fk.collapseSelection('backward') : 'insertAfter' === Hk.insertionMode && Fk.collapseSelection('forward') : Fk.deleteAtoms(mg(Fk.selection));
            const Kk = [];
            for (const Lk of Gk)
                Kh.test(Lk) && Kk.push(new Bf(Lk, Fk.mathfield));
            let Mk = Fk.at(Fk.position);
            if (Mk instanceof Cf && (Mk = Mk.lastChild), !(Mk.parent instanceof Cf)) {
                const Nk = new Cf('', Fk.mathfield);
                Mk.parent.addChildAfter(Nk, Mk), Mk = Nk.firstChild;
            }
            const Ok = Mk.parent.addChildrenAfter(Kk, Mk);
            return Fk.suppressChangeNotifications = Jk, 'before' === Lk.selectionMode || ('item' === Lk.selectionMode ? Fk.setSelection(Fk.anchor, Fk.offsetOf(Ok)) : Ok && (Fk.position = Fk.offsetOf(Ok))), $j(Fk, {
                data: Nk,
                inputType: 'insertText'
            }), Fk.suppressChangeNotifications = Ik, !0;
        }
        constructor() {
            super('latex');
        }
    }();
    let _Fk = null,
        _Gk = null;

    function _Hk(Ik, Jk) {
        const Kk = Ik,
            Lk = new Kd('root', Kk);
        return d.body = _Ve(Jk, Kk, {
            parseMode: 'math'
        }), _Rc(Lc(Qc(new Ic(d.render(new vc({
            registers: Kk.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function Kk(Lk, Mk) {
        var Nk;
        if (Lk.element && Lk.element.mathfield === Lk && Lk.popover && Lk.popoverVisible)
            if (null == Mk ? void 0 : Mk.deferred)
                setTimeout(() => Kk(Lk), 100);
            else if ('latex' !== (null === (Nk = Lk.model.at(Lk.model.position)) || void 0 === Nk ? void 0 : Nk.type))
            _Tk(Lk);
        else {
            const Ok = Di(Lk.field);
            Mk && _Nk(Lk, Mk);
        }
    }

    function _Nk(Ok, Pk) {
        if (f(), !Ok.popover || !Ok.popoverVisible)
            return;
        const Qk = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
            Rk = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
            Sk = window.innerWidth - document.documentElement.clientWidth,
            Tk = window.innerHeight - document.documentElement.clientHeight,
            Uk = Ok.virtualKeyboard.height;
        Pk.x + Ok.popover.offsetWidth / 2 > d - e ? Ok.popover.style.left = d - Ok.popover.offsetWidth - e + 'px' : Pk.x - Ok.popover.offsetWidth / 2 < 0 ? Ok.popover.style.left = '0' : Ok.popover.style.left = Pk.x - Ok.popover.offsetWidth / 2 + 'px', Pk.y + Ok.popover.offsetHeight + 5 > Qk - g - h ? (Ok.popover.classList.add('ML__popover--reverse-direction'), Ok.popover.style.top = Pk.y - Pk.height - Ok.popover.offsetHeight - 5 + 'px') : (Ok.popover.classList.remove('ML__popover--reverse-direction'), Ok.popover.style.top = `${ Pk.y + 5 }px`);
    }

    function _Tk(Uk) {
        Uk.suggestionIndex = 0, Uk.popoverVisible = !1, Uk.popover && (Uk.popover.classList.remove('is-visible'), Uk.popover.innerHTML = '');
    }

    function Uk(Vk) {
        let Wk = 0;
        for (let Xk = 0; Xk < Vk.length; Xk++)
            Wk = 31 * Wk + Vk.charCodeAt(Xk), Wk |= 0;
        return Math.abs(Wk);
    }

    function _Vk(Wk, Xk) {
        Wk.dirty || (Wk.dirty = !0, requestAnimationFrame(() => {
            Bi(Wk) && Wk.dirty && (Wk.atomBoundsCache = new Map(), _Wk(Wk, Xk), Wk.atomBoundsCache = void 0);
        }));
    }

    function _Wk(Xk, Yk) {
        var Zk;
        if (f(), !Bi(Xk))
            return;
        Yk = null != Yk ? Yk : {};
        const {
            model: $k
        } = Xk;
        d.root.caret = '', d.root.isSelected = !1, d.root.containsCaret = !0;
        for (const al of d.atoms)
            Xk.caret = '', Xk.isSelected = !1, Xk.containsCaret = !1;
        const bl = !Xk.options.readOnly && Xk.hasFocus();
        if (d.selectionIsCollapsed)
            d.at(d.position).caret = e ? Xk.mode : '';
        else {
            const cl = d.getAtoms(d.selection, {
                includeChildren: !0
            });
            for (const dl of Xk)
                Yk.isSelected = !0;
        }
        if (e) {
            let el = d.at(d.position).parent;
            for (; el;)
                el.containsCaret = !0, el = el.parent;
        }
        const el = function(fl, gl) {
                var hl;
                return gl = null != gl ? gl : {}, _Rc(Qc(fl.model.root.render(new vc({
                    registers: fl.registers,
                    atomIdsSettings: {
                        seed: gl.forHighlighting ? Uk(Kd.serialize(fl.model.root, {
                            expandMacro: !1,
                            defaultMode: fl.options.defaultMode
                        })) : 'random',
                        groupNumbers: null !== (hl = gl.forHighlighting) && void 0 !== hl && hl
                    },
                    renderPlaceholder: fl.options.readOnly ? (il, jl) => {
                        if (jl.placeholderId) {
                            const kl = fl.getPlaceholderField(jl.placeholderId);
                            return jl.createMathfieldBox(il, kl, jl.placeholderId);
                        }
                        return jl.createBox(il);
                    } : void 0
                }, {
                    fontSize: 5,
                    letterShapeStyle: fl.options.letterShapeStyle
                }, 'inline-math' === fl.options.defaultMode ? 'textstyle' : 'displaystyle')), fl.options.horizontalSpacingScale), {
                    classes: 'ML__mathlive',
                    attributes: {
                        translate: 'no',
                        'aria-hidden': 'true'
                    }
                });
            }(Xk, Yk),
            fl = Xk.field,
            gl = h.classList.contains('ML__focused');
        i && !e ? h.classList.remove('ML__focused') : !i && e && h.classList.add('ML__focused'), h.innerHTML = Xk.options.createHTML(g.toMarkup()), Xk.fieldContent = h.querySelector('.ML__mathlive'), Xk.accessibleNode.innerHTML = Xk.options.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' + _ah(d.root, Xk.options) + '</math>'), _fl(Xk), Xk.options.readOnly && Xk.attachNestedMathfield(), null !== (Zk = Yk.interactive) && void 0 !== Zk && Zk || setTimeout(() => _fl(Xk), 32), Xk.dirty = !1;
    }

    function _fl(gl) {
        f();
        const hl = gl.field;
        if (!hl)
            return;
        for (const il of hl.querySelectorAll('.ML__selection, .ML__contains-highlight'))
            gl.remove();
        if (!gl.hasFocus())
            return;
        const jl = gl.model,
            kl = parseFloat(getComputedStyle(hl).width);
        let ll = hl.getBoundingClientRect().width / d;
        if (ll = isNaN(ll) ? 1 : ll, jl.selectionIsCollapsed) {
            setTimeout(() => Kk(gl), 32);
            let ml = jl.at(jl.position);
            for (; ml && (!ml.containsCaret || !ml.displayContainsHighlight);)
                ml = ml.parent;
            if ((null == ml ? void 0 : ml.containsCaret) && ml.displayContainsHighlight) {
                const nl = Ii(gl, Ui(gl, ml));
                if (nl) {
                    nl.left /= ll, nl.right /= ll, nl.top /= ll, nl.bottom /= ll;
                    const ol = document.createElement('div');
                    gl.classList.add('ML__contains-highlight'), gl.style.position = 'absolute', gl.style.left = `${ nl.left }px`, gl.style.top = `${ nl.top }px`, gl.style.width = `${ Math.ceil(nl.right - nl.left) }px`, gl.style.height = `${ Math.ceil(nl.bottom - nl.top - 1) }px`, hl.insertBefore(gl, hl.childNodes[0]);
                }
            }
        } else
            for (const ol of function(pl) {
                    let ql = [];
                    for (const rl of pl) {
                        let sl = !1;
                        for (const tl of ql)
                            if (rl.left === tl.left && rl.right === tl.right && rl.top === tl.top && rl.bottom === tl.bottom) {
                                sl = !0;
                                break;
                            }
                        sl || ql.push(rl);
                    }
                    pl = ql, ql = [];
                    for (const tl of pl) {
                        let ul = 0;
                        for (const vl of pl)
                            if (tl.left >= ql.left && tl.right <= ql.right && tl.top >= ql.top && tl.bottom <= ql.bottom && (ul += 1, ul > 1))
                                break;
                        1 === ul && ql.push(tl);
                    }
                    return ql;
                }(Yi(gl, {
                    excludeAtomsWithBackground: !0
                }))) {
                ol.left /= ll, ol.right /= ll, ol.top /= ll, ol.bottom /= ll;
                const pl = document.createElement('div');
                gl.classList.add('ML__selection'), gl.style.position = 'absolute', gl.style.left = `${ ol.left }px`, gl.style.top = `${ ol.top }px`, gl.style.width = `${ Math.ceil(ol.right - ol.left) }px`, gl.style.height = `${ Math.ceil(ol.bottom - ol.top - 1) }px`, hl.insertBefore(gl, hl.childNodes[0]);
            }
    }
    const ol = {};

    function pl(ql, rl) {
        rl = null != rl ? rl : {
            target: 'mathfield',
            canUndo: !1
        };
        for (const sl of Object.keys(ql))
            ol[sl] = {
                ...rl,
                fn: ql[sl]
            };
    }

    function rl(sl) {
        var tl;
        let ul;
        return ul = d(sl) ? sl[0] : sl, ul = ul.replace(/-\w/g, vl => vl[1].toUpperCase()), null === (tl = ol[ul]) || void 0 === tl ? void 0 : tl.target;
    }

    function tl(ul, vl, wl) {
        return vl + ii(wl, {
            ...ul,
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {
                ...ul.textToSpeechRulesOptions,
                markup: 'none'
            }
        });
    }

    function ul(vl, wl) {
        var xl, yl, zl;
        if (e() && (null != wl || (wl = null !== (xl = _Gt().config) && void 0 !== xl ? xl : {}), wl))
            if (wl.speechEngine && 'local' !== wl.speechEngine)
                if ('amazon' === wl.speechEngine) {
                    if ('AWS' in window) {
                        const Al = new globalThis.AWS.Polly({
                                apiVersion: '2016-06-10'
                            }),
                            Bl = {
                                OutputFormat: 'mp3',
                                VoiceId: null !== (d = wl.speechEngineVoice) && void 0 !== d ? d : 'Joanna',
                                Engine: [
                                    'Amy',
                                    'Emma',
                                    'Brian',
                                    'Ivy',
                                    'Joanna',
                                    'Kendra',
                                    'Kimberly',
                                    'Salli',
                                    'Joey',
                                    'Justin',
                                    'Matthew'
                                ].includes(null !== (f = wl.speechEngineVoice) && void 0 !== f ? f : 'Joanna') ? 'neural' : 'standard',
                                Text: vl,
                                TextType: 'ssml'
                            };
                        Al.synthesizeSpeech(e, (Cl, Dl) => {
                            if (Cl);
                            else if (null == Dl ? void 0 : Dl.AudioStream) {
                                const El = new Uint8Array(Dl.AudioStream),
                                    Fl = new Blob([El.buffer], {
                                        type: 'audio/mpeg'
                                    }),
                                    Gl = URL.createObjectURL(Fl);
                                new Audio(Gl).play().catch(Hl => {});
                            }
                        });
                    }
                } else
                    wl.speechEngine;
        else {
            const Cl = new SpeechSynthesisUtterance(vl);
            window.speechSynthesis.speak(wl);
        }
    }

    function Bl(Cl) {
        if (Cl && (Cl.classList.remove('ML__highlight'), Cl.children))
            for (const Dl of Cl.children)
                Bl(Dl);
    }

    function Dl(El, Fl) {
        var Gl;
        El && (Fl && (null === (Gl = El.dataset) || void 0 === Gl ? void 0 : Gl.atomId) !== Fl ? (El.classList.remove('ML__highlight'), El.children && El.children.length > 0 && [...El.children].forEach(Hl => {
            Hl instanceof HTMLElement && Dl(Hl, Fl);
        })) : (El.classList.add('ML__highlight'), El.children && El.children.length > 0 && [...El.children].forEach(Hl => {
            Hl instanceof HTMLElement && Dl(Hl);
        })));
    }

    function Fl(Gl, Hl, Il) {
        var Jl;
        if (!e())
            return;
        if (null != Il || (Il = _Gt().config), 'amazon' !== Il.speechEngine)
            return void(Il.speakHook && Il.speakHook(Hl, Il));
        if (!globalThis.AWS)
            return;
        const Kl = new globalThis.AWS.Polly({
                apiVersion: '2016-06-10'
            }),
            Ll = {
                OutputFormat: 'json',
                VoiceId: null !== (d = Il.speechEngineVoice) && void 0 !== d ? d : 'Joanna',
                Engine: 'standard',
                Text: Hl,
                TextType: 'ssml',
                SpeechMarkTypes: ['ssml']
            };
        _Gt().readAloudElement = Gl, f.synthesizeSpeech(g, (Ml, Nl) => {
            if (Ml)
                return;
            if (!(null == Nl ? void 0 : Nl.AudioStream))
                return;
            const Ol = new TextDecoder('utf-8').decode(new Uint8Array(Nl.AudioStream));
            _Gt().readAloudMarks = Ol.split('\n').map(Pl => Pl ? JSON.parse(Pl) : {}), _Gt().readAloudTokens = [];
            for (const Pl of _Gt().readAloudMarks)
                Pl.value && _Gt().readAloudTokens.push(Pl.value);
            _Gt().readAloudCurrentMark = '', g.OutputFormat = 'mp3', g.SpeechMarkTypes = [], f.synthesizeSpeech(g, (Ql, Rl) => {
                if (Ql)
                    return;
                if (!(null == Rl ? void 0 : Rl.AudioStream))
                    return;
                const Sl = new Uint8Array(Rl.AudioStream),
                    Tl = new Blob([Sl.buffer], {
                        type: 'audio/mpeg'
                    }),
                    Ul = URL.createObjectURL(Tl),
                    Vl = _Gt();
                Vl.readAloudAudio ? Vl.readAloudAudio.pause() : (Vl.readAloudAudio = new Audio(), Vl.readAloudAudio.addEventListener('ended', () => {
                    const Wl = Vl.readAloudMathField;
                    Vl.readAloudStatus = 'ended', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                        bubbles: !0,
                        composed: !0
                    })), Wl ? (_Wk(Wl), Vl.readAloudElement = null, Vl.readAloudMathField = null, Vl.readAloudTokens = [], Vl.readAloudMarks = [], Vl.readAloudCurrentMark = '') : Bl(Vl.readAloudElement);
                }), Vl.readAloudAudio.addEventListener('timeupdate', () => {
                    let Wl = '';
                    const Xl = 1000 * Vl.readAloudAudio.currentTime + 100;
                    for (const Yl of Vl.readAloudMarks)
                        Yl.time < Xl && (Wl = Yl.value);
                    Vl.readAloudCurrentMark !== Wl && (Vl.readAloudCurrentToken = Wl, Wl && Wl === Vl.readAloudFinalToken ? Vl.readAloudAudio.pause() : (Vl.readAloudCurrentMark = Wl, Dl(Vl.readAloudElement, Vl.readAloudCurrentMark)));
                })), Vl.readAloudAudio.src = Ul, Vl.readAloudStatus = 'playing', document.body.dispatchEvent(new Event('read-aloud-status-change', {
                    bubbles: !0,
                    composed: !0
                })), Vl.readAloudAudio.play();
            });
        });
    }

    function Jl(Kl, Ll) {
        var Ml, Nl, Ol;
        const Pl = _Ql(Kl, Object.keys(Kl));
        for (const Ql of Object.keys(Ll))
            switch (Kl) {
                case 'scriptDepth':
                    if (d(Ll.scriptDepth))
                        i.scriptDepth = [
                            Ll.scriptDepth[0],
                            Ll.scriptDepth[1]
                        ];
                    else {
                        if ('number' != typeof Ll.scriptDepth)
                            throw new TypeError('Unexpected value for scriptDepth');
                        i.scriptDepth = [
                            Ll.scriptDepth,
                            Ll.scriptDepth
                        ];
                    }
                    break;
                case 'locale':
                    'auto' === Ll.locale ? i.locale = e() ? navigator.language.slice(0, 5) : 'en' : i.locale = Ll.locale, li.locale = i.locale;
                    break;
                case 'strings':
                    li.merge(Ll.strings), i.strings = li.strings;
                    break;
                case 'virtualKeyboardLayout':
                    i.virtualKeyboardLayout = Ll.virtualKeyboardLayout;
                    break;
                case 'virtualKeyboardMode':
                    const Rl = Ll.virtualKeyboardMode.toLowerCase();
                    i.virtualKeyboardMode = 'auto' === m ? g() ? 'onfocus' : 'off' : m;
                    break;
                case 'customVirtualKeyboardLayers':
                    i.customVirtualKeyboardLayers = {
                        ...i.customVirtualKeyboardLayers,
                        ...Ll.customVirtualKeyboardLayers
                    };
                    break;
                case 'customVirtualKeyboards':
                    i.customVirtualKeyboards = {
                        ...i.customVirtualKeyboards,
                        ...Ll.customVirtualKeyboards
                    };
                    break;
                case 'letterShapeStyle':
                    'auto' === Ll.letterShapeStyle ? li.locale.startsWith('fr') ? i.letterShapeStyle = 'french' : i.letterShapeStyle = 'tex' : i.letterShapeStyle = Ll.letterShapeStyle;
                    break;
                case 'plonkSound':
                    void 0 !== Ll.plonkSound && (i.plonkSound = Ll.plonkSound);
                    break;
                case 'keypressSound':
                    null === Ll.keypressSound ? i.keypressSound = {
                        default: null,
                        delete: null,
                        return: null,
                        spacebar: null
                    } : 'string' == typeof Ll.keypressSound ? i.keypressSound = {
                        delete: Ll.keypressSound,
                        return: Ll.keypressSound,
                        spacebar: Ll.keypressSound,
                        default: Ll.keypressSound
                    } : 'object' == typeof Ll.keypressSound && 'default' in Ll.keypressSound && (i.keypressSound = {
                        ...Ll.keypressSound
                    }, i.keypressSound.delete = null !== (Ml = i.keypressSound.delete) && void 0 !== Ml ? Ml : Ll.keypressSound.default, i.keypressSound.return = null !== (f = i.keypressSound.return) && void 0 !== f ? f : Ll.keypressSound.default, i.keypressSound.spacebar = null !== (h = i.keypressSound.spacebar) && void 0 !== h ? h : Ll.keypressSound.default);
                    break;
                case 'computeEngine':
                    i.computeEngine = Ll.computeEngine;
                    break;
                case 'virtualKeyboardContainer':
                    i.virtualKeyboardContainer = Ll.virtualKeyboardContainer;
                    break;
                case 'macros':
                    i.macros = _Gb(Ll.macros);
                    break;
                default:
                    d(Ll[Kl]) ? i[Kl] = [...Ll[Kl]] : 'object' == typeof Ll[Kl] ? i[Kl] = {
                        ...Ll[Kl]
                    } : i[Kl] = Ll[Kl];
            }
        return i;
    }

    function _Ql(Rl, Sl) {
        let Tl;
        Tl = 'string' == typeof Sl ? [Sl] : void 0 === Sl ? Object.keys(Rl) : Sl;
        const Ul = {};
        for (const Vl of Tl)
            null === Rl[Sl] ? e[Sl] = null : d(Rl[Sl]) ? e[Sl] = [...Rl[Sl]] : 'object' != typeof Rl[Sl] || Rl[Sl] instanceof Element || 'computeEngine' === Sl ? e[Sl] = Rl[Sl] : e[Sl] = {
                ...Rl[Sl]
            };
        return 'string' == typeof Sl ? e[Sl] : e;
    }
    pl({
        performWithFeedback: (Tl, Ul) => function(Vl, Wl) {
            Vl.focus(), Vl.options.keypressVibration && h() && navigator.vibrate(3), 'moveToNextPlaceholder' === (Wl = Wl.replace(/-\w/g, Xl => Xl[1].toUpperCase())) || 'moveToPreviousPlaceholder' === Wl || 'complete' === Wl ? Vl.playSound('return') : 'deleteBackward' === Wl || 'deleteForward' === Wl || 'deletePreviousWord' === Wl || 'deleteNextWord' === Wl || 'deleteToGroupStart' === Wl || 'deleteToGroupEnd' === Wl || 'deleteToMathFieldStart' === Wl || 'deleteToMathFieldEnd' === Wl ? Vl.playSound('delete') : Vl.playSound('keypress');
            const Xl = Vl.executeCommand(Wl);
            return Vl.scrollIntoView(), Xl;
        }(Tl, Ul)
    }), pl({
        complete: _wk,
        nextSuggestion: function(Tl) {
            return mk(Tl, {
                atIndex: Tl.suggestionIndex + 1
            }), !1;
        },
        previousSuggestion: function(Tl) {
            return mk(Tl, {
                atIndex: Tl.suggestionIndex - 1
            }), !1;
        }
    }, {
        target: 'mathfield',
        category: 'autocomplete'
    }), pl({
        speak: (Tl, Ul, Vl) => function(Wl, Xl, Yl) {
            var Zl, $l;
            Yl = null != Yl ? Yl : {
                withHighlighting: !1
            };
            const {
                model: am
            } = Wl, bm = function(cm) {
                let dm = null;
                switch (cm) {
                    case 'all':
                    default:
                        dm = am.root;
                        break;
                    case 'selection':
                        dm = am.getAtoms(am.selection);
                        break;
                    case 'left':
                        dm = am.getAtoms(am.offsetOf(am.at(am.position).leftSibling), am.position);
                        break;
                    case 'right':
                        dm = am.getAtoms(am.position, am.offsetOf(am.at(am.position).rightSibling));
                        break;
                    case 'group':
                        dm = am.getAtoms(am.getSiblingsRange(am.position));
                        break;
                    case 'parent': {
                        const {
                            parent: em
                        } = am.at(am.position);
                        dm = em && 'root' !== em.type ? em : am.root;
                        break;
                    }
                }
                return dm;
            }(Xl);
            if (null === bm)
                return null === ($l = (Zl = Wl.options).speakHook) || void 0 === $l || $l.call(Zl, function(cm) {
                    let dm = '';
                    switch (cm) {
                        case 'all':
                        case 'group':
                        default:
                            break;
                        case 'selection':
                            dm = 'no selection';
                            break;
                        case 'left':
                            dm = 'at start';
                            break;
                        case 'right':
                            dm = 'at end';
                            break;
                        case 'parent':
                            dm = 'no parent';
                    }
                    return dm;
                }(Xl), Wl.options), !1;
            const cm = {
                ...Wl.options
            };
            (Yl.withHighlighting || 'amazon' === cm.speechEngine) && (cm.textToSpeechMarkup = globalThis.sre && 'sre' === cm.textToSpeechRules ? 'ssml_step' : 'ssml'), cm.textToSpeechMarkup || /firefox/i.test(navigator.userAgent) || (cm.textToSpeechMarkup = 'ssml');
            const dm = ii(bm, cm);
            return e() && Yl.withHighlighting ? (_Gt().readAloudMathField = Wl, _Wk(Wl, {
                forHighlighting: !0
            }), Wl.options.readAloudHook && Wl.options.readAloudHook(Wl.field, dm, Wl.options)) : Wl.options.speakHook && Wl.options.speakHook(dm, cm), !1;
        }(Tl, Ul, Vl)
    }, {
        target: 'mathfield',
        category: 'speech'
    });
    const Tl = '<span style="width: 21px; margin-top: 4px;"><svg style="width: 21px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>';

    function Ul() {
        var Vl, Wl, Xl;
        return {
            readOnly: !1,
            createHTML: Yl => Yl,
            fontsDirectory: './fonts',
            soundsDirectory: './sounds',
            computeEngine: void 0,
            defaultMode: 'math',
            macros: zb(),
            registers: {},
            colorMap: y,
            backgroundColorMap: N,
            horizontalSpacingScale: 1,
            letterShapeStyle: li.locale.startsWith('fr') ? 'french' : 'tex',
            smartMode: !1,
            smartFence: !0,
            smartSuperscript: !0,
            scriptDepth: [
                1 / 0,
                1 / 0
            ],
            removeExtraneousParentheses: !0,
            mathModeSpace: '',
            decimalSeparator: '.',
            fractionNavigationOrder: 'numerator-denominator',
            placeholderSymbol: '\u25A2',
            enablePopover: !0,
            locale: li.locale,
            strings: li.strings,
            keybindings: Cj,
            inlineShortcuts: pg,
            inlineShortcutTimeout: 0,
            virtualKeyboardToggleGlyph: Tl,
            virtualKeyboardMode: 'auto',
            virtualKeyboards: 'all',
            virtualKeyboardLayout: 'auto',
            customVirtualKeyboardLayers: {},
            customVirtualKeyboards: {},
            virtualKeyboardTheme: e() && /android|cros/i.test(navigator.userAgent) ? 'material' : 'apple',
            keypressVibration: !0,
            keypressSound: null,
            plonkSound: null,
            virtualKeyboardToolbar: 'default',
            virtualKeyboardContainer: null !== (Wl = null === (Vl = globalThis.document) || void 0 === Vl ? void 0 : Vl.body) && void 0 !== Wl ? Wl : null,
            useSharedVirtualKeyboard: !1,
            sharedVirtualKeyboardTargetOrigin: null === (Xl = globalThis.window) || void 0 === Xl ? void 0 : Xl.origin,
            originValidator: 'same-origin',
            textToSpeechRules: 'mathlive',
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {},
            speechEngine: 'local',
            speechEngineVoice: 'Joanna',
            speechEngineRate: '100%',
            speakHook: ul,
            readAloudHook: Fl,
            onInlineShortcut: () => '',
            onExport: Eg,
            value: ''
        };
    }

    function Yl(Zl) {
        return 'inline-math' === Zl.defaultMode ? 'math' : Zl.defaultMode;
    }
    var Zl, $l, am = '@keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}.ML__caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:2px;border-right:2px solid var(--caret-color,var(--ML__caret-color));content:"";left:-1px;margin-right:-2px;position:relative}.ML__text-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;border-radius:1px;border-right:1px solid var(--caret-color,var(--ML__caret-color));content:"";left:0;margin-right:-1px;position:relative}.ML__latex-caret:after{animation:ML__caret-blink 1.05s step-end infinite forwards;border:none;color:var(--caret-color,var(--ML__caret-color));content:"_";margin-right:calc(-1ex - 2px);position:relative}.ML__container{--ML__selection-background-color:hsl(var(--hue,212),97%,85%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.1);--ML__contains-highlight-background-color:hsl(var(--hue,212),40%,95%);--ML__selection-color:currentColor;--ML__caret-color:hsl(var(--hue,212),40%,49%);--ML__smart-fence-color:currentColor;--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),40%,49%);align-items:flex-end;display:flex;flex-flow:row;isolation:isolate;justify-content:space-between;min-height:39px;touch-action:none;width:100%}@media (prefers-color-scheme:dark){.ML__container{--ML__selection-background-color:hsl(var(--hue,212),25%,45%);--ML__text-highlight-background-color:hsla(var(--hue,212),40%,50%,0.2);--ML__contains-highlight-background-color:hsl(var(--hue,212),5%,34%);--ML__caret-color:hsl(var(--hue,212),60%,69%);--ML__latex-color:var(--primary,hsl(var(--hue,212),40%,50%));--ML__placeholder-color:hsl(var(--hue,212),60%,69%)}}.ML__content{align-items:center;align-self:center;display:flex;overflow:hidden;padding:2px 0 2px 1px;position:relative;width:100%}.ML__virtual-keyboard-toggle{box-sizing:border-box;display:none}.ML__virtual-keyboard-toggle>span{align-items:center;align-self:center;display:flex}.ML__virtual-keyboard-toggle.is-visible{fill:currentColor;align-items:center;align-self:center;background:transparent;border:1px solid transparent;border-radius:8px;color:var(--primary,hsl(var(--hue,212),40%,50%));cursor:pointer;display:flex;flex-direction:column;flex-shrink:0;height:34px;justify-content:center;margin-right:4px;padding:0;transition:background .2s cubic-bezier(.64,.09,.08,1);width:34px}.ML__virtual-keyboard-toggle.is-visible:hover{fill:currentColor;background:hsla(0,0%,70%,.5);border-radius:8px;color:#333}.ML__textarea__textarea{clip:rect(0 0 0 0);border:none;display:inline-block;font-family:KaTeX_Main;font-size:1em;height:1px;outline:none;position:absolute;resize:none;transform:scale(0);width:1px}.ML__focused .ML__text{background:var(--highlight-text,var(--ML__text-highlight-background-color))}.ML__smart-fence__close{color:var(--smart-fence-color,var(--ML__smart-fence-color));opacity:var(--smart-fence-opacity,.5)}.ML__focused .ML__selection{background:var(--selection-background-color-focused,var(--selection-background-color,var(--ML__selection-background-color)))!important}.ML__focused .ML__selected,.ML__focused .ML__selected .ML__contains-caret,.ML__focused .ML__selected .ML__placeholder,.ML__focused .ML__selected .ML__smart-fence__close{color:var(--selection-color-focused,var(--selection-color,var(--ML__selection-color)))!important}.ML__selection{background:var(--selection-background-color,var(--ML__selection-background-color))!important;box-sizing:border-box}.ML__selected,.ML__selected .ML__contains-caret,.ML__selected .ML__placeholder,.ML__selected .ML__smart-fence__close{color:var(--selection-color,var(--ML__selection-color));opacity:1}.ML__contains-caret .ML__sqrt-line,.ML__contains-caret .ML__sqrt-sign,.ML__contains-caret.ML__close,.ML__contains-caret.ML__open,.ML__contains-caret>.ML__close,.ML__contains-caret>.ML__open{color:var(--caret-color,var(--ML__caret-color))}.ML__contains-highlight{background:var(--contains-highlight-backround-color,var(--ML__contains-highlight));box-sizing:border-box}.ML__latex{color:var(--latex-color,var(--ML__latex-color));font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace;font-weight:400}.ML__suggestion{opacity:.5}.ML__virtual-keyboard-toggle.is-visible.is-pressed:hover{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__virtual-keyboard-toggle:focus{border:2px solid var(--primary,hsl(var(--hue,212),40%,50%));border-radius:8px;outline:none}.ML__virtual-keyboard-toggle.is-active,.ML__virtual-keyboard-toggle.is-active:hover,.ML__virtual-keyboard-toggle.is-pressed{fill:currentColor;background:hsl(var(--hue,212),25%,35%);color:#fafafa}.ML__tooltip-container{position:relative;transform:scale(0)}.ML__tooltip-container .ML__tooltip-content{background:#616161;border-radius:8px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;display:inline-table;max-width:400px;opacity:0;padding:12px;position:fixed;transition:opacity .15s cubic-bezier(.4,0,1,1);visibility:hidden;width:max-content;z-index:2}.ML__tooltip-container .ML__tooltip-content .ML__text{white-space:normal}.ML__tooltip-container .ML__tooltip-content .ML__base{display:contents}.ML__tooltip-container:hover .ML__tooltip-content{font-size:.75em;opacity:1;transform:scale(1) translateY(3em);visibility:visible}[data-ML__tooltip]{position:relative}[data-ML__tooltip][data-placement=top]:after{bottom:100%;top:inherit}[data-ML__tooltip]:after{background:#616161;border-radius:2px;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-ML__tooltip);display:none;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;right:110%;text-align:center;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1);width:max-content;z-index:2}@media only screen and (max-width:767px){[data-ML__tooltip]:after{font-size:16px;padding:8px 16px}}:not(.tracking) [data-ML__tooltip]:hover{position:relative}:not(.tracking) [data-ML__tooltip]:hover:after{display:inline-table;opacity:1;transform:scale(1);visibility:visible}[data-ML__tooltip][data-delay]:after{transition-delay:0s}[data-ML__tooltip][data-delay]:hover:after{transition-delay:1s}';
    let bm = null;

    function cm(dm) {
        if (/^(?:[a-z+]+:)?\/\//i.test(dm))
            return new URL(dm).href;
        if (null === bm)
            try {
                const em = new XMLHttpRequest();
                dm.open('HEAD', _em, !1), dm.send(null), 200 === dm.status && (bm = dm.responseURL);
            } catch (dm) {}
        return bm ? new URL(dm, bm).href : '';
    }
    const _em = (null === ($l = null === (Zl = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === Zl ? void 0 : Zl.currentScript) || void 0 === $l ? void 0 : $l.src) || function() {
        const fm = String(new Error().stack).replace(/^Error.*\n/, '').split('\n');
        if (0 === fm.length)
            return '';
        let gm = fm[1],
            hm = gm.match(/http.*\.ts[\?:]/);
        return hm && (gm = fm[2]), hm = gm.match(/(https?:.*):[0-9]+:[0-9]+/), hm || (hm = gm.match(/at (.*(\.ts))[\?:]/), hm || (hm = gm.match(/at (.*(\.mjs|\.js))[\?:]/))), hm ? hm[1] : '';
    }();
    async function fm(gm) {
        var hm;
        if (e() && !document.body.classList.contains('ML__fonts-loading') && (null === (hm = getComputedStyle(document.documentElement).getPropertyValue('--ML__static-fonts')) || void 0 === hm || !hm) && (document.body.classList.remove('ML__fonts-did-not-load'), 'fonts' in document)) {
            const im = [
                    'KaTeX_Main',
                    'KaTeX_Math',
                    'KaTeX_AMS',
                    'KaTeX_Caligraphic',
                    'KaTeX_Fraktur',
                    'KaTeX_SansSerif',
                    'KaTeX_Script',
                    'KaTeX_Typewriter',
                    'KaTeX_Size1',
                    'KaTeX_Size2',
                    'KaTeX_Size3',
                    'KaTeX_Size4'
                ],
                jm = Array.from(document.fonts).map(km => km.family);
            if (im.every(km => jm.includes(km)))
                return;
            const km = cm(null != gm ? gm : './fonts');
            if (!d)
                return;
            document.body.classList.add('ML__fonts-loading');
            const lm = [
                ['KaTeX_Main-Regular'],
                [
                    'KaTeX_Main-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_Main-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-Italic',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_Math-BoldItalic',
                    {
                        style: 'italic',
                        weight: 'bold'
                    }
                ],
                ['KaTeX_AMS-Regular'],
                ['KaTeX_Caligraphic-Regular'],
                [
                    'KaTeX_Caligraphic-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                ['KaTeX_Fraktur-Regular'],
                [
                    'KaTeX_Fraktur-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Regular',
                    {
                        style: 'italic'
                    }
                ],
                [
                    'KaTeX_SansSerif-Bold',
                    {
                        weight: 'bold'
                    }
                ],
                [
                    'KaTeX_SansSerif-Italic',
                    {
                        style: 'italic'
                    }
                ],
                ['KaTeX_Script-Regular'],
                ['KaTeX_Typewriter-Regular'],
                ['KaTeX_Size1-Regular'],
                ['KaTeX_Size2-Regular'],
                ['KaTeX_Size3-Regular'],
                ['KaTeX_Size4-Regular']
            ].map(mm => function(nm, om, pm = {}) {
                return new FontFace(nm, `url(${ om }.woff2) format('woff2')`, pm);
            }(mm[0].replace(/-[a-zA-Z]+$/, ''), d + '/' + mm[0], mm[1]));
            try {
                (await Promise.all(e.map(mm => {
                    try {
                        return mm.load();
                    } catch {}
                }))).forEach(mm => document.fonts.add(mm));
            } catch (gm) {
                document.body.classList.add('ML__fonts-did-not-load');
            }
            document.body.classList.remove('ML__fonts-loading');
        }
    }

    function lm(mm) {
        return 'number' == typeof mm && !Number.isNaN(mm);
    }

    function mm(nm) {
        return Array.isArray(nm) && 2 === nm.length;
    }

    function nm(om) {
        return null != om && 'object' == typeof om && 'ranges' in om && Array.isArray(om.ranges);
    }
    const om = {
            '\\ne': '\u2260',
            '\\neq': '\u2260',
            '\u2212': '-',
            '-': '-',
            '\\alpha': 'alpha',
            '\\beta': 'beta',
            '\\gamma': 'gamma',
            '\\delta': 'delta',
            '\\epsilon': 'epsilon',
            '\\varepsilon': 'varepsilon',
            '\\zeta': 'zeta',
            '\\eta': 'eta',
            '\\theta': 'theta',
            '\\vartheta': 'vartheta',
            '\\iota': 'iota',
            '\\kappa': 'kappa',
            '\\lambda': 'lambda',
            '\\mu': 'mu',
            '\\nu': 'nu',
            '\\xi': 'xi',
            '\\pi': 'pi',
            '\\rho': 'rho',
            '\\sigma': 'sigma',
            '\\tau': 'tau',
            '\\upsilon': 'upsilon',
            '\\phi': 'phi',
            '\\varphi': 'varphi',
            '\\chi': 'chi',
            '\\psi': 'psi',
            '\\omega': 'omega',
            '\\Gamma': 'Gamma',
            '\\Delta': 'Delta',
            '\\Theta': 'Theta',
            '\\Lambda': 'Lambda',
            '\\Xi': 'Xi',
            '\\Pi': 'Pi',
            '\\Sigma': 'Sigma',
            '\\Phi': 'Phi',
            '\\Psi': 'Psi',
            '\\Omega': 'Omega',
            '\\exponentialE': 'e',
            '\\imaginaryI': 'i',
            '\\imaginaryJ': 'j',
            '\\!': ' ',
            '\\,': ' ',
            '\\:': ' ',
            '\\;': ' ',
            '\\enskip': ' ',
            '\\enspace': ' ',
            '\\qquad': ' ',
            '\\quad': ' '
        },
        pm = {
            '\\pm': '+-',
            '\\times': 'xx',
            '\\colon': ':',
            '\\vert': '|',
            '\\Vert': '||',
            '\\mid': '|',
            '\\lbrace': '{',
            '\\rbrace': '}',
            '\\lparen': '(',
            '\\rparen': ')',
            '\\langle': '(:',
            '\\rangle': ':)'
        };

    function qm(rm) {
        var sm, tm, um, vm, wm, xm, ym, zm, Am, Bm, Cm, Dm, Em;
        if (!rm)
            return '';
        if (d(rm)) {
            if (0 === rm.length)
                return '';
            if ('first' === rm[0].type && (rm = rm.slice(1)), 0 === rm.length)
                return '';
            let Fm = '';
            if ('latex' === rm[0].mode)
                for (const Gm of rm)
                    Fm += qm(Gm);
            else if ('text' === rm[0].mode) {
                let Hm = 0;
                for (Fm = '"';
                    'text' === (null === (Gm = rm[Hm]) || void 0 === Gm ? void 0 : Gm.mode);)
                    Fm += rm[Hm].body ? qm(rm[Hm].body) : rm[Hm].value, Hm++;
                Fm += '"' + qm(rm.slice(Hm));
            } else if ('math' === rm[0].mode) {
                let Hm = 0;
                for (; rm[Hm] && 'math' === rm[Hm].mode;)
                    Fm += qm(rm[Hm]), Hm++;
                Fm += qm(rm.slice(Hm));
            }
            return Fm.trim();
        }
        if ('text' === rm.mode)
            return '"' + rm.value + '"';
        let Gm = '';
        const {
            command: Hm
        } = rm;
        let Im;
        switch (rm.type) {
            case 'first':
                return '';
            case 'group':
            case 'root':
                Gm = null !== (tm = om[Hm]) && void 0 !== tm ? tm : qm(rm.body);
                break;
            case 'genfrac': {
                const Jm = rm;
                (Jm.leftDelim || Jm.rightDelim) && (Gm += '.' !== Jm.leftDelim && Jm.leftDelim ? Jm.leftDelim : '{:'), Jm.hasBarLine ? (Gm += '(', Gm += qm(Jm.above), Gm += ')/(', Gm += qm(Jm.below), Gm += ')') : (Gm += '(' + qm(Jm.above) + '),', Gm += '(' + qm(Jm.below) + ')'), (Jm.leftDelim || Jm.rightDelim) && (Gm += '.' !== Jm.rightDelim && Jm.rightDelim ? Jm.rightDelim : '{:');
            }
            break;
            case 'surd':
                Gm += rm.hasEmptyBranch('above') ? 'sqrt(' + qm(rm.body) + ')' : 'root(' + qm(rm.above) + ')(' + qm(rm.body) + ')';
                break;
            case 'latex':
                Gm = rm.value;
                break;
            case 'leftright': {
                const Km = rm;
                Gm += '.' !== Km.leftDelim && Km.leftDelim ? Km.leftDelim : '{:', Gm += qm(Km.body), Gm += '.' !== Km.rightDelim && Km.rightDelim ? Km.rightDelim : ':}';
            }
            break;
            case 'sizeddelim':
            case 'delim':
            case 'overlap':
            case 'overunder':
            case 'box':
                break;
            case 'mord':
                Gm = null !== (f = null !== (e = om[Hm]) && void 0 !== e ? e : Hm) && void 0 !== f ? f : 'string' == typeof rm.value ? rm.value : '', Gm.startsWith('\\') && (Gm += ' '), Im = Hm ? Hm.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null, Im ? Gm = String.fromCodePoint(Number.parseInt('0x' + Im[1])) : Gm.length > 0 && Gm.startsWith('\\') && (Gm = 'string' == typeof rm.value ? rm.value.charAt(0) : rm.command);
                break;
            case 'mbin':
            case 'mrel':
            case 'minner':
                Gm = null !== (h = null !== (g = om[Hm]) && void 0 !== g ? g : pm[Hm]) && void 0 !== h ? h : rm.value;
                break;
            case 'mopen':
            case 'mclose':
                Gm += rm.value;
                break;
            case 'mpunct':
                Gm = null !== (i = pm[Hm]) && void 0 !== i ? i : Hm;
                break;
            case 'mop':
                '\u200B' !== rm.value && (Gm = '', Gm += '\\operatorname' === Hm ? qm(rm.body) : null !== (m = rm.value) && void 0 !== m ? m : Hm, Gm += ' ');
                break;
            case 'array':
                const Lm = rm.array,
                    Mm = rm.environmentName,
                    Nm = null !== (Am = {
                        bmatrix: [
                            '[',
                            ']'
                        ],
                        'bmatrix*': [
                            '[',
                            ']'
                        ]
                    } [d]) && void 0 !== Am ? Am : [
                        '(',
                        ')'
                    ],
                    Om = [];
                for (const Pm of Lm) {
                    const Qm = [];
                    for (const Rm of rm)
                        Qm.push(y[0] + qm(Rm) + y[1]);
                    N.push(Qm.join(','));
                }
                const Sm = null !== (q = {
                    bmatrix: [
                        '[',
                        ']'
                    ],
                    'bmatrix*': [
                        '[',
                        ']'
                    ],
                    cases: [
                        '{',
                        ':}'
                    ]
                } [d]) && void 0 !== q ? q : [
                    '(',
                    ')'
                ];
                Gm = Q[0] + N.join(',') + Q[1];
                break;
            case 'spacing':
                Gm = null !== (Cm = om[Hm]) && void 0 !== Cm ? Cm : ' ';
                break;
            case 'enclose':
                Gm = '(' + qm(rm.body) + ')';
                break;
            case 'space':
                Gm = ' ';
                break;
            case 'msubsup':
                Gm = '';
                break;
            case 'macro':
                Gm = null !== (Em = null !== (Dm = om[Hm]) && void 0 !== Dm ? Dm : pm[Hm]) && void 0 !== Em ? Em : qm(rm.body);
        }
        if (!rm.hasEmptyBranch('subscript')) {
            Gm += '_';
            const Tm = qm(rm.subscript);
            Gm += Tm.length > 1 ? '(' + Tm + ')' : Tm;
        }
        if (!rm.hasEmptyBranch('superscript')) {
            Gm += '^';
            const Um = qm(rm.superscript);
            Gm += Um.length > 1 ? '(' + Um + ')' : Um;
        }
        return Gm;
    }

    function Sm(Tm) {
        let Um;
        if ('body' === Tm.treeBranch)
            Um = {
                enclose: 'cross out',
                leftright: 'delimiter',
                surd: 'square root',
                root: 'math field',
                mop: 'operator'
            } [Tm.type];
        else if ('genfrac' === Tm.parent.type) {
            if ('above' === Tm.treeBranch)
                return 'numerator';
            if ('below' === Tm.treeBranch)
                return 'denominator';
        } else
            'surd' === Tm.parent.type ? 'above' === Tm.treeBranch && (Um = 'index') : 'superscript' === Tm.treeBranch ? Um = 'superscript' : 'subscript' === Tm.treeBranch && (Um = 'subscript');
        return null != Um ? Um : 'parent';
    }
    class Tm {
        get atoms() {
            return this.root.children;
        }
        get selection() {
            return this._selection;
        }
        set selection(Um) {
            this.setSelection(Um);
        }
        setSelection(Um, Vm) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Wm = this.normalizeSelection(Um, Vm);
                if (void 0 === Wm)
                    throw new TypeError('Invalid selection');
                if (1 === Wm.ranges.length && Wm.ranges[0][0] === Wm.ranges[0][1]) {
                    const Xm = Wm.ranges[0][0];
                    this._position = Xm, this._anchor = Xm, this._selection = Wm;
                } else {
                    const Ym = mg(Wm);
                    'backward' === Wm.direction ? [this._position, this._anchor] = Ym : [this._anchor, this._position] = Ym;
                    const Zm = this.at(Ym[0] + 1),
                        $m = this.at(Ym[1]),
                        an = Kd.commonAncestor(Zm, $m);
                    'array' === (null == an ? void 0 : an.type) && Zm.parent === an && $m.parent, this._selection = {
                        ranges: [Ym],
                        direction: Wm.direction
                    };
                }
            });
        }
        setPositionHandlingPlaceholder(Um) {
            var Vm, Wm, Xm;
            'placeholder' === (null === (Vm = this.at(Um)) || void 0 === Vm ? void 0 : Vm.type) ? this.setSelection(Um - 1, Um): 'placeholder' === (null === (Xm = null === (Wm = this.at(Um)) || void 0 === Wm ? void 0 : Wm.rightSibling) || void 0 === Xm ? void 0 : Xm.type) ? this.setSelection(Um, Um + 1) : this.position = Um;
        }
        getState() {
            return {
                content: this.root.toJson(),
                selection: this.selection
            };
        }
        setState(Um, Vm) {
            var Wm;
            const Xm = this.suppressChangeNotifications;
            this.suppressChangeNotifications = null === (Wm = null == Vm ? void 0 : Vm.suppressChangeNotifications) || void 0 === Wm || Wm;
            let Ym = {};
            'undo' === (null == Vm ? void 0 : Vm.type) && (Ym = {
                inputType: 'historyUndo'
            }), 'redo' === (null == Vm ? void 0 : Vm.type) && (Ym = {
                inputType: 'historyRedo'
            }), Yj(this, Ym) && (this.root = _Yf(Um.content, this.mathfield), this.selection = Um.selection, $j(this, Ym)), this.suppressChangeNotifications = Xm;
        }
        get position() {
            return this._position;
        }
        set position(Um) {
            this.setSelection(Um, Um);
        }
        get anchor() {
            return this._anchor;
        }
        get selectionIsCollapsed() {
            return this._anchor === this._position;
        }
        get selectionIsPlaceholder() {
            return 1 === Math.abs(this._anchor - this._position) && 'placeholder' === this.at(Math.max(this._anchor, this._position)).type;
        }
        collapseSelection(Um = 'forward') {
            return this._anchor !== this._position && (this.position = 'backward' === Um ? Math.min(this._anchor, this._position) : Math.max(this._anchor, this._position), !0);
        }
        get lastOffset() {
            return this.atoms.length - 1;
        }
        at(Um) {
            return this.atoms[Um];
        }
        offsetOf(Um) {
            return this.atoms.indexOf(Um);
        }
        getSiblingsRange(Um) {
            const Vm = this.at(Um),
                {
                    parent: Wm
                } = Vm;
            if (!Wm)
                return [
                    0,
                    this.lastOffset
                ];
            const Xm = Vm.parent.branch(Vm.treeBranch);
            return [
                this.offsetOf(Xm[0]),
                this.offsetOf(Xm[Xm.length - 1])
            ];
        }
        getBranchRange(Um, Vm) {
            const Wm = this.at(Um).branch(Vm);
            return [
                this.offsetOf(Wm[0]),
                this.offsetOf(Wm[Wm.length - 1])
            ];
        }
        getAtoms(Um, Vm, Wm) {
            var Xm, Ym;
            let Zm, $m, an = null != Wm ? Wm : {};
            if (nm(Um)) {
                if (an = null !== (Xm = Vm) && void 0 !== Xm ? Xm : {}, Um.ranges.length > 1)
                    return Um.ranges.reduce((bn, cn) => [
                        ...bn,
                        ...this.getAtoms(cn, an)
                    ], []);
                Um = Um.ranges[0];
            }
            if (lm(Um)) {
                if (Zm = Um, !lm(Vm))
                    return [];
                $m = Vm;
            } else
                [bn, cn] = Um, an = null !== (Ym = Vm) && void 0 !== Ym ? Ym : {};
            if (!Number.isFinite(Zm))
                return [];
            void 0 === an.includeChildren && (an.includeChildren = !1), Zm < 0 && (Zm = this.lastOffset - Zm + 1), $m < 0 && ($m = this.lastOffset - $m + 1);
            const bn = Math.min(Zm, $m) + 1,
                cn = Math.max(Zm, $m);
            if (1 === bn && cn === this.lastOffset)
                return [this.root];
            let dn = [];
            for (let en = bn; en <= cn; en++) {
                const fn = this.atoms[en];
                _Um(this, fn, bn, cn) && dn.push(fn);
            }
            return an.includeChildren || (dn = dn.filter(gn => {
                let hn = !1,
                    {
                        parent: jn
                    } = gn;
                for (; jn && !hn;)
                    hn = _Um(this, jn, bn, cn), jn = jn.parent;
                return !hn;
            })), dn;
        }
        getAllAtoms(Um) {
            const Vm = [],
                Wm = this.lastOffset;
            for (let Xm = Um; Xm <= Wm; Xm++)
                Vm.push(this.atoms[Xm]);
            for (let Ym = 0; Ym < Um; Ym++)
                Vm.push(this.atoms[Ym]);
            return Vm;
        }
        extractAtoms(Um) {
            let Vm = this.getAtoms(Um);
            1 === Vm.length && 'root' === Vm[0].type && (Vm = Vm[0].children);
            for (const Wm of Vm)
                Wm.parent.removeChild(Wm);
            return Vm;
        }
        deleteAtoms(Um) {
            this.extractAtoms(Um), this.position = Um[0];
        }
        atomToString(Um, Vm) {
            const Wm = null != Vm ? Vm : 'latex';
            if (Wm.startsWith('latex'))
                return zc.serialize([Um], {
                    expandMacro: 'latex-expanded' === Wm,
                    skipStyles: 'latex-unstyled' === Wm,
                    defaultMode: this.mathfield.options.defaultMode
                });
            if ('math-ml' === Wm)
                return _ah(Um, this.mathfield.options);
            if ('spoken' === Wm)
                return ii(Um, this.mathfield.options);
            if ('spoken-text' === Wm) {
                const Xm = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = '';
                const Ym = ii(Um, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Xm, Ym;
            }
            if ('spoken-ssml' === Ym || 'spoken-ssml-with-highlighting' === Ym) {
                const Zm = this.mathfield.options.textToSpeechMarkup;
                this.mathfield.options.textToSpeechMarkup = 'ssml';
                const $m = ii(Um, this.mathfield.options);
                return this.mathfield.options.textToSpeechMarkup = Zm, $m;
            }
            if ('math-json' === $m) {
                if (!this.mathfield.computeEngine)
                    return '';
                try {
                    const an = this.mathfield.computeEngine.parse(Kd.serialize(Um, {
                        expandMacro: !1,
                        defaultMode: 'math'
                    }));
                    return JSON.stringify(an.json);
                } catch (Um) {
                    return JSON.stringify([
                        'Error',
                        'Nothing',
                        `'${ Um.toString() }'`
                    ]);
                }
            }
            return 'ascii-math' === $m ? qm(Um) : '';
        }
        getValue(Um, Vm, Wm) {
            if (void 0 === Um)
                return this.atomToString(this.root, 'latex');
            if ('string' == typeof Um)
                return this.atomToString(this.root, Um);
            let Xm, Ym;
            if (lm(Um) && lm(Vm) ? (Xm = [this.normalizeRange([
                    Um,
                    Vm
                ])], Ym = null != Wm ? Wm : 'latex') : mm(Um) ? (Xm = [this.normalizeRange(Um)], Ym = Vm) : nm(Um) ? (Xm = Um.ranges, Ym = Vm) : (Xm = [], Ym = 'latex'), Ym.startsWith('latex')) {
                const Zm = {
                    expandMacro: 'latex-expanded' === Ym,
                    skipStyles: 'latex-unstyled' === Ym,
                    defaultMode: this.mathfield.options.defaultMode
                };
                return Cd(Xm.map($m => Kd.serialize(this.getAtoms($m), Zm)));
            }
            return Xm.map($m => this.getAtoms($m).map(an => this.atomToString(an, Ym)).join('')).join('');
        }
        extendSelection(Um) {
            let Vm = this._anchor;
            if ('forward' === Um) {
                let Wm = this._position;
                do {
                    let Xm = this.at(Wm + 1);
                    if (null == Xm ? void 0 : Xm.inCaptureSelection) {
                        for (; !Xm.captureSelection;)
                            Xm = Xm.parent;
                        Wm = this.offsetOf(null == Xm ? void 0 : Xm.lastChild) + 1;
                    } else
                        Wm += 1;
                } while (Wm <= this.lastOffset && this.at(Wm).isFirstSibling);
                return Wm === Vm - 1 && 'first' === this.at(Vm).type && (Wm = Vm), this.extendSelectionTo(Vm, Wm);
            }
            let Wm = this._position - 1;
            if (Wm < 0)
                return !1;
            for (; Wm >= 0 && this.at(Wm).isLastSibling;) {
                let Xm = this.at(Wm);
                if (null == Xm ? void 0 : Xm.inCaptureSelection) {
                    for (; !Xm.captureSelection;)
                        Xm = Xm.parent;
                    Wm = this.offsetOf(Xm.firstChild) - 1;
                } else
                    Wm -= 1;
            }
            return Wm < 0 && (Wm = 0), Wm === Vm + 1 && 'first' === this.at(Wm).type && (Vm = Wm), this.extendSelectionTo(Vm, Wm);
        }
        extendSelectionTo(Um, Vm) {
            return this.deferNotifications({
                selection: !0
            }, () => {
                const Wm = this.normalizeRange([
                    Um,
                    Vm
                ]);
                let [Xm, Ym] = Wm, {
                    parent: Zm
                } = this.at(Ym);
                if (Zm && ('genfrac' === Zm.type || 'msubsup' === Zm.type))
                    for (; Zm !== this.root && _Ym(this, Zm, [
                            Xm,
                            Ym
                        ]);)
                        Ym = this.offsetOf(Zm), Zm = Zm.parent;
                for (Zm = this.at(Xm).parent; Zm !== this.root && _Ym(this, Zm, [
                        Xm,
                        Ym
                    ]);)
                    Xm = this.offsetOf(Zm.leftSibling), Zm = Zm.parent;
                if (Zm = this.at(Ym).parent, 'genfrac' === (null == Zm ? void 0 : Zm.type))
                    for (; Zm !== this.root && _Ym(this, Zm, [
                            Xm,
                            Ym
                        ]);)
                        Ym = this.offsetOf(Zm), Zm = Zm.parent;
                this._position = this.normalizeOffset(Vm), this._selection = {
                    ranges: [
                        [
                            Xm,
                            Ym
                        ]
                    ],
                    direction: 'none'
                };
            });
        }
        setListeners(Um) {
            this.listeners = Um;
        }
        announce(Um, Vm, Wm = []) {
            var Xm, Ym;
            null === (Ym = null === (Xm = this.mathfield.host) || void 0 === Xm ? void 0 : Xm.dispatchEvent(new CustomEvent('announce', {
                detail: {
                    command: Um,
                    previousPosition: Vm,
                    atoms: Wm
                },
                cancelable: !0,
                bubbles: !0,
                composed: !0
            }))) || void 0 === Ym || Ym || function(Zm, $m, an, bn) {
                let cn = '';
                'plonk' === $m ? (Zm.playSound('plonk'), Zm.flushInlineShortcutBuffer()) : 'delete' === $m ? cn = tl(Zm.options, 'deleted: ', bn) : 'focus' === $m || $m.includes('move') ? cn = function(dn, en) {
                    if (Number.isNaN(en))
                        return '';
                    const fn = dn.at(en);
                    if (!fn)
                        return '';
                    if (fn.treeDepth <= dn.at(dn.position).treeDepth)
                        return '';
                    let gn = '',
                        hn = fn.parent;
                    const jn = dn.at(dn.position).parent;
                    for (; hn !== dn.root && hn !== jn;)
                        gn += `out of ${ Sm(hn) };`, hn = hn.parent;
                    return gn;
                }(Zm.model, an) + (Zm.model.selectionIsCollapsed ? '' : 'selected: ') + function(dn, en) {
                    if (!dn.selectionIsCollapsed)
                        return tl(en, '', dn.getAtoms(dn.selection));
                    let fn = '';
                    const gn = dn.at(dn.position),
                        hn = Sm(gn);
                    return gn.isFirstSibling && (fn = (hn ? 'start of ' + hn : 'unknown') + ': '), gn.isLastSibling ? gn.isFirstSibling || (fn += hn ? 'end of ' + hn : 'unknown') : fn += tl(en, '', gn), fn;
                }(Zm.model, Zm.options) : 'replacement' === $m ? cn = tl(Zm.options, '', Zm.model.at(Zm.model.position)) : 'line' === $m ? (cn = tl(Zm.options, '', Zm.model.root), Zm.keyboardDelegate.setAriaLabel('after: ' + cn)) : cn = bn ? tl(Zm.options, $m + ' ', bn) : $m;
                const dn = Zm.ariaLiveText.textContent.includes('\xA0') ? ' \u202F ' : ' \xA0 ';
                Zm.ariaLiveText.textContent = cn + dn;
            }(this.mathfield, Um, Vm, Wm);
        }
        deferNotifications(Um, Vm) {
            const Wm = this._selection,
                Xm = this._anchor,
                Ym = this._position,
                Zm = this.suppressChangeNotifications;
            this.suppressChangeNotifications = !0;
            const $m = this.root.changeCounter;
            Vm();
            const an = this.root.changeCounter !== $m,
                bn = Xm !== this._anchor || Ym !== this._position || 'different' === function(cn, dn) {
                    if (cn.direction === dn.direction) {
                        const en = cn.ranges.length;
                        if (dn.ranges.length === en) {
                            let fn = 0;
                            for (; fn < en && 'equal' === lg(cn.ranges[fn], dn.ranges[fn]);)
                                fn++;
                            return fn === en ? 'equal' : 'different';
                        }
                    }
                    return 'different';
                }(this._selection, Wm);
            return this.suppressChangeNotifications = Zm, Um.content && an && $j(this, {
                data: Um.data,
                inputType: Um.type
            }), Um.selection && bn && Wj(this), an || bn;
        }
        normalizeOffset(Um) {
            return Um > 0 ? Um = Math.min(Um, this.lastOffset) : Um < 0 && (Um = this.lastOffset + Um + 1), Um;
        }
        normalizeRange(Um) {
            let [Vm, Wm] = Um;
            return Vm = this.normalizeOffset(Vm), Wm = this.normalizeOffset(Wm), Vm < Wm ? [
                Vm,
                Wm
            ] : [
                Wm,
                Vm
            ];
        }
        normalizeSelection(Um, Vm) {
            var Wm;
            let Xm;
            if (lm(Um)) {
                const Ym = this.normalizeOffset(Um);
                if (lm(Vm)) {
                    const Zm = this.normalizeOffset(Vm);
                    Xm = Ym <= Zm ? {
                        ranges: [
                            [
                                Ym,
                                Zm
                            ]
                        ],
                        direction: 'none'
                    } : {
                        ranges: [
                            [
                                Zm,
                                Ym
                            ]
                        ],
                        direction: 'backward'
                    };
                } else
                    Xm = {
                        ranges: [
                            [
                                Ym,
                                Ym
                            ]
                        ],
                        direction: 'none'
                    };
            } else if (mm(Zm)) {
                const $m = this.normalizeOffset(Zm[0]),
                    an = this.normalizeOffset(Zm[1]);
                Xm = $m <= an ? {
                    ranges: [
                        [
                            $m,
                            an
                        ]
                    ],
                    direction: 'none'
                } : {
                    ranges: [
                        [
                            an,
                            $m
                        ]
                    ],
                    direction: 'backward'
                };
            } else
                nm(Zm) && (Xm = {
                    ranges: Zm.ranges.map(bn => this.normalizeRange(bn)),
                    direction: null !== (an = Zm.direction) && void 0 !== an ? an : 'none'
                });
            return Xm;
        }
        constructor(Um, Vm, Wm) {
            this.options = Um, this._selection = {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'none'
            }, this._anchor = 0, this._position = 0, this.mathfield = Wm, this.suppressChangeNotifications = !1, this.root = new Kd('root', Wm, {
                mode: Um.mode
            }), this.root.body = [], this.setListeners(Vm);
        }
    }

    function _Um(Vm, Wm, Xm, Ym) {
        const Zm = Vm.offsetOf(Wm);
        if (e < Xm || e > Ym)
            return !1;
        if (!Wm.hasChildren)
            return !0;
        const $m = Vm.offsetOf(Wm.firstChild);
        if (f >= Xm && f <= Ym) {
            const an = Vm.offsetOf(Wm.lastChild);
            if (e >= Xm && e <= Ym)
                return !0;
        }
        return !1;
    }

    function _Ym(Zm, $m, an) {
        if (!(null == $m ? void 0 : $m.hasChildren))
            return !1;
        const [bn, cn] = an, dn = Zm.offsetOf($m.firstChild), en = Zm.offsetOf($m.lastChild);
        return f >= bn && f <= cn && g >= f && g <= cn;
    }

    function an(bn, cn) {
        let dn = bn.at(bn.position);
        for (; dn && !(Array.isArray(dn.treeBranch) && dn.parent instanceof hf);)
            dn = dn.parent;
        if (Array.isArray(null == dn ? void 0 : dn.treeBranch) && (null == dn ? void 0 : dn.parent) instanceof hf) {
            const en = dn.parent;
            let fn;
            switch (cn) {
                case 'after row':
                    d.addRowAfter(dn.treeBranch[0]), fn = bn.offsetOf(d.getCell(dn.treeBranch[0] + 1, 0)[0]);
                    break;
                case 'after column':
                    if (d.maxColumns <= d.colCount)
                        return void bn.announce('plonk');
                    d.addColumnAfter(dn.treeBranch[1]), fn = bn.offsetOf(d.getCell(dn.treeBranch[0], dn.treeBranch[1] + 1)[0]);
                    break;
                case 'before row':
                    d.addRowBefore(dn.treeBranch[0]), fn = bn.offsetOf(d.getCell(dn.treeBranch[0] - 1, 0)[0]);
                    break;
                case 'before column':
                    if (d.maxColumns <= d.colCount)
                        return void bn.announce('plonk');
                    d.addColumnBefore(dn.treeBranch[1]), fn = bn.offsetOf(d.getCell(dn.treeBranch[0], dn.treeBranch[1] - 1)[0]);
            }
            bn.setSelection(fn, fn + 1);
        }
    }

    function cn(dn) {
        return !!Yj(dn, {
            inputType: 'insertText'
        }) && (an(dn, 'after row'), $j(dn, {
            inputType: 'insertText'
        }), !0);
    }

    function dn(en) {
        return !!Yj(en, {
            inputType: 'insertText'
        }) && (an(en, 'after column'), $j(en, {
            inputType: 'insertText'
        }), !0);
    }

    function en(fn, gn) {
        let hn = fn.at(fn.position);
        for (; hn && !(Array.isArray(hn.treeBranch) && hn.parent instanceof hf);)
            hn = hn.parent;
        if (Array.isArray(null == hn ? void 0 : hn.treeBranch) && (null == hn ? void 0 : hn.parent) instanceof hf) {
            const jn = hn.parent,
                kn = hn.treeBranch;
            let ln;
            switch (gn) {
                case 'row':
                    if (d.rowCount > 1) {
                        d.removeRow(e[0]);
                        const mn = d.getCell(Math.max(0, e[0] - 1), e[1]);
                        ln = fn.offsetOf(gn[gn.length - 1]);
                    }
                    break;
                case 'column':
                    if (d.colCount > d.minColumns) {
                        d.removeColumn(e[1]);
                        const nn = d.getCell(e[0], Math.max(0, e[1] - 1));
                        ln = fn.offsetOf(gn[gn.length - 1]);
                    }
            }
            ln && fn.setPositionHandlingPlaceholder(ln);
        }
    }

    function kn(ln, mn, nn, on) {
        var pn, qn, rn, sn, tn, un;
        const vn = nn.parent;
        if (nn instanceof Ne) {
            const wn = !on && 'forward' === mn || 'body' === on && 'backward' === mn;
            let xn = e ? ln.offsetOf(nn.firstChild) : ln.offsetOf(nn.lastChild);
            return e ? '?' !== nn.rightDelim && '.' !== nn.rightDelim ? (nn.leftDelim = '.', nn.isDirty = !0) : (vn.addChildrenAfter(nn.removeBranch('body'), nn), vn.removeChild(nn), xn--) : '?' !== nn.leftDelim && '.' !== nn.leftDelim ? (nn.rightDelim = '.', nn.isDirty = !0) : (vn.addChildrenAfter(nn.removeBranch('body'), nn), vn.removeChild(nn), xn--), ln.position = xn, !0;
        }
        if ('surd' === nn.type) {
            if ('forward' === mn && !on || 'backward' === mn && 'body' === on) {
                const xn = nn.leftSibling;
                nn.hasChildren && vn.addChildrenAfter(nn.removeBranch('body'), nn), vn.removeChild(nn), ln.position = ln.offsetOf(mn);
            } else
                'forward' === mn && 'body' === on ? ln.position = ln.offsetOf(nn) : on || 'backward' !== mn ? 'above' === on && (nn.hasEmptyBranch('above') && nn.removeBranch('above'), ln.position = 'backward' === mn ? ln.offsetOf(nn.leftSibling) : ln.offsetOf(nn.body[0])) : nn.hasChildren ? ln.position = ln.offsetOf(nn.lastChild) : (ln.position = Math.max(0, ln.offsetOf(nn) - 1), vn.removeChild(nn));
            return !0;
        }
        if ('box' === nn.type || 'enclose' === nn.type) {
            const yn = on && 'backward' === mn || !on && 'forward' === mn ? nn.leftSibling : nn.lastChild;
            return vn.addChildrenAfter(nn.removeBranch('body'), nn), vn.removeChild(nn), ln.position = ln.offsetOf(e), !0;
        }
        if ('genfrac' === nn.type || 'overunder' === nn.type) {
            if (!on)
                return !('overunder' === nn.type && nn.hasEmptyBranch('body') || 'genfrac' === nn.type && nn.hasEmptyBranch('below') && nn.hasEmptyBranch('above') || (ln.position = ln.offsetOf('forward' === mn ? nn.firstChild : nn.lastChild), 0));
            const zn = 'numerator-denominator' === nn.context.fractionNavigationOrder ? 'above' : 'below',
                An = 'above' === e ? 'below' : 'above';
            if ('forward' === mn && on === e || 'backward' === mn && on === f) {
                const Bn = nn.removeBranch(e),
                    Cn = nn.removeBranch(f);
                return vn.addChildrenAfter([
                    ...mn,
                    ...on
                ], nn), vn.removeChild(nn), ln.position = ln.offsetOf(mn.length > 0 ? mn[mn.length - 1] : on[0]), !0;
            }
            return 'backward' === mn ? (ln.position = ln.offsetOf(nn.leftSibling), !0) : (ln.position = ln.offsetOf(nn), !0);
        }
        if (nn.isExtensibleSymbol || 'msubsup' === nn.type) {
            if (!on && 'forward' === mn)
                return !1;
            if (!on) {
                if (nn.subscript || nn.superscript) {
                    const Dn = 'forward' === mn ? null !== (f = null === (e = nn.superscript) || void 0 === e ? void 0 : e[0]) && void 0 !== f ? f : null === (g = nn.subscript) || void 0 === g ? void 0 : g[0] : null !== (i = null === (h = nn.subscript) || void 0 === h ? void 0 : h[0].lastSibling) && void 0 !== i ? i : null === (m = nn.superscript) || void 0 === m ? void 0 : m[0].lastSibling;
                    return on && (ln.position = ln.offsetOf(on)), !0;
                }
                return !1;
            }
            if (on && nn.hasEmptyBranch(on) && nn.removeBranch(on), !nn.hasChildren) {
                const En = 'forward' === mn ? ln.offsetOf(nn) : Math.max(0, ln.offsetOf(nn) - 1);
                return nn.parent.removeChild(nn), ln.position = on, !0;
            }
            if ('superscript' === on)
                if ('backward' === mn) {
                    const Fn = ln.offsetOf(nn.firstChild) - 1;
                    ln.position = mn;
                } else
                    nn.subscript ? ln.position = ln.offsetOf(nn.subscript[0]) : ln.position = ln.offsetOf(nn);
            else
                'subscript' === on && ('backward' === mn && nn.superscript ? ln.position = ln.offsetOf(nn.superscript[0].lastSibling) : ln.position = 'backward' === mn ? ln.offsetOf(nn.firstChild) - 1 : ln.offsetOf(nn));
            return !0;
        }
        return !1;
    }

    function Cn(Dn, En, Fn) {
        const Gn = Dn.getAtoms(En);
        if (d.length > 0 && d[0].parent) {
            let Hn = d[0].parent.firstChild;
            'first' === Hn.type && (Hn = Hn.rightSibling);
            const In = d[d.length - 1].parent.lastChild;
            let Jn = d[0];
            'first' === Jn.type && (Jn = Jn.rightSibling);
            const Kn = d[d.length - 1];
            if (Jn === Hn && g === e) {
                const Ln = d[0].parent;
                'root' !== Hn.type && (En = [
                    Dn.offsetOf(Hn.leftSibling),
                    Dn.offsetOf(Hn.rightSibling)
                ]);
            }
        }
        return Dn.deferNotifications({
            content: !0,
            selection: !0,
            type: Fn
        }, () => Dn.deleteAtoms(En));
    }

    function Hn(In, Jn) {
        const Kn = In.at(Jn);
        let Ln;
        if (Kn) {
            Ln = Kn.mode;
            let Mn = Kn.parent;
            for (; !Ln && Mn;)
                Mn && (Ln = Mn.mode), Mn = Mn.parent;
        }
        return Ln;
    }

    function Jn(Kn, Ln) {
        Kn && Ln && (d(Kn) ? Kn.forEach(Mn => Jn(Mn, Ln)) : 'object' == typeof Kn && (Kn.style.color || Kn.style.backgroundColor || Kn.style.fontFamily || Kn.style.fontShape || Kn.style.fontSeries || Kn.style.fontSize || Kn.style.variant || Kn.style.variantStyle || (Kn.applyStyle(Ln), Jn(Kn.body, Ln), Jn(Kn.above, Ln), Jn(Kn.below, Ln), Jn(Kn.subscript, Ln), Jn(Kn.superscript, Ln))));
    }

    function Kn(Ln, Mn, Nn, On) {
        function Pn(Qn, Rn) {
            for (const Sn of f)
                if (Nn.style[Qn] !== Rn)
                    return !1;
            return !0;
        }
        if ((Mn = Ln.normalizeRange(Mn))[0] === Mn[1])
            return !1;
        const Rn = Ln.getAtoms(Mn, {
            includeChildren: !0
        });
        'toggle' === On.operation && (Nn.color && Pn('color', Nn.color) && (Nn.color = 'none', Nn.verbatimColor = void 0), Nn.backgroundColor && Pn('backgroundColor', Nn.backgroundColor) && (Nn.backgroundColor = 'none', Nn.verbatimBackgroundColor = void 0), Nn.fontFamily && Pn('fontFamily', Nn.fontFamily) && (Nn.fontFamily = 'none'), Nn.fontSeries && Pn('fontSeries', Nn.fontSeries) && (Nn.fontSeries = 'auto'), Nn.fontShape && Pn('fontShape', Nn.fontShape) && (Nn.fontShape = 'auto'), Nn.fontSize && Pn('fontSize', Nn.fontSize) && (Nn.fontSize = 5));
        for (const Sn of f)
            Ln.applyStyle(Nn);
        return !0;
    }

    function On(Pn, Qn, Rn) {
        if ('text' !== Pn.at(Qn).mode)
            return Qn;
        const Sn = 'backward' === Rn ? -1 : 1;
        let Tn;
        if (ab.test(Pn.at(Qn).value)) {
            let Un, Vn = Qn;
            do {
                Un = 'text' === Pn.at(Vn).mode && ab.test(Pn.at(Vn).value), Vn += d;
            } while (Pn.at(Vn) && Un);
            Tn = Pn.at(Vn) ? Vn - 2 * d : Vn - d;
        } else if (/\s/.test(Pn.at(Qn).value)) {
            let Un = Qn;
            for (; Pn.at(Un) && 'text' === Pn.at(Un).mode && /\s/.test(Pn.at(Un).value);)
                Un += d;
            if (Pn.at(Un)) {
                let Vn = !0;
                do {
                    Vn = 'text' === Pn.at(Un).mode && !/\s/.test(Pn.at(Un).value), Un += d;
                } while (Pn.at(Un) && Vn);
                Tn = Pn.at(Un) ? Un - 2 * d : Un - d;
            } else
                Tn = Un - d;
        } else {
            let Un = Qn;
            for (; Pn.at(Un) && 'text' === Pn.at(Un).mode && !/\s/.test(Pn.at(Un).value);)
                Un += d;
            Tn = Pn.at(Un) ? Un : Un - d;
            let Vn = !0;
            for (; Pn.at(Un) && Vn;)
                Vn = 'text' === Pn.at(Un).mode && /\s/.test(Pn.at(Un).value), Vn && (Tn = Un), Un += d;
            Tn = Pn.at(Un) ? Un - 2 * d : Un - d;
        }
        return Tn - (d > 0 ? 0 : 1);
    }

    function Qn(Rn, Sn, Tn) {
        var Un, Vn, Wn, Xn, Yn, Zn, $n;
        const ao = Rn.position;
        null !== (d = null == Tn ? void 0 : Tn.extend) && void 0 !== d && d || Rn.collapseSelection(Sn);
        let bo = Rn.at(Rn.position);
        if ('forward' === Sn && ('msubsup' === bo.type ? (bo = bo.rightSibling, bo || (bo = Rn.at(Rn.position + 1))) : bo = Rn.at(Rn.position + 1)), !bo)
            return Rn.announce('plonk'), !1;
        let co = Rn.offsetOf(bo);
        if (bo instanceof Se)
            co = On(Rn, co, Sn);
        else if (bo instanceof Bf)
            if (bo.isSuggestion)
                for (; bo && bo instanceof Bf;)
                    bo.isSuggestion = !1, co = Rn.offsetOf(bo), bo = bo.rightSibling;
            else if ('forward' === Sn) {
            if (bo = bo.rightSibling, !(bo && bo instanceof Bf))
                return Rn.announce('plonk'), !1;
            for (; bo && bo instanceof Bf && /[a-zA-Z\*]/.test(bo.value);)
                co = Rn.offsetOf(bo), bo = bo.rightSibling;
        } else {
            if (bo = bo.leftSibling, !(bo && bo instanceof Bf))
                return Rn.announce('plonk'), !1;
            for (; bo && bo instanceof Bf && /[a-zA-Z\*]/.test(bo.value);)
                co = Rn.offsetOf(bo), bo = bo.leftSibling;
        } else if ('forward' === Sn && 'mopen' === bo.type) {
            let eo = 0;
            do {
                'mopen' === bo.type ? eo += 1 : 'mclose' === bo.type && (eo -= 1), bo = bo.rightSibling;
            } while (!bo.isLastSibling && 0 !== eo);
            co = Rn.offsetOf(bo.leftSibling);
        } else if ('backward' === Sn && 'mclose' === bo.type) {
            let eo = 0;
            do {
                'mopen' === bo.type ? eo += 1 : 'mclose' === bo.type && (eo -= 1), bo = bo.leftSibling;
            } while (!bo.isFirstSibling && 0 !== eo);
            co = Rn.offsetOf(bo);
        } else if ('backward' === Sn)
            if ('first' === bo.type)
                for (; co > 0 && 'first' === bo.type;)
                    co -= 1, bo = Rn.at(co);
            else {
                const eo = bo.type;
                'msubsup' === bo.type && (co = Rn.offsetOf(Rn.at(co).leftSibling)), co -= 1;
                let fo = null === (e = Rn.at(co)) || void 0 === e ? void 0 : e.type;
                for (; co >= 0 && fo === Sn;)
                    'msubsup' === (null === (f = Rn.at(co)) || void 0 === f ? void 0 : f.type) ? co = Rn.offsetOf(Rn.at(co).leftSibling) : co -= 1, fo = Rn.at(co).type;
            }
        else {
            const {
                type: fo
            } = bo;
            let go = null === (g = Rn.at(co)) || void 0 === g ? void 0 : g.type;
            const {
                lastOffset: ho
            } = Rn;
            for (; co <= d && (go === Sn || 'msubsup' === go);) {
                for (;
                    'msubsup' === (null === (h = Rn.at(co).rightSibling) || void 0 === h ? void 0 : h.type);)
                    co = Rn.offsetOf(Rn.at(co).rightSibling);
                co += 1, go = null === (i = Rn.at(co)) || void 0 === i ? void 0 : i.type;
            }
            co -= 1;
        }
        if (null !== (m = null == Tn ? void 0 : Tn.extend) && void 0 !== m && m) {
            if (!Rn.setSelection(Rn.anchor, co))
                return Rn.announce('plonk'), !1;
        } else {
            if (co === Rn.position)
                return Rn.announce('plonk'), !1;
            Rn.position = co;
        }
        return Rn.announce('move', ao), !0;
    }

    function bo(co, eo, fo) {
        var go, ho, io, jo, ko, lo, mo, no;
        if (fo = null != fo ? fo : {
                extend: !1
            }, 'forward' !== eo) {
            const [oo, po] = ek(co);
            void 0 !== oo && void 0 !== po && co.deleteAtoms([
                oo,
                po
            ]);
        }
        if ('upward' === eo)
            return function(oo, po) {
                var qo, ro, so, to;
                const uo = null !== (qo = null == po ? void 0 : po.extend) && void 0 !== qo && qo;
                uo || oo.collapseSelection('backward');
                const vo = oo.at(oo.position);
                let wo = vo;
                for (; wo && 'below' !== wo.treeBranch && !(Array.isArray(wo.treeBranch) && wo.parent instanceof hf);)
                    wo = wo.parent;
                if (Array.isArray(null == wo ? void 0 : wo.treeBranch) && wo.parent instanceof hf) {
                    const xo = wo.parent,
                        yo = Math.max(0, wo.treeBranch[0] - 1);
                    _mo(oo, vo, xo.array[yo][wo.treeBranch[1]], uo, 'up');
                } else {
                    if (!wo) {
                        let zo = !0;
                        return oo.suppressChangeNotifications || (zo = null === (to = null === (so = oo.mathfield.host) || void 0 === so ? void 0 : so.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'upward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === to || to), oo.announce(zo ? 'plonk' : 'line'), zo;
                    }
                    _mo(oo, vo, null !== (ro = wo.parent.branch('above')) && void 0 !== ro ? ro : wo.parent.createBranch('above'), uo, 'up');
                }
                return !0;
            }(co, fo);
        if ('downward' === eo)
            return function(oo, po) {
                var qo, ro, so, to;
                const uo = null !== (qo = null == po ? void 0 : po.extend) && void 0 !== qo && qo;
                uo || oo.collapseSelection('forward');
                const vo = oo.at(oo.position);
                let wo = vo;
                for (; wo && 'above' !== wo.treeBranch && !(Array.isArray(wo.treeBranch) && wo.parent instanceof hf);)
                    wo = wo.parent;
                if (Array.isArray(null == wo ? void 0 : wo.treeBranch) && wo.parent instanceof hf) {
                    const xo = wo.parent,
                        yo = Math.min(xo.array.length - 1, wo.treeBranch[0] + 1);
                    _mo(oo, vo, xo.array[yo][wo.treeBranch[1]], uo, 'down');
                } else {
                    if (!wo) {
                        let zo = !0;
                        return oo.suppressChangeNotifications || (zo = null === (to = null === (so = oo.mathfield.host) || void 0 === so ? void 0 : so.dispatchEvent(new CustomEvent('move-out', {
                            detail: {
                                direction: 'downward'
                            },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0
                        }))) || void 0 === to || to), oo.announce(zo ? 'plonk' : 'line'), zo;
                    }
                    _mo(oo, vo, null !== (ro = wo.parent.branch('below')) && void 0 !== ro ? ro : wo.parent.createBranch('below'), uo, 'down');
                }
                return !0;
            }(co, fo);
        const oo = co.position;
        if (fo.extend)
            return co.extendSelection(eo);
        if (co.selectionIsPlaceholder)
            return co.collapseSelection(eo), bo(co, eo);
        if (!co.collapseSelection(eo)) {
            let po = co.position + ('forward' === eo ? 1 : -1),
                qo = co.at(po);
            if (po >= 0 && po <= co.lastOffset)
                if ('forward' === eo)
                    if (qo.inCaptureSelection) {
                        for (; !qo.captureSelection;)
                            qo = qo.parent;
                        po = co.offsetOf(qo);
                    } else if (!qo.isFirstSibling && qo.isLastSibling && (null === (d = qo.parent) || void 0 === d ? void 0 : d.skipBoundary)) {
                if (po + 1 !== co.lastOffset)
                    return co.position = po, bo(co, 'forward', fo);
                po += 1;
            } else
                (null === (e = qo.parent) || void 0 === e ? void 0 : e.skipBoundary) && (null === (f = qo.rightSibling) || void 0 === f ? void 0 : f.isLastSibling) ? po += 2 : (null === (g = qo.parent) || void 0 === g ? void 0 : g.skipBoundary) && 'first' === qo.type ? po += 1 : qo instanceof Bf && qo.isSuggestion && (qo.isSuggestion = !1);
            else if ('backward' === eo)
                if (null === (h = qo.parent) || void 0 === h ? void 0 : h.inCaptureSelection) {
                    for (; !qo.captureSelection;)
                        qo = qo.parent;
                    po = Math.max(0, co.offsetOf(qo.leftSibling));
                } else
                    (qo.skipBoundary || (null === (i = qo.parent) || void 0 === i ? void 0 : i.skipBoundary) && 'first' === qo.type) && (po = Math.max(0, co.position - 2));
            if (po < 0 || po > co.lastOffset) {
                let ro = !0;
                return co.suppressChangeNotifications || (ro = null === (no = null === (m = co.mathfield.host) || void 0 === m ? void 0 : m.dispatchEvent(new CustomEvent('move-out', {
                    detail: {
                        direction: eo
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) || void 0 === no || no), ro && co.announce('plonk'), ro;
            }
            co.setPositionHandlingPlaceholder(po);
        }
        return co.announce('move', q), !0;
    }

    function _mo(no, oo, po, qo, ro) {
        const so = $i(no.mathfield.getHTMLElement(oo)).right,
            to = no.offsetOf(function(uo, vo, wo) {
                let xo = 1 / 0,
                    yo = 0;
                for (; yo < vo.length; yo++) {
                    const zo = $i(uo.getHTMLElement(vo[yo])).right,
                        Ao = Math.abs(wo - zo);
                    if (!(Ao <= xo))
                        break;
                    xo = Ao;
                }
                return vo[yo - 1];
            }(no.mathfield, po, f));
        if (qo) {
            const [uo, vo] = no.selection.ranges[0];
            let wo;
            wo = g < ('up' === ro ? uo : vo) ? {
                ranges: [
                    [
                        g,
                        vo
                    ]
                ],
                direction: 'backward'
            } : {
                ranges: [
                    [
                        uo,
                        g
                    ]
                ],
                direction: 'forward'
            }, no.setSelection(wo);
        } else
            no.setPositionHandlingPlaceholder(g);
        no.announce(`move ${ ro }`);
    }

    function po(qo) {
        const ro = qo.position,
            so = qo.at(ro).parent;
        return so && 'root' !== so.type ? (qo.position = qo.offsetOf(so), qo.announce('move', ro), !0) : (qo.announce('plonk'), !1);
    }

    function so(to) {
        var uo;
        if (to.collapseSelection(), function(vo) {
                let wo = 0,
                    xo = vo.at(vo.position),
                    yo = !1;
                for (; xo;)
                    xo.hasEmptyBranch('superscript') && xo.hasEmptyBranch('subscript') || (wo += 1), xo.hasEmptyBranch('superscript') ? xo.hasEmptyBranch('subscript') || (yo = !1) : yo = !0, xo = xo.parent;
                return yo ? wo : 0;
            }(to) >= to.mathfield.options.scriptDepth[1])
            return to.announce('plonk'), !1;
        let vo = to.at(to.position);
        return void 0 === vo.subsupPlacement && ('msubsup' !== (null === (uo = vo.rightSibling) || void 0 === uo ? void 0 : uo.type) && vo.parent.addChildAfter(new Oe(to.mathfield, {
            style: vo.computedStyle
        }), vo), vo = vo.rightSibling), vo.createBranch('superscript'), to.setSelection(to.getSiblingsRange(to.offsetOf(vo.superscript[0]))), !0;
    }

    function uo(vo) {
        var wo;
        if (vo.collapseSelection(), function(xo) {
                let yo = 0,
                    zo = xo.at(xo.position),
                    Ao = !1;
                for (; zo;)
                    zo.hasEmptyBranch('superscript') && zo.hasEmptyBranch('subscript') || (yo += 1), zo.hasEmptyBranch('superscript') ? zo.hasEmptyBranch('subscript') || (Ao = !0) : Ao = !1, zo = zo.parent;
                return Ao ? yo : 0;
            }(vo) >= vo.mathfield.options.scriptDepth[0])
            return vo.announce('plonk'), !1;
        let xo = vo.at(vo.position);
        return void 0 === xo.subsupPlacement && ('msubsup' !== (null === (wo = vo.at(vo.position + 1)) || void 0 === wo ? void 0 : wo.type) && xo.parent.addChildAfter(new Oe(vo.mathfield, {
            style: vo.at(vo.position).computedStyle
        }), xo), xo = vo.at(vo.position + 1)), xo.createBranch('subscript'), vo.setSelection(vo.getSiblingsRange(vo.offsetOf(xo.subscript[0]))), !0;
    }

    function wo(xo, yo, zo = !0) {
        var Ao, Bo;
        const Co = 'forward' === yo ? 1 : -1;
        'placeholder' === xo.at(xo.anchor).type && bo(xo, yo);
        const Do = xo.getAllAtoms(Math.max(xo.position + g, 0));
        'backward' === yo && h.reverse();
        const Eo = h.filter(Fo => 'placeholder' === Fo.type || Fo.treeDepth > 2 && Fo.isFirstSibling && Fo.isLastSibling);
        if (0 === i.length) {
            if (!zo || null !== (f = null === (d = xo.mathfield.host) || void 0 === d ? void 0 : d.dispatchEvent(new CustomEvent('focus-out', {
                    detail: {
                        direction: yo
                    },
                    cancelable: !0,
                    bubbles: !0,
                    composed: !0
                }))) && void 0 !== f && !f)
                return xo.announce('plonk'), !1;
            const Fo = function() {
                function Go(Ho) {
                    var Io;
                    return !((Io = Ho).disabled || 'hidden' === Io.type && 'INPUT' === Io.tagName.toUpperCase() || function(Jo) {
                        if (!e() || Jo === document.activeElement || Jo.contains(document.activeElement))
                            return !1;
                        if ('hidden' === getComputedStyle(Jo).visibility)
                            return !0;
                        const Ko = Jo.getBoundingClientRect();
                        if (0 === Ko.width || 0 === Ko.height)
                            return !0;
                        for (; Jo;) {
                            if ('none' === getComputedStyle(Jo).display)
                                return !0;
                            Jo = Jo.parentElement;
                        }
                        return !1;
                    }(Io) || function(Jo) {
                        return 'INPUT' === Jo.tagName.toUpperCase() && 'radio' === Jo.type && ! function(Ko) {
                            var Lo;
                            if (!Ko.name)
                                return !0;
                            const Mo = function(No, Oo) {
                                for (const Po of No)
                                    if (Po.checked && Po.form === Oo)
                                        return Po;
                                return null;
                            }((null !== (Lo = Ko.form) && void 0 !== Lo ? Lo : Ko.ownerDocument).querySelectorAll('input[type="radio"][name="' + Ko.name + '"]'), Ko.form);
                            return !Mo || Mo === Ko;
                        }(Jo);
                    }(Ho) || yo(Ho) < 0);
                }

                function Io(Jo) {
                    var Ko;
                    const Lo = Number.parseInt(null !== (Io = Jo.getAttribute('tabindex')) && void 0 !== Io ? Io : 'NaN', 10);
                    return Number.isNaN(Lo) ? 'true' === Jo.contentEditable ? 0 : 'AUDIO' !== Jo.nodeName && 'VIDEO' !== Jo.nodeName || null !== Jo.getAttribute('tabindex') ? Jo.tabIndex : 0 : Lo;
                }
                return e() ? function(Lo) {
                    const Mo = [],
                        No = [];
                    return [...Lo.querySelectorAll('input, select, textarea, a[href], button,\n        [tabindex], audio[controls], video[controls],\n        [contenteditable]:not([contenteditable="false"]), details>summary')].filter(Go).forEach((Oo, Po) => {
                        const Qo = Io(Oo);
                        0 === Qo ? Mo.push(Oo) : No.push({
                            documentOrder: Po,
                            tabIndex: Qo,
                            node: Oo
                        });
                    }), No.sort((Oo, Po) => Oo.tabIndex === Po.tabIndex ? Oo.documentOrder - Po.documentOrder : Oo.tabIndex - Po.tabIndex).map(Oo => Oo.node).concat(Mo);
                }(document.body) : [];
            }();
            if (!document.activeElement || 1 === h.length)
                return xo.announce('plonk'), !1;
            let Go = h.indexOf(document.activeElement) + g;
            return !!(document.activeElement instanceof _ss && m(document.activeElement, yo, g)) || (Go < 0 && (Go = h.length - 1), Go >= h.length && (Go = 0), !!(h[Go] instanceof _ss && m(h[Go], yo, g)) || (h[Go].focus(), 0 !== Go || (xo.announce('plonk'), !1)));
        }

        function Go(Ho, Io, Jo) {
            var Ko, Lo, Mo;
            const No = [...null !== (e = null === (d = Ho.shadowRoot) || void 0 === d ? void 0 : d.querySelectorAll('math-field')) && void 0 !== e ? e : []];
            if (g.length) {
                const Oo = null === (f = Ho.shadowRoot) || void 0 === f ? void 0 : f.activeElement,
                    Po = g.indexOf(d);
                let Qo = e + Jo;
                if (e < 0 && 'backward' === Io && (Qo = g.length - 1), Qo >= 0 && Qo < g.length)
                    return g[Qo].focus(), !0;
            }
            return !1;
        }
        const No = xo.position,
            Oo = xo.offsetOf(i[0]);
        return 'placeholder' === i[0].type ? xo.setSelection(q - 1, q) : xo.position = q, xo.announce('move', No), !0;
    }

    function Lo(Mo) {
        var No, Oo, Po, Qo, Ro, So;
        if ('text' === Hn(Mo, Mo.position)) {
            let To = Math.min(Mo.anchor, Mo.position),
                Uo = Math.max(Mo.anchor, Mo.position),
                Vo = !1;
            for (; !Vo && To > 0;) {
                const Wo = Mo.at(To);
                'text' === Uo.mode && ab.test(Uo.value) ? To -= 1 : Vo = !0;
            }
            for (Vo = !1; !Vo && Uo <= Mo.lastOffset;) {
                const Xo = Mo.at(Uo);
                'text' === To.mode && ab.test(To.value) ? Uo += 1 : Vo = !0;
            }
            if (Vo && (Uo -= 1), To >= Uo)
                return Mo.setSelection(Uo - 1, Uo), !0;
            Mo.setSelection(To, Uo);
        } else {
            const Vo = Mo.at(Mo.position);
            if (h.isDigit()) {
                let Wo = Math.min(Mo.anchor, Mo.position),
                    Xo = Math.max(Mo.anchor, Mo.position);
                for (; null === (Xo = Mo.at(Wo)) || void 0 === Xo ? void 0 : Xo.isDigit();)
                    Wo -= 1;
                for (; null === (Wo = Mo.at(Xo)) || void 0 === Wo ? void 0 : Wo.isDigit();)
                    Xo += 1;
                Mo.setSelection(Wo, Xo - 1);
            } else if (h.style.variant || h.style.variantStyle) {
                let Wo = Math.min(Mo.anchor, Mo.position),
                    Xo = Math.max(Mo.anchor, Mo.position),
                    Yo = null === (d = Mo.at(Wo)) || void 0 === d ? void 0 : d.style;
                for (; Yo && Yo.variant === h.style.variant && Yo.variantStyle === h.style.variantStyle;)
                    Wo -= 1, Yo = null === (e = Mo.at(Wo)) || void 0 === e ? void 0 : e.style;
                for (Yo = null === (f = Mo.at(Xo)) || void 0 === f ? void 0 : f.style; Yo && Yo.variant === h.style.variant && Yo.variantStyle === h.style.variantStyle;)
                    Xo += 1, Yo = null === (g = Mo.at(Xo)) || void 0 === g ? void 0 : g.style;
                Mo.setSelection(Wo, Xo - 1);
            } else
                Mo.setSelection(Mo.offsetOf(h.firstSibling), Mo.offsetOf(h.lastSibling));
        }
        return !0;
    }
    pl({
        addRowAfter: cn,
        addColumnAfter: dn,
        addRowBefore: function(Vo) {
            return !!Yj(Vo, {
                inputType: 'insertText'
            }) && (an(Vo, 'before row'), $j(Vo, {
                inputType: 'insertText'
            }), !0);
        },
        addColumnBefore: function(Vo) {
            return !!Yj(Vo, {
                inputType: 'insertText'
            }) && (an(Vo, 'before column'), $j(Vo, {
                inputType: 'insertText'
            }), !0);
        },
        removeRow: function(Vo) {
            return !!Yj(Vo, {
                inputType: 'deleteContent'
            }) && (en(Vo, 'row'), $j(Vo, {
                inputType: 'deleteContent'
            }), !0);
        },
        removeColumn: function(Vo) {
            return !!Yj(Vo, {
                inputType: 'deleteContent'
            }) && (en(Vo, 'column'), $j(Vo, {
                inputType: 'deleteContent'
            }), !0);
        }
    }, {
        target: 'model',
        category: 'array-edit'
    }), pl({
        deleteAll: Vo => Yj(Vo, {
            inputType: 'deleteContent'
        }) && Cn(Vo, [
            0,
            -1
        ], 'deleteContent'),
        deleteForward: Vo => function(Wo) {
            return !!Yj(Wo, {
                inputType: 'deleteContentForward'
            }) && (Wo.selectionIsCollapsed ? Wo.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentForward'
            }, () => {
                var Xo, Yo;
                let Zo = Wo.at(Wo.position).rightSibling;
                if (Zo && kn(Wo, 'forward', Zo))
                    return;
                if (Zo) {
                    if (Wo.at(Wo.position).isLastSibling && kn(Wo, 'forward', Zo.parent, Zo.treeBranch))
                        return;
                } else {
                    if (Zo = Wo.at(Wo.position), Zo.isLastSibling && kn(Wo, 'forward', Zo.parent, Zo.treeBranch))
                        return;
                    Zo = null;
                }
                if (Wo.position === Wo.lastOffset || !Zo)
                    return void Wo.announce('plonk');
                Zo.parent.removeChild(Zo);
                let $o = null === (Xo = Wo.at(Wo.position)) || void 0 === Xo ? void 0 : Xo.rightSibling;
                for (;
                    'msubsup' === (null == $o ? void 0 : $o.type);)
                    $o.parent.removeChild($o), $o = null === (Yo = Wo.at(Wo.position)) || void 0 === Yo ? void 0 : Yo.rightSibling;
                Wo.announce('delete', void 0, [Zo]);
            }) : Cn(Wo, mg(Wo.selection), 'deleteContentForward'));
        }(Vo),
        deleteBackward: Vo => function(Wo) {
            return !!Yj(Wo, {
                inputType: 'deleteContentBackward'
            }) && (Wo.selectionIsCollapsed ? Wo.deferNotifications({
                content: !0,
                selection: !0,
                type: 'deleteContentBackward'
            }, () => {
                let Xo = Wo.at(Wo.position);
                if (!Xo || !kn(Wo, 'backward', Xo)) {
                    if (null == Xo ? void 0 : Xo.isFirstSibling) {
                        if (kn(Wo, 'backward', Xo.parent, Xo.treeBranch))
                            return;
                        Xo = null;
                    }
                    Xo ? (Wo.position = Wo.offsetOf(Xo.leftSibling), Xo.parent.removeChild(Xo), Wo.announce('delete', void 0, [Xo])) : Wo.announce('plonk');
                }
            }) : Cn(Wo, mg(Wo.selection), 'deleteContentBackward'));
        }(Vo),
        deleteNextWord: Vo => Yj(Vo, {
            inputType: 'deleteWordForward'
        }) && Cn(Vo, [
            Vo.anchor,
            On(Vo, Vo.position, 'forward')
        ], 'deleteWordForward'),
        deletePreviousWord: Vo => Yj(Vo, {
            inputType: 'deleteWordBackward'
        }) && Cn(Vo, [
            Vo.anchor,
            On(Vo, Vo.position, 'backward')
        ], 'deleteWordBackward'),
        deleteToGroupStart: Vo => Yj(Vo, {
            inputType: 'deleteSoftLineBackward'
        }) && Cn(Vo, [
            Vo.anchor,
            Vo.offsetOf(Vo.at(Vo.position).firstSibling)
        ], 'deleteSoftLineBackward'),
        deleteToGroupEnd: Vo => Yj(Vo, {
            inputType: 'deleteSoftLineForward'
        }) && Cn(Vo, [
            Vo.anchor,
            Vo.offsetOf(Vo.at(Vo.position).lastSibling)
        ], 'deleteSoftLineForward'),
        deleteToMathFieldStart: Vo => Yj(Vo, {
            inputType: 'deleteHardLineBackward'
        }) && Cn(Vo, [
            Vo.anchor,
            0
        ], 'deleteHardLineBackward'),
        deleteToMathFieldEnd: Vo => Yj(Vo, {
            inputType: 'deleteHardLineForward'
        }) && Cn(Vo, [
            Vo.anchor,
            -1
        ], 'deleteHardLineForward')
    }, {
        target: 'model',
        category: 'delete'
    }), pl({
        moveToOpposite: Vo => {
            const Wo = Vo.at(Vo.position),
                {
                    parent: Xo
                } = Wo;
            if (!Xo)
                return Vo.announce('plonk'), !1;
            const Yo = Wo.treeBranch;
            let Zo;
            return 'string' == typeof Yo && (Zo = {
                superscript: 'subscript',
                subscript: 'superscript',
                above: 'below',
                below: 'above'
            } [Yo]), Zo ? (Xo.branch(Zo) || Xo.createBranch(Zo), Vo.setSelection(Vo.getBranchRange(Vo.offsetOf(Xo), Zo))) : Wo.subsupPlacement ? uo(Vo) : so(Vo);
        },
        moveBeforeParent: Vo => {
            const {
                parent: Wo
            } = Vo.at(Vo.position);
            return Wo ? (Vo.position = Vo.offsetOf(Wo), !0) : (Vo.announce('plonk'), !1);
        },
        moveAfterParent: Vo => po(Vo),
        moveToNextPlaceholder: Vo => wo(Vo, 'forward'),
        moveToPreviousPlaceholder: Vo => wo(Vo, 'backward'),
        moveToNextChar: Vo => bo(Vo, 'forward'),
        moveToPreviousChar: Vo => bo(Vo, 'backward'),
        moveUp: Vo => bo(Vo, 'upward'),
        moveDown: Vo => bo(Vo, 'downward'),
        moveToNextWord: Vo => Qn(Vo, 'forward'),
        moveToPreviousWord: Vo => Qn(Vo, 'backward'),
        moveToGroupStart: Vo => {
            const Wo = Vo.offsetOf(Vo.at(Vo.position).firstSibling);
            return Wo === Vo.position ? (Vo.announce('plonk'), !1) : (Vo.position = Wo, !0);
        },
        moveToGroupEnd: Vo => {
            const Wo = Vo.offsetOf(Vo.at(Vo.position).lastSibling);
            return Wo === Vo.position ? (Vo.announce('plonk'), !1) : (Vo.position = Wo, !0);
        },
        moveToMathFieldStart: Vo => 0 === Vo.position ? (Vo.announce('plonk'), !1) : (Vo.position = 0, !0),
        moveToMathFieldEnd: Vo => Vo.position === Vo.lastOffset ? (Vo.announce('plonk'), !1) : (Vo.position = Vo.lastOffset, !0),
        moveToSuperscript: Vo => so(Vo),
        moveToSubscript: Vo => uo(Vo)
    }, {
        target: 'model',
        category: 'selection-anchor'
    }), pl({
        selectGroup: Vo => {
            const Wo = Lo(Vo);
            return Wo || Vo.announce('plonk'), Wo;
        },
        selectAll: Vo => Vo.setSelection(0, Vo.lastOffset),
        extendSelectionForward: Vo => {
            const Wo = Vo.extendSelection('forward');
            return Wo || Vo.announce('plonk'), Wo;
        },
        extendSelectionBackward: Vo => {
            const Wo = Vo.extendSelection('backward');
            return Wo || Vo.announce('plonk'), Wo;
        },
        extendToNextWord: Vo => Qn(Vo, 'forward', {
            extend: !0
        }),
        extendToPreviousWord: Vo => Qn(Vo, 'backward', {
            extend: !0
        }),
        extendSelectionUpward: Vo => bo(Vo, 'upward', {
            extend: !0
        }),
        extendSelectionDownward: Vo => bo(Vo, 'downward', {
            extend: !0
        }),
        extendToNextBoundary: Vo => Qn(Vo, 'forward', {
            extend: !0
        }),
        extendToPreviousBoundary: Vo => Qn(Vo, 'backward', {
            extend: !0
        }),
        extendToGroupStart: Vo => {
            const Wo = Vo.setSelection(Vo.anchor, Vo.offsetOf(Vo.at(Vo.position).firstSibling));
            return Wo || Vo.announce('plonk'), Wo;
        },
        extendToGroupEnd: Vo => {
            const Wo = Vo.setSelection(Vo.anchor, Vo.offsetOf(Vo.at(Vo.position).lastSibling));
            return Wo || Vo.announce('plonk'), Wo;
        },
        extendToMathFieldStart: Vo => {
            const Wo = Vo.setSelection(Vo.anchor, 0);
            return Wo || Vo.announce('plonk'), Wo;
        },
        extendToMathFieldEnd: Vo => {
            const Wo = Vo.setSelection(Vo.anchor, Vo.lastOffset);
            return Wo || Vo.announce('plonk'), Wo;
        }
    }, {
        target: 'model',
        category: 'selection-extend'
    });
    class Vo {
        get element() {
            if (this._element)
                return this._element;
            const Wo = document.createElement('div');
            return Wo.setAttribute('role', 'presentation'), Wo.style.position = 'fixed', Wo.style.contain = 'content', Wo.style.top = '0', Wo.style.left = '0', Wo.style.right = '0', Wo.style.bottom = '0', Wo.style.zIndex = 'var(--scrim-zindex, 10099)', Wo.style.outline = 'none', this.translucent ? (Wo.style.background = 'rgba(255, 255, 255, .2)', Wo.style.backdropFilter = 'contrast(40%)') : Wo.style.background = 'transparent', this._element = Wo, Wo;
        }
        open(Wo) {
            var Xo;
            if ('closed' !== this.state)
                return;
            this.state = 'opening', this.savedActiveElement = _Wo();
            const {
                element: Yo
            } = this;
            (null !== (Xo = null == Wo ? void 0 : Wo.root) && void 0 !== Xo ? Xo : document.body).appendChild(Yo), Yo.addEventListener('click', this), document.addEventListener('touchmove', this, !1), document.addEventListener('scroll', this, !1);
            const Zo = window.innerWidth - document.documentElement.clientWidth;
            this.savedMarginRight = document.body.style.marginRight, this.savedOverflow = document.body.style.overflow, document.body.style.overflow = 'hidden';
            const $o = Number.parseFloat(getComputedStyle(document.body).marginRight);
            document.body.style.marginRight = `${ $o + Zo }px`, (null == Wo ? void 0 : Wo.child) && Yo.append(Wo.child), this.state = 'open';
        }
        close() {
            var Wo, Xo, Yo, Zo;
            if ('open' !== this.state)
                return;
            this.state = 'closing', 'function' == typeof this.onClose && this.onClose();
            const {
                element: $o
            } = this;
            $o.removeEventListener('click', this), document.removeEventListener('touchmove', this, !1), document.removeEventListener('scroll', this, !1), $o.remove(), document.body.style.overflow = null !== (Wo = this.savedOverflow) && void 0 !== Wo ? Wo : '', document.body.style.marginRight = null !== (Xo = this.savedMarginRight) && void 0 !== Xo ? Xo : '', _Wo() !== this.savedActiveElement && (null === (Zo = null === (Yo = this.savedActiveElement) || void 0 === Yo ? void 0 : Yo.focus) || void 0 === Zo || Zo.call(Yo)), $o.innerHTML = '', this.state = 'closed';
        }
        handleEvent(Wo) {
            this.preventOverlayClose || (Wo.target === this._element && 'click' === Wo.type ? (this.close(), Wo.preventDefault(), Wo.stopPropagation()) : Wo.target !== document || 'touchmove' !== Wo.type && 'scroll' !== Wo.type || (this.close(), Wo.preventDefault(), Wo.stopPropagation()));
        }
        constructor(Wo) {
            var Xo, Yo;
            this.preventOverlayClose = null !== (Xo = null == Wo ? void 0 : Wo.preventOverlayClose) && void 0 !== Xo && Xo, this.translucent = null !== (Yo = null == Wo ? void 0 : Wo.translucent) && void 0 !== Yo && Yo, this.state = 'closed';
        }
    }

    function _Wo() {
        var Xo;
        let Yo = document.activeElement;
        for (; null === (Xo = null == Yo ? void 0 : Yo.shadowRoot) || void 0 === Xo ? void 0 : Xo.activeElement;)
            Yo = Yo.shadowRoot.activeElement;
        return Yo;
    }
    const Yo = new Set([
        'Backquote',
        'Digit0',
        'Digit1',
        'Digit2',
        'Digit3',
        'Digit4',
        'Digit5',
        'Digit6',
        'Digit7',
        'Digit8',
        'Digit9',
        'Minus',
        'Equal',
        'IntlYen',
        'KeyQ',
        'KeyW',
        'KeyE',
        'KeyR',
        'KeyT',
        'KeyY',
        'KeyU',
        'KeyI',
        'KeyO',
        'KeyP',
        'BracketLeft',
        'BracketRight',
        'Backslash',
        'KeyA',
        'KeyS',
        'KeyD',
        'KeyF',
        'KeyG',
        'KeyH',
        'KeyJ',
        'KeyK',
        'KeyL',
        'Semicolon',
        'Quote',
        'IntlBackslash',
        'KeyZ',
        'KeyX',
        'KeyC',
        'KeyV',
        'KeyB',
        'KeyN',
        'KeyM',
        'Comma',
        'Period',
        'Slash',
        'IntlRo',
        'Space',
        'Numpad0',
        'Numpad1',
        'Numpad2',
        'Numpad3',
        'Numpad4',
        'Numpad5',
        'Numpad6',
        'Numpad7',
        'Numpad8',
        'Numpad9',
        'NumpadAdd',
        'NumpadComma',
        'NumpadDecimal',
        'NumpadDivide',
        'NumpadEqual',
        'NumpadHash',
        'NumpadMultiply',
        'NumpadParenLeft',
        'NumpadParenRight',
        'NumpadStar',
        'NumpadSubstract'
    ]);

    function Zo($o) {
        return !$o.ctrlKey && !$o.metaKey && 'Dead' !== $o.key && ('' === $o.code || Yo.has($o.code));
    }

    function $o(ap) {
        const bp = [];
        return (ap = function(cp) {
            if (cp.code)
                return cp;
            const dp = Object.entries(Bj().mapping);
            let ep = !1,
                fp = !1,
                gp = '';
            for (let hp = 0; hp < 4; hp++) {
                for (const [ip, jp] of dp)
                    if (jp[hp] === cp.key) {
                        gp = ip, 3 === hp ? (ep = !0, fp = !0) : 2 === hp ? ep = !0 : 1 === hp && (fp = !0);
                        break;
                    }
                if (gp)
                    break;
            }
            return new KeyboardEvent(cp.type, {
                ...cp,
                altKey: ep,
                shiftKey: fp,
                code: gp
            });
        }(ap)).ctrlKey && bp.push('ctrl'), ap.metaKey && bp.push('meta'), ap.altKey && bp.push('alt'), ap.shiftKey && bp.push('shift'), 0 === bp.length ? '[' + ap.code + ']' : (bp.push('[' + ap.code + ']'), bp.join('+'));
    }

    function bp() {
        var cp;
        if (!e())
            return null;
        let dp = document.activeElement;
        for (; null === (cp = null == dp ? void 0 : dp.shadowRoot) || void 0 === cp ? void 0 : cp.activeElement;)
            dp = dp.shadowRoot.activeElement;
        return dp;
    }

    function dp(ep) {
        var fp;
        if (!ep)
            return '';
        let gp;
        return 'Unidentified' === ep.key && ep.target && (gp = ep.target.value), gp = null !== (fp = null != gp ? gp : ep.key) && void 0 !== fp ? fp : ep.code, /^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(gp) && (gp = ''), gp;
    }
    class fp {
        get maximumDepth() {
            return 1000;
        }
        reset() {
            this.stack = [], this.index = -1;
        }
        startRecording() {
            this.recording = !0;
        }
        canUndo() {
            return this.index > 0;
        }
        canRedo() {
            return this.index !== this.stack.length - 1;
        }
        undo() {
            return !!this.canUndo() && (this.model.setState(this.stack[this.index - 1], {
                suppressChangeNotifications: !1,
                type: 'undo'
            }), this.index -= 1, this.canCoalesce = !1, !0);
        }
        redo() {
            return !!this.canRedo() && (this.index += 1, this.model.setState(this.stack[this.index], {
                suppressChangeNotifications: !1,
                type: 'redo'
            }), this.canCoalesce = !1, !0);
        }
        pop() {
            this.canUndo() && (this.index -= 1, this.stack.pop());
        }
        snapshot() {
            return !!this.recording && (this.stack.splice(this.index + 1, this.stack.length - this.index - 1), this.stack.push(this.model.getState()), this.index++, this.stack.length > this.maximumDepth && this.stack.shift(), this.canCoalesce = !1, !0);
        }
        snapshotAndCoalesce() {
            if (!this.recording)
                return !1;
            this.canCoalesce && this.pop();
            const gp = this.snapshot();
            return this.canCoalesce = !0, gp;
        }
        constructor(gp) {
            this.recording = !1, this.canCoalesce = !1, this.model = gp, this.reset();
        }
    }
    var gp = '.ML__keyboard{--hue:206;--keyboard-background:rgba(209,213,217,.97);--keyboard-text:#000;--keyboard-text-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-background-border:#ddd;--keycap-background:#fff;--keycap-background-active:#e5e5e5;--keycap-background-border:#e5e6e9;--keycap-background-border-bottom:#8d8f92;--keycap-text:#000;--keycap-text-active:#fff;--keycap-secondary-text:#000;--keycap-modifier-background:#b9bdc7;--keycap-modifier-border:#c5c9d0;--keycap-modifier-border-bottom:#989da6;--keyboard-alternate-background:#fff;--keyboard-alternate-background-active:var(--primary,hsl(var(--hue),40%,50%));--keyboard-alternate-text:var(--keycap-text,#000);--keyboard-alternate-text-active:#fff;--keyboard-alternate-key-length:70px;--keyboard-alternate-key-font-size:30px;--keyboard-alternate-key-aside-font-size:12px;--keyboard-height:276px;--keycap-height:52px;--keycap-font-size:20px;--keycap-small-font-size:calc(var(--keycap-font-size)*0.8);--keycap-extra-small-font-size:calc(var(--keycap-font-size)/1.42);--keycap-tt-font-size:calc(var(--keycap-font-size)*1.5);height:100%;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:var(--keyboard-zindex,105)}.ML__keyboard.is-visible .ML__keyboard--plate{opacity:1;transform:translateY(calc(var(--keyboard-height, 276px)*-1));transition-timing-function:cubic-bezier(.4,0,1,1);visibility:visible}.ML__keyboard.alternate-keys{align-content:center;background-color:var(--keyboard-alternate-background);border-radius:6px;bottom:auto;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);box-sizing:content-box;display:flex;flex-direction:row;justify-content:center;max-width:286px;position:fixed;text-align:center;top:0;transform:none;transition:none;visibility:hidden;z-index:calc(var(--keyboard-zindex, 105) + 1)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys{max-width:320px}}.ML__keyboard.alternate-keys.is-visible{visibility:visible}.ML__keyboard.alternate-keys.compact{--keyboard-alternate-key-length:50px;--keyboard-alternate-key-font-size:24px;--keyboard-alternate-key-aside-font-size:10px}.ML__keyboard.alternate-keys ul{display:flex;flex-flow:row wrap-reverse;justify-content:center;list-style:none;margin:3px;padding:0}.ML__keyboard.alternate-keys ul>li{fill:currentColor;align-items:center;background:transparent;border:1px solid transparent;border-radius:5px;box-sizing:border-box;color:var(--keyboard-alternate-text);display:flex;flex-flow:column;font-size:var(--keyboard-alternate-key-font-size);height:var(--keyboard-alternate-key-length);justify-content:center;margin:0;pointer-events:all;width:var(--keyboard-alternate-key-length)}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys ul>li{font-size:24px;height:50px;width:50px}}.ML__keyboard.alternate-keys ul>li.is-active,.ML__keyboard.alternate-keys ul>li.is-pressed,.ML__keyboard.alternate-keys ul>li:hover{background:var(--keyboard-alternate-background-active);color:var(--keyboard-alternate-text-active)}.ML__keyboard.alternate-keys ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard.alternate-keys ul>li.small-button{background:#fbfbfb;height:42px;margin:2px;width:42px}.ML__keyboard.alternate-keys ul>li.small-button:hover{background:var(--keyboard-alternate-background-active)}.ML__keyboard.alternate-keys ul>li.box>div,.ML__keyboard.alternate-keys ul>li.box>span{border:1px dashed rgba(0,0,0,.24)}.ML__keyboard.alternate-keys ul>li .warning{align-items:center;background:#cd0030;border-radius:5px;color:#fff;display:flex;justify-content:center;min-height:60px;min-width:60px;padding:5px}.ML__keyboard.alternate-keys ul>li .warning.is-active,.ML__keyboard.alternate-keys ul>li .warning.is-pressed,.ML__keyboard.alternate-keys ul>li .warning:hover{background:red}.ML__keyboard.alternate-keys ul>li .warning svg.svg-glyph{height:50px;width:50px}.ML__keyboard.alternate-keys ul>li aside{font-size:var(--keyboard-alternate-key-aside-font-size);line-height:12px;opacity:.78;padding-top:2px}.ML__keyboard .ML__keyboard--plate{-webkit-backdrop-filter:grayscale(50%);backdrop-filter:grayscale(50%);background-color:var(--keyboard-background);border:1px solid var(--keyboard-background-border);bottom:calc(var(--keyboard-height, 276px)*-1);box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);box-sizing:border-box;cursor:pointer;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:16px;font-weight:400;left:0;margin:0;opacity:0;padding-top:5px;pointer-events:all;position:absolute;text-shadow:none;touch-action:none;transform:translate(0);transition:.28s cubic-bezier(0,0,.2,1);transition-property:transform,opacity;-webkit-user-select:none;user-select:none;visibility:hidden;width:100%}.ML__keyboard .ML__keyboard--plate .tex{font-family:KaTeX_Math,KaTeX_Main,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tex-math{font-family:KaTeX_Math,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .ML__keyboard--plate .tt{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace!important;font-size:var(--keycap-tt-font-size,30px);font-weight:400}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer{display:none;outline:none}.ML__keyboard .ML__keyboard--plate>div.keyboard-layer.is-visible{display:flex;flex-flow:column}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{align-self:center;display:flex;flex-flow:row;justify-content:space-between;min-width:736px}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{min-width:556px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar{max-width:100vw;min-width:365px;width:365px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:20px;width:20px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar svg{height:13px;width:17px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.left{display:flex;flex-flow:row;justify-content:flex-start;position:relative}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>.right{display:flex;flex-flow:row;justify-content:flex-end}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{fill:currentColor;align-items:baseline;background:0;border:none;border-bottom:2px solid transparent;box-shadow:none;color:var(--keyboard-text);cursor:pointer;display:flex;font-size:110%;justify-content:center;margin:7px 4px 6px;min-height:0;padding:4px 10px}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled.is-pressed svg,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.disabled:hover svg{color:var(--keyboard-text);opacity:.2}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:100%;padding:0 6px 0 0}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div{font-size:90%;padding-left:4px;padding-right:4px}}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.is-pressed,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:active,.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div:hover{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate>div>div.keyboard-toolbar>div>div.selected{border-bottom:2px solid var(--keyboard-text-active);color:var(--keyboard-text-active);margin-bottom:8px;padding-bottom:0}.ML__keyboard .ML__keyboard--plate [data-tooltip]{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{background:#616161;border-radius:2px;bottom:100%;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);color:#fff;content:attr(data-tooltip);display:inline-table;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:12px;font-weight:400;max-width:200px;opacity:0;padding:8px;position:absolute;text-align:center;top:inherit;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1) 1s;width:max-content;z-index:2}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate [data-tooltip]:after{font-size:16px;padding:8px 16px}}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover{position:relative}.ML__keyboard .ML__keyboard--plate [data-tooltip]:hover:after{opacity:1;transform:scale(1)}.ML__keyboard .ML__keyboard--plate div .rows{align-items:center;border:0;border-collapse:separate;clear:both;display:flex;flex-flow:column;margin:auto}.ML__keyboard .ML__keyboard--plate div .rows>ul{height:40px;list-style:none;margin:0 0 3px;padding:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{fill:currentColor;-webkit-tap-highlight-color:transparent;align-items:center;background:var(--keycap-background);border:1px solid var(--keycap-background-border);border-bottom-color:var(--keycap-background-border-bottom);border-radius:5px;box-sizing:border-box;color:var(--keycap-text);display:flex;flex-flow:column;float:left;font-size:var(--keycap-font-size,20px);height:40px;justify-content:center;margin-right:2px;overflow:hidden;padding:8px 0;position:relative;text-align:center;-webkit-user-select:none;user-select:none;vertical-align:top;width:34px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li:last-child{margin-right:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tt{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bottom{justify-content:flex-end}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.left{align-items:flex-start;padding-left:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.right{align-items:flex-end;padding-right:4px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li svg.svg-glyph{height:20px;width:20px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{align-items:center;background:#cd0030;border-radius:100%;color:#fff;display:flex;height:25px;justify-content:center;margin-bottom:-2px;min-height:25px;min-width:25px;padding:5px;width:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:16px;width:16px}@media only screen and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning{height:16px;min-height:16px;min-width:16px;width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li .warning svg.svg-glyph{height:14px;width:14px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w0{width:0}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w5{width:16px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w15{width:52px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w20{width:70px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li>.w50{width:178px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.separator{background:transparent;border:none;pointer-events:none}@media only screen and (max-width:560px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.if-wide{display:none}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.tex-math{font-size:25px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li:hover{background:var(--keycap-background-active);color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap:active{color:var(--keyboard-text-active);transform:translateY(calc(var(--keycap-height, 52px)*-.2)) scale(1.4);z-index:calc(var(--keyboard-zindex, 105) - 5)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier:active{background:var(--keyboard-text-active);color:var(--keycap-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:18px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.font-glyph,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.font-glyph{font-size:16px}}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.fnbutton{font-size:12px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:var(--keycap-extra-small-font-size,14px)}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li.bigfnbutton{font-size:calc(var(--keycap-extra-small-font-size, 14px)/1.55)}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier{background-color:var(--keycap-modifier-background);border-color:var(--keycap-modifier-border);border-bottom-color:var(--keycap-modifier-border-bottom);font-size:65%;font-weight:100}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected{color:var(--keyboard-text-active)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.action.selected:hover,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected.is-pressed,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:active,.ML__keyboard .ML__keyboard--plate div .rows>ul>li.modifier.selected:hover{color:#fff}.ML__keyboard .ML__keyboard--plate div .rows>ul>li.keycap.w50{font-size:80%;font-weight:100;padding-top:10px}.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{color:#555}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li small{font-size:9px}}.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{color:#666;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:10px;line-height:10px}@media only screen and (max-width:767px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li aside{display:none}}@media only screen and (max-width:414px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:2px;width:calc(10vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:calc(5vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:calc(15vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:calc(20vw - 2px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:calc(50vw - 2px)}}@media only screen and (min-width:415px) and (max-width:768px){.ML__keyboard .ML__keyboard--plate div .rows>ul>li{margin-right:3px;width:37px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:17px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:57px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:77px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:197px}}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:4px;width:51px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:23.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:78.5px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:106px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:271px}}@media only screen and (min-width:1025px){.ML__keyboard .ML__keyboard--plate div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard .ML__keyboard--plate div .rows>ul>li{height:var(--keycap-height,52px);margin-right:6px;width:66px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.action,.ML__keyboard .ML__keyboard--plate div .rows>ul>.modifier{font-size:80%}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w5{width:30px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w15{width:102px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w20{width:138px}.ML__keyboard .ML__keyboard--plate div .rows>ul>.w50{width:354px}}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keyboard{--hue:206;--keyboard-background:#4e6373;--keyboard-background:#4e6073;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}}body[theme=dark] .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%)}div.ML__keyboard.material{--keyboard-background:rgba(209,213,217,.9);--keyboard-background-border:#ddd;--keycap-background:transparent;--keycap-background-active:#cccfd1;--keycap-background-border:transparent;--keyboard-alternate-background:#efefef;--keyboard-alternate-text:#000;font-family:Roboto,sans-serif}div.ML__keyboard.material.alternate-keys{background:var(--keyboard-alternate-background);border:1px solid transparent;border-radius:5px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}div.ML__keyboard.material.alternate-keys ul li.is-active,div.ML__keyboard.material.alternate-keys ul li.is-pressed,div.ML__keyboard.material.alternate-keys ul li:active,div.ML__keyboard.material.alternate-keys ul li:hover{fill:currentColor;background:#5f97fc;border:1px solid transparent;color:#fff}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>div{font-size:16px}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div div:hover,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-active,div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar div.div.is-pressed{fill:currentColor;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate .keyboard-toolbar>div>.selected{fill:currentColor;border-bottom:2px solid #5f97fc;color:#5f97fc;margin-bottom:8px;padding-bottom:0}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap{fill:currentColor;background:transparent;border:1px solid transparent;border-radius:5px;color:var(--keycap-text);transition:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap.tt{color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]{background:#e0e0e0;height:20px;margin-bottom:10px;margin-top:10px}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "].is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap[data-key=" "]:hover{background:#d0d0d0;box-shadow:none;transform:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):hover{background:var(--keycap-background-active);border:1px solid transparent;box-shadow:none}div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{background:var(--keyboard-alternate-background);box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);color:var(--keyboard-alternate-text)}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);font-size:10px;justify-content:flex-start;margin-left:10px;margin-right:10px;padding:2px 0 0;transform:translateY(-10px) scale(2);transition:none;vertical-align:top;width:19.5px;z-index:calc(var(--ML_keyboard-zindex, 105) - 5)}}@media only screen and (max-width:414px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]).is-pressed,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:not([data-key=" "]):active{width:16.5px}}@media only screen and (max-width:767px){div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child.is-active,div.ML__keyboard.material .ML__keyboard__plate div>.rows>ul>.keycap:last-child:active{margin-left:14px;margin-right:0}}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier{fill:currentColor;background:transparent;border:0;color:#869096;font-size:16px;transition:none}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.selected{border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.action:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.modifier:hover{background:var(--keycap-background-active);border:0;box-shadow:none;color:var(--keycap-text)}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton{background:transparent;border:0}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.selected,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.selected{fill:currentColor;border-bottom:2px solid #5f97fc;border-radius:0;color:#5f97fc}div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.bigfnbutton:hover,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton.is-pressed,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:active,div.ML__keyboard.material .ML__keyboard__plate div div.rows ul li.fnbutton:hover{fill:currentColor;background:var(--keycap-background-active);border:0;box-shadow:none;color:#5f97fc}@media (prefers-color-scheme:dark){body:not([theme=light]) div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}';

    function hp(ip, jp, kp) {
        var lp;
        let mp, np, op, pp, qp;
        'object' == typeof(d = kp) && ('default' in d || 'pressed' in d) ? (kp.default && (jp.dataset.command = JSON.stringify(kp.default)), kp.alt && (jp.dataset.commandAlt = JSON.stringify(kp.alt)), kp.altshift && (jp.dataset.commandAltshift = JSON.stringify(kp.altshift)), kp.shift && (jp.dataset.commandShift = JSON.stringify(kp.shift)), kp.pressed && (jp.dataset.commandPressed = JSON.stringify(kp.pressed)), kp.pressAndHoldStart && (jp.dataset.commandPressAndHoldStart = JSON.stringify(kp.pressAndHoldStart)), kp.pressAndHoldEnd && (jp.dataset.commandPressAndHoldEnd = JSON.stringify(kp.pressAndHoldEnd))) : jp.dataset.command = JSON.stringify(kp), mi(jp, 'mousedown touchstart:passive', rp => {
            if ('mousedown' !== rp.type || 1 === rp.buttons) {
                rp.stopPropagation(), 'touchstart' !== rp.type && rp.preventDefault(), document.body.style['-webkit-user-select'] = 'none', jp.classList.add('is-pressed'), mp = Date.now(), 'touchstart' === rp.type && (op = rp.changedTouches[0].identifier);
                const sp = jp.getAttribute('data-command-pressed');
                sp && ip(JSON.parse(sp));
                const tp = jp.getAttribute('data-command-press-and-hold-start');
                tp && (np = jp, qp && clearTimeout(qp), qp = setTimeout(() => {
                    jp.classList.contains('is-pressed') && ip(JSON.parse(tp));
                }, 300));
            }
        }), mi(jp, 'mouseleave touchcancel', () => {
            jp.classList.remove('is-pressed');
        }), mi(jp, 'touchmove:passive', rp => {
            for (let sp = 0; sp < rp.changedTouches.length; sp++)
                if (rp.changedTouches[sp].identifier === op) {
                    const tp = document.elementsFromPoint(rp.changedTouches[sp].clientX, rp.changedTouches[sp].clientY),
                        up = tp[tp.length - 1];
                    up !== pp && pp && (pp.dispatchEvent(new MouseEvent('mouseleave'), {
                        bubbles: !0
                    }), pp = null), up && (pp = up, up.dispatchEvent(new MouseEvent('mouseenter', {
                        bubbles: !0,
                        buttons: 1
                    })));
                }
        }), mi(jp, 'mouseenter', rp => {
            1 === rp.buttons && jp.classList.add('is-pressed');
        }), mi(jp, 'mouseup touchend click', rp => {
            if (document.body.style['-webkit-user-select'] = '', pp) {
                rp.stopPropagation(), rp.preventDefault();
                const sp = pp;
                return pp = null, void sp.dispatchEvent(new MouseEvent('mouseup', {
                    bubbles: !0
                }));
            }
            if (jp.classList.remove('is-pressed'), jp.classList.add('is-active'), 'click' === rp.type && 0 !== rp.detail)
                return rp.stopPropagation(), void rp.preventDefault();
            setTimeout(() => jp.classList.remove('is-active'), 150);
            let tp = jp.getAttribute('data-command-press-and-hold-end');
            const up = Date.now();
            (jp !== np || up < mp + 300) && (tp = null), !tp && rp.altKey && rp.shiftKey && (tp = jp.getAttribute('data-command-altshift')), !tp && rp.altKey && (tp = jp.getAttribute('data-command-alt')), !tp && rp.shiftKey && (tp = jp.getAttribute('data-command-shift')), tp || (tp = jp.getAttribute('data-command')), tp && sp(JSON.parse(tp)), rp.stopPropagation(), rp.preventDefault();
        });
    }
    let jp;

    function kp() {
        var lp;
        f();
        const mp = document.querySelector('#mathlive-alternate-keys-panel');
        return mp && (mp.classList.remove('is-visible'), mp.innerHTML = ''), null === (lp = Vo.scrim) || void 0 === lp || lp.close(), !1;
    }
    class np {
        setOptions(op) {
            var pp, qp;
            let rp = '';
            if (this._element) {
                const sp = this._element.querySelector('div.keyboard-layer.is-visible');
                sp && (rp = null !== (pp = sp.getAttribute('data-layer')) && void 0 !== pp ? pp : ''), this._element.remove(), this._element = void 0;
            }
            if (this.options = sp, this.visible) {
                this.buildAndAttachElement(sp.virtualKeyboardTheme);
                const tp = this.element.querySelector(`.keyboard-layer[data-layer="${ rp }"]`);
                tp && (null === (qp = this.element.querySelector('.keyboard-layer.is-visible')) || void 0 === qp || qp.classList.remove('is-visible'), tp.classList.add('is-visible')), this.element.classList.add('is-visible');
            }
        }
        get element() {
            return this._element;
        }
        set element(op) {
            var pp;
            this._element !== op && (null === (pp = this._element) || void 0 === pp || pp.remove(), this._element = op);
        }
        get visible() {
            return this._visible;
        }
        set visible(op) {
            this._visible = op;
        }
        get height() {
            var op, pp;
            return null !== (pp = null === (op = this.element) || void 0 === op ? void 0 : op.offsetHeight) && void 0 !== pp ? pp : 0;
        }
        buildAndAttachElement(op) {
            var pp;
            this.element = function(qp, rp) {
                var sp, tp, up, vp;
                f();
                let wp = '<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\n    <symbol id="svg-delete-backward" viewBox="0 0 576 512">\n      <path d="M432.1 208.1L385.9 256L432.1 303C442.3 312.4 442.3 327.6 432.1 336.1C423.6 346.3 408.4 346.3 399 336.1L352 289.9L304.1 336.1C295.6 346.3 280.4 346.3 271 336.1C261.7 327.6 261.7 312.4 271 303L318.1 256L271 208.1C261.7 199.6 261.7 184.4 271 175C280.4 165.7 295.6 165.7 304.1 175L352 222.1L399 175C408.4 165.7 423.6 165.7 432.1 175C442.3 184.4 442.3 199.6 432.1 208.1V208.1zM512 64C547.3 64 576 92.65 576 128V384C576 419.3 547.3 448 512 448H205.3C188.3 448 172 441.3 160 429.3L9.372 278.6C3.371 272.6 0 264.5 0 256C0 247.5 3.372 239.4 9.372 233.4L160 82.75C172 70.74 188.3 64 205.3 64L512 64zM528 128C528 119.2 520.8 112 512 112H205.3C201 112 196.9 113.7 193.9 116.7L54.63 256L193.9 395.3C196.9 398.3 201 400 205.3 400H512C520.8 400 528 392.8 528 384V128z"/>\n    </symbol>\n\n    <symbol id="svg-shift" viewBox="0 0 384 512">\n      <path d="M2.438 252.3C7.391 264.2 19.06 272 32 272h80v160c0 26.51 21.49 48 48 48h64C250.5 480 272 458.5 272 432v-160H352c12.94 0 24.61-7.797 29.56-19.75c4.953-11.97 2.219-25.72-6.938-34.88l-160-176C208.4 35.13 200.2 32 192 32S175.6 35.13 169.4 41.38l-160 176C.2188 226.5-2.516 240.3 2.438 252.3zM192 86.63L313.4 224H224v208H160V224H70.63L192 86.63z"/>\n    </symbol>\n\n    <symbol id="svg-commit" viewBox="0 0 512 512">\n      <path d="M135 432.1l-128-128C2.344 300.3 0 294.2 0 288s2.344-12.28 7.031-16.97l128-128c9.375-9.375 24.56-9.375 33.94 0s9.375 24.56 0 33.94L81.94 264H464v-208C464 42.75 474.8 32 488 32S512 42.75 512 56V288c0 13.25-10.75 24-24 24H81.94l87.03 87.03c9.375 9.375 9.375 24.56 0 33.94S144.4 442.3 135 432.1z"/>\n    </symbol>\n\n    <symbol id="svg-command" viewBox="0 0 640 512">\n      <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>\n    </symbol>\n\n    <symbol id="svg-undo" viewBox="0 0 512 512">\n      <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>\n    </symbol>\n    <symbol id="svg-redo" viewBox="0 0 512 512">\n      <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-arrow-left" viewBox="0 0 320 512">\n      <path d="M206.7 464.6l-183.1-191.1C18.22 267.1 16 261.1 16 256s2.219-11.97 6.688-16.59l183.1-191.1c9.152-9.594 24.34-9.906 33.9-.7187c9.625 9.125 9.938 24.37 .7187 33.91L73.24 256l168 175.4c9.219 9.5 8.906 24.78-.7187 33.91C231 474.5 215.8 474.2 206.7 464.6z"/>\n    </symbol>\n    <symbol id="svg-arrow-right" viewBox="0 0 320 512">\n      <path d="M113.3 47.41l183.1 191.1c4.469 4.625 6.688 10.62 6.688 16.59s-2.219 11.97-6.688 16.59l-183.1 191.1c-9.152 9.594-24.34 9.906-33.9 .7187c-9.625-9.125-9.938-24.38-.7187-33.91l168-175.4L78.71 80.6c-9.219-9.5-8.906-24.78 .7187-33.91C88.99 37.5 104.2 37.82 113.3 47.41z"/>\n    </symbol>\n    <symbol id="svg-tab" viewBox="0 0 448 512">\n      <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>\n    </symbol>\n    <symbol id="svg-copy" viewBox="0 0 448 512">\n      <path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z"/>\n    </symbol>\n    <symbol id="svg-angle-double-right" viewBox="0 0 320 512">\n      <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z"/>\n    </symbol>\n    <symbol id="svg-angle-double-left" viewBox="0 0 320 512">\n      <path d="M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z"/>\n    </symbol>\n    <symbol id="svg-trash" viewBox="0 0 448 512">\n      <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>\n    </symbol>\n</svg>\n        ';
                qp.create(), _qp['foreground-color'] = [];
                for (const xp of Object.keys(wh))
                    _qp['foreground-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' + wh[xp] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                color: xp
                            }
                        ]
                    });
                _qp['background-color'] = [];
                for (const yp of Object.keys(Em))
                    _qp['background-color'].push({
                        class: 'small-button',
                        content: '<span style="border-radius:50%;width:32px;height:32px; background:' + Em[yp] + '"></span>',
                        command: [
                            'applyStyle',
                            {
                                backgroundColor: yp
                            }
                        ]
                    });
                _rp = {
                    ..._qp
                };
                for (const zp of Object.keys(_rp))
                    _rp[zp] = _rp[zp].slice();
                for (let Ap = 0; Ap < 26; Ap++) {
                    const Bp = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' [Ap];
                    _rp[Bp] || (_rp[Bp] = []), _rp[Bp].unshift({
                        latex: '\\mathbb{' + Bp + '}',
                        aside: 'blackboard',
                        insert: '\\mathbb{' + Bp + '}'
                    }), _rp[Bp].unshift({
                        latex: '\\mathbf{' + Bp + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Bp + '}'
                    }), _rp[Bp].unshift({
                        latex: '\\mathsf{' + Bp + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Bp + '}'
                    }), _rp[Bp].unshift({
                        latex: '\\mathtt{' + Bp + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Bp + '}'
                    }), _rp[Bp].unshift({
                        latex: '\\mathcal{' + Bp + '}',
                        aside: 'calligraphy',
                        insert: '\\mathcal{' + Bp + '}'
                    }), _rp[Bp].unshift({
                        latex: '\\mathfrak{' + Bp + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Bp + '}'
                    });
                }
                for (let Cp = 0; Cp <= 26; Cp++) {
                    const Dp = 'abcdefghijklmnopqrstuvwxyz' [Cp];
                    _rp[Dp] || (_rp[Dp] = []), _rp[Dp].unshift({
                        latex: '\\mathsf{' + Dp + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Dp + '}'
                    }), _rp[Dp].unshift({
                        latex: '\\mathbf{' + Dp + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Dp + '}'
                    }), _rp[Dp].unshift({
                        latex: '\\mathtt{' + Dp + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Dp + '}'
                    }), _rp[Dp].unshift({
                        latex: '\\mathfrak{' + Dp + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Dp + '}'
                    });
                }
                for (let Ep = 0; Ep < 10; Ep++) {
                    const Fp = '0123456789' [Ep];
                    _rp[Fp] || (_rp[Fp] = []), _rp[Fp].unshift({
                        latex: '\\mathbf{' + Fp + '}',
                        aside: 'bold',
                        insert: '\\mathbf{' + Fp + '}'
                    }), _rp[Fp].unshift({
                        latex: '\\mathsf{' + Fp + '}',
                        aside: 'sans',
                        insert: '\\mathsf{' + Fp + '}'
                    }), _rp[Fp].unshift({
                        latex: '\\mathtt{' + Fp + '}',
                        aside: 'monospace',
                        insert: '\\mathtt{' + Fp + '}'
                    }), _rp[Fp].unshift({
                        latex: '\\mathcal{' + Fp + '}',
                        aside: 'script',
                        insert: '\\mathcal{' + Fp + '}'
                    }), _rp[Fp].unshift({
                        latex: '\\mathfrak{' + Fp + '}',
                        aside: 'fraktur',
                        insert: '\\mathfrak{' + Fp + '}'
                    });
                }
                let Gp = Ep.options.virtualKeyboards;
                Gp || (Gp = 'all'), Gp = Gp.replace(/\ball\b/i, 'numeric functions symbols roman  greek');
                const Hp = {
                        ..._sp,
                        ...null !== (sp = Ep.options.customVirtualKeyboardLayers) && void 0 !== sp ? sp : {}
                    },
                    Ip = {
                        ..._op,
                        ...null !== (tp = Ep.options.customVirtualKeyboards) && void 0 !== tp ? tp : {}
                    },
                    Jp = Gp.replace(/\s+/g, ' ').split(' ');
                for (const Kp of Jp) {
                    if (!Ip[Kp])
                        continue;
                    let Lp = null !== (up = Ip[Kp].layers) && void 0 !== up ? up : [];
                    Ip[Kp].layer && Lp.push(Ip[Kp].layer), Lp = [...new Set(Lp)];
                    for (const Mp of Lp) {
                        if (!Hp[Mp])
                            break;
                        if ('object' == typeof Hp[Mp]) {
                            const Np = Hp[Mp];
                            let Op = '';
                            if ('string' == typeof Ep.styles ? Op += `<style>${ Ep.styles }</style>` : 'object' == typeof Ep.styles && (Op += `<style>${ _dq(Ep.styles) }</style>`), Ep.backdrop && (Op += `<div class='${ Ep.backdrop }'>`), Ep.container && (Op += `<div class='${ Ep.container }'>`), Ep.rows) {
                                Op += '<div class=\'rows\'>';
                                for (const Pp of Ep.rows) {
                                    Op += '<ul>';
                                    for (const Qp of Lp) {
                                        if (Op += '<li', Ep.class) {
                                            let Rp = Ep.class;
                                            Ep.layer && !/layer-switch/.test(Rp) && (Rp += ' layer-switch'), /separator/.test(Rp) || (Rp += ' keycap'), Op += ` class="${ Rp }"`;
                                        } else
                                            Op += ' class="keycap"';
                                        if (Ep.key && (Op += ` data-key="${ Ep.key }"`), Ep.command && ('string' == typeof Ep.command ? Op += ` data-command='"${ Ep.command }"'` : (Op += ' data-command=\'', Op += JSON.stringify(Ep.command), Op += '\'')), Ep.insert && (Op += ` data-insert="${ Ep.insert }"`), Ep.latex && (Op += ` data-latex="${ Ep.latex }"`), Ep.aside && (Op += ` data-aside="${ Ep.aside }"`), Ep.variants) {
                                            const Rp = Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                                            _rp[Lp] = Ep.variants, Op += ` data-alt-keys="${ Lp }"`;
                                        }
                                        Ep.shifted && (Op += ` data-shifted="${ Ep.shifted }"`), Ep.shiftedCommand && (Op += ` data-shifted-command="${ Ep.shiftedCommand }"`), Ep.layer && (Op += ` data-layer="${ Ep.layer }"`), Op += `>${ Ep.label ? Ep.label : '' }</li>`;
                                    }
                                    Op += '</ul>';
                                }
                                Op += '</div>';
                            }
                            Ep.container && (Op += '</div>'), Ep.backdrop && (Op += '</div>'), Hp[Mp] = Op;
                        }
                        wp += `<div tabindex="-1" class='keyboard-layer' data-layer='${ Mp }'>`, wp += _wp(Ep.options, Gp, Kp);
                        const Rp = Hp[Mp];
                        'string' == typeof Lp && (wp += _Mp(Ep.options, Lp)), wp += '</div>';
                    }
                }
                const Rp = document.createElement('div');
                Rp.className = 'ML__keyboard', Kp ? Rp.classList.add(Kp) : Ep.options.virtualKeyboardTheme && Rp.classList.add(Ep.options.virtualKeyboardTheme);
                const Sp = document.createElement('div');
                Sp.className = 'ML__keyboard--plate', Sp.innerHTML = Ep.options.createHTML(wp), Rp.appendChild(Sp);
                const Tp = Rp.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton');
                for (const Up of Tp)
                    Ep.id = 'ML__k' + Date.now().toString(36).slice(-2) + Math.floor(100000 * Math.random()).toString(36);
                _Fp(Ep, [...Tp]);
                const Vp = Rp.querySelectorAll('.layer-switch');
                for (const Wp of Vp)
                    Wp.classList.contains('shift') ? hp(Xp => Ep.executeCommand(Xp), Wp, {
                        pressed: 'shiftKeyboardLayer',
                        default: [
                            'switchKeyboardLayer',
                            Wp.getAttribute('data-layer')
                        ],
                        pressAndHoldEnd: 'unshiftKeyboardLayer'
                    }) : hp(Xp => Ep.executeCommand(Xp), Wp, {
                        default: [
                            'switchKeyboardLayer',
                            Wp.getAttribute('data-layer')
                        ]
                    });
                const Xp = Rp.querySelectorAll('.keyboard-layer');
                for (const Yp of Xp)
                    Ep.addEventListener('mousedown', Zp => {
                        Zp.preventDefault(), Zp.stopPropagation();
                    }), Ep.addEventListener('touchstart', Zp => {
                        Zp.preventDefault(), Zp.stopPropagation();
                    }, {
                        passive: !1
                    });
                return null === (vp = Xp[0]) || void 0 === vp || vp.classList.add('is-visible'), Rp;
            }(this, null != op ? op : ''), mi(this.element, 'touchstart:passive mousedown', () => this.focusMathfield()), null === (pp = this.options.virtualKeyboardContainer) || void 0 === pp || pp.appendChild(this.element);
        }
        handleEvent(op) {
            if (this.element)
                switch (op.type) {
                    case 'mouseup':
                    case 'blur':
                    case 'touchend':
                    case 'touchcancel':
                        document.body.style.userSelect = '', _Zp(this);
                }
        }
        focusMathfield() {
            var op, pp;
            null === (pp = null === (op = this._mathfield) || void 0 === op ? void 0 : op.focus) || void 0 === pp || pp.call(op);
        }
        blurMathfield() {
            var op, pp;
            null === (pp = null === (op = this._mathfield) || void 0 === op ? void 0 : op.blur) || void 0 === pp || pp.call(op);
        }
        stateChanged() {
            var op, pp;
            null === (pp = null === (op = this._mathfield) || void 0 === op ? void 0 : op.element) || void 0 === pp || pp.dispatchEvent(new Event('virtual-keyboard-toggle', {
                bubbles: !0,
                cancelable: !1,
                composed: !0
            }));
        }
        executeCommand(op) {
            var pp, qp, rp;
            let sp, tp = [];
            return d(op) ? (sp = op[0], tp = op.slice(1)) : sp = op, sp = sp.replace(/-\w/g, up => up[1].toUpperCase()), 'virtual-keyboard' === (null === (pp = ol[sp]) || void 0 === pp ? void 0 : pp.target) ? ol[sp].fn(this, ...tp) : null !== (rp = null === (qp = this._mathfield) || void 0 === qp ? void 0 : qp.executeCommand(op)) && void 0 !== rp && rp;
        }
        create() {
            this.virtualKeyboardStylesheet || (jp || (jp = lj(gp).toString(36)), this.virtualKeyboardStylesheet = mj(null, gp, jp)), this.coreStylesheet || (this.coreStylesheet = mj(null, Vj, lj(Vj).toString(36))), null !== this.options.fontsDirectory && fm(this.options.fontsDirectory);
        }
        enable() {
            e() && (window.addEventListener('mouseup', this), window.addEventListener('blur', this), window.addEventListener('touchend', this), window.addEventListener('touchcancel', this));
        }
        disable() {
            e() && (window.removeEventListener('mouseup', this), window.removeEventListener('blur', this), window.removeEventListener('touchend', this), window.removeEventListener('touchcancel', this));
        }
        dispose() {}
        constructor(op, pp) {
            this.originalContainerBottomPadding = null, this.options = op, this.visible = !1, this._mathfield = pp, this.coreStylesheet = null, this.virtualKeyboardStylesheet = null;
        }
    }
    const _op = {
            numeric: {
                tooltip: 'keyboard.tooltip.numeric',
                layer: 'math',
                label: '123',
                layers: ['math']
            },
            roman: {
                tooltip: 'keyboard.tooltip.roman',
                layer: 'lower-roman',
                label: 'ABC',
                layers: [
                    'lower-roman',
                    'upper-roman'
                ]
            },
            greek: {
                tooltip: 'keyboard.tooltip.greek',
                layer: 'lower-greek',
                label: '&alpha;&beta;&gamma;',
                classes: 'tex-math',
                layers: [
                    'lower-greek',
                    'upper-greek'
                ]
            },
            functions: {
                tooltip: 'keyboard.tooltip.functions',
                layer: 'functions',
                label: '<i>f</i>&thinsp;()',
                classes: 'tex',
                layers: ['functions']
            },
            symbols: {
                tooltip: 'keyboard.tooltip.symbols',
                layer: 'symbols',
                label: '&infin;\u2260\u2208',
                classes: 'tex',
                layers: ['symbols']
            },
            latex: {
                tooltip: 'keyboard.tooltip.command',
                command: [
                    'switchMode',
                    'latex'
                ],
                label: '<svg class="svg-glyph"><use xlink:href=\'#svg-command\' /></svg>',
                layers: [
                    'latex-lower',
                    'latex-upper',
                    'latex-symbols'
                ]
            },
            style: {
                tooltip: 'keyboard.tooltip.style',
                layer: 'style',
                label: '<b>b</b><i>i</i>\uD835\uDD39'
            }
        },
        pp = {
            '\\varphi ': [
                '&Phi;',
                '\\Phi '
            ],
            '\\varsigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\epsilon ': [
                '&#x0190;',
                '\\char"0190'
            ],
            '\\rho ': [
                '&#x3A1',
                '\\char"3A1'
            ],
            '\\tau ': [
                '&#x3A4;',
                '\\char"3A4'
            ],
            '\\upsilon ': [
                '&Upsilon;',
                '\\Upsilon '
            ],
            '\\theta ': [
                '&Theta;',
                '\\Theta '
            ],
            '\\iota ': [
                '&Iota;',
                '\\char"399'
            ],
            '\\omicron ': [
                '&#x039F;',
                '\\char"39F'
            ],
            '\\pi ': [
                '&Pi;',
                '\\Pi '
            ],
            '\\alpha ': [
                '&Alpha;',
                '\\char"391'
            ],
            '\\sigma ': [
                '&Sigma;',
                '\\Sigma '
            ],
            '\\delta ': [
                '&Delta;',
                '\\Delta '
            ],
            '\\phi ': [
                '&#x03a6;',
                '\\Phi '
            ],
            '\\gamma ': [
                '&Gamma;',
                '\\Gamma '
            ],
            '\\eta ': [
                '&Eta;',
                '\\char"397'
            ],
            '\\xi ': [
                '&Xi;',
                '\\Xi '
            ],
            '\\kappa ': [
                '&Kappa;',
                '\\char"39A'
            ],
            '\\lambda ': [
                '&Lambda;',
                '\\Lambda '
            ],
            '\\zeta ': [
                '&Zeta;',
                '\\char"396'
            ],
            '\\chi ': [
                '&Chi;',
                '\\char"3A7'
            ],
            '\\psi ': [
                '&Psi;',
                '\\Psi '
            ],
            '\\omega ': [
                '&Omega;',
                '\\Omega '
            ],
            '\\beta ': [
                '&Beta;',
                '\\char"392'
            ],
            '\\nu ': [
                '&Nu;',
                '\\char"39D'
            ],
            '\\mu ': [
                '&Mu;',
                '\\char"39C'
            ]
        },
        _qp = {
            0: [
                '\\emptyset',
                '\\varnothing',
                '\\infty',
                {
                    latex: '#?_0',
                    insert: '#@_0'
                },
                '\\circ',
                '\\bigcirc',
                '\\bullet'
            ],
            2: [
                '\\frac{1}{2}',
                {
                    latex: '#?^2',
                    insert: '#@^2'
                }
            ],
            3: [
                '\\frac{1}{3}',
                {
                    latex: '#?^3',
                    insert: '#@^3'
                }
            ],
            '.': [
                '.',
                ',',
                ';',
                '\\colon',
                {
                    latex: ':',
                    aside: 'ratio'
                },
                {
                    latex: '\\cdotp',
                    aside: 'center dot',
                    class: 'box'
                },
                {
                    latex: '\\cdots',
                    aside: 'center ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\ldotp',
                    aside: 'low dot',
                    class: 'box'
                },
                {
                    latex: '\\ldots',
                    aside: 'low ellipsis',
                    class: 'box'
                },
                {
                    latex: '\\vdots',
                    aside: '',
                    class: 'box'
                },
                {
                    latex: '\\ddots',
                    aside: '',
                    class: 'box'
                },
                '\\odot',
                '\\oslash',
                '\\circledcirc'
            ],
            '*': [
                '\\cdot',
                '\\ast',
                '\\star',
                '\\bigstar',
                '\\ltimes',
                '\\rtimes',
                '\\rightthreetimes',
                '\\leftthreetimes',
                '\\intercal',
                '\\prod',
                {
                    latex: '\\prod_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                }
            ],
            '+': [
                '\\pm',
                '\\mp',
                '\\sum',
                {
                    latex: '\\sum_{n\\mathop=0}^{\\infty}',
                    class: 'small'
                },
                '\\dotplus',
                '\\oplus'
            ],
            '-': [
                '\\pm',
                '\\mp',
                '\\ominus',
                '\\vert #0  \\vert'
            ],
            '/': [
                '\\divideontimes',
                '/',
                '\\div',
                '\\%'
            ],
            '(': [
                '\\left( #0\\right)',
                '\\left[ #0\\right]',
                '\\left\\{ #0\\right\\}',
                '\\left\\langle #0\\right\\rangle',
                '\\lfloor',
                '\\llcorner',
                '(',
                '\\lbrack',
                '\\lvert',
                '\\lVert',
                '\\lgroup',
                '\\langle',
                '\\lceil',
                '\\ulcorner',
                '\\lmoustache',
                '\\lbrace'
            ],
            ')': [
                '\\rfloor',
                '\\lrcorner',
                ')',
                '\\rbrack',
                '\\rvert',
                '\\rVert',
                '\\rgroup',
                '\\rangle',
                '\\rceil',
                '\\urcorner',
                '\\rmoustache',
                '\\rbrace'
            ],
            '=': [
                '\\cong',
                '\\asymp',
                '\\equiv',
                '\\differencedelta',
                '\\varpropto',
                '\\thickapprox',
                '\\approxeq',
                '\\thicksim',
                '\\backsim',
                '\\eqsim',
                '\\simeq',
                '\\Bumpeq',
                '\\bumpeq',
                '\\doteq',
                '\\Doteq',
                '\\fallingdotseq',
                '\\risingdotseq',
                '\\coloneq',
                '\\eqcirc',
                '\\circeq',
                '\\triangleq',
                '\\between'
            ],
            '!=': [
                '\\neq',
                '\\ncong',
                '',
                '\\nsim'
            ],
            '<': [
                '\\leq',
                '\\leqq',
                '\\lneqq',
                '\\ll',
                '\\lessgtr',
                '\\nless',
                '\\nleq',
                '\\lesssim',
                '\\precsim',
                '\\prec',
                '\\nprec',
                '\\preccurlyeq',
                '\\lessdot'
            ],
            '>': [
                '\\geq',
                '\\geqq',
                '\\gneqq',
                '\\gg',
                '\\gtrless',
                '\\ngtr',
                '\\ngeq',
                '\\gtrsim',
                '\\succsim',
                '\\succ',
                '\\nsucc',
                '\\succcurlyeq',
                '\\gtrdot'
            ],
            in: ['\\owns'],
            '!in': ['\\backepsilon'],
            subset: [
                '\\subseteq',
                '\\nsubset',
                '\\nsubseteq'
            ],
            superset: [
                '\\supseteq',
                '\\nsupset',
                '\\nsupseteq'
            ],
            infinity: [
                '\\aleph_0',
                '\\aleph_1',
                '\\omega',
                '\\mathfrak{m}'
            ],
            'numeric-pi': [
                '\\prod',
                '\\theta',
                '\\rho',
                '\\sin',
                '\\cos',
                '\\tan'
            ],
            ee: [
                '\\times 10^{#?}',
                '\\ln',
                '\\ln_{10}',
                '\\log'
            ],
            '^': ['_{#?}'],
            int: [{
                    latex: '\\int_{#?}^{#?}',
                    class: 'small'
                },
                {
                    latex: '\\int',
                    class: 'small'
                },
                {
                    latex: '\\smallint',
                    class: 'small'
                },
                {
                    latex: '\\iint',
                    class: 'small'
                },
                {
                    latex: '\\iiint',
                    class: 'small'
                },
                {
                    latex: '\\oint',
                    class: 'small'
                },
                {
                    latex: '\\dfrac{\\rd}{\\rd x}',
                    class: 'small'
                },
                {
                    latex: '\\frac{\\partial}{\\partial x}',
                    class: 'small'
                },
                '\\capitalDifferentialD',
                '\\rd',
                '\\partial'
            ],
            nabla: [
                '\\nabla\\times',
                '\\nabla\\cdot',
                '\\nabla^{2}'
            ],
            '!': [
                '!!',
                '\\Gamma',
                '\\Pi'
            ],
            accents: [
                '\\bar{#@}',
                '\\vec{#@}',
                '\\hat{#@}',
                '\\check{#@}',
                '\\dot{#@}',
                '\\ddot{#@}',
                '\\mathring{#@}',
                '\\breve{#@}',
                '\\acute{#@}',
                '\\tilde{#@}',
                '\\grave{#@}'
            ],
            underline: [
                '\\underbrace{#@}',
                '\\underlinesegment{#@}',
                '\\underleftrightarrow{#@}',
                '\\underrightarrow{#@}',
                '\\underleftarrow{#@}',
                '\\undergroup{#@}'
            ],
            overline: [
                '\\overbrace{#@}',
                '\\overlinesegment{#@}',
                '\\overleftrightarrow{#@}',
                '\\overrightarrow{#@}',
                '\\overleftarrow{#@}',
                '\\overgroup{#@}'
            ],
            xleftarrows: [
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xLeftarrow{#@}',
                '\\xleftharpoonup{#@}',
                '\\xleftharpoondown{#@}',
                '\\xtwoheadleftarrow{#@}',
                '\\xhookleftarrow{#@}',
                '\\xtofrom{#@}',
                '\\xleftequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            xrightarrows: [
                '\\xrightarrow{#@}',
                '\\xlongequal{#@}',
                '\\xleftrightarrow{#@}',
                '\\xLeftrightarrow{#@}',
                '\\xleftrightharpoons{#@}',
                '\\xRightarrow{#@}',
                '\\xrightharpoonup{#@}',
                '\\xrightharpoondown{#@}',
                '\\xtwoheadrightarrow{#@}',
                '\\xrightleftharpoons{#@}',
                '\\xhookrightarrow{#@}',
                '\\xmapsto{#@}',
                '\\xrightequilibrium{#@}',
                '\\xrightleftarrows{#@}'
            ],
            A: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            a: [{
                    latex: '\\aleph',
                    aside: 'aleph'
                },
                {
                    latex: '\\forall',
                    aside: 'for all'
                }
            ],
            b: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            B: [{
                latex: '\\beth',
                aside: 'beth'
            }],
            c: [{
                latex: '\\C',
                aside: 'set of complex numbers'
            }],
            d: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            D: [{
                latex: '\\daleth',
                aside: 'daleth'
            }],
            e: [{
                    latex: '\\exponentialE',
                    aside: 'exponential e'
                },
                {
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                }
            ],
            g: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            G: [{
                latex: '\\gimel',
                aside: 'gimel'
            }],
            h: [{
                    latex: '\\hbar',
                    aside: 'h bar'
                },
                {
                    latex: '\\hslash',
                    aside: 'h slash'
                }
            ],
            i: [{
                latex: '\\imaginaryI',
                aside: 'imaginary i'
            }],
            j: [{
                latex: '\\imaginaryJ',
                aside: 'imaginary j'
            }],
            l: [{
                latex: '\\ell',
                aside: 'ell'
            }],
            n: [{
                latex: '\\mathbb{N}',
                aside: 'set of natural numbers'
            }],
            p: [{
                latex: '\\mathbb{P}',
                aside: 'set of primes'
            }],
            q: [{
                latex: '\\mathbb{Q}',
                aside: 'set of rational numbers'
            }],
            r: [{
                latex: '\\mathbb{R}',
                aside: 'set of real numbers'
            }],
            z: [{
                latex: '\\mathbb{Z}',
                aside: 'set of integers'
            }],
            'x-var': [
                'y',
                'z',
                't',
                'r',
                {
                    latex: 'f(#?)',
                    class: 'small'
                },
                {
                    latex: 'g(#?)',
                    class: 'small'
                },
                'x^2',
                'x^n',
                'x_n',
                'x_{n+1}',
                'x_i',
                'x_{i+1}'
            ],
            'n-var': [
                'i',
                'j',
                'p',
                'k',
                'a',
                'u'
            ],
            ii: [
                '\\Re',
                '\\Im',
                '\\imaginaryJ',
                '\\Vert #0 \\Vert'
            ],
            logic: [{
                    latex: '\\exists',
                    aside: 'there is'
                },
                {
                    latex: '\\nexists',
                    aside: 'there isn\u2019t'
                },
                {
                    latex: '\\ni',
                    aside: 'such that'
                },
                {
                    latex: '\\Colon',
                    aside: 'such that'
                },
                {
                    latex: '\\implies',
                    aside: 'implies'
                },
                {
                    latex: '\\impliedby',
                    aside: 'implied by'
                },
                {
                    latex: '\\iff',
                    aside: 'if and only if'
                },
                {
                    latex: '\\land',
                    aside: 'and'
                },
                {
                    latex: '\\lor',
                    aside: 'or'
                },
                {
                    latex: '\\oplus',
                    aside: 'xor'
                },
                {
                    latex: '\\lnot',
                    aside: 'not'
                },
                {
                    latex: '\\downarrow',
                    aside: 'nor'
                },
                {
                    latex: '\\uparrow',
                    aside: 'nand'
                },
                {
                    latex: '\\curlywedge',
                    aside: 'nor'
                },
                {
                    latex: '\\bar\\curlywedge',
                    aside: 'nand'
                },
                {
                    latex: '\\therefore',
                    aside: 'therefore'
                },
                {
                    latex: '\\because',
                    aside: 'because'
                },
                {
                    latex: '^\\biconditional',
                    aside: 'biconditional'
                },
                '\\leftrightarrow',
                '\\Leftrightarrow',
                '\\to',
                '\\models',
                '\\vdash',
                '\\gets',
                '\\dashv',
                '\\roundimplies'
            ],
            'set-operators': [
                '\\cap',
                '\\cup',
                '\\setminus',
                '\\smallsetminus',
                '\\complement'
            ],
            'set-relations': [
                '\\in',
                '\\notin',
                '\\ni',
                '\\owns',
                '\\subset',
                '\\supset',
                '\\subseteq',
                '\\supseteq',
                '\\subsetneq',
                '\\supsetneq',
                '\\varsubsetneq',
                '\\subsetneqq',
                '\\nsubset',
                '\\nsupset',
                '\\nsubseteq',
                '\\nsupseteq'
            ],
            space: [{
                    latex: '\\char"203A\\!\\char"2039',
                    insert: '\\!',
                    aside: 'negative thin space<br>\u207B\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\,\\unicode{"2039}',
                    insert: '\\,',
                    aside: 'thin space<br>\xB3\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\:\\unicode{"2039}',
                    insert: '\\:',
                    aside: 'medium space<br>\u2074\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\;\\unicode{"2039}',
                    insert: '\\;',
                    aside: 'thick space<br>\u2075\u29F8\u2081\u2088 em'
                },
                {
                    latex: '\\unicode{"203A}\\ \\unicode{"2039}',
                    insert: '\\ ',
                    aside: '\u2153 em'
                },
                {
                    latex: '\\unicode{"203A}\\enspace\\unicode{"2039}',
                    insert: '\\enspace',
                    aside: '\xBD em'
                },
                {
                    latex: '\\unicode{"203A}\\quad\\unicode{"2039}',
                    insert: '\\quad',
                    aside: '1 em'
                },
                {
                    latex: '\\unicode{"203A}\\qquad\\unicode{"2039}',
                    insert: '\\qquad',
                    aside: '2 em'
                }
            ],
            delete: [{
                label: '<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>',
                command: 'deleteAll'
            }],
            '->|': []
        };
    let _rp = {};
    const _sp = {
        math: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'x-var\'><i>x</i></li>\n                <li class=\'keycap tex\' data-alt-keys=\'n-var\'><i>n</i></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-1\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'\\exponentialE\' data-alt-keys=\'ee\'>e</li>\n                <li class=\'keycap tex\' data-latex=\'\\imaginaryI\' data-alt-keys=\'ii\'>i</li>\n                <li class=\'keycap tex\' data-latex=\'\\pi\' data-alt-keys=\'numeric-pi\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-key=\'<\' data-alt-keys=\'<\'>&lt;</li>\n                <li class=\'keycap tex\' data-key=\'>\' data-alt-keys=\'>\'>&gt;</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-2\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-latex=\'#@^{2}\' data-latex=\'x^2\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'^\' data-insert=\'#@^{#?}\' data-latex=\'x^\\placeholder\'></li>\n                <li class=\'keycap tex small\' data-insert=\'\\sqrt{#0}\' data-latex=\'\\sqrt{#0}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' >(</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' >)</li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-3\'/>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap small\' data-alt-keys=\'int\' data-latex=\'\\int_0^\\infty\'></li>\n                <li class=\'keycap\' data-latex=\'\\forall\' data-alt-keys=\'logic\' ></li>\n                <li class=\'action font-glyph bottom right\' data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box\'></span></li>\n                <li class=\'separator w5\'></li>\n                <row name=\'numpad-4\'/>\n                <li class=\'separator w5\'></li>\n                <arrows/>\n            </ul>\n        </div>\n    ',
        'lower-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'lower-1\' shift-layer=\'upper-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'lower-2\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'lower-3\'  shift-layer=\'upper-roman\'\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' >,</li>\n                <li class=\'keycap w50\' data-key=\' \' data-alt-keys=\'space\'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-roman': '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <row name=\'upper-1\'  shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <row name=\'upper-2\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <row name=\'upper-3\' shift-layer=\'lower-roman\'/>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap\' >;</li>\n                <li class=\'keycap\' data-alt-keys=\'.\'>;</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        symbols: '\n        <div class=\'rows\'>\n            <ul>\n                <row name=\'numpad-1\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrace \'>{</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrace \'>}</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xleftarrows\' data-latex=\'\\leftarrow\' ></li>\n                <li class=\'keycap tex small\' data-alt-keys=\'xrightarrows\' data-latex=\'\\rightarrow\' ></li>\n                <li class=\'keycap tex\' data-alt-keys=\'overline\' data-latex=\'\\overline{#@}\' data-aside=\'overline\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'underline\' data-latex=\'\\underline{#@}\' data-aside=\'underline\'></li>\n                <li class=\'keycap w15\' data-insert=\'\\ulcorner#0\\urcorner \'><span><sup>&#x250c;</sup><span><span style=\'color:#ddd\'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'nabla\' data-insert=\'\\nabla \'>&#x2207;<aside>nabla</aside></li>\n                <li class=\'keycap tex\' data-alt-keys=\'infinity\' data-insert=\'\\infty \'>&#x221e;</li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-2\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\lbrack \'>[</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rbrack \'>]</li>\n                <li class=\'separator w5\'></li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'in\' data-insert=\'\\in \'>&#x2208;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'!in\' data-insert=\'\\notin \'>&#x2209;</li>\n                <li class=\'keycap tex\' data-insert=\'\\Re \'>&#x211c;<aside>Real</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Im \'>&#x2111;<aside>Imaginary</aside></li>\n                <li class=\'keycap w15\' data-insert=\'\\llcorner#0\\lrcorner \'><span><sub>&#x2514;</sub><span style=\'color:#ddd\'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>\n\n                <li class=\'keycap tex\' data-insert=\'\\partial \'>&#x2202;<aside>partial<br>derivative</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\emptyset \'>&#x2205;<aside>empty set</aside></li>\n\n            </ul>\n            <ul>\n                <row name=\'numpad-3\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-alt-keys=\'(\' data-insert=\'\\langle \'>&#x27e8;</li>\n                <li class=\'keycap tex\' data-alt-keys=\')\' data-insert=\'\\rangle \'>&#x27e9;</li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'subset\' data-insert=\'\\subset \'>&#x2282;</li>\n                <li class=\'keycap tex\' data-alt-keys=\'superset\' data-insert=\'\\supset \'>&#x2283;</li>\n\n                <li class=\'keycap tex\' data-alt-keys=\'accents\' data-insert=\'\\vec{#@}\' data-latex=\'\\vec{#?}\' data-aside=\'vector\'></li>\n                <li class=\'keycap tex\' data-alt-keys=\'absnorm\' data-insert=\'\\left| #0 \\right|\' data-latex=\'\\left| #? \\right|\' data-aside=\'abs\'></li>\n\n                <li class=\'keycap tex\' data-key=\'!\' data-alt-keys=\'!\'>!<aside>factorial</aside></li>\n                <li class=\'keycap\' data-latex=\'^{\\prime} \'><span><sup><span><span style=\'color:#ddd\'>o</span>&#x2032</sup></span><aside>prime</aside></li>\n\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <row name=\'numpad-4\' class=\'if-wide\'/>\n                <li class=\'keycap tex\' data-insert=\',\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\cdot \'>&#x22c5;<aside>centered dot</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\colon \'>:<aside>colon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\circ \'>&#x2218;<aside>circle</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\approx \'>&#x2248;<aside>approx.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\ne \'>&#x2260;</li>\n                <li class=\'keycap tex\' data-insert=\'\\pm \'>&#x00b1;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'lower-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\varphi \'><i>&#x03c6;</i><aside>phi var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varsigma \'><i>&#x03c2;</i><aside>sigma var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\epsilon \'><i>&#x03f5;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\rho \'><i>&rho;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\tau \'><i>&tau;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\upsilon \'><i>&upsilon;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\theta \'><i>&theta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\iota \'><i>&iota;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omicron \'>&omicron;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\pi \'><i>&pi;</i></li>\n            </ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\alpha \' data-shifted=\'&Alpha;\' data-shifted-command=\'["insert","\\\\char\\"391"]\'><i>&alpha;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\sigma \'><i>&sigma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\delta \'><i>&delta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\phi \'><i>&#x03d5;</i></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\gamma \'><i>&gamma;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\eta \'><i>&eta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\xi \'><i>&xi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\kappa \'><i>&kappa;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\lambda \'><i>&lambda;</i></li>\n            </ul>\n            <ul><li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'upper-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\zeta \'><i>&zeta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\chi \'><i>&chi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\psi \'><i>&psi;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\omega \'><i>&omega;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\beta \'><i>&beta;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\nu \'><i>&nu;</i></li>\n                <li class=\'keycap tex\' data-insert=\'\\mu \'><i>&mu;</i></li>\n                <li class=\'action font-glyph bottom right w15\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'keycap \' data-key=\' \'>&nbsp;</li>\n                <li class=\'keycap\'>,</li>\n                <li class=\'keycap tex\' data-insert=\'\\varepsilon \'><i>&#x03b5;</i><aside>epsilon var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\vartheta \'><i>&#x03d1;</i><aside>theta var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varkappa \'><i>&#x3f0;</i><aside>kappa var.</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\varpi \'><i>&#x03d6;<aside>pi var.</aside></i></li>\n                <li class=\'keycap tex\' data-insert=\'\\varrho \'><i>&#x03f1;</i><aside>rho var.</aside></li>\n                <arrows/>\n            </ul>\n        </div>',
        'upper-greek': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tex\' data-insert=\'\\Phi \'>&Phi;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"0190\'>&#x0190;<aside>epsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A1\'>&#x3A1;<aside>rho</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A4\'>&#x3A4;<aside>tau</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Upsilon \'>&Upsilon;<aside>upsilon</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Theta \'>&Theta;<aside>theta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"399\'>&Iota;<aside>iota</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39F\'>&#x039F;<aside>omicron</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Pi \'>&Pi;<aside>pi</aside></li></ul>\n            <ul><li class=\'keycap tex\' data-insert=\'\\char"391\'>&#x391;<aside>alpha</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Sigma \'>&Sigma;<aside>sigma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Delta \'>&Delta;<aside>delta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Phi \'>&#x03a6;<aside>phi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Gamma \'>&Gamma;<aside>gamma</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"397\'>&Eta;<aside>eta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Xi \'>&Xi;<aside>xi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39A\'>&Kappa;<aside>kappa</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Lambda \'>&Lambda;<aside>lambda</aside></li></ul>\n            <ul><li class=\'shift modifier font-glyph bottom left selected w15 layer-switch\' data-layer=\'lower-greek\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"396\'>&Zeta;<aside>zeta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"3A7\'>&Chi;<aside>chi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Psi \'>&Psi;<aside>psi</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\Omega \'>&Omega;<aside>omega</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"392\'>&Beta;<aside>beta</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39D\'>&Nu;<aside>nu</aside></li>\n                <li class=\'keycap tex\' data-insert=\'\\char"39C\'>&Mu;<aside>mu</aside></li>\n                <li class=\'action font-glyph bottom right w15\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul>\n                <li class=\'separator w10\'>&nbsp;</li>\n                <li class=\'keycap\'>.</li>\n                <li class=\'keycap w50\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-lower': '\n        <div class=\'rows\'>\n            <ul><row name=\'lower-1\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-2\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul><row name=\'lower-3\' class=\'tt\' shift-layer=\'latex-upper\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'>01#</li>\n                <li class=\'keycap tt\' data-shifted=\'[\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "["]\'>{</li>\n                <li class=\'keycap tt\' data-shifted=\']\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "]"]\'>}</li>\n                <li class=\'keycap tt\' data-shifted=\'(\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", "("]\'>^</li>\n                <li class=\'keycap tt\' data-shifted=\')\' data-shifted-command=\'["insertAndUnshiftKeyboardLayer", ")"]\'>_</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-upper': '\n        <div class=\'rows\'>\n            <ul><row name=\'upper-1\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-2\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul><row name=\'upper-3\' class=\'tt\' shift-layer=\'latex-lower\'/></ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-symbols\'01#</li>\n                <li class=\'keycap tt\'>[</li>\n                <li class=\'keycap tt\'>]</li>\n                <li class=\'keycap tt\'>(</li>\n                <li class=\'keycap tt\'>)</li>\n                <li class=\'keycap w20\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        'latex-symbols': '\n        <div class=\'rows\'>\n            <ul><li class=\'keycap tt\'>1</li><li class=\'keycap tt\'>2</li><li class=\'keycap tt\'>3</li><li class=\'keycap tt\'>4</li><li class=\'keycap tt\'>5</li><li class=\'keycap tt\'>6</li><li class=\'keycap tt\'>7</li><li class=\'keycap tt\'>8</li><li class=\'keycap tt\'>9</li><li class=\'keycap tt\'>0</li></ul>\n            <ul><li class=\'keycap tt\'>!</li><li class=\'keycap tt\'>@</li><li class=\'keycap tt\'>#</li><li class=\'keycap tt\'>$</li><li class=\'keycap tt\'>%</li><li class=\'keycap tt\'>^</li><li class=\'keycap tt\'>&</li><li class=\'keycap tt\'>*</li><li class=\'keycap tt\'>+</li><li class=\'keycap tt\'>=</li></ul>\n            <ul>\n                <li class=\'keycap tt\'>\\</li>\n                <li class=\'keycap tt\'>|</li>\n                <li class=\'keycap tt\'>/</li>\n                <li class=\'keycap tt\'>`</li>\n                <li class=\'keycap tt\'>;</li>\n                <li class=\'keycap tt\'>:</li>\n                <li class=\'keycap tt\'>?</li>\n                <li class=\'keycap tt\'>\'</li>\n                <li class=\'keycap tt\'>"</li>\n                <li class=\'action font-glyph bottom right\'\n                    data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                    data-shifted-command=\'"deleteAll"\'\n                    data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>\n            </ul>\n            <ul>\n                <li class=\'layer-switch font-glyph modifier bottom left\' data-layer=\'latex-lower\'>abc</li>\n                <li class=\'keycap tt\'>&lt;</li>\n                <li class=\'keycap tt\'>&gt;</li>\n                <li class=\'keycap tt\'>~</li>\n                <li class=\'keycap tt\'>,</li>\n                <li class=\'keycap tt\'>.</li>\n                <li class=\'keycap\' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        functions: '\n        <div class=\'rows\'>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\sin^{-1}\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\ln\'></li>\n                <li class=\'fnbutton\' data-insert=\'\\exponentialE^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{lcm}(#?)\' data-latex=\'\\operatorname{lcm}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{ceil}(#?)\' data-latex=\'\\operatorname{ceil}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\lim_{n\\to\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\int\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{abs}(#?)\' data-latex=\'\\operatorname{abs}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\cos^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\ln_{10}\'></li>\n                <li class=\'fnbutton\' data-latex=\'10^{#?}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{gcd}(#?)\' data-latex=\'\\operatorname{gcd}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{floor}(#?)\' data-latex=\'\\operatorname{floor}()\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\sum_{n\\mathop=0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\int_{0}^{\\infty}\'></li>\n                <li class=\'bigfnbutton\' data-latex=\'\\operatorname{sign}(#?)\' data-latex=\'\\operatorname{sign}()\'></li>\n            </ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\tan^{-1}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\log_{#?}\'></li>\n                <li class=\'fnbutton\' data-latex=\'\\sqrt[#?]{#0}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'#0 \\mod\' data-latex=\'\\mod\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\operatorname{round}(#?) \' data-latex=\'\\operatorname{round}()\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\prod_{n\\mathop=0}^{\\infty}\' data-latex=\'{\\scriptstyle \\prod_{n=0}^{\\infty}}\'></li>\n                <li class=\'bigfnbutton\' data-insert=\'\\frac{\\differentialD #0}{\\differentialD x}\'></li>\n                <li class=\'action font-glyph bottom right\' data-command=\'["performWithFeedback","deleteBackward"]\'><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li></ul>\n            <ul><li class=\'separator\'></li>\n                <li class=\'fnbutton\'>(</li>\n                <li class=\'fnbutton\'>)</li>\n                <li class=\'fnbutton\' data-insert=\'^{#?}\' data-latex=\'x^{#?}\'></li>\n                <li class=\'fnbutton\' data-insert=\'_{#?}\' data-latex=\'x_{#?}\'></li>\n                <li class=\'keycap w20 \' data-key=\' \'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>',
        style: '\n        <div class=\'rows\'>\n            <ul>\n                <li class=\'keycap\' data-alt-keys=\'foreground-color\' data-command=\'["applyStyle",{"color":"red"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428\'></span></li>\n                <li class=\'keycap\' data-alt-keys=\'background-color\' data-command=\'["applyStyle",{"backgroundColor":"yellow"}]\'><span style=\'border-radius: 50%;width:22px;height:22px; background:#fff590\'></span></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"3"}]\' data-latex=\'\\scriptsize\\text{small}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"5"}]\' data-latex=\'\\scriptsize\\text{normal}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"size":"9"}]\' data-latex=\'\\huge\\text{big}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-latex=\'\\langle\' data-command=\'["insert", "\\\\langle", {"smartFence":true}]\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"l"}]\' data-latex=\'\\fontseries{l}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"m"}]\' data-latex=\'\\fontseries{m}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"b"}]\' data-latex=\'\\fontseries{b}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"bx"}]\' data-latex=\'\\fontseries{bx}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"sb"}]\' data-latex=\'\\fontseries{sb}\\text{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"series":"c"}]\' data-latex=\'\\fontseries{c}\\text{Ab}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"up"}]\' data-latex=\'\\textup{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"it"}]\' data-latex=\'\\textit{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sl"}]\' data-latex=\'\\textsl{Ab}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"shape":"sc"}]\' data-latex=\'\\textsc{Ab}\'></li>\n                <li class=\'separator w5\'></li>\n                <li class=\'keycap\' data-insert=\'\\emph{#@} \' data-latex=\'\\text{\\emph{emph}}\'></li>\n            </ul>\n            <ul>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmr"}]\' data-latex=\'\\textrm{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmtt"}]\' data-latex=\'\\texttt{Az}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cmss"}]\' data-latex=\'\\textsf{Az}\'></li>\n\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"bb"}]\'  data-latex=\'\\mathbb{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"scr"}]\'  data-latex=\'\\mathscr{AZ}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"cal"}]\' data-latex=\'\\mathcal{A1}\'></li>\n                <li class=\'keycap\' data-command=\'["applyStyle",{"fontFamily":"frak"}]\' data-latex=\'\\mathfrak{Az}\'></li>\n            </ul>\n        </div>'
    };

    function tp(up, vp) {
        up = up.replace(/(^|[^\\])#@/g, '$1#?');
        const wp = Sf(),
            xp = new Kd('root', wp);
        return d.body = _Ve(up, wp, {
            parseMode: 'math',
            args: vp
        }), _Rc(Lc(Qc(new Ic(d.render(new vc({
            registers: wp.registers
        }, {
            fontSize: 5
        }, 'displaystyle')), {
            classes: 'ML__base'
        }))), {
            classes: 'ML__mathlive'
        }).toMarkup();
    }

    function _wp(xp, yp, zp) {
        var Ap, Bp, Cp;
        let Dp = '<div class=\'left\'>';
        const Ep = yp.replace(/\s+/g, ' ').split(' ');
        if (h.length > 1) {
            const Fp = {
                ..._op,
                ...null !== (d = xp.customVirtualKeyboards) && void 0 !== d ? d : {}
            };
            for (const Gp of h) {
                if (!yp[xp])
                    break;
                Dp += '<div class=\'', xp === zp ? Dp += 'selected ' : yp[xp].command ? Dp += 'action ' : Dp += 'layer-switch ', Dp += (null !== (e = yp[xp].classes) && void 0 !== e ? e : '') + '\'', yp[xp].tooltip && (Dp += 'data-tooltip=\'' + (null !== (f = q(yp[xp].tooltip)) && void 0 !== f ? f : yp[xp].tooltip) + '\' '), xp !== zp && ('string' == typeof yp[xp].command ? Dp += `data-command='"${ yp[xp].command }"'` : Array.isArray(yp[xp].command) && (Dp += `data-command='"${ yp[xp].command.join('') }"'`), yp[xp].layer && (Dp += 'data-layer=\'' + yp[xp].layer + '\'')), Dp += '>' + yp[xp].label + '</div>';
            }
        }
        Dp += '</div>';
        const Hp = 'default' === xp.virtualKeyboardToolbar ? [
                'copyToClipboard',
                'undo',
                'redo'
            ] : [],
            Ip = {
                copyToClipboard: `\n            <div class='action'\n                data-command='"copyToClipboard"'\n                data-tooltip='${ q('tooltip.copy to clipboard') }'>\n                <svg><use xlink:href='#svg-copy' /></svg>\n            </div>\n        `,
                undo: `\n            <div class='action disabled'\n                data-command='"undo"'\n                data-tooltip='${ q('tooltip.undo') }'>\n                <svg><use xlink:href='#svg-undo' /></svg>\n            </div>\n        `,
                redo: `\n            <div class='action disabled'\n                data-command='"redo"'\n                data-tooltip='${ q('tooltip.redo') }'>\n                <svg><use xlink:href='#svg-redo' /></svg>\n            </div>\n        `
            };
        return i.length > 0 && (Dp += `\n            <div class='right'>\n                ${ i.map(Jp => m[Jp]).join('') }\n            </div>\n        `), '<div class=\'keyboard-toolbar\' role=\'toolbar\'>' + Dp + '</div>';
    }

    function _Fp(Gp, Hp, Ip) {
        var Jp, Kp;
        for (const Lp of Hp) {
            let Mp;
            f.getAttribute('data-latex') ? Mp = tp(f.getAttribute('data-latex').replace(/&quot;/g, '"'), () => '\\placeholder{}') : f.getAttribute('data-insert') && '' === f.innerHTML ? Mp = tp(f.getAttribute('data-insert').replace(/&quot;/g, '"'), () => '\\placeholder{}') : f.getAttribute('data-content') && (Mp = f.getAttribute('data-content').replace(/&quot;/g, '"')), f.getAttribute('data-aside') && (Mp = (null != Mp ? Mp : '') + '<aside>' + f.getAttribute('data-aside').replace(/&quot;/g, '"') + '</aside>'), void 0 !== Mp && (f.innerHTML = Gp.options.createHTML(Mp)), f.getAttribute('data-classes') && f.classList.add(f.getAttribute('data-classes'));
            const Np = null === (d = f.getAttribute('data-insert')) || void 0 === d ? void 0 : d.replace(/&quot;/g, '"');
            let Op;
            g && pp[g] && (f.dataset.shifted = pp[g][0], f.dataset.shiftedCommand = JSON.stringify([
                'insertAndUnshiftKeyboardLayer',
                pp[g][1]
            ]));
            const Pp = f.getAttribute('data-command');
            if (i)
                if (/^[a-zA-Z]+$/.test(i))
                    Op = i;
                else
                    try {
                        Op = JSON.parse(i);
                    } catch (Gp) {}
            else
                Op = f.getAttribute('data-insert') ? [
                    'insert',
                    f.getAttribute('data-insert'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : f.getAttribute('data-latex') ? [
                    'insert',
                    f.getAttribute('data-latex'),
                    {
                        focus: !0,
                        feedback: !0,
                        scrollIntoView: !0,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: !0
                    }
                ] : [
                    'typedText',
                    null !== (e = f.getAttribute('data-key')) && void 0 !== e ? e : f.textContent,
                    {
                        focus: !0,
                        feedback: !0,
                        simulateKeystroke: !0
                    }
                ];
            if (Op) {
                Ip && (Op = [
                    Ip,
                    Op
                ]);
                let Qp = Op;
                const Rp = f.getAttribute('data-alt-keys');
                d && _rp[d] && (Qp = {
                    default: Op,
                    pressAndHoldStart: [
                        'showAlternateKeys',
                        d
                    ],
                    pressAndHoldEnd: 'hideAlternateKeys'
                }), hp(Sp => Gp.executeCommand(Sp), f, Qp);
            }
        }
    }

    function _Mp(Np, Op) {
        var Pp, Qp, Rp, Sp;
        const Tp = {
            qwerty: {
                'lower-1': 'qwertyuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^zxcvbnm~',
                'upper-1': 'QWERTYUIOP',
                'upper-2': ' ASDFGHJKL ',
                'upper-3': '^ZXCVBNM~',
                'numpad-1': '789/',
                'numpad-2': '456*',
                'numpad-3': '123-',
                'numpad-4': '0.=+'
            },
            azerty: {
                'lower-1': 'azertyuiop',
                'lower-2': 'qsdfghjklm',
                'lower-3': '^ wxcvbn ~',
                'upper-1': 'AZERTYUIOP',
                'upper-2': 'QSDFGHJKLM',
                'upper-3': '^ WXCVBN ~'
            },
            qwertz: {
                'lower-1': 'qwertzuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^yxcvbnm~',
                'upper-1': 'QWERTZUIOP',
                'upper-2': ' ASDFGHJKL',
                'upper-3': '^YXCVBNM~'
            },
            dvorak: {
                'lower-1': '^  pyfgcrl ',
                'lower-2': 'aoeuidhtns',
                'lower-3': 'qjkxbmwvz~',
                'upper-1': '^  PYFGCRL ',
                'upper-2': 'AOEUIDHTNS',
                'upper-3': 'QJKXBMWVZ~'
            },
            colemak: {
                'lower-1': ' qwfpgjluy ',
                'lower-2': 'arstdhneio',
                'lower-3': '^zxcvbkm~',
                'upper-1': ' QWFPGNLUY ',
                'upper-2': 'ARSTDHNEIO',
                'upper-3': '^ZXCVBKM~'
            }
        };
        let Up = Np.virtualKeyboardLayout;
        if ('auto' === Up) {
            const Vp = Bj();
            Np && (Up = Np.virtualLayout), Up && 'auto' !== Up || (Up = null !== (Pp = {
                fr: 'azerty',
                be: 'azerty',
                al: 'qwertz',
                ba: 'qwertz',
                cz: 'qwertz',
                de: 'qwertz',
                hu: 'qwertz',
                sk: 'qwertz',
                ch: 'qwertz'
            } [No.locale.slice(0, 2)]) && void 0 !== Pp ? Pp : 'qwerty');
        }
        const Wp = null !== (d = g[Up]) && void 0 !== d ? d : g.qwerty;
        let Xp, Yp = Op;
        Yp = Yp.replace(/<arrows\/>/g, '\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToPreviousChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-left" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToPreviousChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-left\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","moveToNextChar"]\'\n            data-shifted=\'<svg class="svg-glyph"><use xlink:href="#svg-angle-double-right" /></svg>\'\n            data-shifted-command=\'["performWithFeedback","extendToNextChar"]\'>\n            <svg class="svg-glyph"><use xlink:href=\'#svg-arrow-right\' /></svg>\n        </li>\n        <li class=\'action\' data-command=\'["performWithFeedback","commit"]\'>\n        <svg class="svg-glyph"><use xlink:href=\'#svg-commit\' /></svg></li>');
        let Zp = Yp.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        for (; Zp;) {
            Xp = '';
            const $p = Zp[2].match(/[a-zA-Z][a-zA-Z\d-]*=(['"])(.*?)\1/g),
                aq = {};
            if (Op)
                for (const bq of Op) {
                    const cq = Np.match(/([a-zA-Z][a-zA-Z\d-]*)=(['"])(.*?)\2/);
                    Op && (aq[Op[1]] = Op[3]);
                }
            let dq = i[aq.name];
            if (dq || (dq = g.qwerty[aq.name]), dq)
                for (const eq of dq) {
                    let fq = null !== (e = aq.class) && void 0 !== e ? e : '';
                    fq && (fq = ` ${ fq }`), '~' === Op ? (Xp += '<li class=\'action font-glyph bottom right ', Xp += dq.length - (dq.match(/ /g) || []).length / 2 == 10 ? 'w10' : 'w15', Xp += '\' data-shifted=\'<span class="warning"><svg class="svg-glyph"><use xlink:href="#svg-trash" /></svg></span>\'\n                        data-shifted-command=\'"deleteAll"\'\n                        data-alt-keys=\'delete\' data-command=\'["performWithFeedback","deleteBackward"]\'\n                        ><svg class="svg-glyph"><use xlink:href="#svg-delete-backward" /></svg></li>') : ' ' === Op ? Xp += '<li class=\'separator w5\'></li>' : '^' === Op ? Xp += '<li class=\'shift modifier font-glyph bottom left w15 layer-switch\' data-layer=\'' + aq['shift-layer'] + '\'><svg class="svg-glyph"><use xlink:href="#svg-shift" /></svg></li>' : '/' === Op ? Xp += '<li class=\'keycap' + fq + '\' data-alt-keys=\'/\' data-insert=\'\\frac{#@}{#?}\'>&divide;</li>' : '*' === Op ? Xp += '<li class=\'keycap' + fq + '\' data-alt-keys=\'*\' data-insert=\'\\times \'>&times;</li>' : '-' === Op ? Xp += '<li class=\'keycap' + fq + '\' data-alt-keys=\'-\' data-key=\'-\'>&#x2212;</li>' : '.' === Op ? Xp += '<li class=\'keycap' + fq + '\' data-alt-keys=\'.\' data-command=\'"insertDecimalSeparator"\'>' + (null !== (f = Np.decimalSeparator) && void 0 !== f ? f : '.') + '</li>' : fq.includes('tt') ? Xp += `<li class='keycap${ fq }' data-alt-keys='${ Op }' data-command='["typedText","${ Op }",{"mode":"command", "focus":true, "feedback":true}]'>${ Op }</li>` : Xp += '<li class=\'keycap' + fq + '\' data-alt-keys=\'' + Op + '\'>' + Op + '</li>';
                }
            Yp = Yp.replace(new RegExp(Zp[1] + Zp[2] + Zp[3]), Xp), Zp = Yp.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        }
        return Yp;
    }

    function _Zp($p) {
        kp();
        const aq = $p.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
        if (aq)
            for (const bq of aq) {
                const cq = bq.getAttribute('data-unshifted-content');
                cq && (bq.innerHTML = $p.options.createHTML(cq), bq.dataset.unshiftedContent = '');
                const dq = bq.getAttribute('data-unshifted-command');
                d && (bq.dataset.command = d, bq.dataset.unshiftedCommand = '');
            }
        return !1;
    }

    function _dq(eq) {
        return Object.keys(eq).map(fq => `${ fq } {${ function (gq) {
            return 'string' == typeof gq ? gq : Object.entries(gq).map(([hq, iq]) => `${ hq }:${ iq } !important`).join(';');
        }(eq[fq]) }}`).join('');
    }

    function eq(fq, gq) {
        'lower-command' !== gq && 'upper-command' !== gq && 'symbols-command' !== gq && fq.executeCommand('complete'), _iq(fq), kp(), _Zp(fq);
        const hq = null == fq ? void 0 : fq.element.querySelectorAll('.keyboard-layer');
        let iq = !1;
        for (const jq of hq)
            if (fq.dataset.layer === gq) {
                iq = !0;
                break;
            }
        if (iq)
            for (const kq of hq)
                fq.dataset.layer === gq ? fq.classList.add('is-visible') : fq.classList.remove('is-visible');
        return fq.focusMathfield(), !0;
    }

    function _iq(jq, kq = '') {
        const lq = jq.options.virtualKeyboardContainer;
        if (!lq)
            return !1;
        if (jq.element ? jq.element.classList.add('is-visible') : jq.buildAndAttachElement(kq), !jq.visible) {
            const mq = _Gt();
            kq.visibleVirtualKeyboard && _mq(kq.visibleVirtualKeyboard), kq.visibleVirtualKeyboard = jq;
            const nq = lq.style.paddingBottom;
            jq.originalContainerBottomPadding = d, lq.style.paddingBottom = d ? `calc(${ d } + var(--keyboard-height, 276px) - 1px)` : 'calc(var(--keyboard-height, 276px) - 1px)';
        }
        return setTimeout(() => {
            var oq;
            null === (oq = jq.element) || void 0 === oq || oq.classList.add('is-visible'), jq.focusMathfield();
        }, 1), jq.visible = !0, jq.stateChanged(), !1;
    }

    function _mq(nq) {
        var oq, pq, qq;
        const rq = nq.options.virtualKeyboardContainer;
        return !!e && (nq.element && (_Gt().visibleVirtualKeyboard = void 0, nq.disable(), kp(), nq.visible = !1, null === (oq = nq.coreStylesheet) || void 0 === oq || oq.release(), nq.coreStylesheet = null, null === (pq = nq.virtualKeyboardStylesheet) || void 0 === pq || pq.release(), nq.virtualKeyboardStylesheet = null, null === (d = nq._element) || void 0 === d || d.remove(), nq._element = void 0, null !== nq.originalContainerBottomPadding && (e.style.paddingBottom = nq.originalContainerBottomPadding)), nq.visible = !1, nq.stateChanged(), !1);
    }

    function rq(sq, tq, uq) {
        'function' == typeof tq && (uq = tq, tq = 1 / 0), void 0 === tq && (tq = 1 / 0);
        let vq = sq.position,
            wq = !1,
            xq = '';
        for (; !wq;) {
            const yq = sq.at(vq);
            wq = 0 === tq || void 0 === g || 'math' !== g.mode || !(/mord|textord|mpunct/.test(g.type) || 'mop' === g.type && /[a-zA-Z]+/.test(g.value)) || !g.hasEmptyBranch('superscript') || !g.hasEmptyBranch('subscript') || 'function' == typeof uq && !uq(g), wq || (g.mode = 'text', g.command = g.value, g.verbatimLatex = void 0, xq += g.value), vq -= 1, tq -= 1;
        }
        $j(sq, {
            data: xq,
            inputType: 'insertText'
        });
    }

    function tq(uq, vq, wq) {
        'function' == typeof vq && (wq = vq, vq = 1 / 0), void 0 === vq && (vq = 1 / 0);
        let xq = uq.position,
            yq = !1;
        const zq = [];
        for (; !yq;) {
            const Aq = uq.at(xq);
            yq = 0 === vq || !g || g.isFirstSibling || 'text' !== g.mode || ' ' === g.value || wq && !wq(g), yq || (f.push(g.serialize({
                defaultMode: 'math'
            })), g.mode = 'math'), xq -= 1, vq -= 1;
        }
        _wq(uq), $j(uq, {
            data: Cd(f),
            inputType: 'insertText'
        });
    }

    function _wq(xq) {
        var yq;
        let zq = xq.position - 1;
        for (; zq >= 0 && 'math' === (null === (yq = xq.at(zq)) || void 0 === yq ? void 0 : yq.mode);)
            zq -= 1;
        if (!(zq < 0) && 'text' === xq.at(zq).mode && ' ' === xq.at(zq).value && 'math' === xq.at(zq - 1).mode) {
            xq.at(zq - 1).parent.removeChild(xq.at(zq - 1));
            const Aq = xq.suppressChangeNotifications;
            xq.suppressChangeNotifications = !0, xq.position -= 1, xq.suppressChangeNotifications = Aq, $j(xq, {
                inputType: 'deleteContent'
            });
        }
    }
    pl({
        showAlternateKeys: function(zq, Aq) {
            var Bq;
            f();
            const Cq = _rp[Aq],
                Dq = document.createElement('div');
            Dq.setAttribute('aria-hidden', 'true'), Dq.className = 'ML__keyboard alternate-keys' + (zq.element.classList.contains('material') ? ' material' : ''), Dq.id = 'mathlive-alternate-keys-panel', Cq.length >= 14 ? Dq.style.width = '236px' : Cq.length >= 7 ? Dq.style.width = '286px' : 4 === Cq.length || 2 === Cq.length ? Dq.style.width = '146px' : 1 === Cq.length ? Dq.style.width = '86px' : Dq.style.width = '146px', Dq.style.height = 'auto';
            let Eq = '';
            for (const Fq of Cq)
                Eq += '<li', 'string' == typeof Fq ? Eq += ' data-latex="' + Fq.replace(/"/g, '&quot;') + '"' : (Fq.latex && (Eq += ' data-latex="' + Fq.latex.replace(/"/g, '&quot;') + '"'), Fq.content && (Eq += ' data-content="' + Fq.content.replace(/"/g, '&quot;') + '"'), Fq.insert && (Eq += ' data-insert="' + Fq.insert.replace(/"/g, '&quot;') + '"'), Fq.command && ('string' == typeof Fq.command ? Eq += ` data-command="${ Fq.command.replace(/"/g, '&quot;') }"` : Eq += ' data-command=\'' + JSON.stringify(Fq.command).replace(/"/g, '&quot;') + '\''), Fq.aside && (Eq += ` data-aside="${ Fq.aside.replace(/"/g, '&quot;') }"`), Fq.class && (Eq += ` data-classes="${ Fq.class }"`)), Eq += '>', Eq += 'string' == typeof Fq ? Fq : null !== (Bq = Fq.label) && void 0 !== Bq ? Bq : '', Eq += '</li>';
            Eq = '<ul>' + Eq + '</ul>', Dq.innerHTML = Fq.options.createHTML(Eq), _Fp(Fq, [...Dq.querySelectorAll('li')], 'performAlternateKeys'), Vo.scrim || (Vo.scrim = new Vo()), Vo.scrim.open({
                root: Fq.options.virtualKeyboardContainer,
                child: Dq
            });
            const Gq = null == Fq ? void 0 : Fq.element.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' + Aq + '"]'),
                Hq = null == Gq ? void 0 : Gq.getBoundingClientRect();
            if (Hq) {
                Hq.top - Dq.clientHeight < 0 && (Dq.style.width = 'auto', Cq.length <= 6 ? Dq.style.height = '56px' : Cq.length <= 12 ? Dq.style.height = '108px' : Cq.length <= 18 ? Dq.style.height = '205px' : Dq.classList.add('compact'));
                const Iq = (Hq.top - Dq.clientHeight + 5).toString() + 'px',
                    Jq = Math.max(0, Math.min(window.innerWidth - Dq.offsetWidth, (Hq.left + Hq.right - Dq.offsetWidth) / 2)) + 'px';
                Dq.style.transform = 'translate(' + Jq + ',' + Iq + ')', Dq.classList.add('is-visible');
            }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), pl({
        shiftKeyboardLayer: function(zq) {
            const Aq = null == zq ? void 0 : zq.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
            if (Aq)
                for (const Bq of Aq) {
                    if (Bq.dataset.unshiftedContent)
                        return !1;
                    let Cq = Bq.getAttribute('data-shifted');
                    if (Cq || /^[a-z]$/.test(Bq.innerHTML)) {
                        Bq.dataset.unshiftedContent = Bq.innerHTML, Cq || (Cq = Bq.innerHTML.toUpperCase()), Bq.innerHTML = zq.options.createHTML(Cq);
                        const Dq = Bq.getAttribute('data-command');
                        if (Dq) {
                            Bq.dataset.unshiftedCommand = Dq;
                            const Eq = Bq.getAttribute('data-shifted-command');
                            if (Eq)
                                Bq.dataset.command = Eq;
                            else {
                                const Fq = JSON.parse(Dq);
                                d(Fq) && (Fq[1] = Fq[1].toUpperCase()), Bq.dataset.command = JSON.stringify(Fq);
                            }
                        }
                    }
                }
            return !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), pl({
        hideAlternateKeys: () => kp(),
        performAlternateKeys: function(zq, Aq) {
            return kp(), zq.executeCommand(Aq);
        },
        switchKeyboardLayer: (zq, Aq) => eq(zq, Aq),
        unshiftKeyboardLayer: zq => _Zp(zq),
        insertAndUnshiftKeyboardLayer: function(zq, Aq) {
            return zq.executeCommand([
                'insert',
                Aq
            ]), _Zp(zq), !0;
        }
    }, {
        target: 'virtual-keyboard'
    }), pl({
        toggleVirtualKeyboardAlt: function(zq) {
            let Aq = !1;
            return (null == zq ? void 0 : zq.element) && (Aq = null == zq ? void 0 : zq.element.classList.contains('material'), zq.disable()), _iq(zq, Aq ? '' : 'material'), !1;
        },
        toggleVirtualKeyboardShift: function(zq) {
            var Aq, Bq;
            zq.options.virtualKeyboardLayout = {
                qwerty: 'azerty',
                azerty: 'qwertz',
                qwertz: 'dvorak',
                dvorak: 'colemak',
                colemak: 'qwerty'
            } [zq.options.virtualKeyboardLayout];
            const Cq = null !== (Bq = null === (Aq = null == zq ? void 0 : zq.element.querySelector('div.keyboard-layer.is-visible')) || void 0 === Aq ? void 0 : Aq.id) && void 0 !== Bq ? Bq : '';
            return zq && zq.disable(), _iq(zq), Cq && eq(zq, Cq), !1;
        }
    }, {
        target: 'virtual-keyboard'
    }), pl({
        toggleVirtualKeyboard: (zq, Aq) => function(Bq, Cq) {
            return Bq.visible ? _mq(Bq) : _iq(Bq, Cq), !1;
        }(zq, Aq),
        hideVirtualKeyboard: zq => _mq(zq),
        showVirtualKeyboard: (zq, Aq) => _iq(zq, Aq),
        onUndoStateChanged: (zq, Aq, Bq) => function(Cq, Dq, Eq) {
            var Fq;
            const Gq = null === (Fq = Cq.element) || void 0 === Fq ? void 0 : Fq.querySelector('.keyboard-toolbar');
            if (!Gq)
                return !1;
            const Hq = Gq.querySelector('[data-command=\'"undo"\']'),
                Iq = Gq.querySelector('[data-command=\'"redo"\']');
            return Iq && (Eq ? Iq.classList.remove('disabled') : Iq.classList.add('disabled')), Hq && (Dq ? Hq.classList.remove('disabled') : Hq.classList.add('disabled')), !1;
        }(zq, Aq, Bq)
    }, {
        target: 'virtual-keyboard'
    });
    var zq = '#mathlive-keystroke-caption-panel{--keystroke:#fff;--on-keystroke:#555;--keystroke-border:#f7f7f7;background:var(--secondary,hsl(var(--hue,212),19%,26%));border-color:var(--secondary-border,#e8e8e8);border-radius:6px;box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);display:flex;flex-direction:row-reverse;justify-content:center;padding:16px;position:absolute;text-align:center;visibility:hidden;z-index:1}@media (prefers-color-scheme:dark){body:not([theme=light]) #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}}body[theme=dark] #mathlive-keystroke-caption-panel{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}#mathlive-keystroke-caption-panel>span{fill:currentColor;background-color:var(--keystroke);border:2px solid var(--keystroke-border);border-radius:6px;color:var(--on-keystroke);font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:1em;margin:0 8px 0 0;min-width:14px;padding:4px}';
    let Aq, Bq = null,
        Cq = null;

    function Dq(Eq) {
        return Eq.keystrokeCaption || (Eq.keystrokeCaption = wi('mathlive-keystroke-caption-panel'), void 0 === Aq && (Aq = lj(zq).toString(36)), Bq = mj(null, zq, Aq), Cq = mj(null, Vj, lj(Vj).toString(36))), Eq.keystrokeCaption;
    }

    function Eq(Fq) {
        if (!Fq)
            return null;
        if (Fq.length > 1)
            return null;
        const Gq = Fq[0];
        return Gq instanceof Ne && '(' === Gq.leftDelim && ')' === Gq.rightDelim ? Gq.removeBranch('body') : null;
    }

    function Gq(Hq) {
        if (Hq) {
            for (let Iq = 0; Hq[Iq]; Iq++) {
                const Jq = Hq[Iq];
                if (Jq instanceof Ne && '(' === Jq.leftDelim) {
                    let Kq = 0,
                        Lq = 0,
                        Mq = 0;
                    for (let Nq = 0; Jq.body[Nq]; Nq++)
                        'genfrac' === Jq.body[Nq].type && (Kq++, Lq = Nq), Mq++;
                    0 === Mq && 1 === Kq && (Nq[Iq] = Jq.body[Lq]);
                }
            }
            for (const Kq of Hq) {
                for (const Lq of Iq.branches)
                    if (!Iq.hasEmptyBranch(Hq)) {
                        Gq(Iq.branch(Hq));
                        const Mq = Eq(Iq.branch(Hq));
                        Mq && Iq.setChildren(Mq, Hq);
                    }
                if (Iq instanceof hf)
                    for (const Nq of Iq.cells)
                        Gq(Hq);
            }
        }
    }

    function Mq(Nq) {
        if (!Nq)
            return [];
        const Oq = [];
        for (const Pq of Nq) {
            for (const Qq of Pq.branches)
                if (!Pq.hasEmptyBranch(Nq)) {
                    const Rq = Mq(Pq.branch(Nq));
                    Oq.push(...d);
                }
            Pq instanceof Pe && Oq.push(Pq);
        }
        return Oq;
    }

    function Rq(Sq) {
        return !!/^(mord|surd|msubsup|leftright|mop|mclose)$/.test(Sq.type) && !Sq.isExtensibleSymbol && !Sq.isFunction;
    }

    function Sq(Tq, Uq, Vq) {
        const Wq = Tq.at(Tq.position),
            {
                parent: Xq
            } = d;
        let Yq = e instanceof Ne ? e.leftDelim + e.rightDelim : '';
        if ('\\lbrace\\rbrace' === Yq && (Yq = '{}'), '\\{\\}' === Yq && (Yq = '{}'), '\\lparen\\rparen' === Yq && (Yq = '()'), '{}' === Yq && /\||\\vert|\\Vert|\\mvert|\\mid/.test(Uq))
            return Fg.insert('math', Tq, '\\,\\middle' + Uq + '\\, ', {
                format: 'latex',
                style: Vq
            }), !0;
        if ('{' !== Uq && '\\{' !== Uq || (Uq = '\\lbrace'), '}' !== Uq && '\\}' !== Uq || (Uq = '\\rbrace'), '[' === Uq && (Uq = '\\lbrack'), ']' === Uq && (Uq = '\\rbrack'), Yd[Uq]) {
            const Zq = e;
            if ('leftright' === Yq.type && Yq.firstChild === d && ('?' === Yq.leftDelim || '.' === Yq.leftDelim))
                return Yq.leftDelim = Uq, Yq.isDirty = !0, !0;
            if (!(e instanceof Ne && '|' === e.leftDelim)) {
                if (Fg.insert('math', Tq, `\\left${ Uq }\\right?`, {
                        format: 'latex',
                        style: Vq
                    }), 'first' !== d.lastSibling.type) {
                    const $q = Tq.offsetOf(d.lastSibling),
                        ar = Tq.extractAtoms([
                            Tq.position,
                            Uq
                        ]);
                    Tq.at(Tq.position).body = Vq, Tq.position -= 1;
                }
                return !0;
            }
        }
        let br = '';
        if (Object.keys(Yd).forEach(cr => {
                Uq === Yd[cr] && (br = cr);
            }), br) {
            if (e instanceof Ne && d.isLastSibling)
                return e.isDirty = !0, e.rightDelim = Uq, Tq.position += 1, $j(Tq, {
                    data: Uq,
                    inputType: 'insertText'
                }), !0;
            const cr = Tq.offsetOf(d.firstSibling);
            let dr;
            for (dr = Tq.position; dr >= Yq; dr--) {
                const er = Tq.at(dr);
                if (Uq instanceof Ne && '?' === Uq.rightDelim)
                    break;
            }
            const fr = Tq.at(dr);
            if (dr >= Yq && h instanceof Ne)
                return h.rightDelim = Uq, h.addChildren(Tq.extractAtoms([
                    dr,
                    Tq.position
                ]), d.treeBranch), Tq.position = dr, $j(Tq, {
                    data: Uq,
                    inputType: 'insertText'
                }), !0;
            if (e instanceof Ne && '?' === e.rightDelim)
                return e.isDirty = !0, e.rightDelim = Uq, e.parent.addChildren(Tq.extractAtoms([
                    Tq.position,
                    Tq.offsetOf(d.lastSibling)
                ]), e.treeBranch), Tq.position = Tq.offsetOf(e), $j(Tq, {
                    data: Uq,
                    inputType: 'insertText'
                }), !0;
            const gr = e.parent;
            return !!(i instanceof Ne && '?' === i.rightDelim && Tq.at(Tq.position).isLastSibling) && (Tq.position = Tq.offsetOf(i), Sq(Tq, Uq, Vq));
        }
        return !1;
    }

    function br(cr, dr, er) {
        var fr, gr, hr, ir;
        const {
            model: jr
        } = cr;
        ! function(kr) {
            var lr, mr;
            if (!kr)
                return;
            if ('Unidentified' === kr.key)
                return;
            if ('Dead' === kr.key)
                return;
            const nr = kr.shiftKey && kr.altKey ? 3 : kr.altKey ? 2 : kr.shiftKey ? 1 : 0;
            for (const or of yj)
                (null === (lr = or.mapping[kr.code]) || void 0 === lr ? void 0 : lr[nr]) === kr.key ? or.score += 1 : (null === (mr = or.mapping[kr.code]) || void 0 === mr ? void 0 : mr[nr]) && (or.score = 0);
            yj.sort((pr, qr) => qr.score - pr.score);
        }(er);
        const kr = Bj();
        if (cr.keyboardLayout !== i.id && (cr.keyboardLayout = i.id, cr._keybindings = void 0), clearTimeout(cr.inlineShortcutBufferFlushTimer), cr.inlineShortcutBufferFlushTimer = 0, function(lr, mr) {
                if (lr.options.readOnly || !lr.keystrokeCaptionVisible)
                    return;
                const nr = Dq(lr),
                    or = lr.element.getBoundingClientRect();
                nr.style.left = `${ or.left }px`, nr.style.top = or.top - 64 + 'px', nr.innerHTML = lr.options.createHTML('<span>' + (_Kj(mr) || mr) + '</span>' + nr.innerHTML), nr.style.visibility = 'visible', setTimeout(() => {
                    nr.childNodes.length > 0 && nr.childNodes[nr.childNodes.length - 1].remove(), 0 === nr.childNodes.length && (nr.style.visibility = 'hidden');
                }, 3000);
            }(cr, dr), er.defaultPrevented)
            return cr.flushInlineShortcutBuffer(), !1;
        let lr, mr, nr = '';
        if (!cr.options.readOnly) {
            if ('math' === cr.mode && !er.ctrlKey && !er.metaKey)
                if ('[Backspace]' === dr)
                    cr.inlineShortcutBuffer.pop(), cr.flushInlineShortcutBuffer({
                        defer: !0
                    });
                else if (Zo(er)) {
                const or = dp(er),
                    pr = (null !== (e = null === (d = cr.inlineShortcutBuffer[cr.inlineShortcutBuffer.length - 1]) || void 0 === d ? void 0 : d.keystrokes) && void 0 !== e ? e : '') + dr;
                cr.inlineShortcutBuffer.push({
                    state: h.getState(),
                    keystrokes: f,
                    leftSiblings: _Cr(cr)
                });
                let qr = 0,
                    rr = '';
                for (; !lr && qr < f.length;) {
                    mr = cr.inlineShortcutBuffer.length - (f.length - qr), rr = f.slice(qr);
                    const sr = cr.inlineShortcutBuffer[mr].leftSiblings;
                    lr = og(dr, rr, cr.options.inlineShortcuts), !lr && /^[a-zA-Z][a-zA-Z0-9]+?([_\^][a-zA-Z0-9\*\+\-]+?)?$/.test(rr) && (lr = cr.options.onInlineShortcut(cr, rr)), qr += 1;
                }
                cr.flushInlineShortcutBuffer({
                    defer: !0
                });
            } else
                cr.flushInlineShortcutBuffer(), cr.snapshot();
            if (cr.options.smartMode) {
                const rr = cr.mode;
                lr ? cr.mode = 'math' : function(sr, tr, ur) {
                    if (sr.smartModeSuppressed)
                        return !1;
                    const {
                        model: vr
                    } = sr;
                    if (!vr.at(vr.position).isLastSibling)
                        return !1;
                    if (!ur || !Zo(ur))
                        return !1;
                    const wr = dp(ur);
                    if (!vr.selectionIsCollapsed)
                        return !('text' !== sr.mode || !/[/_^]/.test(wr));
                    const xr = function(yr) {
                        let zr = '',
                            Ar = yr.position,
                            Br = !1;
                        for (; !Br;) {
                            const Cr = yr.at(Ar);
                            Br = !(Cr && ('text' === Cr.mode || 'math' === Cr.mode && /mord|textord|mpunct/.test(Cr.type))), Br || (zr = Cr.value + zr), Ar -= 1;
                        }
                        return zr;
                    }(vr) + wr;
                    if ('text' === sr.mode) {
                        if ('Esc' === tr || /[/\\]/.test(wr))
                            return !0;
                        if (/[\^_]/.test(wr))
                            return /(^|\s)[a-zA-Z][^_]$/.test(xr) && tq(vr, 1), !0;
                        const yr = {
                                ')': '(',
                                '}': '{',
                                ']': '['
                            } [wr],
                            {
                                parent: zr
                            } = vr.at(vr.position);
                        if (yr && zr instanceof Ne && zr.leftDelim === yr)
                            return !0;
                        if (/(^|[^a-zA-Z])(a|I) $/.test(xr))
                            return !1;
                        if (/[$\u20ac\xa3\u20a4\u20ba\xa5\xa4\u0e3f\xa2\u20a1\u20a7\u20a8\u20b9\u20a9\u20b1]/u.test(wr))
                            return !0;
                        if (/(^|[^a-zA-Z'\u2019])[a-zA-Z] $/.test(xr))
                            return tq(vr, 1), !1;
                        if (/\D\.[^\d\s]$/.test(xr)) {
                            tq(vr, 1);
                            const Ar = vr.at(vr.position);
                            return Ar.value = '\u22C5', Ar.style.variant = 'normal', Ar.command = '\\cdot', Ar.verbatimLatex = void 0, $j(vr, {
                                data: '\\cdot',
                                inputType: 'insertText'
                            }), !0;
                        }
                        if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(xr))
                            return tq(vr, 1), !0;
                        if (/\.\d$/.test(xr))
                            return tq(vr, 1), !0;
                        if (/\([\d+\-.]$/.test(xr))
                            return tq(vr, 1), !0;
                        if (/\([a-z][,;]$/.test(xr))
                            return tq(vr, 2), !0;
                        if (/[\d+\-=><*|]$/.test(wr))
                            return _wq(vr), !0;
                    } else {
                        if ('[Space]' === tr)
                            return rq(vr, void 0, Br => /[a-z][:,;.]$/.test(Br.value)), !0;
                        if (/[a-zA-Z]{3,}$/.test(xr) && !/(dxd|abc|xyz|uvw)$/.test(xr))
                            return rq(vr, void 0, Br => /[a-zA-Z]/.test(Br.value)), !0;
                        if (/(^|\W)(if)$/i.test(xr))
                            return rq(vr, 1), !0;
                        if (/(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/u.test(xr) && !/(\u03b1\u03b2\u03b3)$/.test(xr))
                            return rq(vr, void 0, Br => /(:|,|;|.|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/u.test(Br.value)), !0;
                        if ('?' === wr)
                            return !0;
                        if ('.' === wr && !/[\d-+]\.$/.test(xr))
                            return !0;
                    }
                    return !1;
                }(cr, dr, er) && (cr.mode = {
                    math: 'text',
                    text: 'math'
                } [cr.mode], nr = ''), cr.mode !== d && ((null === (f = cr.host) || void 0 === f ? void 0 : f.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))) || (cr.mode = d));
            }
        }
        if (!lr) {
            if (nr || (nr = function(sr, tr, ur) {
                    if (0 === sr.length)
                        return '';
                    const vr = vj(sj(ur));
                    for (let wr = sr.length - 1; wr >= 0; wr--)
                        if (sr[wr].key === vr && (!sr[wr].ifMode || sr[wr].ifMode === tr))
                            return sr[wr].command;
                    return '';
                }(cr.keybindings, cr.mode, dr)), !nr && ('[Enter]' === dr || '[Return]' === dr)) {
                let sr = !1;
                return Yj(h, {
                    inputType: 'insertLineBreak'
                }) && (cr.host && (sr = !cr.host.dispatchEvent(new Event('change', {
                    bubbles: !0,
                    composed: !0
                }))), sr || er.preventDefault && (er.preventDefault(), er.stopPropagation()), $j(h, {
                    inputType: 'insertLineBreak'
                })), sr;
            }
            if ('math' === cr.mode) {
                if ('[Space]' === dr) {
                    if (cr.flushInlineShortcutBuffer(), cr.options.mathModeSpace)
                        return cr.snapshot(), Fg.insert('math', h, cr.options.mathModeSpace, {
                            format: 'latex'
                        }), nr = '', cr.dirty = !0, cr.scrollIntoView(), er.preventDefault && (er.preventDefault(), er.stopPropagation()), !1;
                    const sr = h.at(h.position + 1),
                        tr = h.at(h.position - 1);
                    'text' !== (null == dr ? void 0 : dr.mode) && 'text' !== (null == d ? void 0 : d.mode) || (cr.snapshot(), Fg.insert('text', h, ' '), cr.dirty = !0);
                }
                (null === (g = h.at(h.position)) || void 0 === g ? void 0 : g.isDigit()) && ',' === cr.options.decimalSeparator && ',' === dp(er) && (nr = 'insertDecimalSeparator');
            }
        }
        if (!lr && !nr)
            return !0;
        const ur = h.at(Math.max(h.position, h.anchor)),
            {
                parent: vr
            } = ur;
        if ('moveAfterParent' === nr && 'leftright' === (null == vr ? void 0 : vr.type) && ur.isLastSibling && cr.options.smartFence && Sq(h, '.', cr.style) && (nr = '', _Vk(cr)), nr)
            cr.executeCommand(nr);
        else if (lr) {
            cr.keyboardDelegate.cancelComposition();
            const wr = {
                ...h.at(h.position).computedStyle,
                ...cr.style
            };
            if (!/^\\({|}|\[|]|@|#|\$|%|&|\^|_|backslash)$/.test(lr)) {
                const xr = cr.mode;
                Fg.insert(cr.mode, h, dp(er), {
                    suppressChangeNotifications: !0,
                    style: dr
                }), cr.snapshot(), h.setState(cr.inlineShortcutBuffer[mr].state), cr.mode = d;
            }
            h.deferNotifications({
                content: !0,
                selection: !0,
                data: null != lr ? lr : null,
                type: 'insertText'
            }, () => (Fg.insert(cr.mode, h, lr, {
                format: 'latex',
                style: dr
            }), _wq(cr.model), lr.endsWith(' ') && (cr.mode = 'text', Fg.insert('text', h, ' ', {
                style: dr
            })), !0)), cr.snapshot(), cr.dirty = !0, h.announce('replacement');
        }
        return cr.scrollIntoView(), er.preventDefault && er.preventDefault(), !1;
    }

    function sr(tr, ur, vr) {
        var wr;
        const {
            model: xr
        } = tr;
        if (tr.options.readOnly)
            return void e.announce('plonk');
        if ((vr = null != vr ? vr : {}).focus && tr.focus(), vr.feedback && (tr.options.keypressVibration && h() && navigator.vibrate(3), tr.playSound('keypress')), 'string' == typeof vr.mode && tr.mode !== vr.mode && tr.switchMode(vr.mode), vr.simulateKeystroke) {
            const yr = ur.charAt(0),
                zr = new KeyboardEvent('keypress', {
                    key: vr
                });
            if (!br(tr, vr, d))
                return;
        }
        const Ar = e.at(e.position),
            Br = {
                ...f.computedStyle,
                ...tr.style
            };
        e.selectionIsCollapsed || (e.deleteAtoms(mg(e.selection)), tr.snapshot());
        const Cr = fd(ur);
        if ('latex' === tr.mode)
            e.deferNotifications({
                content: !0,
                selection: !0,
                data: ur,
                type: 'insertText'
            }, () => {
                jk(tr);
                for (const Dr of i)
                    Fg.insert('latex', e, Dr);
                mk(Dr);
            });
        else if ('text' === tr.mode)
            for (const Dr of i)
                Fg.insert('text', e, tr, {
                    style: g
                });
        else if ('math' === tr.mode)
            for (const Er of i) {
                let Fr = {
                    '^': 'moveToSuperscript',
                    _: 'moveToSubscript',
                    ' ': 'moveAfterParent'
                } [ur];
                ' ' === ur && tr.options.mathModeSpace && (Fr = [
                    'insert',
                    tr.options.mathModeSpace
                ]), Fr ? tr.executeCommand(Fr) : /\d/.test(ur) && tr.options.smartSuperscript && 'superscript' === f.treeBranch && 'mop' !== (null === (d = f.parent) || void 0 === d ? void 0 : d.type) && f.hasNoSiblings ? (Fg.insert('math', e, ur, {
                    style: g
                }), po(e)) : ('mord' === f.type && /[a-zA-Z]/.test(f.value) && /[a-zA-Z]/.test(ur) && (f.style.variant && (g.variant = f.style.variant), f.style.variantStyle && (g.variantStyle = f.style.variantStyle)), Fg.insert('math', e, ur, {
                    style: g
                }));
            }
        tr.snapshotAndCoalesce(), tr.dirty = !0, tr.scrollIntoView();
    }

    function _Cr(Dr) {
        const Er = Dr.model,
            Fr = [];
        let Gr = Er.at(Math.min(Er.position, Er.anchor));
        for (;
            'first' !== Gr.type;)
            Fr.push(Gr), Gr = Gr.leftSibling;
        return Fr;
    }

    function Fr(Gr, Hr) {
        var Ir, Jr, Kr, Lr, Mr, Nr;
        const Or = {};
        'string' == typeof Hr.color && (i.verbatimColor = Hr.color, i.color = null !== (Ir = Gr.colorMap(Hr.color)) && void 0 !== Ir ? Ir : 'none'), 'string' == typeof Hr.backgroundColor && (i.verbatimBackgroundColor = Hr.backgroundColor, i.backgroundColor = null !== (d = Gr.backgroundColorMap(Hr.backgroundColor)) && void 0 !== d ? d : 'none'), 'string' == typeof Hr.fontFamily && (i.fontFamily = Hr.fontFamily), 'string' == typeof Hr.series && (i.fontSeries = Hr.series), 'string' == typeof Hr.fontSeries && (i.fontSeries = Hr.fontSeries.toLowerCase()), i.fontSeries && (i.fontSeries = null !== (e = {
            bold: 'b',
            medium: 'm',
            normal: 'm'
        } [i.fontSeries]) && void 0 !== e ? e : i.fontSeries), 'string' == typeof Hr.shape && (i.fontShape = Hr.shape), 'string' == typeof Hr.fontShape && (i.fontShape = Hr.fontShape.toLowerCase()), i.fontShape && (i.fontShape = null !== (f = {
            italic: 'it',
            up: 'n',
            upright: 'n',
            normal: 'n'
        } [i.fontShape]) && void 0 !== f ? f : i.fontShape);
        const Pr = null !== (g = Hr.size) && void 0 !== g ? g : Hr.fontSize;
        return 'number' == typeof m ? i.fontSize = Math.max(1, Math.min(10, m)) : 'string' == typeof m && (i.fontSize = null !== (h = {
            size1: 1,
            size2: 2,
            size3: 3,
            size4: 4,
            size5: 5,
            size6: 6,
            size7: 7,
            size8: 8,
            size9: 9,
            size10: 10
        } [m.toLowerCase()]) && void 0 !== h ? h : {
            tiny: 1,
            scriptsize: 2,
            footnotesize: 3,
            small: 4,
            normal: 5,
            normalsize: 5,
            large: 6,
            Large: 7,
            LARGE: 8,
            huge: 9,
            Huge: 10
        } [m]), i;
    }
    new class extends Fg {
        onPaste(Or, Pr) {
            if (!Pr.clipboardData)
                return !1;
            if (!Yj(Or.model, {
                    dataTransfer: Pr.clipboardData,
                    inputType: 'insertFromPaste'
                }))
                return !1;
            let Qr = '',
                Rr = 'auto',
                Sr = Pr.clipboardData.getData('application/json+mathlive');
            if (Sr)
                try {
                    const Tr = JSON.parse(Sr);
                    if (Qr && Array.isArray(Qr)) {
                        Or.snapshot();
                        const Ur = _Yf(Qr, Or),
                            {
                                model: Vr
                            } = Or;
                        Sr.selectionIsCollapsed || Sr.deleteAtoms(mg(Sr.selection));
                        const Wr = Sr.at(Sr.position);
                        if (Wr.parent instanceof hf) {
                            const Xr = [];
                            let Yr = [];
                            'first' === Rr[0].type && Rr.shift(), 'first' === Rr[Rr.length - 1].type && Rr.pop();
                            for (const Zr of Rr)
                                'first' === Qr.type && Yr.length > 0 ? (Xr.push(Yr), Yr = [Qr]) : Yr.push(Qr);
                            Yr.length > 0 && Xr.push(Yr);
                            let $r = Number(Wr.treeBranch[0]),
                                as = Number(Wr.treeBranch[1]);
                            const bs = Wr.parent.maxColumns;
                            for (; Wr.parent.colCount - as < Xr.length && Wr.parent.colCount < bs;)
                                Wr.parent.addColumn();
                            Wr.parent.addChildrenAfter(Xr[0], Wr);
                            for (let cs = 1; cs < Xr.length; cs++)
                                as++, as >= bs && (as = 0, Wr.parent.addRowAfter($r), $r++), Wr.parent.setCell($r, as, Xr[cs]);
                        } else
                            Wr.parent.addChildrenAfter(Rr.filter($r => 'first' !== $r.type), Wr);
                        return Sr.position = Sr.offsetOf(Rr[Rr.length - 1]), $j(Sr, {
                            inputType: 'insertFromPaste'
                        }), _Vk(Xr), Pr.preventDefault(), Pr.stopPropagation(), !0;
                    }
                } catch {}
            if (Sr = Pr.clipboardData.getData('application/json'), Sr && Xr.computeEngine)
                try {
                    const $r = JSON.parse(Sr);
                    if ('object' == typeof $r && 'latex' in $r && $r.latex && (Qr = $r.latex), !Qr) {
                        const as = Xr.computeEngine.box($r);
                        Rr && !Rr.has('Error') && (Qr = Rr.latex);
                    }
                    Qr || (Rr = 'latex');
                } catch {}
            if (Qr || (Qr = $r.clipboardData.getData('application/x-latex'), Qr && (Rr = 'latex')), Qr || (Qr = $r.clipboardData.getData('text/plain')), Qr) {
                let bs;
                return Xr.snapshot(), [cs, ds] = _Bg(ds), 'auto' === Rr && cs && (Rr = 'latex'), this.insert(Xr.model, ds, {
                    format: Rr
                }) && _Vk(Xr), $r.preventDefault(), $r.stopPropagation(), !0;
            }
            return !1;
        }
        insert(Or, Pr, Qr) {
            var Rr, Sr;
            const Tr = 'string' == typeof Pr ? Pr : null !== (Sr = null === (Rr = Or.mathfield.computeEngine) || void 0 === Rr ? void 0 : Rr.box(Pr).latex) && void 0 !== Sr ? Sr : '';
            if (!Qr.suppressChangeNotifications && !Yj(Or, {
                    data: Tr,
                    inputType: 'insertText'
                }))
                return !1;
            if (Qr.insertionMode || (Qr.insertionMode = 'replaceSelection'), Qr.selectionMode || (Qr.selectionMode = 'placeholder'), Qr.format || (Qr.format = 'auto'), Or.mathfield.smartFence) {
                if (Or.selectionIsCollapsed && 'string' == typeof Pr && Sq(Or, Pr, Qr.style))
                    return !0;
            } else if ('replaceAll' !== Qr.insertionMode) {
                const {
                    parent: Ur
                } = Or.at(Or.position);
                if (Ur instanceof Ne && '?' === Ur.rightDelim && Or.at(Or.position).isLastSibling && 'string' == typeof Pr && /^[)}\]|]$/.test(Pr))
                    return Ur.isDirty = !0, Ur.rightDelim = Pr, Or.position += 1, Wj(Or), $j(Or, {
                        data: Tr,
                        inputType: 'insertText'
                    }), !0;
            }
            const {
                suppressChangeNotifications: Vr
            } = Or;
            Ur.suppressChangeNotifications && (Or.suppressChangeNotifications = !0);
            const Wr = Or.suppressChangeNotifications;
            Or.suppressChangeNotifications = !0;
            const Xr = {};
            if (Xr[0] = 'replaceAll' === Ur.insertionMode ? '' : Or.getValue(Or.selection, 'latex-unstyled'), Xr['?'] = '\\placeholder{}', Xr['@'] = Xr['?'], 'replaceSelection' !== Ur.insertionMode || Or.selectionIsCollapsed ? 'replaceAll' === Ur.insertionMode ? (Or.root.setChildren([], 'body'), Or.position = 0) : 'insertBefore' === Ur.insertionMode ? Or.collapseSelection('backward') : 'insertAfter' === Ur.insertionMode && Or.collapseSelection('forward') : Or.deleteAtoms(mg(Or.selection)), Or.at(Or.position).isLastSibling || 'placeholder' !== Or.at(Or.position + 1).type ? 'placeholder' === Or.at(Or.position).type && Or.deleteAtoms([
                    Or.position - 1,
                    Or.position
                ]) : Or.deleteAtoms([
                    Or.position,
                    Or.position + 1
                ]), Xr[0])
                Xr['@'] = Xr[0];
            else if ('string' == typeof Pr && /(^|[^\\])#@/.test(Pr)) {
                const Yr = function(Zr) {
                    let $r = Zr.at(Zr.position);
                    if ('text' === $r.mode) {
                        for (; !$r.isFirstSibling && 'text' === $r.mode;)
                            $r = $r.leftSibling;
                        return Zr.offsetOf($r);
                    }
                    const as = $r,
                        bs = [];
                    for (; !$r.isFirstSibling && (Rq($r) || bs.length > 0);)
                        'mclose' === $r.type && bs.unshift($r.value), 'mopen' === $r.type && bs.length > 0 && $r.value === Zd[bs[0]] && bs.shift(), $r = $r.leftSibling;
                    return as === $r ? -1 : Zr.offsetOf($r);
                }(Or);
                Yr >= 0 && (Xr['@'] = Or.getValue(Yr, Or.position, 'latex-unstyled'), Or.deleteAtoms([
                    Yr,
                    Or.position
                ]));
            }
            Xr[0] || (Xr[0] = Xr['?']);
            let Zr = !1;
            const [$r, as] = function(bs, cs, ds, es) {
                var fs;
                let gs, hs = [];
                if ('string' != typeof cs || 'math-json' === es.format) {
                    if (!bs.mathfield.computeEngine)
                        return [
                            'math-json',
                            []
                        ];
                    [is, js] = [
                        'latex',
                        bs.mathfield.computeEngine.box(js).latex
                    ], hs = _Ve(js, bs.mathfield, {
                        parseMode: 'math'
                    });
                } else
                    'string' == typeof cs && 'ascii-math' === es.format ? ([is, js] = qg(js, {
                        format: 'ascii-math',
                        inlineShortcuts: bs.mathfield.options.inlineShortcuts
                    }), hs = _Ve(js, bs.mathfield, {
                        parseMode: 'math'
                    }), 'latex' !== is && bs.options.removeExtraneousParentheses && Gq(hs)) : ('auto' === es.format || (null === (fs = es.format) || void 0 === fs ? void 0 : fs.startsWith('latex'))) && ('auto' === es.format && ([ks, ls] = qg(ls, {
                        format: 'auto',
                        inlineShortcuts: bs.mathfield.options.inlineShortcuts
                    })), 'latex' === es.format && ([, ms] = _Bg(ms)), hs = _Ve(ms, bs.mathfield, {
                        parseMode: 'math',
                        args: ns => (Zr = !0, Xr[ns])
                    }), 'latex' !== es.format && bs.options.removeExtraneousParentheses && Gq(hs));
                return Jn(hs, es.style), [
                    null != gs ? gs : 'latex',
                    hs
                ];
            }(Or, Yr, 0, Ur);
            if (!as)
                return !1;
            const bs = Mq(as),
                cs = bs.filter(ds => ds.placeholderId && !Or.mathfield.placeholders.has(ds.placeholderId)),
                ds = bs.map(es => es.placeholderId);
            [...Or.mathfield.placeholders.keys()].filter(es => !ds.includes(es)).forEach(es => {
                var fs;
                Or.mathfield.placeholders.has(es) && (null === (fs = Or.mathfield.placeholders.get(es)) || void 0 === fs || fs.field.remove(), Or.mathfield.placeholders.delete(es));
            }), cs.forEach(es => {
                var fs, gs;
                let hs = Or.mathfield.options.virtualKeyboardMode;
                'manual' === hs && (hs = 'onfocus');
                const is = new _ss({
                        ...Or.mathfield.options,
                        virtualKeyboardMode: hs,
                        readOnly: !1
                    }),
                    js = es.defaultValue ? Kd.serialize(es.defaultValue, {
                        defaultMode: 'math'
                    }) : '';
                is.value = js, is.addEventListener('input', () => {
                    ! function(ks, ls) {
                        !ks.suppressChangeNotifications && ks.mathfield.host && (ks.suppressChangeNotifications = !0, ks.mathfield.host.dispatchEvent(new CustomEvent('placeholder-change', {
                            detail: {
                                placeholderId: ls
                            },
                            bubbles: !0,
                            composed: !0
                        })), ks.suppressChangeNotifications = !1);
                    }(Or, es.placeholderId), setTimeout(() => _Vk(Or.mathfield));
                }), null === (gs = null === (fs = Or.mathfield.element) || void 0 === fs ? void 0 : fs.querySelector('.ML__placeholdercontainer')) || void 0 === gs || gs.appendChild(is), Or.mathfield.placeholders.set(es.placeholderId, {
                    atom: es,
                    field: is
                });
            });
            const {
                parent: es
            } = Or.at(Or.position);
            if ('latex' !== $r && Or.options.removeExtraneousParentheses && es instanceof Ne && '(' === es.leftDelim && es.hasEmptyBranch('body') && 1 === as.length && 'genfrac' === as[0].type) {
                const fs = es.parent,
                    gs = es.treeBranch;
                fs.removeChild(es), fs.setChildren(as, gs);
            }
            const hs = es.hasEmptyBranch('body'),
                is = fs.at(fs.position);
            is.parent.addChildrenAfter(as, is), 'latex' === $r && 'string' == typeof gs && 'root' === es.type && hs && !Zr && (es.verbatimLatex = gs), fs.suppressChangeNotifications = Wr;
            const js = as[as.length - 1];
            if ('placeholder' === Ur.selectionMode) {
                const ks = as.reduce((ls, ms) => [
                    ...ls,
                    ...ms.children.filter(ns => 'placeholder' === ns.type)
                ], []);
                if (ks.length > 0) {
                    const ls = fs.offsetOf(ks[0]);
                    fs.setSelection(ls - 1, ls), fs.announce('move');
                } else
                    js && (fs.position = fs.offsetOf(js));
            } else
                'before' === ls.selectionMode || ('after' === ls.selectionMode ? js && (fs.position = fs.offsetOf(js)) : 'item' === ls.selectionMode && fs.setSelection(fs.anchor, fs.offsetOf(js)));
            return $j(fs, {
                data: Tr,
                inputType: 'insertText'
            }), fs.suppressChangeNotifications = Vr, !0;
        }
        constructor() {
            super('math');
        }
    }(), pl({
        undo: Or => (_wk(Or, 'accept'), Or.undo(), !0),
        redo: Or => (_wk(Or, 'accept'), Or.redo(), !0),
        scrollIntoView: Or => (Or.scrollIntoView(), !0),
        scrollToStart: Or => (Or.field.scroll(0, 0), !0),
        scrollToEnd: Or => {
            const Pr = Or.field.getBoundingClientRect();
            return Or.field.scroll(Pr.left - window.scrollX, 0), !0;
        },
        enterLatexMode: Or => (Or.switchMode('latex'), !0),
        toggleKeystrokeCaption: function(Or) {
            return Or.keystrokeCaptionVisible = !Or.keystrokeCaptionVisible, Or.keystrokeCaptionVisible ? (Or.keystrokeCaption = Dq(Or), Or.keystrokeCaption.innerHTML = '') : Or.keystrokeCaption && (Or.keystrokeCaption.style.visibility = 'hidden'), !1;
        },
        plonk: Or => (Or.model.announce('plonk'), !0),
        switchMode: (Or, Pr, Qr, Rr) => (Or.switchMode(Pr, Qr, Rr), !0),
        insert: (Or, Pr, Qr) => Or.insert(Pr, Qr),
        typedText: (Or, Pr, Qr) => (sr(Or, Pr, Qr), !0),
        insertDecimalSeparator: Or => {
            if ('math' === Or.mode && ',' === Or.options.decimalSeparator) {
                const Pr = Or.model;
                if (Pr.at(Math.max(Pr.position, Pr.anchor)).isDigit())
                    return Or.snapshot(), Or.insert('{,}', {
                        format: 'latex'
                    }), !0;
            }
            return Or.insert('.'), !0;
        },
        commit: Or => (Yj(Or.model, {
            inputType: 'insertLineBreak'
        }) && (Or.host && Or.host.dispatchEvent(new Event('change', {
            bubbles: !0,
            composed: !0
        })), $j(Or.model, {
            inputType: 'insertLineBreak'
        })), !0)
    }), pl({
        copyToClipboard: Or => (Or.focus(), Or.model.selectionIsCollapsed && Or.select(), document.execCommand('copy'), !1),
        cutToClipboard: Or => (Or.focus(), document.execCommand('cut'), !0),
        pasteFromClipboard: Or => (Or.focus(), document.execCommand('paste'), !0)
    }, {
        target: 'mathfield',
        category: 'clipboard'
    }), pl({
        applyStyle: function(Or, Pr) {
            Or.flushInlineShortcutBuffer();
            const Qr = Fr(Or, Pr),
                {
                    model: Rr
                } = Or;
            return Rr.selectionIsCollapsed ? (Or.style.fontSeries && Qr.fontSeries === Or.style.fontSeries && (Qr.fontSeries = 'auto'), Qr.fontShape && Qr.fontShape === Or.style.fontShape && (Qr.fontShape = 'auto'), Qr.color && Qr.color === Or.style.color && (Qr.color = 'none'), Qr.backgroundColor && Qr.backgroundColor === Or.style.backgroundColor && (Qr.backgroundColor = 'none'), Qr.fontSize && Qr.fontSize === Or.style.fontSize && (Qr.fontSize = 'auto'), Or.style = {
                ...Or.style,
                ...Qr
            }) : Or.model.deferNotifications({
                content: !0,
                type: 'insertText'
            }, () => {
                Rr.selection.ranges.forEach(Sr => Kn(Rr, Sr, Qr, {
                    operation: 'toggle'
                })), Or.snapshot();
            }), !0;
        }
    }, {
        target: 'mathfield'
    });
    let Or = null,
        Pr = 0;

    function Qr(Rr) {
        return e() && 'TouchEvent' in globalThis && Rr instanceof TouchEvent;
    }

    function Rr(Sr) {
        return e() && 'PointerEvent' in globalThis && Sr instanceof PointerEvent;
    }

    function Sr(Tr, Ur, Vr) {
        if (Tr >= Vr.left && Tr <= Vr.right && Ur >= Vr.top && Ur <= Vr.bottom)
            return 0;
        const Wr = Tr - (Vr.left + Vr.right) / 2,
            Xr = Ur - (Vr.top + Vr.bottom) / 2;
        return d * d + e * e;
    }

    function Vr(Wr, Xr, Yr, Zr, $r) {
        if (!Yr.id)
            return [
                1 / 0,
                null
            ];
        if (Xr.has(Yr.id))
            return Xr.get(Yr.id);
        const as = Ui(Wr, Yr);
        if (!f)
            return [
                1 / 0,
                null
            ];
        let bs = [
            1 / 0,
            null
        ];
        if (Yr.hasChildren && !Yr.captureSelection && Zr >= f.left && Zr <= f.right)
            for (const cs of Yr.children) {
                const ds = Vr(Wr, Xr, f, Zr, $r);
                Yr[0] <= bs[0] && (bs = Yr);
            }
        return bs[1] || (bs = [
            Sr(Zr, $r, f),
            Yr
        ]), Xr.set(Yr.id, bs), bs;
    }

    function Zr($r, as, bs) {
        const [, cs] = Vr($r, new Map(), $r.model.root, as, bs);
        return cs;
    }

    function $r(as, bs, cs, ds) {
        var es;
        const fs = as.fieldContent.getBoundingClientRect();
        if (bs > f.right || cs > f.bottom + 8)
            return as.model.lastOffset;
        if (bs < f.left || cs < f.top - 8)
            return 0;
        (ds = null != ds ? ds : {}).bias = null !== (e = ds.bias) && void 0 !== e ? e : 0;
        let gs = Zr(as, bs, cs);
        const hs = [];
        let is = gs;
        for (; is;)
            h.unshift(is), is = is.parent;
        for (const js of h)
            if (as.captureSelection) {
                gs = as;
                break;
            }
        let ks = as.model.offsetOf(gs);
        if (ks < 0)
            return -1;
        if (gs.leftSibling)
            if (0 === ds.bias && 'placeholder' !== gs.type) {
                const ls = Ui(as, gs);
                cs && bs < (cs.left + cs.right) / 2 && (ks = as.model.offsetOf(gs.leftSibling));
            } else
                ds.bias < 0 && (ks = as.model.offsetOf(gs.leftSibling));
        return ks;
    }
    new class extends Fg {
        onPaste(fs, gs) {
            if (!gs.clipboardData)
                return !1;
            const hs = gs.clipboardData.getData('text/plain');
            return !(!hs || !Yj(fs.model, {
                inputType: 'insertFromPaste',
                data: hs
            }) || (fs.snapshot(), this.insert(fs.model, hs) && ($j(fs.model, {
                inputType: 'insertFromPaste'
            }), _Vk(fs)), gs.preventDefault(), gs.stopPropagation(), 0));
        }
        insert(fs, gs, hs = {}) {
            if (!Yj(fs, {
                    data: gs,
                    inputType: 'insertText'
                }))
                return !1;
            hs.insertionMode || (hs.insertionMode = 'replaceSelection'), hs.selectionMode || (hs.selectionMode = 'placeholder'), hs.format || (hs.format = 'auto');
            const {
                suppressChangeNotifications: is
            } = fs;
            hs.suppressChangeNotifications && (fs.suppressChangeNotifications = !0);
            const js = fs.suppressChangeNotifications;
            fs.suppressChangeNotifications = !0, 'replaceSelection' !== hs.insertionMode || fs.selectionIsCollapsed ? 'replaceAll' === hs.insertionMode ? (fs.root.setChildren([], 'body'), fs.position = 0) : 'insertBefore' === hs.insertionMode ? fs.collapseSelection('backward') : 'insertAfter' === hs.insertionMode && fs.collapseSelection('forward') : fs.deleteAtoms(mg(fs.selection));
            const ks = (g = gs, h = fs.mathfield, _Ve(g = (g = (g = (g = (g = (g = (g = (g = (g = (g = (g = g.replace(/\\/g, '\\textbackslash ')).replace(/#/g, '\\#')).replace(/\$/g, '\\$')).replace(/%/g, '\\%')).replace(/&/g, '\\&')).replace(/_/g, '\\_')).replace(/{/g, '\\textbraceleft ')).replace(/}/g, '\\textbraceright ')).replace(/\^/g, '\\textasciicircum ')).replace(/~/g, '\\textasciitilde ')).replace(/\xa3/g, '\\textsterling '), h, {
                parseMode: 'text'
            }));
            var ls, ms;
            if (Jn(ks, hs.style), !ks)
                return !1;
            const ns = fs.at(fs.position),
                os = ns.parent.addChildrenAfter(ks, ns);
            return fs.suppressChangeNotifications = js, 'before' === hs.selectionMode || ('item' === hs.selectionMode ? fs.setSelection(fs.anchor, fs.offsetOf(os)) : os && (fs.position = fs.offsetOf(os))), $j(fs, {
                data: gs,
                inputType: 'insertText'
            }), fs.suppressChangeNotifications = is, !0;
        }
        constructor() {
            super('text');
        }
    }();
    const fs = 'mathlive#remote-virtual-keyboard-message';
    class gs {
        get visible() {
            var hs, is;
            return null !== (is = null === (hs = _Gt().sharedVirtualKeyboard) || void 0 === hs ? void 0 : hs.visible) && void 0 !== is && is;
        }
        set visible(hs) {
            _Gt().sharedVirtualKeyboard && (_Gt().sharedVirtualKeyboard.visible = hs);
        }
        setOptions(hs) {
            this.sendMessage('setOptions', {
                options: JSON.stringify(_hs(hs))
            });
        }
        create() {}
        dispose() {
            this.disable();
        }
        enable() {
            this.enabled || (this.enabled = !0, globalThis.addEventListener('message', this));
        }
        disable() {
            this.enabled && (globalThis.removeEventListener('message', this), this.enabled = !1);
        }
        executeCommand(hs) {
            var is, js, ks;
            return 'virtual-keyboard' === rl(hs) ? (this._mathfield && (this.setOptions(_hs(this._mathfield.getOptions())), ('showVirtualKeyboard' === hs || 'toggleVirtualKeyboard' === hs && !1 === this.visible) && (null === (js = (is = this._mathfield).focus) || void 0 === js || js.call(is))), this.sendMessage('executeCommand', {
                command: hs
            }), !1) : null === (ks = this._mathfield) || void 0 === ks ? void 0 : ks.executeCommand(hs);
        }
        focusMathfield() {}
        blurMathfield() {}
        stateChanged() {}
        handleEvent(hs) {
            var is, js, ks, ls;
            if ('message' === hs.type && hs.data && hs.data.type === fs) {
                if (!Zi(hs.origin, this.originValidator))
                    throw new Error(`Message from unknown origin (${ hs.origin }) cannot be handled`);
                const {
                    action: ms
                } = hs.data;
                if ('executeCommand' === ms) {
                    if ('virtual-keyboard' === rl(hs.data.command) && window === globalThis.parent)
                        return;
                    this.executeCommand(hs.data.command);
                } else
                    'updateState' === ms ? (this.visible = hs.data.state.visible, this.height = hs.data.state.height) : 'focus' === ms ? null === (js = null === (is = this._mathfield) || void 0 === is ? void 0 : is.focus) || void 0 === js || js.call(is) : 'blur' === ms && (null === (ls = null === (ks = this._mathfield) || void 0 === ks ? void 0 : ks.blur) || void 0 === ls || ls.call(ks));
            }
        }
        sendMessage(hs, is = {}) {
            return !!globalThis.parent && (globalThis.parent.postMessage({
                type: fs,
                action: hs,
                ...is
            }, this.targetOrigin), !0);
        }
        constructor(hs) {
            var is, js, ks;
            this.targetOrigin = null !== (js = null !== (is = hs.targetOrigin) && void 0 !== is ? is : globalThis.origin) && void 0 !== js ? js : '*', this.originValidator = null !== (ks = hs.originValidator) && void 0 !== ks ? ks : 'same-origin', this._mathfield = hs.mathfield;
        }
    }

    function _hs(is) {
        if ('object' != typeof is)
            return {};
        const js = {};
        return is.fontsDirectory && (js.fontsDirectory = is.fontsDirectory), is.soundsDirectory && (js.soundsDirectory = is.soundsDirectory), is.virtualKeyboards && (js.virtualKeyboards = is.virtualKeyboards), is.virtualKeyboardLayout && (js.virtualKeyboardLayout = is.virtualKeyboardLayout), is.customVirtualKeyboardLayers && (js.customVirtualKeyboardLayers = is.customVirtualKeyboardLayers), is.customVirtualKeyboards && (js.customVirtualKeyboards = is.customVirtualKeyboards), is.virtualKeyboardTheme && (js.virtualKeyboardTheme = is.virtualKeyboardTheme), is.keypressVibration && (js.keypressVibration = is.keypressVibration), is.keypressSound && (js.keypressSound = is.keypressSound), is.plonkSound && (js.plonkSound = is.plonkSound), is.virtualKeyboardToolbar && (js.virtualKeyboardToolbar = is.virtualKeyboardToolbar), is.targetOrigin && (js.targetOrigin = is.targetOrigin), is.originValidator && (js.originValidator = is.originValidator), js;
    }
    let js, ks;
    class ls {
        get audioContext() {
            return this._audioContext || (this._audioContext = new AudioContext()), this._audioContext;
        }
        get colorMap() {
            return ms => {
                var ns;
                let os;
                return 'function' == typeof(null === (ns = this.options) || void 0 === ns ? void 0 : ns.colorMap) && (os = this.options.colorMap(ms)), os || (os = y(ms)), os;
            };
        }
        get backgroundColorMap() {
            return ms => {
                var ns;
                let os;
                return 'function' == typeof(null === (ns = this.options) || void 0 === ns ? void 0 : ns.backgroundColorMap) && (os = this.options.backgroundColorMap(ms)), os || 'function' != typeof this.options.colorMap || (os = this.options.colorMap(ms)), os || (os = N(ms)), os;
            };
        }
        get fractionNavigationOrder() {
            var ms, ns;
            return null !== (ns = null === (ms = this.options) || void 0 === ms ? void 0 : ms.fractionNavigationOrder) && void 0 !== ns ? ns : 'numerator-denominator';
        }
        get placeholderSymbol() {
            var ms, ns;
            return null !== (ns = null === (ms = this.options) || void 0 === ms ? void 0 : ms.placeholderSymbol) && void 0 !== ns ? ns : '\u25A2';
        }
        get smartFence() {
            var ms, ns;
            return null !== (ns = null === (ms = this.options) || void 0 === ms ? void 0 : ms.smartFence) && void 0 !== ns && ns;
        }
        get letterShapeStyle() {
            var ms, ns;
            return null !== (ns = null === (ms = this.options) || void 0 === ms ? void 0 : ms.letterShapeStyle) && void 0 !== ns ? ns : 'tex';
        }
        get registers() {
            var ms, ns;
            return null !== (ns = null === (ms = this.options) || void 0 === ms ? void 0 : ms.registers) && void 0 !== ns ? ns : {};
        }
        getDefinition(ms, ns = 'math') {
            return _Uf(ms, ns);
        }
        getMacro(ms) {
            return _Wf(ms, this.options.macros);
        }
        get virtualKeyboard() {
            if (!this.options.readOnly)
                return this._virtualKeyboard || (this.options.useSharedVirtualKeyboard || _Gt().sharedVirtualKeyboard ? this._virtualKeyboard = new gs({
                    targetOrigin: this.options.sharedVirtualKeyboardTargetOrigin,
                    originValidator: this.options.originValidator,
                    mathfield: this
                }) : this._virtualKeyboard = new np(this.options, this)), this._virtualKeyboard;
        }
        get computeEngine() {
            var ms, ns;
            if (void 0 === this._computeEngine) {
                const os = null === (ms = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === ms ? void 0 : ms.ComputeEngine;
                os && (this._computeEngine = new os()), this._computeEngine && ',' === this.options.decimalSeparator && (this._computeEngine.latexOptions.decimalMarker = '{,}');
            }
            return null !== (os = this._computeEngine) && void 0 !== os ? os : null;
        }
        get virtualKeyboardState() {
            var ms;
            return (null === (ms = this.virtualKeyboard) || void 0 === ms ? void 0 : ms.visible) ? 'visible' : 'hidden';
        }
        set virtualKeyboardState(ms) {
            this.virtualKeyboard && ('hidden' === ms ? this.virtualKeyboard.executeCommand('hideVirtualKeyboard') : 'visible' === ms && this.virtualKeyboard.executeCommand('showVirtualKeyboard'));
        }
        get keybindings() {
            var ms, ns;
            if (this._keybindings)
                return this._keybindings;
            const [os, ps] = function(qs, rs) {
                const ss = [],
                    ts = [];
                for (const us of qs)
                    try {
                        const vs = Pj(us, rs);
                        if (vs) {
                            const ws = ss.filter(xs => xs.key === vs.key && xs.ifMode === vs.ifMode);
                            if (ws.length > 0)
                                throw new Error(`Ambiguous key binding ${ us.key } (${ _Sj(us.command) }) matches ${ ws[0].key } (${ _Sj(ws[0].command) }) with the ${ rs.displayName } keyboard layout`);
                            ss.push(vs);
                        }
                    } catch (vs) {
                        vs instanceof Error && ws.push(vs.message);
                    }
                return [
                    ss,
                    ws
                ];
            }(this.options.keybindings, null !== (ms = Bj()) && void 0 !== ms ? ms : wj);
            return (null === (ns = Bj()) || void 0 === ns ? void 0 : ns.score) > 0 && (this._keybindings = os, ps.length), os;
        }
        setOptions(ms) {
            var ns, os;
            if (this.options = Jl(this.options, ms), 'computeEngine' in ms && (this._computeEngine = this.options.computeEngine), this._computeEngine && 'decimalSeparator' in ms && (this._computeEngine.latexOptions.decimalMarker = ',' === this.options.decimalSeparator ? '{,}' : '.'), this.model.setListeners({
                    onSelectionDidChange: ps => this._onSelectionDidChange()
                }), this.model.options.macros = this.options.macros, this._keybindings = void 0, ('soundsDirectory' in ms || 'plonkSound' in ms || 'keypressSound' in ms || 'spacebarKeypressSound' in ms || 'returnKeypressSound' in ms || 'deleteKeypressSound' in ms) && (this.audioBuffers = {}), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.options.readOnly ? (this.hasFocus() && 'visible' === this.virtualKeyboardState && this.executeCommand('hideVirtualKeyboard'), this.onBlur(), this.element.classList.add('ML__isReadOnly')) : this.element.classList.remove('ML__isReadOnly'), null === (ns = this.virtualKeyboard) || void 0 === ns || ns.setOptions(this.options), this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), 'virtualKeyboardToggleGlyph' in ms) {
                const ps = null === (os = this.element) || void 0 === os ? void 0 : os.querySelector('.ML__virtual-keyboard-toggle');
                ps && (ps.innerHTML = this.options.createHTML(this.options.virtualKeyboardToggleGlyph));
            }
            const qs = Kd.serialize(this.model.root, {
                expandMacro: !1,
                defaultMode: this.options.defaultMode
            });
            ('macros' in ps || this.model.getValue() !== qs) && Fg.insert('math', this.model, qs, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), _Vk(this);
        }
        getOptions(ms) {
            return _Ql(this.options, ms);
        }
        getOption(ms) {
            return _Ql(this.options, ms);
        }
        handleEvent(ms) {
            if (Bi(this))
                switch (ms.type) {
                    case 'focus':
                        this.onFocus();
                        break;
                    case 'blur':
                        this.onBlur();
                        break;
                    case 'touchstart':
                    case 'mousedown':
                    case 'pointerdown':
                        ! function(ns, os) {
                            var ps;
                            ns.atomBoundsCache = new Map();
                            const qs = ns;
                            let rs, ss = !1,
                                ts = 'none';
                            if (Rr(os) && os.buttons > 1)
                                return;
                            let us = !1,
                                vs = !1;
                            const ws = Qr(os) ? os.touches[0].clientX : os.clientX,
                                xs = Qr(os) ? os.touches[0].clientY : os.clientY,
                                ys = Date.now(),
                                zs = qs.field,
                                As = setInterval(() => {
                                    us ? zs.scroll({
                                        top: 0,
                                        left: zs.scrollLeft - 16
                                    }) : vs && zs.scroll({
                                        top: 0,
                                        left: zs.scrollLeft + 16
                                    });
                                }, 32);

                            function Bs(Cs) {
                                e() && ('PointerEvent' in window ? (ri(zs, 'pointermove', Hm), ri(zs, 'pointerup pointercancel', Bs), Cs instanceof PointerEvent && zs.releasePointerCapture(Cs.pointerId)) : (ri(zs, 'touchmove', Hm), ri(zs, 'touchcancel touchend', Bs), ri(window, 'mousemove', Hm), ri(window, 'mouseup blur', Bs)), ss = !1, clearInterval(As), ns.element.classList.remove('tracking'), Cs && Cs.preventDefault());
                            }

                            function Cs(Ds) {
                                if (!qs.hasFocus())
                                    return void Bs(null);
                                const Es = Qr(Ds) ? Ds.touches[0].clientX : Ds.clientX,
                                    Fs = Qr(Ds) ? Ds.touches[0].clientY : Ds.clientY,
                                    Gs = Qr(Ds) || 'touch' === Ds.pointerType ? 20 : 5;
                                if (Date.now() < ys + 500 && Math.abs(ws - Es) < ss && Math.abs(xs - Fs) < ss)
                                    return Ds.preventDefault(), void Ds.stopPropagation();
                                const Hs = zs.getBoundingClientRect();
                                vs = Es > ts.right, us = Es < ts.left;
                                let Is = rs;
                                Rr(Ds) ? Ds.isPrimary || (Is = $r(qs, Ds.clientX, Ds.clientY, {
                                    bias: 0
                                })) : Ds.touches && 2 === Ds.touches.length && (Is = $r(qs, Ds.touches[1].clientX, Ds.touches[1].clientY, {
                                    bias: 0
                                }));
                                const Js = $r(qs, Es, Fs, {
                                    bias: Es <= ws ? Es === ws ? 0 : -1 : 1
                                });
                                Is >= 0 && Cs >= 0 && (qs.model.extendSelectionTo(Is, Cs), _Vk(ns)), Ds.preventDefault(), Ds.stopPropagation();
                            }
                            Or && Math.abs(Or.x - ws) < 5 && Math.abs(Or.y - xs) < 5 && Date.now() < Or.time + 500 ? (Pr += 1, Or.time = ys) : (Or = {
                                x: ws,
                                y: xs,
                                time: ys
                            }, Pr = 1);
                            const Is = zs.getBoundingClientRect();
                            if (ws >= Is.left && ws <= Is.right && xs >= Is.top && xs <= Is.bottom) {
                                if (ns.hasFocus() || (ts = 'all', ns.focus({
                                        scrollIntoView: !1
                                    })), ns.flushInlineShortcutBuffer(), ns.smartModeSuppressed = !1, rs = $r(ns, ws, xs, {
                                        bias: 0
                                    }), rs >= 0) {
                                    if (ns.element.classList.add('tracking'), os.shiftKey) {
                                        const Js = ns.model.selectionIsCollapsed;
                                        ns.model.extendSelectionTo(ns.model.anchor, rs), ts = vk(ns.model) || Js ? 'all' : 'selection';
                                    } else
                                        'placeholder' === ns.model.at(rs).type ? (ns.model.setSelection(rs - 1, rs), ts = 'selection') : 'placeholder' === (null === (Es = ns.model.at(rs).rightSibling) || void 0 === Es ? void 0 : Es.type) ? (ns.model.setSelection(rs, rs + 1), ts = 'selection') : (ns.model.position = rs, ts = vk(ns.model) ? 'all' : 'selection');
                                    ns.style = {}, 3 === Js.detail || Pr > 2 ? (Bs(Js), 3 !== Js.detail && 3 !== Pr || (ns.model.selection = {
                                        ranges: [
                                            [
                                                0,
                                                ns.model.lastOffset
                                            ]
                                        ]
                                    }, ts = 'all')) : ss || (ss = !0, Fs() && 'PointerEvent' in window ? (mi(zs, 'pointermove', Cs), mi(zs, 'pointerup pointercancel', Bs), Js instanceof PointerEvent && zs.setPointerCapture(Js.pointerId)) : (mi(window, 'blur', Bs), Qr(Js) && Js.touches ? (mi(Js.target, 'touchmove', Cs), mi(Js.target, 'touchcancel touchend', Bs)) : (mi(window, 'mousemove', Cs), mi(window, 'mouseup', Bs))), 2 !== Js.detail && 2 !== Pr || (Lo(ns.model), ts = 'all'));
                                }
                            } else
                                Or = null;
                            'none' !== ts && (ns.model.selectionIsCollapsed && (ts = 'all'), _Vk(ns)), Js.preventDefault();
                        }(this, ms);
                        break;
                    case 'resize':
                        this.resizeTimer && cancelAnimationFrame(this.resizeTimer), this.resizeTimer = requestAnimationFrame(() => Bi(this) && this.onResize());
                        break;
                    case 'wheel':
                        this.onWheel(ms);
                }
        }
        dispose() {
            if (!Bi(this))
                return;
            const ms = this.element;
            delete this.element, delete ms.mathfield, ms.innerHTML = this.model.getValue(), ri(ms, 'pointerdown', this), ri(ms, 'touchstart:active mousedown', this), ri(ms, 'focus', this), ri(ms, 'blur', this), ri(window, 'resize', this), window.removeEventListener('blur', this, {
                capture: !0
            }), delete this.accessibleNode, delete this.ariaLiveText, delete this.field, delete this.fieldContent, this.virtualKeyboardToggle.remove(), delete this.virtualKeyboardToggle, this._virtualKeyboard && (this._virtualKeyboard.dispose(), delete this._virtualKeyboard), yi(this.popover), _Fk && _Fk.release(), _Gk && _Gk.release(), delete this.popover, yi(this.keystrokeCaption), Bq && Bq.release(), Cq && Cq.release(), delete this.keystrokeCaption, this.stylesheets.forEach(ns => null == ns ? void 0 : ns.release());
        }
        flushInlineShortcutBuffer(ms) {
            if (null != ms || (ms = {
                    defer: !1
                }), !ms.defer)
                return this.inlineShortcutBuffer = [], clearTimeout(this.inlineShortcutBufferFlushTimer), void(this.inlineShortcutBufferFlushTimer = 0);
            this.options.inlineShortcutTimeout > 0 && (clearTimeout(this.inlineShortcutBufferFlushTimer), this.inlineShortcutBufferFlushTimer = setTimeout(() => this.flushInlineShortcutBuffer(), this.options.inlineShortcutTimeout));
        }
        executeCommand(ms) {
            var ns, os;
            return 'virtual-keyboard' === rl(ms) ? null !== (os = null === (ns = this.virtualKeyboard) || void 0 === ns ? void 0 : ns.executeCommand(ms)) && void 0 !== os && os : function(ps, qs) {
                var rs, ss, ts;
                if (!qs)
                    return !1;
                let us, vs = [],
                    ws = !1,
                    xs = !1;
                d(qs) ? (us = qs[0], vs = qs.slice(1)) : us = qs, us = us.replace(/-\w/g, ys => ys[1].toUpperCase());
                const ys = null === (rs = ol[us]) || void 0 === rs ? void 0 : rs.target;
                if ('model' === ys) {
                    if (ps.options.readOnly && /^(paste|cut|insert|delete|transpose|add)/.test(us))
                        return ps.model.announce('plonk'), !1;
                    /^(delete|transpose|add)/.test(us) && 'deleteBackward' !== us && ps.flushInlineShortcutBuffer(), /^(delete|transpose|add)/.test(us) && 'latex' !== ps.mode && (ps.popUndoStack(), ps.snapshot()), 'latex' !== ps.mode || /^(complete)/.test(us) || jk(ps), ol[us].fn(ps.model, ...vs), 'latex' !== ps.mode && /^(delete|transpose|add)/.test(us) && ps.snapshot(), 'latex' === ps.mode && mk(ps), xs = !0, ws = !0;
                } else if ('virtual-keyboard' === ys)
                    xs = null !== (ts = null === (ss = ps.virtualKeyboard) || void 0 === ss ? void 0 : ss.executeCommand(qs)) && void 0 !== ts && ts, ws = !0;
                else {
                    if (!ol[us])
                        throw new Error(`Unknown command "${ us }"`);
                    /^(undo|redo)/.test(us) && ps.flushInlineShortcutBuffer(), xs = ol[us].fn(ps, ...vs), ws = !0;
                }
                return 'virtual-keyboard' !== ys && (ps.model.selectionIsCollapsed && !/^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(us) || (ps.flushInlineShortcutBuffer(), ps.style = {})), xs && _Vk(ps), ws;
            }(this, ms);
        }
        get errors() {
            return bf(this.model.getValue(), this);
        }
        getValue(ms, ns, os) {
            return this.model.getValue(ms, ns, os);
        }
        setValue(ms, ns) {
            var os;
            void 0 === (ns = null != ns ? ns : {
                mode: 'math'
            }).insertionMode && (ns.insertionMode = 'replaceAll'), void 0 !== ns.format && 'auto' !== ns.format || (ns.format = 'latex');
            let ps = 'math';
            void 0 !== ns.mode && 'auto' !== ns.mode || (ps = null !== (os = Hn(this.model, this.model.position)) && void 0 !== os ? os : 'math'), Fg.insert(ps, this.model, ms, ns) && (this.undoManager.snapshot(), _Vk(this));
        }
        get expression() {
            const ms = this.computeEngine;
            return ms ? ms.box(ms.parse(this.model.getValue())) : null;
        }
        loadSound(ms) {
            var ns, os, ps, qs, rs, ss, ts;
            delete this.audioBuffers[ms];
            let us = '';
            switch (ms) {
                case 'keypress':
                    us = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null === (ns = this.options.keypressSound) || void 0 === ns ? void 0 : ns.default;
                    break;
                case 'spacebar':
                    us = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (ps = null === (os = this.options.keypressSound) || void 0 === os ? void 0 : os.spacebar) && void 0 !== ps ? ps : null === (qs = this.options.keypressSound) || void 0 === qs ? void 0 : qs.default;
                    break;
                case 'delete':
                    us = 'string' == typeof this.options.keypressSound ? this.options.keypressSound : null !== (ss = null === (rs = this.options.keypressSound) || void 0 === rs ? void 0 : rs.delete) && void 0 !== ss ? ss : null === (ts = this.options.keypressSound) || void 0 === ts ? void 0 : ts.default;
                    break;
                case 'plonk':
                    us = this.options.plonkSound;
            }
            if ('string' != typeof us)
                return;
            us = us.trim();
            const vs = this.options.soundsDirectory;
            null != vs && 'null' !== vs && 'none' !== us && 'null' !== us && fetch(cm(vs + '/' + us)).then(ws => ws.arrayBuffer()).then(ws => this.audioContext.decodeAudioData(ws)).then(ws => {
                this.audioBuffers[ms] = ws;
            });
        }
        playSound(ms) {
            if (this.audioBuffers[ms] || this.loadSound(ms), !this.audioBuffers[ms])
                return;
            const ns = this.audioContext.createBufferSource();
            ns.buffer = this.audioBuffers[ms];
            const os = this.audioContext.createGain();
            os.gain.value = 0.5, ns.connect(os).connect(this.audioContext.destination), ns.start();
        }
        scrollIntoView() {
            var ms;
            if (!this.element)
                return;
            null === (ms = this.host) || void 0 === ms || ms.scrollIntoView({
                block: 'nearest',
                inline: 'nearest'
            }), this.dirty && _Wk(this, {
                interactive: !0
            });
            const ns = this.field.getBoundingClientRect();
            let os = null;
            if (this.model.selectionIsCollapsed)
                os = Di(this.field);
            else {
                const ps = Yi(this);
                if (ps.length > 0) {
                    let qs = -1 / 0,
                        rs = -1 / 0;
                    for (const ss of ps)
                        ss.right > qs && (qs = ss.right), ss.top < rs && (rs = ss.top);
                    os = {
                        x: qs + ss.left - this.field.scrollLeft,
                        y: rs + ss.top - this.field.scrollTop,
                        height: 0
                    };
                }
            }
            if (this.host && os) {
                const rs = this.host.getBoundingClientRect(),
                    ss = os.y;
                let ts = this.host.scrollTop;
                ss < rs.top ? ts = ss - rs.top + this.host.scrollTop : ss > rs.bottom && (ts = ss - rs.bottom + this.host.scrollTop + os.height), this.host.scroll({
                    top: ts,
                    left: 0
                });
            }
            if (os) {
                const ts = os.x - window.scrollX;
                let us = this.field.scrollLeft;
                ts < ss.left ? us = ts - ss.left + this.field.scrollLeft - 20 : ts > ss.right && (us = ts - ss.right + this.field.scrollLeft + 20), this.field.scroll({
                    top: this.field.scrollTop,
                    left: us
                });
            }
        }
        insert(ms, ns) {
            if ('string' == typeof ms && ms.length > 0) {
                if (this.flushInlineShortcutBuffer(), (ns = null != ns ? ns : {
                        mode: 'math'
                    }).focus && this.focus(), ns.feedback && (this.options.keypressVibration && h() && navigator.vibrate(3), this.playSound('keypress')), ns.scrollIntoView && this.scrollIntoView(), '\\\\' === ms)
                    cn(this.model);
                else if ('&' === ms)
                    dn(this.model);
                else {
                    const os = this.style;
                    Fg.insert(this.mode, this.model, ms, {
                        style: this.model.at(this.model.position).computedStyle,
                        ...ns
                    }), ns.resetStyle && (this.style = os);
                }
                return this.undoManager.snapshot(), _Vk(this), !0;
            }
            return !1;
        }
        switchMode(ms, ns = '', os = '') {
            var ps;
            if (this.mode === ms || this.options.readOnly)
                return;
            if (!(null === (ps = this.host) || void 0 === ps ? void 0 : ps.dispatchEvent(new Event('mode-change', {
                    bubbles: !0,
                    composed: !0,
                    cancelable: !0
                }))))
                return;
            const qs = this.mode,
                {
                    model: rs
                } = this;
            rs.deferNotifications({
                content: Boolean(os) || Boolean(ns),
                selection: !0,
                type: 'insertText'
            }, () => {
                var ss;
                let ts = !1;
                if (this.flushInlineShortcutBuffer(), this.smartModeSuppressed = /text|math/.test(this.mode) && /text|math/.test(ms), ns && 'latex' !== ms) {
                    const us = _Ve(ns, this, {
                        parseMode: ms
                    });
                    rs.collapseSelection('forward');
                    const vs = rs.at(rs.position);
                    rs.position = rs.offsetOf(vs.parent.addChildrenAfter(us, vs)), ts = !0;
                }
                if (this.mode = ms, 'latex' === ms) {
                    let ws, xs = rs.selectionIsCollapsed;
                    _wk(this, 'accept'), (null === (vs = this.virtualKeyboard) || void 0 === vs ? void 0 : vs.visible) && this.executeCommand([
                        'switchKeyboardLayer',
                        'latex-lower'
                    ]);
                    let ys = rs.at(rs.position);
                    if (xs)
                        ws = '\\';
                    else {
                        const zs = mg(rs.selection);
                        ws = this.model.getValue(zs, 'latex');
                        const As = this.model.extractAtoms(zs);
                        1 === ts.length && ts[0] instanceof Pe && (ws = ns, xs = !0), ys = rs.at(zs[0]);
                    }
                    const Bs = new Cf(ws, this);
                    ys.parent.addChildAfter(ts, ys), xs ? rs.position = rs.offsetOf(ts.lastChild) : rs.setSelection(rs.offsetOf(ts.firstChild), rs.offsetOf(ts.lastChild));
                } else
                    ak(rs).forEach(zs => {
                        zs.isError = !1;
                    });
                if (us) {
                    const zs = _Ve(us, this, {
                        parseMode: qs
                    });
                    rs.collapseSelection('forward');
                    const As = rs.at(rs.position);
                    rs.position = rs.offsetOf(As.parent.addChildrenAfter(zs, As)), ts = !0;
                }
                return _Vk(this), ts;
            }), this.mode = ms;
        }
        hasFocus() {
            return e() && this.keyboardDelegate.hasFocus();
        }
        focus(ms) {
            var ns;
            this.keyboardDelegate.focus(), this.model.announce('line'), (null === (ns = null == ms ? void 0 : ms.scrollIntoView) || void 0 === ns || ns) && this.scrollIntoView();
        }
        blur() {
            this.keyboardDelegate.blur();
        }
        select() {
            this.model.selection = {
                ranges: [
                    [
                        0,
                        this.model.lastOffset
                    ]
                ]
            };
        }
        applyStyle(ms, ns = {}) {
            var os, ps;
            const qs = {
                operation: 'set',
                suppressChangeNotifications: !1
            };
            mm(ns) ? qs.range = ns : (qs.range = ns.range, qs.suppressChangeNotifications = null !== (os = ns.suppressChangeNotifications) && void 0 !== os && os);
            const rs = Fr(this, ms),
                ss = null !== (ps = qs.operation) && void 0 !== ps ? ps : 'set';
            this.model.deferNotifications({
                content: !qs.suppressChangeNotifications,
                type: 'insertText'
            }, () => {
                void 0 === qs.range ? this.model.selection.ranges.forEach(ts => Kn(this.model, ts, rs, {
                    operation: ss
                })) : Kn(this.model, qs.range, rs, {
                    operation: ss
                });
            }), _Vk(this);
        }
        getCaretPoint() {
            const ms = Di(this.field);
            return ms ? {
                x: ms.x,
                y: ms.y
            } : null;
        }
        setCaretPoint(ms, ns) {
            const os = $r(this, ms, ns, {
                bias: 0
            });
            if (os < 0)
                return !1;
            const ps = this.model.position;
            return this.model.position = os, this.model.announce('move', ps), _Vk(this), !0;
        }
        getPlaceholderField(ms) {
            var ns;
            return null === (ns = this.placeholders.get(ms)) || void 0 === ns ? void 0 : ns.field;
        }
        attachNestedMathfield() {
            let ms = !1;
            const ns = this.field.getBoundingClientRect();
            this.placeholders.forEach((os, ps) => {
                var qs, rs;
                const ss = this.field.querySelector(`[data-placeholder-id=${ ps }]`);
                if (!ss)
                    return;
                const ts = ss.getBoundingClientRect(),
                    us = ts.left - ns.left + (null !== (qs = this.element.offsetLeft) && void 0 !== qs ? qs : 0);
                (!os.field.style.left || Math.abs(us - parseFloat(os.field.style.left)) >= 1) && (ms = !0, os.field.style.left = `${ us }px`);
                const vs = ts.top - ns.top + (null !== (rs = this.element.offsetTop) && void 0 !== rs ? rs : 0);
                (!os.field.style.top || Math.abs(vs - parseFloat(os.field.style.top)) >= 1) && (ms = !0, os.field.style.top = `${ vs }px`);
            }), ms && _Vk(this);
        }
        canUndo() {
            return this.undoManager.canUndo();
        }
        canRedo() {
            return this.undoManager.canRedo();
        }
        popUndoStack() {
            this.undoManager.pop();
        }
        snapshot() {
            var ms, ns;
            this.undoManager.snapshot() && (null === (ms = this.virtualKeyboard) || void 0 === ms || ms.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (ns = this.host) || void 0 === ns || ns.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        snapshotAndCoalesce() {
            var ms, ns;
            this.undoManager.snapshotAndCoalesce() && (null === (ms = this.virtualKeyboard) || void 0 === ms || ms.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (ns = this.host) || void 0 === ns || ns.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'snapshot'
                }
            })));
        }
        undo() {
            var ms, ns;
            this.undoManager.undo() && (null === (ms = this.virtualKeyboard) || void 0 === ms || ms.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (ns = this.host) || void 0 === ns || ns.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        redo() {
            var ms, ns;
            this.undoManager.redo() && (null === (ms = this.virtualKeyboard) || void 0 === ms || ms.executeCommand([
                'onUndoStateChanged',
                this.canUndo(),
                this.canRedo()
            ]), null === (ns = this.host) || void 0 === ns || ns.dispatchEvent(new CustomEvent('undo-state-change', {
                bubbles: !0,
                composed: !0,
                detail: {
                    type: 'undo'
                }
            })));
        }
        resetUndo() {
            var ms;
            null === (ms = this.undoManager) || void 0 === ms || ms.reset();
        }
        _onSelectionDidChange() {
            var ms, ns, os;
            this.keyboardDelegate.setValue(this.model.getValue(this.model.selection, 'latex-expanded'));
            const ps = this.model.getAtoms(this.model.selection);
            if (1 === ps.length && 'placeholder' === ps[0].type) {
                const qs = ps[0];
                this.model.mathfield.placeholders.has(qs.placeholderId) && (null === (ms = this.model.mathfield.placeholders.get(qs.placeholderId)) || void 0 === ms || ms.field.focus());
            } {
                const rs = this.model.at(this.model.position),
                    ss = null !== (qs = rs.mode) && void 0 !== qs ? qs : Yl(this.options);
                this.mode !== ss && ('latex' === this.mode ? (_wk(this, 'accept', {
                    mode: ss
                }), this.model.position = this.model.offsetOf(rs)) : this.switchMode(ss));
            }
            null === (ss = this.host) || void 0 === ss || ss.dispatchEvent(new Event('selection-change', {
                bubbles: !0,
                composed: !0
            }));
        }
        onFocus() {
            var ms, ns, os;
            !this.focusBlurInProgress && this.blurred && (this.focusBlurInProgress = !0, this.blurred = !1, this.keyboardDelegate.focus(), null === (ms = this.virtualKeyboard) || void 0 === ms || ms.setOptions(this.options), null === (ns = this.virtualKeyboard) || void 0 === ns || ns.enable(), 'onfocus' === this.options.virtualKeyboardMode && this.executeCommand('showVirtualKeyboard'), Kk(this), _Wk(this, {
                interactive: !0
            }), null === (os = this.host) || void 0 === os || os.dispatchEvent(new Event('focus', {
                bubbles: !1,
                composed: !0
            })), this.valueOnFocus = this.model.getValue(), this.focusBlurInProgress = !1);
        }
        onBlur() {
            var ms, ns;
            this.focusBlurInProgress || this.blurred || (this.focusBlurInProgress = !0, this.blurred = !0, this.ariaLiveText.textContent = '', _wk(this, 'accept'), this.model.getValue() !== this.valueOnFocus && this.executeCommand('commit'), /onfocus|manual/.test(this.options.virtualKeyboardMode) && !_Gt().sharedVirtualKeyboard && this.executeCommand('hideVirtualKeyboard'), null === (ms = this.virtualKeyboard) || void 0 === ms || ms.disable(), null === (ns = this.host) || void 0 === ns || ns.dispatchEvent(new Event('blur', {
                bubbles: !1,
                composed: !0
            })), _Vk(this), this.focusBlurInProgress = !1);
        }
        onCompositionStart(ms) {
            this.model.deleteAtoms(mg(this.model.selection)), requestAnimationFrame(() => {
                _Wk(this);
                const ns = Di(this.field);
                ns && this.keyboardDelegate.moveTo(ns.x, ns.y);
            });
        }
        onCompositionUpdate(ms) {
            ! function(ns, os) {
                const ps = ns.at(ns.position);
                if ('composition' === ps.type)
                    ps.value = os;
                else {
                    const {
                        caret: qs
                    } = ps;
                    ps.caret = '';
                    const rs = new tf(os, ns.mathfield, {
                        mode: ps.mode
                    });
                    rs.caret = qs, ps.parent.addChildAfter(rs, ps), ns.position += 1;
                }
            }(this.model, ms), _Vk(this);
        }
        onCompositionEnd(ms) {
            ! function(ns) {
                const os = ns.at(ns.position);
                'composition' === os.type && (os.parent.removeChild(os), ns.position -= 1);
            }(this.model), sr(this, ms, {
                simulateKeystroke: !0
            });
        }
        onResize() {
            Kk(this);
        }
        onWheel(ms) {
            const ns = 5 * ms.deltaX;
            if (!Number.isFinite(ns) || 0 === ns)
                return;
            const os = this.field;
            ns < 0 && 0 === os.scrollLeft || ns > 0 && os.offsetWidth + os.scrollLeft >= os.scrollWidth || (os.scrollBy({
                top: 0,
                left: ns
            }), ms.preventDefault(), ms.stopPropagation());
        }
        getHTMLElement(ms) {
            let ns = ms;
            for (; !ns.id && ns.hasChildren;)
                ns = ms.children[0];
            if (ns.id)
                return this.element.querySelector(`[data-atom-id="${ ns.id }"]`);
            throw new TypeError('Could not get an ID from atom');
        }
        constructor(ms, ns) {
            var os, ps, qs;
            this.focusBlurInProgress = !1, this.stylesheets = [], this.audioBuffers = {}, this.options = Jl({
                ...Ul(),
                registers: Nf(this)
            }, ns.readOnly ? {
                ...ns,
                virtualKeyboardMode: 'off'
            } : {
                plonkSound: 'plonk.wav',
                keypressSound: {
                    spacebar: 'keypress-spacebar.wav',
                    return: 'keypress-return.wav',
                    delete: 'keypress-delete.wav',
                    default: 'keypress-standard.wav'
                },
                ...ns
            }), 'auto' === this.options.virtualKeyboardMode && (this.options.virtualKeyboardMode = g() ? 'onfocus' : 'off'), void 0 !== this.options.computeEngine && (this._computeEngine = ns.computeEngine), ns.eventSink && (this.host = ns.eventSink), this.placeholders = new Map(), this.element = ms, ms.mathfield = this;
            let rs = null !== (os = ns.value) && void 0 !== os ? os : this.element.textContent;
            rs && (rs = rs.trim()), null !== this.options.fontsDirectory && fm(this.options.fontsDirectory), js || (js = lj(Vj).toString(36)), this.stylesheets.push(mj(ms, Vj, js)), ks || (ks = lj(am).toString(36)), this.stylesheets.push(mj(ms, am, ks));
            let ss = '<span class=ML__textarea>';
            if (g() ? ss += '<span class=ML__textarea__textarea tabindex=-1 role=textbox></span>' : ss += `<textarea class=ML__textarea__textarea autocapitalize=off autocomplete=off autocorrect=off spellcheck=false inputmode=none aria-hidden="true" tabindex="${ null !== (ps = ms.tabIndex) && void 0 !== ps ? ps : 0 }"></textarea>`, ss += '</span>', ss += '<span part="container" class="ML__container"><span part="content" class="ML__content"></span>', ss += `<div part='virtual-keyboard-toggle' class="ML__virtual-keyboard-toggle" role="button" data-ML__tooltip="${ q('tooltip.toggle virtual keyboard') }">`, ss += null !== (qs = this.options.virtualKeyboardToggleGlyph) && void 0 !== qs ? qs : Tl, ss += '</div>', ss += '<div class=\'ML__placeholdercontainer\'></div>', ss += '</span>', ss += '<div class="ML__sr-only"><span aria-role="status" aria-live="assertive" aria-atomic="true"></span><span></span></div>', this.element.innerHTML = this.options.createHTML(ss), !this.element.children)
                return;
            let ts = 0;
            const us = this.element.children[ts++].firstElementChild;
            this.field = this.element.children[ts].children[0], ts++, this.virtualKeyboardToggle = this.element.querySelector('.ML__virtual-keyboard-toggle'), this.ariaLiveText = this.element.children[ts].children[0], this.accessibleNode = this.element.children[ts++].children[1], this.keystrokeCaptionVisible = !1, this.popoverVisible = !1, this.suggestionIndex = 0, this.inlineShortcutBuffer = [], this.inlineShortcutBufferFlushTimer = 0, this.mode = Yl(this.options), this.smartModeSuppressed = !1, this.style = {}, this.options.readOnly || 'manual' !== this.options.virtualKeyboardMode ? this.virtualKeyboardToggle.classList.remove('is-visible') : this.virtualKeyboardToggle.classList.add('is-visible'), this.options.readOnly ? this.element.classList.add('ML__isReadOnly') : this.element.classList.remove('ML__isReadOnly'), 'inline-math' === this.options.defaultMode ? this.element.classList.add('ML__isInline') : this.element.classList.remove('ML__isInline'), this.element.querySelector('.ML__content').addEventListener('click', vs => vs.stopImmediatePropagation(), {
                capture: !1
            }), this.field.addEventListener('wheel', this, {
                passive: !1
            }), hp(vs => this.executeCommand(vs), this.virtualKeyboardToggle, {
                default: 'toggleVirtualKeyboard',
                alt: 'toggleVirtualKeyboardAlt',
                shift: 'toggleVirtualKeyboardShift'
            }), this.blurred = !0, mi(this.element, 'focus', this), mi(this.element, 'blur', this), this.keyboardDelegate = function(vs, ws, xs) {
                let ys, zs = null,
                    As = null,
                    Bs = !1,
                    Cs = !1,
                    Ds = !1;

                function Es(Fs) {
                    clearTimeout(ys), ys = setTimeout(() => {
                        clearTimeout(ys), Fs();
                    });
                }

                function Fs() {
                    if (vs.selectionStart !== vs.selectionEnd)
                        return;
                    const Gs = vs.value;
                    vs.value = '', Gs.length > 0 && xs.typedText(Gs);
                }
                const Hs = vs;
                return Hs.addEventListener('keydown', Is => {
                    Bs || 'Process' === Is.key || 'CapsLock' === Is.code || /(Control|Meta|Alt|Shift)(Left|Right)/.test(Is.code) ? zs = null : (zs = Is, As = null, xs.keystroke($o(Is), Is) ? 'textarea' !== vs.tagName.toLowerCase() && (1 === Is.key.length && xs.typedText(Is.key), Is.preventDefault()) : (zs = null, vs.value = ''));
                }, !0), Hs.addEventListener('keypress', Is => {
                    Bs || (zs && As && xs.keystroke($o(zs), zs), As = Is, Es(Fs));
                }, !0), Hs.addEventListener('keyup', () => {
                    Bs || zs && !As && Fs();
                }, !0), Hs.addEventListener('paste', Is => {
                    vs.focus(), vs.value = '', xs.paste(Is) || Is.preventDefault(), Is.stopImmediatePropagation();
                }, !0), Hs.addEventListener('cut', Is => xs.cut(Is), !0), Hs.addEventListener('copy', Is => xs.copy(Is), !0), Hs.addEventListener('blur', Is => {
                    var Js, Ks, Ls;
                    if ((null === (Ks = null === (Js = Is.relatedTarget) || void 0 === Js ? void 0 : Js._mathfield) || void 0 === Ks ? void 0 : Ks.element) === Gs)
                        return vs.focus(), Is.preventDefault(), void Is.stopPropagation();
                    const Ms = null === (Ls = Vo.scrim) || void 0 === Ls ? void 0 : Ls.state;
                    return 'open' === Ms || 'opening' === Ms || Is.relatedTarget === Is.target.getRootNode().host ? (Is.preventDefault(), void Is.stopPropagation()) : void(Ds || Cs || (Ds = !0, zs = null, As = null, xs.blur && xs.blur(), Ds = !1, Is.stopPropagation()));
                }, !0), Hs.addEventListener('focus', Is => {
                    Ds || Cs || (Cs = !0, xs.focus && xs.focus(), bp() === vs && 'function' == typeof vs.select && vs.select(), Cs = !1, Is.stopPropagation());
                }, !0), Hs.addEventListener('compositionstart', Is => {
                    Bs = !0, vs.value = '', xs.compositionStart && xs.compositionStart(Is.data);
                }, !0), Hs.addEventListener('compositionupdate', Is => {
                    Bs && xs.compositionUpdate && xs.compositionUpdate(Is.data);
                }, !0), Hs.addEventListener('compositionend', Is => {
                    vs.value = '', Bs && (Bs = !1, xs.compositionEnd && xs.compositionEnd(Is.data));
                }, !0), Hs.addEventListener('beforeinput', Is => {
                    Is.stopImmediatePropagation();
                }), Hs.addEventListener('input', Is => {
                    if (!Bs && 'insertCompositionText' !== Is.inputType) {
                        if ('insertFromPaste' === Is.inputType)
                            return Is.preventDefault(), void Is.stopPropagation();
                        Es(Fs), Is.preventDefault(), Is.stopPropagation();
                    }
                }), {
                    cancelComposition: () => {
                        const Is = xs.blur,
                            Js = xs.focus;
                        xs.blur = null, xs.focus = null, vs.blur(), vs.focus(), xs.blur = Is, xs.focus = Js;
                    },
                    blur: () => {
                        'function' == typeof vs.blur && vs.blur();
                    },
                    focus: () => {
                        'function' == typeof vs.focus && vs.focus();
                    },
                    hasFocus: () => bp() === vs,
                    setValue: Is => {
                        Is ? (vs.value = Is, bp() === vs && 'function' == typeof vs.select && vs.select()) : (vs.value = '', vs.setAttribute('aria-label', ''));
                    },
                    setAriaLabel: Is => {
                        vs.setAttribute('aria-label', 'after: ' + Is);
                    },
                    moveTo: (Is, Js) => {
                        vs.style.top = `${ Js }px`, vs.style.left = `${ Is }px`;
                    }
                };
            }(us, this.element, {
                typedText: vs => sr(this, vs),
                cut: vs => {
                    this.options.readOnly ? this.model.announce('plonk') : Yj(this.model, {
                        inputType: 'deleteByCut'
                    }) && (this.snapshot(), Fg.onCopy(this, vs), setTimeout(() => {
                        Cn(this.model, mg(this.model.selection), 'deleteByCut'), _Vk(this);
                    }, 0));
                },
                copy: vs => Fg.onCopy(this, vs),
                paste: vs => {
                    let ws = !0;
                    return this.options.readOnly && (ws = !1), ws && (ws = Fg.onPaste(this.model.at(this.model.position).mode, this, vs)), ws || this.model.announce('plonk'), ws;
                },
                keystroke: (vs, ws) => br(this, vs, ws),
                focus: () => this.onFocus(),
                blur: () => this.onBlur(),
                compositionStart: vs => this.onCompositionStart(vs),
                compositionUpdate: vs => this.onCompositionUpdate(vs),
                compositionEnd: vs => this.onCompositionEnd(vs)
            }), e() && 'PointerEvent' in window ? mi(this.field, 'pointerdown', this) : mi(this.field, 'touchstart:active mousedown', this), mi(window, 'resize', this), window.addEventListener('blur', () => {
                Bi(this) && this.hasFocus() && window.addEventListener('focus', vs => {
                    vs.target === window && Bi(this) && this.focus();
                }, {
                    once: !0
                });
            }, {
                capture: !0
            }), this.model = new Tm({
                mode: Yl(this.options),
                macros: this.options.macros,
                removeExtraneousParentheses: this.options.removeExtraneousParentheses
            }, {
                onSelectionDidChange: vs => this._onSelectionDidChange()
            }, this), this.undoManager = new fp(this.model), rs && Fg.insert('math', this.model, rs, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                suppressChangeNotifications: !0
            }), this.undoManager.startRecording(), this.undoManager.snapshot(), this.model.setListeners({
                onSelectionDidChange: vs => this._onSelectionDidChange()
            }), _Vk(this), e() && document.fonts.ready.then(() => _Wk(this));
        }
    }
    var ms, ns, os, ps;
    const qs = e() ? document.createElement('template') : null;
    qs && (qs.innerHTML = '<style>\n:host { display: block; position: relative; overflow: hidden auto;}\n:host([hidden]) { display: none; }\n:host([disabled]) { opacity:  .5; }\n:host(:focus), :host(:focus-within) {\n  outline: Highlight auto 1px;    /* For Firefox */\n  outline: -webkit-focus-ring-color auto 1px;\n}\n:host([readonly]), :host([read-only]) { outline: none; }\n</style>\n<div></div><slot style="display:none"></slot>');
    const rs = new WeakMap();
    class _ss extends HTMLElement {
        static get optionsAttributes() {
            return {
                'default-mode': 'string',
                'fonts-directory': 'string',
                'sounds-directory': 'string',
                'horizontal-spacing-scale': 'string',
                'math-mode-space': 'string',
                'inline-shortcut-timeout': 'string',
                'keypress-vibration': 'on/off',
                'keypress-sound': 'string',
                'plonk-sound': 'string',
                'letter-shape-style': 'string',
                locale: 'string',
                'read-only': 'boolean',
                'remove-extraneous-parentheses': 'on/off',
                'smart-fence': 'on/off',
                'smart-mode': 'on/off',
                'smart-superscript': 'on/off',
                'speech-engine': 'string',
                'speech-engine-rate': 'string',
                'speech-engine-voice': 'string',
                'text-to-speech-markup': 'string',
                'text-to-speech-rules': 'string',
                'virtual-keyboard-layout': 'string',
                'virtual-keyboard-mode': 'string',
                'virtual-keyboard-theme': 'string',
                'virtual-keyboards': 'string',
                'use-shared-virtual-keyboard': 'boolean',
                'shared-virtual-keyboard-target-origin': 'string'
            };
        }
        static get observedAttributes() {
            return [
                ...Object.keys(_ss.optionsAttributes),
                'disabled',
                'readonly',
                'read-only'
            ];
        }
        onPointerDown() {
            window.addEventListener('pointerup', ts => {
                ts.target === this && this.dispatchEvent(new MouseEvent('click', {
                    altKey: ts.altKey,
                    button: ts.button,
                    buttons: ts.buttons,
                    clientX: ts.clientX,
                    clientY: ts.clientY,
                    ctrlKey: ts.ctrlKey,
                    metaKey: ts.metaKey,
                    movementX: ts.movementX,
                    movementY: ts.movementY,
                    relatedTarget: ts.relatedTarget,
                    screenX: ts.screenX,
                    screenY: ts.screenY,
                    shiftKey: ts.shiftKey
                }));
            }, {
                once: !0
            });
        }
        getPlaceholderField(ts) {
            var us;
            return null === (us = this._mathfield) || void 0 === us ? void 0 : us.getPlaceholderField(ts);
        }
        addEventListener(ts, us, vs) {
            return super.addEventListener(ts, us, vs);
        }
        removeEventListener(ts, us, vs) {
            super.removeEventListener(ts, us, vs);
        }
        get mode() {
            var ts, us;
            return null !== (us = null === (ts = this._mathfield) || void 0 === ts ? void 0 : ts.mode) && void 0 !== us ? us : 'math';
        }
        set mode(ts) {
            this._mathfield && (this._mathfield.mode = ts);
        }
        get computeEngine() {
            if (this._mathfield)
                return this._mathfield.computeEngine;
        }
        set computeEngine(ts) {
            this._mathfield && this._mathfield.setOptions({
                computeEngine: ts
            });
        }
        get expression() {
            if (this._mathfield)
                return this._mathfield.expression;
        }
        set expression(ts) {
            var us, vs;
            if (!this._mathfield)
                return;
            const ws = null !== (vs = null === (us = this.computeEngine) || void 0 === us ? void 0 : us.box(ts).latex) && void 0 !== vs ? vs : null;
            null !== ws && this._mathfield.setValue(ws);
        }
        get errors() {
            var ts, us;
            return null !== (us = null === (ts = this._mathfield) || void 0 === ts ? void 0 : ts.errors) && void 0 !== us ? us : [];
        }
        get placeholders() {
            if (!this._mathfield)
                return {};
            const ts = {};
            for (const [us, vs] of this._mathfield.placeholders)
                ts[us] = vs.field;
            return ts;
        }
        getOptions(ts) {
            return this._mathfield ? _Ql(this._mathfield.options, ts) : rs.has(this) ? _Ql(Jl(Ul(), rs.get(this).options), ts) : null;
        }
        getOption(ts) {
            return this.getOptions([ts])[ts];
        }
        setOptions(ts) {
            if (this._mathfield)
                this._mathfield.setOptions(ts), this._mathfield.placeholders.forEach(us => {
                    us.field.setOptions({
                        ...ts,
                        readOnly: !1
                    });
                });
            else if (rs.has(this)) {
                const us = {
                    ...rs.get(this).options,
                    ...ts
                };
                rs.set(this, {
                    ...rs.get(this),
                    selection: {
                        ranges: us.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ]
                    },
                    options: us
                });
            } else
                rs.set(this, {
                    value: void 0,
                    selection: {
                        ranges: [
                            [
                                0,
                                0
                            ]
                        ]
                    },
                    options: ts
                });
            ! function(vs) {
                const ws = Ul(),
                    xs = vs.getOptions();
                Object.keys(_ss.optionsAttributes).forEach(ys => {
                    const zs = _ts(ys);
                    'on/off' === _ss.optionsAttributes[ys] ? ws[zs] !== xs[zs] ? vs.setAttribute(ys, xs[zs] ? 'on' : 'off') : vs.removeAttribute(ys) : ws[zs] !== xs[zs] && ('boolean' === _ss.optionsAttributes[ys] ? xs[zs] ? vs.setAttribute(ys, '') : vs.removeAttribute(ys) : 'string' != typeof xs[zs] && 'number' != typeof xs[zs] || vs.setAttribute(ys, xs[zs].toString()));
                });
            }(this);
        }
        executeCommand(ts) {
            var us, vs;
            return null !== (vs = null === (us = this._mathfield) || void 0 === us ? void 0 : us.executeCommand(ts)) && void 0 !== vs && vs;
        }
        getValue(ts, us, vs) {
            var ws, xs;
            if (this._mathfield)
                return this._mathfield.model.getValue(ts, us, vs);
            if (rs.has(this)) {
                let ys, zs, As;
                if (nm(ts) ? ([Bs, Cs] = ts.ranges[0], As = us) : mm(ts) ? ([Ds, Es] = ts, As = us) : lm(ts) && lm(us) ? (Ds = ts, Es = us, As = vs) : (Ds = 0, Es = -1, As = ts), (void 0 === As || 'latex' === As) && 0 === Ds && -1 === Es)
                    return null !== (xs = null !== (ws = rs.get(this).value) && void 0 !== ws ? ws : this.textContent) && void 0 !== xs ? xs : '';
            }
            return '';
        }
        setValue(ts, us) {
            if (this._mathfield && void 0 !== ts)
                return us || (us = {
                    suppressChangeNotifications: !0
                }), void this._mathfield.setValue(ts, us);
            if (rs.has(this)) {
                const vs = rs.get(this).options;
                return void rs.set(this, {
                    value: ts,
                    selection: {
                        ranges: vs.readOnly ? [
                            [
                                0,
                                0
                            ]
                        ] : [
                            [
                                0,
                                -1
                            ]
                        ],
                        direction: 'forward'
                    },
                    options: vs
                });
            }
            const ws = _us(this);
            rs.set(this, {
                value: ts,
                selection: {
                    ranges: ws.readOnly ? [
                        [
                            0,
                            0
                        ]
                    ] : [
                        [
                            0,
                            -1
                        ]
                    ],
                    direction: 'forward'
                },
                options: ws
            });
        }
        hasFocus() {
            var ts, us;
            return null !== (us = null === (ts = this._mathfield) || void 0 === ts ? void 0 : ts.hasFocus()) && void 0 !== us && us;
        }
        get virtualKeyboardState() {
            var ts, us;
            return null !== (us = null === (ts = this._mathfield) || void 0 === ts ? void 0 : ts.virtualKeyboardState) && void 0 !== us ? us : 'hidden';
        }
        set virtualKeyboardState(ts) {
            this._mathfield && (this._mathfield.virtualKeyboardState = ts);
        }
        focus() {
            super.focus();
        }
        blur() {
            var ts;
            null === (ts = this._mathfield) || void 0 === ts || ts.blur(), super.blur();
        }
        select() {
            var ts;
            null === (ts = this._mathfield) || void 0 === ts || ts.select();
        }
        insert(ts, us) {
            var vs, ws;
            return null !== (ws = null === (vs = this._mathfield) || void 0 === vs ? void 0 : vs.insert(ts, us)) && void 0 !== ws && ws;
        }
        applyStyle(ts, us) {
            var vs;
            return null === (vs = this._mathfield) || void 0 === vs ? void 0 : vs.applyStyle(ts, us);
        }
        get caretPoint() {
            var ts, us;
            return null !== (us = null === (ts = this._mathfield) || void 0 === ts ? void 0 : ts.getCaretPoint()) && void 0 !== us ? us : null;
        }
        set caretPoint(ts) {
            var us;
            ts && (null === (us = this._mathfield) || void 0 === us || us.setCaretPoint(ts.x, ts.y));
        }
        setCaretPoint(ts, us) {
            var vs, ws;
            return null !== (ws = null === (vs = this._mathfield) || void 0 === vs ? void 0 : vs.setCaretPoint(ts, us)) && void 0 !== ws && ws;
        }
        offsetFromPoint(ts, us, vs) {
            return this._mathfield ? $r(this._mathfield, ts, us, vs) : -1;
        }
        hitboxFromOffset(ts) {
            if (!this._mathfield)
                return null;
            const us = this._mathfield.model.at(ts);
            if (!us)
                return null;
            const vs = Ui(this._mathfield, us);
            return vs ? new DOMRect(vs.left, vs.top, vs.right - vs.left, vs.bottom - vs.top) : null;
        }
        resetUndo() {
            var ts;
            null === (ts = this._mathfield) || void 0 === ts || ts.resetUndo();
        }
        canUndo() {
            return !!this._mathfield && this._mathfield.canUndo();
        }
        canRedo() {
            return !!this._mathfield && this._mathfield.canRedo();
        }
        connectedCallback() {
            var ts, us, vs;
            this.hasAttribute('role') || this.setAttribute('role', 'textbox'), this.setAttribute('dir', 'ltr'), this.hasAttribute('aria-label') || this.setAttribute('aria-label', 'math input field'), this.setAttribute('contenteditable', 'true'), this.setAttribute('aria-multiline', 'false'), this.hasAttribute('tabindex') || this.setAttribute('tabindex', '0');
            const ws = this.shadowRoot.querySelector('slot:not([name])');
            try {
                this._style = ws.assignedElements().filter(xs => 'style' === xs.tagName.toLowerCase()).map(xs => xs.textContent).join('');
            } catch (ts) {}
            if (this._style) {
                const xs = document.createElement('style');
                xs.textContent = this._style, this.shadowRoot.appendChild(xs);
            }
            try {
                const ys = ws.assignedElements().filter(zs => 'script' === zs.tagName.toLowerCase() && 'application/json' === zs.type).map(zs => zs.textContent).join('');
                ys && this.setOptions(JSON.parse(ys));
            } catch (ys) {}
            let zs = '';
            if (zs = this.hasAttribute('value') ? null !== (ys = this.getAttribute('value')) && void 0 !== ys ? ys : '' : null !== (us = null == ws ? void 0 : ws.assignedNodes().map(As => 3 === As.nodeType ? As.textContent : '').join('').trim()) && void 0 !== us ? us : '', this._mathfield = new ls(this.shadowRoot.querySelector(':host > div'), {
                    ...rs.has(this) ? rs.get(this).options : _us(this),
                    eventSink: this,
                    value: zs
                }), !rs.has(this)) {
                this.upgradeProperty('disabled'), this.upgradeProperty('readonly');
                for (const As of Object.keys(_ss.optionsAttributes))
                    this.upgradeProperty(_ts(As));
            }
            (null === (vs = this._mathfield) || void 0 === vs ? void 0 : vs.model) ? (rs.has(this) && this._mathfield.model.deferNotifications({
                content: !1,
                selection: !1
            }, () => {
                const Bs = rs.get(this).value;
                void 0 !== Bs && this._mathfield.setValue(Bs), this._mathfield.model.selection = rs.get(this).selection, rs.delete(this);
            }), ws.addEventListener('slotchange', Bs => {
                if (Bs.target !== ws)
                    return;
                const Cs = ws.assignedNodes().map(Ds => 3 === Ds.nodeType ? Ds.textContent : '').join('').trim();
                Cs !== this._slotValue && (this._mathfield ? this._mathfield.setValue(Cs) : this.value = Cs);
            }), this.dispatchEvent(new Event('mount', {
                cancelable: !1,
                bubbles: !0,
                composed: !0
            }))) : this._mathfield = null;
        }
        disconnectedCallback() {
            if (this.dispatchEvent(new Event('unmount', {
                    cancelable: !1,
                    bubbles: !0,
                    composed: !0
                })), !this._mathfield)
                return;
            const ts = _Ql(this._mathfield.options, Object.keys(_ss.optionsAttributes).map(us => _ts(us)));
            rs.set(this, {
                value: this._mathfield.getValue(),
                selection: this._mathfield.model.selection,
                options: ts
            }), this._mathfield.dispose(), this._mathfield = null;
        }
        upgradeProperty(ts) {
            if (this.hasOwnProperty(ts)) {
                const us = this[ts];
                delete this[ts], 'readonly' !== ts && 'read-only' !== ts || (ts = 'readOnly'), this[ts] = us;
            }
        }
        attributeChangedCallback(ts, us, vs) {
            if (us === vs)
                return;
            const ws = null !== vs;
            switch (ts) {
                case 'disabled':
                    this.disabled = ws;
                    break;
                case 'read-only':
                case 'readonly':
                    this.readOnly = ws;
            }
        }
        get readonly() {
            return this.hasAttribute('readonly') || this.hasAttribute('read-only');
        }
        set readonly(ts) {
            const us = Boolean(ts);
            us ? (this.setAttribute('readonly', ''), this.setAttribute('disabled', ''), this.setAttribute('aria-readonly', 'true')) : (this.removeAttribute('readonly'), this.removeAttribute('read-only'), this.removeAttribute('disabled'), this.removeAttribute('aria-readonly')), this.setOptions({
                readOnly: us
            });
        }
        get disabled() {
            return this.hasAttribute('disabled');
        }
        set disabled(ts) {
            const us = Boolean(ts);
            us ? this.setAttribute('disabled', '') : this.removeAttribute('disabled'), this.setAttribute('aria-disabled', us ? 'true' : 'false'), this.setOptions({
                readOnly: us
            });
        }
        get value() {
            return this.getValue();
        }
        set value(ts) {
            this.setValue(ts);
        }
        get defaultMode() {
            return this.getOption('defaultMode');
        }
        set defaultMode(ts) {
            this.setOptions({
                defaultMode: ts
            });
        }
        get fontsDirectory() {
            return this.getOption('fontsDirectory');
        }
        set fontsDirectory(ts) {
            this.setOptions({
                fontsDirectory: ts
            });
        }
        get mathModeSpace() {
            return this.getOption('mathModeSpace');
        }
        set mathModeSpace(ts) {
            this.setOptions({
                mathModeSpace: ts
            });
        }
        get inlineShortcutTimeout() {
            return this.getOption('inlineShortcutTimeout');
        }
        set inlineShortcutTimeout(ts) {
            this.setOptions({
                inlineShortcutTimeout: ts
            });
        }
        get keypressVibration() {
            return this.getOption('keypressVibration');
        }
        set keypressVibration(ts) {
            this.setOptions({
                keypressVibration: ts
            });
        }
        get keypressSound() {
            return this.getOption('keypressSound');
        }
        set keypressSound(ts) {
            this.setOptions({
                keypressSound: ts
            });
        }
        get plonkSound() {
            var ts;
            return null !== (ts = this.getOption('plonkSound')) && void 0 !== ts ? ts : null;
        }
        set plonkSound(ts) {
            this.setOptions({
                plonkSound: ts
            });
        }
        get letterShapeStyle() {
            return this.getOption('letterShapeStyle');
        }
        set letterShapeStyle(ts) {
            this.setOptions({
                letterShapeStyle: ts
            });
        }
        get locale() {
            return this.getOption('locale');
        }
        set locale(ts) {
            this.setOptions({
                locale: ts
            });
        }
        get readOnly() {
            return this.getOption('readOnly');
        }
        set readOnly(ts) {
            this.setOptions({
                readOnly: ts
            });
        }
        get removeExtraneousParentheses() {
            return this.getOption('removeExtraneousParentheses');
        }
        set removeExtraneousParentheses(ts) {
            this.setOptions({
                removeExtraneousParentheses: ts
            });
        }
        get smartFence() {
            return this.getOption('smartFence');
        }
        set smartFence(ts) {
            this.setOptions({
                smartFence: ts
            });
        }
        get smartMode() {
            return this.getOption('smartMode');
        }
        set smartMode(ts) {
            this.setOptions({
                smartMode: ts
            });
        }
        get smartSuperscript() {
            return this.getOption('smartSuperscript');
        }
        set smartSuperscript(ts) {
            this.setOptions({
                smartSuperscript: ts
            });
        }
        get speechEngine() {
            return this.getOption('speechEngine');
        }
        set speechEngine(ts) {
            this.setOptions({
                speechEngine: ts
            });
        }
        get speechEngineRate() {
            return this.getOption('speechEngineRate');
        }
        set speechEngineRate(ts) {
            this.setOptions({
                speechEngineRate: ts
            });
        }
        get speechEngineVoice() {
            return this.getOption('speechEngineVoice');
        }
        set speechEngineVoice(ts) {
            this.setOptions({
                speechEngineVoice: ts
            });
        }
        get textToSpeechMarkup() {
            return this.getOption('textToSpeechMarkup');
        }
        set textToSpeechMarkup(ts) {
            this.setOptions({
                textToSpeechMarkup: ts
            });
        }
        get textToSpeechRules() {
            return this.getOption('textToSpeechRules');
        }
        set textToSpeechRule(ts) {
            this.setOptions({
                textToSpeechRules: ts
            });
        }
        get virtualKeyboardLayout() {
            return this.getOption('virtualKeyboardLayout');
        }
        set virtualKeyboardLayout(ts) {
            this.setOptions({
                virtualKeyboardLayout: ts
            });
        }
        get virtualKeyboardMode() {
            return this.getOption('virtualKeyboardMode');
        }
        set virtualKeyboardMode(ts) {
            this.setOptions({
                virtualKeyboardMode: ts
            });
        }
        get virtualKeyboardTheme() {
            return this.getOption('virtualKeyboardTheme');
        }
        set virtualKeyboardTheme(ts) {
            this.setOptions({
                virtualKeyboardTheme: ts
            });
        }
        get virtualKeyboards() {
            return this.getOption('virtualKeyboards');
        }
        set virtualKeyboards(ts) {
            this.setOptions({
                virtualKeyboards: ts
            });
        }
        get useSharedVirtualKeyboard() {
            return this.getOption('useSharedVirtualKeyboard');
        }
        set useSharedVirtualKeyboard(ts) {
            this.setOptions({
                useSharedVirtualKeyboard: ts
            });
        }
        get sharedVirtualKeyboardTargetOrigin() {
            return this.getOption('sharedVirtualKeyboardTargetOrigin');
        }
        set sharedVirtualKeyboardTargetOrigin(ts) {
            this.setOptions({
                sharedVirtualKeyboardTargetOrigin: ts
            });
        }
        get selection() {
            return this._mathfield ? this._mathfield.model.selection : rs.has(this) ? rs.get(this).selection : {
                ranges: [
                    [
                        0,
                        0
                    ]
                ],
                direction: 'forward'
            };
        }
        set selection(ts) {
            'number' == typeof ts && (ts = {
                ranges: [
                    [
                        ts,
                        ts
                    ]
                ]
            }), this._mathfield ? this._mathfield.model.selection = ts : rs.has(this) ? rs.set(this, {
                ...rs.get(this),
                selection: ts
            }) : rs.set(this, {
                value: void 0,
                selection: ts,
                options: _us(this)
            });
        }
        get selectionIsCollapsed() {
            const ts = this.selection;
            return 1 === ts.ranges.length && ts.ranges[0][0] === ts.ranges[0][1];
        }
        get position() {
            return this._mathfield ? this._mathfield.model.position : rs.has(this) ? rs.get(this).selection.ranges[0][0] : 0;
        }
        set position(ts) {
            this._mathfield && (this._mathfield.model.position = ts), rs.has(this) ? rs.set(this, {
                ...rs.get(this),
                selection: {
                    ranges: [
                        [
                            ts,
                            ts
                        ]
                    ]
                }
            }) : rs.set(this, {
                value: void 0,
                selection: {
                    ranges: [
                        [
                            ts,
                            ts
                        ]
                    ]
                },
                options: _us(this)
            });
        }
        getOffsetDepth(ts) {
            var us, vs;
            return this._mathfield && (vs = (null === (us = this._mathfield.model.at(ts)) || void 0 === us ? void 0 : us.treeDepth) - 2, 1) && void 0 !== vs ? vs : 0;
        }
        get lastOffset() {
            var ts, us;
            return null !== (us = null === (ts = this._mathfield) || void 0 === ts ? void 0 : ts.model.lastOffset) && void 0 !== us ? us : -1;
        }
        constructor(ts) {
            f(), super(), this.attachShadow({
                mode: 'open'
            }), this.shadowRoot.append(qs.content.cloneNode(!0));
            const us = this.shadowRoot.querySelector('slot:not([name])');
            this._slotValue = us.assignedNodes().map(vs => 3 === vs.nodeType ? vs.textContent : '').join('').trim(), ts && this.setOptions(ts), this.shadowRoot.host.addEventListener('pointerdown', vs => this.onPointerDown(), !0), this.shadowRoot.host.addEventListener('focus', () => {
                var vs;
                return null === (vs = this._mathfield) || void 0 === vs ? void 0 : vs.focus();
            }, !0), this.shadowRoot.host.addEventListener('blur', () => {
                var vs;
                return null === (vs = this._mathfield) || void 0 === vs ? void 0 : vs.blur();
            }, !0);
        }
    }

    function _ts(us) {
        return us.toLowerCase().replace(/[^a-zA-Z\d]+(.)/g, (vs, ws) => ws.toUpperCase());
    }

    function _us(vs) {
        const ws = {},
            xs = _ss.optionsAttributes;
        return Object.keys(xs).forEach(ys => {
            if (vs.hasAttribute(ys)) {
                const zs = vs.getAttribute(ys);
                'boolean' === xs[ys] ? ws[_ts(ys)] = !0 : 'on/off' === xs[ys] ? ws[_ts(ys)] = 'on' === zs || 'off' !== zs && void 0 : 'number' === xs[ys] ? ws[_ts(ys)] = Number.parseFloat(null != zs ? zs : '0') : ws[_ts(ys)] = zs;
            } else
                'boolean' === xs[ys] && (ws[_ts(ys)] = !1);
        }), ws;
    }

    function xs(ys, zs, As) {
        let Bs = As,
            Cs = 0;
        const Ds = ys.length;
        for (; Bs < zs.length;) {
            const Es = zs[Bs];
            if (Cs <= 0 && zs.slice(Bs, Bs + f) === ys)
                return Bs;
            '\\' === As ? Bs++ : '{' === As ? Cs++ : '}' === As && Cs--, Bs++;
        }
        return -1;
    }

    function As(Bs, Cs, Ds, Es, Fs = 'latex') {
        const Gs = [];
        for (const Hs of Bs)
            if ('text' === g.type) {
                const Is = g.data;
                let Js, Ks = !0,
                    Ls = 0;
                Js = Bs.indexOf(Cs), -1 !== Js && (Ls = Js, Ls > 0 && f.push({
                    type: 'text',
                    data: Bs.slice(0, Ls)
                }), Ks = !1);
                let Ms = !1;
                for (; !Ms;) {
                    if (Ks) {
                        if (Js = Bs.indexOf(Cs, Ls), -1 === Js) {
                            Ms = !0;
                            break;
                        }
                        Ls !== Js && f.push({
                            type: 'text',
                            data: Bs.slice(Ls, Js)
                        }), Ls = Js;
                    } else {
                        if (Js = xs(Ds, Bs, Ls + Cs.length), -1 === Js) {
                            Ms = !0;
                            break;
                        }
                        let Ns = Bs.slice(Ls + Cs.length, Js);
                        'ascii-math' === Fs && ([, Os] = qg(Os, {
                            format: 'ascii-math'
                        })), f.push({
                            type: 'math',
                            data: Os,
                            rawData: Bs.slice(Ls, Js + Ds.length),
                            mathstyle: Es
                        }), Ls = Js + Ds.length;
                    }
                    Ks = !Ks;
                }
                Ls < Bs.length && f.push({
                    type: 'text',
                    data: Bs.slice(Ls)
                });
            } else
                f.push(g);
        return f;
    }

    function Es(Fs, Gs, Hs) {
        let Is = [{
            type: 'text',
            data: Fs
        }];
        return (null == Gs ? void 0 : Gs.inline) && Gs.inline.forEach(([Js, Ks]) => {
            Is = As(Is, Js, Ks, 'textstyle');
        }), (null == Gs ? void 0 : Gs.display) && Gs.display.forEach(([Js, Ks]) => {
            Is = As(Is, Js, Ks, 'displaystyle');
        }), (null == Hs ? void 0 : Hs.inline) && Hs.inline.forEach(([Js, Ks]) => {
            Is = As(Is, Js, Ks, 'textstyle', 'ascii-math');
        }), (null == Hs ? void 0 : Hs.display) && Hs.display.forEach(([Js, Ks]) => {
            Is = As(Is, Js, Ks, 'displaystyle', 'ascii-math');
        }), Is;
    }

    function Fs(Gs, Hs, Is, Js) {
        var Ks;
        const Ls = function(Ms, Ns, Os, Ps) {
                f();
                try {
                    const Qs = Ns.renderToMarkup(Ms, {
                            mathstyle: Os,
                            format: 'html'
                        }),
                        Rs = document.createElement('displaystyle' === Os ? 'div' : 'span');
                    return Rs.setAttribute('aria-hidden', 'true'), Rs.innerHTML = Ns.createHTML ? Ns.createHTML(Qs) : Qs, Rs;
                } catch (Ns) {
                    if (Qs)
                        return document.createTextNode(Ms);
                }
                return null;
            }(Gs, Is, Hs || 'displaystyle', Js),
            Ms = null !== (e = Is.renderAccessibleContent) && void 0 !== e ? e : '';
        if (g && /\b(mathml|speakable-text)\b/i.test(h)) {
            f();
            const Ns = document.createElement('span');
            if (/\bmathml\b/i.test(h) && Is.renderToMathML && Hs.append(function(Os, Ps) {
                    f();
                    const Qs = document.createElement('span');
                    try {
                        const Rs = '<math xmlns=\'http://www.w3.org/1998/Math/MathML\'>' + Ps.renderToMathML(Os) + '</math>';
                        Qs.innerHTML = Ps.createHTML ? Ps.createHTML(Rs) : Rs;
                    } catch (Ps) {
                        Qs.textContent = Os;
                    }
                    return Qs.className = 'ML__sr-only', Qs;
                }(Gs, Is)), /\bspeakable-text\b/i.test(h) && Is.renderToSpeakableText) {
                const Os = document.createElement('span'),
                    Ps = Is.renderToSpeakableText(Gs, Is);
                Js.innerHTML = Is.createHTML ? Is.createHTML(e) : e, Js.className = 'ML__sr-only', Hs.append(Js);
            }
            return Hs.append(g), Hs;
        }
        return g;
    }

    function Ms(Ns, Os) {
        var Ps, Qs, Rs;
        f();
        let Ss = null;
        if ((null === (Ps = Os.TeX) || void 0 === Ps ? void 0 : Ps.processEnvironments) && /^\s*\\begin/.test(Ns)) {
            Ss = document.createDocumentFragment();
            const Ts = Fs(Ns, '', Os, !0);
            Ts && Ss.appendChild(Ts);
        } else {
            if (!Ns.trim())
                return null;
            const Us = Es(Ns, null === (d = Os.TeX) || void 0 === d ? void 0 : d.delimiters, null === (e = Os.asciiMath) || void 0 === e ? void 0 : e.delimiters);
            if (1 === Us.length && 'text' === Us[0].type)
                return null;
            Ss = document.createDocumentFragment();
            for (const Vs of Us)
                if ('text' === Ns.type)
                    Ss.appendChild(document.createTextNode(Ns.data));
                else {
                    const Ws = Fs(Ns.data, 'textstyle' === Ns.mathstyle ? 'textstyle' : 'displaystyle', Os, !0);
                    Ws && Ss.appendChild(Ws);
                }
        }
        return Ss;
    }

    function Us(Vs, Ws) {
        var Xs, Ys, Zs, $s, at, bt, ct, dt, et, ft, gt, ht, it, jt, kt, lt;
        if (1 === Vs.childNodes.length && 3 === Vs.childNodes[0].nodeType) {
            const mt = null !== (Xs = Vs.childNodes[0].textContent) && void 0 !== Xs ? Xs : '';
            if ((null === (d = Ws.TeX) || void 0 === d ? void 0 : d.processEnvironments) && /^\s*\\begin/.test(g)) {
                Vs.textContent = '';
                const nt = Fs(g, '', Ws, !0);
                return void(nt && Vs.append(nt));
            }
            const ot = Es(g, null === (e = Ws.TeX) || void 0 === e ? void 0 : e.delimiters, null === (f = Ws.asciiMath) || void 0 === f ? void 0 : f.delimiters);
            if (1 === h.length && 'math' === h[0].type) {
                Vs.textContent = '';
                const pt = Fs(h[0].data, 'textstyle' === h[0].mathstyle ? 'textstyle' : 'displaystyle', Ws, !0);
                return void(pt && Vs.append(pt));
            }
            if (1 === h.length && 'text' === h[0].type)
                return;
        }
        for (let qt = Vs.childNodes.length - 1; qt >= 0; qt--) {
            const rt = Vs.childNodes[qt];
            if (3 === d.nodeType) {
                const st = Ms(null !== (g = d.textContent) && void 0 !== g ? g : '', Ws);
                Vs && (qt += Vs.childNodes.length - 1, d.replaceWith(Vs));
            } else if (1 === d.nodeType) {
                const tt = d,
                    ut = d.nodeName.toLowerCase();
                if ('script' === e) {
                    const vt = d;
                    let wt;
                    if (null === (h = Ws.processScriptTypePattern) || void 0 === h ? void 0 : h.test(qt.type))
                        wt = null !== (i = qt.textContent) && void 0 !== i ? i : '';
                    else if (null === (m = Ws.processMathJSONScriptTypePattern) || void 0 === m ? void 0 : m.test(qt.type))
                        try {
                            wt = null === (et = Ws.serializeToLatex) || void 0 === et ? void 0 : et.call(Ws, JSON.parse(null !== (q = qt.textContent) && void 0 !== q ? q : ''));
                        } catch (Vs) {}
                    if (wt) {
                        let xt = 'displaystyle';
                        for (const yt of qt.type.split(';')) {
                            const [zt, At] = Ws.toLowerCase().split('=');
                            'mode' === zt.trim() && (xt = 'display' === At.trim() ? 'displaystyle' : 'textstyle');
                        }
                        const zt = Fs(wt, xt, Ws, !0);
                        d && qt.parentNode.replaceChild(d, qt);
                    }
                } else if (null !== (ht = null === (gt = Ws.processClassPattern) || void 0 === gt ? void 0 : gt.test(qt.className)) && void 0 !== ht && ht || !(null !== (jt = null === (it = Ws.skipTags) || void 0 === it ? void 0 : it.includes(e)) && void 0 !== jt && jt || null !== (lt = null === (kt = Ws.ignoreClassPattern) || void 0 === kt ? void 0 : kt.test(qt.className)) && void 0 !== lt && lt))
                    if (1 === Vs.childNodes.length && 3 === Vs.childNodes[0].nodeType) {
                        const yt = Vs.textContent;
                        Vs.textContent = '';
                        const zt = Fs(null != qt ? qt : '', 'displaystyle', Ws, !0);
                        d && Vs.append(d);
                    } else
                        Us(qt, Ws);
            }
        }
    }
    e() && !(null === (ms = window.customElements) || void 0 === ms ? void 0 : ms.get('math-field')) && (null !== (ns = globalThis[ps = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== ns || (globalThis[ps] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')].version = '0.86.0', window.MathfieldElement = _ss, null === (os = window.customElements) || void 0 === os || os.define('math-field', _ss));
    const xt = {
        skipTags: [
            'math-field',
            'noscript',
            'style',
            'textarea',
            'pre',
            'code',
            'annotation',
            'annotation-xml'
        ],
        processScriptType: 'math/tex',
        processMathJSONScriptType: 'math/json',
        ignoreClass: 'tex2jax_ignore',
        processClass: 'tex2jax_process',
        renderAccessibleContent: 'mathml',
        asciiMath: {
            delimiters: {
                display: [
                    [
                        '`',
                        '`'
                    ]
                ]
            }
        },
        TeX: {
            processEnvironments: !0,
            delimiters: {
                inline: [
                    [
                        '\\(',
                        '\\)'
                    ]
                ],
                display: [
                    [
                        '$$',
                        '$$'
                    ],
                    [
                        '\\[',
                        '\\]'
                    ]
                ]
            }
        }
    };

    function yt(zt, At) {
        var Bt, Ct, Dt, Et;
        try {
            const Ft = {
                ...xt,
                ...At
            };
            g.ignoreClassPattern = new RegExp(null !== (Bt = g.ignoreClass) && void 0 !== Bt ? Bt : ''), g.processClassPattern = new RegExp(null !== (d = g.processClass) && void 0 !== d ? d : ''), g.processScriptTypePattern = new RegExp(null !== (e = g.processScriptType) && void 0 !== e ? e : ''), g.processMathJSONScriptTypePattern = new RegExp(null !== (f = g.processMathJSONScriptType) && void 0 !== f ? f : ''), null !== g.fontsDirectory && fm(g.fontsDirectory), mj(null, Vj, lj(Vj).toString(36)), Us(zt, g);
        } catch (zt) {
            Error;
        }
    }

    function Et(Ft, Gt, Ht = 3000, It = '$0') {
        for (const Jt of Gt)
            Eh[e] && (Eh[e].frequency = Ht, Eh[e].category = Ft, Eh[e].template = It.replace(/\$0/g, e)), Gh[e] && (Gh[e] = {
                ...Gh[e],
                frequency: Ht,
                category: Ft,
                template: It.replace(/\$0/g, e)
            });
    }

    function _Gt() {
        var Ht, It;
        return null !== (Ht = globalThis[It = Symbol.for('io.cortexjs.mathlive')]) && void 0 !== Ht || (globalThis[It] = {}), globalThis[Symbol.for('io.cortexjs.mathlive')];
    }

    function Jt(Kt, Lt) {
        var Mt;
        (Lt = null != Lt ? Lt : {}).mathstyle = null !== (Mt = Lt.mathstyle) && void 0 !== Mt ? Mt : 'displaystyle';
        const Nt = Sf(),
            Ot = new Kd('root', d);
        e.body = _Ve(Kt, d, {
            parseMode: 'math',
            mathstyle: Lt.mathstyle
        });
        const Pt = e.render(new vc({
            registers: d.registers,
            renderPlaceholder: () => new Ic(160, {
                maxFontSize: 1
            })
        }, {
            fontSize: 5,
            letterShapeStyle: d.letterShapeStyle
        }, Lt.mathstyle));
        return f ? (Qc(f), Lc(f), _Rc(f, {
            classes: 'ML__mathlive'
        }).toMarkup()) : '';
    }

    function Ot(Pt, Qt = {}) {
        return _ah(_Ve(Pt, Sf(), {
            parseMode: 'math',
            args: () => '',
            mathstyle: 'displaystyle'
        }), Qt);
    }

    function Pt(Qt, Rt = {}) {
        return ii(_Ve(Qt, Sf(), {
            parseMode: 'math',
            mathstyle: 'displaystyle'
        }), Rt);
    }
    let Qt;

    function Rt(St) {
        var Tt, Ut;
        if (!Qt) {
            const Vt = null === (Tt = globalThis[Symbol.for('io.cortexjs.compute-engine')]) || void 0 === Tt ? void 0 : Tt.ComputeEngine;
            St && (Qt = new St());
        }
        return null !== (Ut = null == Qt ? void 0 : Qt.box(St).latex) && void 0 !== Ut ? Ut : '';
    }

    function _Vt(Wt, Xt) {
        var Yt, Zt, $t, au;
        const bu = function(cu) {
            if ('string' == typeof cu && e()) {
                const du = document.getElementById(cu);
                if (null === du)
                    throw new Error(`The element with ID "${ cu }" could not be found.`);
                return du;
            }
            return 'string' == typeof cu ? null : cu;
        }(Wt);
        if (!h)
            return;
        const cu = null != Xt ? Xt : {};
        null !== (Yt = i.renderToMarkup) && void 0 !== Yt || (i.renderToMarkup = Jt), null !== (d = i.renderToMathML) && void 0 !== d || (i.renderToMathML = Ot), null !== (f = i.renderToSpeakableText) && void 0 !== f || (i.renderToSpeakableText = Pt), null !== (g = i.serializeToLatex) && void 0 !== g || (i.serializeToLatex = Rt), yt(h, i);
    }
    Et('Trigonometry', [
        '\\cos',
        '\\sin',
        '\\tan'
    ], 4000), Et('Trigonometry', [
        '\\arccos',
        '\\arcsin',
        '\\arctan',
        '\\arctg',
        '\\arcctg',
        '\\arcsec',
        '\\arccsc',
        '\\arsinh',
        '\\arcosh',
        '\\artanh',
        '\\arcsech',
        '\\arccsch',
        '\\arg',
        '\\ch',
        '\\cosec',
        '\\cosh',
        '\\cot',
        '\\cotg',
        '\\coth',
        '\\csc',
        '\\ctg',
        '\\cth',
        '\\lg',
        '\\lb',
        '\\sec',
        '\\sinh',
        '\\sh',
        '\\tanh',
        '\\tg',
        '\\th'
    ], 2000), Et('Functions', [
        '\\ln',
        '\\log',
        '\\exp',
        '\\lim'
    ], 4000), Et('Functions', [
        '\\dim',
        '\\ker',
        '\\deg',
        '\\det',
        '\\mod',
        '\\min',
        '\\max'
    ], 3000), Et('Functions', ['\\hom'], 1200), Et('Decoration', ['\\rule'], 200, '$0{2em}{1em}'), Et('Decoration', [
        '\\color',
        '\\textcolor'
    ], 200, '{$0{m0}A}{$0{m1}B}{$0{m2}C }{$0{m3}a}{$0{m4}b}{$0{m5}c}{$0{m6}8}'), Et('Decoration', [
        '\\overline',
        '\\underline'
    ], 3000, '$0{\\placeholder{}}'), Et('Decoration', ['\\enclose'], 1200, '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{x=0}'), Et('Decoration', ['\\fcolorbox'], 1200, '\\fcolorbox{#cd0030}{#ffd400}{\\unicode{"2B1A}}'), Et('Decoration', ['\\colorbox'], 1200, '\\colorbox{#fbc0bd}{\\unicode{"2B1A}}'), Et('Decoration', [
        '\\boxed',
        '\\cancel',
        '\\bcancel',
        '\\xcancel'
    ], 1200, '$0{\\placeholder{}}'), Et('Decoration', ['\\bbox'], 1200, '\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{"2B1A}}'), Et('Styling', ['\\mathbb'], 4000, '$0{Don Knuth}'), Et('Styling', [
        '\\textbf',
        '\\textup',
        '\\textit',
        '\\textrm',
        '\\textsf',
        '\\texttt',
        '\\textnormal',
        '\\textmd',
        '\\textsl',
        '\\textsc',
        '\\mathsf',
        '\\mathtt',
        '\\mathrm',
        '\\mathfrak',
        '\\mathcal',
        '\\mathscr',
        '\\mathbf',
        '\\mathmd',
        '\\mathit',
        '\\text',
        '\\mbox',
        '\\Bbb',
        '\\bold',
        '\\bm',
        '\\boldsymbol'
    ], 3000, '$0{Don Knuth}'), Et('Styling', [
        '\\frak',
        '\\tt',
        '\\bf',
        '\\it',
        '\\rmfamily',
        '\\sffamily',
        '\\ttfamily',
        '\\class',
        '\\cssId',
        '\\htmlData',
        '\\htmlStyle'
    ], 1200, '{$0 Don Knuth}'), Et('Styling', [
        '\\bfseries',
        '\\mdseries',
        '\\upshape',
        '\\slshape',
        '\\scshape'
    ], 1200, '\\text{$0 Don Knuth}'), Et('Styling', [
        '\\class',
        '\\cssId'
    ], 1200, '$0{testIdentifier}{Don Knuth}'), Et('Styling', ['\\fontseries'], 1200, '\\text{$0{b}Don Knuth}'), Et('Styling', ['\\fontfamily'], 1200, '\\text{$0{cmtt}Don Knuth}'), Et('Styling', ['\\fontshape'], 1200, '\\text{$0{sc}Don Knuth}'), Et('Styling', ['\\selectfont'], 1200, '\\text{$0}'), Et('Styling', ['\\emph'], 1200, 'Don$0{Knuth}'), Et('Styling', ['\\em'], 1200, 'Don{$0 Knuth}'), Et('Layout', [
        '\\mathop',
        '\\mathbin',
        '\\mathrel',
        '\\mathopen',
        '\\mathclose',
        '\\mathpunct',
        '\\mathord',
        '\\mathinner',
        '\\operatorname',
        '\\operatorname*'
    ], 1200, 'x=$0{arg}=0'), Et('Layout', ['\\middle'], 1200, '\\left\\{x$0|x>0\\right\\}'), Et('Layout', [
        '\\overset',
        '\\underset',
        '\\stackrel',
        '\\stackbin'
    ], 1200, '$0{arg}{x=0}'), Et('Layout', [
        '\\rlap',
        '\\mathrlap'
    ], 1200, '$0{/}0'), Et('Layout', [
        '\\llap',
        '\\mathllap'
    ], 1200, 'o$0{/}'), Et('Fractions', ['\\frac'], 4000, '$0{\\placeholder{}}{\\placeholder{}}'), Et('Fractions', [
        '\\binom',
        '\\dfrac',
        '\\tfrac',
        '\\dbinom',
        '\\tbinom',
        '\\pdiff',
        '\\cfrac'
    ], 1200, '$0{\\placeholder{}}{\\placeholder{}}'), Et('Fractions', [
        '\\over',
        '\\atop',
        '\\choose'
    ], 1200, '\\unicode{"2B1A} $0 \\unicode{"2B1A}'), Et('Fractions', [
        '\\overwithdelims',
        '\\atopwithdelims'
    ], 1200, '{\\unicode{"2B1A} $0{\\lbrace}{\\rbrace} \\unicode{"2B1A}}'), Et('Extensible Operators', [
        '\\sum',
        '\\prod',
        '\\bigcap',
        '\\bigcup',
        '\\int'
    ], 4000), Et('Extensible Operators', [
        '\\bigoplus',
        '\\smallint',
        '\\iint',
        '\\oint'
    ], 3000), Et('Extensible Operators', [
        '\\bigwedge',
        '\\bigvee',
        '\\coprod',
        '\\bigsqcup',
        '\\bigotimes',
        '\\bigodot',
        '\\biguplus',
        '\\intop',
        '\\sqcup',
        '\\sqcap',
        '\\uplus',
        '\\wr',
        '\\Cap',
        '\\Cup',
        '\\doublecap',
        '\\doublecup',
        '\\amalg',
        '\\iiint',
        '\\oiint',
        '\\oiiint',
        '\\intclockwise',
        '\\varointclockwise',
        '\\ointctrclockwise',
        '\\intctrclockwise'
    ], 1200), Et('Accents', ['\\vec'], 4000), Et('Accents', [
        '\\bar',
        '\\ddot',
        '\\acute',
        '\\tilde',
        '\\check'
    ], 3000, '$0{\\placeholder{}}'), Et('Accents', [
        '\\^',
        '\\`',
        '\\\''
    ], 1200, '$0{e}'), Et('Accents', ['\\c'], 1200, '$0{c}'), Et('Accents', ['\\~'], 1200, '$0{n}'), Et('Accents', [
        '\\mathring',
        '\\hat',
        '\\dot',
        '\\breve',
        '\\grave'
    ], 1200, '$0{\\placeholder{}}'), Et('Extensible Symbols', [
        '\\overrightarrow',
        '\\overleftarrow',
        '\\Overrightarrow',
        '\\overleftharpoon',
        '\\overrightharpoon',
        '\\overleftrightarrow',
        '\\overbrace',
        '\\overlinesegment',
        '\\overgroup',
        '\\widehat',
        '\\widecheck',
        '\\widetilde'
    ], 3000, '$0{ABC}'), Et('Extensible Symbols', [
        '\\underrightarrow',
        '\\underleftarrow',
        '\\underleftrightarrow',
        '\\underbrace',
        '\\underlinesegment',
        '\\undergroup',
        '\\utilde'
    ], 3000, '$0{ABC}'), Et('Sizing', [
        '\\tiny',
        '\\scriptsize',
        '\\footnotesize',
        '\\small',
        '\\normalsize',
        '\\large',
        '\\Large',
        '\\LARGE',
        '\\huge',
        '\\Huge'
    ], 1200, '$0{x=0}'), Et('Sizing', [
        '\\big',
        '\\Big',
        '\\bigg',
        '\\Bigg'
    ], 1200, '$0($0)'), Et('Sizing', [
        '\\bigl',
        '\\Bigl',
        '\\biggl',
        '\\Biggl'
    ], 1200, '$0('), Et('Sizing', [
        '\\bigr',
        '\\Bigr',
        '\\biggr',
        '\\Biggr'
    ], 1200, '$0)'), Et('Sizing', [
        '\\bigm',
        '\\Bigm',
        '\\biggm',
        '\\Biggm'
    ], 1200, '$0|'), Et('Letterlike Symbols', [
        '\\nabla',
        '\\partial',
        '\\N',
        '\\R',
        '\\Q',
        '\\C',
        '\\Z',
        '\\exponentialE',
        '\\forall',
        '\\exists',
        '\\nexists'
    ], 4000), Et('Letterlike Symbols', [
        '\\doubleStruckCapitalP',
        '\\P',
        '\\ell',
        '\\hbar',
        '\\hslash',
        '\\imath',
        '\\jmath',
        '\\imaginaryI',
        '\\imaginaryJ',
        '\\differentialD',
        '\\rd',
        '\\capitalDifferentialD',
        '\\doubleStruckCapitalN',
        '\\doubleStruckCapitalR',
        '\\doubleStruckCapitalQ',
        '\\doubleStruckCapitalC',
        '\\doubleStruckCapitalZ',
        '\\rD',
        '\\differencedelta',
        '\\mid',
        '@',
        '\\Re',
        '\\Im',
        '\\$',
        '\\%',
        '\\And',
        '\\degree'
    ], 3000), Et('Letterlike Symbols', [
        '\\top',
        '\\bot',
        '\\scriptCapitalE',
        '\\scriptCapitalH',
        '\\scriptCapitalL',
        '\\gothicCapitalC',
        '\\gothicCapitalH',
        '\\gothicCapitalI',
        '\\gothicCapitalR',
        '\\Bbbk',
        '\\Finv',
        '\\Game',
        '\\wp',
        '\\eth',
        '\\mho',
        '\\pounds',
        '\\yen',
        '\\euro'
    ], 1200), Et('Crosses', [
        '\\dagger',
        '\\dag'
    ], 4000), Et('Crosses', [
        '\\ddag',
        '\\ddagger',
        '\\maltese',
        '\\textdagger',
        '\\textdaggerdbl'
    ], 1200), Et('Various', [
        '\\checkmark',
        '\\diagup',
        '\\diagdown',
        '\\angle',
        '\\measuredangle',
        '\\sphericalangle',
        '\\prime',
        '\\doubleprime',
        '\\backprime',
        '\\backdoubleprime',
        '\\sharp',
        '\\flat',
        '\\natural',
        '\\&',
        '\\#',
        '\\clubsuit',
        '\\spadesuit',
        '\\diamondsuit',
        '\\heartsuit',
        '\\backslash',
        '\\infty',
        '/',
        '\\_',
        '\\/',
        '|',
        '\''
    ], 1200), Et('Various', ['\\unicode'], 1200, '$0{"2B1A}'), Et('Arrows', [
        '\\longrightarrow',
        '\\rightarrow',
        '\\Longrightarrow',
        '\\Rightarrow'
    ], 4000), Et('Arrows', [
        '\\longmapsto',
        '\\mapsto',
        '\\Longleftrightarrow',
        '\\rightleftarrows',
        '\\leftarrow',
        '\\curvearrowleft',
        '\\uparrow',
        '\\downarrow',
        '\\hookrightarrow',
        '\\rightharpoonup',
        '\\rightleftharpoons'
    ], 3000), Et('Arrows', [
        '\\Leftarrow',
        '\\longleftrightarrow',
        '\\longleftarrow',
        '\\Longleftarrow',
        '\\searrow',
        '\\nearrow',
        '\\swarrow',
        '\\nwarrow',
        '\\Uparrow',
        '\\Downarrow',
        '\\updownarrow',
        '\\Updownarrow',
        '\\hookleftarrow',
        '\\leftharpoonup',
        '\\leftharpoondown',
        '\\rightharpoondown',
        '\\leftrightarrows',
        '\\dashrightarrow',
        '\\dashleftarrow',
        '\\leftleftarrows',
        '\\Lleftarrow',
        '\\twoheadleftarrow',
        '\\leftarrowtail',
        '\\looparrowleft',
        '\\leftrightharpoons',
        '\\circlearrowleft',
        '\\Lsh',
        '\\upuparrows',
        '\\downharpoonleft',
        '\\multimap',
        '\\leftrightsquigarrow',
        '\\twoheadrightarrow',
        '\\rightarrowtail',
        '\\looparrowright',
        '\\curvearrowright',
        '\\circlearrowright',
        '\\Rsh',
        '\\downdownarrows',
        '\\upharpoonright',
        '\\downharpoonright',
        '\\rightsquigarrow',
        '\\leadsto',
        '\\Rrightarrow',
        '\\restriction'
    ], 1200), Et('Arrows', [
        '\\upharpoonleft',
        '\\rightrightarrows'
    ], 0), Et('Negated Arrows', [
        '\\nrightarrow',
        '\\nRightarrow',
        '\\nleftrightarrow',
        '\\nLeftrightarrow',
        '\\nleftarrow',
        '\\nLeftarrow'
    ], 1200), Et('Extensible Symbols', [
        '\\xrightarrow',
        '\\xleftarrow',
        '\\xRightarrow',
        '\\xLeftarrow',
        '\\xleftharpoonup',
        '\\xleftharpoondown',
        '\\xrightharpoonup',
        '\\xrightharpoondown',
        '\\xlongequal',
        '\\xtwoheadleftarrow',
        '\\xtwoheadrightarrow',
        '\\xleftrightarrow',
        '\\xLeftrightarrow',
        '\\xrightleftharpoons',
        '\\xleftrightharpoons',
        '\\xhookleftarrow',
        '\\xhookrightarrow',
        '\\xmapsto',
        '\\xtofrom',
        '\\xrightleftarrows',
        '\\xrightequilibrium',
        '\\xleftequilibrium'
    ], 1200, '$0[below]{above}=0'), Et('Negated Relations', [
        '\\nless',
        '\\nleqslant',
        '\\lneq',
        '\\lneqq',
        '\\nleqq',
        '\\unlhd',
        '\\unrhd',
        '\\lvertneqq',
        '\\lnsim',
        '\\lnapprox',
        '\\nprec',
        '\\npreceq',
        '\\precnsim',
        '\\precnapprox',
        '\\nsim',
        '\\nshortmid',
        '\\nmid',
        '\\nvdash',
        '\\nvDash',
        '\\ngtr',
        '\\ngeqslant',
        '\\ngeqq',
        '\\gneq',
        '\\gneqq',
        '\\gvertneqq',
        '\\gnsim',
        '\\nsucc',
        '\\succnsim',
        '\\ncong',
        '\\nshortparallel',
        '\\nparallel',
        '\\nVDash',
        '\\nVdash',
        '\\precneqq',
        '\\succneqq',
        '\\gnapprox',
        '\\succnapprox',
        '\\nsucceq'
    ], 1200), Et('Hebrew', [
        '\\aleph',
        '\\beth',
        '\\daleth',
        '\\gimel'
    ], 1200), Et('Fences', [
        '\\lbrace',
        '\\rbrace',
        '\\vert',
        '\\Vert',
        '\\{',
        '\\}',
        '(',
        ')',
        '[',
        ']'
    ], 4000), Et('Fences', [
        '\\langle',
        '\\rangle',
        '\\lfloor',
        '\\rfloor',
        '\\lceil',
        '\\rceil',
        '\\mvert',
        '\\|',
        '\\mVert'
    ], 3000), Et('Fences', [
        '\\lvert',
        '\\rvert',
        '\\lVert',
        '\\rVert',
        '\\lbrack',
        '\\rbrack',
        '\\ulcorner',
        '\\urcorner',
        '\\llcorner',
        '\\lrcorner',
        '\\lgroup',
        '\\rgroup',
        '\\lmoustache',
        '\\rmoustache'
    ], 1200), Et('Relations', [
        '=',
        '\\ne',
        '\\neq',
        '<',
        '>',
        '\\leqslant',
        '\\geqslant',
        '\\approx'
    ], 4000), Et('Relations', [
        '\\lt',
        '\\gt',
        '\\le',
        '\\ge',
        '\\leq',
        '\\geq',
        '\\gg',
        '\\cong',
        '\\equiv',
        '\\prec',
        '\\preceq',
        '\\succ',
        '\\perp',
        '\\parallel',
        '\\propto',
        '\\smile',
        '\\frown',
        '\\sim',
        '\\gtrsim'
    ], 3000), Et('Relations', [
        '\\coloneq',
        '\\succeq',
        '\\approxeq',
        '\\thickapprox',
        '\\lessapprox',
        '\\gtrapprox',
        '\\precapprox',
        '\\succapprox',
        '\\thicksim',
        '\\succsim',
        '\\precsim',
        '\\backsim',
        '\\eqsim',
        '\\backsimeq',
        '\\simeq',
        '\\lesssim',
        '\\nleq',
        '\\ngeq',
        '\\smallsmile',
        '\\smallfrown',
        '\\bowtie',
        '\\asymp',
        '\\leqq',
        '\\eqslantless',
        '\\ll',
        '\\lll',
        '\\lessgtr',
        '\\lesseqgtr',
        '\\lesseqqgtr',
        '\\risingdotseq',
        '\\fallingdotseq',
        '\\preccurlyeq',
        '\\curlyeqprec',
        '\\vDash',
        '\\Vvdash',
        '\\bumpeq',
        '\\Bumpeq',
        '\\geqq',
        '\\eqslantgtr',
        '\\ggg',
        '\\gtrless',
        '\\gtreqless',
        '\\gtreqqless',
        '\\succcurlyeq',
        '\\curlyeqsucc',
        '\\Vdash',
        '\\shortmid',
        '\\shortparallel',
        '\\between',
        '\\pitchfork',
        '\\varpropto',
        '\\backepsilon',
        '\\llless',
        '\\gggtr',
        '\\lhd',
        '\\rhd',
        '\\Join',
        '\\doteq',
        '\\doteqdot',
        '\\Doteq',
        '\\eqcirc',
        '\\circeq',
        '\\lessdot',
        '\\gtrdot',
        '\\measeq',
        '\\eqdef',
        '\\questeq'
    ], 1200), Et('Logic', [
        '\\leftrightarrow',
        '\\Leftrightarrow',
        '\\to'
    ], 4000), Et('Logic', [
        '\\models',
        '\\vdash'
    ], 3000), Et('Logic', [
        '\\therefore',
        '\\because',
        '\\implies',
        '\\gets',
        '\\dashv',
        '\\impliedby',
        '\\biconditional',
        '\\roundimplies'
    ], 1200), Et('Operators', [
        '+',
        '-',
        '*',
        '\\cdot'
    ], 4000), Et('Operators', ['\\sqrt'], 4000, '$0{\\placeholder{}}'), Et('Operators', [
        '\\pm',
        '\\mp',
        '\\times',
        '\\div',
        '\\surd'
    ], 3000), Et('Operators', [
        '\\ltimes',
        '\\rtimes',
        '\\leftthreetimes',
        '\\rightthreetimes',
        '\\intercal',
        '\\dotplus',
        '\\centerdot',
        '\\doublebarwedge',
        '\\divideontimes',
        '\\divides'
    ], 1200), Et('Logic', [
        '\\wedge',
        '\\vee',
        '\\neg'
    ], 4000), Et('Logic', ['\\lnot'], 3000), Et('Logic', [
        '\\land',
        '\\lor',
        '\\barwedge',
        '\\veebar',
        '\\nor',
        '\\curlywedge',
        '\\curlyvee'
    ], 1200), Et('Greek', [
        '\\alpha',
        '\\beta',
        '\\gamma',
        '\\delta',
        '\\epsilon',
        '\\varepsilon',
        '\\zeta',
        '\\eta',
        '\\theta',
        '\\vartheta',
        '\\iota',
        '\\kappa',
        '\\varkappa',
        '\\lambda',
        '\\mu',
        '\\nu',
        '\\xi',
        '\\pi',
        '\\varpi',
        '\\rho',
        '\\varrho',
        '\\sigma',
        '\\varsigma',
        '\\tau',
        '\\phi',
        '\\varphi',
        '\\upsilon',
        '\\chi',
        '\\psi',
        '\\omega',
        '\\Gamma',
        '\\Delta',
        '\\Theta',
        '\\Lambda',
        '\\Xi',
        '\\Pi',
        '\\Sigma',
        '\\Upsilon',
        '\\Phi',
        '\\Psi',
        '\\Omega',
        '\\digamma',
        '\\omicron'
    ], 3000), Et('Sets', [
        '\\emptyset',
        '\\varnothing',
        '\\cap',
        '\\cup',
        '\\in',
        '\\notin',
        '\\subset',
        '\\supset',
        '\\subseteq',
        '\\supseteq',
        '\\sqsubseteq'
    ], 4000), Et('Sets', [
        '\\setminus',
        '\\not',
        '\\ni',
        '\\sqsupseteq',
        '\\nsupseteqq',
        '\\supsetneq',
        '\\varsupsetneq',
        '\\supsetneqq',
        '\\varsupsetneqq'
    ], 3000), Et('Sets', [
        '\\smallsetminus',
        '\\complement',
        '\\owns',
        '\\subsetneq',
        '\\varsubsetneq',
        '\\subsetneqq',
        '\\varsubsetneqq',
        '\\nsubset',
        '\\nsupset',
        '\\nsubseteq',
        '\\nsupseteq',
        '\\nsubseteqq',
        '\\subseteqq',
        '\\Subset',
        '\\sqsubset',
        '\\supseteqq',
        '\\Supset',
        '\\sqsupset'
    ], 1200), Et('Spacing', [
        '\\space',
        '\\quad',
        '\\qquad'
    ], 3000, '\\unicode{"203A}$0\\unicode{"2039}'), Et('Spacing', [
        '\\!',
        '\\,',
        '\\:',
        '\\;',
        '\\enskip',
        '\\enspace'
    ], 1200, '\\unicode{"203A}$0\\unicode{"2039}'), Et('Spacing', [
        '\\hspace',
        '\\hspace*'
    ], 1200, '\\unicode{"203A}$0{1em}\\unicode{"2039}'), Et('Punctuation', [
        '\\colon',
        '\\cdotp',
        '\\ldots',
        '\\cdots',
        '\\ddots',
        '\\vdots',
        '?',
        '!',
        ':',
        '"',
        ',',
        '.',
        ';'
    ], 3000), Et('Punctuation', [
        '\\mathellipsis',
        '\\ldotp',
        '\\Colon'
    ], 1200), Et('Boxes', [
        '\\square',
        '\\Box'
    ], 3000), Et('Boxes', [
        '\\blacksquare',
        '\\boxminus',
        '\\boxplus',
        '\\boxtimes',
        '\\boxdot'
    ], 1200), Et('Circles', [
        '\\circ',
        '\\bullet',
        '\\circleddash',
        '\\oplus',
        '\\otimes'
    ], 3000), Et('Circles', [
        '\\bigcirc',
        '\\circledast',
        '\\ominus',
        '\\circledcirc',
        '\\oslash',
        '\\circledS',
        '\\circledR',
        '\\odot'
    ], 1200), Et('Triangles', [
        '\\triangle',
        '\\triangleq'
    ], 3000), Et('Triangles', [
        '\\bigtriangleup',
        '\\vartriangle',
        '\\triangledown',
        '\\bigtriangledown',
        '\\triangleleft',
        '\\vartriangleleft',
        '\\trianglelefteq',
        '\\ntriangleleft',
        '\\ntrianglelefteq',
        '\\triangleright',
        '\\vartriangleright',
        '\\trianglerighteq',
        '\\ntriangleright',
        '\\ntrianglerighteq',
        '\\blacktriangle',
        '\\blacktriangledown',
        '\\blacktriangleleft',
        '\\blacktriangleright'
    ], 1200), Et('Shapes', [
        '\\ast',
        '\\star'
    ], 3000), Et('Shapes', [
        '\\diamond',
        '\\Diamond',
        '\\lozenge',
        '\\blacklozenge',
        '\\bigstar'
    ], 1200);
});